// $ANTLR 3.2 Sep 23, 2009 14:05:07 uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g 2011-10-14 19:42:18

    package uk.ac.cam.ch.wwmm.pregenerated;
 

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class ChemicalChunkerParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Sentence", "Unmatched", "NounPhrase", "MultipleApparatus", "DissolvePhrase", "VerbPhrase", "CYCLES", "RATIO", "CITATION", "MIXTURE", "PrepPhrase", "TimePhrase", "RolePrepPhrase", "AtmospherePhrase", "TempPhrase", "AMOUNT", "MASS", "PERCENT", "VOLUME", "MOLAR", "PH", "EQUIVALENT", "YIELD", "APPARATUS", "MULTIPLE", "OSCARCM", "MOLECULE", "UNNAMEDMOLECULE", "QUANTITY", "OSCARONT", "PROCEDURE", "REFERENCETOCOMPOUND", "WS", "TOKEN", "'CD-ALPHANUM'", "'OSCAR-CJ'", "'OSCAR-RN'", "'OSCAR-ASE'", "'OSCAR-ONT'", "'TM-UNICODE'", "'CD-UNICODE'", "'JJ-CHEM'", "'JJ-COMPOUND'", "'IN-AS'", "'IN-BEFORE'", "'IN-AFTER'", "'IN-IN'", "'IN-INTO'", "'IN-WITH'", "'IN-WITHOUT'", "'IN-BY'", "'IN-VIA'", "'IN-OF'", "'IN-ON'", "'IN-FOR'", "'IN-FROM'", "'IN-UNDER'", "'IN-OVER'", "'IN-OFF'", "'NN-STATE'", "'NN-TIME'", "'NN-MASS'", "'NN-AMOUNT'", "'NN-MOLAR'", "'NN-ATMOSPHERE'", "'NN-EQ'", "'NN-VOL'", "'NN-CHEMENTITY'", "'NN-TEMP'", "'NN-PH'", "'NN-FLASH'", "'NN-GENERAL'", "'NN-METHOD'", "'NN-PRESSURE'", "'NN-COLUMN'", "'NN-CHROMATOGRAPHY'", "'NN-VACUUM'", "'NN-CYCLE'", "'NN-TIMES'", "'NN-EXAMPLE'", "'OSCAR-CM'", "'VB-USE'", "'VB-CHANGE'", "'VB-SUBMERGE'", "'VB-SUBJECT'", "'NN-ADD'", "'NN-MIXTURE'", "'VB-DILUTE'", "'VB-ADD'", "'VB-CHARGE'", "'VB-CONTAIN'", "'VB-DROP'", "'VB-FILL'", "'VB-SUSPEND'", "'VB-TREAT'", "'VB-APPARATUS'", "'NN-APPARATUS'", "'VB-CONCENTRATE'", "'NN-CONCENTRATE'", "'VB-COOL'", "'VB-DEGASS'", "'VB-DISSOLVE'", "'VB-DRY'", "'NN-DRY'", "'VB-EXTRACT'", "'NN-EXTRACT'", "'VB-FILTER'", "'NN-FILTER'", "'VB-HEAT'", "'VB-INCREASE'", "'VB-IMMERSE'", "'VB-PARTITION'", "'VB-PRECIPITATE'", "'NN-PRECIPITATE'", "'VB-PURIFY'", "'NN-PURIFY'", "'VB-QUENCH'", "'VB-RECOVER'", "'VB-REMOVE'", "'NN-REMOVE'", "'VB-STIR'", "'VB-SYNTHESIZE'", "'NN-SYNTHESIZE'", "'VB-WAIT'", "'VB-WASH'", "'VB-YIELD'", "'NN-YIELD'", "'RB-CONJ'", "'COLON'", "'COMMA'", "'APOST'", "'NEG'", "'DASH'", "'STOP'", "'NN-PERCENT'", "'LSQB'", "'RSQB'", "'NN-IDENTIFIER'", "'DT-THE'", "'-LRB-'", "'-RRB-'", "'CC'", "'CD'", "'DT'", "'EX'", "'FW'", "'IN'", "'JJ'", "'JJR'", "'JJS'", "'LS'", "'MD'", "'NN'", "'NNS'", "'NNP'", "'NNPS'", "'PDT'", "'POS'", "'PRP'", "'PRP$'", "'RB'", "'RBR'", "'RBS'", "'RP'", "'SYM'", "'TO'", "'UH'", "'VB'", "'VBD'", "'VBG'", "'VBN'", "'VBP'", "'VBZ'", "'WDT'", "'WP'", "'WP$'", "'WRB'"
    };
    public static final int DissolvePhrase=8;
    public static final int T__159=159;
    public static final int T__158=158;
    public static final int T__160=160;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int EOF=-1;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int QUANTITY=32;
    public static final int T__161=161;
    public static final int TOKEN=37;
    public static final int T__162=162;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int CYCLES=10;
    public static final int T__92=92;
    public static final int T__148=148;
    public static final int T__147=147;
    public static final int T__90=90;
    public static final int T__149=149;
    public static final int AMOUNT=19;
    public static final int T__154=154;
    public static final int CITATION=12;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__99=99;
    public static final int T__150=150;
    public static final int T__98=98;
    public static final int T__151=151;
    public static final int T__97=97;
    public static final int OSCARONT=33;
    public static final int T__152=152;
    public static final int T__96=96;
    public static final int T__153=153;
    public static final int T__95=95;
    public static final int T__139=139;
    public static final int T__138=138;
    public static final int T__137=137;
    public static final int T__136=136;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int MultipleApparatus=7;
    public static final int APPARATUS=27;
    public static final int T__141=141;
    public static final int T__85=85;
    public static final int T__142=142;
    public static final int T__84=84;
    public static final int T__87=87;
    public static final int T__140=140;
    public static final int T__86=86;
    public static final int T__145=145;
    public static final int T__89=89;
    public static final int MOLAR=23;
    public static final int TimePhrase=15;
    public static final int T__146=146;
    public static final int T__88=88;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int PrepPhrase=14;
    public static final int T__126=126;
    public static final int T__125=125;
    public static final int T__128=128;
    public static final int T__127=127;
    public static final int WS=36;
    public static final int T__71=71;
    public static final int T__129=129;
    public static final int T__72=72;
    public static final int RATIO=11;
    public static final int T__70=70;
    public static final int PH=24;
    public static final int T__76=76;
    public static final int T__75=75;
    public static final int AtmospherePhrase=17;
    public static final int T__130=130;
    public static final int T__74=74;
    public static final int T__131=131;
    public static final int T__73=73;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__79=79;
    public static final int T__134=134;
    public static final int T__78=78;
    public static final int T__135=135;
    public static final int T__77=77;
    public static final int T__68=68;
    public static final int NounPhrase=6;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int TempPhrase=18;
    public static final int T__65=65;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int VerbPhrase=9;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int T__123=123;
    public static final int T__122=122;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int UNNAMEDMOLECULE=31;
    public static final int REFERENCETOCOMPOUND=35;
    public static final int T__61=61;
    public static final int T__60=60;
    public static final int MULTIPLE=28;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int MOLECULE=30;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__59=59;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int YIELD=26;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int T__112=112;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int Unmatched=5;
    public static final int T__43=43;
    public static final int RolePrepPhrase=16;
    public static final int T__40=40;
    public static final int T__41=41;
    public static final int T__46=46;
    public static final int T__47=47;
    public static final int PERCENT=21;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__180=180;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int EQUIVALENT=25;
    public static final int PROCEDURE=34;
    public static final int T__175=175;
    public static final int MIXTURE=13;
    public static final int T__174=174;
    public static final int T__173=173;
    public static final int T__172=172;
    public static final int T__179=179;
    public static final int T__178=178;
    public static final int T__177=177;
    public static final int T__176=176;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int VOLUME=22;
    public static final int T__171=171;
    public static final int T__170=170;
    public static final int Sentence=4;
    public static final int T__169=169;
    public static final int OSCARCM=29;
    public static final int MASS=20;

    // delegates
    // delegators


        public ChemicalChunkerParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public ChemicalChunkerParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[794+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return ChemicalChunkerParser.tokenNames; }
    public String getGrammarFileName() { return "uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g"; }


    public boolean isAtTokenPositionZero(TokenStream stream){
    	return stream.index()==0;
    }

    public boolean followedByVBDorVBZthenVBYIELDed(TokenStream stream){
    	String nextTokenTypeStr = stream.LT(1).getText();
    	if ("VBD".equals(nextTokenTypeStr) || "VBZ".equals(nextTokenTypeStr)){
    		String twoAheadTypeStr = stream.LT(3).getText();
    		if ("VB-YIELD".equals(twoAheadTypeStr)){
    			String twoAheadTokenText = stream.LT(4).getText();
    			if (twoAheadTokenText !=null && twoAheadTokenText.toLowerCase().endsWith("ed")){
    				return true;
    			}
    		}
    	}
    	return false;
    }

    public boolean cdHasRoleOtherThanIdentifier(TokenStream stream){
    	String nextTokenTypeStr = stream.LT(1).getText();
    	if (isQuantityUnit(nextTokenTypeStr)){
    		return true;//quantity
    	}
    	if ("NN-TIMES".equals(nextTokenTypeStr)){
    		return true;//e.g. washed with the compound 3 times
    	}
    	if ("COLON".equals(nextTokenTypeStr)){
    		String twoAheadTypeStr = stream.LT(3).getText();
    		if ("CD".equals(twoAheadTypeStr)){
    			String threeAheadTypeStr = stream.LT(5).getText();
    			if (!isQuantityUnit(threeAheadTypeStr)){
    				return true;//ratio
    			}
    		}
    	}
    	return false;
    }

    public boolean followedByQuantityUnits(TokenStream stream){
    	String nextTokenTypeStr = stream.LT(1).getText();
    	return isQuantityUnit(nextTokenTypeStr);
    }

    public boolean isQuantityUnit(String tokenType){
    	return ("NN-MOLAR".equals(tokenType) || "NN-AMOUNT".equals(tokenType) ||
    			"NN-MASS".equals(tokenType) || "NN-VOL".equals(tokenType) ||
    			"NN-EQ".equals(tokenType) || "NN-PERCENT".equals(tokenType));
    }

    public boolean precededByProduct(TokenStream stream){
    	Token previousToken = stream.LT(-1);
    	if (previousToken !=null && previousToken.getText().equalsIgnoreCase("product")){
    		return true;
    	}
    	return false;
    }

    public boolean suitableVbYieldOrSynthesizeForReference(TokenStream stream){
    	Token nextTokenType = stream.LT(1);
    	if ("VB-YIELD".equals(nextTokenType.getText()) || "VB-SYNTHESIZE".equals(nextTokenType.getText())){
    		String nextTokenText = stream.LT(2).getText();
    		if (nextTokenText !=null && nextTokenText.toLowerCase().endsWith("ed")){
    			return true;
    		}
    	}
    	return false;
    }

    public boolean nextIsSemiColon(TokenStream stream){
    	Token nextTokenType = stream.LT(1);
    	if ("STOP".equals(nextTokenType.getText())){
    		String nextTokenText = stream.LT(2).getText();
    		if (nextTokenText !=null && nextTokenText.equals(";")){
    			return true;
    		}
    	}
    	return false;
    }

    public boolean notFollowedByBracketedYear(TokenStream stream){
    	Token nextTokenType = stream.LT(1);
    	if ("-LRB-".equals(nextTokenType.getText())){
    		Token nextNextTokenType = stream.LT(3);
    		if ("CD".equals(nextNextTokenType.getText())){
    			String nextNextTokenText = stream.LT(4).getText();
    			if (nextNextTokenText !=null){
    				try{
    					int i = Integer.parseInt(nextNextTokenText);
    					if (i >1000){
    						return false;
    					}
    				}
    				catch (NumberFormatException e) {
    				}
    			}
    		}
    	}
    	return true;
    }


    public static class document_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "document"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:1: document : ( sentence )+ -> ( ^( Sentence sentence ) )+ ;
    public final ChemicalChunkerParser.document_return document() throws RecognitionException {
        ChemicalChunkerParser.document_return retval = new ChemicalChunkerParser.document_return();
        retval.start = input.LT(1);
        int document_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.sentence_return sentence1 = null;


        RewriteRuleSubtreeStream stream_sentence=new RewriteRuleSubtreeStream(adaptor,"rule sentence");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:9: ( ( sentence )+ -> ( ^( Sentence sentence ) )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:11: ( sentence )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:11: ( sentence )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                switch ( input.LA(1) ) {
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 117:
                case 118:
                case 119:
                case 120:
                case 121:
                case 122:
                case 123:
                case 124:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 130:
                case 131:
                case 132:
                case 133:
                case 134:
                case 135:
                case 136:
                case 138:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 158:
                case 159:
                case 160:
                case 161:
                case 162:
                case 163:
                case 164:
                case 165:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 180:
                    {
                    alt1=1;
                    }
                    break;

                }

                switch (alt1) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: sentence
            	    {
            	    pushFollow(FOLLOW_sentence_in_document202_static.FOLLOW_sentence_in_document202);
            	    sentence1=sentence();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sentence.add(sentence1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);



            // AST REWRITE
            // elements: sentence
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 158:20: -> ( ^( Sentence sentence ) )+
            {
                if ( !(stream_sentence.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_sentence.hasNext() ) {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:23: ^( Sentence sentence )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Sentence, "Sentence"), root_1);

                    adaptor.addChild(root_1, stream_sentence.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_sentence.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, document_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "document"

    public static class sentence_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentence"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:1: sentence : ( procedureNounPhrase | ( sentenceStructure | unmatchedPhrase )+ ) ( stop )* ;
    public final ChemicalChunkerParser.sentence_return sentence() throws RecognitionException {
        ChemicalChunkerParser.sentence_return retval = new ChemicalChunkerParser.sentence_return();
        retval.start = input.LT(1);
        int sentence_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.procedureNounPhrase_return procedureNounPhrase2 = null;

        ChemicalChunkerParser.sentenceStructure_return sentenceStructure3 = null;

        ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase4 = null;

        ChemicalChunkerParser.stop_return stop5 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:9: ( ( procedureNounPhrase | ( sentenceStructure | unmatchedPhrase )+ ) ( stop )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:11: ( procedureNounPhrase | ( sentenceStructure | unmatchedPhrase )+ ) ( stop )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:11: ( procedureNounPhrase | ( sentenceStructure | unmatchedPhrase )+ )
            int alt3=2;
            alt3 = dfa3.predict(input);
            switch (alt3) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:12: procedureNounPhrase
                    {
                    pushFollow(FOLLOW_procedureNounPhrase_in_sentence222_static.FOLLOW_procedureNounPhrase_in_sentence222);
                    procedureNounPhrase2=procedureNounPhrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureNounPhrase2.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:34: ( sentenceStructure | unmatchedPhrase )+
                    {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:34: ( sentenceStructure | unmatchedPhrase )+
                    int cnt2=0;
                    loop2:
                    do {
                        int alt2=3;
                        alt2 = dfa2.predict(input);
                        switch (alt2) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:35: sentenceStructure
                    	    {
                    	    pushFollow(FOLLOW_sentenceStructure_in_sentence227_static.FOLLOW_sentenceStructure_in_sentence227);
                    	    sentenceStructure3=sentenceStructure();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentenceStructure3.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:53: unmatchedPhrase
                    	    {
                    	    pushFollow(FOLLOW_unmatchedPhrase_in_sentence229_static.FOLLOW_unmatchedPhrase_in_sentence229);
                    	    unmatchedPhrase4=unmatchedPhrase();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unmatchedPhrase4.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt2 >= 1 ) break loop2;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(2, input);
                                throw eee;
                        }
                        cnt2++;
                    } while (true);


                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:72: ( stop )*
            loop4:
            do {
                int alt4=2;
                switch ( input.LA(1) ) {
                case 137:
                    {
                    alt4=1;
                    }
                    break;

                }

                switch (alt4) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_sentence234_static.FOLLOW_stop_in_sentence234);
            	    stop5=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop5.getTree());

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, sentence_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sentence"

    public static class sentenceStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentenceStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:1: sentenceStructure : ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )* ;
    public final ChemicalChunkerParser.sentenceStructure_return sentenceStructure() throws RecognitionException {
        ChemicalChunkerParser.sentenceStructure_return retval = new ChemicalChunkerParser.sentenceStructure_return();
        retval.start = input.LT(1);
        int sentenceStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase6 = null;

        ChemicalChunkerParser.verbphrase_return verbphrase7 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase8 = null;

        ChemicalChunkerParser.prepphraseAfter_return prepphraseAfter9 = null;

        ChemicalChunkerParser.advAdj_return advAdj10 = null;

        ChemicalChunkerParser.colon_return colon11 = null;

        ChemicalChunkerParser.conjunction_return conjunction12 = null;

        ChemicalChunkerParser.rbconj_return rbconj13 = null;

        ChemicalChunkerParser.comma_return comma14 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:18: ( ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+
            int cnt5=0;
            loop5:
            do {
                int alt5=5;
                alt5 = dfa5.predict(input);
                switch (alt5) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:22: nounphrase
            	    {
            	    pushFollow(FOLLOW_nounphrase_in_sentenceStructure244_static.FOLLOW_nounphrase_in_sentenceStructure244);
            	    nounphrase6=nounphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphrase6.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:33: verbphrase
            	    {
            	    pushFollow(FOLLOW_verbphrase_in_sentenceStructure246_static.FOLLOW_verbphrase_in_sentenceStructure246);
            	    verbphrase7=verbphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verbphrase7.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:44: prepphrase
            	    {
            	    pushFollow(FOLLOW_prepphrase_in_sentenceStructure248_static.FOLLOW_prepphrase_in_sentenceStructure248);
            	    prepphrase8=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase8.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:55: prepphraseAfter
            	    {
            	    pushFollow(FOLLOW_prepphraseAfter_in_sentenceStructure250_static.FOLLOW_prepphraseAfter_in_sentenceStructure250);
            	    prepphraseAfter9=prepphraseAfter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAfter9.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt5 >= 1 ) break loop5;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(5, input);
                        throw eee;
                }
                cnt5++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:73: ( advAdj | colon )*
            loop6:
            do {
                int alt6=3;
                alt6 = dfa6.predict(input);
                switch (alt6) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:74: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_sentenceStructure255_static.FOLLOW_advAdj_in_sentenceStructure255);
            	    advAdj10=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj10.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:81: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_sentenceStructure257_static.FOLLOW_colon_in_sentenceStructure257);
            	    colon11=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon11.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:89: ( conjunction | rbconj | comma )*
            loop7:
            do {
                int alt7=4;
                alt7 = dfa7.predict(input);
                switch (alt7) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:90: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_sentenceStructure262_static.FOLLOW_conjunction_in_sentenceStructure262);
            	    conjunction12=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction12.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:102: rbconj
            	    {
            	    pushFollow(FOLLOW_rbconj_in_sentenceStructure264_static.FOLLOW_rbconj_in_sentenceStructure264);
            	    rbconj13=rbconj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj13.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:109: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_sentenceStructure266_static.FOLLOW_comma_in_sentenceStructure266);
            	    comma14=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma14.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, sentenceStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sentenceStructure"

    public static class unmatchedPhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedPhrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:164:1: unmatchedPhrase : unmatchedToken -> ^( Unmatched unmatchedToken ) ;
    public final ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase() throws RecognitionException {
        ChemicalChunkerParser.unmatchedPhrase_return retval = new ChemicalChunkerParser.unmatchedPhrase_return();
        retval.start = input.LT(1);
        int unmatchedPhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unmatchedToken_return unmatchedToken15 = null;


        RewriteRuleSubtreeStream stream_unmatchedToken=new RewriteRuleSubtreeStream(adaptor,"rule unmatchedToken");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:165:2: ( unmatchedToken -> ^( Unmatched unmatchedToken ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:165:5: unmatchedToken
            {
            pushFollow(FOLLOW_unmatchedToken_in_unmatchedPhrase278_static.FOLLOW_unmatchedToken_in_unmatchedPhrase278);
            unmatchedToken15=unmatchedToken();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unmatchedToken.add(unmatchedToken15.getTree());


            // AST REWRITE
            // elements: unmatchedToken
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 165:20: -> ^( Unmatched unmatchedToken )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:165:23: ^( Unmatched unmatchedToken )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Unmatched, "Unmatched"), root_1);

                adaptor.addChild(root_1, stream_unmatchedToken.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, unmatchedPhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unmatchedPhrase"

    public static class unmatchedToken_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedToken"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:1: unmatchedToken : ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | percentsign | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier ) ;
    public final ChemicalChunkerParser.unmatchedToken_return unmatchedToken() throws RecognitionException {
        ChemicalChunkerParser.unmatchedToken_return retval = new ChemicalChunkerParser.unmatchedToken_return();
        retval.start = input.LT(1);
        int unmatchedToken_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric16 = null;

        ChemicalChunkerParser.advAdj_return advAdj17 = null;

        ChemicalChunkerParser.tmunicode_return tmunicode18 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode19 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp20 = null;

        ChemicalChunkerParser.inAll_return inAll21 = null;

        ChemicalChunkerParser.nnexample_return nnexample22 = null;

        ChemicalChunkerParser.nnstate_return nnstate23 = null;

        ChemicalChunkerParser.nntime_return nntime24 = null;

        ChemicalChunkerParser.nnmass_return nnmass25 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar26 = null;

        ChemicalChunkerParser.nnamount_return nnamount27 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere28 = null;

        ChemicalChunkerParser.nneq_return nneq29 = null;

        ChemicalChunkerParser.nnvol_return nnvol30 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity31 = null;

        ChemicalChunkerParser.nntemp_return nntemp32 = null;

        ChemicalChunkerParser.nnph_return nnph33 = null;

        ChemicalChunkerParser.nnflash_return nnflash34 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral35 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod36 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure37 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn38 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography39 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum40 = null;

        ChemicalChunkerParser.nncycle_return nncycle41 = null;

        ChemicalChunkerParser.nntimes_return nntimes42 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm43 = null;

        ChemicalChunkerParser.oscaronts_return oscaronts44 = null;

        ChemicalChunkerParser.oscarase_return oscarase45 = null;

        ChemicalChunkerParser.verb_return verb46 = null;

        ChemicalChunkerParser.nnadd_return nnadd47 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture48 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus49 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate50 = null;

        ChemicalChunkerParser.nndry_return nndry51 = null;

        ChemicalChunkerParser.nnextract_return nnextract52 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter53 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate54 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify55 = null;

        ChemicalChunkerParser.nnremove_return nnremove56 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize57 = null;

        ChemicalChunkerParser.nnyield_return nnyield58 = null;

        ChemicalChunkerParser.colon_return colon59 = null;

        ChemicalChunkerParser.apost_return apost60 = null;

        ChemicalChunkerParser.neg_return neg61 = null;

        ChemicalChunkerParser.dash_return dash62 = null;

        ChemicalChunkerParser.percentsign_return percentsign63 = null;

        ChemicalChunkerParser.lsqb_return lsqb64 = null;

        ChemicalChunkerParser.rsqb_return rsqb65 = null;

        ChemicalChunkerParser.lrb_return lrb66 = null;

        ChemicalChunkerParser.rrb_return rrb67 = null;

        ChemicalChunkerParser.cc_return cc68 = null;

        ChemicalChunkerParser.dt_return dt69 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE70 = null;

        ChemicalChunkerParser.fw_return fw71 = null;

        ChemicalChunkerParser.md_return md72 = null;

        ChemicalChunkerParser.nn_return nn73 = null;

        ChemicalChunkerParser.nns_return nns74 = null;

        ChemicalChunkerParser.nnp_return nnp75 = null;

        ChemicalChunkerParser.prp_return prp76 = null;

        ChemicalChunkerParser.prp_poss_return prp_poss77 = null;

        ChemicalChunkerParser.rbconj_return rbconj78 = null;

        ChemicalChunkerParser.sym_return sym79 = null;

        ChemicalChunkerParser.uh_return uh80 = null;

        ChemicalChunkerParser.clause_return clause81 = null;

        ChemicalChunkerParser.comma_return comma82 = null;

        ChemicalChunkerParser.ls_return ls83 = null;

        ChemicalChunkerParser.nnps_return nnps84 = null;

        ChemicalChunkerParser.pos_return pos85 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier86 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:2: ( ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | percentsign | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:4: ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | percentsign | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:4: ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | percentsign | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier )
            int alt8=71;
            switch ( input.LA(1) ) {
            case 38:
            case 146:
                {
                alt8=1;
                }
                break;
            case 39:
            case 40:
            case 45:
            case 151:
            case 152:
            case 153:
            case 164:
            case 165:
            case 166:
            case 167:
                {
                alt8=2;
                }
                break;
            case 43:
                {
                alt8=3;
                }
                break;
            case 44:
                {
                alt8=4;
                }
                break;
            case 46:
                {
                alt8=5;
                }
                break;
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 150:
            case 169:
                {
                alt8=6;
                }
                break;
            case 83:
                {
                alt8=7;
                }
                break;
            case 63:
                {
                alt8=8;
                }
                break;
            case 64:
                {
                alt8=9;
                }
                break;
            case 65:
                {
                alt8=10;
                }
                break;
            case 67:
                {
                alt8=11;
                }
                break;
            case 66:
                {
                alt8=12;
                }
                break;
            case 68:
                {
                alt8=13;
                }
                break;
            case 69:
                {
                alt8=14;
                }
                break;
            case 70:
                {
                alt8=15;
                }
                break;
            case 71:
                {
                alt8=16;
                }
                break;
            case 72:
                {
                alt8=17;
                }
                break;
            case 73:
                {
                alt8=18;
                }
                break;
            case 74:
                {
                alt8=19;
                }
                break;
            case 75:
                {
                alt8=20;
                }
                break;
            case 76:
                {
                alt8=21;
                }
                break;
            case 77:
                {
                alt8=22;
                }
                break;
            case 78:
                {
                alt8=23;
                }
                break;
            case 79:
                {
                alt8=24;
                }
                break;
            case 80:
                {
                alt8=25;
                }
                break;
            case 81:
                {
                alt8=26;
                }
                break;
            case 82:
                {
                alt8=27;
                }
                break;
            case 84:
                {
                alt8=28;
                }
                break;
            case 42:
                {
                alt8=29;
                }
                break;
            case 41:
                {
                alt8=30;
                }
                break;
            case 85:
            case 86:
            case 87:
            case 88:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 110:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 118:
            case 120:
            case 121:
            case 122:
            case 124:
            case 125:
            case 127:
            case 128:
            case 129:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
                {
                alt8=31;
                }
                break;
            case 89:
                {
                alt8=32;
                }
                break;
            case 90:
                {
                alt8=33;
                }
                break;
            case 100:
                {
                alt8=34;
                }
                break;
            case 102:
                {
                alt8=35;
                }
                break;
            case 107:
                {
                alt8=36;
                }
                break;
            case 109:
                {
                alt8=37;
                }
                break;
            case 111:
                {
                alt8=38;
                }
                break;
            case 117:
                {
                alt8=39;
                }
                break;
            case 119:
                {
                alt8=40;
                }
                break;
            case 123:
                {
                alt8=41;
                }
                break;
            case 126:
                {
                alt8=42;
                }
                break;
            case 130:
                {
                alt8=43;
                }
                break;
            case 132:
                {
                alt8=44;
                }
                break;
            case 134:
                {
                alt8=45;
                }
                break;
            case 135:
                {
                alt8=46;
                }
                break;
            case 136:
                {
                alt8=47;
                }
                break;
            case 138:
                {
                alt8=48;
                }
                break;
            case 139:
                {
                alt8=49;
                }
                break;
            case 140:
                {
                alt8=50;
                }
                break;
            case 143:
                {
                alt8=51;
                }
                break;
            case 144:
                {
                alt8=52;
                }
                break;
            case 145:
                {
                alt8=53;
                }
                break;
            case 147:
                {
                alt8=54;
                }
                break;
            case 142:
                {
                alt8=55;
                }
                break;
            case 149:
                {
                alt8=56;
                }
                break;
            case 155:
                {
                alt8=57;
                }
                break;
            case 156:
                {
                alt8=58;
                }
                break;
            case 157:
                {
                alt8=59;
                }
                break;
            case 158:
                {
                alt8=60;
                }
                break;
            case 162:
                {
                alt8=61;
                }
                break;
            case 163:
                {
                alt8=62;
                }
                break;
            case 131:
                {
                alt8=63;
                }
                break;
            case 168:
                {
                alt8=64;
                }
                break;
            case 170:
                {
                alt8=65;
                }
                break;
            case 148:
            case 160:
            case 177:
            case 178:
            case 179:
            case 180:
                {
                alt8=66;
                }
                break;
            case 133:
                {
                alt8=67;
                }
                break;
            case 154:
                {
                alt8=68;
                }
                break;
            case 159:
                {
                alt8=69;
                }
                break;
            case 161:
                {
                alt8=70;
                }
                break;
            case 141:
                {
                alt8=71;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;
            }

            switch (alt8) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:5: numeric
                    {
                    pushFollow(FOLLOW_numeric_in_unmatchedToken297_static.FOLLOW_numeric_in_unmatchedToken297);
                    numeric16=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric16.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:13: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_unmatchedToken299_static.FOLLOW_advAdj_in_unmatchedToken299);
                    advAdj17=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj17.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:20: tmunicode
                    {
                    pushFollow(FOLLOW_tmunicode_in_unmatchedToken301_static.FOLLOW_tmunicode_in_unmatchedToken301);
                    tmunicode18=tmunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tmunicode18.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:30: cdunicode
                    {
                    pushFollow(FOLLOW_cdunicode_in_unmatchedToken303_static.FOLLOW_cdunicode_in_unmatchedToken303);
                    cdunicode19=cdunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdunicode19.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:40: jjcomp
                    {
                    pushFollow(FOLLOW_jjcomp_in_unmatchedToken305_static.FOLLOW_jjcomp_in_unmatchedToken305);
                    jjcomp20=jjcomp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp20.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:47: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_unmatchedToken307_static.FOLLOW_inAll_in_unmatchedToken307);
                    inAll21=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll21.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:2: nnexample
                    {
                    pushFollow(FOLLOW_nnexample_in_unmatchedToken311_static.FOLLOW_nnexample_in_unmatchedToken311);
                    nnexample22=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample22.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:12: nnstate
                    {
                    pushFollow(FOLLOW_nnstate_in_unmatchedToken313_static.FOLLOW_nnstate_in_unmatchedToken313);
                    nnstate23=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate23.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:20: nntime
                    {
                    pushFollow(FOLLOW_nntime_in_unmatchedToken315_static.FOLLOW_nntime_in_unmatchedToken315);
                    nntime24=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime24.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:27: nnmass
                    {
                    pushFollow(FOLLOW_nnmass_in_unmatchedToken317_static.FOLLOW_nnmass_in_unmatchedToken317);
                    nnmass25=nnmass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmass25.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:34: nnmolar
                    {
                    pushFollow(FOLLOW_nnmolar_in_unmatchedToken319_static.FOLLOW_nnmolar_in_unmatchedToken319);
                    nnmolar26=nnmolar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmolar26.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:42: nnamount
                    {
                    pushFollow(FOLLOW_nnamount_in_unmatchedToken321_static.FOLLOW_nnamount_in_unmatchedToken321);
                    nnamount27=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount27.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:51: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_unmatchedToken323_static.FOLLOW_nnatmosphere_in_unmatchedToken323);
                    nnatmosphere28=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere28.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:64: nneq
                    {
                    pushFollow(FOLLOW_nneq_in_unmatchedToken325_static.FOLLOW_nneq_in_unmatchedToken325);
                    nneq29=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq29.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:69: nnvol
                    {
                    pushFollow(FOLLOW_nnvol_in_unmatchedToken327_static.FOLLOW_nnvol_in_unmatchedToken327);
                    nnvol30=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol30.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:75: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_unmatchedToken329_static.FOLLOW_nnchementity_in_unmatchedToken329);
                    nnchementity31=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity31.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:88: nntemp
                    {
                    pushFollow(FOLLOW_nntemp_in_unmatchedToken331_static.FOLLOW_nntemp_in_unmatchedToken331);
                    nntemp32=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp32.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:95: nnph
                    {
                    pushFollow(FOLLOW_nnph_in_unmatchedToken333_static.FOLLOW_nnph_in_unmatchedToken333);
                    nnph33=nnph();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnph33.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:100: nnflash
                    {
                    pushFollow(FOLLOW_nnflash_in_unmatchedToken335_static.FOLLOW_nnflash_in_unmatchedToken335);
                    nnflash34=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash34.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:108: nngeneral
                    {
                    pushFollow(FOLLOW_nngeneral_in_unmatchedToken337_static.FOLLOW_nngeneral_in_unmatchedToken337);
                    nngeneral35=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral35.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:118: nnmethod
                    {
                    pushFollow(FOLLOW_nnmethod_in_unmatchedToken339_static.FOLLOW_nnmethod_in_unmatchedToken339);
                    nnmethod36=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod36.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:127: nnpressure
                    {
                    pushFollow(FOLLOW_nnpressure_in_unmatchedToken341_static.FOLLOW_nnpressure_in_unmatchedToken341);
                    nnpressure37=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure37.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:138: nncolumn
                    {
                    pushFollow(FOLLOW_nncolumn_in_unmatchedToken343_static.FOLLOW_nncolumn_in_unmatchedToken343);
                    nncolumn38=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn38.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:147: nnchromatography
                    {
                    pushFollow(FOLLOW_nnchromatography_in_unmatchedToken345_static.FOLLOW_nnchromatography_in_unmatchedToken345);
                    nnchromatography39=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography39.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:164: nnvacuum
                    {
                    pushFollow(FOLLOW_nnvacuum_in_unmatchedToken347_static.FOLLOW_nnvacuum_in_unmatchedToken347);
                    nnvacuum40=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum40.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:173: nncycle
                    {
                    pushFollow(FOLLOW_nncycle_in_unmatchedToken349_static.FOLLOW_nncycle_in_unmatchedToken349);
                    nncycle41=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle41.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:181: nntimes
                    {
                    pushFollow(FOLLOW_nntimes_in_unmatchedToken351_static.FOLLOW_nntimes_in_unmatchedToken351);
                    nntimes42=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes42.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:2: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_unmatchedToken355_static.FOLLOW_oscarcm_in_unmatchedToken355);
                    oscarcm43=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm43.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:10: oscaronts
                    {
                    pushFollow(FOLLOW_oscaronts_in_unmatchedToken357_static.FOLLOW_oscaronts_in_unmatchedToken357);
                    oscaronts44=oscaronts();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaronts44.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:20: oscarase
                    {
                    pushFollow(FOLLOW_oscarase_in_unmatchedToken359_static.FOLLOW_oscarase_in_unmatchedToken359);
                    oscarase45=oscarase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase45.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:29: verb
                    {
                    pushFollow(FOLLOW_verb_in_unmatchedToken361_static.FOLLOW_verb_in_unmatchedToken361);
                    verb46=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb46.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:34: nnadd
                    {
                    pushFollow(FOLLOW_nnadd_in_unmatchedToken363_static.FOLLOW_nnadd_in_unmatchedToken363);
                    nnadd47=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd47.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:40: nnmixture
                    {
                    pushFollow(FOLLOW_nnmixture_in_unmatchedToken365_static.FOLLOW_nnmixture_in_unmatchedToken365);
                    nnmixture48=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture48.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:50: nnapparatus
                    {
                    pushFollow(FOLLOW_nnapparatus_in_unmatchedToken367_static.FOLLOW_nnapparatus_in_unmatchedToken367);
                    nnapparatus49=nnapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus49.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:62: nnconcentrate
                    {
                    pushFollow(FOLLOW_nnconcentrate_in_unmatchedToken369_static.FOLLOW_nnconcentrate_in_unmatchedToken369);
                    nnconcentrate50=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate50.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:76: nndry
                    {
                    pushFollow(FOLLOW_nndry_in_unmatchedToken371_static.FOLLOW_nndry_in_unmatchedToken371);
                    nndry51=nndry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nndry51.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:82: nnextract
                    {
                    pushFollow(FOLLOW_nnextract_in_unmatchedToken373_static.FOLLOW_nnextract_in_unmatchedToken373);
                    nnextract52=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract52.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:92: nnfilter
                    {
                    pushFollow(FOLLOW_nnfilter_in_unmatchedToken375_static.FOLLOW_nnfilter_in_unmatchedToken375);
                    nnfilter53=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter53.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:101: nnprecipitate
                    {
                    pushFollow(FOLLOW_nnprecipitate_in_unmatchedToken377_static.FOLLOW_nnprecipitate_in_unmatchedToken377);
                    nnprecipitate54=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate54.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:115: nnpurify
                    {
                    pushFollow(FOLLOW_nnpurify_in_unmatchedToken379_static.FOLLOW_nnpurify_in_unmatchedToken379);
                    nnpurify55=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify55.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:124: nnremove
                    {
                    pushFollow(FOLLOW_nnremove_in_unmatchedToken381_static.FOLLOW_nnremove_in_unmatchedToken381);
                    nnremove56=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove56.getTree());

                    }
                    break;
                case 42 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:133: nnsynthesize
                    {
                    pushFollow(FOLLOW_nnsynthesize_in_unmatchedToken383_static.FOLLOW_nnsynthesize_in_unmatchedToken383);
                    nnsynthesize57=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize57.getTree());

                    }
                    break;
                case 43 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:146: nnyield
                    {
                    pushFollow(FOLLOW_nnyield_in_unmatchedToken385_static.FOLLOW_nnyield_in_unmatchedToken385);
                    nnyield58=nnyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield58.getTree());

                    }
                    break;
                case 44 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:154: colon
                    {
                    pushFollow(FOLLOW_colon_in_unmatchedToken387_static.FOLLOW_colon_in_unmatchedToken387);
                    colon59=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon59.getTree());

                    }
                    break;
                case 45 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:160: apost
                    {
                    pushFollow(FOLLOW_apost_in_unmatchedToken389_static.FOLLOW_apost_in_unmatchedToken389);
                    apost60=apost();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apost60.getTree());

                    }
                    break;
                case 46 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:166: neg
                    {
                    pushFollow(FOLLOW_neg_in_unmatchedToken391_static.FOLLOW_neg_in_unmatchedToken391);
                    neg61=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg61.getTree());

                    }
                    break;
                case 47 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:170: dash
                    {
                    pushFollow(FOLLOW_dash_in_unmatchedToken393_static.FOLLOW_dash_in_unmatchedToken393);
                    dash62=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash62.getTree());

                    }
                    break;
                case 48 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:175: percentsign
                    {
                    pushFollow(FOLLOW_percentsign_in_unmatchedToken395_static.FOLLOW_percentsign_in_unmatchedToken395);
                    percentsign63=percentsign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percentsign63.getTree());

                    }
                    break;
                case 49 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:187: lsqb
                    {
                    pushFollow(FOLLOW_lsqb_in_unmatchedToken397_static.FOLLOW_lsqb_in_unmatchedToken397);
                    lsqb64=lsqb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb64.getTree());

                    }
                    break;
                case 50 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:192: rsqb
                    {
                    pushFollow(FOLLOW_rsqb_in_unmatchedToken399_static.FOLLOW_rsqb_in_unmatchedToken399);
                    rsqb65=rsqb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb65.getTree());

                    }
                    break;
                case 51 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:197: lrb
                    {
                    pushFollow(FOLLOW_lrb_in_unmatchedToken401_static.FOLLOW_lrb_in_unmatchedToken401);
                    lrb66=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb66.getTree());

                    }
                    break;
                case 52 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:201: rrb
                    {
                    pushFollow(FOLLOW_rrb_in_unmatchedToken403_static.FOLLOW_rrb_in_unmatchedToken403);
                    rrb67=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb67.getTree());

                    }
                    break;
                case 53 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:2: cc
                    {
                    pushFollow(FOLLOW_cc_in_unmatchedToken407_static.FOLLOW_cc_in_unmatchedToken407);
                    cc68=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc68.getTree());

                    }
                    break;
                case 54 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:5: dt
                    {
                    pushFollow(FOLLOW_dt_in_unmatchedToken409_static.FOLLOW_dt_in_unmatchedToken409);
                    dt69=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt69.getTree());

                    }
                    break;
                case 55 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:8: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_unmatchedToken411_static.FOLLOW_dtTHE_in_unmatchedToken411);
                    dtTHE70=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE70.getTree());

                    }
                    break;
                case 56 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:14: fw
                    {
                    pushFollow(FOLLOW_fw_in_unmatchedToken413_static.FOLLOW_fw_in_unmatchedToken413);
                    fw71=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw71.getTree());

                    }
                    break;
                case 57 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:17: md
                    {
                    pushFollow(FOLLOW_md_in_unmatchedToken415_static.FOLLOW_md_in_unmatchedToken415);
                    md72=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md72.getTree());

                    }
                    break;
                case 58 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:20: nn
                    {
                    pushFollow(FOLLOW_nn_in_unmatchedToken417_static.FOLLOW_nn_in_unmatchedToken417);
                    nn73=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn73.getTree());

                    }
                    break;
                case 59 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:23: nns
                    {
                    pushFollow(FOLLOW_nns_in_unmatchedToken419_static.FOLLOW_nns_in_unmatchedToken419);
                    nns74=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns74.getTree());

                    }
                    break;
                case 60 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:27: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_unmatchedToken421_static.FOLLOW_nnp_in_unmatchedToken421);
                    nnp75=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp75.getTree());

                    }
                    break;
                case 61 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:31: prp
                    {
                    pushFollow(FOLLOW_prp_in_unmatchedToken423_static.FOLLOW_prp_in_unmatchedToken423);
                    prp76=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp76.getTree());

                    }
                    break;
                case 62 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:35: prp_poss
                    {
                    pushFollow(FOLLOW_prp_poss_in_unmatchedToken425_static.FOLLOW_prp_poss_in_unmatchedToken425);
                    prp_poss77=prp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp_poss77.getTree());

                    }
                    break;
                case 63 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:44: rbconj
                    {
                    pushFollow(FOLLOW_rbconj_in_unmatchedToken427_static.FOLLOW_rbconj_in_unmatchedToken427);
                    rbconj78=rbconj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj78.getTree());

                    }
                    break;
                case 64 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:51: sym
                    {
                    pushFollow(FOLLOW_sym_in_unmatchedToken429_static.FOLLOW_sym_in_unmatchedToken429);
                    sym79=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym79.getTree());

                    }
                    break;
                case 65 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:55: uh
                    {
                    pushFollow(FOLLOW_uh_in_unmatchedToken431_static.FOLLOW_uh_in_unmatchedToken431);
                    uh80=uh();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, uh80.getTree());

                    }
                    break;
                case 66 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:58: clause
                    {
                    pushFollow(FOLLOW_clause_in_unmatchedToken433_static.FOLLOW_clause_in_unmatchedToken433);
                    clause81=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause81.getTree());

                    }
                    break;
                case 67 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:65: comma
                    {
                    pushFollow(FOLLOW_comma_in_unmatchedToken435_static.FOLLOW_comma_in_unmatchedToken435);
                    comma82=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma82.getTree());

                    }
                    break;
                case 68 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:71: ls
                    {
                    pushFollow(FOLLOW_ls_in_unmatchedToken437_static.FOLLOW_ls_in_unmatchedToken437);
                    ls83=ls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ls83.getTree());

                    }
                    break;
                case 69 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:74: nnps
                    {
                    pushFollow(FOLLOW_nnps_in_unmatchedToken439_static.FOLLOW_nnps_in_unmatchedToken439);
                    nnps84=nnps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnps84.getTree());

                    }
                    break;
                case 70 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:79: pos
                    {
                    pushFollow(FOLLOW_pos_in_unmatchedToken441_static.FOLLOW_pos_in_unmatchedToken441);
                    pos85=pos();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pos85.getTree());

                    }
                    break;
                case 71 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:83: nnidentifier
                    {
                    pushFollow(FOLLOW_nnidentifier_in_unmatchedToken443_static.FOLLOW_nnidentifier_in_unmatchedToken443);
                    nnidentifier86=nnidentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnidentifier86.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, unmatchedToken_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unmatchedToken"

    public static class procedureNounPhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedureNounPhrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:173:1: procedureNounPhrase : {...}? headingProcedure -> ^( NounPhrase headingProcedure ) ;
    public final ChemicalChunkerParser.procedureNounPhrase_return procedureNounPhrase() throws RecognitionException {
        ChemicalChunkerParser.procedureNounPhrase_return retval = new ChemicalChunkerParser.procedureNounPhrase_return();
        retval.start = input.LT(1);
        int procedureNounPhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.headingProcedure_return headingProcedure87 = null;


        RewriteRuleSubtreeStream stream_headingProcedure=new RewriteRuleSubtreeStream(adaptor,"rule headingProcedure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:2: ({...}? headingProcedure -> ^( NounPhrase headingProcedure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:4: {...}? headingProcedure
            {
            if ( !((isAtTokenPositionZero(input))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "procedureNounPhrase", "isAtTokenPositionZero(input)");
            }
            pushFollow(FOLLOW_headingProcedure_in_procedureNounPhrase456_static.FOLLOW_headingProcedure_in_procedureNounPhrase456);
            headingProcedure87=headingProcedure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_headingProcedure.add(headingProcedure87.getTree());


            // AST REWRITE
            // elements: headingProcedure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 174:54: -> ^( NounPhrase headingProcedure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:57: ^( NounPhrase headingProcedure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NounPhrase, "NounPhrase"), root_1);

                adaptor.addChild(root_1, stream_headingProcedure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, procedureNounPhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedureNounPhrase"

    public static class headingProcedure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "headingProcedure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:1: headingProcedure : ( headingProcedureRequiringTerminator headingProcedureTerminators | bracketedHeadingProcedure ( headingProcedureTerminators )? );
    public final ChemicalChunkerParser.headingProcedure_return headingProcedure() throws RecognitionException {
        ChemicalChunkerParser.headingProcedure_return retval = new ChemicalChunkerParser.headingProcedure_return();
        retval.start = input.LT(1);
        int headingProcedure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.headingProcedureRequiringTerminator_return headingProcedureRequiringTerminator88 = null;

        ChemicalChunkerParser.headingProcedureTerminators_return headingProcedureTerminators89 = null;

        ChemicalChunkerParser.bracketedHeadingProcedure_return bracketedHeadingProcedure90 = null;

        ChemicalChunkerParser.headingProcedureTerminators_return headingProcedureTerminators91 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:2: ( headingProcedureRequiringTerminator headingProcedureTerminators | bracketedHeadingProcedure ( headingProcedureTerminators )? )
            int alt10=2;
            switch ( input.LA(1) ) {
            case 38:
            case 141:
            case 146:
                {
                alt10=1;
                }
                break;
            case 139:
            case 143:
                {
                alt10=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }

            switch (alt10) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:4: headingProcedureRequiringTerminator headingProcedureTerminators
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_headingProcedureRequiringTerminator_in_headingProcedure475_static.FOLLOW_headingProcedureRequiringTerminator_in_headingProcedure475);
                    headingProcedureRequiringTerminator88=headingProcedureRequiringTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, headingProcedureRequiringTerminator88.getTree());
                    pushFollow(FOLLOW_headingProcedureTerminators_in_headingProcedure477_static.FOLLOW_headingProcedureTerminators_in_headingProcedure477);
                    headingProcedureTerminators89=headingProcedureTerminators();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, headingProcedureTerminators89.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:70: bracketedHeadingProcedure ( headingProcedureTerminators )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_bracketedHeadingProcedure_in_headingProcedure481_static.FOLLOW_bracketedHeadingProcedure_in_headingProcedure481);
                    bracketedHeadingProcedure90=bracketedHeadingProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedHeadingProcedure90.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:96: ( headingProcedureTerminators )?
                    int alt9=2;
                    switch ( input.LA(1) ) {
                        case 144:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA9_5 = input.LA(3);

                                    if ( (synpred86_ChemicalChunker()) ) {
                                        alt9=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                        case 137:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA9_6 = input.LA(3);

                                    if ( (synpred86_ChemicalChunker()) ) {
                                        alt9=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                        case 132:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA9_7 = input.LA(3);

                                    if ( (synpred86_ChemicalChunker()) ) {
                                        alt9=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt9) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: headingProcedureTerminators
                            {
                            pushFollow(FOLLOW_headingProcedureTerminators_in_headingProcedure483_static.FOLLOW_headingProcedureTerminators_in_headingProcedure483);
                            headingProcedureTerminators91=headingProcedureTerminators();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, headingProcedureTerminators91.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, headingProcedure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "headingProcedure"

    public static class headingProcedureRequiringTerminator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "headingProcedureRequiringTerminator"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:179:1: headingProcedureRequiringTerminator : ( nnidentifier | numeric ) -> ^( PROCEDURE ( nnidentifier )? ( numeric )? ) ;
    public final ChemicalChunkerParser.headingProcedureRequiringTerminator_return headingProcedureRequiringTerminator() throws RecognitionException {
        ChemicalChunkerParser.headingProcedureRequiringTerminator_return retval = new ChemicalChunkerParser.headingProcedureRequiringTerminator_return();
        retval.start = input.LT(1);
        int headingProcedureRequiringTerminator_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier92 = null;

        ChemicalChunkerParser.numeric_return numeric93 = null;


        RewriteRuleSubtreeStream stream_nnidentifier=new RewriteRuleSubtreeStream(adaptor,"rule nnidentifier");
        RewriteRuleSubtreeStream stream_numeric=new RewriteRuleSubtreeStream(adaptor,"rule numeric");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:2: ( ( nnidentifier | numeric ) -> ^( PROCEDURE ( nnidentifier )? ( numeric )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:4: ( nnidentifier | numeric )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:4: ( nnidentifier | numeric )
            int alt11=2;
            switch ( input.LA(1) ) {
            case 141:
                {
                alt11=1;
                }
                break;
            case 38:
            case 146:
                {
                alt11=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }

            switch (alt11) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:5: nnidentifier
                    {
                    pushFollow(FOLLOW_nnidentifier_in_headingProcedureRequiringTerminator494_static.FOLLOW_nnidentifier_in_headingProcedureRequiringTerminator494);
                    nnidentifier92=nnidentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nnidentifier.add(nnidentifier92.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:18: numeric
                    {
                    pushFollow(FOLLOW_numeric_in_headingProcedureRequiringTerminator496_static.FOLLOW_numeric_in_headingProcedureRequiringTerminator496);
                    numeric93=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numeric.add(numeric93.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: numeric, nnidentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 180:27: -> ^( PROCEDURE ( nnidentifier )? ( numeric )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:30: ^( PROCEDURE ( nnidentifier )? ( numeric )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PROCEDURE, "PROCEDURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:42: ( nnidentifier )?
                if ( stream_nnidentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_nnidentifier.nextTree());

                }
                stream_nnidentifier.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:56: ( numeric )?
                if ( stream_numeric.hasNext() ) {
                    adaptor.addChild(root_1, stream_numeric.nextTree());

                }
                stream_numeric.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, headingProcedureRequiringTerminator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "headingProcedureRequiringTerminator"

    public static class bracketedHeadingProcedure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedHeadingProcedure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:1: bracketedHeadingProcedure : ( bracketedIdentifier | bracketedNumeric | squareBracketedReference ) -> ^( PROCEDURE ( bracketedIdentifier )? ( bracketedNumeric )? ( squareBracketedReference )? ) ;
    public final ChemicalChunkerParser.bracketedHeadingProcedure_return bracketedHeadingProcedure() throws RecognitionException {
        ChemicalChunkerParser.bracketedHeadingProcedure_return retval = new ChemicalChunkerParser.bracketedHeadingProcedure_return();
        retval.start = input.LT(1);
        int bracketedHeadingProcedure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.bracketedIdentifier_return bracketedIdentifier94 = null;

        ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric95 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference96 = null;


        RewriteRuleSubtreeStream stream_bracketedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule bracketedIdentifier");
        RewriteRuleSubtreeStream stream_squareBracketedReference=new RewriteRuleSubtreeStream(adaptor,"rule squareBracketedReference");
        RewriteRuleSubtreeStream stream_bracketedNumeric=new RewriteRuleSubtreeStream(adaptor,"rule bracketedNumeric");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:2: ( ( bracketedIdentifier | bracketedNumeric | squareBracketedReference ) -> ^( PROCEDURE ( bracketedIdentifier )? ( bracketedNumeric )? ( squareBracketedReference )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:4: ( bracketedIdentifier | bracketedNumeric | squareBracketedReference )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:4: ( bracketedIdentifier | bracketedNumeric | squareBracketedReference )
            int alt12=3;
            switch ( input.LA(1) ) {
            case 143:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 146:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 141:
                                {
                                alt12=1;
                                }
                                break;
                            case 144:
                                {
                                alt12=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 12, 7, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 12, 4, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 141:
                        {
                        alt12=1;
                        }
                        break;
                    case 38:
                        {
                        alt12=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 12, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 12, 1, input);

                    throw nvae;
                }

                }
                break;
            case 139:
                {
                alt12=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }

            switch (alt12) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:5: bracketedIdentifier
                    {
                    pushFollow(FOLLOW_bracketedIdentifier_in_bracketedHeadingProcedure519_static.FOLLOW_bracketedIdentifier_in_bracketedHeadingProcedure519);
                    bracketedIdentifier94=bracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedIdentifier.add(bracketedIdentifier94.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:27: bracketedNumeric
                    {
                    pushFollow(FOLLOW_bracketedNumeric_in_bracketedHeadingProcedure523_static.FOLLOW_bracketedNumeric_in_bracketedHeadingProcedure523);
                    bracketedNumeric95=bracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedNumeric.add(bracketedNumeric95.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:46: squareBracketedReference
                    {
                    pushFollow(FOLLOW_squareBracketedReference_in_bracketedHeadingProcedure527_static.FOLLOW_squareBracketedReference_in_bracketedHeadingProcedure527);
                    squareBracketedReference96=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_squareBracketedReference.add(squareBracketedReference96.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: squareBracketedReference, bracketedNumeric, bracketedIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 183:72: -> ^( PROCEDURE ( bracketedIdentifier )? ( bracketedNumeric )? ( squareBracketedReference )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:75: ^( PROCEDURE ( bracketedIdentifier )? ( bracketedNumeric )? ( squareBracketedReference )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PROCEDURE, "PROCEDURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:87: ( bracketedIdentifier )?
                if ( stream_bracketedIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedIdentifier.nextTree());

                }
                stream_bracketedIdentifier.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:108: ( bracketedNumeric )?
                if ( stream_bracketedNumeric.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedNumeric.nextTree());

                }
                stream_bracketedNumeric.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:126: ( squareBracketedReference )?
                if ( stream_squareBracketedReference.hasNext() ) {
                    adaptor.addChild(root_1, stream_squareBracketedReference.nextTree());

                }
                stream_squareBracketedReference.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, bracketedHeadingProcedure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedHeadingProcedure"

    public static class headingProcedureTerminators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "headingProcedureTerminators"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:185:1: headingProcedureTerminators : ( rrb | stop | colon );
    public final ChemicalChunkerParser.headingProcedureTerminators_return headingProcedureTerminators() throws RecognitionException {
        ChemicalChunkerParser.headingProcedureTerminators_return retval = new ChemicalChunkerParser.headingProcedureTerminators_return();
        retval.start = input.LT(1);
        int headingProcedureTerminators_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.rrb_return rrb97 = null;

        ChemicalChunkerParser.stop_return stop98 = null;

        ChemicalChunkerParser.colon_return colon99 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:2: ( rrb | stop | colon )
            int alt13=3;
            switch ( input.LA(1) ) {
            case 144:
                {
                alt13=1;
                }
                break;
            case 137:
                {
                alt13=2;
                }
                break;
            case 132:
                {
                alt13=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }

            switch (alt13) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:4: rrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rrb_in_headingProcedureTerminators552_static.FOLLOW_rrb_in_headingProcedureTerminators552);
                    rrb97=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb97.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:8: stop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_stop_in_headingProcedureTerminators554_static.FOLLOW_stop_in_headingProcedureTerminators554);
                    stop98=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop98.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:13: colon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_colon_in_headingProcedureTerminators556_static.FOLLOW_colon_in_headingProcedureTerminators556);
                    colon99=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon99.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, headingProcedureTerminators_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "headingProcedureTerminators"

    public static class nounphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:188:1: nounphrase : nounphraseStructure -> ^( NounPhrase nounphraseStructure ) ;
    public final ChemicalChunkerParser.nounphrase_return nounphrase() throws RecognitionException {
        ChemicalChunkerParser.nounphrase_return retval = new ChemicalChunkerParser.nounphrase_return();
        retval.start = input.LT(1);
        int nounphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure100 = null;


        RewriteRuleSubtreeStream stream_nounphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule nounphraseStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:2: ( nounphraseStructure -> ^( NounPhrase nounphraseStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:4: nounphraseStructure
            {
            pushFollow(FOLLOW_nounphraseStructure_in_nounphrase565_static.FOLLOW_nounphraseStructure_in_nounphrase565);
            nounphraseStructure100=nounphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphraseStructure.add(nounphraseStructure100.getTree());


            // AST REWRITE
            // elements: nounphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 189:24: -> ^( NounPhrase nounphraseStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:28: ^( NounPhrase nounphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NounPhrase, "NounPhrase"), root_1);

                adaptor.addChild(root_1, stream_nounphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, nounphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphrase"

    public static class nounphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );
    public final ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure_return retval = new ChemicalChunkerParser.nounphraseStructure_return();
        retval.start = input.LT(1);
        int nounphraseStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure1101 = null;

        ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure2102 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:2: ( nounphraseStructure1 | nounphraseStructure2 )
            int alt14=2;
            alt14 = dfa14.predict(input);
            switch (alt14) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:4: nounphraseStructure1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure1_in_nounphraseStructure584_static.FOLLOW_nounphraseStructure1_in_nounphraseStructure584);
                    nounphraseStructure1101=nounphraseStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure1101.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:25: nounphraseStructure2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure2_in_nounphraseStructure586_static.FOLLOW_nounphraseStructure2_in_nounphraseStructure586);
                    nounphraseStructure2102=nounphraseStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure2102.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, nounphraseStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure"

    public static class nounphraseStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:1: nounphraseStructure1 : multiApparatus -> ^( MultipleApparatus multiApparatus ) ;
    public final ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure1() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure1_return retval = new ChemicalChunkerParser.nounphraseStructure1_return();
        retval.start = input.LT(1);
        int nounphraseStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.multiApparatus_return multiApparatus103 = null;


        RewriteRuleSubtreeStream stream_multiApparatus=new RewriteRuleSubtreeStream(adaptor,"rule multiApparatus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:2: ( multiApparatus -> ^( MultipleApparatus multiApparatus ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:5: multiApparatus
            {
            pushFollow(FOLLOW_multiApparatus_in_nounphraseStructure1595_static.FOLLOW_multiApparatus_in_nounphraseStructure1595);
            multiApparatus103=multiApparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_multiApparatus.add(multiApparatus103.getTree());


            // AST REWRITE
            // elements: multiApparatus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 194:20: -> ^( MultipleApparatus multiApparatus )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:24: ^( MultipleApparatus multiApparatus )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MultipleApparatus, "MultipleApparatus"), root_1);

                adaptor.addChild(root_1, stream_multiApparatus.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, nounphraseStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure1"

    public static class nounphraseStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:1: nounphraseStructure2 : ( dtTHE )? ( dt )? nounphraseContent ( ( conjunction )* nounphraseContent {...}?)* ( prepphraseOf | prepphraseIN )? ;
    public final ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure2() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure2_return retval = new ChemicalChunkerParser.nounphraseStructure2_return();
        retval.start = input.LT(1);
        int nounphraseStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE104 = null;

        ChemicalChunkerParser.dt_return dt105 = null;

        ChemicalChunkerParser.nounphraseContent_return nounphraseContent106 = null;

        ChemicalChunkerParser.conjunction_return conjunction107 = null;

        ChemicalChunkerParser.nounphraseContent_return nounphraseContent108 = null;

        ChemicalChunkerParser.prepphraseOf_return prepphraseOf109 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN110 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:2: ( ( dtTHE )? ( dt )? nounphraseContent ( ( conjunction )* nounphraseContent {...}?)* ( prepphraseOf | prepphraseIN )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:4: ( dtTHE )? ( dt )? nounphraseContent ( ( conjunction )* nounphraseContent {...}?)* ( prepphraseOf | prepphraseIN )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:4: ( dtTHE )?
            int alt15=2;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt15=1;
                    }
                    break;
            }

            switch (alt15) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_nounphraseStructure2612_static.FOLLOW_dtTHE_in_nounphraseStructure2612);
                    dtTHE104=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE104.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:11: ( dt )?
            int alt16=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA16_3 = input.LA(3);

                            if ( (synpred94_ChemicalChunker()) ) {
                                alt16=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt16) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_nounphraseStructure2615_static.FOLLOW_dt_in_nounphraseStructure2615);
                    dt105=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt105.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nounphraseContent_in_nounphraseStructure2618_static.FOLLOW_nounphraseContent_in_nounphraseStructure2618);
            nounphraseContent106=nounphraseContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseContent106.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:34: ( ( conjunction )* nounphraseContent {...}?)*
            loop18:
            do {
                int alt18=2;
                alt18 = dfa18.predict(input);
                switch (alt18) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:35: ( conjunction )* nounphraseContent {...}?
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:35: ( conjunction )*
            	    loop17:
            	    do {
            	        int alt17=2;
            	        alt17 = dfa17.predict(input);
            	        switch (alt17) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_nounphraseStructure2622_static.FOLLOW_conjunction_in_nounphraseStructure2622);
            	    	    conjunction107=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction107.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop17;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_nounphraseContent_in_nounphraseStructure2625_static.FOLLOW_nounphraseContent_in_nounphraseStructure2625);
            	    nounphraseContent108=nounphraseContent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseContent108.getTree());
            	    if ( !((!followedByVBDorVBZthenVBYIELDed(input))) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "nounphraseStructure2", "!followedByVBDorVBZthenVBYIELDed(input)");
            	    }

            	    }
            	    break;

            	default :
            	    break loop18;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:111: ( prepphraseOf | prepphraseIN )?
            int alt19=3;
            switch ( input.LA(1) ) {
                case 56:
                    {
                    int LA19_1 = input.LA(2);

                    if ( (synpred97_ChemicalChunker()) ) {
                        alt19=1;
                    }
                    }
                    break;
                case 50:
                    {
                    int LA19_2 = input.LA(2);

                    if ( (synpred98_ChemicalChunker()) ) {
                        alt19=2;
                    }
                    }
                    break;
            }

            switch (alt19) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:112: prepphraseOf
                    {
                    pushFollow(FOLLOW_prepphraseOf_in_nounphraseStructure2632_static.FOLLOW_prepphraseOf_in_nounphraseStructure2632);
                    prepphraseOf109=prepphraseOf();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOf109.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:126: prepphraseIN
                    {
                    pushFollow(FOLLOW_prepphraseIN_in_nounphraseStructure2635_static.FOLLOW_prepphraseIN_in_nounphraseStructure2635);
                    prepphraseIN110=prepphraseIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN110.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, nounphraseStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure2"

    public static class nounphraseContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:1: nounphraseContent : ( advAdj )* ( dissolvePhrase | ratioOrBracketedRatio | noun | numeric | bracketedContent )+ ;
    public final ChemicalChunkerParser.nounphraseContent_return nounphraseContent() throws RecognitionException {
        ChemicalChunkerParser.nounphraseContent_return retval = new ChemicalChunkerParser.nounphraseContent_return();
        retval.start = input.LT(1);
        int nounphraseContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj111 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase112 = null;

        ChemicalChunkerParser.ratioOrBracketedRatio_return ratioOrBracketedRatio113 = null;

        ChemicalChunkerParser.noun_return noun114 = null;

        ChemicalChunkerParser.numeric_return numeric115 = null;

        ChemicalChunkerParser.bracketedContent_return bracketedContent116 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:2: ( ( advAdj )* ( dissolvePhrase | ratioOrBracketedRatio | noun | numeric | bracketedContent )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:4: ( advAdj )* ( dissolvePhrase | ratioOrBracketedRatio | noun | numeric | bracketedContent )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:4: ( advAdj )*
            loop20:
            do {
                int alt20=2;
                alt20 = dfa20.predict(input);
                switch (alt20) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_nounphraseContent647_static.FOLLOW_advAdj_in_nounphraseContent647);
            	    advAdj111=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj111.getTree());

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:13: ( dissolvePhrase | ratioOrBracketedRatio | noun | numeric | bracketedContent )+
            int cnt21=0;
            loop21:
            do {
                int alt21=6;
                alt21 = dfa21.predict(input);
                switch (alt21) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:14: dissolvePhrase
            	    {
            	    pushFollow(FOLLOW_dissolvePhrase_in_nounphraseContent652_static.FOLLOW_dissolvePhrase_in_nounphraseContent652);
            	    dissolvePhrase112=dissolvePhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase112.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:29: ratioOrBracketedRatio
            	    {
            	    pushFollow(FOLLOW_ratioOrBracketedRatio_in_nounphraseContent654_static.FOLLOW_ratioOrBracketedRatio_in_nounphraseContent654);
            	    ratioOrBracketedRatio113=ratioOrBracketedRatio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratioOrBracketedRatio113.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:51: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_nounphraseContent656_static.FOLLOW_noun_in_nounphraseContent656);
            	    noun114=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun114.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:56: numeric
            	    {
            	    pushFollow(FOLLOW_numeric_in_nounphraseContent658_static.FOLLOW_numeric_in_nounphraseContent658);
            	    numeric115=numeric();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric115.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:64: bracketedContent
            	    {
            	    pushFollow(FOLLOW_bracketedContent_in_nounphraseContent660_static.FOLLOW_bracketedContent_in_nounphraseContent660);
            	    bracketedContent116=bracketedContent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContent116.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt21 >= 1 ) break loop21;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(21, input);
                        throw eee;
                }
                cnt21++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, nounphraseContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseContent"

    public static class dissolvePhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolvePhrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:1: dissolvePhrase : ( dissolveStructure | lrb dissolveStructure rrb ) -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? ) ;
    public final ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase() throws RecognitionException {
        ChemicalChunkerParser.dissolvePhrase_return retval = new ChemicalChunkerParser.dissolvePhrase_return();
        retval.start = input.LT(1);
        int dissolvePhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dissolveStructure_return dissolveStructure117 = null;

        ChemicalChunkerParser.lrb_return lrb118 = null;

        ChemicalChunkerParser.dissolveStructure_return dissolveStructure119 = null;

        ChemicalChunkerParser.rrb_return rrb120 = null;


        RewriteRuleSubtreeStream stream_dissolveStructure=new RewriteRuleSubtreeStream(adaptor,"rule dissolveStructure");
        RewriteRuleSubtreeStream stream_lrb=new RewriteRuleSubtreeStream(adaptor,"rule lrb");
        RewriteRuleSubtreeStream stream_rrb=new RewriteRuleSubtreeStream(adaptor,"rule rrb");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:202:2: ( ( dissolveStructure | lrb dissolveStructure rrb ) -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:202:4: ( dissolveStructure | lrb dissolveStructure rrb )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:202:4: ( dissolveStructure | lrb dissolveStructure rrb )
            int alt22=2;
            alt22 = dfa22.predict(input);
            switch (alt22) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:202:5: dissolveStructure
                    {
                    pushFollow(FOLLOW_dissolveStructure_in_dissolvePhrase672_static.FOLLOW_dissolveStructure_in_dissolvePhrase672);
                    dissolveStructure117=dissolveStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure.add(dissolveStructure117.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:202:23: lrb dissolveStructure rrb
                    {
                    pushFollow(FOLLOW_lrb_in_dissolvePhrase674_static.FOLLOW_lrb_in_dissolvePhrase674);
                    lrb118=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lrb.add(lrb118.getTree());
                    pushFollow(FOLLOW_dissolveStructure_in_dissolvePhrase676_static.FOLLOW_dissolveStructure_in_dissolvePhrase676);
                    dissolveStructure119=dissolveStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure.add(dissolveStructure119.getTree());
                    pushFollow(FOLLOW_rrb_in_dissolvePhrase678_static.FOLLOW_rrb_in_dissolvePhrase678);
                    rrb120=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rrb.add(rrb120.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: rrb, dissolveStructure, lrb
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 202:50: -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:202:54: ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DissolvePhrase, "DissolvePhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:202:71: ( lrb )?
                if ( stream_lrb.hasNext() ) {
                    adaptor.addChild(root_1, stream_lrb.nextTree());

                }
                stream_lrb.reset();
                adaptor.addChild(root_1, stream_dissolveStructure.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:202:94: ( rrb )?
                if ( stream_rrb.hasNext() ) {
                    adaptor.addChild(root_1, stream_rrb.nextTree());

                }
                stream_rrb.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, dissolvePhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dissolvePhrase"

    public static class dissolveStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolveStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:1: dissolveStructure : ( adj )? ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) ) inMolecule ( conjunction molecule )* ;
    public final ChemicalChunkerParser.dissolveStructure_return dissolveStructure() throws RecognitionException {
        ChemicalChunkerParser.dissolveStructure_return retval = new ChemicalChunkerParser.dissolveStructure_return();
        retval.start = input.LT(1);
        int dissolveStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj121 = null;

        ChemicalChunkerParser.nnp_return nnp122 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity123 = null;

        ChemicalChunkerParser.nnp_return nnp124 = null;

        ChemicalChunkerParser.molecule_return molecule125 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule126 = null;

        ChemicalChunkerParser.inMolecule_return inMolecule127 = null;

        ChemicalChunkerParser.conjunction_return conjunction128 = null;

        ChemicalChunkerParser.molecule_return molecule129 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:2: ( ( adj )? ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) ) inMolecule ( conjunction molecule )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:4: ( adj )? ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) ) inMolecule ( conjunction molecule )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:4: ( adj )?
            int alt23=2;
            alt23 = dfa23.predict(input);
            switch (alt23) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_dissolveStructure703_static.FOLLOW_adj_in_dissolveStructure703);
                    adj121=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj121.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:9: ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) )
            int alt26=2;
            switch ( input.LA(1) ) {
            case 158:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 71:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 38:
                            case 47:
                            case 56:
                            case 59:
                            case 73:
                            case 125:
                            case 129:
                            case 130:
                            case 133:
                            case 139:
                            case 141:
                            case 143:
                            case 146:
                                {
                                alt26=2;
                                }
                                break;
                            case 50:
                                {
                                alt26=1;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 26, 5, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 26, 4, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 45:
                    case 46:
                    case 63:
                    case 68:
                    case 73:
                    case 83:
                    case 84:
                    case 90:
                    case 130:
                    case 133:
                    case 139:
                    case 141:
                    case 143:
                    case 146:
                    case 151:
                    case 152:
                    case 153:
                        {
                        alt26=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 26, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 26, 1, input);

                    throw nvae;
                }

                }
                break;
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 45:
            case 46:
            case 63:
            case 68:
            case 71:
            case 73:
            case 83:
            case 84:
            case 90:
            case 130:
            case 133:
            case 139:
            case 141:
            case 143:
            case 146:
            case 151:
            case 152:
            case 153:
                {
                alt26=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;
            }

            switch (alt26) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:10: nnp nnchementity
                    {
                    pushFollow(FOLLOW_nnp_in_dissolveStructure707_static.FOLLOW_nnp_in_dissolveStructure707);
                    nnp122=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp122.getTree());
                    pushFollow(FOLLOW_nnchementity_in_dissolveStructure709_static.FOLLOW_nnchementity_in_dissolveStructure709);
                    nnchementity123=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity123.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:28: ( nnp )? ( molecule | unnamedmolecule )
                    {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:28: ( nnp )?
                    int alt24=2;
                    switch ( input.LA(1) ) {
                        case 158:
                            {
                            alt24=1;
                            }
                            break;
                    }

                    switch (alt24) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
                            {
                            pushFollow(FOLLOW_nnp_in_dissolveStructure712_static.FOLLOW_nnp_in_dissolveStructure712);
                            nnp124=nnp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp124.getTree());

                            }
                            break;

                    }

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:32: ( molecule | unnamedmolecule )
                    int alt25=2;
                    alt25 = dfa25.predict(input);
                    switch (alt25) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:33: molecule
                            {
                            pushFollow(FOLLOW_molecule_in_dissolveStructure715_static.FOLLOW_molecule_in_dissolveStructure715);
                            molecule125=molecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule125.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:42: unnamedmolecule
                            {
                            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure717_static.FOLLOW_unnamedmolecule_in_dissolveStructure717);
                            unnamedmolecule126=unnamedmolecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule126.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_inMolecule_in_dissolveStructure721_static.FOLLOW_inMolecule_in_dissolveStructure721);
            inMolecule127=inMolecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inMolecule127.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:71: ( conjunction molecule )*
            loop27:
            do {
                int alt27=2;
                alt27 = dfa27.predict(input);
                switch (alt27) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:72: conjunction molecule
            	    {
            	    pushFollow(FOLLOW_conjunction_in_dissolveStructure724_static.FOLLOW_conjunction_in_dissolveStructure724);
            	    conjunction128=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction128.getTree());
            	    pushFollow(FOLLOW_molecule_in_dissolveStructure726_static.FOLLOW_molecule_in_dissolveStructure726);
            	    molecule129=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule129.getTree());

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, dissolveStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dissolveStructure"

    public static class inMolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inMolecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:1: inMolecule : inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ;
    public final ChemicalChunkerParser.inMolecule_return inMolecule() throws RecognitionException {
        ChemicalChunkerParser.inMolecule_return retval = new ChemicalChunkerParser.inMolecule_return();
        retval.start = input.LT(1);
        int inMolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin130 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE131 = null;

        ChemicalChunkerParser.adj_return adj132 = null;

        ChemicalChunkerParser.nnp_return nnp133 = null;

        ChemicalChunkerParser.molecule_return molecule134 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule135 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:208:2: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:208:4: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inin_in_inMolecule738_static.FOLLOW_inin_in_inMolecule738);
            inin130=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inin130.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:208:9: ( dtTHE )?
            int alt28=2;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt28=1;
                    }
                    break;
            }

            switch (alt28) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_inMolecule740_static.FOLLOW_dtTHE_in_inMolecule740);
                    dtTHE131=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE131.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:208:16: ( adj )?
            int alt29=2;
            alt29 = dfa29.predict(input);
            switch (alt29) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_inMolecule743_static.FOLLOW_adj_in_inMolecule743);
                    adj132=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj132.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:208:21: ( nnp )?
            int alt30=2;
            switch ( input.LA(1) ) {
                case 158:
                    {
                    alt30=1;
                    }
                    break;
            }

            switch (alt30) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_inMolecule746_static.FOLLOW_nnp_in_inMolecule746);
                    nnp133=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp133.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:208:26: ( molecule | unnamedmolecule )
            int alt31=2;
            alt31 = dfa31.predict(input);
            switch (alt31) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:208:27: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_inMolecule750_static.FOLLOW_molecule_in_inMolecule750);
                    molecule134=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule134.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:208:36: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_inMolecule752_static.FOLLOW_unnamedmolecule_in_inMolecule752);
                    unnamedmolecule135=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule135.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, inMolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inMolecule"

    public static class verbphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:1: verbphrase : verbphraseStructure -> ^( VerbPhrase verbphraseStructure ) ;
    public final ChemicalChunkerParser.verbphrase_return verbphrase() throws RecognitionException {
        ChemicalChunkerParser.verbphrase_return retval = new ChemicalChunkerParser.verbphrase_return();
        retval.start = input.LT(1);
        int verbphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure136 = null;


        RewriteRuleSubtreeStream stream_verbphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule verbphraseStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:2: ( verbphraseStructure -> ^( VerbPhrase verbphraseStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:4: verbphraseStructure
            {
            pushFollow(FOLLOW_verbphraseStructure_in_verbphrase762_static.FOLLOW_verbphraseStructure_in_verbphrase762);
            verbphraseStructure136=verbphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_verbphraseStructure.add(verbphraseStructure136.getTree());


            // AST REWRITE
            // elements: verbphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 211:24: -> ^( VerbPhrase verbphraseStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:28: ^( VerbPhrase verbphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VerbPhrase, "VerbPhrase"), root_1);

                adaptor.addChild(root_1, stream_verbphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, verbphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verbphrase"

    public static class verbphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphraseStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:1: verbphraseStructure : ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* ;
    public final ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.verbphraseStructure_return retval = new ChemicalChunkerParser.verbphraseStructure_return();
        retval.start = input.LT(1);
        int verbphraseStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt137 = null;

        ChemicalChunkerParser.to_return to138 = null;

        ChemicalChunkerParser.inAll_return inAll139 = null;

        ChemicalChunkerParser.inafter_return inafter140 = null;

        ChemicalChunkerParser.md_return md141 = null;

        ChemicalChunkerParser.rbconj_return rbconj142 = null;

        ChemicalChunkerParser.adv_return adv143 = null;

        ChemicalChunkerParser.adj_return adj144 = null;

        ChemicalChunkerParser.verb_return verb145 = null;

        ChemicalChunkerParser.md_return md146 = null;

        ChemicalChunkerParser.adv_return adv147 = null;

        ChemicalChunkerParser.adj_return adj148 = null;

        ChemicalChunkerParser.neg_return neg149 = null;

        ChemicalChunkerParser.inoff_return inoff150 = null;

        ChemicalChunkerParser.cc_return cc151 = null;

        ChemicalChunkerParser.comma_return comma152 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase153 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:21: ( ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:24: ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:24: ( dt )?
            int alt32=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt32=1;
                    }
                    break;
            }

            switch (alt32) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_verbphraseStructure780_static.FOLLOW_dt_in_verbphraseStructure780);
                    dt137=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt137.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:28: ( to )?
            int alt33=2;
            switch ( input.LA(1) ) {
                case 169:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA33_3 = input.LA(3);

                            if ( (synpred116_ChemicalChunker()) ) {
                                alt33=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt33) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: to
                    {
                    pushFollow(FOLLOW_to_in_verbphraseStructure783_static.FOLLOW_to_in_verbphraseStructure783);
                    to138=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to138.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:32: ( inAll )?
            int alt34=2;
            switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 150:
                case 169:
                    {
                    alt34=1;
                    }
                    break;
                case 49:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA34_4 = input.LA(3);

                            if ( (synpred117_ChemicalChunker()) ) {
                                alt34=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt34) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_verbphraseStructure786_static.FOLLOW_inAll_in_verbphraseStructure786);
                    inAll139=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll139.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:39: ( inafter )?
            int alt35=2;
            switch ( input.LA(1) ) {
                case 49:
                    {
                    alt35=1;
                    }
                    break;
            }

            switch (alt35) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inafter
                    {
                    pushFollow(FOLLOW_inafter_in_verbphraseStructure789_static.FOLLOW_inafter_in_verbphraseStructure789);
                    inafter140=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter140.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:48: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+
            int cnt45=0;
            loop45:
            do {
                int alt45=2;
                alt45 = dfa45.predict(input);
                switch (alt45) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:49: ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:49: ( md )*
            	    loop36:
            	    do {
            	        int alt36=2;
            	        switch ( input.LA(1) ) {
            	        case 155:
            	            {
            	            alt36=1;
            	            }
            	            break;

            	        }

            	        switch (alt36) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure793_static.FOLLOW_md_in_verbphraseStructure793);
            	    	    md141=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md141.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop36;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:53: ( rbconj )?
            	    int alt37=2;
            	    switch ( input.LA(1) ) {
            	        case 131:
            	            {
            	            alt37=1;
            	            }
            	            break;
            	    }

            	    switch (alt37) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: rbconj
            	            {
            	            pushFollow(FOLLOW_rbconj_in_verbphraseStructure796_static.FOLLOW_rbconj_in_verbphraseStructure796);
            	            rbconj142=rbconj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj142.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:61: ( adv )*
            	    loop38:
            	    do {
            	        int alt38=2;
            	        switch ( input.LA(1) ) {
            	        case 164:
            	        case 165:
            	        case 166:
            	        case 167:
            	            {
            	            alt38=1;
            	            }
            	            break;

            	        }

            	        switch (alt38) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure799_static.FOLLOW_adv_in_verbphraseStructure799);
            	    	    adv143=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv143.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop38;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:66: ( adj )?
            	    int alt39=2;
            	    switch ( input.LA(1) ) {
            	        case 39:
            	        case 40:
            	        case 45:
            	        case 151:
            	        case 152:
            	        case 153:
            	            {
            	            alt39=1;
            	            }
            	            break;
            	    }

            	    switch (alt39) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure802_static.FOLLOW_adj_in_verbphraseStructure802);
            	            adj144=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj144.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:71: ( verb )+
            	    int cnt40=0;
            	    loop40:
            	    do {
            	        int alt40=2;
            	        alt40 = dfa40.predict(input);
            	        switch (alt40) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: verb
            	    	    {
            	    	    pushFollow(FOLLOW_verb_in_verbphraseStructure805_static.FOLLOW_verb_in_verbphraseStructure805);
            	    	    verb145=verb();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb145.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt40 >= 1 ) break loop40;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(40, input);
            	                throw eee;
            	        }
            	        cnt40++;
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:77: ( md )*
            	    loop41:
            	    do {
            	        int alt41=2;
            	        switch ( input.LA(1) ) {
            	        case 155:
            	            {
            	            switch ( input.LA(2) ) {
            	            case TOKEN:
            	                {
            	                int LA41_3 = input.LA(3);

            	                if ( (synpred124_ChemicalChunker()) ) {
            	                    alt41=1;
            	                }


            	                }
            	                break;

            	            }

            	            }
            	            break;

            	        }

            	        switch (alt41) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure808_static.FOLLOW_md_in_verbphraseStructure808);
            	    	    md146=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md146.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop41;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:81: ( adv )*
            	    loop42:
            	    do {
            	        int alt42=2;
            	        alt42 = dfa42.predict(input);
            	        switch (alt42) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure811_static.FOLLOW_adv_in_verbphraseStructure811);
            	    	    adv147=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv147.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop42;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:86: ( adj )?
            	    int alt43=2;
            	    alt43 = dfa43.predict(input);
            	    switch (alt43) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure814_static.FOLLOW_adj_in_verbphraseStructure814);
            	            adj148=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj148.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:91: ( neg )?
            	    int alt44=2;
            	    switch ( input.LA(1) ) {
            	        case 135:
            	            {
            	            switch ( input.LA(2) ) {
            	                case TOKEN:
            	                    {
            	                    int LA44_3 = input.LA(3);

            	                    if ( (synpred127_ChemicalChunker()) ) {
            	                        alt44=1;
            	                    }
            	                    }
            	                    break;
            	            }

            	            }
            	            break;
            	    }

            	    switch (alt44) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
            	            {
            	            pushFollow(FOLLOW_neg_in_verbphraseStructure817_static.FOLLOW_neg_in_verbphraseStructure817);
            	            neg149=neg();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, neg149.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt45 >= 1 ) break loop45;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(45, input);
                        throw eee;
                }
                cnt45++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:99: ( inoff )?
            int alt46=2;
            switch ( input.LA(1) ) {
                case 62:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA46_3 = input.LA(3);

                            if ( (synpred129_ChemicalChunker()) ) {
                                alt46=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt46) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inoff
                    {
                    pushFollow(FOLLOW_inoff_in_verbphraseStructure823_static.FOLLOW_inoff_in_verbphraseStructure823);
                    inoff150=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff150.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:106: ( ( cc )? ( comma )? prepphrase )*
            loop49:
            do {
                int alt49=2;
                alt49 = dfa49.predict(input);
                switch (alt49) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:107: ( cc )? ( comma )? prepphrase
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:107: ( cc )?
            	    int alt47=2;
            	    switch ( input.LA(1) ) {
            	        case 145:
            	            {
            	            alt47=1;
            	            }
            	            break;
            	    }

            	    switch (alt47) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cc
            	            {
            	            pushFollow(FOLLOW_cc_in_verbphraseStructure827_static.FOLLOW_cc_in_verbphraseStructure827);
            	            cc151=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc151.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:111: ( comma )?
            	    int alt48=2;
            	    switch ( input.LA(1) ) {
            	        case 133:
            	            {
            	            alt48=1;
            	            }
            	            break;
            	    }

            	    switch (alt48) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: comma
            	            {
            	            pushFollow(FOLLOW_comma_in_verbphraseStructure830_static.FOLLOW_comma_in_verbphraseStructure830);
            	            comma152=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma152.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_prepphrase_in_verbphraseStructure833_static.FOLLOW_prepphrase_in_verbphraseStructure833);
            	    prepphrase153=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase153.getTree());

            	    }
            	    break;

            	default :
            	    break loop49;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, verbphraseStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verbphraseStructure"

    public static class verb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );
    public final ChemicalChunkerParser.verb_return verb() throws RecognitionException {
        ChemicalChunkerParser.verb_return retval = new ChemicalChunkerParser.verb_return();
        retval.start = input.LT(1);
        int verb_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vb_return vb154 = null;

        ChemicalChunkerParser.vbp_return vbp155 = null;

        ChemicalChunkerParser.vbg_return vbg156 = null;

        ChemicalChunkerParser.vbd_return vbd157 = null;

        ChemicalChunkerParser.vbz_return vbz158 = null;

        ChemicalChunkerParser.vbn_return vbn159 = null;

        ChemicalChunkerParser.vbuse_return vbuse160 = null;

        ChemicalChunkerParser.vbsubmerge_return vbsubmerge161 = null;

        ChemicalChunkerParser.vbimmerse_return vbimmerse162 = null;

        ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb163 = null;

        ChemicalChunkerParser.vbsubject_return vbsubject164 = null;

        ChemicalChunkerParser.vbadd_return vbadd165 = null;

        ChemicalChunkerParser.vbdilute_return vbdilute166 = null;

        ChemicalChunkerParser.vbcharge_return vbcharge167 = null;

        ChemicalChunkerParser.vbcontain_return vbcontain168 = null;

        ChemicalChunkerParser.vbdrop_return vbdrop169 = null;

        ChemicalChunkerParser.vbfill_return vbfill170 = null;

        ChemicalChunkerParser.vbsuspend_return vbsuspend171 = null;

        ChemicalChunkerParser.vbtreat_return vbtreat172 = null;

        ChemicalChunkerParser.vbapparatus_return vbapparatus173 = null;

        ChemicalChunkerParser.vbconcentrate_return vbconcentrate174 = null;

        ChemicalChunkerParser.vbcool_return vbcool175 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass176 = null;

        ChemicalChunkerParser.vbdissolve_return vbdissolve177 = null;

        ChemicalChunkerParser.vbdry_return vbdry178 = null;

        ChemicalChunkerParser.vbextract_return vbextract179 = null;

        ChemicalChunkerParser.vbfilter_return vbfilter180 = null;

        ChemicalChunkerParser.vbheat_return vbheat181 = null;

        ChemicalChunkerParser.vbincrease_return vbincrease182 = null;

        ChemicalChunkerParser.vbpartition_return vbpartition183 = null;

        ChemicalChunkerParser.vbprecipitate_return vbprecipitate184 = null;

        ChemicalChunkerParser.vbpurify_return vbpurify185 = null;

        ChemicalChunkerParser.vbquench_return vbquench186 = null;

        ChemicalChunkerParser.vbrecover_return vbrecover187 = null;

        ChemicalChunkerParser.vbremove_return vbremove188 = null;

        ChemicalChunkerParser.vbstir_return vbstir189 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize190 = null;

        ChemicalChunkerParser.vbwait_return vbwait191 = null;

        ChemicalChunkerParser.vbwash_return vbwash192 = null;

        ChemicalChunkerParser.vbyield_return vbyield193 = null;

        ChemicalChunkerParser.vbchange_return vbchange194 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:6: ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange )
            int alt50=41;
            alt50 = dfa50.predict(input);
            switch (alt50) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:8: vb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vb_in_verb845_static.FOLLOW_vb_in_verb845);
                    vb154=vb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vb154.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:11: vbp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbp_in_verb847_static.FOLLOW_vbp_in_verb847);
                    vbp155=vbp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbp155.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:15: vbg
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbg_in_verb849_static.FOLLOW_vbg_in_verb849);
                    vbg156=vbg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbg156.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:19: vbd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbd_in_verb851_static.FOLLOW_vbd_in_verb851);
                    vbd157=vbd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbd157.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:23: vbz
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbz_in_verb853_static.FOLLOW_vbz_in_verb853);
                    vbz158=vbz();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbz158.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:27: vbn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbn_in_verb855_static.FOLLOW_vbn_in_verb855);
                    vbn159=vbn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbn159.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:31: vbuse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbuse_in_verb857_static.FOLLOW_vbuse_in_verb857);
                    vbuse160=vbuse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbuse160.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:37: vbsubmerge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubmerge_in_verb859_static.FOLLOW_vbsubmerge_in_verb859);
                    vbsubmerge161=vbsubmerge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubmerge161.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:48: vbimmerse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbimmerse_in_verb861_static.FOLLOW_vbimmerse_in_verb861);
                    vbimmerse162=vbimmerse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbimmerse162.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:58: degassMultiVerb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_degassMultiVerb_in_verb863_static.FOLLOW_degassMultiVerb_in_verb863);
                    degassMultiVerb163=degassMultiVerb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, degassMultiVerb163.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:74: vbsubject
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubject_in_verb865_static.FOLLOW_vbsubject_in_verb865);
                    vbsubject164=vbsubject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubject164.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:84: vbadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbadd_in_verb867_static.FOLLOW_vbadd_in_verb867);
                    vbadd165=vbadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbadd165.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:90: vbdilute
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdilute_in_verb869_static.FOLLOW_vbdilute_in_verb869);
                    vbdilute166=vbdilute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdilute166.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:99: vbcharge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcharge_in_verb871_static.FOLLOW_vbcharge_in_verb871);
                    vbcharge167=vbcharge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcharge167.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:108: vbcontain
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcontain_in_verb873_static.FOLLOW_vbcontain_in_verb873);
                    vbcontain168=vbcontain();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcontain168.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:118: vbdrop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdrop_in_verb875_static.FOLLOW_vbdrop_in_verb875);
                    vbdrop169=vbdrop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdrop169.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:125: vbfill
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfill_in_verb877_static.FOLLOW_vbfill_in_verb877);
                    vbfill170=vbfill();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill170.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:132: vbsuspend
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsuspend_in_verb879_static.FOLLOW_vbsuspend_in_verb879);
                    vbsuspend171=vbsuspend();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsuspend171.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:142: vbtreat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbtreat_in_verb881_static.FOLLOW_vbtreat_in_verb881);
                    vbtreat172=vbtreat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbtreat172.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:150: vbapparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbapparatus_in_verb883_static.FOLLOW_vbapparatus_in_verb883);
                    vbapparatus173=vbapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbapparatus173.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:162: vbconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbconcentrate_in_verb885_static.FOLLOW_vbconcentrate_in_verb885);
                    vbconcentrate174=vbconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbconcentrate174.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:176: vbcool
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcool_in_verb887_static.FOLLOW_vbcool_in_verb887);
                    vbcool175=vbcool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcool175.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:183: vbdegass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdegass_in_verb889_static.FOLLOW_vbdegass_in_verb889);
                    vbdegass176=vbdegass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass176.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:192: vbdissolve
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdissolve_in_verb891_static.FOLLOW_vbdissolve_in_verb891);
                    vbdissolve177=vbdissolve();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdissolve177.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:203: vbdry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdry_in_verb893_static.FOLLOW_vbdry_in_verb893);
                    vbdry178=vbdry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdry178.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:209: vbextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbextract_in_verb895_static.FOLLOW_vbextract_in_verb895);
                    vbextract179=vbextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbextract179.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:219: vbfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfilter_in_verb897_static.FOLLOW_vbfilter_in_verb897);
                    vbfilter180=vbfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfilter180.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:229: vbheat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbheat_in_verb900_static.FOLLOW_vbheat_in_verb900);
                    vbheat181=vbheat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbheat181.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:236: vbincrease
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbincrease_in_verb902_static.FOLLOW_vbincrease_in_verb902);
                    vbincrease182=vbincrease();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbincrease182.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:247: vbpartition
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpartition_in_verb904_static.FOLLOW_vbpartition_in_verb904);
                    vbpartition183=vbpartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpartition183.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:259: vbprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbprecipitate_in_verb906_static.FOLLOW_vbprecipitate_in_verb906);
                    vbprecipitate184=vbprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbprecipitate184.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:273: vbpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpurify_in_verb908_static.FOLLOW_vbpurify_in_verb908);
                    vbpurify185=vbpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpurify185.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:282: vbquench
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbquench_in_verb910_static.FOLLOW_vbquench_in_verb910);
                    vbquench186=vbquench();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbquench186.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:291: vbrecover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbrecover_in_verb912_static.FOLLOW_vbrecover_in_verb912);
                    vbrecover187=vbrecover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbrecover187.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:301: vbremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbremove_in_verb914_static.FOLLOW_vbremove_in_verb914);
                    vbremove188=vbremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbremove188.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:310: vbstir
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbstir_in_verb916_static.FOLLOW_vbstir_in_verb916);
                    vbstir189=vbstir();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbstir189.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:317: vbsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsynthesize_in_verb918_static.FOLLOW_vbsynthesize_in_verb918);
                    vbsynthesize190=vbsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize190.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:330: vbwait
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwait_in_verb920_static.FOLLOW_vbwait_in_verb920);
                    vbwait191=vbwait();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwait191.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:337: vbwash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwash_in_verb922_static.FOLLOW_vbwash_in_verb922);
                    vbwash192=vbwash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwash192.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:344: vbyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbyield_in_verb924_static.FOLLOW_vbyield_in_verb924);
                    vbyield193=vbyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield193.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:352: vbchange
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbchange_in_verb926_static.FOLLOW_vbchange_in_verb926);
                    vbchange194=vbchange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbchange194.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, verb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verb"

    public static class degassMultiVerb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "degassMultiVerb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:1: degassMultiVerb : vbdegass cc vbfill ;
    public final ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb() throws RecognitionException {
        ChemicalChunkerParser.degassMultiVerb_return retval = new ChemicalChunkerParser.degassMultiVerb_return();
        retval.start = input.LT(1);
        int degassMultiVerb_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass195 = null;

        ChemicalChunkerParser.cc_return cc196 = null;

        ChemicalChunkerParser.vbfill_return vbfill197 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:2: ( vbdegass cc vbfill )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:4: vbdegass cc vbfill
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbdegass_in_degassMultiVerb935_static.FOLLOW_vbdegass_in_degassMultiVerb935);
            vbdegass195=vbdegass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass195.getTree());
            pushFollow(FOLLOW_cc_in_degassMultiVerb937_static.FOLLOW_cc_in_degassMultiVerb937);
            cc196=cc();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc196.getTree());
            pushFollow(FOLLOW_vbfill_in_degassMultiVerb939_static.FOLLOW_vbfill_in_degassMultiVerb939);
            vbfill197=vbfill();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill197.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, degassMultiVerb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "degassMultiVerb"

    public static class noun_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "noun"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:1: noun : nounStructure ( dash nounStructure )* ;
    public final ChemicalChunkerParser.noun_return noun() throws RecognitionException {
        ChemicalChunkerParser.noun_return retval = new ChemicalChunkerParser.noun_return();
        retval.start = input.LT(1);
        int noun_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure198 = null;

        ChemicalChunkerParser.dash_return dash199 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure200 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:7: ( nounStructure ( dash nounStructure )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:9: nounStructure ( dash nounStructure )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nounStructure_in_noun948_static.FOLLOW_nounStructure_in_noun948);
            nounStructure198=nounStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure198.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:23: ( dash nounStructure )*
            loop51:
            do {
                int alt51=2;
                switch ( input.LA(1) ) {
                case 136:
                    {
                    int LA51_2 = input.LA(2);

                    if ( (synpred173_ChemicalChunker()) ) {
                        alt51=1;
                    }


                    }
                    break;

                }

                switch (alt51) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:24: dash nounStructure
            	    {
            	    pushFollow(FOLLOW_dash_in_noun951_static.FOLLOW_dash_in_noun951);
            	    dash199=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash199.getTree());
            	    pushFollow(FOLLOW_nounStructure_in_noun953_static.FOLLOW_nounStructure_in_noun953);
            	    nounStructure200=nounStructure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure200.getTree());

            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, noun_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "noun"

    public static class nounStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:1: nounStructure : ( prp | prp_poss | citation | cycles | molecule | apparatus | unnamedmolecule | nnstate | procedureNode | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | oscaronts | nntime | nnatmosphere | tmunicode | quantity | nnchementity | nntemp | nnph | nnflash | nngeneral | nnamount | nneq | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | squareBracketedReference | nndry | nnextract | nnfilter | nnprecipitate | nnremove | nnyield | fw | sym | clause | ls | nnps | pos | oscarase );
    public final ChemicalChunkerParser.nounStructure_return nounStructure() throws RecognitionException {
        ChemicalChunkerParser.nounStructure_return retval = new ChemicalChunkerParser.nounStructure_return();
        retval.start = input.LT(1);
        int nounStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prp_return prp201 = null;

        ChemicalChunkerParser.prp_poss_return prp_poss202 = null;

        ChemicalChunkerParser.citation_return citation203 = null;

        ChemicalChunkerParser.cycles_return cycles204 = null;

        ChemicalChunkerParser.molecule_return molecule205 = null;

        ChemicalChunkerParser.apparatus_return apparatus206 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule207 = null;

        ChemicalChunkerParser.nnstate_return nnstate208 = null;

        ChemicalChunkerParser.procedureNode_return procedureNode209 = null;

        ChemicalChunkerParser.nn_return nn210 = null;

        ChemicalChunkerParser.nns_return nns211 = null;

        ChemicalChunkerParser.nnp_return nnp212 = null;

        ChemicalChunkerParser.nnadd_return nnadd213 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase214 = null;

        ChemicalChunkerParser.nnexample_return nnexample215 = null;

        ChemicalChunkerParser.range_return range216 = null;

        ChemicalChunkerParser.oscaronts_return oscaronts217 = null;

        ChemicalChunkerParser.nntime_return nntime218 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere219 = null;

        ChemicalChunkerParser.tmunicode_return tmunicode220 = null;

        ChemicalChunkerParser.quantity_return quantity221 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity222 = null;

        ChemicalChunkerParser.nntemp_return nntemp223 = null;

        ChemicalChunkerParser.nnph_return nnph224 = null;

        ChemicalChunkerParser.nnflash_return nnflash225 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral226 = null;

        ChemicalChunkerParser.nnamount_return nnamount227 = null;

        ChemicalChunkerParser.nneq_return nneq228 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure229 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn230 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography231 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum232 = null;

        ChemicalChunkerParser.nncycle_return nncycle233 = null;

        ChemicalChunkerParser.nntimes_return nntimes234 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate235 = null;

        ChemicalChunkerParser.nnvol_return nnvol236 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify237 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize238 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture239 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference240 = null;

        ChemicalChunkerParser.nndry_return nndry241 = null;

        ChemicalChunkerParser.nnextract_return nnextract242 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter243 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate244 = null;

        ChemicalChunkerParser.nnremove_return nnremove245 = null;

        ChemicalChunkerParser.nnyield_return nnyield246 = null;

        ChemicalChunkerParser.fw_return fw247 = null;

        ChemicalChunkerParser.sym_return sym248 = null;

        ChemicalChunkerParser.clause_return clause249 = null;

        ChemicalChunkerParser.ls_return ls250 = null;

        ChemicalChunkerParser.nnps_return nnps251 = null;

        ChemicalChunkerParser.pos_return pos252 = null;

        ChemicalChunkerParser.oscarase_return oscarase253 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:15: ( prp | prp_poss | citation | cycles | molecule | apparatus | unnamedmolecule | nnstate | procedureNode | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | oscaronts | nntime | nnatmosphere | tmunicode | quantity | nnchementity | nntemp | nnph | nnflash | nngeneral | nnamount | nneq | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | squareBracketedReference | nndry | nnextract | nnfilter | nnprecipitate | nnremove | nnyield | fw | sym | clause | ls | nnps | pos | oscarase )
            int alt52=53;
            alt52 = dfa52.predict(input);
            switch (alt52) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:18: prp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_in_nounStructure964_static.FOLLOW_prp_in_nounStructure964);
                    prp201=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp201.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:22: prp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_poss_in_nounStructure966_static.FOLLOW_prp_poss_in_nounStructure966);
                    prp_poss202=prp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp_poss202.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:31: citation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_citation_in_nounStructure968_static.FOLLOW_citation_in_nounStructure968);
                    citation203=citation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation203.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:40: cycles
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cycles_in_nounStructure970_static.FOLLOW_cycles_in_nounStructure970);
                    cycles204=cycles();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cycles204.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:47: molecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molecule_in_nounStructure972_static.FOLLOW_molecule_in_nounStructure972);
                    molecule205=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule205.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:56: apparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_apparatus_in_nounStructure974_static.FOLLOW_apparatus_in_nounStructure974);
                    apparatus206=apparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus206.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:66: unnamedmolecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmolecule_in_nounStructure976_static.FOLLOW_unnamedmolecule_in_nounStructure976);
                    unnamedmolecule207=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule207.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:82: nnstate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnstate_in_nounStructure978_static.FOLLOW_nnstate_in_nounStructure978);
                    nnstate208=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate208.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:90: procedureNode
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_procedureNode_in_nounStructure980_static.FOLLOW_procedureNode_in_nounStructure980);
                    procedureNode209=procedureNode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureNode209.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:104: nn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nn_in_nounStructure982_static.FOLLOW_nn_in_nounStructure982);
                    nn210=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn210.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:107: nns
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nns_in_nounStructure984_static.FOLLOW_nns_in_nounStructure984);
                    nns211=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns211.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:111: nnp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnp_in_nounStructure986_static.FOLLOW_nnp_in_nounStructure986);
                    nnp212=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp212.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:115: nnadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnadd_in_nounStructure988_static.FOLLOW_nnadd_in_nounStructure988);
                    nnadd213=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd213.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:121: preparationphrase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_preparationphrase_in_nounStructure990_static.FOLLOW_preparationphrase_in_nounStructure990);
                    preparationphrase214=preparationphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase214.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:139: nnexample
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnexample_in_nounStructure992_static.FOLLOW_nnexample_in_nounStructure992);
                    nnexample215=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample215.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:149: range
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_range_in_nounStructure994_static.FOLLOW_range_in_nounStructure994);
                    range216=range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, range216.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:155: oscaronts
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscaronts_in_nounStructure996_static.FOLLOW_oscaronts_in_nounStructure996);
                    oscaronts217=oscaronts();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaronts217.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:165: nntime
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntime_in_nounStructure998_static.FOLLOW_nntime_in_nounStructure998);
                    nntime218=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime218.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:172: nnatmosphere
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnatmosphere_in_nounStructure1000_static.FOLLOW_nnatmosphere_in_nounStructure1000);
                    nnatmosphere219=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere219.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:185: tmunicode
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_tmunicode_in_nounStructure1002_static.FOLLOW_tmunicode_in_nounStructure1002);
                    tmunicode220=tmunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tmunicode220.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:195: quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantity_in_nounStructure1004_static.FOLLOW_quantity_in_nounStructure1004);
                    quantity221=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity221.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:204: nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchementity_in_nounStructure1006_static.FOLLOW_nnchementity_in_nounStructure1006);
                    nnchementity222=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity222.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:217: nntemp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntemp_in_nounStructure1008_static.FOLLOW_nntemp_in_nounStructure1008);
                    nntemp223=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp223.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:224: nnph
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnph_in_nounStructure1010_static.FOLLOW_nnph_in_nounStructure1010);
                    nnph224=nnph();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnph224.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:229: nnflash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnflash_in_nounStructure1012_static.FOLLOW_nnflash_in_nounStructure1012);
                    nnflash225=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash225.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:237: nngeneral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nngeneral_in_nounStructure1014_static.FOLLOW_nngeneral_in_nounStructure1014);
                    nngeneral226=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral226.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:247: nnamount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnamount_in_nounStructure1016_static.FOLLOW_nnamount_in_nounStructure1016);
                    nnamount227=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount227.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:256: nneq
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nneq_in_nounStructure1018_static.FOLLOW_nneq_in_nounStructure1018);
                    nneq228=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq228.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:261: nnpressure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpressure_in_nounStructure1020_static.FOLLOW_nnpressure_in_nounStructure1020);
                    nnpressure229=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure229.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:272: nncolumn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncolumn_in_nounStructure1022_static.FOLLOW_nncolumn_in_nounStructure1022);
                    nncolumn230=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn230.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:281: nnchromatography
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchromatography_in_nounStructure1024_static.FOLLOW_nnchromatography_in_nounStructure1024);
                    nnchromatography231=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography231.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:298: nnvacuum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvacuum_in_nounStructure1026_static.FOLLOW_nnvacuum_in_nounStructure1026);
                    nnvacuum232=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum232.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:307: nncycle
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncycle_in_nounStructure1028_static.FOLLOW_nncycle_in_nounStructure1028);
                    nncycle233=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle233.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:315: nntimes
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntimes_in_nounStructure1030_static.FOLLOW_nntimes_in_nounStructure1030);
                    nntimes234=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes234.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:323: nnconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnconcentrate_in_nounStructure1032_static.FOLLOW_nnconcentrate_in_nounStructure1032);
                    nnconcentrate235=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate235.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:337: nnvol
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvol_in_nounStructure1034_static.FOLLOW_nnvol_in_nounStructure1034);
                    nnvol236=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol236.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:343: nnpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpurify_in_nounStructure1036_static.FOLLOW_nnpurify_in_nounStructure1036);
                    nnpurify237=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify237.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:352: nnsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnsynthesize_in_nounStructure1038_static.FOLLOW_nnsynthesize_in_nounStructure1038);
                    nnsynthesize238=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize238.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:365: nnmixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnmixture_in_nounStructure1040_static.FOLLOW_nnmixture_in_nounStructure1040);
                    nnmixture239=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture239.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:375: squareBracketedReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_squareBracketedReference_in_nounStructure1042_static.FOLLOW_squareBracketedReference_in_nounStructure1042);
                    squareBracketedReference240=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, squareBracketedReference240.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:400: nndry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nndry_in_nounStructure1044_static.FOLLOW_nndry_in_nounStructure1044);
                    nndry241=nndry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nndry241.getTree());

                    }
                    break;
                case 42 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:406: nnextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnextract_in_nounStructure1046_static.FOLLOW_nnextract_in_nounStructure1046);
                    nnextract242=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract242.getTree());

                    }
                    break;
                case 43 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:416: nnfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnfilter_in_nounStructure1048_static.FOLLOW_nnfilter_in_nounStructure1048);
                    nnfilter243=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter243.getTree());

                    }
                    break;
                case 44 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:425: nnprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnprecipitate_in_nounStructure1050_static.FOLLOW_nnprecipitate_in_nounStructure1050);
                    nnprecipitate244=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate244.getTree());

                    }
                    break;
                case 45 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:439: nnremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnremove_in_nounStructure1052_static.FOLLOW_nnremove_in_nounStructure1052);
                    nnremove245=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove245.getTree());

                    }
                    break;
                case 46 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:448: nnyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnyield_in_nounStructure1054_static.FOLLOW_nnyield_in_nounStructure1054);
                    nnyield246=nnyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield246.getTree());

                    }
                    break;
                case 47 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:456: fw
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fw_in_nounStructure1056_static.FOLLOW_fw_in_nounStructure1056);
                    fw247=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw247.getTree());

                    }
                    break;
                case 48 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:459: sym
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sym_in_nounStructure1058_static.FOLLOW_sym_in_nounStructure1058);
                    sym248=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym248.getTree());

                    }
                    break;
                case 49 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:463: clause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_clause_in_nounStructure1060_static.FOLLOW_clause_in_nounStructure1060);
                    clause249=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause249.getTree());

                    }
                    break;
                case 50 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:470: ls
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ls_in_nounStructure1062_static.FOLLOW_ls_in_nounStructure1062);
                    ls250=ls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ls250.getTree());

                    }
                    break;
                case 51 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:473: nnps
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnps_in_nounStructure1064_static.FOLLOW_nnps_in_nounStructure1064);
                    nnps251=nnps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnps251.getTree());

                    }
                    break;
                case 52 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:478: pos
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pos_in_nounStructure1066_static.FOLLOW_pos_in_nounStructure1066);
                    pos252=pos();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pos252.getTree());

                    }
                    break;
                case 53 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:482: oscarase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarase_in_nounStructure1068_static.FOLLOW_oscarase_in_nounStructure1068);
                    oscarase253=oscarase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase253.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, nounStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounStructure"

    public static class prepphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:1: prepphrase : ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther ) ;
    public final ChemicalChunkerParser.prepphrase_return prepphrase() throws RecognitionException {
        ChemicalChunkerParser.prepphrase_return retval = new ChemicalChunkerParser.prepphrase_return();
        retval.start = input.LT(1);
        int prepphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.neg_return neg254 = null;

        ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere255 = null;

        ChemicalChunkerParser.prepphraseTime_return prepphraseTime256 = null;

        ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp257 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN258 = null;

        ChemicalChunkerParser.prepphraseRole_return prepphraseRole259 = null;

        ChemicalChunkerParser.prepphraseOther_return prepphraseOther260 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:2: ( ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:5: ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:5: ( neg )?
            int alt53=2;
            switch ( input.LA(1) ) {
                case 135:
                    {
                    alt53=1;
                    }
                    break;
            }

            switch (alt53) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
                    {
                    pushFollow(FOLLOW_neg_in_prepphrase1080_static.FOLLOW_neg_in_prepphrase1080);
                    neg254=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg254.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )
            int alt54=6;
            alt54 = dfa54.predict(input);
            switch (alt54) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:11: prepphraseAtmosphere
                    {
                    pushFollow(FOLLOW_prepphraseAtmosphere_in_prepphrase1084_static.FOLLOW_prepphraseAtmosphere_in_prepphrase1084);
                    prepphraseAtmosphere255=prepphraseAtmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAtmosphere255.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:32: prepphraseTime
                    {
                    pushFollow(FOLLOW_prepphraseTime_in_prepphrase1086_static.FOLLOW_prepphraseTime_in_prepphrase1086);
                    prepphraseTime256=prepphraseTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTime256.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:47: prepphraseTemp
                    {
                    pushFollow(FOLLOW_prepphraseTemp_in_prepphrase1088_static.FOLLOW_prepphraseTemp_in_prepphrase1088);
                    prepphraseTemp257=prepphraseTemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTemp257.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:62: prepphraseIN
                    {
                    pushFollow(FOLLOW_prepphraseIN_in_prepphrase1090_static.FOLLOW_prepphraseIN_in_prepphrase1090);
                    prepphraseIN258=prepphraseIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN258.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:75: prepphraseRole
                    {
                    pushFollow(FOLLOW_prepphraseRole_in_prepphrase1092_static.FOLLOW_prepphraseRole_in_prepphrase1092);
                    prepphraseRole259=prepphraseRole();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseRole259.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:90: prepphraseOther
                    {
                    pushFollow(FOLLOW_prepphraseOther_in_prepphrase1094_static.FOLLOW_prepphraseOther_in_prepphrase1094);
                    prepphraseOther260=prepphraseOther();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOther260.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, prepphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphrase"

    public static class prepphraseAtmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphere"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:1: prepphraseAtmosphere : prepphraseAtmosphereContent -> ^( AtmospherePhrase prepphraseAtmosphereContent ) ;
    public final ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphere_return retval = new ChemicalChunkerParser.prepphraseAtmosphere_return();
        retval.start = input.LT(1);
        int prepphraseAtmosphere_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent261 = null;


        RewriteRuleSubtreeStream stream_prepphraseAtmosphereContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseAtmosphereContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:228:2: ( prepphraseAtmosphereContent -> ^( AtmospherePhrase prepphraseAtmosphereContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:228:4: prepphraseAtmosphereContent
            {
            pushFollow(FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1106_static.FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1106);
            prepphraseAtmosphereContent261=prepphraseAtmosphereContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseAtmosphereContent.add(prepphraseAtmosphereContent261.getTree());


            // AST REWRITE
            // elements: prepphraseAtmosphereContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 228:32: -> ^( AtmospherePhrase prepphraseAtmosphereContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:228:36: ^( AtmospherePhrase prepphraseAtmosphereContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AtmospherePhrase, "AtmospherePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseAtmosphereContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, prepphraseAtmosphere_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphere"

    public static class prepphraseAtmosphereContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphereContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:1: prepphraseAtmosphereContent : inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? ;
    public final ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphereContent_return retval = new ChemicalChunkerParser.prepphraseAtmosphereContent_return();
        retval.start = input.LT(1);
        int prepphraseAtmosphereContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inunder_return inunder262 = null;

        ChemicalChunkerParser.dt_return dt263 = null;

        ChemicalChunkerParser.advAdj_return advAdj264 = null;

        ChemicalChunkerParser.molecule_return molecule265 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere266 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:2: ( inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:3: inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inunder_in_prepphraseAtmosphereContent1126_static.FOLLOW_inunder_in_prepphraseAtmosphereContent1126);
            inunder262=inunder();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder262.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:12: ( dt )?
            int alt55=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt55=1;
                    }
                    break;
            }

            switch (alt55) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseAtmosphereContent1129_static.FOLLOW_dt_in_prepphraseAtmosphereContent1129);
                    dt263=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt263.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:16: ( advAdj )*
            loop56:
            do {
                int alt56=2;
                alt56 = dfa56.predict(input);
                switch (alt56) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseAtmosphereContent1132_static.FOLLOW_advAdj_in_prepphraseAtmosphereContent1132);
            	    advAdj264=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj264.getTree());

            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);

            pushFollow(FOLLOW_molecule_in_prepphraseAtmosphereContent1135_static.FOLLOW_molecule_in_prepphraseAtmosphereContent1135);
            molecule265=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule265.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:33: ( nnatmosphere )?
            int alt57=2;
            switch ( input.LA(1) ) {
                case 68:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA57_3 = input.LA(3);

                            if ( (synpred234_ChemicalChunker()) ) {
                                alt57=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt57) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1137_static.FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1137);
                    nnatmosphere266=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere266.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, prepphraseAtmosphereContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphereContent"

    public static class prepphraseTime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTime"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:1: prepphraseTime : prepPhraseTimeStructure -> ^( TimePhrase prepPhraseTimeStructure ) ;
    public final ChemicalChunkerParser.prepphraseTime_return prepphraseTime() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTime_return retval = new ChemicalChunkerParser.prepphraseTime_return();
        retval.start = input.LT(1);
        int prepphraseTime_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure267 = null;


        RewriteRuleSubtreeStream stream_prepPhraseTimeStructure=new RewriteRuleSubtreeStream(adaptor,"rule prepPhraseTimeStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:234:2: ( prepPhraseTimeStructure -> ^( TimePhrase prepPhraseTimeStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:234:3: prepPhraseTimeStructure
            {
            pushFollow(FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1147_static.FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1147);
            prepPhraseTimeStructure267=prepPhraseTimeStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepPhraseTimeStructure.add(prepPhraseTimeStructure267.getTree());


            // AST REWRITE
            // elements: prepPhraseTimeStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 234:27: -> ^( TimePhrase prepPhraseTimeStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:234:31: ^( TimePhrase prepPhraseTimeStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TimePhrase, "TimePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepPhraseTimeStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, prepphraseTime_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTime"

    public static class prepPhraseTimeStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepPhraseTimeStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:1: prepPhraseTimeStructure : ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ ;
    public final ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure() throws RecognitionException {
        ChemicalChunkerParser.prepPhraseTimeStructure_return retval = new ChemicalChunkerParser.prepPhraseTimeStructure_return();
        retval.start = input.LT(1);
        int prepPhraseTimeStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj268 = null;

        ChemicalChunkerParser.inAll_return inAll269 = null;

        ChemicalChunkerParser.dt_return dt270 = null;

        ChemicalChunkerParser.advAdj_return advAdj271 = null;

        ChemicalChunkerParser.cd_return cd272 = null;

        ChemicalChunkerParser.nntime_return nntime273 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:2: ( ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:3: ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:3: ( advAdj )*
            loop58:
            do {
                int alt58=2;
                alt58 = dfa58.predict(input);
                switch (alt58) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1165_static.FOLLOW_advAdj_in_prepPhraseTimeStructure1165);
            	    advAdj268=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj268.getTree());

            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:11: ( inAll )?
            int alt59=2;
            switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 150:
                case 169:
                    {
                    alt59=1;
                    }
                    break;
            }

            switch (alt59) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepPhraseTimeStructure1168_static.FOLLOW_inAll_in_prepPhraseTimeStructure1168);
                    inAll269=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll269.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:19: ( dt )?
            int alt60=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt60=1;
                    }
                    break;
            }

            switch (alt60) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepPhraseTimeStructure1172_static.FOLLOW_dt_in_prepPhraseTimeStructure1172);
                    dt270=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt270.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:23: ( advAdj )*
            loop61:
            do {
                int alt61=2;
                switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt61=1;
                    }
                    break;

                }

                switch (alt61) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1175_static.FOLLOW_advAdj_in_prepPhraseTimeStructure1175);
            	    advAdj271=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj271.getTree());

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:31: ( cd )?
            int alt62=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt62=1;
                    }
                    break;
            }

            switch (alt62) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepPhraseTimeStructure1178_static.FOLLOW_cd_in_prepPhraseTimeStructure1178);
                    cd272=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd272.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:35: ( nntime )+
            int cnt63=0;
            loop63:
            do {
                int alt63=2;
                switch ( input.LA(1) ) {
                case 64:
                    {
                    int LA63_2 = input.LA(2);

                    if ( (synpred240_ChemicalChunker()) ) {
                        alt63=1;
                    }


                    }
                    break;

                }

                switch (alt63) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nntime
            	    {
            	    pushFollow(FOLLOW_nntime_in_prepPhraseTimeStructure1181_static.FOLLOW_nntime_in_prepPhraseTimeStructure1181);
            	    nntime273=nntime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime273.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt63 >= 1 ) break loop63;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(63, input);
                        throw eee;
                }
                cnt63++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, prepPhraseTimeStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepPhraseTimeStructure"

    public static class prepphraseTemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTemp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:1: prepphraseTemp : prepphraseTempContent -> ^( TempPhrase prepphraseTempContent ) ;
    public final ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTemp_return retval = new ChemicalChunkerParser.prepphraseTemp_return();
        retval.start = input.LT(1);
        int prepphraseTemp_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent274 = null;


        RewriteRuleSubtreeStream stream_prepphraseTempContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseTempContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:15: ( prepphraseTempContent -> ^( TempPhrase prepphraseTempContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:18: prepphraseTempContent
            {
            pushFollow(FOLLOW_prepphraseTempContent_in_prepphraseTemp1191_static.FOLLOW_prepphraseTempContent_in_prepphraseTemp1191);
            prepphraseTempContent274=prepphraseTempContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseTempContent.add(prepphraseTempContent274.getTree());


            // AST REWRITE
            // elements: prepphraseTempContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 239:40: -> ^( TempPhrase prepphraseTempContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:44: ^( TempPhrase prepphraseTempContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TempPhrase, "TempPhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseTempContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, prepphraseTemp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTemp"

    public static class prepphraseTempContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTempContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:1: prepphraseTempContent : ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ ;
    public final ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTempContent_return retval = new ChemicalChunkerParser.prepphraseTempContent_return();
        retval.start = input.LT(1);
        int prepphraseTempContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj275 = null;

        ChemicalChunkerParser.inAll_return inAll276 = null;

        ChemicalChunkerParser.dt_return dt277 = null;

        ChemicalChunkerParser.advAdj_return advAdj278 = null;

        ChemicalChunkerParser.cd_return cd279 = null;

        ChemicalChunkerParser.nntemp_return nntemp280 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:2: ( ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:5: ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:5: ( advAdj )?
            int alt64=2;
            alt64 = dfa64.predict(input);
            switch (alt64) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1212_static.FOLLOW_advAdj_in_prepphraseTempContent1212);
                    advAdj275=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj275.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:13: ( inAll )?
            int alt65=2;
            switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 150:
                case 169:
                    {
                    alt65=1;
                    }
                    break;
            }

            switch (alt65) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepphraseTempContent1215_static.FOLLOW_inAll_in_prepphraseTempContent1215);
                    inAll276=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll276.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:20: ( dt )?
            int alt66=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt66=1;
                    }
                    break;
            }

            switch (alt66) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseTempContent1218_static.FOLLOW_dt_in_prepphraseTempContent1218);
                    dt277=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt277.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:24: ( advAdj )?
            int alt67=2;
            switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt67=1;
                    }
                    break;
            }

            switch (alt67) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1221_static.FOLLOW_advAdj_in_prepphraseTempContent1221);
                    advAdj278=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj278.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:32: ( cd )?
            int alt68=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt68=1;
                    }
                    break;
            }

            switch (alt68) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepphraseTempContent1224_static.FOLLOW_cd_in_prepphraseTempContent1224);
                    cd279=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd279.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:36: ( nntemp )+
            int cnt69=0;
            loop69:
            do {
                int alt69=2;
                switch ( input.LA(1) ) {
                case 72:
                    {
                    int LA69_2 = input.LA(2);

                    if ( (synpred246_ChemicalChunker()) ) {
                        alt69=1;
                    }


                    }
                    break;

                }

                switch (alt69) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nntemp
            	    {
            	    pushFollow(FOLLOW_nntemp_in_prepphraseTempContent1227_static.FOLLOW_nntemp_in_prepphraseTempContent1227);
            	    nntemp280=nntemp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp280.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt69 >= 1 ) break loop69;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(69, input);
                        throw eee;
                }
                cnt69++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, prepphraseTempContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTempContent"

    public static class prepphraseIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseIN"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:244:1: prepphraseIN : inin molecule -> ^( PrepPhrase inin molecule ) ;
    public final ChemicalChunkerParser.prepphraseIN_return prepphraseIN() throws RecognitionException {
        ChemicalChunkerParser.prepphraseIN_return retval = new ChemicalChunkerParser.prepphraseIN_return();
        retval.start = input.LT(1);
        int prepphraseIN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin281 = null;

        ChemicalChunkerParser.molecule_return molecule282 = null;


        RewriteRuleSubtreeStream stream_inin=new RewriteRuleSubtreeStream(adaptor,"rule inin");
        RewriteRuleSubtreeStream stream_molecule=new RewriteRuleSubtreeStream(adaptor,"rule molecule");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:2: ( inin molecule -> ^( PrepPhrase inin molecule ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:3: inin molecule
            {
            pushFollow(FOLLOW_inin_in_prepphraseIN1236_static.FOLLOW_inin_in_prepphraseIN1236);
            inin281=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inin.add(inin281.getTree());
            pushFollow(FOLLOW_molecule_in_prepphraseIN1238_static.FOLLOW_molecule_in_prepphraseIN1238);
            molecule282=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_molecule.add(molecule282.getTree());


            // AST REWRITE
            // elements: molecule, inin
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 245:17: -> ^( PrepPhrase inin molecule )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:21: ^( PrepPhrase inin molecule )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inin.nextTree());
                adaptor.addChild(root_1, stream_molecule.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, prepphraseIN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseIN"

    public static class prepphraseRole_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseRole"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:1: prepphraseRole : inas ( dt )? nnchementity -> ^( RolePrepPhrase inas ( dt )? nnchementity ) ;
    public final ChemicalChunkerParser.prepphraseRole_return prepphraseRole() throws RecognitionException {
        ChemicalChunkerParser.prepphraseRole_return retval = new ChemicalChunkerParser.prepphraseRole_return();
        retval.start = input.LT(1);
        int prepphraseRole_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inas_return inas283 = null;

        ChemicalChunkerParser.dt_return dt284 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity285 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_inas=new RewriteRuleSubtreeStream(adaptor,"rule inas");
        RewriteRuleSubtreeStream stream_nnchementity=new RewriteRuleSubtreeStream(adaptor,"rule nnchementity");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:2: ( inas ( dt )? nnchementity -> ^( RolePrepPhrase inas ( dt )? nnchementity ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:3: inas ( dt )? nnchementity
            {
            pushFollow(FOLLOW_inas_in_prepphraseRole1259_static.FOLLOW_inas_in_prepphraseRole1259);
            inas283=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inas.add(inas283.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:8: ( dt )?
            int alt70=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt70=1;
                    }
                    break;
            }

            switch (alt70) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseRole1261_static.FOLLOW_dt_in_prepphraseRole1261);
                    dt284=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt284.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnchementity_in_prepphraseRole1264_static.FOLLOW_nnchementity_in_prepphraseRole1264);
            nnchementity285=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnchementity.add(nnchementity285.getTree());


            // AST REWRITE
            // elements: nnchementity, dt, inas
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 248:25: -> ^( RolePrepPhrase inas ( dt )? nnchementity )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:28: ^( RolePrepPhrase inas ( dt )? nnchementity )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RolePrepPhrase, "RolePrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inas.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:51: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                adaptor.addChild(root_1, stream_nnchementity.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, prepphraseRole_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseRole"

    public static class prepphraseOther_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOther"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:1: prepphraseOther : ( advAdj )* ( inMost )+ nounphrase -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOther_return prepphraseOther() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOther_return retval = new ChemicalChunkerParser.prepphraseOther_return();
        retval.start = input.LT(1);
        int prepphraseOther_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj286 = null;

        ChemicalChunkerParser.inMost_return inMost287 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase288 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inMost=new RewriteRuleSubtreeStream(adaptor,"rule inMost");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:2: ( ( advAdj )* ( inMost )+ nounphrase -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:4: ( advAdj )* ( inMost )+ nounphrase
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:4: ( advAdj )*
            loop71:
            do {
                int alt71=2;
                switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt71=1;
                    }
                    break;

                }

                switch (alt71) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseOther1287_static.FOLLOW_advAdj_in_prepphraseOther1287);
            	    advAdj286=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_advAdj.add(advAdj286.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:12: ( inMost )+
            int cnt72=0;
            loop72:
            do {
                int alt72=2;
                switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 150:
                case 169:
                    {
                    alt72=1;
                    }
                    break;

                }

                switch (alt72) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inMost
            	    {
            	    pushFollow(FOLLOW_inMost_in_prepphraseOther1290_static.FOLLOW_inMost_in_prepphraseOther1290);
            	    inMost287=inMost();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_inMost.add(inMost287.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt72 >= 1 ) break loop72;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(72, input);
                        throw eee;
                }
                cnt72++;
            } while (true);

            pushFollow(FOLLOW_nounphrase_in_prepphraseOther1294_static.FOLLOW_nounphrase_in_prepphraseOther1294);
            nounphrase288=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase288.getTree());


            // AST REWRITE
            // elements: inMost, nounphrase, advAdj
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 251:32: -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:36: ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:50: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                if ( !(stream_inMost.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_inMost.hasNext() ) {
                    adaptor.addChild(root_1, stream_inMost.nextTree());

                }
                stream_inMost.reset();
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, prepphraseOther_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseOther"

    public static class prepphraseOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOf"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:1: prepphraseOf : inof nounphrase -> ^( PrepPhrase inof nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOf_return prepphraseOf() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOf_return retval = new ChemicalChunkerParser.prepphraseOf_return();
        retval.start = input.LT(1);
        int prepphraseOf_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inof_return inof289 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase290 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inof=new RewriteRuleSubtreeStream(adaptor,"rule inof");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:2: ( inof nounphrase -> ^( PrepPhrase inof nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:4: inof nounphrase
            {
            pushFollow(FOLLOW_inof_in_prepphraseOf1320_static.FOLLOW_inof_in_prepphraseOf1320);
            inof289=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inof.add(inof289.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseOf1323_static.FOLLOW_nounphrase_in_prepphraseOf1323);
            nounphrase290=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase290.getTree());


            // AST REWRITE
            // elements: inof, nounphrase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 254:20: -> ^( PrepPhrase inof nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:24: ^( PrepPhrase inof nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inof.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, prepphraseOf_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseOf"

    public static class prepphraseAfter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAfter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:256:1: prepphraseAfter : ( advAdj )? inafter nounphrase -> ^( PrepPhrase ( advAdj )* inafter nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseAfter_return prepphraseAfter() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAfter_return retval = new ChemicalChunkerParser.prepphraseAfter_return();
        retval.start = input.LT(1);
        int prepphraseAfter_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj291 = null;

        ChemicalChunkerParser.inafter_return inafter292 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase293 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inafter=new RewriteRuleSubtreeStream(adaptor,"rule inafter");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:2: ( ( advAdj )? inafter nounphrase -> ^( PrepPhrase ( advAdj )* inafter nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:5: ( advAdj )? inafter nounphrase
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:5: ( advAdj )?
            int alt73=2;
            switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt73=1;
                    }
                    break;
            }

            switch (alt73) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseAfter1345_static.FOLLOW_advAdj_in_prepphraseAfter1345);
                    advAdj291=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_advAdj.add(advAdj291.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_inafter_in_prepphraseAfter1348_static.FOLLOW_inafter_in_prepphraseAfter1348);
            inafter292=inafter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inafter.add(inafter292.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseAfter1351_static.FOLLOW_nounphrase_in_prepphraseAfter1351);
            nounphrase293=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase293.getTree());


            // AST REWRITE
            // elements: advAdj, inafter, nounphrase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 257:33: -> ^( PrepPhrase ( advAdj )* inafter nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:37: ^( PrepPhrase ( advAdj )* inafter nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:51: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                adaptor.addChild(root_1, stream_inafter.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, prepphraseAfter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAfter"

    public static class preparationphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preparationphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:1: preparationphrase : vbsynthesize inas ( nnexample cd | prepphrase ) ;
    public final ChemicalChunkerParser.preparationphrase_return preparationphrase() throws RecognitionException {
        ChemicalChunkerParser.preparationphrase_return retval = new ChemicalChunkerParser.preparationphrase_return();
        retval.start = input.LT(1);
        int preparationphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize294 = null;

        ChemicalChunkerParser.inas_return inas295 = null;

        ChemicalChunkerParser.nnexample_return nnexample296 = null;

        ChemicalChunkerParser.cd_return cd297 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase298 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:2: ( vbsynthesize inas ( nnexample cd | prepphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:4: vbsynthesize inas ( nnexample cd | prepphrase )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbsynthesize_in_preparationphrase1376_static.FOLLOW_vbsynthesize_in_preparationphrase1376);
            vbsynthesize294=vbsynthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize294.getTree());
            pushFollow(FOLLOW_inas_in_preparationphrase1378_static.FOLLOW_inas_in_preparationphrase1378);
            inas295=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inas295.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:22: ( nnexample cd | prepphrase )
            int alt74=2;
            switch ( input.LA(1) ) {
            case 83:
                {
                alt74=1;
                }
                break;
            case 39:
            case 40:
            case 45:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 64:
            case 72:
            case 135:
            case 146:
            case 147:
            case 150:
            case 151:
            case 152:
            case 153:
            case 164:
            case 165:
            case 166:
            case 167:
            case 169:
                {
                alt74=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;
            }

            switch (alt74) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:23: nnexample cd
                    {
                    pushFollow(FOLLOW_nnexample_in_preparationphrase1381_static.FOLLOW_nnexample_in_preparationphrase1381);
                    nnexample296=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample296.getTree());
                    pushFollow(FOLLOW_cd_in_preparationphrase1383_static.FOLLOW_cd_in_preparationphrase1383);
                    cd297=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd297.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:37: prepphrase
                    {
                    pushFollow(FOLLOW_prepphrase_in_preparationphrase1386_static.FOLLOW_prepphrase_in_preparationphrase1386);
                    prepphrase298=prepphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase298.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, preparationphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "preparationphrase"

    public static class multiApparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiApparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:1: multiApparatus : apparatus ( ( conjunction )* apparatus )* ;
    public final ChemicalChunkerParser.multiApparatus_return multiApparatus() throws RecognitionException {
        ChemicalChunkerParser.multiApparatus_return retval = new ChemicalChunkerParser.multiApparatus_return();
        retval.start = input.LT(1);
        int multiApparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.apparatus_return apparatus299 = null;

        ChemicalChunkerParser.conjunction_return conjunction300 = null;

        ChemicalChunkerParser.apparatus_return apparatus301 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:2: ( apparatus ( ( conjunction )* apparatus )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:4: apparatus ( ( conjunction )* apparatus )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_apparatus_in_multiApparatus1397_static.FOLLOW_apparatus_in_multiApparatus1397);
            apparatus299=apparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus299.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:14: ( ( conjunction )* apparatus )*
            loop76:
            do {
                int alt76=2;
                alt76 = dfa76.predict(input);
                switch (alt76) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:15: ( conjunction )* apparatus
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:15: ( conjunction )*
            	    loop75:
            	    do {
            	        int alt75=2;
            	        alt75 = dfa75.predict(input);
            	        switch (alt75) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_multiApparatus1400_static.FOLLOW_conjunction_in_multiApparatus1400);
            	    	    conjunction300=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction300.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop75;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_apparatus_in_multiApparatus1403_static.FOLLOW_apparatus_in_multiApparatus1403);
            	    apparatus301=apparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus301.getTree());

            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, multiApparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiApparatus"

    public static class apparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:1: apparatus : ( dt )? ( preapparatus )* ( nnApp )+ -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ ) ;
    public final ChemicalChunkerParser.apparatus_return apparatus() throws RecognitionException {
        ChemicalChunkerParser.apparatus_return retval = new ChemicalChunkerParser.apparatus_return();
        retval.start = input.LT(1);
        int apparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt302 = null;

        ChemicalChunkerParser.preapparatus_return preapparatus303 = null;

        ChemicalChunkerParser.nnApp_return nnApp304 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_nnApp=new RewriteRuleSubtreeStream(adaptor,"rule nnApp");
        RewriteRuleSubtreeStream stream_preapparatus=new RewriteRuleSubtreeStream(adaptor,"rule preapparatus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:2: ( ( dt )? ( preapparatus )* ( nnApp )+ -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:4: ( dt )? ( preapparatus )* ( nnApp )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:4: ( dt )?
            int alt77=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt77=1;
                    }
                    break;
            }

            switch (alt77) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_apparatus1414_static.FOLLOW_dt_in_apparatus1414);
                    dt302=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt302.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:8: ( preapparatus )*
            loop78:
            do {
                int alt78=2;
                switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 46:
                case 63:
                case 71:
                case 73:
                case 77:
                case 84:
                case 89:
                case 130:
                case 133:
                case 139:
                case 143:
                case 146:
                case 151:
                case 152:
                case 153:
                case 156:
                    {
                    alt78=1;
                    }
                    break;

                }

                switch (alt78) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: preapparatus
            	    {
            	    pushFollow(FOLLOW_preapparatus_in_apparatus1417_static.FOLLOW_preapparatus_in_apparatus1417);
            	    preapparatus303=preapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_preapparatus.add(preapparatus303.getTree());

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:22: ( nnApp )+
            int cnt79=0;
            loop79:
            do {
                int alt79=2;
                switch ( input.LA(1) ) {
                case 100:
                    {
                    int LA79_2 = input.LA(2);

                    if ( (synpred256_ChemicalChunker()) ) {
                        alt79=1;
                    }


                    }
                    break;

                }

                switch (alt79) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnApp
            	    {
            	    pushFollow(FOLLOW_nnApp_in_apparatus1420_static.FOLLOW_nnApp_in_apparatus1420);
            	    nnApp304=nnApp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nnApp.add(nnApp304.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt79 >= 1 ) break loop79;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(79, input);
                        throw eee;
                }
                cnt79++;
            } while (true);



            // AST REWRITE
            // elements: nnApp, preapparatus, dt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 265:28: -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:31: ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(APPARATUS, "APPARATUS"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:45: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:49: ( preapparatus )*
                while ( stream_preapparatus.hasNext() ) {
                    adaptor.addChild(root_1, stream_preapparatus.nextTree());

                }
                stream_preapparatus.reset();
                if ( !(stream_nnApp.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nnApp.hasNext() ) {
                    adaptor.addChild(root_1, stream_nnApp.nextTree());

                }
                stream_nnApp.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, apparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "apparatus"

    public static class nnApp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnApp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:1: nnApp : ( nnapparatus )+ ( dash nnapparatus )* ;
    public final ChemicalChunkerParser.nnApp_return nnApp() throws RecognitionException {
        ChemicalChunkerParser.nnApp_return retval = new ChemicalChunkerParser.nnApp_return();
        retval.start = input.LT(1);
        int nnApp_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus305 = null;

        ChemicalChunkerParser.dash_return dash306 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus307 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:2: ( ( nnapparatus )+ ( dash nnapparatus )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:4: ( nnapparatus )+ ( dash nnapparatus )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:4: ( nnapparatus )+
            int cnt80=0;
            loop80:
            do {
                int alt80=2;
                switch ( input.LA(1) ) {
                case 100:
                    {
                    int LA80_2 = input.LA(2);

                    if ( (synpred257_ChemicalChunker()) ) {
                        alt80=1;
                    }


                    }
                    break;

                }

                switch (alt80) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnapparatus
            	    {
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp1447_static.FOLLOW_nnapparatus_in_nnApp1447);
            	    nnapparatus305=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus305.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt80 >= 1 ) break loop80;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(80, input);
                        throw eee;
                }
                cnt80++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:17: ( dash nnapparatus )*
            loop81:
            do {
                int alt81=2;
                switch ( input.LA(1) ) {
                case 136:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 100:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA81_5 = input.LA(5);

                                if ( (synpred258_ChemicalChunker()) ) {
                                    alt81=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt81) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:18: dash nnapparatus
            	    {
            	    pushFollow(FOLLOW_dash_in_nnApp1451_static.FOLLOW_dash_in_nnApp1451);
            	    dash306=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash306.getTree());
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp1453_static.FOLLOW_nnapparatus_in_nnApp1453);
            	    nnapparatus307=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus307.getTree());

            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, nnApp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnApp"

    public static class preapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:1: preapparatus : ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ ;
    public final ChemicalChunkerParser.preapparatus_return preapparatus() throws RecognitionException {
        ChemicalChunkerParser.preapparatus_return retval = new ChemicalChunkerParser.preapparatus_return();
        retval.start = input.LT(1);
        int preapparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity308 = null;

        ChemicalChunkerParser.adj_return adj309 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure310 = null;

        ChemicalChunkerParser.nnadd_return nnadd311 = null;

        ChemicalChunkerParser.molecule_return molecule312 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity313 = null;

        ChemicalChunkerParser.nnstate_return nnstate314 = null;

        ChemicalChunkerParser.nn_return nn315 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:2: ( ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            int cnt82=0;
            loop82:
            do {
                int alt82=9;
                alt82 = dfa82.predict(input);
                switch (alt82) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:8: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_preapparatus1467_static.FOLLOW_quantity_in_preapparatus1467);
            	    quantity308=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity308.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:17: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_preapparatus1469_static.FOLLOW_adj_in_preapparatus1469);
            	    adj309=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj309.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:21: nnpressure
            	    {
            	    pushFollow(FOLLOW_nnpressure_in_preapparatus1471_static.FOLLOW_nnpressure_in_preapparatus1471);
            	    nnpressure310=nnpressure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure310.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:32: nnadd
            	    {
            	    pushFollow(FOLLOW_nnadd_in_preapparatus1473_static.FOLLOW_nnadd_in_preapparatus1473);
            	    nnadd311=nnadd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd311.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:38: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_preapparatus1475_static.FOLLOW_molecule_in_preapparatus1475);
            	    molecule312=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule312.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:47: nnchementity
            	    {
            	    pushFollow(FOLLOW_nnchementity_in_preapparatus1477_static.FOLLOW_nnchementity_in_preapparatus1477);
            	    nnchementity313=nnchementity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity313.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:60: nnstate
            	    {
            	    pushFollow(FOLLOW_nnstate_in_preapparatus1479_static.FOLLOW_nnstate_in_preapparatus1479);
            	    nnstate314=nnstate();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate314.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:68: nn
            	    {
            	    pushFollow(FOLLOW_nn_in_preapparatus1481_static.FOLLOW_nn_in_preapparatus1481);
            	    nn315=nn();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn315.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt82 >= 1 ) break loop82;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(82, input);
                        throw eee;
                }
                cnt82++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, preapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "preapparatus"

    public static class oscaronts_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaronts"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:272:1: oscaronts : ( oscaront )+ -> ^( OSCARONT ( oscaront )+ ) ;
    public final ChemicalChunkerParser.oscaronts_return oscaronts() throws RecognitionException {
        ChemicalChunkerParser.oscaronts_return retval = new ChemicalChunkerParser.oscaronts_return();
        retval.start = input.LT(1);
        int oscaronts_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscaront_return oscaront316 = null;


        RewriteRuleSubtreeStream stream_oscaront=new RewriteRuleSubtreeStream(adaptor,"rule oscaront");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:2: ( ( oscaront )+ -> ^( OSCARONT ( oscaront )+ ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:4: ( oscaront )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:4: ( oscaront )+
            int cnt83=0;
            loop83:
            do {
                int alt83=2;
                switch ( input.LA(1) ) {
                case 42:
                    {
                    int LA83_2 = input.LA(2);

                    if ( (synpred267_ChemicalChunker()) ) {
                        alt83=1;
                    }


                    }
                    break;

                }

                switch (alt83) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscaront
            	    {
            	    pushFollow(FOLLOW_oscaront_in_oscaronts1493_static.FOLLOW_oscaront_in_oscaronts1493);
            	    oscaront316=oscaront();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscaront.add(oscaront316.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt83 >= 1 ) break loop83;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(83, input);
                        throw eee;
                }
                cnt83++;
            } while (true);



            // AST REWRITE
            // elements: oscaront
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 273:14: -> ^( OSCARONT ( oscaront )+ )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:17: ^( OSCARONT ( oscaront )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARONT, "OSCARONT"), root_1);

                if ( !(stream_oscaront.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_oscaront.hasNext() ) {
                    adaptor.addChild(root_1, stream_oscaront.nextTree());

                }
                stream_oscaront.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, oscaronts_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscaronts"

    public static class oscarCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:1: oscarCompound : ( jjcomp | adj )* oscarCompoundStructure ( adj )? ( nnstate )? ( numericReferenceOrQuantity | nnchementity )? ( quantity )* ( fromProcedure )? ;
    public final ChemicalChunkerParser.oscarCompound_return oscarCompound() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound_return retval = new ChemicalChunkerParser.oscarCompound_return();
        retval.start = input.LT(1);
        int oscarCompound_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp317 = null;

        ChemicalChunkerParser.adj_return adj318 = null;

        ChemicalChunkerParser.oscarCompoundStructure_return oscarCompoundStructure319 = null;

        ChemicalChunkerParser.adj_return adj320 = null;

        ChemicalChunkerParser.nnstate_return nnstate321 = null;

        ChemicalChunkerParser.numericReferenceOrQuantity_return numericReferenceOrQuantity322 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity323 = null;

        ChemicalChunkerParser.quantity_return quantity324 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure325 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:15: ( ( jjcomp | adj )* oscarCompoundStructure ( adj )? ( nnstate )? ( numericReferenceOrQuantity | nnchementity )? ( quantity )* ( fromProcedure )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:18: ( jjcomp | adj )* oscarCompoundStructure ( adj )? ( nnstate )? ( numericReferenceOrQuantity | nnchementity )? ( quantity )* ( fromProcedure )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:18: ( jjcomp | adj )*
            loop84:
            do {
                int alt84=3;
                switch ( input.LA(1) ) {
                case 46:
                    {
                    alt84=1;
                    }
                    break;
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                    {
                    alt84=2;
                    }
                    break;

                }

                switch (alt84) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:19: jjcomp
            	    {
            	    pushFollow(FOLLOW_jjcomp_in_oscarCompound1514_static.FOLLOW_jjcomp_in_oscarCompound1514);
            	    jjcomp317=jjcomp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp317.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:26: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_oscarCompound1516_static.FOLLOW_adj_in_oscarCompound1516);
            	    adj318=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj318.getTree());

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);

            pushFollow(FOLLOW_oscarCompoundStructure_in_oscarCompound1520_static.FOLLOW_oscarCompoundStructure_in_oscarCompound1520);
            oscarCompoundStructure319=oscarCompoundStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompoundStructure319.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:55: ( adj )?
            int alt85=2;
            alt85 = dfa85.predict(input);
            switch (alt85) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_oscarCompound1522_static.FOLLOW_adj_in_oscarCompound1522);
                    adj320=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj320.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:60: ( nnstate )?
            int alt86=2;
            switch ( input.LA(1) ) {
                case 63:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA86_3 = input.LA(3);

                            if ( (synpred271_ChemicalChunker()) ) {
                                alt86=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt86) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnstate
                    {
                    pushFollow(FOLLOW_nnstate_in_oscarCompound1525_static.FOLLOW_nnstate_in_oscarCompound1525);
                    nnstate321=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate321.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:69: ( numericReferenceOrQuantity | nnchementity )?
            int alt87=3;
            alt87 = dfa87.predict(input);
            switch (alt87) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:70: numericReferenceOrQuantity
                    {
                    pushFollow(FOLLOW_numericReferenceOrQuantity_in_oscarCompound1529_static.FOLLOW_numericReferenceOrQuantity_in_oscarCompound1529);
                    numericReferenceOrQuantity322=numericReferenceOrQuantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericReferenceOrQuantity322.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:99: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_oscarCompound1533_static.FOLLOW_nnchementity_in_oscarCompound1533);
                    nnchementity323=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity323.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:115: ( quantity )*
            loop88:
            do {
                int alt88=2;
                alt88 = dfa88.predict(input);
                switch (alt88) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_oscarCompound1538_static.FOLLOW_quantity_in_oscarCompound1538);
            	    quantity324=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity324.getTree());

            	    }
            	    break;

            	default :
            	    break loop88;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:125: ( fromProcedure )?
            int alt89=2;
            alt89 = dfa89.predict(input);
            switch (alt89) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: fromProcedure
                    {
                    pushFollow(FOLLOW_fromProcedure_in_oscarCompound1541_static.FOLLOW_fromProcedure_in_oscarCompound1541);
                    fromProcedure325=fromProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure325.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, oscarCompound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound"

    public static class oscarCompoundStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompoundStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:1: oscarCompoundStructure : ( ( oscarcm )+ ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure ) -> ^( OSCARCM ( oscarcm )* ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? ) ;
    public final ChemicalChunkerParser.oscarCompoundStructure_return oscarCompoundStructure() throws RecognitionException {
        ChemicalChunkerParser.oscarCompoundStructure_return retval = new ChemicalChunkerParser.oscarCompoundStructure_return();
        retval.start = input.LT(1);
        int oscarCompoundStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm326 = null;

        ChemicalChunkerParser.afterOscarCompoundStructure_return afterOscarCompoundStructure327 = null;

        ChemicalChunkerParser.bracketedOscarCompoundStructure_return bracketedOscarCompoundStructure328 = null;


        RewriteRuleSubtreeStream stream_bracketedOscarCompoundStructure=new RewriteRuleSubtreeStream(adaptor,"rule bracketedOscarCompoundStructure");
        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_afterOscarCompoundStructure=new RewriteRuleSubtreeStream(adaptor,"rule afterOscarCompoundStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:23: ( ( ( oscarcm )+ ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure ) -> ^( OSCARCM ( oscarcm )* ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:25: ( ( oscarcm )+ ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:25: ( ( oscarcm )+ ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure )
            int alt92=2;
            switch ( input.LA(1) ) {
            case 84:
                {
                alt92=1;
                }
                break;
            case 143:
                {
                alt92=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;
            }

            switch (alt92) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:26: ( oscarcm )+ ( afterOscarCompoundStructure )?
                    {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:26: ( oscarcm )+
                    int cnt90=0;
                    loop90:
                    do {
                        int alt90=2;
                        switch ( input.LA(1) ) {
                        case 84:
                            {
                            int LA90_2 = input.LA(2);

                            if ( (synpred276_ChemicalChunker()) ) {
                                alt90=1;
                            }


                            }
                            break;

                        }

                        switch (alt90) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
                    	    {
                    	    pushFollow(FOLLOW_oscarcm_in_oscarCompoundStructure1550_static.FOLLOW_oscarcm_in_oscarCompoundStructure1550);
                    	    oscarcm326=oscarcm();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm326.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt90 >= 1 ) break loop90;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(90, input);
                                throw eee;
                        }
                        cnt90++;
                    } while (true);

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:35: ( afterOscarCompoundStructure )?
                    int alt91=2;
                    alt91 = dfa91.predict(input);
                    switch (alt91) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: afterOscarCompoundStructure
                            {
                            pushFollow(FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1553_static.FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1553);
                            afterOscarCompoundStructure327=afterOscarCompoundStructure();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_afterOscarCompoundStructure.add(afterOscarCompoundStructure327.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:66: bracketedOscarCompoundStructure
                    {
                    pushFollow(FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1558_static.FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1558);
                    bracketedOscarCompoundStructure328=bracketedOscarCompoundStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedOscarCompoundStructure.add(bracketedOscarCompoundStructure328.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: bracketedOscarCompoundStructure, afterOscarCompoundStructure, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 276:99: -> ^( OSCARCM ( oscarcm )* ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:102: ^( OSCARCM ( oscarcm )* ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARCM, "OSCARCM"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:112: ( oscarcm )*
                while ( stream_oscarcm.hasNext() ) {
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_oscarcm.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:121: ( afterOscarCompoundStructure )?
                if ( stream_afterOscarCompoundStructure.hasNext() ) {
                    adaptor.addChild(root_1, stream_afterOscarCompoundStructure.nextTree());

                }
                stream_afterOscarCompoundStructure.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:150: ( bracketedOscarCompoundStructure )?
                if ( stream_bracketedOscarCompoundStructure.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedOscarCompoundStructure.nextTree());

                }
                stream_bracketedOscarCompoundStructure.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, oscarCompoundStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompoundStructure"

    public static class afterOscarCompoundStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "afterOscarCompoundStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:1: afterOscarCompoundStructure : ( ( dash ( oscarcm )+ )+ ( dash )? | ( ( colon ( oscarcm )+ )+ ( lrb )? ratio )=> ( colon ( oscarcm )+ )+ | ( dash | apost )+ );
    public final ChemicalChunkerParser.afterOscarCompoundStructure_return afterOscarCompoundStructure() throws RecognitionException {
        ChemicalChunkerParser.afterOscarCompoundStructure_return retval = new ChemicalChunkerParser.afterOscarCompoundStructure_return();
        retval.start = input.LT(1);
        int afterOscarCompoundStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dash_return dash329 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm330 = null;

        ChemicalChunkerParser.dash_return dash331 = null;

        ChemicalChunkerParser.colon_return colon332 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm333 = null;

        ChemicalChunkerParser.dash_return dash334 = null;

        ChemicalChunkerParser.apost_return apost335 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:28: ( ( dash ( oscarcm )+ )+ ( dash )? | ( ( colon ( oscarcm )+ )+ ( lrb )? ratio )=> ( colon ( oscarcm )+ )+ | ( dash | apost )+ )
            int alt99=3;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==136) ) {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 84:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            int LA99_6 = input.LA(5);

                            if ( (synpred282_ChemicalChunker()) ) {
                                alt99=1;
                            }
                            else if ( (true) ) {
                                alt99=3;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 99, 6, input);

                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 99, 5, input);

                            throw nvae;
                        }

                        }
                        break;
                    case EOF:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 68:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 82:
                    case 83:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 120:
                    case 121:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 130:
                    case 131:
                    case 132:
                    case 133:
                    case 134:
                    case 135:
                    case 136:
                    case 137:
                    case 138:
                    case 139:
                    case 140:
                    case 141:
                    case 142:
                    case 143:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 163:
                    case 164:
                    case 165:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 178:
                    case 179:
                    case 180:
                        {
                        alt99=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 99, 4, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 99, 1, input);

                    throw nvae;
                }

            }
            else if ( (LA99_0==132) && (synpred286_ChemicalChunker())) {
                alt99=2;
            }
            else if ( (LA99_0==134) ) {
                alt99=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);

                throw nvae;
            }
            switch (alt99) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:30: ( dash ( oscarcm )+ )+ ( dash )?
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:30: ( dash ( oscarcm )+ )+
                    int cnt94=0;
                    loop94:
                    do {
                        int alt94=2;
                        switch ( input.LA(1) ) {
                        case 136:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                switch ( input.LA(3) ) {
                                case 84:
                                    {
                                    switch ( input.LA(4) ) {
                                    case TOKEN:
                                        {
                                        int LA94_5 = input.LA(5);

                                        if ( (synpred280_ChemicalChunker()) ) {
                                            alt94=1;
                                        }


                                        }
                                        break;

                                    }

                                    }
                                    break;

                                }

                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt94) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:31: dash ( oscarcm )+
                    	    {
                    	    pushFollow(FOLLOW_dash_in_afterOscarCompoundStructure1581_static.FOLLOW_dash_in_afterOscarCompoundStructure1581);
                    	    dash329=dash();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash329.getTree());
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:36: ( oscarcm )+
                    	    int cnt93=0;
                    	    loop93:
                    	    do {
                    	        int alt93=2;
                    	        switch ( input.LA(1) ) {
                    	        case 84:
                    	            {
                    	            switch ( input.LA(2) ) {
                    	            case TOKEN:
                    	                {
                    	                int LA93_3 = input.LA(3);

                    	                if ( (synpred279_ChemicalChunker()) ) {
                    	                    alt93=1;
                    	                }


                    	                }
                    	                break;

                    	            }

                    	            }
                    	            break;

                    	        }

                    	        switch (alt93) {
                    	    	case 1 :
                    	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
                    	    	    {
                    	    	    pushFollow(FOLLOW_oscarcm_in_afterOscarCompoundStructure1583_static.FOLLOW_oscarcm_in_afterOscarCompoundStructure1583);
                    	    	    oscarcm330=oscarcm();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm330.getTree());

                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    if ( cnt93 >= 1 ) break loop93;
                    	    	    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                EarlyExitException eee =
                    	                    new EarlyExitException(93, input);
                    	                throw eee;
                    	        }
                    	        cnt93++;
                    	    } while (true);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt94 >= 1 ) break loop94;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(94, input);
                                throw eee;
                        }
                        cnt94++;
                    } while (true);

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:47: ( dash )?
                    int alt95=2;
                    switch ( input.LA(1) ) {
                        case 136:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA95_3 = input.LA(3);

                                    if ( (synpred281_ChemicalChunker()) ) {
                                        alt95=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt95) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dash
                            {
                            pushFollow(FOLLOW_dash_in_afterOscarCompoundStructure1588_static.FOLLOW_dash_in_afterOscarCompoundStructure1588);
                            dash331=dash();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash331.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:53: ( ( colon ( oscarcm )+ )+ ( lrb )? ratio )=> ( colon ( oscarcm )+ )+
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:85: ( colon ( oscarcm )+ )+
                    int cnt97=0;
                    loop97:
                    do {
                        int alt97=2;
                        switch ( input.LA(1) ) {
                        case 132:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                switch ( input.LA(3) ) {
                                case 84:
                                    {
                                    switch ( input.LA(4) ) {
                                    case TOKEN:
                                        {
                                        int LA97_5 = input.LA(5);

                                        if ( (synpred288_ChemicalChunker()) ) {
                                            alt97=1;
                                        }


                                        }
                                        break;

                                    }

                                    }
                                    break;

                                }

                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt97) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:86: colon ( oscarcm )+
                    	    {
                    	    pushFollow(FOLLOW_colon_in_afterOscarCompoundStructure1607_static.FOLLOW_colon_in_afterOscarCompoundStructure1607);
                    	    colon332=colon();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon332.getTree());
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:92: ( oscarcm )+
                    	    int cnt96=0;
                    	    loop96:
                    	    do {
                    	        int alt96=2;
                    	        switch ( input.LA(1) ) {
                    	        case 84:
                    	            {
                    	            switch ( input.LA(2) ) {
                    	            case TOKEN:
                    	                {
                    	                int LA96_3 = input.LA(3);

                    	                if ( (synpred287_ChemicalChunker()) ) {
                    	                    alt96=1;
                    	                }


                    	                }
                    	                break;

                    	            }

                    	            }
                    	            break;

                    	        }

                    	        switch (alt96) {
                    	    	case 1 :
                    	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
                    	    	    {
                    	    	    pushFollow(FOLLOW_oscarcm_in_afterOscarCompoundStructure1609_static.FOLLOW_oscarcm_in_afterOscarCompoundStructure1609);
                    	    	    oscarcm333=oscarcm();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm333.getTree());

                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    if ( cnt96 >= 1 ) break loop96;
                    	    	    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                EarlyExitException eee =
                    	                    new EarlyExitException(96, input);
                    	                throw eee;
                    	        }
                    	        cnt96++;
                    	    } while (true);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt97 >= 1 ) break loop97;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(97, input);
                                throw eee;
                        }
                        cnt97++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:103: ( dash | apost )+
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:103: ( dash | apost )+
                    int cnt98=0;
                    loop98:
                    do {
                        int alt98=3;
                        switch ( input.LA(1) ) {
                        case 134:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                int LA98_4 = input.LA(3);

                                if ( (synpred290_ChemicalChunker()) ) {
                                    alt98=2;
                                }


                                }
                                break;

                            }

                            }
                            break;
                        case 136:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                int LA98_5 = input.LA(3);

                                if ( (synpred289_ChemicalChunker()) ) {
                                    alt98=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt98) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:104: dash
                    	    {
                    	    pushFollow(FOLLOW_dash_in_afterOscarCompoundStructure1615_static.FOLLOW_dash_in_afterOscarCompoundStructure1615);
                    	    dash334=dash();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash334.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:109: apost
                    	    {
                    	    pushFollow(FOLLOW_apost_in_afterOscarCompoundStructure1617_static.FOLLOW_apost_in_afterOscarCompoundStructure1617);
                    	    apost335=apost();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apost335.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt98 >= 1 ) break loop98;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(98, input);
                                throw eee;
                        }
                        cnt98++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, afterOscarCompoundStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "afterOscarCompoundStructure"

    public static class bracketedOscarCompoundStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedOscarCompoundStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:1: bracketedOscarCompoundStructure : lrb ( oscarcm )+ rrb ;
    public final ChemicalChunkerParser.bracketedOscarCompoundStructure_return bracketedOscarCompoundStructure() throws RecognitionException {
        ChemicalChunkerParser.bracketedOscarCompoundStructure_return retval = new ChemicalChunkerParser.bracketedOscarCompoundStructure_return();
        retval.start = input.LT(1);
        int bracketedOscarCompoundStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb336 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm337 = null;

        ChemicalChunkerParser.rrb_return rrb338 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:33: ( lrb ( oscarcm )+ rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:35: lrb ( oscarcm )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedOscarCompoundStructure1626_static.FOLLOW_lrb_in_bracketedOscarCompoundStructure1626);
            lrb336=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb336.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:40: ( oscarcm )+
            int cnt100=0;
            loop100:
            do {
                int alt100=2;
                switch ( input.LA(1) ) {
                case 84:
                    {
                    alt100=1;
                    }
                    break;

                }

                switch (alt100) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
            	    {
            	    pushFollow(FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1629_static.FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1629);
            	    oscarcm337=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm337.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt100 >= 1 ) break loop100;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(100, input);
                        throw eee;
                }
                cnt100++;
            } while (true);

            pushFollow(FOLLOW_rrb_in_bracketedOscarCompoundStructure1632_static.FOLLOW_rrb_in_bracketedOscarCompoundStructure1632);
            rrb338=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb338.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, bracketedOscarCompoundStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedOscarCompoundStructure"

    public static class molecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:1: molecule : moleculeamount -> ^( MOLECULE moleculeamount ) ;
    public final ChemicalChunkerParser.molecule_return molecule() throws RecognitionException {
        ChemicalChunkerParser.molecule_return retval = new ChemicalChunkerParser.molecule_return();
        retval.start = input.LT(1);
        int molecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount_return moleculeamount339 = null;


        RewriteRuleSubtreeStream stream_moleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule moleculeamount");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:2: ( moleculeamount -> ^( MOLECULE moleculeamount ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:5: moleculeamount
            {
            pushFollow(FOLLOW_moleculeamount_in_molecule1642_static.FOLLOW_moleculeamount_in_molecule1642);
            moleculeamount339=moleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moleculeamount.add(moleculeamount339.getTree());


            // AST REWRITE
            // elements: moleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 281:19: -> ^( MOLECULE moleculeamount )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:22: ^( MOLECULE moleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MOLECULE, "MOLECULE"), root_1);

                adaptor.addChild(root_1, stream_moleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, molecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "molecule"

    public static class moleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:1: moleculeamount : ( moleculeamount3 | moleculeamount1 | moleculeamount2 ) ( asAstate )? ;
    public final ChemicalChunkerParser.moleculeamount_return moleculeamount() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount_return retval = new ChemicalChunkerParser.moleculeamount_return();
        retval.start = input.LT(1);
        int moleculeamount_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount3_return moleculeamount3340 = null;

        ChemicalChunkerParser.moleculeamount1_return moleculeamount1341 = null;

        ChemicalChunkerParser.moleculeamount2_return moleculeamount2342 = null;

        ChemicalChunkerParser.asAstate_return asAstate343 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:16: ( ( moleculeamount3 | moleculeamount1 | moleculeamount2 ) ( asAstate )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:18: ( moleculeamount3 | moleculeamount1 | moleculeamount2 ) ( asAstate )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:18: ( moleculeamount3 | moleculeamount1 | moleculeamount2 )
            int alt101=3;
            alt101 = dfa101.predict(input);
            switch (alt101) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:19: moleculeamount3
                    {
                    pushFollow(FOLLOW_moleculeamount3_in_moleculeamount1660_static.FOLLOW_moleculeamount3_in_moleculeamount1660);
                    moleculeamount3340=moleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount3340.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:36: moleculeamount1
                    {
                    pushFollow(FOLLOW_moleculeamount1_in_moleculeamount1663_static.FOLLOW_moleculeamount1_in_moleculeamount1663);
                    moleculeamount1341=moleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount1341.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:54: moleculeamount2
                    {
                    pushFollow(FOLLOW_moleculeamount2_in_moleculeamount1667_static.FOLLOW_moleculeamount2_in_moleculeamount1667);
                    moleculeamount2342=moleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount2342.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:71: ( asAstate )?
            int alt102=2;
            alt102 = dfa102.predict(input);
            switch (alt102) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_moleculeamount1670_static.FOLLOW_asAstate_in_moleculeamount1670);
                    asAstate343=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate343.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, moleculeamount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount"

    public static class moleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:1: moleculeamount3 : ( quantity | bracketedContentInMol )+ inof ( dtTHE | dt )? ratioOrBracketedRatio ( bracketedContentInMol )? oscarCompound ;
    public final ChemicalChunkerParser.moleculeamount3_return moleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount3_return retval = new ChemicalChunkerParser.moleculeamount3_return();
        retval.start = input.LT(1);
        int moleculeamount3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity344 = null;

        ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol345 = null;

        ChemicalChunkerParser.inof_return inof346 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE347 = null;

        ChemicalChunkerParser.dt_return dt348 = null;

        ChemicalChunkerParser.ratioOrBracketedRatio_return ratioOrBracketedRatio349 = null;

        ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol350 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound351 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:2: ( ( quantity | bracketedContentInMol )+ inof ( dtTHE | dt )? ratioOrBracketedRatio ( bracketedContentInMol )? oscarCompound )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:3: ( quantity | bracketedContentInMol )+ inof ( dtTHE | dt )? ratioOrBracketedRatio ( bracketedContentInMol )? oscarCompound
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:3: ( quantity | bracketedContentInMol )+
            int cnt103=0;
            loop103:
            do {
                int alt103=3;
                switch ( input.LA(1) ) {
                case 143:
                    {
                    int LA103_2 = input.LA(2);

                    if ( (synpred295_ChemicalChunker()) ) {
                        alt103=1;
                    }
                    else if ( (synpred296_ChemicalChunker()) ) {
                        alt103=2;
                    }


                    }
                    break;
                case 146:
                    {
                    int LA103_3 = input.LA(2);

                    if ( (synpred295_ChemicalChunker()) ) {
                        alt103=1;
                    }
                    else if ( (synpred296_ChemicalChunker()) ) {
                        alt103=2;
                    }


                    }
                    break;
                case 73:
                case 130:
                    {
                    alt103=1;
                    }
                    break;
                case 133:
                case 139:
                    {
                    alt103=2;
                    }
                    break;

                }

                switch (alt103) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount31681_static.FOLLOW_quantity_in_moleculeamount31681);
            	    quantity344=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity344.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:13: bracketedContentInMol
            	    {
            	    pushFollow(FOLLOW_bracketedContentInMol_in_moleculeamount31683_static.FOLLOW_bracketedContentInMol_in_moleculeamount31683);
            	    bracketedContentInMol345=bracketedContentInMol();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMol345.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt103 >= 1 ) break loop103;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(103, input);
                        throw eee;
                }
                cnt103++;
            } while (true);

            pushFollow(FOLLOW_inof_in_moleculeamount31687_static.FOLLOW_inof_in_moleculeamount31687);
            inof346=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof346.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:42: ( dtTHE | dt )?
            int alt104=3;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt104=1;
                    }
                    break;
                case 147:
                    {
                    alt104=2;
                    }
                    break;
            }

            switch (alt104) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:43: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_moleculeamount31690_static.FOLLOW_dtTHE_in_moleculeamount31690);
                    dtTHE347=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE347.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:51: dt
                    {
                    pushFollow(FOLLOW_dt_in_moleculeamount31694_static.FOLLOW_dt_in_moleculeamount31694);
                    dt348=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt348.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_ratioOrBracketedRatio_in_moleculeamount31698_static.FOLLOW_ratioOrBracketedRatio_in_moleculeamount31698);
            ratioOrBracketedRatio349=ratioOrBracketedRatio();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ratioOrBracketedRatio349.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:78: ( bracketedContentInMol )?
            int alt105=2;
            alt105 = dfa105.predict(input);
            switch (alt105) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: bracketedContentInMol
                    {
                    pushFollow(FOLLOW_bracketedContentInMol_in_moleculeamount31700_static.FOLLOW_bracketedContentInMol_in_moleculeamount31700);
                    bracketedContentInMol350=bracketedContentInMol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMol350.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_oscarCompound_in_moleculeamount31703_static.FOLLOW_oscarCompound_in_moleculeamount31703);
            oscarCompound351=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound351.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, moleculeamount3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount3"

    public static class moleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:288:1: moleculeamount1 : ( nnchementity | nnstate )? ( quantity | bracketedContentInMol )+ inof ( quantity ( inof )? )? ( dtTHE | dt )? ( oscarCompound )+ afterCompoundCitationOrQuantity ;
    public final ChemicalChunkerParser.moleculeamount1_return moleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount1_return retval = new ChemicalChunkerParser.moleculeamount1_return();
        retval.start = input.LT(1);
        int moleculeamount1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity352 = null;

        ChemicalChunkerParser.nnstate_return nnstate353 = null;

        ChemicalChunkerParser.quantity_return quantity354 = null;

        ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol355 = null;

        ChemicalChunkerParser.inof_return inof356 = null;

        ChemicalChunkerParser.quantity_return quantity357 = null;

        ChemicalChunkerParser.inof_return inof358 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE359 = null;

        ChemicalChunkerParser.dt_return dt360 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound361 = null;

        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity362 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:2: ( ( nnchementity | nnstate )? ( quantity | bracketedContentInMol )+ inof ( quantity ( inof )? )? ( dtTHE | dt )? ( oscarCompound )+ afterCompoundCitationOrQuantity )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:3: ( nnchementity | nnstate )? ( quantity | bracketedContentInMol )+ inof ( quantity ( inof )? )? ( dtTHE | dt )? ( oscarCompound )+ afterCompoundCitationOrQuantity
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:3: ( nnchementity | nnstate )?
            int alt106=3;
            switch ( input.LA(1) ) {
                case 71:
                    {
                    alt106=1;
                    }
                    break;
                case 63:
                    {
                    alt106=2;
                    }
                    break;
            }

            switch (alt106) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:4: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_moleculeamount11713_static.FOLLOW_nnchementity_in_moleculeamount11713);
                    nnchementity352=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity352.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:19: nnstate
                    {
                    pushFollow(FOLLOW_nnstate_in_moleculeamount11717_static.FOLLOW_nnstate_in_moleculeamount11717);
                    nnstate353=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate353.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:29: ( quantity | bracketedContentInMol )+
            int cnt107=0;
            loop107:
            do {
                int alt107=3;
                switch ( input.LA(1) ) {
                case 143:
                    {
                    int LA107_2 = input.LA(2);

                    if ( (synpred302_ChemicalChunker()) ) {
                        alt107=1;
                    }
                    else if ( (synpred303_ChemicalChunker()) ) {
                        alt107=2;
                    }


                    }
                    break;
                case 146:
                    {
                    int LA107_3 = input.LA(2);

                    if ( (synpred302_ChemicalChunker()) ) {
                        alt107=1;
                    }
                    else if ( (synpred303_ChemicalChunker()) ) {
                        alt107=2;
                    }


                    }
                    break;
                case 73:
                case 130:
                    {
                    alt107=1;
                    }
                    break;
                case 133:
                case 139:
                    {
                    alt107=2;
                    }
                    break;

                }

                switch (alt107) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:30: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount11722_static.FOLLOW_quantity_in_moleculeamount11722);
            	    quantity354=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity354.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:39: bracketedContentInMol
            	    {
            	    pushFollow(FOLLOW_bracketedContentInMol_in_moleculeamount11724_static.FOLLOW_bracketedContentInMol_in_moleculeamount11724);
            	    bracketedContentInMol355=bracketedContentInMol();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMol355.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt107 >= 1 ) break loop107;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(107, input);
                        throw eee;
                }
                cnt107++;
            } while (true);

            pushFollow(FOLLOW_inof_in_moleculeamount11728_static.FOLLOW_inof_in_moleculeamount11728);
            inof356=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof356.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:68: ( quantity ( inof )? )?
            int alt109=2;
            switch ( input.LA(1) ) {
                case 143:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 73:
                                case 130:
                                case 146:
                                    {
                                    alt109=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
                case 73:
                case 130:
                case 146:
                    {
                    alt109=1;
                    }
                    break;
            }

            switch (alt109) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:69: quantity ( inof )?
                    {
                    pushFollow(FOLLOW_quantity_in_moleculeamount11731_static.FOLLOW_quantity_in_moleculeamount11731);
                    quantity357=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity357.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:78: ( inof )?
                    int alt108=2;
                    switch ( input.LA(1) ) {
                        case 56:
                            {
                            alt108=1;
                            }
                            break;
                    }

                    switch (alt108) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inof
                            {
                            pushFollow(FOLLOW_inof_in_moleculeamount11733_static.FOLLOW_inof_in_moleculeamount11733);
                            inof358=inof();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof358.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:86: ( dtTHE | dt )?
            int alt110=3;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt110=1;
                    }
                    break;
                case 147:
                    {
                    alt110=2;
                    }
                    break;
            }

            switch (alt110) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:87: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_moleculeamount11739_static.FOLLOW_dtTHE_in_moleculeamount11739);
                    dtTHE359=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE359.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:95: dt
                    {
                    pushFollow(FOLLOW_dt_in_moleculeamount11743_static.FOLLOW_dt_in_moleculeamount11743);
                    dt360=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt360.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:100: ( oscarCompound )+
            int cnt111=0;
            loop111:
            do {
                int alt111=2;
                alt111 = dfa111.predict(input);
                switch (alt111) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_moleculeamount11747_static.FOLLOW_oscarCompound_in_moleculeamount11747);
            	    oscarCompound361=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound361.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt111 >= 1 ) break loop111;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(111, input);
                        throw eee;
                }
                cnt111++;
            } while (true);

            pushFollow(FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11750_static.FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11750);
            afterCompoundCitationOrQuantity362=afterCompoundCitationOrQuantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, afterCompoundCitationOrQuantity362.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, moleculeamount1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount1"

    public static class moleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:1: moleculeamount2 : ( quantity | bracketedContentInMol )* ( oscarCompound )+ afterCompoundCitationOrQuantity ;
    public final ChemicalChunkerParser.moleculeamount2_return moleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount2_return retval = new ChemicalChunkerParser.moleculeamount2_return();
        retval.start = input.LT(1);
        int moleculeamount2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity363 = null;

        ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol364 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound365 = null;

        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity366 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:2: ( ( quantity | bracketedContentInMol )* ( oscarCompound )+ afterCompoundCitationOrQuantity )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:3: ( quantity | bracketedContentInMol )* ( oscarCompound )+ afterCompoundCitationOrQuantity
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:3: ( quantity | bracketedContentInMol )*
            loop112:
            do {
                int alt112=3;
                alt112 = dfa112.predict(input);
                switch (alt112) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount21759_static.FOLLOW_quantity_in_moleculeamount21759);
            	    quantity363=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity363.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:13: bracketedContentInMol
            	    {
            	    pushFollow(FOLLOW_bracketedContentInMol_in_moleculeamount21761_static.FOLLOW_bracketedContentInMol_in_moleculeamount21761);
            	    bracketedContentInMol364=bracketedContentInMol();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMol364.getTree());

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:37: ( oscarCompound )+
            int cnt113=0;
            loop113:
            do {
                int alt113=2;
                alt113 = dfa113.predict(input);
                switch (alt113) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_moleculeamount21765_static.FOLLOW_oscarCompound_in_moleculeamount21765);
            	    oscarCompound365=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound365.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt113 >= 1 ) break loop113;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(113, input);
                        throw eee;
                }
                cnt113++;
            } while (true);

            pushFollow(FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21768_static.FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21768);
            afterCompoundCitationOrQuantity366=afterCompoundCitationOrQuantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, afterCompoundCitationOrQuantity366.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, moleculeamount2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount2"

    public static class afterCompoundCitationOrQuantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "afterCompoundCitationOrQuantity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:1: afterCompoundCitationOrQuantity : ( citation | quantity | comma ( quantity1Node | citationStructure ) | bracketedContentInMol )* ;
    public final ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity() throws RecognitionException {
        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return retval = new ChemicalChunkerParser.afterCompoundCitationOrQuantity_return();
        retval.start = input.LT(1);
        int afterCompoundCitationOrQuantity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citation_return citation367 = null;

        ChemicalChunkerParser.quantity_return quantity368 = null;

        ChemicalChunkerParser.comma_return comma369 = null;

        ChemicalChunkerParser.quantity1Node_return quantity1Node370 = null;

        ChemicalChunkerParser.citationStructure_return citationStructure371 = null;

        ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol372 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:32: ( ( citation | quantity | comma ( quantity1Node | citationStructure ) | bracketedContentInMol )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:34: ( citation | quantity | comma ( quantity1Node | citationStructure ) | bracketedContentInMol )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:34: ( citation | quantity | comma ( quantity1Node | citationStructure ) | bracketedContentInMol )*
            loop115:
            do {
                int alt115=5;
                alt115 = dfa115.predict(input);
                switch (alt115) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:35: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_afterCompoundCitationOrQuantity1776_static.FOLLOW_citation_in_afterCompoundCitationOrQuantity1776);
            	    citation367=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation367.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:44: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_afterCompoundCitationOrQuantity1778_static.FOLLOW_quantity_in_afterCompoundCitationOrQuantity1778);
            	    quantity368=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity368.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:53: comma ( quantity1Node | citationStructure )
            	    {
            	    pushFollow(FOLLOW_comma_in_afterCompoundCitationOrQuantity1780_static.FOLLOW_comma_in_afterCompoundCitationOrQuantity1780);
            	    comma369=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma369.getTree());
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:59: ( quantity1Node | citationStructure )
            	    int alt114=2;
            	    switch ( input.LA(1) ) {
            	    case 143:
            	        {
            	        switch ( input.LA(2) ) {
            	        case TOKEN:
            	            {
            	            switch ( input.LA(3) ) {
            	            case 133:
            	            case 145:
            	            case 149:
            	            case 158:
            	                {
            	                alt114=2;
            	                }
            	                break;
            	            case 146:
            	                {
            	                switch ( input.LA(4) ) {
            	                case TOKEN:
            	                    {
            	                    switch ( input.LA(5) ) {
            	                    case 44:
            	                    case 65:
            	                    case 66:
            	                    case 67:
            	                    case 69:
            	                    case 70:
            	                    case 138:
            	                    case 156:
            	                        {
            	                        alt114=1;
            	                        }
            	                        break;
            	                    case 133:
            	                    case 145:
            	                    case 146:
            	                    case 149:
            	                    case 158:
            	                        {
            	                        alt114=2;
            	                        }
            	                        break;
            	                    default:
            	                        if (state.backtracking>0) {state.failed=true; return retval;}
            	                        NoViableAltException nvae =
            	                            new NoViableAltException("", 114, 6, input);

            	                        throw nvae;
            	                    }

            	                    }
            	                    break;
            	                default:
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 114, 4, input);

            	                    throw nvae;
            	                }

            	                }
            	                break;
            	            case 73:
            	            case 130:
            	                {
            	                alt114=1;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 114, 2, input);

            	                throw nvae;
            	            }

            	            }
            	            break;
            	        default:
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 114, 1, input);

            	            throw nvae;
            	        }

            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 114, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt114) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:60: quantity1Node
            	            {
            	            pushFollow(FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1783_static.FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1783);
            	            quantity1Node370=quantity1Node();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity1Node370.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:74: citationStructure
            	            {
            	            pushFollow(FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1785_static.FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1785);
            	            citationStructure371=citationStructure();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, citationStructure371.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:93: bracketedContentInMol
            	    {
            	    pushFollow(FOLLOW_bracketedContentInMol_in_afterCompoundCitationOrQuantity1788_static.FOLLOW_bracketedContentInMol_in_afterCompoundCitationOrQuantity1788);
            	    bracketedContentInMol372=bracketedContentInMol();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMol372.getTree());

            	    }
            	    break;

            	default :
            	    break loop115;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, afterCompoundCitationOrQuantity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "afterCompoundCitationOrQuantity"

    public static class unnamedmolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmolecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:1: unnamedmolecule : unnamedmoleculeDescription -> ^( UNNAMEDMOLECULE unnamedmoleculeDescription ) ;
    public final ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule() throws RecognitionException {
        ChemicalChunkerParser.unnamedmolecule_return retval = new ChemicalChunkerParser.unnamedmolecule_return();
        retval.start = input.LT(1);
        int unnamedmolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeDescription_return unnamedmoleculeDescription373 = null;


        RewriteRuleSubtreeStream stream_unnamedmoleculeDescription=new RewriteRuleSubtreeStream(adaptor,"rule unnamedmoleculeDescription");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:2: ( unnamedmoleculeDescription -> ^( UNNAMEDMOLECULE unnamedmoleculeDescription ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:4: unnamedmoleculeDescription
            {
            pushFollow(FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1799_static.FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1799);
            unnamedmoleculeDescription373=unnamedmoleculeDescription();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unnamedmoleculeDescription.add(unnamedmoleculeDescription373.getTree());


            // AST REWRITE
            // elements: unnamedmoleculeDescription
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 297:31: -> ^( UNNAMEDMOLECULE unnamedmoleculeDescription )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:34: ^( UNNAMEDMOLECULE unnamedmoleculeDescription )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(UNNAMEDMOLECULE, "UNNAMEDMOLECULE"), root_1);

                adaptor.addChild(root_1, stream_unnamedmoleculeDescription.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, unnamedmolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmolecule"

    public static class unnamedmoleculeDescription_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeDescription"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:1: unnamedmoleculeDescription : unnamedmoleculeDescriptionStart afterCompoundCitationOrQuantity ( asAstate )? ;
    public final ChemicalChunkerParser.unnamedmoleculeDescription_return unnamedmoleculeDescription() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeDescription_return retval = new ChemicalChunkerParser.unnamedmoleculeDescription_return();
        retval.start = input.LT(1);
        int unnamedmoleculeDescription_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeDescriptionStart_return unnamedmoleculeDescriptionStart374 = null;

        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity375 = null;

        ChemicalChunkerParser.asAstate_return asAstate376 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:2: ( unnamedmoleculeDescriptionStart afterCompoundCitationOrQuantity ( asAstate )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:4: unnamedmoleculeDescriptionStart afterCompoundCitationOrQuantity ( asAstate )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_unnamedmoleculeDescriptionStart_in_unnamedmoleculeDescription1816_static.FOLLOW_unnamedmoleculeDescriptionStart_in_unnamedmoleculeDescription1816);
            unnamedmoleculeDescriptionStart374=unnamedmoleculeDescriptionStart();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeDescriptionStart374.getTree());
            pushFollow(FOLLOW_afterCompoundCitationOrQuantity_in_unnamedmoleculeDescription1818_static.FOLLOW_afterCompoundCitationOrQuantity_in_unnamedmoleculeDescription1818);
            afterCompoundCitationOrQuantity375=afterCompoundCitationOrQuantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, afterCompoundCitationOrQuantity375.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:68: ( asAstate )?
            int alt116=2;
            alt116 = dfa116.predict(input);
            switch (alt116) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_unnamedmoleculeDescription1820_static.FOLLOW_asAstate_in_unnamedmoleculeDescription1820);
                    asAstate376=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate376.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, unnamedmoleculeDescription_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeDescription"

    public static class unnamedmoleculeDescriptionStart_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeDescriptionStart"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:1: unnamedmoleculeDescriptionStart : ( quantityOf ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule ) | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule );
    public final ChemicalChunkerParser.unnamedmoleculeDescriptionStart_return unnamedmoleculeDescriptionStart() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeDescriptionStart_return retval = new ChemicalChunkerParser.unnamedmoleculeDescriptionStart_return();
        retval.start = input.LT(1);
        int unnamedmoleculeDescriptionStart_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantityOf_return quantityOf377 = null;

        ChemicalChunkerParser.potentialUnnamedMoleculeAmount1_return potentialUnnamedMoleculeAmount1378 = null;

        ChemicalChunkerParser.potentialUnnamedMoleculeAmount2_return potentialUnnamedMoleculeAmount2379 = null;

        ChemicalChunkerParser.definiteUnnamedMolecule_return definiteUnnamedMolecule380 = null;

        ChemicalChunkerParser.potentialUnnamedMoleculeAmount2_return potentialUnnamedMoleculeAmount2381 = null;

        ChemicalChunkerParser.definiteUnnamedMolecule_return definiteUnnamedMolecule382 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:2: ( quantityOf ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule ) | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule )
            int alt118=3;
            alt118 = dfa118.predict(input);
            switch (alt118) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:4: quantityOf ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule )
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantityOf_in_unnamedmoleculeDescriptionStart1830_static.FOLLOW_quantityOf_in_unnamedmoleculeDescriptionStart1830);
                    quantityOf377=quantityOf();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantityOf377.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:15: ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule )
                    int alt117=3;
                    alt117 = dfa117.predict(input);
                    switch (alt117) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:16: potentialUnnamedMoleculeAmount1
                            {
                            pushFollow(FOLLOW_potentialUnnamedMoleculeAmount1_in_unnamedmoleculeDescriptionStart1833_static.FOLLOW_potentialUnnamedMoleculeAmount1_in_unnamedmoleculeDescriptionStart1833);
                            potentialUnnamedMoleculeAmount1378=potentialUnnamedMoleculeAmount1();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMoleculeAmount1378.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:50: potentialUnnamedMoleculeAmount2
                            {
                            pushFollow(FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1837_static.FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1837);
                            potentialUnnamedMoleculeAmount2379=potentialUnnamedMoleculeAmount2();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMoleculeAmount2379.getTree());

                            }
                            break;
                        case 3 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:84: definiteUnnamedMolecule
                            {
                            pushFollow(FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1841_static.FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1841);
                            definiteUnnamedMolecule380=definiteUnnamedMolecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, definiteUnnamedMolecule380.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:112: potentialUnnamedMoleculeAmount2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1847_static.FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1847);
                    potentialUnnamedMoleculeAmount2381=potentialUnnamedMoleculeAmount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMoleculeAmount2381.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:146: definiteUnnamedMolecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1851_static.FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1851);
                    definiteUnnamedMolecule382=definiteUnnamedMolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, definiteUnnamedMolecule382.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, unnamedmoleculeDescriptionStart_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeDescriptionStart"

    public static class quantityOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantityOf"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:1: quantityOf : ( quantity )+ ( inof )? ( dtTHE | dt )? ;
    public final ChemicalChunkerParser.quantityOf_return quantityOf() throws RecognitionException {
        ChemicalChunkerParser.quantityOf_return retval = new ChemicalChunkerParser.quantityOf_return();
        retval.start = input.LT(1);
        int quantityOf_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity383 = null;

        ChemicalChunkerParser.inof_return inof384 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE385 = null;

        ChemicalChunkerParser.dt_return dt386 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:2: ( ( quantity )+ ( inof )? ( dtTHE | dt )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:4: ( quantity )+ ( inof )? ( dtTHE | dt )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:4: ( quantity )+
            int cnt119=0;
            loop119:
            do {
                int alt119=2;
                alt119 = dfa119.predict(input);
                switch (alt119) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_quantityOf1860_static.FOLLOW_quantity_in_quantityOf1860);
            	    quantity383=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity383.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt119 >= 1 ) break loop119;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(119, input);
                        throw eee;
                }
                cnt119++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:14: ( inof )?
            int alt120=2;
            switch ( input.LA(1) ) {
                case 56:
                    {
                    alt120=1;
                    }
                    break;
            }

            switch (alt120) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inof
                    {
                    pushFollow(FOLLOW_inof_in_quantityOf1863_static.FOLLOW_inof_in_quantityOf1863);
                    inof384=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof384.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:20: ( dtTHE | dt )?
            int alt121=3;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt121=1;
                    }
                    break;
                case 147:
                    {
                    alt121=2;
                    }
                    break;
            }

            switch (alt121) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:21: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_quantityOf1867_static.FOLLOW_dtTHE_in_quantityOf1867);
                    dtTHE385=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE385.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:29: dt
                    {
                    pushFollow(FOLLOW_dt_in_quantityOf1871_static.FOLLOW_dt_in_quantityOf1871);
                    dt386=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt386.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, quantityOf_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantityOf"

    public static class potentialUnnamedMoleculeAmount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "potentialUnnamedMoleculeAmount1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:1: potentialUnnamedMoleculeAmount1 : potentialUnnamedMolecule ( quantity )* ( asAstate )? ( fromProcedure )? ;
    public final ChemicalChunkerParser.potentialUnnamedMoleculeAmount1_return potentialUnnamedMoleculeAmount1() throws RecognitionException {
        ChemicalChunkerParser.potentialUnnamedMoleculeAmount1_return retval = new ChemicalChunkerParser.potentialUnnamedMoleculeAmount1_return();
        retval.start = input.LT(1);
        int potentialUnnamedMoleculeAmount1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.potentialUnnamedMolecule_return potentialUnnamedMolecule387 = null;

        ChemicalChunkerParser.quantity_return quantity388 = null;

        ChemicalChunkerParser.asAstate_return asAstate389 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure390 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:2: ( potentialUnnamedMolecule ( quantity )* ( asAstate )? ( fromProcedure )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:4: potentialUnnamedMolecule ( quantity )* ( asAstate )? ( fromProcedure )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_potentialUnnamedMolecule_in_potentialUnnamedMoleculeAmount11882_static.FOLLOW_potentialUnnamedMolecule_in_potentialUnnamedMoleculeAmount11882);
            potentialUnnamedMolecule387=potentialUnnamedMolecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMolecule387.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:29: ( quantity )*
            loop122:
            do {
                int alt122=2;
                alt122 = dfa122.predict(input);
                switch (alt122) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_potentialUnnamedMoleculeAmount11884_static.FOLLOW_quantity_in_potentialUnnamedMoleculeAmount11884);
            	    quantity388=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity388.getTree());

            	    }
            	    break;

            	default :
            	    break loop122;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:39: ( asAstate )?
            int alt123=2;
            alt123 = dfa123.predict(input);
            switch (alt123) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount11887_static.FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount11887);
                    asAstate389=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate389.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:49: ( fromProcedure )?
            int alt124=2;
            alt124 = dfa124.predict(input);
            switch (alt124) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: fromProcedure
                    {
                    pushFollow(FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount11890_static.FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount11890);
                    fromProcedure390=fromProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure390.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, potentialUnnamedMoleculeAmount1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "potentialUnnamedMoleculeAmount1"

    public static class potentialUnnamedMoleculeAmount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "potentialUnnamedMoleculeAmount2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:1: potentialUnnamedMoleculeAmount2 : ( numberCompoundReference ( quantity | asAstate ) | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity | asAstate | fromProcedure ) ) ( quantity )* ( asAstate )? ( fromProcedure )? ;
    public final ChemicalChunkerParser.potentialUnnamedMoleculeAmount2_return potentialUnnamedMoleculeAmount2() throws RecognitionException {
        ChemicalChunkerParser.potentialUnnamedMoleculeAmount2_return retval = new ChemicalChunkerParser.potentialUnnamedMoleculeAmount2_return();
        retval.start = input.LT(1);
        int potentialUnnamedMoleculeAmount2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference391 = null;

        ChemicalChunkerParser.quantity_return quantity392 = null;

        ChemicalChunkerParser.asAstate_return asAstate393 = null;

        ChemicalChunkerParser.potentialUnnamedMoleculeStructureNN_return potentialUnnamedMoleculeStructureNN394 = null;

        ChemicalChunkerParser.numericReferenceOrQuantity_return numericReferenceOrQuantity395 = null;

        ChemicalChunkerParser.asAstate_return asAstate396 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure397 = null;

        ChemicalChunkerParser.quantity_return quantity398 = null;

        ChemicalChunkerParser.asAstate_return asAstate399 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure400 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:2: ( ( numberCompoundReference ( quantity | asAstate ) | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity | asAstate | fromProcedure ) ) ( quantity )* ( asAstate )? ( fromProcedure )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:4: ( numberCompoundReference ( quantity | asAstate ) | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity | asAstate | fromProcedure ) ) ( quantity )* ( asAstate )? ( fromProcedure )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:4: ( numberCompoundReference ( quantity | asAstate ) | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity | asAstate | fromProcedure ) )
            int alt127=2;
            switch ( input.LA(1) ) {
            case 146:
                {
                alt127=1;
                }
                break;
            case 39:
            case 41:
            case 42:
            case 45:
            case 46:
            case 63:
            case 68:
            case 71:
            case 83:
            case 90:
            case 151:
                {
                alt127=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;
            }

            switch (alt127) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:5: numberCompoundReference ( quantity | asAstate )
                    {
                    pushFollow(FOLLOW_numberCompoundReference_in_potentialUnnamedMoleculeAmount21901_static.FOLLOW_numberCompoundReference_in_potentialUnnamedMoleculeAmount21901);
                    numberCompoundReference391=numberCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberCompoundReference391.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:29: ( quantity | asAstate )
                    int alt125=2;
                    switch ( input.LA(1) ) {
                    case 73:
                    case 130:
                    case 143:
                    case 146:
                        {
                        alt125=1;
                        }
                        break;
                    case 47:
                        {
                        alt125=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 125, 0, input);

                        throw nvae;
                    }

                    switch (alt125) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:30: quantity
                            {
                            pushFollow(FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21904_static.FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21904);
                            quantity392=quantity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity392.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:41: asAstate
                            {
                            pushFollow(FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21908_static.FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21908);
                            asAstate393=asAstate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate393.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:54: potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity | asAstate | fromProcedure )
                    {
                    pushFollow(FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMoleculeAmount21914_static.FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMoleculeAmount21914);
                    potentialUnnamedMoleculeStructureNN394=potentialUnnamedMoleculeStructureNN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMoleculeStructureNN394.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:90: ( numericReferenceOrQuantity | asAstate | fromProcedure )
                    int alt126=3;
                    switch ( input.LA(1) ) {
                    case 38:
                    case 73:
                    case 130:
                    case 139:
                    case 141:
                    case 143:
                    case 146:
                        {
                        alt126=1;
                        }
                        break;
                    case 47:
                        {
                        alt126=2;
                        }
                        break;
                    case 56:
                    case 59:
                    case 125:
                    case 129:
                        {
                        alt126=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 126, 0, input);

                        throw nvae;
                    }

                    switch (alt126) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:91: numericReferenceOrQuantity
                            {
                            pushFollow(FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMoleculeAmount21917_static.FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMoleculeAmount21917);
                            numericReferenceOrQuantity395=numericReferenceOrQuantity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numericReferenceOrQuantity395.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:120: asAstate
                            {
                            pushFollow(FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21921_static.FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21921);
                            asAstate396=asAstate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate396.getTree());

                            }
                            break;
                        case 3 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:131: fromProcedure
                            {
                            pushFollow(FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21925_static.FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21925);
                            fromProcedure397=fromProcedure();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure397.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:148: ( quantity )*
            loop128:
            do {
                int alt128=2;
                alt128 = dfa128.predict(input);
                switch (alt128) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21930_static.FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21930);
            	    quantity398=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity398.getTree());

            	    }
            	    break;

            	default :
            	    break loop128;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:158: ( asAstate )?
            int alt129=2;
            alt129 = dfa129.predict(input);
            switch (alt129) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21933_static.FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21933);
                    asAstate399=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate399.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:168: ( fromProcedure )?
            int alt130=2;
            alt130 = dfa130.predict(input);
            switch (alt130) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: fromProcedure
                    {
                    pushFollow(FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21936_static.FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21936);
                    fromProcedure400=fromProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure400.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, potentialUnnamedMoleculeAmount2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "potentialUnnamedMoleculeAmount2"

    public static class definiteUnnamedMolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "definiteUnnamedMolecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:1: definiteUnnamedMolecule : definiteUnnamedMoleculeStructure ( quantity )* ( asAstate )? ( fromProcedure )? ;
    public final ChemicalChunkerParser.definiteUnnamedMolecule_return definiteUnnamedMolecule() throws RecognitionException {
        ChemicalChunkerParser.definiteUnnamedMolecule_return retval = new ChemicalChunkerParser.definiteUnnamedMolecule_return();
        retval.start = input.LT(1);
        int definiteUnnamedMolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.definiteUnnamedMoleculeStructure_return definiteUnnamedMoleculeStructure401 = null;

        ChemicalChunkerParser.quantity_return quantity402 = null;

        ChemicalChunkerParser.asAstate_return asAstate403 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure404 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:2: ( definiteUnnamedMoleculeStructure ( quantity )* ( asAstate )? ( fromProcedure )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:4: definiteUnnamedMoleculeStructure ( quantity )* ( asAstate )? ( fromProcedure )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_definiteUnnamedMoleculeStructure_in_definiteUnnamedMolecule1946_static.FOLLOW_definiteUnnamedMoleculeStructure_in_definiteUnnamedMolecule1946);
            definiteUnnamedMoleculeStructure401=definiteUnnamedMoleculeStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, definiteUnnamedMoleculeStructure401.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:37: ( quantity )*
            loop131:
            do {
                int alt131=2;
                alt131 = dfa131.predict(input);
                switch (alt131) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_definiteUnnamedMolecule1948_static.FOLLOW_quantity_in_definiteUnnamedMolecule1948);
            	    quantity402=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity402.getTree());

            	    }
            	    break;

            	default :
            	    break loop131;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:47: ( asAstate )?
            int alt132=2;
            alt132 = dfa132.predict(input);
            switch (alt132) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_definiteUnnamedMolecule1951_static.FOLLOW_asAstate_in_definiteUnnamedMolecule1951);
                    asAstate403=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate403.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:57: ( fromProcedure )?
            int alt133=2;
            alt133 = dfa133.predict(input);
            switch (alt133) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: fromProcedure
                    {
                    pushFollow(FOLLOW_fromProcedure_in_definiteUnnamedMolecule1954_static.FOLLOW_fromProcedure_in_definiteUnnamedMolecule1954);
                    fromProcedure404=fromProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure404.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, definiteUnnamedMolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "definiteUnnamedMolecule"

    public static class definiteUnnamedMoleculeStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "definiteUnnamedMoleculeStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:317:1: definiteUnnamedMoleculeStructure : ( ( adj )* ( nnchementity numericOrIdentifierCompoundReference | jjcomp nnchementity ( numericReferenceOrQuantity )? ) | alphanumericOrIdentifierCompoundReference );
    public final ChemicalChunkerParser.definiteUnnamedMoleculeStructure_return definiteUnnamedMoleculeStructure() throws RecognitionException {
        ChemicalChunkerParser.definiteUnnamedMoleculeStructure_return retval = new ChemicalChunkerParser.definiteUnnamedMoleculeStructure_return();
        retval.start = input.LT(1);
        int definiteUnnamedMoleculeStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj405 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity406 = null;

        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference407 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp408 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity409 = null;

        ChemicalChunkerParser.numericReferenceOrQuantity_return numericReferenceOrQuantity410 = null;

        ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return alphanumericOrIdentifierCompoundReference411 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:2: ( ( adj )* ( nnchementity numericOrIdentifierCompoundReference | jjcomp nnchementity ( numericReferenceOrQuantity )? ) | alphanumericOrIdentifierCompoundReference )
            int alt137=2;
            switch ( input.LA(1) ) {
            case 39:
            case 40:
            case 45:
            case 46:
            case 71:
            case 151:
            case 152:
            case 153:
                {
                alt137=1;
                }
                break;
            case 38:
            case 139:
            case 141:
            case 143:
            case 146:
                {
                alt137=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);

                throw nvae;
            }

            switch (alt137) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:4: ( adj )* ( nnchementity numericOrIdentifierCompoundReference | jjcomp nnchementity ( numericReferenceOrQuantity )? )
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:4: ( adj )*
                    loop134:
                    do {
                        int alt134=2;
                        switch ( input.LA(1) ) {
                        case 39:
                        case 40:
                        case 45:
                        case 151:
                        case 152:
                        case 153:
                            {
                            alt134=1;
                            }
                            break;

                        }

                        switch (alt134) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    	    {
                    	    pushFollow(FOLLOW_adj_in_definiteUnnamedMoleculeStructure1964_static.FOLLOW_adj_in_definiteUnnamedMoleculeStructure1964);
                    	    adj405=adj();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj405.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop134;
                        }
                    } while (true);

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:9: ( nnchementity numericOrIdentifierCompoundReference | jjcomp nnchementity ( numericReferenceOrQuantity )? )
                    int alt136=2;
                    switch ( input.LA(1) ) {
                    case 71:
                        {
                        alt136=1;
                        }
                        break;
                    case 46:
                        {
                        alt136=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 136, 0, input);

                        throw nvae;
                    }

                    switch (alt136) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:10: nnchementity numericOrIdentifierCompoundReference
                            {
                            pushFollow(FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1968_static.FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1968);
                            nnchementity406=nnchementity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity406.getTree());
                            pushFollow(FOLLOW_numericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1970_static.FOLLOW_numericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1970);
                            numericOrIdentifierCompoundReference407=numericOrIdentifierCompoundReference();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numericOrIdentifierCompoundReference407.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:62: jjcomp nnchementity ( numericReferenceOrQuantity )?
                            {
                            pushFollow(FOLLOW_jjcomp_in_definiteUnnamedMoleculeStructure1974_static.FOLLOW_jjcomp_in_definiteUnnamedMoleculeStructure1974);
                            jjcomp408=jjcomp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp408.getTree());
                            pushFollow(FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1976_static.FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1976);
                            nnchementity409=nnchementity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity409.getTree());
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:82: ( numericReferenceOrQuantity )?
                            int alt135=2;
                            alt135 = dfa135.predict(input);
                            switch (alt135) {
                                case 1 :
                                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: numericReferenceOrQuantity
                                    {
                                    pushFollow(FOLLOW_numericReferenceOrQuantity_in_definiteUnnamedMoleculeStructure1978_static.FOLLOW_numericReferenceOrQuantity_in_definiteUnnamedMoleculeStructure1978);
                                    numericReferenceOrQuantity410=numericReferenceOrQuantity();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericReferenceOrQuantity410.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:113: alphanumericOrIdentifierCompoundReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_alphanumericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1984_static.FOLLOW_alphanumericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1984);
                    alphanumericOrIdentifierCompoundReference411=alphanumericOrIdentifierCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alphanumericOrIdentifierCompoundReference411.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, definiteUnnamedMoleculeStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "definiteUnnamedMoleculeStructure"

    public static class potentialUnnamedMolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "potentialUnnamedMolecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:1: potentialUnnamedMolecule : ( numberCompoundReference | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity )? );
    public final ChemicalChunkerParser.potentialUnnamedMolecule_return potentialUnnamedMolecule() throws RecognitionException {
        ChemicalChunkerParser.potentialUnnamedMolecule_return retval = new ChemicalChunkerParser.potentialUnnamedMolecule_return();
        retval.start = input.LT(1);
        int potentialUnnamedMolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference412 = null;

        ChemicalChunkerParser.potentialUnnamedMoleculeStructureNN_return potentialUnnamedMoleculeStructureNN413 = null;

        ChemicalChunkerParser.numericReferenceOrQuantity_return numericReferenceOrQuantity414 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:2: ( numberCompoundReference | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity )? )
            int alt139=2;
            switch ( input.LA(1) ) {
            case 146:
                {
                alt139=1;
                }
                break;
            case 39:
            case 41:
            case 42:
            case 45:
            case 46:
            case 63:
            case 68:
            case 71:
            case 83:
            case 90:
            case 151:
                {
                alt139=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);

                throw nvae;
            }

            switch (alt139) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:4: numberCompoundReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_numberCompoundReference_in_potentialUnnamedMolecule1993_static.FOLLOW_numberCompoundReference_in_potentialUnnamedMolecule1993);
                    numberCompoundReference412=numberCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberCompoundReference412.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:30: potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMolecule1997_static.FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMolecule1997);
                    potentialUnnamedMoleculeStructureNN413=potentialUnnamedMoleculeStructureNN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMoleculeStructureNN413.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:66: ( numericReferenceOrQuantity )?
                    int alt138=2;
                    alt138 = dfa138.predict(input);
                    switch (alt138) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: numericReferenceOrQuantity
                            {
                            pushFollow(FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMolecule1999_static.FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMolecule1999);
                            numericReferenceOrQuantity414=numericReferenceOrQuantity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numericReferenceOrQuantity414.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, potentialUnnamedMolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "potentialUnnamedMolecule"

    public static class potentialUnnamedMoleculeStructureNN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "potentialUnnamedMoleculeStructureNN"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:1: potentialUnnamedMoleculeStructureNN : ( ( jj | jjchem | oscarcj | jjcomp )* ( nnstate | referenceToExampleCompound | oscaronts | nnatmosphere | nnmixture | oscarase ) | ( jj | jjchem | oscarcj )* nnchementity );
    public final ChemicalChunkerParser.potentialUnnamedMoleculeStructureNN_return potentialUnnamedMoleculeStructureNN() throws RecognitionException {
        ChemicalChunkerParser.potentialUnnamedMoleculeStructureNN_return retval = new ChemicalChunkerParser.potentialUnnamedMoleculeStructureNN_return();
        retval.start = input.LT(1);
        int potentialUnnamedMoleculeStructureNN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj415 = null;

        ChemicalChunkerParser.jjchem_return jjchem416 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj417 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp418 = null;

        ChemicalChunkerParser.nnstate_return nnstate419 = null;

        ChemicalChunkerParser.referenceToExampleCompound_return referenceToExampleCompound420 = null;

        ChemicalChunkerParser.oscaronts_return oscaronts421 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere422 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture423 = null;

        ChemicalChunkerParser.oscarase_return oscarase424 = null;

        ChemicalChunkerParser.jj_return jj425 = null;

        ChemicalChunkerParser.jjchem_return jjchem426 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj427 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity428 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:2: ( ( jj | jjchem | oscarcj | jjcomp )* ( nnstate | referenceToExampleCompound | oscaronts | nnatmosphere | nnmixture | oscarase ) | ( jj | jjchem | oscarcj )* nnchementity )
            int alt143=2;
            alt143 = dfa143.predict(input);
            switch (alt143) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:4: ( jj | jjchem | oscarcj | jjcomp )* ( nnstate | referenceToExampleCompound | oscaronts | nnatmosphere | nnmixture | oscarase )
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:4: ( jj | jjchem | oscarcj | jjcomp )*
                    loop140:
                    do {
                        int alt140=5;
                        switch ( input.LA(1) ) {
                        case 151:
                            {
                            alt140=1;
                            }
                            break;
                        case 45:
                            {
                            alt140=2;
                            }
                            break;
                        case 39:
                            {
                            alt140=3;
                            }
                            break;
                        case 46:
                            {
                            alt140=4;
                            }
                            break;

                        }

                        switch (alt140) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:5: jj
                    	    {
                    	    pushFollow(FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2012_static.FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2012);
                    	    jj415=jj();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj415.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:8: jjchem
                    	    {
                    	    pushFollow(FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2014_static.FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2014);
                    	    jjchem416=jjchem();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem416.getTree());

                    	    }
                    	    break;
                    	case 3 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:15: oscarcj
                    	    {
                    	    pushFollow(FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN2016_static.FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN2016);
                    	    oscarcj417=oscarcj();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj417.getTree());

                    	    }
                    	    break;
                    	case 4 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:23: jjcomp
                    	    {
                    	    pushFollow(FOLLOW_jjcomp_in_potentialUnnamedMoleculeStructureNN2018_static.FOLLOW_jjcomp_in_potentialUnnamedMoleculeStructureNN2018);
                    	    jjcomp418=jjcomp();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp418.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop140;
                        }
                    } while (true);

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:32: ( nnstate | referenceToExampleCompound | oscaronts | nnatmosphere | nnmixture | oscarase )
                    int alt141=6;
                    switch ( input.LA(1) ) {
                    case 63:
                        {
                        alt141=1;
                        }
                        break;
                    case 83:
                        {
                        alt141=2;
                        }
                        break;
                    case 42:
                        {
                        alt141=3;
                        }
                        break;
                    case 68:
                        {
                        alt141=4;
                        }
                        break;
                    case 90:
                        {
                        alt141=5;
                        }
                        break;
                    case 41:
                        {
                        alt141=6;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 141, 0, input);

                        throw nvae;
                    }

                    switch (alt141) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:33: nnstate
                            {
                            pushFollow(FOLLOW_nnstate_in_potentialUnnamedMoleculeStructureNN2023_static.FOLLOW_nnstate_in_potentialUnnamedMoleculeStructureNN2023);
                            nnstate419=nnstate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate419.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:41: referenceToExampleCompound
                            {
                            pushFollow(FOLLOW_referenceToExampleCompound_in_potentialUnnamedMoleculeStructureNN2025_static.FOLLOW_referenceToExampleCompound_in_potentialUnnamedMoleculeStructureNN2025);
                            referenceToExampleCompound420=referenceToExampleCompound();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, referenceToExampleCompound420.getTree());

                            }
                            break;
                        case 3 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:68: oscaronts
                            {
                            pushFollow(FOLLOW_oscaronts_in_potentialUnnamedMoleculeStructureNN2027_static.FOLLOW_oscaronts_in_potentialUnnamedMoleculeStructureNN2027);
                            oscaronts421=oscaronts();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaronts421.getTree());

                            }
                            break;
                        case 4 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:78: nnatmosphere
                            {
                            pushFollow(FOLLOW_nnatmosphere_in_potentialUnnamedMoleculeStructureNN2029_static.FOLLOW_nnatmosphere_in_potentialUnnamedMoleculeStructureNN2029);
                            nnatmosphere422=nnatmosphere();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere422.getTree());

                            }
                            break;
                        case 5 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:91: nnmixture
                            {
                            pushFollow(FOLLOW_nnmixture_in_potentialUnnamedMoleculeStructureNN2031_static.FOLLOW_nnmixture_in_potentialUnnamedMoleculeStructureNN2031);
                            nnmixture423=nnmixture();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture423.getTree());

                            }
                            break;
                        case 6 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:101: oscarase
                            {
                            pushFollow(FOLLOW_oscarase_in_potentialUnnamedMoleculeStructureNN2033_static.FOLLOW_oscarase_in_potentialUnnamedMoleculeStructureNN2033);
                            oscarase424=oscarase();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase424.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:113: ( jj | jjchem | oscarcj )* nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:113: ( jj | jjchem | oscarcj )*
                    loop142:
                    do {
                        int alt142=4;
                        switch ( input.LA(1) ) {
                        case 151:
                            {
                            alt142=1;
                            }
                            break;
                        case 45:
                            {
                            alt142=2;
                            }
                            break;
                        case 39:
                            {
                            alt142=3;
                            }
                            break;

                        }

                        switch (alt142) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:114: jj
                    	    {
                    	    pushFollow(FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2039_static.FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2039);
                    	    jj425=jj();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj425.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:117: jjchem
                    	    {
                    	    pushFollow(FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2041_static.FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2041);
                    	    jjchem426=jjchem();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem426.getTree());

                    	    }
                    	    break;
                    	case 3 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:124: oscarcj
                    	    {
                    	    pushFollow(FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN2043_static.FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN2043);
                    	    oscarcj427=oscarcj();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj427.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop142;
                        }
                    } while (true);

                    pushFollow(FOLLOW_nnchementity_in_potentialUnnamedMoleculeStructureNN2047_static.FOLLOW_nnchementity_in_potentialUnnamedMoleculeStructureNN2047);
                    nnchementity428=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity428.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, potentialUnnamedMoleculeStructureNN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "potentialUnnamedMoleculeStructureNN"

    public static class numericReferenceOrQuantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericReferenceOrQuantity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:1: numericReferenceOrQuantity : ( quantity | numericOrIdentifierCompoundReference );
    public final ChemicalChunkerParser.numericReferenceOrQuantity_return numericReferenceOrQuantity() throws RecognitionException {
        ChemicalChunkerParser.numericReferenceOrQuantity_return retval = new ChemicalChunkerParser.numericReferenceOrQuantity_return();
        retval.start = input.LT(1);
        int numericReferenceOrQuantity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity429 = null;

        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference430 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:2: ( quantity | numericOrIdentifierCompoundReference )
            int alt144=2;
            switch ( input.LA(1) ) {
            case 143:
                {
                int LA144_1 = input.LA(2);

                if ( (synpred358_ChemicalChunker()) ) {
                    alt144=1;
                }
                else if ( (true) ) {
                    alt144=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 144, 1, input);

                    throw nvae;
                }
                }
                break;
            case 146:
                {
                int LA144_2 = input.LA(2);

                if ( (synpred358_ChemicalChunker()) ) {
                    alt144=1;
                }
                else if ( (true) ) {
                    alt144=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 144, 2, input);

                    throw nvae;
                }
                }
                break;
            case 73:
            case 130:
                {
                alt144=1;
                }
                break;
            case 38:
            case 139:
            case 141:
                {
                alt144=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;
            }

            switch (alt144) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:4: quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantity_in_numericReferenceOrQuantity2057_static.FOLLOW_quantity_in_numericReferenceOrQuantity2057);
                    quantity429=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity429.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:15: numericOrIdentifierCompoundReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_numericOrIdentifierCompoundReference_in_numericReferenceOrQuantity2061_static.FOLLOW_numericOrIdentifierCompoundReference_in_numericReferenceOrQuantity2061);
                    numericOrIdentifierCompoundReference430=numericOrIdentifierCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericOrIdentifierCompoundReference430.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, numericReferenceOrQuantity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numericReferenceOrQuantity"

    public static class asAstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "asAstate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:1: asAstate : inas ( dt )? ( jj | jjchem | oscarcj )* nnstate ( quantity )* ;
    public final ChemicalChunkerParser.asAstate_return asAstate() throws RecognitionException {
        ChemicalChunkerParser.asAstate_return retval = new ChemicalChunkerParser.asAstate_return();
        retval.start = input.LT(1);
        int asAstate_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inas_return inas431 = null;

        ChemicalChunkerParser.dt_return dt432 = null;

        ChemicalChunkerParser.jj_return jj433 = null;

        ChemicalChunkerParser.jjchem_return jjchem434 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj435 = null;

        ChemicalChunkerParser.nnstate_return nnstate436 = null;

        ChemicalChunkerParser.quantity_return quantity437 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:2: ( inas ( dt )? ( jj | jjchem | oscarcj )* nnstate ( quantity )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:4: inas ( dt )? ( jj | jjchem | oscarcj )* nnstate ( quantity )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inas_in_asAstate2070_static.FOLLOW_inas_in_asAstate2070);
            inas431=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inas431.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:9: ( dt )?
            int alt145=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt145=1;
                    }
                    break;
            }

            switch (alt145) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_asAstate2072_static.FOLLOW_dt_in_asAstate2072);
                    dt432=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt432.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:13: ( jj | jjchem | oscarcj )*
            loop146:
            do {
                int alt146=4;
                switch ( input.LA(1) ) {
                case 151:
                    {
                    alt146=1;
                    }
                    break;
                case 45:
                    {
                    alt146=2;
                    }
                    break;
                case 39:
                    {
                    alt146=3;
                    }
                    break;

                }

                switch (alt146) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:14: jj
            	    {
            	    pushFollow(FOLLOW_jj_in_asAstate2076_static.FOLLOW_jj_in_asAstate2076);
            	    jj433=jj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj433.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:17: jjchem
            	    {
            	    pushFollow(FOLLOW_jjchem_in_asAstate2078_static.FOLLOW_jjchem_in_asAstate2078);
            	    jjchem434=jjchem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem434.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:24: oscarcj
            	    {
            	    pushFollow(FOLLOW_oscarcj_in_asAstate2080_static.FOLLOW_oscarcj_in_asAstate2080);
            	    oscarcj435=oscarcj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj435.getTree());

            	    }
            	    break;

            	default :
            	    break loop146;
                }
            } while (true);

            pushFollow(FOLLOW_nnstate_in_asAstate2084_static.FOLLOW_nnstate_in_asAstate2084);
            nnstate436=nnstate();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate436.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:42: ( quantity )*
            loop147:
            do {
                int alt147=2;
                alt147 = dfa147.predict(input);
                switch (alt147) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_asAstate2086_static.FOLLOW_quantity_in_asAstate2086);
            	    quantity437=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity437.getTree());

            	    }
            	    break;

            	default :
            	    break loop147;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, asAstate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "asAstate"

    public static class alphanumericOrIdentifierCompoundReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "alphanumericOrIdentifierCompoundReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:333:1: alphanumericOrIdentifierCompoundReference : allIdentifierTypesOtherThanCD -> ^( REFERENCETOCOMPOUND allIdentifierTypesOtherThanCD ) ;
    public final ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return alphanumericOrIdentifierCompoundReference() throws RecognitionException {
        ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return retval = new ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return();
        retval.start = input.LT(1);
        int alphanumericOrIdentifierCompoundReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.allIdentifierTypesOtherThanCD_return allIdentifierTypesOtherThanCD438 = null;


        RewriteRuleSubtreeStream stream_allIdentifierTypesOtherThanCD=new RewriteRuleSubtreeStream(adaptor,"rule allIdentifierTypesOtherThanCD");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:3: ( allIdentifierTypesOtherThanCD -> ^( REFERENCETOCOMPOUND allIdentifierTypesOtherThanCD ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:5: allIdentifierTypesOtherThanCD
            {
            pushFollow(FOLLOW_allIdentifierTypesOtherThanCD_in_alphanumericOrIdentifierCompoundReference2097_static.FOLLOW_allIdentifierTypesOtherThanCD_in_alphanumericOrIdentifierCompoundReference2097);
            allIdentifierTypesOtherThanCD438=allIdentifierTypesOtherThanCD();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_allIdentifierTypesOtherThanCD.add(allIdentifierTypesOtherThanCD438.getTree());


            // AST REWRITE
            // elements: allIdentifierTypesOtherThanCD
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 334:35: -> ^( REFERENCETOCOMPOUND allIdentifierTypesOtherThanCD )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:38: ^( REFERENCETOCOMPOUND allIdentifierTypesOtherThanCD )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                adaptor.addChild(root_1, stream_allIdentifierTypesOtherThanCD.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, alphanumericOrIdentifierCompoundReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "alphanumericOrIdentifierCompoundReference"

    public static class numberCompoundReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberCompoundReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:336:1: numberCompoundReference : ( cd {...}?) -> ^( REFERENCETOCOMPOUND cd ) ;
    public final ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference() throws RecognitionException {
        ChemicalChunkerParser.numberCompoundReference_return retval = new ChemicalChunkerParser.numberCompoundReference_return();
        retval.start = input.LT(1);
        int numberCompoundReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd439 = null;


        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:3: ( ( cd {...}?) -> ^( REFERENCETOCOMPOUND cd ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:5: ( cd {...}?)
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:5: ( cd {...}?)
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:6: cd {...}?
            {
            pushFollow(FOLLOW_cd_in_numberCompoundReference2116_static.FOLLOW_cd_in_numberCompoundReference2116);
            cd439=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd439.getTree());
            if ( !((!cdHasRoleOtherThanIdentifier(input))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "numberCompoundReference", "!cdHasRoleOtherThanIdentifier(input)");
            }

            }



            // AST REWRITE
            // elements: cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 337:50: -> ^( REFERENCETOCOMPOUND cd )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:53: ^( REFERENCETOCOMPOUND cd )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, numberCompoundReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numberCompoundReference"

    public static class numericOrIdentifierCompoundReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericOrIdentifierCompoundReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:1: numericOrIdentifierCompoundReference : allIdentifierTypes -> ^( REFERENCETOCOMPOUND allIdentifierTypes ) ;
    public final ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference() throws RecognitionException {
        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return retval = new ChemicalChunkerParser.numericOrIdentifierCompoundReference_return();
        retval.start = input.LT(1);
        int numericOrIdentifierCompoundReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.allIdentifierTypes_return allIdentifierTypes440 = null;


        RewriteRuleSubtreeStream stream_allIdentifierTypes=new RewriteRuleSubtreeStream(adaptor,"rule allIdentifierTypes");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:3: ( allIdentifierTypes -> ^( REFERENCETOCOMPOUND allIdentifierTypes ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:5: allIdentifierTypes
            {
            pushFollow(FOLLOW_allIdentifierTypes_in_numericOrIdentifierCompoundReference2137_static.FOLLOW_allIdentifierTypes_in_numericOrIdentifierCompoundReference2137);
            allIdentifierTypes440=allIdentifierTypes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_allIdentifierTypes.add(allIdentifierTypes440.getTree());


            // AST REWRITE
            // elements: allIdentifierTypes
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 340:24: -> ^( REFERENCETOCOMPOUND allIdentifierTypes )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:27: ^( REFERENCETOCOMPOUND allIdentifierTypes )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                adaptor.addChild(root_1, stream_allIdentifierTypes.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, numericOrIdentifierCompoundReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numericOrIdentifierCompoundReference"

    public static class quantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:1: quantity : ( quantity1Node | quantity2Node ) ;
    public final ChemicalChunkerParser.quantity_return quantity() throws RecognitionException {
        ChemicalChunkerParser.quantity_return retval = new ChemicalChunkerParser.quantity_return();
        retval.start = input.LT(1);
        int quantity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity1Node_return quantity1Node441 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node442 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:11: ( ( quantity1Node | quantity2Node ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:14: ( quantity1Node | quantity2Node )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:14: ( quantity1Node | quantity2Node )
            int alt148=2;
            switch ( input.LA(1) ) {
            case 143:
                {
                alt148=1;
                }
                break;
            case 73:
            case 130:
            case 146:
                {
                alt148=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);

                throw nvae;
            }

            switch (alt148) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:15: quantity1Node
                    {
                    pushFollow(FOLLOW_quantity1Node_in_quantity2157_static.FOLLOW_quantity1Node_in_quantity2157);
                    quantity1Node441=quantity1Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity1Node441.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:29: quantity2Node
                    {
                    pushFollow(FOLLOW_quantity2Node_in_quantity2159_static.FOLLOW_quantity2Node_in_quantity2159);
                    quantity2Node442=quantity2Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node442.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, quantity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity"

    public static class quantity1Node_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1Node"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:1: quantity1Node : quantity1 -> ^( QUANTITY quantity1 ) ;
    public final ChemicalChunkerParser.quantity1Node_return quantity1Node() throws RecognitionException {
        ChemicalChunkerParser.quantity1Node_return retval = new ChemicalChunkerParser.quantity1Node_return();
        retval.start = input.LT(1);
        int quantity1Node_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity1_return quantity1443 = null;


        RewriteRuleSubtreeStream stream_quantity1=new RewriteRuleSubtreeStream(adaptor,"rule quantity1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:15: ( quantity1 -> ^( QUANTITY quantity1 ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:17: quantity1
            {
            pushFollow(FOLLOW_quantity1_in_quantity1Node2168_static.FOLLOW_quantity1_in_quantity1Node2168);
            quantity1443=quantity1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_quantity1.add(quantity1443.getTree());


            // AST REWRITE
            // elements: quantity1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 344:27: -> ^( QUANTITY quantity1 )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:32: ^( QUANTITY quantity1 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(QUANTITY, "QUANTITY"), root_1);

                adaptor.addChild(root_1, stream_quantity1.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, quantity1Node_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity1Node"

    public static class quantity1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:1: quantity1 : lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb ;
    public final ChemicalChunkerParser.quantity1_return quantity1() throws RecognitionException {
        ChemicalChunkerParser.quantity1_return retval = new ChemicalChunkerParser.quantity1_return();
        retval.start = input.LT(1);
        int quantity1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb444 = null;

        ChemicalChunkerParser.measurements_return measurements445 = null;

        ChemicalChunkerParser.comma_return comma446 = null;

        ChemicalChunkerParser.measurements_return measurements447 = null;

        ChemicalChunkerParser.comma_return comma448 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase449 = null;

        ChemicalChunkerParser.stop_return stop450 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase451 = null;

        ChemicalChunkerParser.rrb_return rrb452 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:2: ( lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:4: lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_quantity12188_static.FOLLOW_lrb_in_quantity12188);
            lrb444=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb444.getTree());
            pushFollow(FOLLOW_measurements_in_quantity12190_static.FOLLOW_measurements_in_quantity12190);
            measurements445=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements445.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:21: ( comma measurements )*
            loop149:
            do {
                int alt149=2;
                switch ( input.LA(1) ) {
                case 133:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 73:
                        case 130:
                        case 146:
                            {
                            alt149=1;
                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt149) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:22: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12193_static.FOLLOW_comma_in_quantity12193);
            	    comma446=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma446.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity12196_static.FOLLOW_measurements_in_quantity12196);
            	    measurements447=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements447.getTree());

            	    }
            	    break;

            	default :
            	    break loop149;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:44: ( comma preparationphrase )*
            loop150:
            do {
                int alt150=2;
                switch ( input.LA(1) ) {
                case 133:
                    {
                    alt150=1;
                    }
                    break;

                }

                switch (alt150) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:45: comma preparationphrase
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12201_static.FOLLOW_comma_in_quantity12201);
            	    comma448=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma448.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12203_static.FOLLOW_preparationphrase_in_quantity12203);
            	    preparationphrase449=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase449.getTree());

            	    }
            	    break;

            	default :
            	    break loop150;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:71: ( stop preparationphrase )*
            loop151:
            do {
                int alt151=2;
                switch ( input.LA(1) ) {
                case 137:
                    {
                    alt151=1;
                    }
                    break;

                }

                switch (alt151) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:72: stop preparationphrase
            	    {
            	    pushFollow(FOLLOW_stop_in_quantity12208_static.FOLLOW_stop_in_quantity12208);
            	    stop450=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop450.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12210_static.FOLLOW_preparationphrase_in_quantity12210);
            	    preparationphrase451=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase451.getTree());

            	    }
            	    break;

            	default :
            	    break loop151;
                }
            } while (true);

            pushFollow(FOLLOW_rrb_in_quantity12215_static.FOLLOW_rrb_in_quantity12215);
            rrb452=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb452.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, quantity1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity1"

    public static class quantity2Node_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2Node"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:1: quantity2Node : quantity2 -> ^( QUANTITY quantity2 ) ;
    public final ChemicalChunkerParser.quantity2Node_return quantity2Node() throws RecognitionException {
        ChemicalChunkerParser.quantity2Node_return retval = new ChemicalChunkerParser.quantity2Node_return();
        retval.start = input.LT(1);
        int quantity2Node_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity2_return quantity2453 = null;


        RewriteRuleSubtreeStream stream_quantity2=new RewriteRuleSubtreeStream(adaptor,"rule quantity2");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:15: ( quantity2 -> ^( QUANTITY quantity2 ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:17: quantity2
            {
            pushFollow(FOLLOW_quantity2_in_quantity2Node2223_static.FOLLOW_quantity2_in_quantity2Node2223);
            quantity2453=quantity2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_quantity2.add(quantity2453.getTree());


            // AST REWRITE
            // elements: quantity2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 349:27: -> ^( QUANTITY quantity2 )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:32: ^( QUANTITY quantity2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(QUANTITY, "QUANTITY"), root_1);

                adaptor.addChild(root_1, stream_quantity2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, quantity2Node_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity2Node"

    public static class quantity2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:1: quantity2 : measurements ( comma measurements )* ;
    public final ChemicalChunkerParser.quantity2_return quantity2() throws RecognitionException {
        ChemicalChunkerParser.quantity2_return retval = new ChemicalChunkerParser.quantity2_return();
        retval.start = input.LT(1);
        int quantity2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements454 = null;

        ChemicalChunkerParser.comma_return comma455 = null;

        ChemicalChunkerParser.measurements_return measurements456 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:2: ( measurements ( comma measurements )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:5: measurements ( comma measurements )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_measurements_in_quantity22244_static.FOLLOW_measurements_in_quantity22244);
            measurements454=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements454.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:18: ( comma measurements )*
            loop152:
            do {
                int alt152=2;
                alt152 = dfa152.predict(input);
                switch (alt152) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:19: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity22247_static.FOLLOW_comma_in_quantity22247);
            	    comma455=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma455.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity22250_static.FOLLOW_measurements_in_quantity22250);
            	    measurements456=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements456.getTree());

            	    }
            	    break;

            	default :
            	    break loop152;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, quantity2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity2"

    public static class measurements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurements"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:1: measurements : ( cd nn )? ( multiple | measurementtypes ) ( dt )? ;
    public final ChemicalChunkerParser.measurements_return measurements() throws RecognitionException {
        ChemicalChunkerParser.measurements_return retval = new ChemicalChunkerParser.measurements_return();
        retval.start = input.LT(1);
        int measurements_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd457 = null;

        ChemicalChunkerParser.nn_return nn458 = null;

        ChemicalChunkerParser.multiple_return multiple459 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes460 = null;

        ChemicalChunkerParser.dt_return dt461 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:2: ( ( cd nn )? ( multiple | measurementtypes ) ( dt )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:3: ( cd nn )? ( multiple | measurementtypes ) ( dt )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:3: ( cd nn )?
            int alt153=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 156:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 73:
                                                case 130:
                                                case 146:
                                                    {
                                                    alt153=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt153) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:4: cd nn
                    {
                    pushFollow(FOLLOW_cd_in_measurements2263_static.FOLLOW_cd_in_measurements2263);
                    cd457=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd457.getTree());
                    pushFollow(FOLLOW_nn_in_measurements2265_static.FOLLOW_nn_in_measurements2265);
                    nn458=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn458.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:12: ( multiple | measurementtypes )
            int alt154=2;
            switch ( input.LA(1) ) {
            case 146:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 65:
                    case 66:
                    case 67:
                    case 69:
                    case 70:
                    case 138:
                    case 156:
                        {
                        alt154=2;
                        }
                        break;
                    case 44:
                        {
                        alt154=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 154, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 154, 1, input);

                    throw nvae;
                }

                }
                break;
            case 73:
            case 130:
                {
                alt154=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 154, 0, input);

                throw nvae;
            }

            switch (alt154) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:13: multiple
                    {
                    pushFollow(FOLLOW_multiple_in_measurements2270_static.FOLLOW_multiple_in_measurements2270);
                    multiple459=multiple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiple459.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:22: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_measurements2272_static.FOLLOW_measurementtypes_in_measurements2272);
                    measurementtypes460=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurementtypes460.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:40: ( dt )?
            int alt155=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA155_3 = input.LA(3);

                            if ( (synpred371_ChemicalChunker()) ) {
                                alt155=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt155) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_measurements2275_static.FOLLOW_dt_in_measurements2275);
                    dt461=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt461.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, measurements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "measurements"

    public static class multiple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiple"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:1: multiple : cd cdunicode ( measurementtypes )? -> ^( MULTIPLE cd cdunicode ( measurementtypes )? ) ;
    public final ChemicalChunkerParser.multiple_return multiple() throws RecognitionException {
        ChemicalChunkerParser.multiple_return retval = new ChemicalChunkerParser.multiple_return();
        retval.start = input.LT(1);
        int multiple_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd462 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode463 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes464 = null;


        RewriteRuleSubtreeStream stream_cdunicode=new RewriteRuleSubtreeStream(adaptor,"rule cdunicode");
        RewriteRuleSubtreeStream stream_measurementtypes=new RewriteRuleSubtreeStream(adaptor,"rule measurementtypes");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:10: ( cd cdunicode ( measurementtypes )? -> ^( MULTIPLE cd cdunicode ( measurementtypes )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:12: cd cdunicode ( measurementtypes )?
            {
            pushFollow(FOLLOW_cd_in_multiple2283_static.FOLLOW_cd_in_multiple2283);
            cd462=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd462.getTree());
            pushFollow(FOLLOW_cdunicode_in_multiple2285_static.FOLLOW_cdunicode_in_multiple2285);
            cdunicode463=cdunicode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cdunicode.add(cdunicode463.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:25: ( measurementtypes )?
            int alt156=2;
            alt156 = dfa156.predict(input);
            switch (alt156) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_multiple2287_static.FOLLOW_measurementtypes_in_multiple2287);
                    measurementtypes464=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_measurementtypes.add(measurementtypes464.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: cdunicode, measurementtypes, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 356:43: -> ^( MULTIPLE cd cdunicode ( measurementtypes )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:46: ^( MULTIPLE cd cdunicode ( measurementtypes )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MULTIPLE, "MULTIPLE"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_cdunicode.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:72: ( measurementtypes )?
                if ( stream_measurementtypes.hasNext() ) {
                    adaptor.addChild(root_1, stream_measurementtypes.nextTree());

                }
                stream_measurementtypes.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, multiple_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiple"

    public static class measurementtypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurementtypes"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:357:1: measurementtypes : ( molar | amount | mass | volume | logHydrogenActivity | equivalent | yield | percent );
    public final ChemicalChunkerParser.measurementtypes_return measurementtypes() throws RecognitionException {
        ChemicalChunkerParser.measurementtypes_return retval = new ChemicalChunkerParser.measurementtypes_return();
        retval.start = input.LT(1);
        int measurementtypes_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.molar_return molar465 = null;

        ChemicalChunkerParser.amount_return amount466 = null;

        ChemicalChunkerParser.mass_return mass467 = null;

        ChemicalChunkerParser.volume_return volume468 = null;

        ChemicalChunkerParser.logHydrogenActivity_return logHydrogenActivity469 = null;

        ChemicalChunkerParser.equivalent_return equivalent470 = null;

        ChemicalChunkerParser.yield_return yield471 = null;

        ChemicalChunkerParser.percent_return percent472 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:2: ( molar | amount | mass | volume | logHydrogenActivity | equivalent | yield | percent )
            int alt157=8;
            alt157 = dfa157.predict(input);
            switch (alt157) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:4: molar
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molar_in_measurementtypes2312_static.FOLLOW_molar_in_measurementtypes2312);
                    molar465=molar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molar465.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:10: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_amount_in_measurementtypes2314_static.FOLLOW_amount_in_measurementtypes2314);
                    amount466=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount466.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:17: mass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mass_in_measurementtypes2316_static.FOLLOW_mass_in_measurementtypes2316);
                    mass467=mass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mass467.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:22: volume
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_volume_in_measurementtypes2318_static.FOLLOW_volume_in_measurementtypes2318);
                    volume468=volume();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, volume468.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:29: logHydrogenActivity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_logHydrogenActivity_in_measurementtypes2320_static.FOLLOW_logHydrogenActivity_in_measurementtypes2320);
                    logHydrogenActivity469=logHydrogenActivity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, logHydrogenActivity469.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:49: equivalent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_equivalent_in_measurementtypes2322_static.FOLLOW_equivalent_in_measurementtypes2322);
                    equivalent470=equivalent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, equivalent470.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:60: yield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_yield_in_measurementtypes2324_static.FOLLOW_yield_in_measurementtypes2324);
                    yield471=yield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, yield471.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:66: percent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_percent_in_measurementtypes2326_static.FOLLOW_percent_in_measurementtypes2326);
                    percent472=percent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percent472.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, measurementtypes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "measurementtypes"

    public static class molar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molar"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:1: molar : cd nnmolar -> ^( MOLAR cd nnmolar ) ;
    public final ChemicalChunkerParser.molar_return molar() throws RecognitionException {
        ChemicalChunkerParser.molar_return retval = new ChemicalChunkerParser.molar_return();
        retval.start = input.LT(1);
        int molar_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd473 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar474 = null;


        RewriteRuleSubtreeStream stream_nnmolar=new RewriteRuleSubtreeStream(adaptor,"rule nnmolar");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:7: ( cd nnmolar -> ^( MOLAR cd nnmolar ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:9: cd nnmolar
            {
            pushFollow(FOLLOW_cd_in_molar2334_static.FOLLOW_cd_in_molar2334);
            cd473=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd473.getTree());
            pushFollow(FOLLOW_nnmolar_in_molar2336_static.FOLLOW_nnmolar_in_molar2336);
            nnmolar474=nnmolar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmolar.add(nnmolar474.getTree());


            // AST REWRITE
            // elements: nnmolar, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 360:20: -> ^( MOLAR cd nnmolar )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:23: ^( MOLAR cd nnmolar )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MOLAR, "MOLAR"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnmolar.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, molar_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "molar"

    public static class amount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "amount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:1: amount : cd nnamount -> ^( AMOUNT cd nnamount ) ;
    public final ChemicalChunkerParser.amount_return amount() throws RecognitionException {
        ChemicalChunkerParser.amount_return retval = new ChemicalChunkerParser.amount_return();
        retval.start = input.LT(1);
        int amount_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd475 = null;

        ChemicalChunkerParser.nnamount_return nnamount476 = null;


        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        RewriteRuleSubtreeStream stream_nnamount=new RewriteRuleSubtreeStream(adaptor,"rule nnamount");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:8: ( cd nnamount -> ^( AMOUNT cd nnamount ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:10: cd nnamount
            {
            pushFollow(FOLLOW_cd_in_amount2356_static.FOLLOW_cd_in_amount2356);
            cd475=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd475.getTree());
            pushFollow(FOLLOW_nnamount_in_amount2358_static.FOLLOW_nnamount_in_amount2358);
            nnamount476=nnamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnamount.add(nnamount476.getTree());


            // AST REWRITE
            // elements: nnamount, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 361:22: -> ^( AMOUNT cd nnamount )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:25: ^( AMOUNT cd nnamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AMOUNT, "AMOUNT"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, amount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "amount"

    public static class mass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:1: mass : cd nnmass -> ^( MASS cd nnmass ) ;
    public final ChemicalChunkerParser.mass_return mass() throws RecognitionException {
        ChemicalChunkerParser.mass_return retval = new ChemicalChunkerParser.mass_return();
        retval.start = input.LT(1);
        int mass_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd477 = null;

        ChemicalChunkerParser.nnmass_return nnmass478 = null;


        RewriteRuleSubtreeStream stream_nnmass=new RewriteRuleSubtreeStream(adaptor,"rule nnmass");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:6: ( cd nnmass -> ^( MASS cd nnmass ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:8: cd nnmass
            {
            pushFollow(FOLLOW_cd_in_mass2378_static.FOLLOW_cd_in_mass2378);
            cd477=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd477.getTree());
            pushFollow(FOLLOW_nnmass_in_mass2380_static.FOLLOW_nnmass_in_mass2380);
            nnmass478=nnmass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmass.add(nnmass478.getTree());


            // AST REWRITE
            // elements: cd, nnmass
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 362:17: -> ^( MASS cd nnmass )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:20: ^( MASS cd nnmass )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MASS, "MASS"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnmass.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, mass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mass"

    public static class volume_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "volume"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:1: volume : cd nnvol -> ^( VOLUME cd nnvol ) ;
    public final ChemicalChunkerParser.volume_return volume() throws RecognitionException {
        ChemicalChunkerParser.volume_return retval = new ChemicalChunkerParser.volume_return();
        retval.start = input.LT(1);
        int volume_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd479 = null;

        ChemicalChunkerParser.nnvol_return nnvol480 = null;


        RewriteRuleSubtreeStream stream_nnvol=new RewriteRuleSubtreeStream(adaptor,"rule nnvol");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:8: ( cd nnvol -> ^( VOLUME cd nnvol ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:10: cd nnvol
            {
            pushFollow(FOLLOW_cd_in_volume2399_static.FOLLOW_cd_in_volume2399);
            cd479=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd479.getTree());
            pushFollow(FOLLOW_nnvol_in_volume2401_static.FOLLOW_nnvol_in_volume2401);
            nnvol480=nnvol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnvol.add(nnvol480.getTree());


            // AST REWRITE
            // elements: nnvol, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 363:19: -> ^( VOLUME cd nnvol )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:22: ^( VOLUME cd nnvol )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VOLUME, "VOLUME"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnvol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, volume_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "volume"

    public static class logHydrogenActivity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logHydrogenActivity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:1: logHydrogenActivity : nnph ( sym )? cd -> ^( PH nnph ( sym )? cd ) ;
    public final ChemicalChunkerParser.logHydrogenActivity_return logHydrogenActivity() throws RecognitionException {
        ChemicalChunkerParser.logHydrogenActivity_return retval = new ChemicalChunkerParser.logHydrogenActivity_return();
        retval.start = input.LT(1);
        int logHydrogenActivity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnph_return nnph481 = null;

        ChemicalChunkerParser.sym_return sym482 = null;

        ChemicalChunkerParser.cd_return cd483 = null;


        RewriteRuleSubtreeStream stream_nnph=new RewriteRuleSubtreeStream(adaptor,"rule nnph");
        RewriteRuleSubtreeStream stream_sym=new RewriteRuleSubtreeStream(adaptor,"rule sym");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:21: ( nnph ( sym )? cd -> ^( PH nnph ( sym )? cd ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:23: nnph ( sym )? cd
            {
            pushFollow(FOLLOW_nnph_in_logHydrogenActivity2421_static.FOLLOW_nnph_in_logHydrogenActivity2421);
            nnph481=nnph();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnph.add(nnph481.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:28: ( sym )?
            int alt158=2;
            switch ( input.LA(1) ) {
                case 168:
                    {
                    alt158=1;
                    }
                    break;
            }

            switch (alt158) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: sym
                    {
                    pushFollow(FOLLOW_sym_in_logHydrogenActivity2423_static.FOLLOW_sym_in_logHydrogenActivity2423);
                    sym482=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_sym.add(sym482.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_cd_in_logHydrogenActivity2426_static.FOLLOW_cd_in_logHydrogenActivity2426);
            cd483=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd483.getTree());


            // AST REWRITE
            // elements: sym, cd, nnph
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 364:36: -> ^( PH nnph ( sym )? cd )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:39: ^( PH nnph ( sym )? cd )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PH, "PH"), root_1);

                adaptor.addChild(root_1, stream_nnph.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:49: ( sym )?
                if ( stream_sym.hasNext() ) {
                    adaptor.addChild(root_1, stream_sym.nextTree());

                }
                stream_sym.reset();
                adaptor.addChild(root_1, stream_cd.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, logHydrogenActivity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logHydrogenActivity"

    public static class equivalent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equivalent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:1: equivalent : cd nneq -> ^( EQUIVALENT cd nneq ) ;
    public final ChemicalChunkerParser.equivalent_return equivalent() throws RecognitionException {
        ChemicalChunkerParser.equivalent_return retval = new ChemicalChunkerParser.equivalent_return();
        retval.start = input.LT(1);
        int equivalent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd484 = null;

        ChemicalChunkerParser.nneq_return nneq485 = null;


        RewriteRuleSubtreeStream stream_nneq=new RewriteRuleSubtreeStream(adaptor,"rule nneq");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:11: ( cd nneq -> ^( EQUIVALENT cd nneq ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:13: cd nneq
            {
            pushFollow(FOLLOW_cd_in_equivalent2446_static.FOLLOW_cd_in_equivalent2446);
            cd484=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd484.getTree());
            pushFollow(FOLLOW_nneq_in_equivalent2448_static.FOLLOW_nneq_in_equivalent2448);
            nneq485=nneq();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nneq.add(nneq485.getTree());


            // AST REWRITE
            // elements: nneq, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 365:21: -> ^( EQUIVALENT cd nneq )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:24: ^( EQUIVALENT cd nneq )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EQUIVALENT, "EQUIVALENT"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nneq.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, equivalent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equivalent"

    public static class yield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:1: yield : ( yield1 -> ^( YIELD yield1 ) | yield2 -> ^( YIELD yield2 ) );
    public final ChemicalChunkerParser.yield_return yield() throws RecognitionException {
        ChemicalChunkerParser.yield_return retval = new ChemicalChunkerParser.yield_return();
        retval.start = input.LT(1);
        int yield_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.yield1_return yield1486 = null;

        ChemicalChunkerParser.yield2_return yield2487 = null;


        RewriteRuleSubtreeStream stream_yield2=new RewriteRuleSubtreeStream(adaptor,"rule yield2");
        RewriteRuleSubtreeStream stream_yield1=new RewriteRuleSubtreeStream(adaptor,"rule yield1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:6: ( yield1 -> ^( YIELD yield1 ) | yield2 -> ^( YIELD yield2 ) )
            int alt159=2;
            switch ( input.LA(1) ) {
            case 130:
                {
                alt159=1;
                }
                break;
            case 146:
                {
                alt159=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;
            }

            switch (alt159) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:8: yield1
                    {
                    pushFollow(FOLLOW_yield1_in_yield2465_static.FOLLOW_yield1_in_yield2465);
                    yield1486=yield1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_yield1.add(yield1486.getTree());


                    // AST REWRITE
                    // elements: yield1
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 366:15: -> ^( YIELD yield1 )
                    {
                        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:18: ^( YIELD yield1 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(YIELD, "YIELD"), root_1);

                        adaptor.addChild(root_1, stream_yield1.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:35: yield2
                    {
                    pushFollow(FOLLOW_yield2_in_yield2476_static.FOLLOW_yield2_in_yield2476);
                    yield2487=yield2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_yield2.add(yield2487.getTree());


                    // AST REWRITE
                    // elements: yield2
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 366:42: -> ^( YIELD yield2 )
                    {
                        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:45: ^( YIELD yield2 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(YIELD, "YIELD"), root_1);

                        adaptor.addChild(root_1, stream_yield2.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, yield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "yield"

    public static class yield1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yield1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:1: yield1 : nnyield ( inof | colon ) percent ;
    public final ChemicalChunkerParser.yield1_return yield1() throws RecognitionException {
        ChemicalChunkerParser.yield1_return retval = new ChemicalChunkerParser.yield1_return();
        retval.start = input.LT(1);
        int yield1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnyield_return nnyield488 = null;

        ChemicalChunkerParser.inof_return inof489 = null;

        ChemicalChunkerParser.colon_return colon490 = null;

        ChemicalChunkerParser.percent_return percent491 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:7: ( nnyield ( inof | colon ) percent )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:9: nnyield ( inof | colon ) percent
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nnyield_in_yield12490_static.FOLLOW_nnyield_in_yield12490);
            nnyield488=nnyield();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield488.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:17: ( inof | colon )
            int alt160=2;
            switch ( input.LA(1) ) {
            case 56:
                {
                alt160=1;
                }
                break;
            case 132:
                {
                alt160=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 160, 0, input);

                throw nvae;
            }

            switch (alt160) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:18: inof
                    {
                    pushFollow(FOLLOW_inof_in_yield12493_static.FOLLOW_inof_in_yield12493);
                    inof489=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof489.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:23: colon
                    {
                    pushFollow(FOLLOW_colon_in_yield12495_static.FOLLOW_colon_in_yield12495);
                    colon490=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon490.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_percent_in_yield12498_static.FOLLOW_percent_in_yield12498);
            percent491=percent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, percent491.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, yield1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "yield1"

    public static class yield2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yield2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:1: yield2 : percent nnyield ;
    public final ChemicalChunkerParser.yield2_return yield2() throws RecognitionException {
        ChemicalChunkerParser.yield2_return retval = new ChemicalChunkerParser.yield2_return();
        retval.start = input.LT(1);
        int yield2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.percent_return percent492 = null;

        ChemicalChunkerParser.nnyield_return nnyield493 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:7: ( percent nnyield )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:9: percent nnyield
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_percent_in_yield22504_static.FOLLOW_percent_in_yield22504);
            percent492=percent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, percent492.getTree());
            pushFollow(FOLLOW_nnyield_in_yield22506_static.FOLLOW_nnyield_in_yield22506);
            nnyield493=nnyield();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield493.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, yield2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "yield2"

    public static class percent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:1: percent : cd ( nn )? percentsign ( dash cd percentsign )? -> ^( PERCENT cd ( nn )? percentsign ( dash )? ( cd )? ( percentsign )? ) ;
    public final ChemicalChunkerParser.percent_return percent() throws RecognitionException {
        ChemicalChunkerParser.percent_return retval = new ChemicalChunkerParser.percent_return();
        retval.start = input.LT(1);
        int percent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd494 = null;

        ChemicalChunkerParser.nn_return nn495 = null;

        ChemicalChunkerParser.percentsign_return percentsign496 = null;

        ChemicalChunkerParser.dash_return dash497 = null;

        ChemicalChunkerParser.cd_return cd498 = null;

        ChemicalChunkerParser.percentsign_return percentsign499 = null;


        RewriteRuleSubtreeStream stream_dash=new RewriteRuleSubtreeStream(adaptor,"rule dash");
        RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn");
        RewriteRuleSubtreeStream stream_percentsign=new RewriteRuleSubtreeStream(adaptor,"rule percentsign");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:9: ( cd ( nn )? percentsign ( dash cd percentsign )? -> ^( PERCENT cd ( nn )? percentsign ( dash )? ( cd )? ( percentsign )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:11: cd ( nn )? percentsign ( dash cd percentsign )?
            {
            pushFollow(FOLLOW_cd_in_percent2514_static.FOLLOW_cd_in_percent2514);
            cd494=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd494.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:14: ( nn )?
            int alt161=2;
            switch ( input.LA(1) ) {
                case 156:
                    {
                    alt161=1;
                    }
                    break;
            }

            switch (alt161) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nn
                    {
                    pushFollow(FOLLOW_nn_in_percent2516_static.FOLLOW_nn_in_percent2516);
                    nn495=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nn.add(nn495.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_percentsign_in_percent2519_static.FOLLOW_percentsign_in_percent2519);
            percentsign496=percentsign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_percentsign.add(percentsign496.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:30: ( dash cd percentsign )?
            int alt162=2;
            switch ( input.LA(1) ) {
                case 136:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 146:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 138:
                                                    {
                                                    switch ( input.LA(6) ) {
                                                        case TOKEN:
                                                            {
                                                            int LA162_7 = input.LA(7);

                                                            if ( (synpred384_ChemicalChunker()) ) {
                                                                alt162=1;
                                                            }
                                                            }
                                                            break;
                                                    }

                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt162) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:32: dash cd percentsign
                    {
                    pushFollow(FOLLOW_dash_in_percent2523_static.FOLLOW_dash_in_percent2523);
                    dash497=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dash.add(dash497.getTree());
                    pushFollow(FOLLOW_cd_in_percent2525_static.FOLLOW_cd_in_percent2525);
                    cd498=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cd.add(cd498.getTree());
                    pushFollow(FOLLOW_percentsign_in_percent2527_static.FOLLOW_percentsign_in_percent2527);
                    percentsign499=percentsign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_percentsign.add(percentsign499.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: dash, cd, percentsign, nn, cd, percentsign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 369:54: -> ^( PERCENT cd ( nn )? percentsign ( dash )? ( cd )? ( percentsign )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:57: ^( PERCENT cd ( nn )? percentsign ( dash )? ( cd )? ( percentsign )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PERCENT, "PERCENT"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:72: ( nn )?
                if ( stream_nn.hasNext() ) {
                    adaptor.addChild(root_1, stream_nn.nextTree());

                }
                stream_nn.reset();
                adaptor.addChild(root_1, stream_percentsign.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:88: ( dash )?
                if ( stream_dash.hasNext() ) {
                    adaptor.addChild(root_1, stream_dash.nextTree());

                }
                stream_dash.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:94: ( cd )?
                if ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:98: ( percentsign )?
                if ( stream_percentsign.hasNext() ) {
                    adaptor.addChild(root_1, stream_percentsign.nextTree());

                }
                stream_percentsign.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, percent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "percent"

    public static class bracketedContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:1: bracketedContent : ( ratio )? ( bracketedContent1 | bracketedContent2 | bracketedContent3 ) -> ^( MIXTURE ( ratio )? ( bracketedContent1 )? ( bracketedContent2 )? ( bracketedContent3 )? ) ;
    public final ChemicalChunkerParser.bracketedContent_return bracketedContent() throws RecognitionException {
        ChemicalChunkerParser.bracketedContent_return retval = new ChemicalChunkerParser.bracketedContent_return();
        retval.start = input.LT(1);
        int bracketedContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.ratio_return ratio500 = null;

        ChemicalChunkerParser.bracketedContent1_return bracketedContent1501 = null;

        ChemicalChunkerParser.bracketedContent2_return bracketedContent2502 = null;

        ChemicalChunkerParser.bracketedContent3_return bracketedContent3503 = null;


        RewriteRuleSubtreeStream stream_bracketedContent3=new RewriteRuleSubtreeStream(adaptor,"rule bracketedContent3");
        RewriteRuleSubtreeStream stream_ratio=new RewriteRuleSubtreeStream(adaptor,"rule ratio");
        RewriteRuleSubtreeStream stream_bracketedContent2=new RewriteRuleSubtreeStream(adaptor,"rule bracketedContent2");
        RewriteRuleSubtreeStream stream_bracketedContent1=new RewriteRuleSubtreeStream(adaptor,"rule bracketedContent1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:17: ( ( ratio )? ( bracketedContent1 | bracketedContent2 | bracketedContent3 ) -> ^( MIXTURE ( ratio )? ( bracketedContent1 )? ( bracketedContent2 )? ( bracketedContent3 )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:19: ( ratio )? ( bracketedContent1 | bracketedContent2 | bracketedContent3 )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:19: ( ratio )?
            int alt163=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt163=1;
                    }
                    break;
            }

            switch (alt163) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: ratio
                    {
                    pushFollow(FOLLOW_ratio_in_bracketedContent2561_static.FOLLOW_ratio_in_bracketedContent2561);
                    ratio500=ratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ratio.add(ratio500.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:27: ( bracketedContent1 | bracketedContent2 | bracketedContent3 )
            int alt164=3;
            switch ( input.LA(1) ) {
            case 133:
                {
                alt164=1;
                }
                break;
            case 143:
                {
                alt164=2;
                }
                break;
            case 139:
                {
                alt164=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 164, 0, input);

                throw nvae;
            }

            switch (alt164) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:28: bracketedContent1
                    {
                    pushFollow(FOLLOW_bracketedContent1_in_bracketedContent2566_static.FOLLOW_bracketedContent1_in_bracketedContent2566);
                    bracketedContent1501=bracketedContent1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedContent1.add(bracketedContent1501.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:46: bracketedContent2
                    {
                    pushFollow(FOLLOW_bracketedContent2_in_bracketedContent2568_static.FOLLOW_bracketedContent2_in_bracketedContent2568);
                    bracketedContent2502=bracketedContent2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedContent2.add(bracketedContent2502.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:64: bracketedContent3
                    {
                    pushFollow(FOLLOW_bracketedContent3_in_bracketedContent2570_static.FOLLOW_bracketedContent3_in_bracketedContent2570);
                    bracketedContent3503=bracketedContent3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedContent3.add(bracketedContent3503.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: bracketedContent3, bracketedContent1, bracketedContent2, ratio
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 372:83: -> ^( MIXTURE ( ratio )? ( bracketedContent1 )? ( bracketedContent2 )? ( bracketedContent3 )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:86: ^( MIXTURE ( ratio )? ( bracketedContent1 )? ( bracketedContent2 )? ( bracketedContent3 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MIXTURE, "MIXTURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:96: ( ratio )?
                if ( stream_ratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_ratio.nextTree());

                }
                stream_ratio.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:103: ( bracketedContent1 )?
                if ( stream_bracketedContent1.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedContent1.nextTree());

                }
                stream_bracketedContent1.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:122: ( bracketedContent2 )?
                if ( stream_bracketedContent2.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedContent2.nextTree());

                }
                stream_bracketedContent2.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:141: ( bracketedContent3 )?
                if ( stream_bracketedContent3.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedContent3.nextTree());

                }
                stream_bracketedContent3.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, bracketedContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContent"

    public static class bracketedContent1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContent1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:1: bracketedContent1 : comma lrb bracketedContentContents rrb comma ;
    public final ChemicalChunkerParser.bracketedContent1_return bracketedContent1() throws RecognitionException {
        ChemicalChunkerParser.bracketedContent1_return retval = new ChemicalChunkerParser.bracketedContent1_return();
        retval.start = input.LT(1);
        int bracketedContent1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma504 = null;

        ChemicalChunkerParser.lrb_return lrb505 = null;

        ChemicalChunkerParser.bracketedContentContents_return bracketedContentContents506 = null;

        ChemicalChunkerParser.rrb_return rrb507 = null;

        ChemicalChunkerParser.comma_return comma508 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:18: ( comma lrb bracketedContentContents rrb comma )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:20: comma lrb bracketedContentContents rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_bracketedContent12595_static.FOLLOW_comma_in_bracketedContent12595);
            comma504=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma504.getTree());
            pushFollow(FOLLOW_lrb_in_bracketedContent12597_static.FOLLOW_lrb_in_bracketedContent12597);
            lrb505=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb505.getTree());
            pushFollow(FOLLOW_bracketedContentContents_in_bracketedContent12599_static.FOLLOW_bracketedContentContents_in_bracketedContent12599);
            bracketedContentContents506=bracketedContentContents();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentContents506.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedContent12601_static.FOLLOW_rrb_in_bracketedContent12601);
            rrb507=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb507.getTree());
            pushFollow(FOLLOW_comma_in_bracketedContent12603_static.FOLLOW_comma_in_bracketedContent12603);
            comma508=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma508.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, bracketedContent1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContent1"

    public static class bracketedContent2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContent2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:374:1: bracketedContent2 : lrb bracketedContentContents rrb ;
    public final ChemicalChunkerParser.bracketedContent2_return bracketedContent2() throws RecognitionException {
        ChemicalChunkerParser.bracketedContent2_return retval = new ChemicalChunkerParser.bracketedContent2_return();
        retval.start = input.LT(1);
        int bracketedContent2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb509 = null;

        ChemicalChunkerParser.bracketedContentContents_return bracketedContentContents510 = null;

        ChemicalChunkerParser.rrb_return rrb511 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:374:18: ( lrb bracketedContentContents rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:374:20: lrb bracketedContentContents rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedContent22609_static.FOLLOW_lrb_in_bracketedContent22609);
            lrb509=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb509.getTree());
            pushFollow(FOLLOW_bracketedContentContents_in_bracketedContent22611_static.FOLLOW_bracketedContentContents_in_bracketedContent22611);
            bracketedContentContents510=bracketedContentContents();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentContents510.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedContent22613_static.FOLLOW_rrb_in_bracketedContent22613);
            rrb511=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb511.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, bracketedContent2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContent2"

    public static class bracketedContent3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContent3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:1: bracketedContent3 : lsqb bracketedContentContents rsqb ;
    public final ChemicalChunkerParser.bracketedContent3_return bracketedContent3() throws RecognitionException {
        ChemicalChunkerParser.bracketedContent3_return retval = new ChemicalChunkerParser.bracketedContent3_return();
        retval.start = input.LT(1);
        int bracketedContent3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lsqb_return lsqb512 = null;

        ChemicalChunkerParser.bracketedContentContents_return bracketedContentContents513 = null;

        ChemicalChunkerParser.rsqb_return rsqb514 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:18: ( lsqb bracketedContentContents rsqb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:20: lsqb bracketedContentContents rsqb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lsqb_in_bracketedContent32619_static.FOLLOW_lsqb_in_bracketedContent32619);
            lsqb512=lsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb512.getTree());
            pushFollow(FOLLOW_bracketedContentContents_in_bracketedContent32621_static.FOLLOW_bracketedContentContents_in_bracketedContent32621);
            bracketedContentContents513=bracketedContentContents();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentContents513.getTree());
            pushFollow(FOLLOW_rsqb_in_bracketedContent32623_static.FOLLOW_rsqb_in_bracketedContent32623);
            rsqb514=rsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb514.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, bracketedContent3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContent3"

    public static class bracketedContentContents_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContentContents"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:1: bracketedContentContents : ( verb | noun | bracketedContent | md | percentsign | dash | inAll | ratio | conjunction | adj | colon | stop | numeric )+ ;
    public final ChemicalChunkerParser.bracketedContentContents_return bracketedContentContents() throws RecognitionException {
        ChemicalChunkerParser.bracketedContentContents_return retval = new ChemicalChunkerParser.bracketedContentContents_return();
        retval.start = input.LT(1);
        int bracketedContentContents_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.verb_return verb515 = null;

        ChemicalChunkerParser.noun_return noun516 = null;

        ChemicalChunkerParser.bracketedContent_return bracketedContent517 = null;

        ChemicalChunkerParser.md_return md518 = null;

        ChemicalChunkerParser.percentsign_return percentsign519 = null;

        ChemicalChunkerParser.dash_return dash520 = null;

        ChemicalChunkerParser.inAll_return inAll521 = null;

        ChemicalChunkerParser.ratio_return ratio522 = null;

        ChemicalChunkerParser.conjunction_return conjunction523 = null;

        ChemicalChunkerParser.adj_return adj524 = null;

        ChemicalChunkerParser.colon_return colon525 = null;

        ChemicalChunkerParser.stop_return stop526 = null;

        ChemicalChunkerParser.numeric_return numeric527 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:25: ( ( verb | noun | bracketedContent | md | percentsign | dash | inAll | ratio | conjunction | adj | colon | stop | numeric )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:27: ( verb | noun | bracketedContent | md | percentsign | dash | inAll | ratio | conjunction | adj | colon | stop | numeric )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:27: ( verb | noun | bracketedContent | md | percentsign | dash | inAll | ratio | conjunction | adj | colon | stop | numeric )+
            int cnt165=0;
            loop165:
            do {
                int alt165=14;
                alt165 = dfa165.predict(input);
                switch (alt165) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:28: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_bracketedContentContents2630_static.FOLLOW_verb_in_bracketedContentContents2630);
            	    verb515=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb515.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:33: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_bracketedContentContents2632_static.FOLLOW_noun_in_bracketedContentContents2632);
            	    noun516=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun516.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:38: bracketedContent
            	    {
            	    pushFollow(FOLLOW_bracketedContent_in_bracketedContentContents2634_static.FOLLOW_bracketedContent_in_bracketedContentContents2634);
            	    bracketedContent517=bracketedContent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContent517.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:55: md
            	    {
            	    pushFollow(FOLLOW_md_in_bracketedContentContents2636_static.FOLLOW_md_in_bracketedContentContents2636);
            	    md518=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md518.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:58: percentsign
            	    {
            	    pushFollow(FOLLOW_percentsign_in_bracketedContentContents2638_static.FOLLOW_percentsign_in_bracketedContentContents2638);
            	    percentsign519=percentsign();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, percentsign519.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:70: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_bracketedContentContents2640_static.FOLLOW_dash_in_bracketedContentContents2640);
            	    dash520=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash520.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:75: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_bracketedContentContents2642_static.FOLLOW_inAll_in_bracketedContentContents2642);
            	    inAll521=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll521.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:81: ratio
            	    {
            	    pushFollow(FOLLOW_ratio_in_bracketedContentContents2644_static.FOLLOW_ratio_in_bracketedContentContents2644);
            	    ratio522=ratio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio522.getTree());

            	    }
            	    break;
            	case 9 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:87: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_bracketedContentContents2646_static.FOLLOW_conjunction_in_bracketedContentContents2646);
            	    conjunction523=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction523.getTree());

            	    }
            	    break;
            	case 10 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:99: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_bracketedContentContents2648_static.FOLLOW_adj_in_bracketedContentContents2648);
            	    adj524=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj524.getTree());

            	    }
            	    break;
            	case 11 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:103: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_bracketedContentContents2650_static.FOLLOW_colon_in_bracketedContentContents2650);
            	    colon525=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon525.getTree());

            	    }
            	    break;
            	case 12 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:109: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_bracketedContentContents2652_static.FOLLOW_stop_in_bracketedContentContents2652);
            	    stop526=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop526.getTree());

            	    }
            	    break;
            	case 13 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:114: numeric
            	    {
            	    pushFollow(FOLLOW_numeric_in_bracketedContentContents2654_static.FOLLOW_numeric_in_bracketedContentContents2654);
            	    numeric527=numeric();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric527.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt165 >= 1 ) break loop165;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(165, input);
                        throw eee;
                }
                cnt165++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, bracketedContentContents_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContentContents"

    public static class bracketedContentInMol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContentInMol"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:1: bracketedContentInMol : ( ratio )? ( bracketedContentInMolStructure1 | bracketedContentInMolStructure2 | bracketedContentInMolStructure3 ) -> ^( MIXTURE ( ratio )? ( bracketedContentInMolStructure1 )? ( bracketedContentInMolStructure2 )? ( bracketedContentInMolStructure3 )? ) ;
    public final ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol() throws RecognitionException {
        ChemicalChunkerParser.bracketedContentInMol_return retval = new ChemicalChunkerParser.bracketedContentInMol_return();
        retval.start = input.LT(1);
        int bracketedContentInMol_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.ratio_return ratio528 = null;

        ChemicalChunkerParser.bracketedContentInMolStructure1_return bracketedContentInMolStructure1529 = null;

        ChemicalChunkerParser.bracketedContentInMolStructure2_return bracketedContentInMolStructure2530 = null;

        ChemicalChunkerParser.bracketedContentInMolStructure3_return bracketedContentInMolStructure3531 = null;


        RewriteRuleSubtreeStream stream_ratio=new RewriteRuleSubtreeStream(adaptor,"rule ratio");
        RewriteRuleSubtreeStream stream_bracketedContentInMolStructure1=new RewriteRuleSubtreeStream(adaptor,"rule bracketedContentInMolStructure1");
        RewriteRuleSubtreeStream stream_bracketedContentInMolStructure2=new RewriteRuleSubtreeStream(adaptor,"rule bracketedContentInMolStructure2");
        RewriteRuleSubtreeStream stream_bracketedContentInMolStructure3=new RewriteRuleSubtreeStream(adaptor,"rule bracketedContentInMolStructure3");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:22: ( ( ratio )? ( bracketedContentInMolStructure1 | bracketedContentInMolStructure2 | bracketedContentInMolStructure3 ) -> ^( MIXTURE ( ratio )? ( bracketedContentInMolStructure1 )? ( bracketedContentInMolStructure2 )? ( bracketedContentInMolStructure3 )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:24: ( ratio )? ( bracketedContentInMolStructure1 | bracketedContentInMolStructure2 | bracketedContentInMolStructure3 )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:24: ( ratio )?
            int alt166=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt166=1;
                    }
                    break;
            }

            switch (alt166) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: ratio
                    {
                    pushFollow(FOLLOW_ratio_in_bracketedContentInMol2663_static.FOLLOW_ratio_in_bracketedContentInMol2663);
                    ratio528=ratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ratio.add(ratio528.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:32: ( bracketedContentInMolStructure1 | bracketedContentInMolStructure2 | bracketedContentInMolStructure3 )
            int alt167=3;
            switch ( input.LA(1) ) {
            case 133:
                {
                alt167=1;
                }
                break;
            case 143:
                {
                alt167=2;
                }
                break;
            case 139:
                {
                alt167=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                throw nvae;
            }

            switch (alt167) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:33: bracketedContentInMolStructure1
                    {
                    pushFollow(FOLLOW_bracketedContentInMolStructure1_in_bracketedContentInMol2668_static.FOLLOW_bracketedContentInMolStructure1_in_bracketedContentInMol2668);
                    bracketedContentInMolStructure1529=bracketedContentInMolStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedContentInMolStructure1.add(bracketedContentInMolStructure1529.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:65: bracketedContentInMolStructure2
                    {
                    pushFollow(FOLLOW_bracketedContentInMolStructure2_in_bracketedContentInMol2670_static.FOLLOW_bracketedContentInMolStructure2_in_bracketedContentInMol2670);
                    bracketedContentInMolStructure2530=bracketedContentInMolStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedContentInMolStructure2.add(bracketedContentInMolStructure2530.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:97: bracketedContentInMolStructure3
                    {
                    pushFollow(FOLLOW_bracketedContentInMolStructure3_in_bracketedContentInMol2672_static.FOLLOW_bracketedContentInMolStructure3_in_bracketedContentInMol2672);
                    bracketedContentInMolStructure3531=bracketedContentInMolStructure3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedContentInMolStructure3.add(bracketedContentInMolStructure3531.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: ratio, bracketedContentInMolStructure2, bracketedContentInMolStructure3, bracketedContentInMolStructure1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 378:130: -> ^( MIXTURE ( ratio )? ( bracketedContentInMolStructure1 )? ( bracketedContentInMolStructure2 )? ( bracketedContentInMolStructure3 )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:133: ^( MIXTURE ( ratio )? ( bracketedContentInMolStructure1 )? ( bracketedContentInMolStructure2 )? ( bracketedContentInMolStructure3 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MIXTURE, "MIXTURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:143: ( ratio )?
                if ( stream_ratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_ratio.nextTree());

                }
                stream_ratio.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:150: ( bracketedContentInMolStructure1 )?
                if ( stream_bracketedContentInMolStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedContentInMolStructure1.nextTree());

                }
                stream_bracketedContentInMolStructure1.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:183: ( bracketedContentInMolStructure2 )?
                if ( stream_bracketedContentInMolStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedContentInMolStructure2.nextTree());

                }
                stream_bracketedContentInMolStructure2.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:216: ( bracketedContentInMolStructure3 )?
                if ( stream_bracketedContentInMolStructure3.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedContentInMolStructure3.nextTree());

                }
                stream_bracketedContentInMolStructure3.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, bracketedContentInMol_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContentInMol"

    public static class bracketedContentInMolStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContentInMolStructure1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:1: bracketedContentInMolStructure1 : comma lrb bracketedContentInMolContents rrb comma ;
    public final ChemicalChunkerParser.bracketedContentInMolStructure1_return bracketedContentInMolStructure1() throws RecognitionException {
        ChemicalChunkerParser.bracketedContentInMolStructure1_return retval = new ChemicalChunkerParser.bracketedContentInMolStructure1_return();
        retval.start = input.LT(1);
        int bracketedContentInMolStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma532 = null;

        ChemicalChunkerParser.lrb_return lrb533 = null;

        ChemicalChunkerParser.bracketedContentInMolContents_return bracketedContentInMolContents534 = null;

        ChemicalChunkerParser.rrb_return rrb535 = null;

        ChemicalChunkerParser.comma_return comma536 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:32: ( comma lrb bracketedContentInMolContents rrb comma )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:34: comma lrb bracketedContentInMolContents rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_bracketedContentInMolStructure12697_static.FOLLOW_comma_in_bracketedContentInMolStructure12697);
            comma532=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma532.getTree());
            pushFollow(FOLLOW_lrb_in_bracketedContentInMolStructure12699_static.FOLLOW_lrb_in_bracketedContentInMolStructure12699);
            lrb533=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb533.getTree());
            pushFollow(FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure12701_static.FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure12701);
            bracketedContentInMolContents534=bracketedContentInMolContents();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMolContents534.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedContentInMolStructure12703_static.FOLLOW_rrb_in_bracketedContentInMolStructure12703);
            rrb535=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb535.getTree());
            pushFollow(FOLLOW_comma_in_bracketedContentInMolStructure12705_static.FOLLOW_comma_in_bracketedContentInMolStructure12705);
            comma536=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma536.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, bracketedContentInMolStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContentInMolStructure1"

    public static class bracketedContentInMolStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContentInMolStructure2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:1: bracketedContentInMolStructure2 : lrb bracketedContentInMolContents rrb ;
    public final ChemicalChunkerParser.bracketedContentInMolStructure2_return bracketedContentInMolStructure2() throws RecognitionException {
        ChemicalChunkerParser.bracketedContentInMolStructure2_return retval = new ChemicalChunkerParser.bracketedContentInMolStructure2_return();
        retval.start = input.LT(1);
        int bracketedContentInMolStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb537 = null;

        ChemicalChunkerParser.bracketedContentInMolContents_return bracketedContentInMolContents538 = null;

        ChemicalChunkerParser.rrb_return rrb539 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:32: ( lrb bracketedContentInMolContents rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:34: lrb bracketedContentInMolContents rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedContentInMolStructure22711_static.FOLLOW_lrb_in_bracketedContentInMolStructure22711);
            lrb537=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb537.getTree());
            pushFollow(FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure22713_static.FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure22713);
            bracketedContentInMolContents538=bracketedContentInMolContents();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMolContents538.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedContentInMolStructure22715_static.FOLLOW_rrb_in_bracketedContentInMolStructure22715);
            rrb539=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb539.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, bracketedContentInMolStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContentInMolStructure2"

    public static class bracketedContentInMolStructure3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContentInMolStructure3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:1: bracketedContentInMolStructure3 : lsqb bracketedContentInMolContents rsqb ;
    public final ChemicalChunkerParser.bracketedContentInMolStructure3_return bracketedContentInMolStructure3() throws RecognitionException {
        ChemicalChunkerParser.bracketedContentInMolStructure3_return retval = new ChemicalChunkerParser.bracketedContentInMolStructure3_return();
        retval.start = input.LT(1);
        int bracketedContentInMolStructure3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lsqb_return lsqb540 = null;

        ChemicalChunkerParser.bracketedContentInMolContents_return bracketedContentInMolContents541 = null;

        ChemicalChunkerParser.rsqb_return rsqb542 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:32: ( lsqb bracketedContentInMolContents rsqb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:34: lsqb bracketedContentInMolContents rsqb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lsqb_in_bracketedContentInMolStructure32721_static.FOLLOW_lsqb_in_bracketedContentInMolStructure32721);
            lsqb540=lsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb540.getTree());
            pushFollow(FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure32723_static.FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure32723);
            bracketedContentInMolContents541=bracketedContentInMolContents();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMolContents541.getTree());
            pushFollow(FOLLOW_rsqb_in_bracketedContentInMolStructure32725_static.FOLLOW_rsqb_in_bracketedContentInMolStructure32725);
            rsqb542=rsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb542.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, bracketedContentInMolStructure3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContentInMolStructure3"

    public static class bracketedContentInMolContents_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContentInMolContents"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:1: bracketedContentInMolContents : ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | numberCompoundReference ( comma | colon | {...}? stop ) | cd | md | percentsign | dash | inAll | comma | adj | colon | stop | noun | bracketedContentInMol ) ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | cd | md | percentsign | dash | inAll | conjunction | adj | colon | stop | noun | bracketedContentInMol )* ;
    public final ChemicalChunkerParser.bracketedContentInMolContents_return bracketedContentInMolContents() throws RecognitionException {
        ChemicalChunkerParser.bracketedContentInMolContents_return retval = new ChemicalChunkerParser.bracketedContentInMolContents_return();
        retval.start = input.LT(1);
        int bracketedContentInMolContents_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.verb_return verb543 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node544 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound545 = null;

        ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return alphanumericOrIdentifierCompoundReference546 = null;

        ChemicalChunkerParser.ratio_return ratio547 = null;

        ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference548 = null;

        ChemicalChunkerParser.comma_return comma549 = null;

        ChemicalChunkerParser.colon_return colon550 = null;

        ChemicalChunkerParser.stop_return stop551 = null;

        ChemicalChunkerParser.cd_return cd552 = null;

        ChemicalChunkerParser.md_return md553 = null;

        ChemicalChunkerParser.percentsign_return percentsign554 = null;

        ChemicalChunkerParser.dash_return dash555 = null;

        ChemicalChunkerParser.inAll_return inAll556 = null;

        ChemicalChunkerParser.comma_return comma557 = null;

        ChemicalChunkerParser.adj_return adj558 = null;

        ChemicalChunkerParser.colon_return colon559 = null;

        ChemicalChunkerParser.stop_return stop560 = null;

        ChemicalChunkerParser.noun_return noun561 = null;

        ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol562 = null;

        ChemicalChunkerParser.verb_return verb563 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node564 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound565 = null;

        ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return alphanumericOrIdentifierCompoundReference566 = null;

        ChemicalChunkerParser.ratio_return ratio567 = null;

        ChemicalChunkerParser.cd_return cd568 = null;

        ChemicalChunkerParser.md_return md569 = null;

        ChemicalChunkerParser.percentsign_return percentsign570 = null;

        ChemicalChunkerParser.dash_return dash571 = null;

        ChemicalChunkerParser.inAll_return inAll572 = null;

        ChemicalChunkerParser.conjunction_return conjunction573 = null;

        ChemicalChunkerParser.adj_return adj574 = null;

        ChemicalChunkerParser.colon_return colon575 = null;

        ChemicalChunkerParser.stop_return stop576 = null;

        ChemicalChunkerParser.noun_return noun577 = null;

        ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol578 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:30: ( ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | numberCompoundReference ( comma | colon | {...}? stop ) | cd | md | percentsign | dash | inAll | comma | adj | colon | stop | noun | bracketedContentInMol ) ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | cd | md | percentsign | dash | inAll | conjunction | adj | colon | stop | noun | bracketedContentInMol )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:32: ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | numberCompoundReference ( comma | colon | {...}? stop ) | cd | md | percentsign | dash | inAll | comma | adj | colon | stop | noun | bracketedContentInMol ) ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | cd | md | percentsign | dash | inAll | conjunction | adj | colon | stop | noun | bracketedContentInMol )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:32: ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | numberCompoundReference ( comma | colon | {...}? stop ) | cd | md | percentsign | dash | inAll | comma | adj | colon | stop | noun | bracketedContentInMol )
            int alt169=17;
            alt169 = dfa169.predict(input);
            switch (alt169) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:33: verb
                    {
                    pushFollow(FOLLOW_verb_in_bracketedContentInMolContents2732_static.FOLLOW_verb_in_bracketedContentInMolContents2732);
                    verb543=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb543.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:38: quantity2Node
                    {
                    pushFollow(FOLLOW_quantity2Node_in_bracketedContentInMolContents2734_static.FOLLOW_quantity2Node_in_bracketedContentInMolContents2734);
                    quantity2Node544=quantity2Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node544.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:52: oscarCompound
                    {
                    pushFollow(FOLLOW_oscarCompound_in_bracketedContentInMolContents2736_static.FOLLOW_oscarCompound_in_bracketedContentInMolContents2736);
                    oscarCompound545=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound545.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:66: alphanumericOrIdentifierCompoundReference
                    {
                    pushFollow(FOLLOW_alphanumericOrIdentifierCompoundReference_in_bracketedContentInMolContents2738_static.FOLLOW_alphanumericOrIdentifierCompoundReference_in_bracketedContentInMolContents2738);
                    alphanumericOrIdentifierCompoundReference546=alphanumericOrIdentifierCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alphanumericOrIdentifierCompoundReference546.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:108: ratio
                    {
                    pushFollow(FOLLOW_ratio_in_bracketedContentInMolContents2740_static.FOLLOW_ratio_in_bracketedContentInMolContents2740);
                    ratio547=ratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio547.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:114: numberCompoundReference ( comma | colon | {...}? stop )
                    {
                    pushFollow(FOLLOW_numberCompoundReference_in_bracketedContentInMolContents2742_static.FOLLOW_numberCompoundReference_in_bracketedContentInMolContents2742);
                    numberCompoundReference548=numberCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberCompoundReference548.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:138: ( comma | colon | {...}? stop )
                    int alt168=3;
                    switch ( input.LA(1) ) {
                    case 133:
                        {
                        alt168=1;
                        }
                        break;
                    case 132:
                        {
                        alt168=2;
                        }
                        break;
                    case 137:
                        {
                        alt168=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 168, 0, input);

                        throw nvae;
                    }

                    switch (alt168) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:139: comma
                            {
                            pushFollow(FOLLOW_comma_in_bracketedContentInMolContents2745_static.FOLLOW_comma_in_bracketedContentInMolContents2745);
                            comma549=comma();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma549.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:147: colon
                            {
                            pushFollow(FOLLOW_colon_in_bracketedContentInMolContents2749_static.FOLLOW_colon_in_bracketedContentInMolContents2749);
                            colon550=colon();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, colon550.getTree());

                            }
                            break;
                        case 3 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:155: {...}? stop
                            {
                            if ( !((nextIsSemiColon(input))) ) {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                throw new FailedPredicateException(input, "bracketedContentInMolContents", "nextIsSemiColon(input)");
                            }
                            pushFollow(FOLLOW_stop_in_bracketedContentInMolContents2755_static.FOLLOW_stop_in_bracketedContentInMolContents2755);
                            stop551=stop();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, stop551.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:187: cd
                    {
                    pushFollow(FOLLOW_cd_in_bracketedContentInMolContents2758_static.FOLLOW_cd_in_bracketedContentInMolContents2758);
                    cd552=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd552.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:190: md
                    {
                    pushFollow(FOLLOW_md_in_bracketedContentInMolContents2760_static.FOLLOW_md_in_bracketedContentInMolContents2760);
                    md553=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md553.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:193: percentsign
                    {
                    pushFollow(FOLLOW_percentsign_in_bracketedContentInMolContents2762_static.FOLLOW_percentsign_in_bracketedContentInMolContents2762);
                    percentsign554=percentsign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percentsign554.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:205: dash
                    {
                    pushFollow(FOLLOW_dash_in_bracketedContentInMolContents2764_static.FOLLOW_dash_in_bracketedContentInMolContents2764);
                    dash555=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash555.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:210: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_bracketedContentInMolContents2766_static.FOLLOW_inAll_in_bracketedContentInMolContents2766);
                    inAll556=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll556.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:216: comma
                    {
                    pushFollow(FOLLOW_comma_in_bracketedContentInMolContents2768_static.FOLLOW_comma_in_bracketedContentInMolContents2768);
                    comma557=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma557.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:222: adj
                    {
                    pushFollow(FOLLOW_adj_in_bracketedContentInMolContents2770_static.FOLLOW_adj_in_bracketedContentInMolContents2770);
                    adj558=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj558.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:226: colon
                    {
                    pushFollow(FOLLOW_colon_in_bracketedContentInMolContents2772_static.FOLLOW_colon_in_bracketedContentInMolContents2772);
                    colon559=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon559.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:232: stop
                    {
                    pushFollow(FOLLOW_stop_in_bracketedContentInMolContents2774_static.FOLLOW_stop_in_bracketedContentInMolContents2774);
                    stop560=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop560.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:237: noun
                    {
                    pushFollow(FOLLOW_noun_in_bracketedContentInMolContents2776_static.FOLLOW_noun_in_bracketedContentInMolContents2776);
                    noun561=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun561.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:242: bracketedContentInMol
                    {
                    pushFollow(FOLLOW_bracketedContentInMol_in_bracketedContentInMolContents2778_static.FOLLOW_bracketedContentInMol_in_bracketedContentInMolContents2778);
                    bracketedContentInMol562=bracketedContentInMol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMol562.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:265: ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | cd | md | percentsign | dash | inAll | conjunction | adj | colon | stop | noun | bracketedContentInMol )*
            loop170:
            do {
                int alt170=17;
                alt170 = dfa170.predict(input);
                switch (alt170) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:266: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_bracketedContentInMolContents2782_static.FOLLOW_verb_in_bracketedContentInMolContents2782);
            	    verb563=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb563.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:271: quantity2Node
            	    {
            	    pushFollow(FOLLOW_quantity2Node_in_bracketedContentInMolContents2784_static.FOLLOW_quantity2Node_in_bracketedContentInMolContents2784);
            	    quantity2Node564=quantity2Node();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node564.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:285: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_bracketedContentInMolContents2786_static.FOLLOW_oscarCompound_in_bracketedContentInMolContents2786);
            	    oscarCompound565=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound565.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:299: alphanumericOrIdentifierCompoundReference
            	    {
            	    pushFollow(FOLLOW_alphanumericOrIdentifierCompoundReference_in_bracketedContentInMolContents2788_static.FOLLOW_alphanumericOrIdentifierCompoundReference_in_bracketedContentInMolContents2788);
            	    alphanumericOrIdentifierCompoundReference566=alphanumericOrIdentifierCompoundReference();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, alphanumericOrIdentifierCompoundReference566.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:341: ratio
            	    {
            	    pushFollow(FOLLOW_ratio_in_bracketedContentInMolContents2790_static.FOLLOW_ratio_in_bracketedContentInMolContents2790);
            	    ratio567=ratio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio567.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:347: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_bracketedContentInMolContents2792_static.FOLLOW_cd_in_bracketedContentInMolContents2792);
            	    cd568=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd568.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:350: md
            	    {
            	    pushFollow(FOLLOW_md_in_bracketedContentInMolContents2794_static.FOLLOW_md_in_bracketedContentInMolContents2794);
            	    md569=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md569.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:353: percentsign
            	    {
            	    pushFollow(FOLLOW_percentsign_in_bracketedContentInMolContents2796_static.FOLLOW_percentsign_in_bracketedContentInMolContents2796);
            	    percentsign570=percentsign();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, percentsign570.getTree());

            	    }
            	    break;
            	case 9 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:365: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_bracketedContentInMolContents2798_static.FOLLOW_dash_in_bracketedContentInMolContents2798);
            	    dash571=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash571.getTree());

            	    }
            	    break;
            	case 10 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:370: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_bracketedContentInMolContents2800_static.FOLLOW_inAll_in_bracketedContentInMolContents2800);
            	    inAll572=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll572.getTree());

            	    }
            	    break;
            	case 11 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:376: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_bracketedContentInMolContents2802_static.FOLLOW_conjunction_in_bracketedContentInMolContents2802);
            	    conjunction573=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction573.getTree());

            	    }
            	    break;
            	case 12 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:388: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_bracketedContentInMolContents2804_static.FOLLOW_adj_in_bracketedContentInMolContents2804);
            	    adj574=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj574.getTree());

            	    }
            	    break;
            	case 13 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:392: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_bracketedContentInMolContents2806_static.FOLLOW_colon_in_bracketedContentInMolContents2806);
            	    colon575=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon575.getTree());

            	    }
            	    break;
            	case 14 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:398: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_bracketedContentInMolContents2808_static.FOLLOW_stop_in_bracketedContentInMolContents2808);
            	    stop576=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop576.getTree());

            	    }
            	    break;
            	case 15 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:403: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_bracketedContentInMolContents2810_static.FOLLOW_noun_in_bracketedContentInMolContents2810);
            	    noun577=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun577.getTree());

            	    }
            	    break;
            	case 16 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:408: bracketedContentInMol
            	    {
            	    pushFollow(FOLLOW_bracketedContentInMol_in_bracketedContentInMolContents2812_static.FOLLOW_bracketedContentInMol_in_bracketedContentInMolContents2812);
            	    bracketedContentInMol578=bracketedContentInMol();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMol578.getTree());

            	    }
            	    break;

            	default :
            	    break loop170;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, bracketedContentInMolContents_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContentInMolContents"

    public static class fromProcedure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fromProcedure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:1: fromProcedure : ( infrom | {...}? inof | {...}? ( vbyield | vbsynthesize ) ( inin | inby | infrom ) ) procedureNode ;
    public final ChemicalChunkerParser.fromProcedure_return fromProcedure() throws RecognitionException {
        ChemicalChunkerParser.fromProcedure_return retval = new ChemicalChunkerParser.fromProcedure_return();
        retval.start = input.LT(1);
        int fromProcedure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.infrom_return infrom579 = null;

        ChemicalChunkerParser.inof_return inof580 = null;

        ChemicalChunkerParser.vbyield_return vbyield581 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize582 = null;

        ChemicalChunkerParser.inin_return inin583 = null;

        ChemicalChunkerParser.inby_return inby584 = null;

        ChemicalChunkerParser.infrom_return infrom585 = null;

        ChemicalChunkerParser.procedureNode_return procedureNode586 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:14: ( ( infrom | {...}? inof | {...}? ( vbyield | vbsynthesize ) ( inin | inby | infrom ) ) procedureNode )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:16: ( infrom | {...}? inof | {...}? ( vbyield | vbsynthesize ) ( inin | inby | infrom ) ) procedureNode
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:16: ( infrom | {...}? inof | {...}? ( vbyield | vbsynthesize ) ( inin | inby | infrom ) )
            int alt173=3;
            switch ( input.LA(1) ) {
            case 59:
                {
                alt173=1;
                }
                break;
            case 56:
                {
                alt173=2;
                }
                break;
            case 125:
            case 129:
                {
                alt173=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 173, 0, input);

                throw nvae;
            }

            switch (alt173) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:17: infrom
                    {
                    pushFollow(FOLLOW_infrom_in_fromProcedure2823_static.FOLLOW_infrom_in_fromProcedure2823);
                    infrom579=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom579.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:26: {...}? inof
                    {
                    if ( !((precededByProduct(input))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "fromProcedure", "precededByProduct(input)");
                    }
                    pushFollow(FOLLOW_inof_in_fromProcedure2829_static.FOLLOW_inof_in_fromProcedure2829);
                    inof580=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof580.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:61: {...}? ( vbyield | vbsynthesize ) ( inin | inby | infrom )
                    {
                    if ( !((suitableVbYieldOrSynthesizeForReference(input))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "fromProcedure", "suitableVbYieldOrSynthesizeForReference(input)");
                    }
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:111: ( vbyield | vbsynthesize )
                    int alt171=2;
                    switch ( input.LA(1) ) {
                    case 129:
                        {
                        alt171=1;
                        }
                        break;
                    case 125:
                        {
                        alt171=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 171, 0, input);

                        throw nvae;
                    }

                    switch (alt171) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:112: vbyield
                            {
                            pushFollow(FOLLOW_vbyield_in_fromProcedure2836_static.FOLLOW_vbyield_in_fromProcedure2836);
                            vbyield581=vbyield();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield581.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:120: vbsynthesize
                            {
                            pushFollow(FOLLOW_vbsynthesize_in_fromProcedure2838_static.FOLLOW_vbsynthesize_in_fromProcedure2838);
                            vbsynthesize582=vbsynthesize();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize582.getTree());

                            }
                            break;

                    }

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:134: ( inin | inby | infrom )
                    int alt172=3;
                    switch ( input.LA(1) ) {
                    case 50:
                        {
                        alt172=1;
                        }
                        break;
                    case 54:
                        {
                        alt172=2;
                        }
                        break;
                    case 59:
                        {
                        alt172=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 172, 0, input);

                        throw nvae;
                    }

                    switch (alt172) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:135: inin
                            {
                            pushFollow(FOLLOW_inin_in_fromProcedure2842_static.FOLLOW_inin_in_fromProcedure2842);
                            inin583=inin();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, inin583.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:140: inby
                            {
                            pushFollow(FOLLOW_inby_in_fromProcedure2844_static.FOLLOW_inby_in_fromProcedure2844);
                            inby584=inby();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, inby584.getTree());

                            }
                            break;
                        case 3 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:145: infrom
                            {
                            pushFollow(FOLLOW_infrom_in_fromProcedure2846_static.FOLLOW_infrom_in_fromProcedure2846);
                            infrom585=infrom();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom585.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_procedureNode_in_fromProcedure2850_static.FOLLOW_procedureNode_in_fromProcedure2850);
            procedureNode586=procedureNode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureNode586.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, fromProcedure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fromProcedure"

    public static class procedureNode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedureNode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:1: procedureNode : method -> ^( PROCEDURE method ) ;
    public final ChemicalChunkerParser.procedureNode_return procedureNode() throws RecognitionException {
        ChemicalChunkerParser.procedureNode_return retval = new ChemicalChunkerParser.procedureNode_return();
        retval.start = input.LT(1);
        int procedureNode_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.method_return method587 = null;


        RewriteRuleSubtreeStream stream_method=new RewriteRuleSubtreeStream(adaptor,"rule method");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:14: ( method -> ^( PROCEDURE method ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:16: method
            {
            pushFollow(FOLLOW_method_in_procedureNode2857_static.FOLLOW_method_in_procedureNode2857);
            method587=method();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method.add(method587.getTree());


            // AST REWRITE
            // elements: method
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 386:23: -> ^( PROCEDURE method )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:26: ^( PROCEDURE method )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PROCEDURE, "PROCEDURE"), root_1);

                adaptor.addChild(root_1, stream_method.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, procedureNode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedureNode"

    public static class method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "method"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:1: method : ( ( nngeneral | nn )? nnmethod ( allIdentifierTypes )? | nnexample allIdentifierTypes ) ( ( comma | colon | inof | infrom )? submethod | lrb submethod rrb )* ;
    public final ChemicalChunkerParser.method_return method() throws RecognitionException {
        ChemicalChunkerParser.method_return retval = new ChemicalChunkerParser.method_return();
        retval.start = input.LT(1);
        int method_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral588 = null;

        ChemicalChunkerParser.nn_return nn589 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod590 = null;

        ChemicalChunkerParser.allIdentifierTypes_return allIdentifierTypes591 = null;

        ChemicalChunkerParser.nnexample_return nnexample592 = null;

        ChemicalChunkerParser.allIdentifierTypes_return allIdentifierTypes593 = null;

        ChemicalChunkerParser.comma_return comma594 = null;

        ChemicalChunkerParser.colon_return colon595 = null;

        ChemicalChunkerParser.inof_return inof596 = null;

        ChemicalChunkerParser.infrom_return infrom597 = null;

        ChemicalChunkerParser.submethod_return submethod598 = null;

        ChemicalChunkerParser.lrb_return lrb599 = null;

        ChemicalChunkerParser.submethod_return submethod600 = null;

        ChemicalChunkerParser.rrb_return rrb601 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:7: ( ( ( nngeneral | nn )? nnmethod ( allIdentifierTypes )? | nnexample allIdentifierTypes ) ( ( comma | colon | inof | infrom )? submethod | lrb submethod rrb )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:5: ( ( nngeneral | nn )? nnmethod ( allIdentifierTypes )? | nnexample allIdentifierTypes ) ( ( comma | colon | inof | infrom )? submethod | lrb submethod rrb )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:5: ( ( nngeneral | nn )? nnmethod ( allIdentifierTypes )? | nnexample allIdentifierTypes )
            int alt176=2;
            switch ( input.LA(1) ) {
            case 75:
            case 76:
            case 156:
                {
                alt176=1;
                }
                break;
            case 83:
                {
                alt176=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 176, 0, input);

                throw nvae;
            }

            switch (alt176) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:6: ( nngeneral | nn )? nnmethod ( allIdentifierTypes )?
                    {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:6: ( nngeneral | nn )?
                    int alt174=3;
                    switch ( input.LA(1) ) {
                        case 75:
                            {
                            alt174=1;
                            }
                            break;
                        case 156:
                            {
                            alt174=2;
                            }
                            break;
                    }

                    switch (alt174) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:7: nngeneral
                            {
                            pushFollow(FOLLOW_nngeneral_in_method2878_static.FOLLOW_nngeneral_in_method2878);
                            nngeneral588=nngeneral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral588.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:17: nn
                            {
                            pushFollow(FOLLOW_nn_in_method2880_static.FOLLOW_nn_in_method2880);
                            nn589=nn();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nn589.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_nnmethod_in_method2884_static.FOLLOW_nnmethod_in_method2884);
                    nnmethod590=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod590.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:31: ( allIdentifierTypes )?
                    int alt175=2;
                    alt175 = dfa175.predict(input);
                    switch (alt175) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: allIdentifierTypes
                            {
                            pushFollow(FOLLOW_allIdentifierTypes_in_method2886_static.FOLLOW_allIdentifierTypes_in_method2886);
                            allIdentifierTypes591=allIdentifierTypes();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, allIdentifierTypes591.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:53: nnexample allIdentifierTypes
                    {
                    pushFollow(FOLLOW_nnexample_in_method2891_static.FOLLOW_nnexample_in_method2891);
                    nnexample592=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample592.getTree());
                    pushFollow(FOLLOW_allIdentifierTypes_in_method2893_static.FOLLOW_allIdentifierTypes_in_method2893);
                    allIdentifierTypes593=allIdentifierTypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, allIdentifierTypes593.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:83: ( ( comma | colon | inof | infrom )? submethod | lrb submethod rrb )*
            loop178:
            do {
                int alt178=3;
                alt178 = dfa178.predict(input);
                switch (alt178) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:85: ( comma | colon | inof | infrom )? submethod
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:85: ( comma | colon | inof | infrom )?
            	    int alt177=5;
            	    switch ( input.LA(1) ) {
            	        case 133:
            	            {
            	            alt177=1;
            	            }
            	            break;
            	        case 132:
            	            {
            	            alt177=2;
            	            }
            	            break;
            	        case 56:
            	            {
            	            alt177=3;
            	            }
            	            break;
            	        case 59:
            	            {
            	            alt177=4;
            	            }
            	            break;
            	    }

            	    switch (alt177) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:86: comma
            	            {
            	            pushFollow(FOLLOW_comma_in_method2899_static.FOLLOW_comma_in_method2899);
            	            comma594=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma594.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:93: colon
            	            {
            	            pushFollow(FOLLOW_colon_in_method2902_static.FOLLOW_colon_in_method2902);
            	            colon595=colon();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, colon595.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:100: inof
            	            {
            	            pushFollow(FOLLOW_inof_in_method2905_static.FOLLOW_inof_in_method2905);
            	            inof596=inof();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof596.getTree());

            	            }
            	            break;
            	        case 4 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:107: infrom
            	            {
            	            pushFollow(FOLLOW_infrom_in_method2909_static.FOLLOW_infrom_in_method2909);
            	            infrom597=infrom();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom597.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_submethod_in_method2913_static.FOLLOW_submethod_in_method2913);
            	    submethod598=submethod();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, submethod598.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:128: lrb submethod rrb
            	    {
            	    pushFollow(FOLLOW_lrb_in_method2917_static.FOLLOW_lrb_in_method2917);
            	    lrb599=lrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb599.getTree());
            	    pushFollow(FOLLOW_submethod_in_method2919_static.FOLLOW_submethod_in_method2919);
            	    submethod600=submethod();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, submethod600.getTree());
            	    pushFollow(FOLLOW_rrb_in_method2921_static.FOLLOW_rrb_in_method2921);
            	    rrb601=rrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb601.getTree());

            	    }
            	    break;

            	default :
            	    break loop178;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, method_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "method"

    public static class submethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "submethod"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:1: submethod : ( nnmethod | nnexample ) allIdentifierTypes ;
    public final ChemicalChunkerParser.submethod_return submethod() throws RecognitionException {
        ChemicalChunkerParser.submethod_return retval = new ChemicalChunkerParser.submethod_return();
        retval.start = input.LT(1);
        int submethod_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod602 = null;

        ChemicalChunkerParser.nnexample_return nnexample603 = null;

        ChemicalChunkerParser.allIdentifierTypes_return allIdentifierTypes604 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:11: ( ( nnmethod | nnexample ) allIdentifierTypes )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:13: ( nnmethod | nnexample ) allIdentifierTypes
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:13: ( nnmethod | nnexample )
            int alt179=2;
            switch ( input.LA(1) ) {
            case 76:
                {
                alt179=1;
                }
                break;
            case 83:
                {
                alt179=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 179, 0, input);

                throw nvae;
            }

            switch (alt179) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:14: nnmethod
                    {
                    pushFollow(FOLLOW_nnmethod_in_submethod2932_static.FOLLOW_nnmethod_in_submethod2932);
                    nnmethod602=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod602.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:23: nnexample
                    {
                    pushFollow(FOLLOW_nnexample_in_submethod2934_static.FOLLOW_nnexample_in_submethod2934);
                    nnexample603=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample603.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_allIdentifierTypes_in_submethod2937_static.FOLLOW_allIdentifierTypes_in_submethod2937);
            allIdentifierTypes604=allIdentifierTypes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, allIdentifierTypes604.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, submethod_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "submethod"

    public static class referenceToExampleCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "referenceToExampleCompound"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:1: referenceToExampleCompound : nnexample allIdentifierTypes -> ^( REFERENCETOCOMPOUND nnexample allIdentifierTypes ) ;
    public final ChemicalChunkerParser.referenceToExampleCompound_return referenceToExampleCompound() throws RecognitionException {
        ChemicalChunkerParser.referenceToExampleCompound_return retval = new ChemicalChunkerParser.referenceToExampleCompound_return();
        retval.start = input.LT(1);
        int referenceToExampleCompound_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnexample_return nnexample605 = null;

        ChemicalChunkerParser.allIdentifierTypes_return allIdentifierTypes606 = null;


        RewriteRuleSubtreeStream stream_allIdentifierTypes=new RewriteRuleSubtreeStream(adaptor,"rule allIdentifierTypes");
        RewriteRuleSubtreeStream stream_nnexample=new RewriteRuleSubtreeStream(adaptor,"rule nnexample");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:28: ( nnexample allIdentifierTypes -> ^( REFERENCETOCOMPOUND nnexample allIdentifierTypes ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:394:2: nnexample allIdentifierTypes
            {
            pushFollow(FOLLOW_nnexample_in_referenceToExampleCompound2946_static.FOLLOW_nnexample_in_referenceToExampleCompound2946);
            nnexample605=nnexample();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnexample.add(nnexample605.getTree());
            pushFollow(FOLLOW_allIdentifierTypes_in_referenceToExampleCompound2948_static.FOLLOW_allIdentifierTypes_in_referenceToExampleCompound2948);
            allIdentifierTypes606=allIdentifierTypes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_allIdentifierTypes.add(allIdentifierTypes606.getTree());


            // AST REWRITE
            // elements: nnexample, allIdentifierTypes
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 394:31: -> ^( REFERENCETOCOMPOUND nnexample allIdentifierTypes )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:394:34: ^( REFERENCETOCOMPOUND nnexample allIdentifierTypes )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                adaptor.addChild(root_1, stream_nnexample.nextTree());
                adaptor.addChild(root_1, stream_allIdentifierTypes.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, referenceToExampleCompound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "referenceToExampleCompound"

    public static class advAdj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "advAdj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:396:1: advAdj : ( adv | adj );
    public final ChemicalChunkerParser.advAdj_return advAdj() throws RecognitionException {
        ChemicalChunkerParser.advAdj_return retval = new ChemicalChunkerParser.advAdj_return();
        retval.start = input.LT(1);
        int advAdj_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv607 = null;

        ChemicalChunkerParser.adj_return adj608 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:2: ( adv | adj )
            int alt180=2;
            switch ( input.LA(1) ) {
            case 164:
            case 165:
            case 166:
            case 167:
                {
                alt180=1;
                }
                break;
            case 39:
            case 40:
            case 45:
            case 151:
            case 152:
            case 153:
                {
                alt180=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 180, 0, input);

                throw nvae;
            }

            switch (alt180) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:3: adv
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adv_in_advAdj2966_static.FOLLOW_adv_in_advAdj2966);
                    adv607=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv607.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:7: adj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adj_in_advAdj2968_static.FOLLOW_adj_in_advAdj2968);
                    adj608=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj608.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, advAdj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "advAdj"

    public static class range_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "range"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:1: range : numeric dash numeric ;
    public final ChemicalChunkerParser.range_return range() throws RecognitionException {
        ChemicalChunkerParser.range_return retval = new ChemicalChunkerParser.range_return();
        retval.start = input.LT(1);
        int range_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric609 = null;

        ChemicalChunkerParser.dash_return dash610 = null;

        ChemicalChunkerParser.numeric_return numeric611 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:6: ( numeric dash numeric )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:8: numeric dash numeric
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_numeric_in_range2975_static.FOLLOW_numeric_in_range2975);
            numeric609=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric609.getTree());
            pushFollow(FOLLOW_dash_in_range2977_static.FOLLOW_dash_in_range2977);
            dash610=dash();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash610.getTree());
            pushFollow(FOLLOW_numeric_in_range2979_static.FOLLOW_numeric_in_range2979);
            numeric611=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric611.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, range_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "range"

    public static class cycles_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycles"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:400:1: cycles : cycleStructure -> ^( CYCLES cycleStructure ) ;
    public final ChemicalChunkerParser.cycles_return cycles() throws RecognitionException {
        ChemicalChunkerParser.cycles_return retval = new ChemicalChunkerParser.cycles_return();
        retval.start = input.LT(1);
        int cycles_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cycleStructure_return cycleStructure612 = null;


        RewriteRuleSubtreeStream stream_cycleStructure=new RewriteRuleSubtreeStream(adaptor,"rule cycleStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:400:8: ( cycleStructure -> ^( CYCLES cycleStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:400:10: cycleStructure
            {
            pushFollow(FOLLOW_cycleStructure_in_cycles2986_static.FOLLOW_cycleStructure_in_cycles2986);
            cycleStructure612=cycleStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cycleStructure.add(cycleStructure612.getTree());


            // AST REWRITE
            // elements: cycleStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 400:25: -> ^( CYCLES cycleStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:400:28: ^( CYCLES cycleStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CYCLES, "CYCLES"), root_1);

                adaptor.addChild(root_1, stream_cycleStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, cycles_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cycles"

    public static class cycleStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycleStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:1: cycleStructure : cd ( dashNN )? nncycle ;
    public final ChemicalChunkerParser.cycleStructure_return cycleStructure() throws RecognitionException {
        ChemicalChunkerParser.cycleStructure_return retval = new ChemicalChunkerParser.cycleStructure_return();
        retval.start = input.LT(1);
        int cycleStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd613 = null;

        ChemicalChunkerParser.dashNN_return dashNN614 = null;

        ChemicalChunkerParser.nncycle_return nncycle615 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:16: ( cd ( dashNN )? nncycle )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:18: cd ( dashNN )? nncycle
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_cycleStructure3003_static.FOLLOW_cd_in_cycleStructure3003);
            cd613=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd613.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:21: ( dashNN )?
            int alt181=2;
            switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 146:
                case 151:
                case 152:
                case 153:
                case 156:
                    {
                    alt181=1;
                    }
                    break;
            }

            switch (alt181) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dashNN
                    {
                    pushFollow(FOLLOW_dashNN_in_cycleStructure3005_static.FOLLOW_dashNN_in_cycleStructure3005);
                    dashNN614=dashNN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dashNN614.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nncycle_in_cycleStructure3008_static.FOLLOW_nncycle_in_cycleStructure3008);
            nncycle615=nncycle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle615.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, cycleStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cycleStructure"

    public static class dashNN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dashNN"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:1: dashNN : ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* ;
    public final ChemicalChunkerParser.dashNN_return dashNN() throws RecognitionException {
        ChemicalChunkerParser.dashNN_return retval = new ChemicalChunkerParser.dashNN_return();
        retval.start = input.LT(1);
        int dashNN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj616 = null;

        ChemicalChunkerParser.nn_return nn617 = null;

        ChemicalChunkerParser.cd_return cd618 = null;

        ChemicalChunkerParser.dash_return dash619 = null;

        ChemicalChunkerParser.adj_return adj620 = null;

        ChemicalChunkerParser.nn_return nn621 = null;

        ChemicalChunkerParser.cd_return cd622 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:8: ( ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:10: ( adj | nn | cd ) ( dash ( adj | nn | cd ) )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:10: ( adj | nn | cd )
            int alt182=3;
            switch ( input.LA(1) ) {
            case 39:
            case 40:
            case 45:
            case 151:
            case 152:
            case 153:
                {
                alt182=1;
                }
                break;
            case 156:
                {
                alt182=2;
                }
                break;
            case 146:
                {
                alt182=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 182, 0, input);

                throw nvae;
            }

            switch (alt182) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:11: adj
                    {
                    pushFollow(FOLLOW_adj_in_dashNN3016_static.FOLLOW_adj_in_dashNN3016);
                    adj616=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj616.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:15: nn
                    {
                    pushFollow(FOLLOW_nn_in_dashNN3018_static.FOLLOW_nn_in_dashNN3018);
                    nn617=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn617.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:18: cd
                    {
                    pushFollow(FOLLOW_cd_in_dashNN3020_static.FOLLOW_cd_in_dashNN3020);
                    cd618=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd618.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:22: ( dash ( adj | nn | cd ) )*
            loop184:
            do {
                int alt184=2;
                switch ( input.LA(1) ) {
                case 136:
                    {
                    alt184=1;
                    }
                    break;

                }

                switch (alt184) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:23: dash ( adj | nn | cd )
            	    {
            	    pushFollow(FOLLOW_dash_in_dashNN3024_static.FOLLOW_dash_in_dashNN3024);
            	    dash619=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash619.getTree());
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:28: ( adj | nn | cd )
            	    int alt183=3;
            	    switch ( input.LA(1) ) {
            	    case 39:
            	    case 40:
            	    case 45:
            	    case 151:
            	    case 152:
            	    case 153:
            	        {
            	        alt183=1;
            	        }
            	        break;
            	    case 156:
            	        {
            	        alt183=2;
            	        }
            	        break;
            	    case 146:
            	        {
            	        alt183=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 183, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt183) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:29: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dashNN3027_static.FOLLOW_adj_in_dashNN3027);
            	            adj620=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj620.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:33: nn
            	            {
            	            pushFollow(FOLLOW_nn_in_dashNN3029_static.FOLLOW_nn_in_dashNN3029);
            	            nn621=nn();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nn621.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:36: cd
            	            {
            	            pushFollow(FOLLOW_cd_in_dashNN3031_static.FOLLOW_cd_in_dashNN3031);
            	            cd622=cd();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd622.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop184;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, dashNN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dashNN"

    public static class ratioOrBracketedRatio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ratioOrBracketedRatio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:404:1: ratioOrBracketedRatio : ( lrb ratio rrb | ratio );
    public final ChemicalChunkerParser.ratioOrBracketedRatio_return ratioOrBracketedRatio() throws RecognitionException {
        ChemicalChunkerParser.ratioOrBracketedRatio_return retval = new ChemicalChunkerParser.ratioOrBracketedRatio_return();
        retval.start = input.LT(1);
        int ratioOrBracketedRatio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb623 = null;

        ChemicalChunkerParser.ratio_return ratio624 = null;

        ChemicalChunkerParser.rrb_return rrb625 = null;

        ChemicalChunkerParser.ratio_return ratio626 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:404:23: ( lrb ratio rrb | ratio )
            int alt185=2;
            switch ( input.LA(1) ) {
            case 143:
                {
                alt185=1;
                }
                break;
            case 146:
                {
                alt185=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 185, 0, input);

                throw nvae;
            }

            switch (alt185) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:404:25: lrb ratio rrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_lrb_in_ratioOrBracketedRatio3042_static.FOLLOW_lrb_in_ratioOrBracketedRatio3042);
                    lrb623=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb623.getTree());
                    pushFollow(FOLLOW_ratio_in_ratioOrBracketedRatio3044_static.FOLLOW_ratio_in_ratioOrBracketedRatio3044);
                    ratio624=ratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio624.getTree());
                    pushFollow(FOLLOW_rrb_in_ratioOrBracketedRatio3046_static.FOLLOW_rrb_in_ratioOrBracketedRatio3046);
                    rrb625=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb625.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:404:41: ratio
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ratio_in_ratioOrBracketedRatio3050_static.FOLLOW_ratio_in_ratioOrBracketedRatio3050);
                    ratio626=ratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio626.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, ratioOrBracketedRatio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ratioOrBracketedRatio"

    public static class ratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ratio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:1: ratio : cdRatio -> ^( RATIO cdRatio ) ;
    public final ChemicalChunkerParser.ratio_return ratio() throws RecognitionException {
        ChemicalChunkerParser.ratio_return retval = new ChemicalChunkerParser.ratio_return();
        retval.start = input.LT(1);
        int ratio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cdRatio_return cdRatio627 = null;


        RewriteRuleSubtreeStream stream_cdRatio=new RewriteRuleSubtreeStream(adaptor,"rule cdRatio");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:7: ( cdRatio -> ^( RATIO cdRatio ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:9: cdRatio
            {
            pushFollow(FOLLOW_cdRatio_in_ratio3057_static.FOLLOW_cdRatio_in_ratio3057);
            cdRatio627=cdRatio();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cdRatio.add(cdRatio627.getTree());


            // AST REWRITE
            // elements: cdRatio
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 405:17: -> ^( RATIO cdRatio )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:20: ^( RATIO cdRatio )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RATIO, "RATIO"), root_1);

                adaptor.addChild(root_1, stream_cdRatio.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, ratio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ratio"

    public static class cdRatio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdRatio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:1: cdRatio : cd ( colon cd {...}?)+ ;
    public final ChemicalChunkerParser.cdRatio_return cdRatio() throws RecognitionException {
        ChemicalChunkerParser.cdRatio_return retval = new ChemicalChunkerParser.cdRatio_return();
        retval.start = input.LT(1);
        int cdRatio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd628 = null;

        ChemicalChunkerParser.colon_return colon629 = null;

        ChemicalChunkerParser.cd_return cd630 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:9: ( cd ( colon cd {...}?)+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:11: cd ( colon cd {...}?)+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_cdRatio3072_static.FOLLOW_cd_in_cdRatio3072);
            cd628=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd628.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:14: ( colon cd {...}?)+
            int cnt186=0;
            loop186:
            do {
                int alt186=2;
                switch ( input.LA(1) ) {
                case 132:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 146:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA186_5 = input.LA(5);

                                if ( (synpred462_ChemicalChunker()) ) {
                                    alt186=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt186) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:15: colon cd {...}?
            	    {
            	    pushFollow(FOLLOW_colon_in_cdRatio3075_static.FOLLOW_colon_in_cdRatio3075);
            	    colon629=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon629.getTree());
            	    pushFollow(FOLLOW_cd_in_cdRatio3077_static.FOLLOW_cd_in_cdRatio3077);
            	    cd630=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd630.getTree());
            	    if ( !((!followedByQuantityUnits(input))) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "cdRatio", "!followedByQuantityUnits(input)");
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt186 >= 1 ) break loop186;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(186, input);
                        throw eee;
                }
                cnt186++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, cdRatio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdRatio"

    public static class citation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citation"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:1: citation : ( citationStructure | comma citationContent comma );
    public final ChemicalChunkerParser.citation_return citation() throws RecognitionException {
        ChemicalChunkerParser.citation_return retval = new ChemicalChunkerParser.citation_return();
        retval.start = input.LT(1);
        int citation_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citationStructure_return citationStructure631 = null;

        ChemicalChunkerParser.comma_return comma632 = null;

        ChemicalChunkerParser.citationContent_return citationContent633 = null;

        ChemicalChunkerParser.comma_return comma634 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:9: ( citationStructure | comma citationContent comma )
            int alt187=2;
            switch ( input.LA(1) ) {
            case 143:
                {
                alt187=1;
                }
                break;
            case 133:
                {
                alt187=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 187, 0, input);

                throw nvae;
            }

            switch (alt187) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:12: citationStructure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_citationStructure_in_citation3089_static.FOLLOW_citationStructure_in_citation3089);
                    citationStructure631=citationStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citationStructure631.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:30: comma citationContent comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_citation3091_static.FOLLOW_comma_in_citation3091);
                    comma632=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma632.getTree());
                    pushFollow(FOLLOW_citationContent_in_citation3093_static.FOLLOW_citationContent_in_citation3093);
                    citationContent633=citationContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citationContent633.getTree());
                    pushFollow(FOLLOW_comma_in_citation3095_static.FOLLOW_comma_in_citation3095);
                    comma634=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma634.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, citation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citation"

    public static class citationStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:410:1: citationStructure : citationContent -> ^( CITATION citationContent ) ;
    public final ChemicalChunkerParser.citationStructure_return citationStructure() throws RecognitionException {
        ChemicalChunkerParser.citationStructure_return retval = new ChemicalChunkerParser.citationStructure_return();
        retval.start = input.LT(1);
        int citationStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citationContent_return citationContent635 = null;


        RewriteRuleSubtreeStream stream_citationContent=new RewriteRuleSubtreeStream(adaptor,"rule citationContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:410:18: ( citationContent -> ^( CITATION citationContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:410:21: citationContent
            {
            pushFollow(FOLLOW_citationContent_in_citationStructure3103_static.FOLLOW_citationContent_in_citationStructure3103);
            citationContent635=citationContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_citationContent.add(citationContent635.getTree());


            // AST REWRITE
            // elements: citationContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 410:37: -> ^( CITATION citationContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:410:40: ^( CITATION citationContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CITATION, "CITATION"), root_1);

                adaptor.addChild(root_1, stream_citationContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, citationStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citationStructure"

    public static class citationContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:1: citationContent : lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb ;
    public final ChemicalChunkerParser.citationContent_return citationContent() throws RecognitionException {
        ChemicalChunkerParser.citationContent_return retval = new ChemicalChunkerParser.citationContent_return();
        retval.start = input.LT(1);
        int citationContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb636 = null;

        ChemicalChunkerParser.nnp_return nnp637 = null;

        ChemicalChunkerParser.fw_return fw638 = null;

        ChemicalChunkerParser.cd_return cd639 = null;

        ChemicalChunkerParser.conjunction_return conjunction640 = null;

        ChemicalChunkerParser.nnp_return nnp641 = null;

        ChemicalChunkerParser.fw_return fw642 = null;

        ChemicalChunkerParser.cd_return cd643 = null;

        ChemicalChunkerParser.conjunction_return conjunction644 = null;

        ChemicalChunkerParser.rrb_return rrb645 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:16: ( lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:20: lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_citationContent3119_static.FOLLOW_lrb_in_citationContent3119);
            lrb636=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb636.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:24: ( nnp | fw | cd | conjunction )
            int alt188=4;
            switch ( input.LA(1) ) {
            case 158:
                {
                alt188=1;
                }
                break;
            case 149:
                {
                alt188=2;
                }
                break;
            case 146:
                {
                alt188=3;
                }
                break;
            case 133:
            case 145:
                {
                alt188=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 188, 0, input);

                throw nvae;
            }

            switch (alt188) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:25: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_citationContent3122_static.FOLLOW_nnp_in_citationContent3122);
                    nnp637=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp637.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:29: fw
                    {
                    pushFollow(FOLLOW_fw_in_citationContent3124_static.FOLLOW_fw_in_citationContent3124);
                    fw638=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw638.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:32: cd
                    {
                    pushFollow(FOLLOW_cd_in_citationContent3126_static.FOLLOW_cd_in_citationContent3126);
                    cd639=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd639.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:35: conjunction
                    {
                    pushFollow(FOLLOW_conjunction_in_citationContent3128_static.FOLLOW_conjunction_in_citationContent3128);
                    conjunction640=conjunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction640.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:48: ( nnp | fw | cd | conjunction )+
            int cnt189=0;
            loop189:
            do {
                int alt189=5;
                switch ( input.LA(1) ) {
                case 158:
                    {
                    alt189=1;
                    }
                    break;
                case 149:
                    {
                    alt189=2;
                    }
                    break;
                case 146:
                    {
                    alt189=3;
                    }
                    break;
                case 133:
                case 145:
                    {
                    alt189=4;
                    }
                    break;

                }

                switch (alt189) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:49: nnp
            	    {
            	    pushFollow(FOLLOW_nnp_in_citationContent3132_static.FOLLOW_nnp_in_citationContent3132);
            	    nnp641=nnp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp641.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:53: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_citationContent3134_static.FOLLOW_fw_in_citationContent3134);
            	    fw642=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw642.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:56: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_citationContent3136_static.FOLLOW_cd_in_citationContent3136);
            	    cd643=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd643.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:59: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_citationContent3138_static.FOLLOW_conjunction_in_citationContent3138);
            	    conjunction644=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction644.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt189 >= 1 ) break loop189;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(189, input);
                        throw eee;
                }
                cnt189++;
            } while (true);

            pushFollow(FOLLOW_rrb_in_citationContent3142_static.FOLLOW_rrb_in_citationContent3142);
            rrb645=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb645.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, citationContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citationContent"

    public static class allIdentifierTypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "allIdentifierTypes"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:1: allIdentifierTypes : ( allIdentifierTypesOtherThanCD | cd {...}?);
    public final ChemicalChunkerParser.allIdentifierTypes_return allIdentifierTypes() throws RecognitionException {
        ChemicalChunkerParser.allIdentifierTypes_return retval = new ChemicalChunkerParser.allIdentifierTypes_return();
        retval.start = input.LT(1);
        int allIdentifierTypes_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.allIdentifierTypesOtherThanCD_return allIdentifierTypesOtherThanCD646 = null;

        ChemicalChunkerParser.cd_return cd647 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:20: ( allIdentifierTypesOtherThanCD | cd {...}?)
            int alt190=2;
            switch ( input.LA(1) ) {
            case 38:
            case 139:
            case 141:
            case 143:
                {
                alt190=1;
                }
                break;
            case 146:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    int LA190_3 = input.LA(3);

                    if ( (synpred471_ChemicalChunker()) ) {
                        alt190=1;
                    }
                    else if ( (true) ) {
                        alt190=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 190, 3, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 190, 2, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 190, 0, input);

                throw nvae;
            }

            switch (alt190) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:22: allIdentifierTypesOtherThanCD
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_allIdentifierTypesOtherThanCD_in_allIdentifierTypes3152_static.FOLLOW_allIdentifierTypesOtherThanCD_in_allIdentifierTypes3152);
                    allIdentifierTypesOtherThanCD646=allIdentifierTypesOtherThanCD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, allIdentifierTypesOtherThanCD646.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:54: cd {...}?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cd_in_allIdentifierTypes3156_static.FOLLOW_cd_in_allIdentifierTypes3156);
                    cd647=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd647.getTree());
                    if ( !((!cdHasRoleOtherThanIdentifier(input))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "allIdentifierTypes", "!cdHasRoleOtherThanIdentifier(input)");
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, allIdentifierTypes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "allIdentifierTypes"

    public static class allIdentifierTypesOtherThanCD_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "allIdentifierTypesOtherThanCD"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:1: allIdentifierTypesOtherThanCD : ( squareBracketedReference | identifierOrBracketedIdentifier | cdAlphanum | {...}? bracketedNumeric );
    public final ChemicalChunkerParser.allIdentifierTypesOtherThanCD_return allIdentifierTypesOtherThanCD() throws RecognitionException {
        ChemicalChunkerParser.allIdentifierTypesOtherThanCD_return retval = new ChemicalChunkerParser.allIdentifierTypesOtherThanCD_return();
        retval.start = input.LT(1);
        int allIdentifierTypesOtherThanCD_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference648 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier649 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum650 = null;

        ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric651 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:31: ( squareBracketedReference | identifierOrBracketedIdentifier | cdAlphanum | {...}? bracketedNumeric )
            int alt191=4;
            switch ( input.LA(1) ) {
            case 139:
                {
                alt191=1;
                }
                break;
            case 141:
            case 146:
                {
                alt191=2;
                }
                break;
            case 143:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 146:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 144:
                                {
                                alt191=4;
                                }
                                break;
                            case 141:
                                {
                                alt191=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 191, 8, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 191, 6, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 38:
                        {
                        alt191=4;
                        }
                        break;
                    case 141:
                        {
                        alt191=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 191, 5, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 191, 3, input);

                    throw nvae;
                }

                }
                break;
            case 38:
                {
                alt191=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 191, 0, input);

                throw nvae;
            }

            switch (alt191) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:33: squareBracketedReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_squareBracketedReference_in_allIdentifierTypesOtherThanCD3165_static.FOLLOW_squareBracketedReference_in_allIdentifierTypesOtherThanCD3165);
                    squareBracketedReference648=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, squareBracketedReference648.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:58: identifierOrBracketedIdentifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_allIdentifierTypesOtherThanCD3167_static.FOLLOW_identifierOrBracketedIdentifier_in_allIdentifierTypesOtherThanCD3167);
                    identifierOrBracketedIdentifier649=identifierOrBracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierOrBracketedIdentifier649.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:90: cdAlphanum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cdAlphanum_in_allIdentifierTypesOtherThanCD3169_static.FOLLOW_cdAlphanum_in_allIdentifierTypesOtherThanCD3169);
                    cdAlphanum650=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum650.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:101: {...}? bracketedNumeric
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !((notFollowedByBracketedYear(input))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "allIdentifierTypesOtherThanCD", "notFollowedByBracketedYear(input)");
                    }
                    pushFollow(FOLLOW_bracketedNumeric_in_allIdentifierTypesOtherThanCD3172_static.FOLLOW_bracketedNumeric_in_allIdentifierTypesOtherThanCD3172);
                    bracketedNumeric651=bracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedNumeric651.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, allIdentifierTypesOtherThanCD_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "allIdentifierTypesOtherThanCD"

    public static class numericOrBracketedNumeric_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericOrBracketedNumeric"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:416:1: numericOrBracketedNumeric : ( numeric | bracketedNumeric );
    public final ChemicalChunkerParser.numericOrBracketedNumeric_return numericOrBracketedNumeric() throws RecognitionException {
        ChemicalChunkerParser.numericOrBracketedNumeric_return retval = new ChemicalChunkerParser.numericOrBracketedNumeric_return();
        retval.start = input.LT(1);
        int numericOrBracketedNumeric_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric652 = null;

        ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric653 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:416:27: ( numeric | bracketedNumeric )
            int alt192=2;
            switch ( input.LA(1) ) {
            case 38:
            case 146:
                {
                alt192=1;
                }
                break;
            case 143:
                {
                alt192=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 192, 0, input);

                throw nvae;
            }

            switch (alt192) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:416:30: numeric
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_numeric_in_numericOrBracketedNumeric3180_static.FOLLOW_numeric_in_numericOrBracketedNumeric3180);
                    numeric652=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric652.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:416:40: bracketedNumeric
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric3184_static.FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric3184);
                    bracketedNumeric653=bracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedNumeric653.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, numericOrBracketedNumeric_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numericOrBracketedNumeric"

    public static class bracketedNumeric_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedNumeric"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:417:1: bracketedNumeric : lrb numeric rrb ;
    public final ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric() throws RecognitionException {
        ChemicalChunkerParser.bracketedNumeric_return retval = new ChemicalChunkerParser.bracketedNumeric_return();
        retval.start = input.LT(1);
        int bracketedNumeric_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb654 = null;

        ChemicalChunkerParser.numeric_return numeric655 = null;

        ChemicalChunkerParser.rrb_return rrb656 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:417:18: ( lrb numeric rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:417:21: lrb numeric rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedNumeric3192_static.FOLLOW_lrb_in_bracketedNumeric3192);
            lrb654=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb654.getTree());
            pushFollow(FOLLOW_numeric_in_bracketedNumeric3194_static.FOLLOW_numeric_in_bracketedNumeric3194);
            numeric655=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric655.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedNumeric3196_static.FOLLOW_rrb_in_bracketedNumeric3196);
            rrb656=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb656.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, bracketedNumeric_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedNumeric"

    public static class squareBracketedReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "squareBracketedReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:1: squareBracketedReference : lsqb numeric rsqb ;
    public final ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference() throws RecognitionException {
        ChemicalChunkerParser.squareBracketedReference_return retval = new ChemicalChunkerParser.squareBracketedReference_return();
        retval.start = input.LT(1);
        int squareBracketedReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lsqb_return lsqb657 = null;

        ChemicalChunkerParser.numeric_return numeric658 = null;

        ChemicalChunkerParser.rsqb_return rsqb659 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:26: ( lsqb numeric rsqb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:28: lsqb numeric rsqb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lsqb_in_squareBracketedReference3203_static.FOLLOW_lsqb_in_squareBracketedReference3203);
            lsqb657=lsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb657.getTree());
            pushFollow(FOLLOW_numeric_in_squareBracketedReference3205_static.FOLLOW_numeric_in_squareBracketedReference3205);
            numeric658=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric658.getTree());
            pushFollow(FOLLOW_rsqb_in_squareBracketedReference3207_static.FOLLOW_rsqb_in_squareBracketedReference3207);
            rsqb659=rsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb659.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, squareBracketedReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "squareBracketedReference"

    public static class identifierOrBracketedIdentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifierOrBracketedIdentifier"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:1: identifierOrBracketedIdentifier : ( ( cd )? nnidentifier | bracketedIdentifier );
    public final ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier() throws RecognitionException {
        ChemicalChunkerParser.identifierOrBracketedIdentifier_return retval = new ChemicalChunkerParser.identifierOrBracketedIdentifier_return();
        retval.start = input.LT(1);
        int identifierOrBracketedIdentifier_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd660 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier661 = null;

        ChemicalChunkerParser.bracketedIdentifier_return bracketedIdentifier662 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:33: ( ( cd )? nnidentifier | bracketedIdentifier )
            int alt194=2;
            switch ( input.LA(1) ) {
            case 141:
            case 146:
                {
                alt194=1;
                }
                break;
            case 143:
                {
                alt194=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 194, 0, input);

                throw nvae;
            }

            switch (alt194) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:35: ( cd )? nnidentifier
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:35: ( cd )?
                    int alt193=2;
                    switch ( input.LA(1) ) {
                        case 146:
                            {
                            alt193=1;
                            }
                            break;
                    }

                    switch (alt193) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                            {
                            pushFollow(FOLLOW_cd_in_identifierOrBracketedIdentifier3214_static.FOLLOW_cd_in_identifierOrBracketedIdentifier3214);
                            cd660=cd();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd660.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier3217_static.FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier3217);
                    nnidentifier661=nnidentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnidentifier661.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:54: bracketedIdentifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier3221_static.FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier3221);
                    bracketedIdentifier662=bracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedIdentifier662.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, identifierOrBracketedIdentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifierOrBracketedIdentifier"

    public static class bracketedIdentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedIdentifier"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:420:1: bracketedIdentifier : lrb ( cd )? nnidentifier rrb ;
    public final ChemicalChunkerParser.bracketedIdentifier_return bracketedIdentifier() throws RecognitionException {
        ChemicalChunkerParser.bracketedIdentifier_return retval = new ChemicalChunkerParser.bracketedIdentifier_return();
        retval.start = input.LT(1);
        int bracketedIdentifier_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb663 = null;

        ChemicalChunkerParser.cd_return cd664 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier665 = null;

        ChemicalChunkerParser.rrb_return rrb666 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:420:21: ( lrb ( cd )? nnidentifier rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:420:24: lrb ( cd )? nnidentifier rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedIdentifier3229_static.FOLLOW_lrb_in_bracketedIdentifier3229);
            lrb663=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb663.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:420:28: ( cd )?
            int alt195=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt195=1;
                    }
                    break;
            }

            switch (alt195) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_bracketedIdentifier3231_static.FOLLOW_cd_in_bracketedIdentifier3231);
                    cd664=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd664.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnidentifier_in_bracketedIdentifier3234_static.FOLLOW_nnidentifier_in_bracketedIdentifier3234);
            nnidentifier665=nnidentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnidentifier665.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedIdentifier3236_static.FOLLOW_rrb_in_bracketedIdentifier3236);
            rrb666=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb666.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, bracketedIdentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedIdentifier"

    public static class adj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:1: adj : ( jj | jjr | jjs | jjchem | oscarcj | oscarrn );
    public final ChemicalChunkerParser.adj_return adj() throws RecognitionException {
        ChemicalChunkerParser.adj_return retval = new ChemicalChunkerParser.adj_return();
        retval.start = input.LT(1);
        int adj_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj667 = null;

        ChemicalChunkerParser.jjr_return jjr668 = null;

        ChemicalChunkerParser.jjs_return jjs669 = null;

        ChemicalChunkerParser.jjchem_return jjchem670 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj671 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn672 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:5: ( jj | jjr | jjs | jjchem | oscarcj | oscarrn )
            int alt196=6;
            switch ( input.LA(1) ) {
            case 151:
                {
                alt196=1;
                }
                break;
            case 152:
                {
                alt196=2;
                }
                break;
            case 153:
                {
                alt196=3;
                }
                break;
            case 45:
                {
                alt196=4;
                }
                break;
            case 39:
                {
                alt196=5;
                }
                break;
            case 40:
                {
                alt196=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 196, 0, input);

                throw nvae;
            }

            switch (alt196) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:7: jj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jj_in_adj3244_static.FOLLOW_jj_in_adj3244);
                    jj667=jj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj667.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:10: jjr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjr_in_adj3246_static.FOLLOW_jjr_in_adj3246);
                    jjr668=jjr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjr668.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:14: jjs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjs_in_adj3248_static.FOLLOW_jjs_in_adj3248);
                    jjs669=jjs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjs669.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:18: jjchem
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjchem_in_adj3250_static.FOLLOW_jjchem_in_adj3250);
                    jjchem670=jjchem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem670.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:25: oscarcj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcj_in_adj3252_static.FOLLOW_oscarcj_in_adj3252);
                    oscarcj671=oscarcj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj671.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:33: oscarrn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarrn_in_adj3254_static.FOLLOW_oscarrn_in_adj3254);
                    oscarrn672=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn672.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, adj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "adj"

    public static class adv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adv"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:1: adv : ( rb | rbr | rp | rbs );
    public final ChemicalChunkerParser.adv_return adv() throws RecognitionException {
        ChemicalChunkerParser.adv_return retval = new ChemicalChunkerParser.adv_return();
        retval.start = input.LT(1);
        int adv_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.rb_return rb673 = null;

        ChemicalChunkerParser.rbr_return rbr674 = null;

        ChemicalChunkerParser.rp_return rp675 = null;

        ChemicalChunkerParser.rbs_return rbs676 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:5: ( rb | rbr | rp | rbs )
            int alt197=4;
            switch ( input.LA(1) ) {
            case 164:
                {
                alt197=1;
                }
                break;
            case 165:
                {
                alt197=2;
                }
                break;
            case 167:
                {
                alt197=3;
                }
                break;
            case 166:
                {
                alt197=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 197, 0, input);

                throw nvae;
            }

            switch (alt197) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:7: rb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rb_in_adv3261_static.FOLLOW_rb_in_adv3261);
                    rb673=rb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rb673.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:10: rbr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbr_in_adv3263_static.FOLLOW_rbr_in_adv3263);
                    rbr674=rbr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbr674.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:14: rp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rp_in_adv3265_static.FOLLOW_rp_in_adv3265);
                    rp675=rp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rp675.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:17: rbs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbs_in_adv3267_static.FOLLOW_rbs_in_adv3267);
                    rbs676=rbs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbs676.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, adv_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "adv"

    public static class clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "clause"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:1: clause : ( wdt | wp_poss | wrb | ex | pdt | wp );
    public final ChemicalChunkerParser.clause_return clause() throws RecognitionException {
        ChemicalChunkerParser.clause_return retval = new ChemicalChunkerParser.clause_return();
        retval.start = input.LT(1);
        int clause_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.wdt_return wdt677 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss678 = null;

        ChemicalChunkerParser.wrb_return wrb679 = null;

        ChemicalChunkerParser.ex_return ex680 = null;

        ChemicalChunkerParser.pdt_return pdt681 = null;

        ChemicalChunkerParser.wp_return wp682 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:8: ( wdt | wp_poss | wrb | ex | pdt | wp )
            int alt198=6;
            switch ( input.LA(1) ) {
            case 177:
                {
                alt198=1;
                }
                break;
            case 179:
                {
                alt198=2;
                }
                break;
            case 180:
                {
                alt198=3;
                }
                break;
            case 148:
                {
                alt198=4;
                }
                break;
            case 160:
                {
                alt198=5;
                }
                break;
            case 178:
                {
                alt198=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 198, 0, input);

                throw nvae;
            }

            switch (alt198) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:10: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wdt_in_clause3274_static.FOLLOW_wdt_in_clause3274);
                    wdt677=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt677.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:14: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_poss_in_clause3276_static.FOLLOW_wp_poss_in_clause3276);
                    wp_poss678=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss678.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:22: wrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wrb_in_clause3278_static.FOLLOW_wrb_in_clause3278);
                    wrb679=wrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wrb679.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:26: ex
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ex_in_clause3280_static.FOLLOW_ex_in_clause3280);
                    ex680=ex();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex680.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:29: pdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pdt_in_clause3282_static.FOLLOW_pdt_in_clause3282);
                    pdt681=pdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pdt681.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:33: wp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_in_clause3284_static.FOLLOW_wp_in_clause3284);
                    wp682=wp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp682.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "clause"

    public static class conjunction_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conjunction"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:1: conjunction : ( cc | comma );
    public final ChemicalChunkerParser.conjunction_return conjunction() throws RecognitionException {
        ChemicalChunkerParser.conjunction_return retval = new ChemicalChunkerParser.conjunction_return();
        retval.start = input.LT(1);
        int conjunction_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cc_return cc683 = null;

        ChemicalChunkerParser.comma_return comma684 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:13: ( cc | comma )
            int alt199=2;
            switch ( input.LA(1) ) {
            case 145:
                {
                alt199=1;
                }
                break;
            case 133:
                {
                alt199=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 199, 0, input);

                throw nvae;
            }

            switch (alt199) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:15: cc
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cc_in_conjunction3291_static.FOLLOW_cc_in_conjunction3291);
                    cc683=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc683.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:18: comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_conjunction3293_static.FOLLOW_comma_in_conjunction3293);
                    comma684=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma684.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, conjunction_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conjunction"

    public static class inAll_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inAll"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:1: inAll : ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inAll_return inAll() throws RecognitionException {
        ChemicalChunkerParser.inAll_return retval = new ChemicalChunkerParser.inAll_return();
        retval.start = input.LT(1);
        int inAll_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.in_return in685 = null;

        ChemicalChunkerParser.inafter_return inafter686 = null;

        ChemicalChunkerParser.inas_return inas687 = null;

        ChemicalChunkerParser.inbefore_return inbefore688 = null;

        ChemicalChunkerParser.inby_return inby689 = null;

        ChemicalChunkerParser.infor_return infor690 = null;

        ChemicalChunkerParser.infrom_return infrom691 = null;

        ChemicalChunkerParser.inin_return inin692 = null;

        ChemicalChunkerParser.ininto_return ininto693 = null;

        ChemicalChunkerParser.inof_return inof694 = null;

        ChemicalChunkerParser.inoff_return inoff695 = null;

        ChemicalChunkerParser.inon_return inon696 = null;

        ChemicalChunkerParser.inover_return inover697 = null;

        ChemicalChunkerParser.inunder_return inunder698 = null;

        ChemicalChunkerParser.invia_return invia699 = null;

        ChemicalChunkerParser.inwith_return inwith700 = null;

        ChemicalChunkerParser.inwithout_return inwithout701 = null;

        ChemicalChunkerParser.to_return to702 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:7: ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt200=18;
            switch ( input.LA(1) ) {
            case 150:
                {
                alt200=1;
                }
                break;
            case 49:
                {
                alt200=2;
                }
                break;
            case 47:
                {
                alt200=3;
                }
                break;
            case 48:
                {
                alt200=4;
                }
                break;
            case 54:
                {
                alt200=5;
                }
                break;
            case 58:
                {
                alt200=6;
                }
                break;
            case 59:
                {
                alt200=7;
                }
                break;
            case 50:
                {
                alt200=8;
                }
                break;
            case 51:
                {
                alt200=9;
                }
                break;
            case 56:
                {
                alt200=10;
                }
                break;
            case 62:
                {
                alt200=11;
                }
                break;
            case 57:
                {
                alt200=12;
                }
                break;
            case 61:
                {
                alt200=13;
                }
                break;
            case 60:
                {
                alt200=14;
                }
                break;
            case 55:
                {
                alt200=15;
                }
                break;
            case 52:
                {
                alt200=16;
                }
                break;
            case 53:
                {
                alt200=17;
                }
                break;
            case 169:
                {
                alt200=18;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 200, 0, input);

                throw nvae;
            }

            switch (alt200) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:9: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inAll3300_static.FOLLOW_in_in_inAll3300);
                    in685=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in685.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:12: inafter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inafter_in_inAll3302_static.FOLLOW_inafter_in_inAll3302);
                    inafter686=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter686.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:20: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inAll3304_static.FOLLOW_inas_in_inAll3304);
                    inas687=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas687.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:25: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inAll3306_static.FOLLOW_inbefore_in_inAll3306);
                    inbefore688=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore688.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:34: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inAll3308_static.FOLLOW_inby_in_inAll3308);
                    inby689=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby689.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:39: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inAll3310_static.FOLLOW_infor_in_inAll3310);
                    infor690=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor690.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:45: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inAll3312_static.FOLLOW_infrom_in_inAll3312);
                    infrom691=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom691.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:52: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inAll3314_static.FOLLOW_inin_in_inAll3314);
                    inin692=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin692.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:57: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inAll3316_static.FOLLOW_ininto_in_inAll3316);
                    ininto693=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto693.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:64: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inAll3318_static.FOLLOW_inof_in_inAll3318);
                    inof694=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof694.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:69: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inAll3320_static.FOLLOW_inoff_in_inAll3320);
                    inoff695=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff695.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:75: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inAll3322_static.FOLLOW_inon_in_inAll3322);
                    inon696=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon696.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:80: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inAll3324_static.FOLLOW_inover_in_inAll3324);
                    inover697=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover697.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:87: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inAll3326_static.FOLLOW_inunder_in_inAll3326);
                    inunder698=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder698.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:95: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inAll3328_static.FOLLOW_invia_in_inAll3328);
                    invia699=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia699.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:101: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inAll3330_static.FOLLOW_inwith_in_inAll3330);
                    inwith700=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith700.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:108: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inAll3332_static.FOLLOW_inwithout_in_inAll3332);
                    inwithout701=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout701.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:118: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inAll3334_static.FOLLOW_to_in_inAll3334);
                    to702=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to702.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, inAll_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inAll"

    public static class inMost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inMost"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:1: inMost : ( in | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inMost_return inMost() throws RecognitionException {
        ChemicalChunkerParser.inMost_return retval = new ChemicalChunkerParser.inMost_return();
        retval.start = input.LT(1);
        int inMost_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.in_return in703 = null;

        ChemicalChunkerParser.inas_return inas704 = null;

        ChemicalChunkerParser.inbefore_return inbefore705 = null;

        ChemicalChunkerParser.inby_return inby706 = null;

        ChemicalChunkerParser.infor_return infor707 = null;

        ChemicalChunkerParser.infrom_return infrom708 = null;

        ChemicalChunkerParser.inin_return inin709 = null;

        ChemicalChunkerParser.ininto_return ininto710 = null;

        ChemicalChunkerParser.inof_return inof711 = null;

        ChemicalChunkerParser.inoff_return inoff712 = null;

        ChemicalChunkerParser.inon_return inon713 = null;

        ChemicalChunkerParser.inover_return inover714 = null;

        ChemicalChunkerParser.inunder_return inunder715 = null;

        ChemicalChunkerParser.invia_return invia716 = null;

        ChemicalChunkerParser.inwith_return inwith717 = null;

        ChemicalChunkerParser.inwithout_return inwithout718 = null;

        ChemicalChunkerParser.to_return to719 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:8: ( in | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt201=17;
            switch ( input.LA(1) ) {
            case 150:
                {
                alt201=1;
                }
                break;
            case 47:
                {
                alt201=2;
                }
                break;
            case 48:
                {
                alt201=3;
                }
                break;
            case 54:
                {
                alt201=4;
                }
                break;
            case 58:
                {
                alt201=5;
                }
                break;
            case 59:
                {
                alt201=6;
                }
                break;
            case 50:
                {
                alt201=7;
                }
                break;
            case 51:
                {
                alt201=8;
                }
                break;
            case 56:
                {
                alt201=9;
                }
                break;
            case 62:
                {
                alt201=10;
                }
                break;
            case 57:
                {
                alt201=11;
                }
                break;
            case 61:
                {
                alt201=12;
                }
                break;
            case 60:
                {
                alt201=13;
                }
                break;
            case 55:
                {
                alt201=14;
                }
                break;
            case 52:
                {
                alt201=15;
                }
                break;
            case 53:
                {
                alt201=16;
                }
                break;
            case 169:
                {
                alt201=17;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 201, 0, input);

                throw nvae;
            }

            switch (alt201) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:10: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inMost3341_static.FOLLOW_in_in_inMost3341);
                    in703=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in703.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:13: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inMost3343_static.FOLLOW_inas_in_inMost3343);
                    inas704=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas704.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:18: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inMost3345_static.FOLLOW_inbefore_in_inMost3345);
                    inbefore705=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore705.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:27: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inMost3347_static.FOLLOW_inby_in_inMost3347);
                    inby706=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby706.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:32: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inMost3349_static.FOLLOW_infor_in_inMost3349);
                    infor707=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor707.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:38: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inMost3351_static.FOLLOW_infrom_in_inMost3351);
                    infrom708=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom708.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:45: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inMost3353_static.FOLLOW_inin_in_inMost3353);
                    inin709=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin709.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:50: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inMost3355_static.FOLLOW_ininto_in_inMost3355);
                    ininto710=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto710.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:57: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inMost3357_static.FOLLOW_inof_in_inMost3357);
                    inof711=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof711.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:62: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inMost3359_static.FOLLOW_inoff_in_inMost3359);
                    inoff712=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff712.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:68: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inMost3361_static.FOLLOW_inon_in_inMost3361);
                    inon713=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon713.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:73: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inMost3363_static.FOLLOW_inover_in_inMost3363);
                    inover714=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover714.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:80: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inMost3365_static.FOLLOW_inunder_in_inMost3365);
                    inunder715=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder715.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:88: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inMost3367_static.FOLLOW_invia_in_inMost3367);
                    invia716=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia716.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:94: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inMost3369_static.FOLLOW_inwith_in_inMost3369);
                    inwith717=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith717.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:101: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inMost3371_static.FOLLOW_inwithout_in_inMost3371);
                    inwithout718=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout718.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:111: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inMost3373_static.FOLLOW_to_in_inMost3373);
                    to719=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to719.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, inMost_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inMost"

    public static class numeric_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numeric"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:1: numeric : ( cd | cdAlphanum );
    public final ChemicalChunkerParser.numeric_return numeric() throws RecognitionException {
        ChemicalChunkerParser.numeric_return retval = new ChemicalChunkerParser.numeric_return();
        retval.start = input.LT(1);
        int numeric_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd720 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum721 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:9: ( cd | cdAlphanum )
            int alt202=2;
            switch ( input.LA(1) ) {
            case 146:
                {
                alt202=1;
                }
                break;
            case 38:
                {
                alt202=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 202, 0, input);

                throw nvae;
            }

            switch (alt202) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:11: cd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cd_in_numeric3380_static.FOLLOW_cd_in_numeric3380);
                    cd720=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd720.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:14: cdAlphanum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cdAlphanum_in_numeric3382_static.FOLLOW_cdAlphanum_in_numeric3382);
                    cdAlphanum721=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum721.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, numeric_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numeric"

    public static class cdAlphanum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdAlphanum"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:432:1: cdAlphanum : 'CD-ALPHANUM' TOKEN -> ^( 'CD-ALPHANUM' TOKEN ) ;
    public final ChemicalChunkerParser.cdAlphanum_return cdAlphanum() throws RecognitionException {
        ChemicalChunkerParser.cdAlphanum_return retval = new ChemicalChunkerParser.cdAlphanum_return();
        retval.start = input.LT(1);
        int cdAlphanum_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal722=null;
        Token TOKEN723=null;

        Object string_literal722_tree=null;
        Object TOKEN723_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:432:11: ( 'CD-ALPHANUM' TOKEN -> ^( 'CD-ALPHANUM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:432:12: 'CD-ALPHANUM' TOKEN
            {
            string_literal722=(Token)match(input,38,FOLLOW_38_in_cdAlphanum3390_static.FOLLOW_38_in_cdAlphanum3390); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_38.add(string_literal722);

            TOKEN723=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdAlphanum3392_static.FOLLOW_TOKEN_in_cdAlphanum3392); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN723);



            // AST REWRITE
            // elements: 38, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 432:32: -> ^( 'CD-ALPHANUM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:432:35: ^( 'CD-ALPHANUM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_38.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, cdAlphanum_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdAlphanum"

    public static class oscarcj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:1: oscarcj : 'OSCAR-CJ' TOKEN -> ^( 'OSCAR-CJ' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcj_return oscarcj() throws RecognitionException {
        ChemicalChunkerParser.oscarcj_return retval = new ChemicalChunkerParser.oscarcj_return();
        retval.start = input.LT(1);
        int oscarcj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal724=null;
        Token TOKEN725=null;

        Object string_literal724_tree=null;
        Object TOKEN725_tree=null;
        RewriteRuleTokenStream stream_39=new RewriteRuleTokenStream(adaptor,"token 39");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:8: ( 'OSCAR-CJ' TOKEN -> ^( 'OSCAR-CJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:9: 'OSCAR-CJ' TOKEN
            {
            string_literal724=(Token)match(input,39,FOLLOW_39_in_oscarcj3405_static.FOLLOW_39_in_oscarcj3405); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_39.add(string_literal724);

            TOKEN725=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcj3407_static.FOLLOW_TOKEN_in_oscarcj3407); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN725);



            // AST REWRITE
            // elements: 39, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 433:26: -> ^( 'OSCAR-CJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:29: ^( 'OSCAR-CJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_39.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, oscarcj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarcj"

    public static class oscarrn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarrn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:434:1: oscarrn : 'OSCAR-RN' TOKEN -> ^( 'OSCAR-RN' TOKEN ) ;
    public final ChemicalChunkerParser.oscarrn_return oscarrn() throws RecognitionException {
        ChemicalChunkerParser.oscarrn_return retval = new ChemicalChunkerParser.oscarrn_return();
        retval.start = input.LT(1);
        int oscarrn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal726=null;
        Token TOKEN727=null;

        Object string_literal726_tree=null;
        Object TOKEN727_tree=null;
        RewriteRuleTokenStream stream_40=new RewriteRuleTokenStream(adaptor,"token 40");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:434:8: ( 'OSCAR-RN' TOKEN -> ^( 'OSCAR-RN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:434:9: 'OSCAR-RN' TOKEN
            {
            string_literal726=(Token)match(input,40,FOLLOW_40_in_oscarrn3420_static.FOLLOW_40_in_oscarrn3420); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_40.add(string_literal726);

            TOKEN727=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarrn3422_static.FOLLOW_TOKEN_in_oscarrn3422); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN727);



            // AST REWRITE
            // elements: TOKEN, 40
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 434:26: -> ^( 'OSCAR-RN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:434:29: ^( 'OSCAR-RN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_40.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, oscarrn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarrn"

    public static class oscarase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:435:1: oscarase : 'OSCAR-ASE' TOKEN -> ^( 'OSCAR-ASE' TOKEN ) ;
    public final ChemicalChunkerParser.oscarase_return oscarase() throws RecognitionException {
        ChemicalChunkerParser.oscarase_return retval = new ChemicalChunkerParser.oscarase_return();
        retval.start = input.LT(1);
        int oscarase_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal728=null;
        Token TOKEN729=null;

        Object string_literal728_tree=null;
        Object TOKEN729_tree=null;
        RewriteRuleTokenStream stream_41=new RewriteRuleTokenStream(adaptor,"token 41");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:435:9: ( 'OSCAR-ASE' TOKEN -> ^( 'OSCAR-ASE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:435:10: 'OSCAR-ASE' TOKEN
            {
            string_literal728=(Token)match(input,41,FOLLOW_41_in_oscarase3435_static.FOLLOW_41_in_oscarase3435); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_41.add(string_literal728);

            TOKEN729=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarase3437_static.FOLLOW_TOKEN_in_oscarase3437); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN729);



            // AST REWRITE
            // elements: TOKEN, 41
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 435:28: -> ^( 'OSCAR-ASE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:435:31: ^( 'OSCAR-ASE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_41.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, oscarase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarase"

    public static class oscaront_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaront"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:1: oscaront : 'OSCAR-ONT' TOKEN -> ^( 'OSCAR-ONT' TOKEN ) ;
    public final ChemicalChunkerParser.oscaront_return oscaront() throws RecognitionException {
        ChemicalChunkerParser.oscaront_return retval = new ChemicalChunkerParser.oscaront_return();
        retval.start = input.LT(1);
        int oscaront_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal730=null;
        Token TOKEN731=null;

        Object string_literal730_tree=null;
        Object TOKEN731_tree=null;
        RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,"token 42");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:9: ( 'OSCAR-ONT' TOKEN -> ^( 'OSCAR-ONT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:10: 'OSCAR-ONT' TOKEN
            {
            string_literal730=(Token)match(input,42,FOLLOW_42_in_oscaront3450_static.FOLLOW_42_in_oscaront3450); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_42.add(string_literal730);

            TOKEN731=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscaront3452_static.FOLLOW_TOKEN_in_oscaront3452); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN731);



            // AST REWRITE
            // elements: 42, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 436:28: -> ^( 'OSCAR-ONT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:31: ^( 'OSCAR-ONT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_42.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, oscaront_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscaront"

    public static class tmunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tmunicode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:437:1: tmunicode : 'TM-UNICODE' TOKEN -> ^( 'TM-UNICODE' TOKEN ) ;
    public final ChemicalChunkerParser.tmunicode_return tmunicode() throws RecognitionException {
        ChemicalChunkerParser.tmunicode_return retval = new ChemicalChunkerParser.tmunicode_return();
        retval.start = input.LT(1);
        int tmunicode_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal732=null;
        Token TOKEN733=null;

        Object string_literal732_tree=null;
        Object TOKEN733_tree=null;
        RewriteRuleTokenStream stream_43=new RewriteRuleTokenStream(adaptor,"token 43");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:437:10: ( 'TM-UNICODE' TOKEN -> ^( 'TM-UNICODE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:437:11: 'TM-UNICODE' TOKEN
            {
            string_literal732=(Token)match(input,43,FOLLOW_43_in_tmunicode3465_static.FOLLOW_43_in_tmunicode3465); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_43.add(string_literal732);

            TOKEN733=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_tmunicode3467_static.FOLLOW_TOKEN_in_tmunicode3467); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN733);



            // AST REWRITE
            // elements: TOKEN, 43
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 437:30: -> ^( 'TM-UNICODE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:437:33: ^( 'TM-UNICODE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_43.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, tmunicode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "tmunicode"

    public static class cdunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdunicode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:438:1: cdunicode : 'CD-UNICODE' TOKEN -> ^( 'CD-UNICODE' TOKEN ) ;
    public final ChemicalChunkerParser.cdunicode_return cdunicode() throws RecognitionException {
        ChemicalChunkerParser.cdunicode_return retval = new ChemicalChunkerParser.cdunicode_return();
        retval.start = input.LT(1);
        int cdunicode_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal734=null;
        Token TOKEN735=null;

        Object string_literal734_tree=null;
        Object TOKEN735_tree=null;
        RewriteRuleTokenStream stream_44=new RewriteRuleTokenStream(adaptor,"token 44");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:438:10: ( 'CD-UNICODE' TOKEN -> ^( 'CD-UNICODE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:438:11: 'CD-UNICODE' TOKEN
            {
            string_literal734=(Token)match(input,44,FOLLOW_44_in_cdunicode3480_static.FOLLOW_44_in_cdunicode3480); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_44.add(string_literal734);

            TOKEN735=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdunicode3482_static.FOLLOW_TOKEN_in_cdunicode3482); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN735);



            // AST REWRITE
            // elements: 44, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 438:30: -> ^( 'CD-UNICODE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:438:33: ^( 'CD-UNICODE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_44.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, cdunicode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdunicode"

    public static class jjchem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjchem"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:1: jjchem : 'JJ-CHEM' TOKEN -> ^( 'JJ-CHEM' TOKEN ) ;
    public final ChemicalChunkerParser.jjchem_return jjchem() throws RecognitionException {
        ChemicalChunkerParser.jjchem_return retval = new ChemicalChunkerParser.jjchem_return();
        retval.start = input.LT(1);
        int jjchem_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal736=null;
        Token TOKEN737=null;

        Object string_literal736_tree=null;
        Object TOKEN737_tree=null;
        RewriteRuleTokenStream stream_45=new RewriteRuleTokenStream(adaptor,"token 45");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:7: ( 'JJ-CHEM' TOKEN -> ^( 'JJ-CHEM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:8: 'JJ-CHEM' TOKEN
            {
            string_literal736=(Token)match(input,45,FOLLOW_45_in_jjchem3495_static.FOLLOW_45_in_jjchem3495); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_45.add(string_literal736);

            TOKEN737=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjchem3497_static.FOLLOW_TOKEN_in_jjchem3497); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN737);



            // AST REWRITE
            // elements: 45, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 439:24: -> ^( 'JJ-CHEM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:27: ^( 'JJ-CHEM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_45.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, jjchem_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjchem"

    public static class jjcomp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjcomp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:1: jjcomp : 'JJ-COMPOUND' TOKEN -> ^( 'JJ-COMPOUND' TOKEN ) ;
    public final ChemicalChunkerParser.jjcomp_return jjcomp() throws RecognitionException {
        ChemicalChunkerParser.jjcomp_return retval = new ChemicalChunkerParser.jjcomp_return();
        retval.start = input.LT(1);
        int jjcomp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal738=null;
        Token TOKEN739=null;

        Object string_literal738_tree=null;
        Object TOKEN739_tree=null;
        RewriteRuleTokenStream stream_46=new RewriteRuleTokenStream(adaptor,"token 46");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:7: ( 'JJ-COMPOUND' TOKEN -> ^( 'JJ-COMPOUND' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:8: 'JJ-COMPOUND' TOKEN
            {
            string_literal738=(Token)match(input,46,FOLLOW_46_in_jjcomp3510_static.FOLLOW_46_in_jjcomp3510); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_46.add(string_literal738);

            TOKEN739=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjcomp3512_static.FOLLOW_TOKEN_in_jjcomp3512); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN739);



            // AST REWRITE
            // elements: TOKEN, 46
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 440:28: -> ^( 'JJ-COMPOUND' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:31: ^( 'JJ-COMPOUND' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_46.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, jjcomp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjcomp"

    public static class inas_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inas"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:442:1: inas : 'IN-AS' TOKEN -> ^( 'IN-AS' TOKEN ) ;
    public final ChemicalChunkerParser.inas_return inas() throws RecognitionException {
        ChemicalChunkerParser.inas_return retval = new ChemicalChunkerParser.inas_return();
        retval.start = input.LT(1);
        int inas_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal740=null;
        Token TOKEN741=null;

        Object string_literal740_tree=null;
        Object TOKEN741_tree=null;
        RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:442:5: ( 'IN-AS' TOKEN -> ^( 'IN-AS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:442:6: 'IN-AS' TOKEN
            {
            string_literal740=(Token)match(input,47,FOLLOW_47_in_inas3526_static.FOLLOW_47_in_inas3526); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_47.add(string_literal740);

            TOKEN741=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inas3528_static.FOLLOW_TOKEN_in_inas3528); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN741);



            // AST REWRITE
            // elements: TOKEN, 47
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 442:20: -> ^( 'IN-AS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:442:23: ^( 'IN-AS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_47.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, inas_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inas"

    public static class inbefore_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inbefore"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:1: inbefore : 'IN-BEFORE' TOKEN -> ^( 'IN-BEFORE' TOKEN ) ;
    public final ChemicalChunkerParser.inbefore_return inbefore() throws RecognitionException {
        ChemicalChunkerParser.inbefore_return retval = new ChemicalChunkerParser.inbefore_return();
        retval.start = input.LT(1);
        int inbefore_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal742=null;
        Token TOKEN743=null;

        Object string_literal742_tree=null;
        Object TOKEN743_tree=null;
        RewriteRuleTokenStream stream_48=new RewriteRuleTokenStream(adaptor,"token 48");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:9: ( 'IN-BEFORE' TOKEN -> ^( 'IN-BEFORE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:10: 'IN-BEFORE' TOKEN
            {
            string_literal742=(Token)match(input,48,FOLLOW_48_in_inbefore3541_static.FOLLOW_48_in_inbefore3541); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_48.add(string_literal742);

            TOKEN743=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inbefore3543_static.FOLLOW_TOKEN_in_inbefore3543); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN743);



            // AST REWRITE
            // elements: TOKEN, 48
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 443:28: -> ^( 'IN-BEFORE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:31: ^( 'IN-BEFORE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_48.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 136, inbefore_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inbefore"

    public static class inafter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inafter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:444:1: inafter : 'IN-AFTER' TOKEN -> ^( 'IN-AFTER' TOKEN ) ;
    public final ChemicalChunkerParser.inafter_return inafter() throws RecognitionException {
        ChemicalChunkerParser.inafter_return retval = new ChemicalChunkerParser.inafter_return();
        retval.start = input.LT(1);
        int inafter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal744=null;
        Token TOKEN745=null;

        Object string_literal744_tree=null;
        Object TOKEN745_tree=null;
        RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:444:8: ( 'IN-AFTER' TOKEN -> ^( 'IN-AFTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:444:9: 'IN-AFTER' TOKEN
            {
            string_literal744=(Token)match(input,49,FOLLOW_49_in_inafter3556_static.FOLLOW_49_in_inafter3556); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_49.add(string_literal744);

            TOKEN745=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inafter3558_static.FOLLOW_TOKEN_in_inafter3558); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN745);



            // AST REWRITE
            // elements: 49, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 444:26: -> ^( 'IN-AFTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:444:29: ^( 'IN-AFTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_49.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 137, inafter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inafter"

    public static class inin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inin"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:445:1: inin : 'IN-IN' TOKEN -> ^( 'IN-IN' TOKEN ) ;
    public final ChemicalChunkerParser.inin_return inin() throws RecognitionException {
        ChemicalChunkerParser.inin_return retval = new ChemicalChunkerParser.inin_return();
        retval.start = input.LT(1);
        int inin_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal746=null;
        Token TOKEN747=null;

        Object string_literal746_tree=null;
        Object TOKEN747_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_50=new RewriteRuleTokenStream(adaptor,"token 50");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:445:5: ( 'IN-IN' TOKEN -> ^( 'IN-IN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:445:6: 'IN-IN' TOKEN
            {
            string_literal746=(Token)match(input,50,FOLLOW_50_in_inin3571_static.FOLLOW_50_in_inin3571); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_50.add(string_literal746);

            TOKEN747=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inin3573_static.FOLLOW_TOKEN_in_inin3573); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN747);



            // AST REWRITE
            // elements: TOKEN, 50
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 445:20: -> ^( 'IN-IN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:445:23: ^( 'IN-IN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_50.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 138, inin_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inin"

    public static class ininto_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ininto"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:1: ininto : 'IN-INTO' TOKEN -> ^( 'IN-INTO' TOKEN ) ;
    public final ChemicalChunkerParser.ininto_return ininto() throws RecognitionException {
        ChemicalChunkerParser.ininto_return retval = new ChemicalChunkerParser.ininto_return();
        retval.start = input.LT(1);
        int ininto_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal748=null;
        Token TOKEN749=null;

        Object string_literal748_tree=null;
        Object TOKEN749_tree=null;
        RewriteRuleTokenStream stream_51=new RewriteRuleTokenStream(adaptor,"token 51");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:7: ( 'IN-INTO' TOKEN -> ^( 'IN-INTO' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:8: 'IN-INTO' TOKEN
            {
            string_literal748=(Token)match(input,51,FOLLOW_51_in_ininto3586_static.FOLLOW_51_in_ininto3586); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_51.add(string_literal748);

            TOKEN749=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ininto3588_static.FOLLOW_TOKEN_in_ininto3588); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN749);



            // AST REWRITE
            // elements: TOKEN, 51
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 446:24: -> ^( 'IN-INTO' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:27: ^( 'IN-INTO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_51.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 139, ininto_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ininto"

    public static class inwith_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwith"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:447:1: inwith : 'IN-WITH' TOKEN -> ^( 'IN-WITH' TOKEN ) ;
    public final ChemicalChunkerParser.inwith_return inwith() throws RecognitionException {
        ChemicalChunkerParser.inwith_return retval = new ChemicalChunkerParser.inwith_return();
        retval.start = input.LT(1);
        int inwith_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal750=null;
        Token TOKEN751=null;

        Object string_literal750_tree=null;
        Object TOKEN751_tree=null;
        RewriteRuleTokenStream stream_52=new RewriteRuleTokenStream(adaptor,"token 52");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:447:7: ( 'IN-WITH' TOKEN -> ^( 'IN-WITH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:447:8: 'IN-WITH' TOKEN
            {
            string_literal750=(Token)match(input,52,FOLLOW_52_in_inwith3601_static.FOLLOW_52_in_inwith3601); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_52.add(string_literal750);

            TOKEN751=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwith3603_static.FOLLOW_TOKEN_in_inwith3603); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN751);



            // AST REWRITE
            // elements: TOKEN, 52
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 447:24: -> ^( 'IN-WITH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:447:27: ^( 'IN-WITH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_52.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 140, inwith_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inwith"

    public static class inwithout_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwithout"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:448:1: inwithout : 'IN-WITHOUT' TOKEN -> ^( 'IN-WITHOUT' TOKEN ) ;
    public final ChemicalChunkerParser.inwithout_return inwithout() throws RecognitionException {
        ChemicalChunkerParser.inwithout_return retval = new ChemicalChunkerParser.inwithout_return();
        retval.start = input.LT(1);
        int inwithout_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal752=null;
        Token TOKEN753=null;

        Object string_literal752_tree=null;
        Object TOKEN753_tree=null;
        RewriteRuleTokenStream stream_53=new RewriteRuleTokenStream(adaptor,"token 53");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:448:10: ( 'IN-WITHOUT' TOKEN -> ^( 'IN-WITHOUT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:448:11: 'IN-WITHOUT' TOKEN
            {
            string_literal752=(Token)match(input,53,FOLLOW_53_in_inwithout3616_static.FOLLOW_53_in_inwithout3616); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_53.add(string_literal752);

            TOKEN753=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwithout3618_static.FOLLOW_TOKEN_in_inwithout3618); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN753);



            // AST REWRITE
            // elements: 53, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 448:30: -> ^( 'IN-WITHOUT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:448:33: ^( 'IN-WITHOUT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_53.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 141, inwithout_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inwithout"

    public static class inby_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inby"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:449:1: inby : 'IN-BY' TOKEN -> ^( 'IN-BY' TOKEN ) ;
    public final ChemicalChunkerParser.inby_return inby() throws RecognitionException {
        ChemicalChunkerParser.inby_return retval = new ChemicalChunkerParser.inby_return();
        retval.start = input.LT(1);
        int inby_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal754=null;
        Token TOKEN755=null;

        Object string_literal754_tree=null;
        Object TOKEN755_tree=null;
        RewriteRuleTokenStream stream_54=new RewriteRuleTokenStream(adaptor,"token 54");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:449:5: ( 'IN-BY' TOKEN -> ^( 'IN-BY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:449:6: 'IN-BY' TOKEN
            {
            string_literal754=(Token)match(input,54,FOLLOW_54_in_inby3631_static.FOLLOW_54_in_inby3631); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_54.add(string_literal754);

            TOKEN755=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inby3633_static.FOLLOW_TOKEN_in_inby3633); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN755);



            // AST REWRITE
            // elements: 54, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 449:20: -> ^( 'IN-BY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:449:23: ^( 'IN-BY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_54.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 142, inby_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inby"

    public static class invia_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invia"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:1: invia : 'IN-VIA' TOKEN -> ^( 'IN-VIA' TOKEN ) ;
    public final ChemicalChunkerParser.invia_return invia() throws RecognitionException {
        ChemicalChunkerParser.invia_return retval = new ChemicalChunkerParser.invia_return();
        retval.start = input.LT(1);
        int invia_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal756=null;
        Token TOKEN757=null;

        Object string_literal756_tree=null;
        Object TOKEN757_tree=null;
        RewriteRuleTokenStream stream_55=new RewriteRuleTokenStream(adaptor,"token 55");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:6: ( 'IN-VIA' TOKEN -> ^( 'IN-VIA' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:7: 'IN-VIA' TOKEN
            {
            string_literal756=(Token)match(input,55,FOLLOW_55_in_invia3646_static.FOLLOW_55_in_invia3646); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_55.add(string_literal756);

            TOKEN757=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_invia3648_static.FOLLOW_TOKEN_in_invia3648); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN757);



            // AST REWRITE
            // elements: TOKEN, 55
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 450:22: -> ^( 'IN-VIA' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:25: ^( 'IN-VIA' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_55.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 143, invia_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "invia"

    public static class inof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inof"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:451:1: inof : 'IN-OF' TOKEN -> ^( 'IN-OF' TOKEN ) ;
    public final ChemicalChunkerParser.inof_return inof() throws RecognitionException {
        ChemicalChunkerParser.inof_return retval = new ChemicalChunkerParser.inof_return();
        retval.start = input.LT(1);
        int inof_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal758=null;
        Token TOKEN759=null;

        Object string_literal758_tree=null;
        Object TOKEN759_tree=null;
        RewriteRuleTokenStream stream_56=new RewriteRuleTokenStream(adaptor,"token 56");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:451:5: ( 'IN-OF' TOKEN -> ^( 'IN-OF' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:451:6: 'IN-OF' TOKEN
            {
            string_literal758=(Token)match(input,56,FOLLOW_56_in_inof3661_static.FOLLOW_56_in_inof3661); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_56.add(string_literal758);

            TOKEN759=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inof3663_static.FOLLOW_TOKEN_in_inof3663); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN759);



            // AST REWRITE
            // elements: TOKEN, 56
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 451:20: -> ^( 'IN-OF' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:451:23: ^( 'IN-OF' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_56.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 144, inof_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inof"

    public static class inon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inon"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:452:1: inon : 'IN-ON' TOKEN -> ^( 'IN-ON' TOKEN ) ;
    public final ChemicalChunkerParser.inon_return inon() throws RecognitionException {
        ChemicalChunkerParser.inon_return retval = new ChemicalChunkerParser.inon_return();
        retval.start = input.LT(1);
        int inon_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal760=null;
        Token TOKEN761=null;

        Object string_literal760_tree=null;
        Object TOKEN761_tree=null;
        RewriteRuleTokenStream stream_57=new RewriteRuleTokenStream(adaptor,"token 57");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:452:5: ( 'IN-ON' TOKEN -> ^( 'IN-ON' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:452:6: 'IN-ON' TOKEN
            {
            string_literal760=(Token)match(input,57,FOLLOW_57_in_inon3676_static.FOLLOW_57_in_inon3676); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_57.add(string_literal760);

            TOKEN761=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inon3678_static.FOLLOW_TOKEN_in_inon3678); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN761);



            // AST REWRITE
            // elements: 57, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 452:20: -> ^( 'IN-ON' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:452:23: ^( 'IN-ON' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_57.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 145, inon_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inon"

    public static class infor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infor"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:453:1: infor : 'IN-FOR' TOKEN -> ^( 'IN-FOR' TOKEN ) ;
    public final ChemicalChunkerParser.infor_return infor() throws RecognitionException {
        ChemicalChunkerParser.infor_return retval = new ChemicalChunkerParser.infor_return();
        retval.start = input.LT(1);
        int infor_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal762=null;
        Token TOKEN763=null;

        Object string_literal762_tree=null;
        Object TOKEN763_tree=null;
        RewriteRuleTokenStream stream_58=new RewriteRuleTokenStream(adaptor,"token 58");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:453:6: ( 'IN-FOR' TOKEN -> ^( 'IN-FOR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:453:7: 'IN-FOR' TOKEN
            {
            string_literal762=(Token)match(input,58,FOLLOW_58_in_infor3691_static.FOLLOW_58_in_infor3691); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_58.add(string_literal762);

            TOKEN763=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infor3693_static.FOLLOW_TOKEN_in_infor3693); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN763);



            // AST REWRITE
            // elements: 58, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 453:22: -> ^( 'IN-FOR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:453:25: ^( 'IN-FOR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_58.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 146, infor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "infor"

    public static class infrom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infrom"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:454:1: infrom : 'IN-FROM' TOKEN -> ^( 'IN-FROM' TOKEN ) ;
    public final ChemicalChunkerParser.infrom_return infrom() throws RecognitionException {
        ChemicalChunkerParser.infrom_return retval = new ChemicalChunkerParser.infrom_return();
        retval.start = input.LT(1);
        int infrom_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal764=null;
        Token TOKEN765=null;

        Object string_literal764_tree=null;
        Object TOKEN765_tree=null;
        RewriteRuleTokenStream stream_59=new RewriteRuleTokenStream(adaptor,"token 59");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:454:7: ( 'IN-FROM' TOKEN -> ^( 'IN-FROM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:454:8: 'IN-FROM' TOKEN
            {
            string_literal764=(Token)match(input,59,FOLLOW_59_in_infrom3706_static.FOLLOW_59_in_infrom3706); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_59.add(string_literal764);

            TOKEN765=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infrom3708_static.FOLLOW_TOKEN_in_infrom3708); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN765);



            // AST REWRITE
            // elements: 59, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 454:24: -> ^( 'IN-FROM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:454:27: ^( 'IN-FROM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_59.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 147, infrom_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "infrom"

    public static class inunder_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inunder"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:455:1: inunder : 'IN-UNDER' TOKEN -> ^( 'IN-UNDER' TOKEN ) ;
    public final ChemicalChunkerParser.inunder_return inunder() throws RecognitionException {
        ChemicalChunkerParser.inunder_return retval = new ChemicalChunkerParser.inunder_return();
        retval.start = input.LT(1);
        int inunder_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal766=null;
        Token TOKEN767=null;

        Object string_literal766_tree=null;
        Object TOKEN767_tree=null;
        RewriteRuleTokenStream stream_60=new RewriteRuleTokenStream(adaptor,"token 60");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:455:8: ( 'IN-UNDER' TOKEN -> ^( 'IN-UNDER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:455:9: 'IN-UNDER' TOKEN
            {
            string_literal766=(Token)match(input,60,FOLLOW_60_in_inunder3721_static.FOLLOW_60_in_inunder3721); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_60.add(string_literal766);

            TOKEN767=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inunder3723_static.FOLLOW_TOKEN_in_inunder3723); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN767);



            // AST REWRITE
            // elements: 60, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 455:26: -> ^( 'IN-UNDER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:455:29: ^( 'IN-UNDER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_60.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 148, inunder_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inunder"

    public static class inover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inover"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:456:1: inover : 'IN-OVER' TOKEN -> ^( 'IN-OVER' TOKEN ) ;
    public final ChemicalChunkerParser.inover_return inover() throws RecognitionException {
        ChemicalChunkerParser.inover_return retval = new ChemicalChunkerParser.inover_return();
        retval.start = input.LT(1);
        int inover_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal768=null;
        Token TOKEN769=null;

        Object string_literal768_tree=null;
        Object TOKEN769_tree=null;
        RewriteRuleTokenStream stream_61=new RewriteRuleTokenStream(adaptor,"token 61");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:456:7: ( 'IN-OVER' TOKEN -> ^( 'IN-OVER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:456:8: 'IN-OVER' TOKEN
            {
            string_literal768=(Token)match(input,61,FOLLOW_61_in_inover3736_static.FOLLOW_61_in_inover3736); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_61.add(string_literal768);

            TOKEN769=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inover3738_static.FOLLOW_TOKEN_in_inover3738); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN769);



            // AST REWRITE
            // elements: 61, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 456:24: -> ^( 'IN-OVER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:456:27: ^( 'IN-OVER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_61.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 149, inover_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inover"

    public static class inoff_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inoff"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:1: inoff : 'IN-OFF' TOKEN -> ^( 'IN-OFF' TOKEN ) ;
    public final ChemicalChunkerParser.inoff_return inoff() throws RecognitionException {
        ChemicalChunkerParser.inoff_return retval = new ChemicalChunkerParser.inoff_return();
        retval.start = input.LT(1);
        int inoff_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal770=null;
        Token TOKEN771=null;

        Object string_literal770_tree=null;
        Object TOKEN771_tree=null;
        RewriteRuleTokenStream stream_62=new RewriteRuleTokenStream(adaptor,"token 62");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:6: ( 'IN-OFF' TOKEN -> ^( 'IN-OFF' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:7: 'IN-OFF' TOKEN
            {
            string_literal770=(Token)match(input,62,FOLLOW_62_in_inoff3751_static.FOLLOW_62_in_inoff3751); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_62.add(string_literal770);

            TOKEN771=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inoff3753_static.FOLLOW_TOKEN_in_inoff3753); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN771);



            // AST REWRITE
            // elements: TOKEN, 62
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 457:22: -> ^( 'IN-OFF' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:25: ^( 'IN-OFF' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_62.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 150, inoff_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inoff"

    public static class nnstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnstate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:460:1: nnstate : 'NN-STATE' TOKEN -> ^( 'NN-STATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnstate_return nnstate() throws RecognitionException {
        ChemicalChunkerParser.nnstate_return retval = new ChemicalChunkerParser.nnstate_return();
        retval.start = input.LT(1);
        int nnstate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal772=null;
        Token TOKEN773=null;

        Object string_literal772_tree=null;
        Object TOKEN773_tree=null;
        RewriteRuleTokenStream stream_63=new RewriteRuleTokenStream(adaptor,"token 63");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:460:8: ( 'NN-STATE' TOKEN -> ^( 'NN-STATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:460:9: 'NN-STATE' TOKEN
            {
            string_literal772=(Token)match(input,63,FOLLOW_63_in_nnstate3768_static.FOLLOW_63_in_nnstate3768); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_63.add(string_literal772);

            TOKEN773=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnstate3770_static.FOLLOW_TOKEN_in_nnstate3770); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN773);



            // AST REWRITE
            // elements: 63, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 460:26: -> ^( 'NN-STATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:460:29: ^( 'NN-STATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_63.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 151, nnstate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnstate"

    public static class nntime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntime"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:461:1: nntime : 'NN-TIME' TOKEN -> ^( 'NN-TIME' TOKEN ) ;
    public final ChemicalChunkerParser.nntime_return nntime() throws RecognitionException {
        ChemicalChunkerParser.nntime_return retval = new ChemicalChunkerParser.nntime_return();
        retval.start = input.LT(1);
        int nntime_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal774=null;
        Token TOKEN775=null;

        Object string_literal774_tree=null;
        Object TOKEN775_tree=null;
        RewriteRuleTokenStream stream_64=new RewriteRuleTokenStream(adaptor,"token 64");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:461:7: ( 'NN-TIME' TOKEN -> ^( 'NN-TIME' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:461:8: 'NN-TIME' TOKEN
            {
            string_literal774=(Token)match(input,64,FOLLOW_64_in_nntime3783_static.FOLLOW_64_in_nntime3783); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_64.add(string_literal774);

            TOKEN775=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntime3785_static.FOLLOW_TOKEN_in_nntime3785); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN775);



            // AST REWRITE
            // elements: TOKEN, 64
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 461:24: -> ^( 'NN-TIME' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:461:27: ^( 'NN-TIME' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_64.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 152, nntime_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntime"

    public static class nnmass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:462:1: nnmass : 'NN-MASS' TOKEN -> ^( 'NN-MASS' TOKEN ) ;
    public final ChemicalChunkerParser.nnmass_return nnmass() throws RecognitionException {
        ChemicalChunkerParser.nnmass_return retval = new ChemicalChunkerParser.nnmass_return();
        retval.start = input.LT(1);
        int nnmass_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal776=null;
        Token TOKEN777=null;

        Object string_literal776_tree=null;
        Object TOKEN777_tree=null;
        RewriteRuleTokenStream stream_65=new RewriteRuleTokenStream(adaptor,"token 65");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:462:7: ( 'NN-MASS' TOKEN -> ^( 'NN-MASS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:462:8: 'NN-MASS' TOKEN
            {
            string_literal776=(Token)match(input,65,FOLLOW_65_in_nnmass3798_static.FOLLOW_65_in_nnmass3798); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_65.add(string_literal776);

            TOKEN777=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmass3800_static.FOLLOW_TOKEN_in_nnmass3800); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN777);



            // AST REWRITE
            // elements: TOKEN, 65
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 462:24: -> ^( 'NN-MASS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:462:27: ^( 'NN-MASS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_65.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 153, nnmass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmass"

    public static class nnamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnamount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:463:1: nnamount : 'NN-AMOUNT' TOKEN -> ^( 'NN-AMOUNT' TOKEN ) ;
    public final ChemicalChunkerParser.nnamount_return nnamount() throws RecognitionException {
        ChemicalChunkerParser.nnamount_return retval = new ChemicalChunkerParser.nnamount_return();
        retval.start = input.LT(1);
        int nnamount_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal778=null;
        Token TOKEN779=null;

        Object string_literal778_tree=null;
        Object TOKEN779_tree=null;
        RewriteRuleTokenStream stream_66=new RewriteRuleTokenStream(adaptor,"token 66");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:463:9: ( 'NN-AMOUNT' TOKEN -> ^( 'NN-AMOUNT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:463:10: 'NN-AMOUNT' TOKEN
            {
            string_literal778=(Token)match(input,66,FOLLOW_66_in_nnamount3813_static.FOLLOW_66_in_nnamount3813); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_66.add(string_literal778);

            TOKEN779=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnamount3815_static.FOLLOW_TOKEN_in_nnamount3815); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN779);



            // AST REWRITE
            // elements: 66, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 463:28: -> ^( 'NN-AMOUNT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:463:31: ^( 'NN-AMOUNT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_66.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 154, nnamount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnamount"

    public static class nnmolar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmolar"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:464:1: nnmolar : 'NN-MOLAR' TOKEN -> ^( 'NN-MOLAR' TOKEN ) ;
    public final ChemicalChunkerParser.nnmolar_return nnmolar() throws RecognitionException {
        ChemicalChunkerParser.nnmolar_return retval = new ChemicalChunkerParser.nnmolar_return();
        retval.start = input.LT(1);
        int nnmolar_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal780=null;
        Token TOKEN781=null;

        Object string_literal780_tree=null;
        Object TOKEN781_tree=null;
        RewriteRuleTokenStream stream_67=new RewriteRuleTokenStream(adaptor,"token 67");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:464:8: ( 'NN-MOLAR' TOKEN -> ^( 'NN-MOLAR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:464:9: 'NN-MOLAR' TOKEN
            {
            string_literal780=(Token)match(input,67,FOLLOW_67_in_nnmolar3828_static.FOLLOW_67_in_nnmolar3828); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_67.add(string_literal780);

            TOKEN781=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmolar3830_static.FOLLOW_TOKEN_in_nnmolar3830); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN781);



            // AST REWRITE
            // elements: TOKEN, 67
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 464:26: -> ^( 'NN-MOLAR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:464:29: ^( 'NN-MOLAR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_67.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 155, nnmolar_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmolar"

    public static class nnatmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnatmosphere"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:465:1: nnatmosphere : 'NN-ATMOSPHERE' TOKEN -> ^( 'NN-ATMOSPHERE' TOKEN ) ;
    public final ChemicalChunkerParser.nnatmosphere_return nnatmosphere() throws RecognitionException {
        ChemicalChunkerParser.nnatmosphere_return retval = new ChemicalChunkerParser.nnatmosphere_return();
        retval.start = input.LT(1);
        int nnatmosphere_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal782=null;
        Token TOKEN783=null;

        Object string_literal782_tree=null;
        Object TOKEN783_tree=null;
        RewriteRuleTokenStream stream_68=new RewriteRuleTokenStream(adaptor,"token 68");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:465:13: ( 'NN-ATMOSPHERE' TOKEN -> ^( 'NN-ATMOSPHERE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:465:14: 'NN-ATMOSPHERE' TOKEN
            {
            string_literal782=(Token)match(input,68,FOLLOW_68_in_nnatmosphere3843_static.FOLLOW_68_in_nnatmosphere3843); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_68.add(string_literal782);

            TOKEN783=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnatmosphere3845_static.FOLLOW_TOKEN_in_nnatmosphere3845); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN783);



            // AST REWRITE
            // elements: 68, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 465:36: -> ^( 'NN-ATMOSPHERE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:465:39: ^( 'NN-ATMOSPHERE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_68.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 156, nnatmosphere_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnatmosphere"

    public static class nneq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nneq"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:466:1: nneq : 'NN-EQ' TOKEN -> ^( 'NN-EQ' TOKEN ) ;
    public final ChemicalChunkerParser.nneq_return nneq() throws RecognitionException {
        ChemicalChunkerParser.nneq_return retval = new ChemicalChunkerParser.nneq_return();
        retval.start = input.LT(1);
        int nneq_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal784=null;
        Token TOKEN785=null;

        Object string_literal784_tree=null;
        Object TOKEN785_tree=null;
        RewriteRuleTokenStream stream_69=new RewriteRuleTokenStream(adaptor,"token 69");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:466:5: ( 'NN-EQ' TOKEN -> ^( 'NN-EQ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:466:6: 'NN-EQ' TOKEN
            {
            string_literal784=(Token)match(input,69,FOLLOW_69_in_nneq3858_static.FOLLOW_69_in_nneq3858); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_69.add(string_literal784);

            TOKEN785=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nneq3860_static.FOLLOW_TOKEN_in_nneq3860); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN785);



            // AST REWRITE
            // elements: 69, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 466:20: -> ^( 'NN-EQ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:466:23: ^( 'NN-EQ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_69.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 157, nneq_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nneq"

    public static class nnvol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvol"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:467:1: nnvol : 'NN-VOL' TOKEN -> ^( 'NN-VOL' TOKEN ) ;
    public final ChemicalChunkerParser.nnvol_return nnvol() throws RecognitionException {
        ChemicalChunkerParser.nnvol_return retval = new ChemicalChunkerParser.nnvol_return();
        retval.start = input.LT(1);
        int nnvol_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal786=null;
        Token TOKEN787=null;

        Object string_literal786_tree=null;
        Object TOKEN787_tree=null;
        RewriteRuleTokenStream stream_70=new RewriteRuleTokenStream(adaptor,"token 70");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:467:6: ( 'NN-VOL' TOKEN -> ^( 'NN-VOL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:467:7: 'NN-VOL' TOKEN
            {
            string_literal786=(Token)match(input,70,FOLLOW_70_in_nnvol3873_static.FOLLOW_70_in_nnvol3873); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_70.add(string_literal786);

            TOKEN787=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvol3875_static.FOLLOW_TOKEN_in_nnvol3875); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN787);



            // AST REWRITE
            // elements: TOKEN, 70
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 467:22: -> ^( 'NN-VOL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:467:25: ^( 'NN-VOL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_70.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 158, nnvol_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnvol"

    public static class nnchementity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchementity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:468:1: nnchementity : 'NN-CHEMENTITY' TOKEN -> ^( 'NN-CHEMENTITY' TOKEN ) ;
    public final ChemicalChunkerParser.nnchementity_return nnchementity() throws RecognitionException {
        ChemicalChunkerParser.nnchementity_return retval = new ChemicalChunkerParser.nnchementity_return();
        retval.start = input.LT(1);
        int nnchementity_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal788=null;
        Token TOKEN789=null;

        Object string_literal788_tree=null;
        Object TOKEN789_tree=null;
        RewriteRuleTokenStream stream_71=new RewriteRuleTokenStream(adaptor,"token 71");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:468:13: ( 'NN-CHEMENTITY' TOKEN -> ^( 'NN-CHEMENTITY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:468:14: 'NN-CHEMENTITY' TOKEN
            {
            string_literal788=(Token)match(input,71,FOLLOW_71_in_nnchementity3888_static.FOLLOW_71_in_nnchementity3888); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_71.add(string_literal788);

            TOKEN789=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchementity3890_static.FOLLOW_TOKEN_in_nnchementity3890); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN789);



            // AST REWRITE
            // elements: 71, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 468:36: -> ^( 'NN-CHEMENTITY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:468:39: ^( 'NN-CHEMENTITY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_71.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 159, nnchementity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnchementity"

    public static class nntemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntemp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:1: nntemp : 'NN-TEMP' TOKEN -> ^( 'NN-TEMP' TOKEN ) ;
    public final ChemicalChunkerParser.nntemp_return nntemp() throws RecognitionException {
        ChemicalChunkerParser.nntemp_return retval = new ChemicalChunkerParser.nntemp_return();
        retval.start = input.LT(1);
        int nntemp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal790=null;
        Token TOKEN791=null;

        Object string_literal790_tree=null;
        Object TOKEN791_tree=null;
        RewriteRuleTokenStream stream_72=new RewriteRuleTokenStream(adaptor,"token 72");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:7: ( 'NN-TEMP' TOKEN -> ^( 'NN-TEMP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:8: 'NN-TEMP' TOKEN
            {
            string_literal790=(Token)match(input,72,FOLLOW_72_in_nntemp3903_static.FOLLOW_72_in_nntemp3903); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_72.add(string_literal790);

            TOKEN791=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntemp3905_static.FOLLOW_TOKEN_in_nntemp3905); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN791);



            // AST REWRITE
            // elements: TOKEN, 72
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 469:24: -> ^( 'NN-TEMP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:27: ^( 'NN-TEMP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_72.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 160, nntemp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntemp"

    public static class nnph_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnph"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:470:1: nnph : 'NN-PH' TOKEN -> ^( 'NN-PH' TOKEN ) ;
    public final ChemicalChunkerParser.nnph_return nnph() throws RecognitionException {
        ChemicalChunkerParser.nnph_return retval = new ChemicalChunkerParser.nnph_return();
        retval.start = input.LT(1);
        int nnph_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal792=null;
        Token TOKEN793=null;

        Object string_literal792_tree=null;
        Object TOKEN793_tree=null;
        RewriteRuleTokenStream stream_73=new RewriteRuleTokenStream(adaptor,"token 73");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:470:5: ( 'NN-PH' TOKEN -> ^( 'NN-PH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:470:6: 'NN-PH' TOKEN
            {
            string_literal792=(Token)match(input,73,FOLLOW_73_in_nnph3918_static.FOLLOW_73_in_nnph3918); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_73.add(string_literal792);

            TOKEN793=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnph3920_static.FOLLOW_TOKEN_in_nnph3920); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN793);



            // AST REWRITE
            // elements: TOKEN, 73
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 470:20: -> ^( 'NN-PH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:470:23: ^( 'NN-PH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_73.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 161, nnph_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnph"

    public static class nnflash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnflash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:471:1: nnflash : 'NN-FLASH' TOKEN -> ^( 'NN-FLASH' TOKEN ) ;
    public final ChemicalChunkerParser.nnflash_return nnflash() throws RecognitionException {
        ChemicalChunkerParser.nnflash_return retval = new ChemicalChunkerParser.nnflash_return();
        retval.start = input.LT(1);
        int nnflash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal794=null;
        Token TOKEN795=null;

        Object string_literal794_tree=null;
        Object TOKEN795_tree=null;
        RewriteRuleTokenStream stream_74=new RewriteRuleTokenStream(adaptor,"token 74");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:471:8: ( 'NN-FLASH' TOKEN -> ^( 'NN-FLASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:471:9: 'NN-FLASH' TOKEN
            {
            string_literal794=(Token)match(input,74,FOLLOW_74_in_nnflash3933_static.FOLLOW_74_in_nnflash3933); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_74.add(string_literal794);

            TOKEN795=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnflash3935_static.FOLLOW_TOKEN_in_nnflash3935); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN795);



            // AST REWRITE
            // elements: 74, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 471:26: -> ^( 'NN-FLASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:471:29: ^( 'NN-FLASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_74.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 162, nnflash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnflash"

    public static class nngeneral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nngeneral"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:1: nngeneral : 'NN-GENERAL' TOKEN -> ^( 'NN-GENERAL' TOKEN ) ;
    public final ChemicalChunkerParser.nngeneral_return nngeneral() throws RecognitionException {
        ChemicalChunkerParser.nngeneral_return retval = new ChemicalChunkerParser.nngeneral_return();
        retval.start = input.LT(1);
        int nngeneral_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal796=null;
        Token TOKEN797=null;

        Object string_literal796_tree=null;
        Object TOKEN797_tree=null;
        RewriteRuleTokenStream stream_75=new RewriteRuleTokenStream(adaptor,"token 75");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:10: ( 'NN-GENERAL' TOKEN -> ^( 'NN-GENERAL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:11: 'NN-GENERAL' TOKEN
            {
            string_literal796=(Token)match(input,75,FOLLOW_75_in_nngeneral3948_static.FOLLOW_75_in_nngeneral3948); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_75.add(string_literal796);

            TOKEN797=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nngeneral3950_static.FOLLOW_TOKEN_in_nngeneral3950); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN797);



            // AST REWRITE
            // elements: 75, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 472:30: -> ^( 'NN-GENERAL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:33: ^( 'NN-GENERAL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_75.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 163, nngeneral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nngeneral"

    public static class nnmethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmethod"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:473:1: nnmethod : 'NN-METHOD' TOKEN -> ^( 'NN-METHOD' TOKEN ) ;
    public final ChemicalChunkerParser.nnmethod_return nnmethod() throws RecognitionException {
        ChemicalChunkerParser.nnmethod_return retval = new ChemicalChunkerParser.nnmethod_return();
        retval.start = input.LT(1);
        int nnmethod_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal798=null;
        Token TOKEN799=null;

        Object string_literal798_tree=null;
        Object TOKEN799_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_76=new RewriteRuleTokenStream(adaptor,"token 76");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:473:9: ( 'NN-METHOD' TOKEN -> ^( 'NN-METHOD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:473:10: 'NN-METHOD' TOKEN
            {
            string_literal798=(Token)match(input,76,FOLLOW_76_in_nnmethod3963_static.FOLLOW_76_in_nnmethod3963); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_76.add(string_literal798);

            TOKEN799=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmethod3965_static.FOLLOW_TOKEN_in_nnmethod3965); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN799);



            // AST REWRITE
            // elements: 76, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 473:28: -> ^( 'NN-METHOD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:473:31: ^( 'NN-METHOD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_76.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 164, nnmethod_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmethod"

    public static class nnpressure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpressure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:474:1: nnpressure : 'NN-PRESSURE' TOKEN -> ^( 'NN-PRESSURE' TOKEN ) ;
    public final ChemicalChunkerParser.nnpressure_return nnpressure() throws RecognitionException {
        ChemicalChunkerParser.nnpressure_return retval = new ChemicalChunkerParser.nnpressure_return();
        retval.start = input.LT(1);
        int nnpressure_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal800=null;
        Token TOKEN801=null;

        Object string_literal800_tree=null;
        Object TOKEN801_tree=null;
        RewriteRuleTokenStream stream_77=new RewriteRuleTokenStream(adaptor,"token 77");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:474:11: ( 'NN-PRESSURE' TOKEN -> ^( 'NN-PRESSURE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:474:12: 'NN-PRESSURE' TOKEN
            {
            string_literal800=(Token)match(input,77,FOLLOW_77_in_nnpressure3978_static.FOLLOW_77_in_nnpressure3978); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_77.add(string_literal800);

            TOKEN801=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpressure3980_static.FOLLOW_TOKEN_in_nnpressure3980); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN801);



            // AST REWRITE
            // elements: 77, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 474:32: -> ^( 'NN-PRESSURE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:474:35: ^( 'NN-PRESSURE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_77.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 165, nnpressure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpressure"

    public static class nncolumn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncolumn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:1: nncolumn : 'NN-COLUMN' TOKEN -> ^( 'NN-COLUMN' TOKEN ) ;
    public final ChemicalChunkerParser.nncolumn_return nncolumn() throws RecognitionException {
        ChemicalChunkerParser.nncolumn_return retval = new ChemicalChunkerParser.nncolumn_return();
        retval.start = input.LT(1);
        int nncolumn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal802=null;
        Token TOKEN803=null;

        Object string_literal802_tree=null;
        Object TOKEN803_tree=null;
        RewriteRuleTokenStream stream_78=new RewriteRuleTokenStream(adaptor,"token 78");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:9: ( 'NN-COLUMN' TOKEN -> ^( 'NN-COLUMN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:10: 'NN-COLUMN' TOKEN
            {
            string_literal802=(Token)match(input,78,FOLLOW_78_in_nncolumn3993_static.FOLLOW_78_in_nncolumn3993); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_78.add(string_literal802);

            TOKEN803=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncolumn3995_static.FOLLOW_TOKEN_in_nncolumn3995); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN803);



            // AST REWRITE
            // elements: 78, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 475:28: -> ^( 'NN-COLUMN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:31: ^( 'NN-COLUMN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_78.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 166, nncolumn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nncolumn"

    public static class nnchromatography_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchromatography"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:1: nnchromatography : 'NN-CHROMATOGRAPHY' TOKEN -> ^( 'NN-CHROMATOGRAPHY' TOKEN ) ;
    public final ChemicalChunkerParser.nnchromatography_return nnchromatography() throws RecognitionException {
        ChemicalChunkerParser.nnchromatography_return retval = new ChemicalChunkerParser.nnchromatography_return();
        retval.start = input.LT(1);
        int nnchromatography_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal804=null;
        Token TOKEN805=null;

        Object string_literal804_tree=null;
        Object TOKEN805_tree=null;
        RewriteRuleTokenStream stream_79=new RewriteRuleTokenStream(adaptor,"token 79");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:17: ( 'NN-CHROMATOGRAPHY' TOKEN -> ^( 'NN-CHROMATOGRAPHY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:18: 'NN-CHROMATOGRAPHY' TOKEN
            {
            string_literal804=(Token)match(input,79,FOLLOW_79_in_nnchromatography4008_static.FOLLOW_79_in_nnchromatography4008); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_79.add(string_literal804);

            TOKEN805=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchromatography4010_static.FOLLOW_TOKEN_in_nnchromatography4010); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN805);



            // AST REWRITE
            // elements: 79, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 476:44: -> ^( 'NN-CHROMATOGRAPHY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:47: ^( 'NN-CHROMATOGRAPHY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_79.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 167, nnchromatography_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnchromatography"

    public static class nnvacuum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvacuum"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:477:1: nnvacuum : 'NN-VACUUM' TOKEN -> ^( 'NN-VACUUM' TOKEN ) ;
    public final ChemicalChunkerParser.nnvacuum_return nnvacuum() throws RecognitionException {
        ChemicalChunkerParser.nnvacuum_return retval = new ChemicalChunkerParser.nnvacuum_return();
        retval.start = input.LT(1);
        int nnvacuum_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal806=null;
        Token TOKEN807=null;

        Object string_literal806_tree=null;
        Object TOKEN807_tree=null;
        RewriteRuleTokenStream stream_80=new RewriteRuleTokenStream(adaptor,"token 80");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:477:9: ( 'NN-VACUUM' TOKEN -> ^( 'NN-VACUUM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:477:10: 'NN-VACUUM' TOKEN
            {
            string_literal806=(Token)match(input,80,FOLLOW_80_in_nnvacuum4023_static.FOLLOW_80_in_nnvacuum4023); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_80.add(string_literal806);

            TOKEN807=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvacuum4025_static.FOLLOW_TOKEN_in_nnvacuum4025); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN807);



            // AST REWRITE
            // elements: 80, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 477:28: -> ^( 'NN-VACUUM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:477:31: ^( 'NN-VACUUM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_80.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 168, nnvacuum_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnvacuum"

    public static class nncycle_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncycle"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:478:1: nncycle : 'NN-CYCLE' TOKEN -> ^( 'NN-CYCLE' TOKEN ) ;
    public final ChemicalChunkerParser.nncycle_return nncycle() throws RecognitionException {
        ChemicalChunkerParser.nncycle_return retval = new ChemicalChunkerParser.nncycle_return();
        retval.start = input.LT(1);
        int nncycle_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal808=null;
        Token TOKEN809=null;

        Object string_literal808_tree=null;
        Object TOKEN809_tree=null;
        RewriteRuleTokenStream stream_81=new RewriteRuleTokenStream(adaptor,"token 81");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:478:8: ( 'NN-CYCLE' TOKEN -> ^( 'NN-CYCLE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:478:9: 'NN-CYCLE' TOKEN
            {
            string_literal808=(Token)match(input,81,FOLLOW_81_in_nncycle4038_static.FOLLOW_81_in_nncycle4038); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_81.add(string_literal808);

            TOKEN809=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncycle4040_static.FOLLOW_TOKEN_in_nncycle4040); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN809);



            // AST REWRITE
            // elements: TOKEN, 81
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 478:26: -> ^( 'NN-CYCLE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:478:29: ^( 'NN-CYCLE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_81.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 169, nncycle_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nncycle"

    public static class nntimes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntimes"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:479:1: nntimes : 'NN-TIMES' TOKEN -> ^( 'NN-TIMES' TOKEN ) ;
    public final ChemicalChunkerParser.nntimes_return nntimes() throws RecognitionException {
        ChemicalChunkerParser.nntimes_return retval = new ChemicalChunkerParser.nntimes_return();
        retval.start = input.LT(1);
        int nntimes_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal810=null;
        Token TOKEN811=null;

        Object string_literal810_tree=null;
        Object TOKEN811_tree=null;
        RewriteRuleTokenStream stream_82=new RewriteRuleTokenStream(adaptor,"token 82");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:479:8: ( 'NN-TIMES' TOKEN -> ^( 'NN-TIMES' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:479:9: 'NN-TIMES' TOKEN
            {
            string_literal810=(Token)match(input,82,FOLLOW_82_in_nntimes4053_static.FOLLOW_82_in_nntimes4053); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_82.add(string_literal810);

            TOKEN811=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntimes4055_static.FOLLOW_TOKEN_in_nntimes4055); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN811);



            // AST REWRITE
            // elements: 82, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 479:26: -> ^( 'NN-TIMES' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:479:29: ^( 'NN-TIMES' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_82.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 170, nntimes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntimes"

    public static class nnexample_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnexample"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:480:1: nnexample : 'NN-EXAMPLE' TOKEN -> ^( 'NN-EXAMPLE' TOKEN ) ;
    public final ChemicalChunkerParser.nnexample_return nnexample() throws RecognitionException {
        ChemicalChunkerParser.nnexample_return retval = new ChemicalChunkerParser.nnexample_return();
        retval.start = input.LT(1);
        int nnexample_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal812=null;
        Token TOKEN813=null;

        Object string_literal812_tree=null;
        Object TOKEN813_tree=null;
        RewriteRuleTokenStream stream_83=new RewriteRuleTokenStream(adaptor,"token 83");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:480:10: ( 'NN-EXAMPLE' TOKEN -> ^( 'NN-EXAMPLE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:480:11: 'NN-EXAMPLE' TOKEN
            {
            string_literal812=(Token)match(input,83,FOLLOW_83_in_nnexample4068_static.FOLLOW_83_in_nnexample4068); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_83.add(string_literal812);

            TOKEN813=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnexample4070_static.FOLLOW_TOKEN_in_nnexample4070); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN813);



            // AST REWRITE
            // elements: 83, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 480:30: -> ^( 'NN-EXAMPLE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:480:33: ^( 'NN-EXAMPLE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_83.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 171, nnexample_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnexample"

    public static class oscarcm_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcm"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:483:1: oscarcm : 'OSCAR-CM' TOKEN -> ^( 'OSCAR-CM' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcm_return oscarcm() throws RecognitionException {
        ChemicalChunkerParser.oscarcm_return retval = new ChemicalChunkerParser.oscarcm_return();
        retval.start = input.LT(1);
        int oscarcm_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal814=null;
        Token TOKEN815=null;

        Object string_literal814_tree=null;
        Object TOKEN815_tree=null;
        RewriteRuleTokenStream stream_84=new RewriteRuleTokenStream(adaptor,"token 84");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:483:8: ( 'OSCAR-CM' TOKEN -> ^( 'OSCAR-CM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:483:9: 'OSCAR-CM' TOKEN
            {
            string_literal814=(Token)match(input,84,FOLLOW_84_in_oscarcm4085_static.FOLLOW_84_in_oscarcm4085); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_84.add(string_literal814);

            TOKEN815=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcm4087_static.FOLLOW_TOKEN_in_oscarcm4087); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN815);



            // AST REWRITE
            // elements: 84, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 483:26: -> ^( 'OSCAR-CM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:483:29: ^( 'OSCAR-CM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_84.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 172, oscarcm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarcm"

    public static class vbuse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbuse"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:486:1: vbuse : 'VB-USE' TOKEN -> ^( 'VB-USE' TOKEN ) ;
    public final ChemicalChunkerParser.vbuse_return vbuse() throws RecognitionException {
        ChemicalChunkerParser.vbuse_return retval = new ChemicalChunkerParser.vbuse_return();
        retval.start = input.LT(1);
        int vbuse_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal816=null;
        Token TOKEN817=null;

        Object string_literal816_tree=null;
        Object TOKEN817_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_85=new RewriteRuleTokenStream(adaptor,"token 85");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:486:6: ( 'VB-USE' TOKEN -> ^( 'VB-USE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:486:7: 'VB-USE' TOKEN
            {
            string_literal816=(Token)match(input,85,FOLLOW_85_in_vbuse4102_static.FOLLOW_85_in_vbuse4102); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_85.add(string_literal816);

            TOKEN817=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbuse4104_static.FOLLOW_TOKEN_in_vbuse4104); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN817);



            // AST REWRITE
            // elements: TOKEN, 85
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 486:22: -> ^( 'VB-USE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:486:25: ^( 'VB-USE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_85.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 173, vbuse_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbuse"

    public static class vbchange_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbchange"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:487:1: vbchange : 'VB-CHANGE' TOKEN -> ^( 'VB-CHANGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbchange_return vbchange() throws RecognitionException {
        ChemicalChunkerParser.vbchange_return retval = new ChemicalChunkerParser.vbchange_return();
        retval.start = input.LT(1);
        int vbchange_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal818=null;
        Token TOKEN819=null;

        Object string_literal818_tree=null;
        Object TOKEN819_tree=null;
        RewriteRuleTokenStream stream_86=new RewriteRuleTokenStream(adaptor,"token 86");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:487:9: ( 'VB-CHANGE' TOKEN -> ^( 'VB-CHANGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:487:10: 'VB-CHANGE' TOKEN
            {
            string_literal818=(Token)match(input,86,FOLLOW_86_in_vbchange4117_static.FOLLOW_86_in_vbchange4117); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_86.add(string_literal818);

            TOKEN819=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbchange4119_static.FOLLOW_TOKEN_in_vbchange4119); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN819);



            // AST REWRITE
            // elements: TOKEN, 86
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 487:28: -> ^( 'VB-CHANGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:487:31: ^( 'VB-CHANGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_86.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 174, vbchange_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbchange"

    public static class vbsubmerge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubmerge"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:488:1: vbsubmerge : 'VB-SUBMERGE' TOKEN -> ^( 'VB-SUBMERGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbsubmerge_return vbsubmerge() throws RecognitionException {
        ChemicalChunkerParser.vbsubmerge_return retval = new ChemicalChunkerParser.vbsubmerge_return();
        retval.start = input.LT(1);
        int vbsubmerge_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal820=null;
        Token TOKEN821=null;

        Object string_literal820_tree=null;
        Object TOKEN821_tree=null;
        RewriteRuleTokenStream stream_87=new RewriteRuleTokenStream(adaptor,"token 87");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:488:11: ( 'VB-SUBMERGE' TOKEN -> ^( 'VB-SUBMERGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:488:12: 'VB-SUBMERGE' TOKEN
            {
            string_literal820=(Token)match(input,87,FOLLOW_87_in_vbsubmerge4132_static.FOLLOW_87_in_vbsubmerge4132); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_87.add(string_literal820);

            TOKEN821=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubmerge4134_static.FOLLOW_TOKEN_in_vbsubmerge4134); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN821);



            // AST REWRITE
            // elements: TOKEN, 87
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 488:32: -> ^( 'VB-SUBMERGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:488:35: ^( 'VB-SUBMERGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_87.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 175, vbsubmerge_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsubmerge"

    public static class vbsubject_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubject"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:1: vbsubject : 'VB-SUBJECT' TOKEN -> ^( 'VB-SUBJECT' TOKEN ) ;
    public final ChemicalChunkerParser.vbsubject_return vbsubject() throws RecognitionException {
        ChemicalChunkerParser.vbsubject_return retval = new ChemicalChunkerParser.vbsubject_return();
        retval.start = input.LT(1);
        int vbsubject_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal822=null;
        Token TOKEN823=null;

        Object string_literal822_tree=null;
        Object TOKEN823_tree=null;
        RewriteRuleTokenStream stream_88=new RewriteRuleTokenStream(adaptor,"token 88");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:10: ( 'VB-SUBJECT' TOKEN -> ^( 'VB-SUBJECT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:11: 'VB-SUBJECT' TOKEN
            {
            string_literal822=(Token)match(input,88,FOLLOW_88_in_vbsubject4147_static.FOLLOW_88_in_vbsubject4147); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_88.add(string_literal822);

            TOKEN823=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubject4149_static.FOLLOW_TOKEN_in_vbsubject4149); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN823);



            // AST REWRITE
            // elements: 88, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 489:30: -> ^( 'VB-SUBJECT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:33: ^( 'VB-SUBJECT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_88.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 176, vbsubject_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsubject"

    public static class nnadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnadd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:492:1: nnadd : 'NN-ADD' TOKEN -> ^( 'NN-ADD' TOKEN ) ;
    public final ChemicalChunkerParser.nnadd_return nnadd() throws RecognitionException {
        ChemicalChunkerParser.nnadd_return retval = new ChemicalChunkerParser.nnadd_return();
        retval.start = input.LT(1);
        int nnadd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal824=null;
        Token TOKEN825=null;

        Object string_literal824_tree=null;
        Object TOKEN825_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_89=new RewriteRuleTokenStream(adaptor,"token 89");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 177) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:492:6: ( 'NN-ADD' TOKEN -> ^( 'NN-ADD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:492:7: 'NN-ADD' TOKEN
            {
            string_literal824=(Token)match(input,89,FOLLOW_89_in_nnadd4164_static.FOLLOW_89_in_nnadd4164); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_89.add(string_literal824);

            TOKEN825=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnadd4166_static.FOLLOW_TOKEN_in_nnadd4166); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN825);



            // AST REWRITE
            // elements: 89, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 492:22: -> ^( 'NN-ADD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:492:25: ^( 'NN-ADD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_89.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 177, nnadd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnadd"

    public static class nnmixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmixture"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:493:1: nnmixture : 'NN-MIXTURE' TOKEN -> ^( 'NN-MIXTURE' TOKEN ) ;
    public final ChemicalChunkerParser.nnmixture_return nnmixture() throws RecognitionException {
        ChemicalChunkerParser.nnmixture_return retval = new ChemicalChunkerParser.nnmixture_return();
        retval.start = input.LT(1);
        int nnmixture_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal826=null;
        Token TOKEN827=null;

        Object string_literal826_tree=null;
        Object TOKEN827_tree=null;
        RewriteRuleTokenStream stream_90=new RewriteRuleTokenStream(adaptor,"token 90");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 178) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:493:10: ( 'NN-MIXTURE' TOKEN -> ^( 'NN-MIXTURE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:493:11: 'NN-MIXTURE' TOKEN
            {
            string_literal826=(Token)match(input,90,FOLLOW_90_in_nnmixture4179_static.FOLLOW_90_in_nnmixture4179); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_90.add(string_literal826);

            TOKEN827=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmixture4181_static.FOLLOW_TOKEN_in_nnmixture4181); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN827);



            // AST REWRITE
            // elements: TOKEN, 90
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 493:30: -> ^( 'NN-MIXTURE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:493:33: ^( 'NN-MIXTURE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_90.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 178, nnmixture_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmixture"

    public static class vbdilute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdilute"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:494:1: vbdilute : 'VB-DILUTE' TOKEN -> ^( 'VB-DILUTE' TOKEN ) ;
    public final ChemicalChunkerParser.vbdilute_return vbdilute() throws RecognitionException {
        ChemicalChunkerParser.vbdilute_return retval = new ChemicalChunkerParser.vbdilute_return();
        retval.start = input.LT(1);
        int vbdilute_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal828=null;
        Token TOKEN829=null;

        Object string_literal828_tree=null;
        Object TOKEN829_tree=null;
        RewriteRuleTokenStream stream_91=new RewriteRuleTokenStream(adaptor,"token 91");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 179) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:494:9: ( 'VB-DILUTE' TOKEN -> ^( 'VB-DILUTE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:494:10: 'VB-DILUTE' TOKEN
            {
            string_literal828=(Token)match(input,91,FOLLOW_91_in_vbdilute4194_static.FOLLOW_91_in_vbdilute4194); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_91.add(string_literal828);

            TOKEN829=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdilute4196_static.FOLLOW_TOKEN_in_vbdilute4196); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN829);



            // AST REWRITE
            // elements: TOKEN, 91
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 494:28: -> ^( 'VB-DILUTE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:494:31: ^( 'VB-DILUTE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_91.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 179, vbdilute_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdilute"

    public static class vbadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbadd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:495:1: vbadd : 'VB-ADD' TOKEN -> ^( 'VB-ADD' TOKEN ) ;
    public final ChemicalChunkerParser.vbadd_return vbadd() throws RecognitionException {
        ChemicalChunkerParser.vbadd_return retval = new ChemicalChunkerParser.vbadd_return();
        retval.start = input.LT(1);
        int vbadd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal830=null;
        Token TOKEN831=null;

        Object string_literal830_tree=null;
        Object TOKEN831_tree=null;
        RewriteRuleTokenStream stream_92=new RewriteRuleTokenStream(adaptor,"token 92");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 180) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:495:6: ( 'VB-ADD' TOKEN -> ^( 'VB-ADD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:495:7: 'VB-ADD' TOKEN
            {
            string_literal830=(Token)match(input,92,FOLLOW_92_in_vbadd4209_static.FOLLOW_92_in_vbadd4209); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_92.add(string_literal830);

            TOKEN831=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbadd4211_static.FOLLOW_TOKEN_in_vbadd4211); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN831);



            // AST REWRITE
            // elements: TOKEN, 92
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 495:22: -> ^( 'VB-ADD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:495:25: ^( 'VB-ADD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_92.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 180, vbadd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbadd"

    public static class vbcharge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcharge"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:496:1: vbcharge : 'VB-CHARGE' TOKEN -> ^( 'VB-CHARGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbcharge_return vbcharge() throws RecognitionException {
        ChemicalChunkerParser.vbcharge_return retval = new ChemicalChunkerParser.vbcharge_return();
        retval.start = input.LT(1);
        int vbcharge_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal832=null;
        Token TOKEN833=null;

        Object string_literal832_tree=null;
        Object TOKEN833_tree=null;
        RewriteRuleTokenStream stream_93=new RewriteRuleTokenStream(adaptor,"token 93");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 181) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:496:9: ( 'VB-CHARGE' TOKEN -> ^( 'VB-CHARGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:496:10: 'VB-CHARGE' TOKEN
            {
            string_literal832=(Token)match(input,93,FOLLOW_93_in_vbcharge4224_static.FOLLOW_93_in_vbcharge4224); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_93.add(string_literal832);

            TOKEN833=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcharge4226_static.FOLLOW_TOKEN_in_vbcharge4226); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN833);



            // AST REWRITE
            // elements: TOKEN, 93
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 496:28: -> ^( 'VB-CHARGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:496:31: ^( 'VB-CHARGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_93.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 181, vbcharge_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcharge"

    public static class vbcontain_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcontain"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:497:1: vbcontain : 'VB-CONTAIN' TOKEN -> ^( 'VB-CONTAIN' TOKEN ) ;
    public final ChemicalChunkerParser.vbcontain_return vbcontain() throws RecognitionException {
        ChemicalChunkerParser.vbcontain_return retval = new ChemicalChunkerParser.vbcontain_return();
        retval.start = input.LT(1);
        int vbcontain_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal834=null;
        Token TOKEN835=null;

        Object string_literal834_tree=null;
        Object TOKEN835_tree=null;
        RewriteRuleTokenStream stream_94=new RewriteRuleTokenStream(adaptor,"token 94");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 182) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:497:10: ( 'VB-CONTAIN' TOKEN -> ^( 'VB-CONTAIN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:497:11: 'VB-CONTAIN' TOKEN
            {
            string_literal834=(Token)match(input,94,FOLLOW_94_in_vbcontain4239_static.FOLLOW_94_in_vbcontain4239); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_94.add(string_literal834);

            TOKEN835=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcontain4241_static.FOLLOW_TOKEN_in_vbcontain4241); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN835);



            // AST REWRITE
            // elements: TOKEN, 94
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 497:30: -> ^( 'VB-CONTAIN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:497:33: ^( 'VB-CONTAIN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_94.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 182, vbcontain_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcontain"

    public static class vbdrop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdrop"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:498:1: vbdrop : 'VB-DROP' TOKEN -> ^( 'VB-DROP' TOKEN ) ;
    public final ChemicalChunkerParser.vbdrop_return vbdrop() throws RecognitionException {
        ChemicalChunkerParser.vbdrop_return retval = new ChemicalChunkerParser.vbdrop_return();
        retval.start = input.LT(1);
        int vbdrop_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal836=null;
        Token TOKEN837=null;

        Object string_literal836_tree=null;
        Object TOKEN837_tree=null;
        RewriteRuleTokenStream stream_95=new RewriteRuleTokenStream(adaptor,"token 95");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 183) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:498:7: ( 'VB-DROP' TOKEN -> ^( 'VB-DROP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:498:8: 'VB-DROP' TOKEN
            {
            string_literal836=(Token)match(input,95,FOLLOW_95_in_vbdrop4254_static.FOLLOW_95_in_vbdrop4254); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_95.add(string_literal836);

            TOKEN837=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdrop4256_static.FOLLOW_TOKEN_in_vbdrop4256); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN837);



            // AST REWRITE
            // elements: TOKEN, 95
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 498:24: -> ^( 'VB-DROP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:498:27: ^( 'VB-DROP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_95.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 183, vbdrop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdrop"

    public static class vbfill_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfill"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:499:1: vbfill : 'VB-FILL' TOKEN -> ^( 'VB-FILL' TOKEN ) ;
    public final ChemicalChunkerParser.vbfill_return vbfill() throws RecognitionException {
        ChemicalChunkerParser.vbfill_return retval = new ChemicalChunkerParser.vbfill_return();
        retval.start = input.LT(1);
        int vbfill_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal838=null;
        Token TOKEN839=null;

        Object string_literal838_tree=null;
        Object TOKEN839_tree=null;
        RewriteRuleTokenStream stream_96=new RewriteRuleTokenStream(adaptor,"token 96");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 184) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:499:7: ( 'VB-FILL' TOKEN -> ^( 'VB-FILL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:499:8: 'VB-FILL' TOKEN
            {
            string_literal838=(Token)match(input,96,FOLLOW_96_in_vbfill4269_static.FOLLOW_96_in_vbfill4269); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_96.add(string_literal838);

            TOKEN839=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfill4271_static.FOLLOW_TOKEN_in_vbfill4271); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN839);



            // AST REWRITE
            // elements: TOKEN, 96
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 499:24: -> ^( 'VB-FILL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:499:27: ^( 'VB-FILL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_96.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 184, vbfill_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbfill"

    public static class vbsuspend_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsuspend"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:500:1: vbsuspend : 'VB-SUSPEND' TOKEN -> ^( 'VB-SUSPEND' TOKEN ) ;
    public final ChemicalChunkerParser.vbsuspend_return vbsuspend() throws RecognitionException {
        ChemicalChunkerParser.vbsuspend_return retval = new ChemicalChunkerParser.vbsuspend_return();
        retval.start = input.LT(1);
        int vbsuspend_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal840=null;
        Token TOKEN841=null;

        Object string_literal840_tree=null;
        Object TOKEN841_tree=null;
        RewriteRuleTokenStream stream_97=new RewriteRuleTokenStream(adaptor,"token 97");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 185) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:500:10: ( 'VB-SUSPEND' TOKEN -> ^( 'VB-SUSPEND' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:500:11: 'VB-SUSPEND' TOKEN
            {
            string_literal840=(Token)match(input,97,FOLLOW_97_in_vbsuspend4284_static.FOLLOW_97_in_vbsuspend4284); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_97.add(string_literal840);

            TOKEN841=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsuspend4286_static.FOLLOW_TOKEN_in_vbsuspend4286); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN841);



            // AST REWRITE
            // elements: 97, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 500:30: -> ^( 'VB-SUSPEND' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:500:33: ^( 'VB-SUSPEND' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_97.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 185, vbsuspend_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsuspend"

    public static class vbtreat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbtreat"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:501:1: vbtreat : 'VB-TREAT' TOKEN -> ^( 'VB-TREAT' TOKEN ) ;
    public final ChemicalChunkerParser.vbtreat_return vbtreat() throws RecognitionException {
        ChemicalChunkerParser.vbtreat_return retval = new ChemicalChunkerParser.vbtreat_return();
        retval.start = input.LT(1);
        int vbtreat_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal842=null;
        Token TOKEN843=null;

        Object string_literal842_tree=null;
        Object TOKEN843_tree=null;
        RewriteRuleTokenStream stream_98=new RewriteRuleTokenStream(adaptor,"token 98");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 186) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:501:8: ( 'VB-TREAT' TOKEN -> ^( 'VB-TREAT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:501:9: 'VB-TREAT' TOKEN
            {
            string_literal842=(Token)match(input,98,FOLLOW_98_in_vbtreat4299_static.FOLLOW_98_in_vbtreat4299); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_98.add(string_literal842);

            TOKEN843=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbtreat4301_static.FOLLOW_TOKEN_in_vbtreat4301); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN843);



            // AST REWRITE
            // elements: 98, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 501:26: -> ^( 'VB-TREAT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:501:29: ^( 'VB-TREAT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_98.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 186, vbtreat_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbtreat"

    public static class vbapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:504:1: vbapparatus : 'VB-APPARATUS' TOKEN -> ^( 'VB-APPARATUS' TOKEN ) ;
    public final ChemicalChunkerParser.vbapparatus_return vbapparatus() throws RecognitionException {
        ChemicalChunkerParser.vbapparatus_return retval = new ChemicalChunkerParser.vbapparatus_return();
        retval.start = input.LT(1);
        int vbapparatus_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal844=null;
        Token TOKEN845=null;

        Object string_literal844_tree=null;
        Object TOKEN845_tree=null;
        RewriteRuleTokenStream stream_99=new RewriteRuleTokenStream(adaptor,"token 99");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 187) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:504:12: ( 'VB-APPARATUS' TOKEN -> ^( 'VB-APPARATUS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:504:13: 'VB-APPARATUS' TOKEN
            {
            string_literal844=(Token)match(input,99,FOLLOW_99_in_vbapparatus4316_static.FOLLOW_99_in_vbapparatus4316); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_99.add(string_literal844);

            TOKEN845=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbapparatus4318_static.FOLLOW_TOKEN_in_vbapparatus4318); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN845);



            // AST REWRITE
            // elements: 99, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 504:34: -> ^( 'VB-APPARATUS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:504:37: ^( 'VB-APPARATUS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_99.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 187, vbapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbapparatus"

    public static class nnapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:505:1: nnapparatus : 'NN-APPARATUS' TOKEN -> ^( 'NN-APPARATUS' TOKEN ) ;
    public final ChemicalChunkerParser.nnapparatus_return nnapparatus() throws RecognitionException {
        ChemicalChunkerParser.nnapparatus_return retval = new ChemicalChunkerParser.nnapparatus_return();
        retval.start = input.LT(1);
        int nnapparatus_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal846=null;
        Token TOKEN847=null;

        Object string_literal846_tree=null;
        Object TOKEN847_tree=null;
        RewriteRuleTokenStream stream_100=new RewriteRuleTokenStream(adaptor,"token 100");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 188) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:505:12: ( 'NN-APPARATUS' TOKEN -> ^( 'NN-APPARATUS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:505:13: 'NN-APPARATUS' TOKEN
            {
            string_literal846=(Token)match(input,100,FOLLOW_100_in_nnapparatus4331_static.FOLLOW_100_in_nnapparatus4331); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_100.add(string_literal846);

            TOKEN847=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnapparatus4333_static.FOLLOW_TOKEN_in_nnapparatus4333); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN847);



            // AST REWRITE
            // elements: 100, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 505:34: -> ^( 'NN-APPARATUS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:505:37: ^( 'NN-APPARATUS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_100.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 188, nnapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnapparatus"

    public static class vbconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbconcentrate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:508:1: vbconcentrate : 'VB-CONCENTRATE' TOKEN -> ^( 'VB-CONCENTRATE' TOKEN ) ;
    public final ChemicalChunkerParser.vbconcentrate_return vbconcentrate() throws RecognitionException {
        ChemicalChunkerParser.vbconcentrate_return retval = new ChemicalChunkerParser.vbconcentrate_return();
        retval.start = input.LT(1);
        int vbconcentrate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal848=null;
        Token TOKEN849=null;

        Object string_literal848_tree=null;
        Object TOKEN849_tree=null;
        RewriteRuleTokenStream stream_101=new RewriteRuleTokenStream(adaptor,"token 101");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 189) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:508:14: ( 'VB-CONCENTRATE' TOKEN -> ^( 'VB-CONCENTRATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:508:15: 'VB-CONCENTRATE' TOKEN
            {
            string_literal848=(Token)match(input,101,FOLLOW_101_in_vbconcentrate4348_static.FOLLOW_101_in_vbconcentrate4348); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_101.add(string_literal848);

            TOKEN849=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbconcentrate4350_static.FOLLOW_TOKEN_in_vbconcentrate4350); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN849);



            // AST REWRITE
            // elements: 101, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 508:38: -> ^( 'VB-CONCENTRATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:508:41: ^( 'VB-CONCENTRATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_101.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 189, vbconcentrate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbconcentrate"

    public static class nnconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnconcentrate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:509:1: nnconcentrate : 'NN-CONCENTRATE' TOKEN -> ^( 'NN-CONCENTRATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnconcentrate_return nnconcentrate() throws RecognitionException {
        ChemicalChunkerParser.nnconcentrate_return retval = new ChemicalChunkerParser.nnconcentrate_return();
        retval.start = input.LT(1);
        int nnconcentrate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal850=null;
        Token TOKEN851=null;

        Object string_literal850_tree=null;
        Object TOKEN851_tree=null;
        RewriteRuleTokenStream stream_102=new RewriteRuleTokenStream(adaptor,"token 102");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 190) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:509:14: ( 'NN-CONCENTRATE' TOKEN -> ^( 'NN-CONCENTRATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:509:15: 'NN-CONCENTRATE' TOKEN
            {
            string_literal850=(Token)match(input,102,FOLLOW_102_in_nnconcentrate4363_static.FOLLOW_102_in_nnconcentrate4363); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_102.add(string_literal850);

            TOKEN851=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnconcentrate4365_static.FOLLOW_TOKEN_in_nnconcentrate4365); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN851);



            // AST REWRITE
            // elements: TOKEN, 102
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 509:38: -> ^( 'NN-CONCENTRATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:509:41: ^( 'NN-CONCENTRATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_102.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 190, nnconcentrate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnconcentrate"

    public static class vbcool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcool"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:512:1: vbcool : 'VB-COOL' TOKEN -> ^( 'VB-COOL' TOKEN ) ;
    public final ChemicalChunkerParser.vbcool_return vbcool() throws RecognitionException {
        ChemicalChunkerParser.vbcool_return retval = new ChemicalChunkerParser.vbcool_return();
        retval.start = input.LT(1);
        int vbcool_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal852=null;
        Token TOKEN853=null;

        Object string_literal852_tree=null;
        Object TOKEN853_tree=null;
        RewriteRuleTokenStream stream_103=new RewriteRuleTokenStream(adaptor,"token 103");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 191) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:512:7: ( 'VB-COOL' TOKEN -> ^( 'VB-COOL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:512:8: 'VB-COOL' TOKEN
            {
            string_literal852=(Token)match(input,103,FOLLOW_103_in_vbcool4380_static.FOLLOW_103_in_vbcool4380); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_103.add(string_literal852);

            TOKEN853=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcool4382_static.FOLLOW_TOKEN_in_vbcool4382); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN853);



            // AST REWRITE
            // elements: 103, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 512:24: -> ^( 'VB-COOL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:512:27: ^( 'VB-COOL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_103.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 191, vbcool_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcool"

    public static class vbdegass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdegass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:515:1: vbdegass : 'VB-DEGASS' TOKEN -> ^( 'VB-DEGASS' TOKEN ) ;
    public final ChemicalChunkerParser.vbdegass_return vbdegass() throws RecognitionException {
        ChemicalChunkerParser.vbdegass_return retval = new ChemicalChunkerParser.vbdegass_return();
        retval.start = input.LT(1);
        int vbdegass_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal854=null;
        Token TOKEN855=null;

        Object string_literal854_tree=null;
        Object TOKEN855_tree=null;
        RewriteRuleTokenStream stream_104=new RewriteRuleTokenStream(adaptor,"token 104");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 192) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:515:9: ( 'VB-DEGASS' TOKEN -> ^( 'VB-DEGASS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:515:10: 'VB-DEGASS' TOKEN
            {
            string_literal854=(Token)match(input,104,FOLLOW_104_in_vbdegass4397_static.FOLLOW_104_in_vbdegass4397); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_104.add(string_literal854);

            TOKEN855=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdegass4399_static.FOLLOW_TOKEN_in_vbdegass4399); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN855);



            // AST REWRITE
            // elements: 104, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 515:28: -> ^( 'VB-DEGASS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:515:31: ^( 'VB-DEGASS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_104.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 192, vbdegass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdegass"

    public static class vbdissolve_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdissolve"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:518:1: vbdissolve : 'VB-DISSOLVE' TOKEN -> ^( 'VB-DISSOLVE' TOKEN ) ;
    public final ChemicalChunkerParser.vbdissolve_return vbdissolve() throws RecognitionException {
        ChemicalChunkerParser.vbdissolve_return retval = new ChemicalChunkerParser.vbdissolve_return();
        retval.start = input.LT(1);
        int vbdissolve_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal856=null;
        Token TOKEN857=null;

        Object string_literal856_tree=null;
        Object TOKEN857_tree=null;
        RewriteRuleTokenStream stream_105=new RewriteRuleTokenStream(adaptor,"token 105");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 193) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:518:11: ( 'VB-DISSOLVE' TOKEN -> ^( 'VB-DISSOLVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:518:12: 'VB-DISSOLVE' TOKEN
            {
            string_literal856=(Token)match(input,105,FOLLOW_105_in_vbdissolve4414_static.FOLLOW_105_in_vbdissolve4414); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_105.add(string_literal856);

            TOKEN857=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdissolve4416_static.FOLLOW_TOKEN_in_vbdissolve4416); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN857);



            // AST REWRITE
            // elements: TOKEN, 105
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 518:32: -> ^( 'VB-DISSOLVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:518:35: ^( 'VB-DISSOLVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_105.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 193, vbdissolve_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdissolve"

    public static class vbdry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdry"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:521:1: vbdry : 'VB-DRY' TOKEN -> ^( 'VB-DRY' TOKEN ) ;
    public final ChemicalChunkerParser.vbdry_return vbdry() throws RecognitionException {
        ChemicalChunkerParser.vbdry_return retval = new ChemicalChunkerParser.vbdry_return();
        retval.start = input.LT(1);
        int vbdry_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal858=null;
        Token TOKEN859=null;

        Object string_literal858_tree=null;
        Object TOKEN859_tree=null;
        RewriteRuleTokenStream stream_106=new RewriteRuleTokenStream(adaptor,"token 106");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 194) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:521:6: ( 'VB-DRY' TOKEN -> ^( 'VB-DRY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:521:7: 'VB-DRY' TOKEN
            {
            string_literal858=(Token)match(input,106,FOLLOW_106_in_vbdry4431_static.FOLLOW_106_in_vbdry4431); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_106.add(string_literal858);

            TOKEN859=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdry4433_static.FOLLOW_TOKEN_in_vbdry4433); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN859);



            // AST REWRITE
            // elements: 106, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 521:22: -> ^( 'VB-DRY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:521:25: ^( 'VB-DRY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_106.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 194, vbdry_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdry"

    public static class nndry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nndry"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:522:1: nndry : 'NN-DRY' TOKEN -> ^( 'NN-DRY' TOKEN ) ;
    public final ChemicalChunkerParser.nndry_return nndry() throws RecognitionException {
        ChemicalChunkerParser.nndry_return retval = new ChemicalChunkerParser.nndry_return();
        retval.start = input.LT(1);
        int nndry_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal860=null;
        Token TOKEN861=null;

        Object string_literal860_tree=null;
        Object TOKEN861_tree=null;
        RewriteRuleTokenStream stream_107=new RewriteRuleTokenStream(adaptor,"token 107");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 195) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:522:6: ( 'NN-DRY' TOKEN -> ^( 'NN-DRY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:522:7: 'NN-DRY' TOKEN
            {
            string_literal860=(Token)match(input,107,FOLLOW_107_in_nndry4446_static.FOLLOW_107_in_nndry4446); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_107.add(string_literal860);

            TOKEN861=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nndry4448_static.FOLLOW_TOKEN_in_nndry4448); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN861);



            // AST REWRITE
            // elements: 107, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 522:22: -> ^( 'NN-DRY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:522:25: ^( 'NN-DRY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_107.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 195, nndry_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nndry"

    public static class vbextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbextract"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:525:1: vbextract : 'VB-EXTRACT' TOKEN -> ^( 'VB-EXTRACT' TOKEN ) ;
    public final ChemicalChunkerParser.vbextract_return vbextract() throws RecognitionException {
        ChemicalChunkerParser.vbextract_return retval = new ChemicalChunkerParser.vbextract_return();
        retval.start = input.LT(1);
        int vbextract_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal862=null;
        Token TOKEN863=null;

        Object string_literal862_tree=null;
        Object TOKEN863_tree=null;
        RewriteRuleTokenStream stream_108=new RewriteRuleTokenStream(adaptor,"token 108");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 196) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:525:10: ( 'VB-EXTRACT' TOKEN -> ^( 'VB-EXTRACT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:525:11: 'VB-EXTRACT' TOKEN
            {
            string_literal862=(Token)match(input,108,FOLLOW_108_in_vbextract4463_static.FOLLOW_108_in_vbextract4463); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_108.add(string_literal862);

            TOKEN863=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbextract4465_static.FOLLOW_TOKEN_in_vbextract4465); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN863);



            // AST REWRITE
            // elements: TOKEN, 108
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 525:30: -> ^( 'VB-EXTRACT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:525:33: ^( 'VB-EXTRACT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_108.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 196, vbextract_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbextract"

    public static class nnextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnextract"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:526:1: nnextract : 'NN-EXTRACT' TOKEN -> ^( 'NN-EXTRACT' TOKEN ) ;
    public final ChemicalChunkerParser.nnextract_return nnextract() throws RecognitionException {
        ChemicalChunkerParser.nnextract_return retval = new ChemicalChunkerParser.nnextract_return();
        retval.start = input.LT(1);
        int nnextract_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal864=null;
        Token TOKEN865=null;

        Object string_literal864_tree=null;
        Object TOKEN865_tree=null;
        RewriteRuleTokenStream stream_109=new RewriteRuleTokenStream(adaptor,"token 109");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 197) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:526:10: ( 'NN-EXTRACT' TOKEN -> ^( 'NN-EXTRACT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:526:11: 'NN-EXTRACT' TOKEN
            {
            string_literal864=(Token)match(input,109,FOLLOW_109_in_nnextract4478_static.FOLLOW_109_in_nnextract4478); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_109.add(string_literal864);

            TOKEN865=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnextract4480_static.FOLLOW_TOKEN_in_nnextract4480); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN865);



            // AST REWRITE
            // elements: TOKEN, 109
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 526:30: -> ^( 'NN-EXTRACT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:526:33: ^( 'NN-EXTRACT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_109.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 197, nnextract_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnextract"

    public static class vbfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfilter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:529:1: vbfilter : 'VB-FILTER' TOKEN -> ^( 'VB-FILTER' TOKEN ) ;
    public final ChemicalChunkerParser.vbfilter_return vbfilter() throws RecognitionException {
        ChemicalChunkerParser.vbfilter_return retval = new ChemicalChunkerParser.vbfilter_return();
        retval.start = input.LT(1);
        int vbfilter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal866=null;
        Token TOKEN867=null;

        Object string_literal866_tree=null;
        Object TOKEN867_tree=null;
        RewriteRuleTokenStream stream_110=new RewriteRuleTokenStream(adaptor,"token 110");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 198) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:529:9: ( 'VB-FILTER' TOKEN -> ^( 'VB-FILTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:529:10: 'VB-FILTER' TOKEN
            {
            string_literal866=(Token)match(input,110,FOLLOW_110_in_vbfilter4495_static.FOLLOW_110_in_vbfilter4495); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_110.add(string_literal866);

            TOKEN867=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfilter4497_static.FOLLOW_TOKEN_in_vbfilter4497); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN867);



            // AST REWRITE
            // elements: TOKEN, 110
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 529:28: -> ^( 'VB-FILTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:529:31: ^( 'VB-FILTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_110.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 198, vbfilter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbfilter"

    public static class nnfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnfilter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:530:1: nnfilter : 'NN-FILTER' TOKEN -> ^( 'NN-FILTER' TOKEN ) ;
    public final ChemicalChunkerParser.nnfilter_return nnfilter() throws RecognitionException {
        ChemicalChunkerParser.nnfilter_return retval = new ChemicalChunkerParser.nnfilter_return();
        retval.start = input.LT(1);
        int nnfilter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal868=null;
        Token TOKEN869=null;

        Object string_literal868_tree=null;
        Object TOKEN869_tree=null;
        RewriteRuleTokenStream stream_111=new RewriteRuleTokenStream(adaptor,"token 111");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 199) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:530:9: ( 'NN-FILTER' TOKEN -> ^( 'NN-FILTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:530:10: 'NN-FILTER' TOKEN
            {
            string_literal868=(Token)match(input,111,FOLLOW_111_in_nnfilter4510_static.FOLLOW_111_in_nnfilter4510); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_111.add(string_literal868);

            TOKEN869=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnfilter4512_static.FOLLOW_TOKEN_in_nnfilter4512); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN869);



            // AST REWRITE
            // elements: TOKEN, 111
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 530:28: -> ^( 'NN-FILTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:530:31: ^( 'NN-FILTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_111.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 199, nnfilter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnfilter"

    public static class vbheat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbheat"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:533:1: vbheat : 'VB-HEAT' TOKEN -> ^( 'VB-HEAT' TOKEN ) ;
    public final ChemicalChunkerParser.vbheat_return vbheat() throws RecognitionException {
        ChemicalChunkerParser.vbheat_return retval = new ChemicalChunkerParser.vbheat_return();
        retval.start = input.LT(1);
        int vbheat_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal870=null;
        Token TOKEN871=null;

        Object string_literal870_tree=null;
        Object TOKEN871_tree=null;
        RewriteRuleTokenStream stream_112=new RewriteRuleTokenStream(adaptor,"token 112");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 200) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:533:7: ( 'VB-HEAT' TOKEN -> ^( 'VB-HEAT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:533:8: 'VB-HEAT' TOKEN
            {
            string_literal870=(Token)match(input,112,FOLLOW_112_in_vbheat4527_static.FOLLOW_112_in_vbheat4527); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_112.add(string_literal870);

            TOKEN871=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbheat4529_static.FOLLOW_TOKEN_in_vbheat4529); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN871);



            // AST REWRITE
            // elements: 112, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 533:24: -> ^( 'VB-HEAT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:533:27: ^( 'VB-HEAT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_112.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 200, vbheat_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbheat"

    public static class vbincrease_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbincrease"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:534:1: vbincrease : 'VB-INCREASE' TOKEN -> ^( 'VB-INCREASE' TOKEN ) ;
    public final ChemicalChunkerParser.vbincrease_return vbincrease() throws RecognitionException {
        ChemicalChunkerParser.vbincrease_return retval = new ChemicalChunkerParser.vbincrease_return();
        retval.start = input.LT(1);
        int vbincrease_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal872=null;
        Token TOKEN873=null;

        Object string_literal872_tree=null;
        Object TOKEN873_tree=null;
        RewriteRuleTokenStream stream_113=new RewriteRuleTokenStream(adaptor,"token 113");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 201) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:534:11: ( 'VB-INCREASE' TOKEN -> ^( 'VB-INCREASE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:534:12: 'VB-INCREASE' TOKEN
            {
            string_literal872=(Token)match(input,113,FOLLOW_113_in_vbincrease4542_static.FOLLOW_113_in_vbincrease4542); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_113.add(string_literal872);

            TOKEN873=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbincrease4544_static.FOLLOW_TOKEN_in_vbincrease4544); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN873);



            // AST REWRITE
            // elements: 113, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 534:32: -> ^( 'VB-INCREASE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:534:35: ^( 'VB-INCREASE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_113.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 201, vbincrease_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbincrease"

    public static class vbimmerse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbimmerse"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:537:1: vbimmerse : 'VB-IMMERSE' TOKEN -> ^( 'VB-IMMERSE' TOKEN ) ;
    public final ChemicalChunkerParser.vbimmerse_return vbimmerse() throws RecognitionException {
        ChemicalChunkerParser.vbimmerse_return retval = new ChemicalChunkerParser.vbimmerse_return();
        retval.start = input.LT(1);
        int vbimmerse_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal874=null;
        Token TOKEN875=null;

        Object string_literal874_tree=null;
        Object TOKEN875_tree=null;
        RewriteRuleTokenStream stream_114=new RewriteRuleTokenStream(adaptor,"token 114");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 202) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:537:10: ( 'VB-IMMERSE' TOKEN -> ^( 'VB-IMMERSE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:537:11: 'VB-IMMERSE' TOKEN
            {
            string_literal874=(Token)match(input,114,FOLLOW_114_in_vbimmerse4559_static.FOLLOW_114_in_vbimmerse4559); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_114.add(string_literal874);

            TOKEN875=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbimmerse4561_static.FOLLOW_TOKEN_in_vbimmerse4561); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN875);



            // AST REWRITE
            // elements: TOKEN, 114
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 537:30: -> ^( 'VB-IMMERSE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:537:33: ^( 'VB-IMMERSE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_114.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 202, vbimmerse_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbimmerse"

    public static class vbpartition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpartition"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:540:1: vbpartition : 'VB-PARTITION' TOKEN -> ^( 'VB-PARTITION' TOKEN ) ;
    public final ChemicalChunkerParser.vbpartition_return vbpartition() throws RecognitionException {
        ChemicalChunkerParser.vbpartition_return retval = new ChemicalChunkerParser.vbpartition_return();
        retval.start = input.LT(1);
        int vbpartition_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal876=null;
        Token TOKEN877=null;

        Object string_literal876_tree=null;
        Object TOKEN877_tree=null;
        RewriteRuleTokenStream stream_115=new RewriteRuleTokenStream(adaptor,"token 115");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 203) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:540:12: ( 'VB-PARTITION' TOKEN -> ^( 'VB-PARTITION' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:540:13: 'VB-PARTITION' TOKEN
            {
            string_literal876=(Token)match(input,115,FOLLOW_115_in_vbpartition4576_static.FOLLOW_115_in_vbpartition4576); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_115.add(string_literal876);

            TOKEN877=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpartition4578_static.FOLLOW_TOKEN_in_vbpartition4578); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN877);



            // AST REWRITE
            // elements: 115, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 540:34: -> ^( 'VB-PARTITION' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:540:37: ^( 'VB-PARTITION' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_115.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 203, vbpartition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbpartition"

    public static class vbprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbprecipitate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:543:1: vbprecipitate : 'VB-PRECIPITATE' TOKEN -> ^( 'VB-PRECIPITATE' TOKEN ) ;
    public final ChemicalChunkerParser.vbprecipitate_return vbprecipitate() throws RecognitionException {
        ChemicalChunkerParser.vbprecipitate_return retval = new ChemicalChunkerParser.vbprecipitate_return();
        retval.start = input.LT(1);
        int vbprecipitate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal878=null;
        Token TOKEN879=null;

        Object string_literal878_tree=null;
        Object TOKEN879_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 204) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:543:14: ( 'VB-PRECIPITATE' TOKEN -> ^( 'VB-PRECIPITATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:543:15: 'VB-PRECIPITATE' TOKEN
            {
            string_literal878=(Token)match(input,116,FOLLOW_116_in_vbprecipitate4593_static.FOLLOW_116_in_vbprecipitate4593); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(string_literal878);

            TOKEN879=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbprecipitate4595_static.FOLLOW_TOKEN_in_vbprecipitate4595); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN879);



            // AST REWRITE
            // elements: TOKEN, 116
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 543:38: -> ^( 'VB-PRECIPITATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:543:41: ^( 'VB-PRECIPITATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_116.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 204, vbprecipitate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbprecipitate"

    public static class nnprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnprecipitate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:544:1: nnprecipitate : 'NN-PRECIPITATE' TOKEN -> ^( 'NN-PRECIPITATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnprecipitate_return nnprecipitate() throws RecognitionException {
        ChemicalChunkerParser.nnprecipitate_return retval = new ChemicalChunkerParser.nnprecipitate_return();
        retval.start = input.LT(1);
        int nnprecipitate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal880=null;
        Token TOKEN881=null;

        Object string_literal880_tree=null;
        Object TOKEN881_tree=null;
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 205) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:544:14: ( 'NN-PRECIPITATE' TOKEN -> ^( 'NN-PRECIPITATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:544:15: 'NN-PRECIPITATE' TOKEN
            {
            string_literal880=(Token)match(input,117,FOLLOW_117_in_nnprecipitate4608_static.FOLLOW_117_in_nnprecipitate4608); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(string_literal880);

            TOKEN881=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnprecipitate4610_static.FOLLOW_TOKEN_in_nnprecipitate4610); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN881);



            // AST REWRITE
            // elements: 117, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 544:38: -> ^( 'NN-PRECIPITATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:544:41: ^( 'NN-PRECIPITATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_117.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 205, nnprecipitate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnprecipitate"

    public static class vbpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpurify"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:547:1: vbpurify : 'VB-PURIFY' TOKEN -> ^( 'VB-PURIFY' TOKEN ) ;
    public final ChemicalChunkerParser.vbpurify_return vbpurify() throws RecognitionException {
        ChemicalChunkerParser.vbpurify_return retval = new ChemicalChunkerParser.vbpurify_return();
        retval.start = input.LT(1);
        int vbpurify_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal882=null;
        Token TOKEN883=null;

        Object string_literal882_tree=null;
        Object TOKEN883_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 206) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:547:9: ( 'VB-PURIFY' TOKEN -> ^( 'VB-PURIFY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:547:10: 'VB-PURIFY' TOKEN
            {
            string_literal882=(Token)match(input,118,FOLLOW_118_in_vbpurify4625_static.FOLLOW_118_in_vbpurify4625); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(string_literal882);

            TOKEN883=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpurify4627_static.FOLLOW_TOKEN_in_vbpurify4627); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN883);



            // AST REWRITE
            // elements: TOKEN, 118
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 547:28: -> ^( 'VB-PURIFY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:547:31: ^( 'VB-PURIFY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_118.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 206, vbpurify_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbpurify"

    public static class nnpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpurify"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:548:1: nnpurify : 'NN-PURIFY' TOKEN -> ^( 'NN-PURIFY' TOKEN ) ;
    public final ChemicalChunkerParser.nnpurify_return nnpurify() throws RecognitionException {
        ChemicalChunkerParser.nnpurify_return retval = new ChemicalChunkerParser.nnpurify_return();
        retval.start = input.LT(1);
        int nnpurify_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal884=null;
        Token TOKEN885=null;

        Object string_literal884_tree=null;
        Object TOKEN885_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 207) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:548:9: ( 'NN-PURIFY' TOKEN -> ^( 'NN-PURIFY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:548:10: 'NN-PURIFY' TOKEN
            {
            string_literal884=(Token)match(input,119,FOLLOW_119_in_nnpurify4640_static.FOLLOW_119_in_nnpurify4640); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(string_literal884);

            TOKEN885=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpurify4642_static.FOLLOW_TOKEN_in_nnpurify4642); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN885);



            // AST REWRITE
            // elements: 119, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 548:28: -> ^( 'NN-PURIFY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:548:31: ^( 'NN-PURIFY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_119.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 207, nnpurify_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpurify"

    public static class vbquench_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbquench"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:551:1: vbquench : 'VB-QUENCH' TOKEN -> ^( 'VB-QUENCH' TOKEN ) ;
    public final ChemicalChunkerParser.vbquench_return vbquench() throws RecognitionException {
        ChemicalChunkerParser.vbquench_return retval = new ChemicalChunkerParser.vbquench_return();
        retval.start = input.LT(1);
        int vbquench_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal886=null;
        Token TOKEN887=null;

        Object string_literal886_tree=null;
        Object TOKEN887_tree=null;
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 208) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:551:9: ( 'VB-QUENCH' TOKEN -> ^( 'VB-QUENCH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:551:10: 'VB-QUENCH' TOKEN
            {
            string_literal886=(Token)match(input,120,FOLLOW_120_in_vbquench4657_static.FOLLOW_120_in_vbquench4657); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(string_literal886);

            TOKEN887=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbquench4659_static.FOLLOW_TOKEN_in_vbquench4659); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN887);



            // AST REWRITE
            // elements: TOKEN, 120
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 551:28: -> ^( 'VB-QUENCH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:551:31: ^( 'VB-QUENCH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_120.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 208, vbquench_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbquench"

    public static class vbrecover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbrecover"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:554:1: vbrecover : 'VB-RECOVER' TOKEN -> ^( 'VB-RECOVER' TOKEN ) ;
    public final ChemicalChunkerParser.vbrecover_return vbrecover() throws RecognitionException {
        ChemicalChunkerParser.vbrecover_return retval = new ChemicalChunkerParser.vbrecover_return();
        retval.start = input.LT(1);
        int vbrecover_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal888=null;
        Token TOKEN889=null;

        Object string_literal888_tree=null;
        Object TOKEN889_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 209) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:554:10: ( 'VB-RECOVER' TOKEN -> ^( 'VB-RECOVER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:554:11: 'VB-RECOVER' TOKEN
            {
            string_literal888=(Token)match(input,121,FOLLOW_121_in_vbrecover4674_static.FOLLOW_121_in_vbrecover4674); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(string_literal888);

            TOKEN889=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbrecover4676_static.FOLLOW_TOKEN_in_vbrecover4676); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN889);



            // AST REWRITE
            // elements: TOKEN, 121
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 554:30: -> ^( 'VB-RECOVER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:554:33: ^( 'VB-RECOVER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_121.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 209, vbrecover_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbrecover"

    public static class vbremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbremove"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:557:1: vbremove : 'VB-REMOVE' TOKEN -> ^( 'VB-REMOVE' TOKEN ) ;
    public final ChemicalChunkerParser.vbremove_return vbremove() throws RecognitionException {
        ChemicalChunkerParser.vbremove_return retval = new ChemicalChunkerParser.vbremove_return();
        retval.start = input.LT(1);
        int vbremove_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal890=null;
        Token TOKEN891=null;

        Object string_literal890_tree=null;
        Object TOKEN891_tree=null;
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 210) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:557:9: ( 'VB-REMOVE' TOKEN -> ^( 'VB-REMOVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:557:10: 'VB-REMOVE' TOKEN
            {
            string_literal890=(Token)match(input,122,FOLLOW_122_in_vbremove4691_static.FOLLOW_122_in_vbremove4691); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_122.add(string_literal890);

            TOKEN891=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbremove4693_static.FOLLOW_TOKEN_in_vbremove4693); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN891);



            // AST REWRITE
            // elements: TOKEN, 122
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 557:28: -> ^( 'VB-REMOVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:557:31: ^( 'VB-REMOVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_122.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 210, vbremove_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbremove"

    public static class nnremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnremove"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:558:1: nnremove : 'NN-REMOVE' TOKEN -> ^( 'NN-REMOVE' TOKEN ) ;
    public final ChemicalChunkerParser.nnremove_return nnremove() throws RecognitionException {
        ChemicalChunkerParser.nnremove_return retval = new ChemicalChunkerParser.nnremove_return();
        retval.start = input.LT(1);
        int nnremove_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal892=null;
        Token TOKEN893=null;

        Object string_literal892_tree=null;
        Object TOKEN893_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 211) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:558:9: ( 'NN-REMOVE' TOKEN -> ^( 'NN-REMOVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:558:10: 'NN-REMOVE' TOKEN
            {
            string_literal892=(Token)match(input,123,FOLLOW_123_in_nnremove4706_static.FOLLOW_123_in_nnremove4706); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_123.add(string_literal892);

            TOKEN893=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnremove4708_static.FOLLOW_TOKEN_in_nnremove4708); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN893);



            // AST REWRITE
            // elements: TOKEN, 123
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 558:28: -> ^( 'NN-REMOVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:558:31: ^( 'NN-REMOVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_123.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 211, nnremove_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnremove"

    public static class vbstir_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbstir"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:561:1: vbstir : 'VB-STIR' TOKEN -> ^( 'VB-STIR' TOKEN ) ;
    public final ChemicalChunkerParser.vbstir_return vbstir() throws RecognitionException {
        ChemicalChunkerParser.vbstir_return retval = new ChemicalChunkerParser.vbstir_return();
        retval.start = input.LT(1);
        int vbstir_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal894=null;
        Token TOKEN895=null;

        Object string_literal894_tree=null;
        Object TOKEN895_tree=null;
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 212) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:561:7: ( 'VB-STIR' TOKEN -> ^( 'VB-STIR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:561:8: 'VB-STIR' TOKEN
            {
            string_literal894=(Token)match(input,124,FOLLOW_124_in_vbstir4723_static.FOLLOW_124_in_vbstir4723); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_124.add(string_literal894);

            TOKEN895=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbstir4725_static.FOLLOW_TOKEN_in_vbstir4725); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN895);



            // AST REWRITE
            // elements: TOKEN, 124
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 561:24: -> ^( 'VB-STIR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:561:27: ^( 'VB-STIR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_124.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 212, vbstir_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbstir"

    public static class vbsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsynthesize"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:564:1: vbsynthesize : 'VB-SYNTHESIZE' TOKEN -> ^( 'VB-SYNTHESIZE' TOKEN ) ;
    public final ChemicalChunkerParser.vbsynthesize_return vbsynthesize() throws RecognitionException {
        ChemicalChunkerParser.vbsynthesize_return retval = new ChemicalChunkerParser.vbsynthesize_return();
        retval.start = input.LT(1);
        int vbsynthesize_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal896=null;
        Token TOKEN897=null;

        Object string_literal896_tree=null;
        Object TOKEN897_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 213) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:564:13: ( 'VB-SYNTHESIZE' TOKEN -> ^( 'VB-SYNTHESIZE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:564:14: 'VB-SYNTHESIZE' TOKEN
            {
            string_literal896=(Token)match(input,125,FOLLOW_125_in_vbsynthesize4740_static.FOLLOW_125_in_vbsynthesize4740); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_125.add(string_literal896);

            TOKEN897=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsynthesize4742_static.FOLLOW_TOKEN_in_vbsynthesize4742); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN897);



            // AST REWRITE
            // elements: 125, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 564:36: -> ^( 'VB-SYNTHESIZE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:564:39: ^( 'VB-SYNTHESIZE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_125.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 213, vbsynthesize_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsynthesize"

    public static class nnsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnsynthesize"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:565:1: nnsynthesize : 'NN-SYNTHESIZE' TOKEN -> ^( 'NN-SYNTHESIZE' TOKEN ) ;
    public final ChemicalChunkerParser.nnsynthesize_return nnsynthesize() throws RecognitionException {
        ChemicalChunkerParser.nnsynthesize_return retval = new ChemicalChunkerParser.nnsynthesize_return();
        retval.start = input.LT(1);
        int nnsynthesize_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal898=null;
        Token TOKEN899=null;

        Object string_literal898_tree=null;
        Object TOKEN899_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 214) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:565:13: ( 'NN-SYNTHESIZE' TOKEN -> ^( 'NN-SYNTHESIZE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:565:14: 'NN-SYNTHESIZE' TOKEN
            {
            string_literal898=(Token)match(input,126,FOLLOW_126_in_nnsynthesize4755_static.FOLLOW_126_in_nnsynthesize4755); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(string_literal898);

            TOKEN899=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnsynthesize4757_static.FOLLOW_TOKEN_in_nnsynthesize4757); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN899);



            // AST REWRITE
            // elements: TOKEN, 126
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 565:36: -> ^( 'NN-SYNTHESIZE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:565:39: ^( 'NN-SYNTHESIZE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_126.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 214, nnsynthesize_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnsynthesize"

    public static class vbwait_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwait"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:568:1: vbwait : 'VB-WAIT' TOKEN -> ^( 'VB-WAIT' TOKEN ) ;
    public final ChemicalChunkerParser.vbwait_return vbwait() throws RecognitionException {
        ChemicalChunkerParser.vbwait_return retval = new ChemicalChunkerParser.vbwait_return();
        retval.start = input.LT(1);
        int vbwait_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal900=null;
        Token TOKEN901=null;

        Object string_literal900_tree=null;
        Object TOKEN901_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 215) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:568:7: ( 'VB-WAIT' TOKEN -> ^( 'VB-WAIT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:568:8: 'VB-WAIT' TOKEN
            {
            string_literal900=(Token)match(input,127,FOLLOW_127_in_vbwait4772_static.FOLLOW_127_in_vbwait4772); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(string_literal900);

            TOKEN901=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwait4774_static.FOLLOW_TOKEN_in_vbwait4774); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN901);



            // AST REWRITE
            // elements: TOKEN, 127
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 568:24: -> ^( 'VB-WAIT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:568:27: ^( 'VB-WAIT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_127.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 215, vbwait_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbwait"

    public static class vbwash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:571:1: vbwash : 'VB-WASH' TOKEN -> ^( 'VB-WASH' TOKEN ) ;
    public final ChemicalChunkerParser.vbwash_return vbwash() throws RecognitionException {
        ChemicalChunkerParser.vbwash_return retval = new ChemicalChunkerParser.vbwash_return();
        retval.start = input.LT(1);
        int vbwash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal902=null;
        Token TOKEN903=null;

        Object string_literal902_tree=null;
        Object TOKEN903_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 216) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:571:7: ( 'VB-WASH' TOKEN -> ^( 'VB-WASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:571:8: 'VB-WASH' TOKEN
            {
            string_literal902=(Token)match(input,128,FOLLOW_128_in_vbwash4789_static.FOLLOW_128_in_vbwash4789); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(string_literal902);

            TOKEN903=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwash4791_static.FOLLOW_TOKEN_in_vbwash4791); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN903);



            // AST REWRITE
            // elements: TOKEN, 128
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 571:24: -> ^( 'VB-WASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:571:27: ^( 'VB-WASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_128.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 216, vbwash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbwash"

    public static class vbyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbyield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:574:1: vbyield : 'VB-YIELD' TOKEN -> ^( 'VB-YIELD' TOKEN ) ;
    public final ChemicalChunkerParser.vbyield_return vbyield() throws RecognitionException {
        ChemicalChunkerParser.vbyield_return retval = new ChemicalChunkerParser.vbyield_return();
        retval.start = input.LT(1);
        int vbyield_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal904=null;
        Token TOKEN905=null;

        Object string_literal904_tree=null;
        Object TOKEN905_tree=null;
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 217) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:574:8: ( 'VB-YIELD' TOKEN -> ^( 'VB-YIELD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:574:9: 'VB-YIELD' TOKEN
            {
            string_literal904=(Token)match(input,129,FOLLOW_129_in_vbyield4806_static.FOLLOW_129_in_vbyield4806); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(string_literal904);

            TOKEN905=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbyield4808_static.FOLLOW_TOKEN_in_vbyield4808); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN905);



            // AST REWRITE
            // elements: TOKEN, 129
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 574:26: -> ^( 'VB-YIELD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:574:29: ^( 'VB-YIELD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_129.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 217, vbyield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbyield"

    public static class nnyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnyield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:577:1: nnyield : 'NN-YIELD' TOKEN -> ^( 'NN-YIELD' TOKEN ) ;
    public final ChemicalChunkerParser.nnyield_return nnyield() throws RecognitionException {
        ChemicalChunkerParser.nnyield_return retval = new ChemicalChunkerParser.nnyield_return();
        retval.start = input.LT(1);
        int nnyield_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal906=null;
        Token TOKEN907=null;

        Object string_literal906_tree=null;
        Object TOKEN907_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 218) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:577:8: ( 'NN-YIELD' TOKEN -> ^( 'NN-YIELD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:577:9: 'NN-YIELD' TOKEN
            {
            string_literal906=(Token)match(input,130,FOLLOW_130_in_nnyield4823_static.FOLLOW_130_in_nnyield4823); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(string_literal906);

            TOKEN907=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnyield4825_static.FOLLOW_TOKEN_in_nnyield4825); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN907);



            // AST REWRITE
            // elements: 130, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 577:26: -> ^( 'NN-YIELD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:577:29: ^( 'NN-YIELD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_130.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 218, nnyield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnyield"

    public static class rbconj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbconj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:581:1: rbconj : 'RB-CONJ' TOKEN -> ^( 'RB-CONJ' TOKEN ) ;
    public final ChemicalChunkerParser.rbconj_return rbconj() throws RecognitionException {
        ChemicalChunkerParser.rbconj_return retval = new ChemicalChunkerParser.rbconj_return();
        retval.start = input.LT(1);
        int rbconj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal908=null;
        Token TOKEN909=null;

        Object string_literal908_tree=null;
        Object TOKEN909_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 219) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:581:7: ( 'RB-CONJ' TOKEN -> ^( 'RB-CONJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:581:8: 'RB-CONJ' TOKEN
            {
            string_literal908=(Token)match(input,131,FOLLOW_131_in_rbconj4841_static.FOLLOW_131_in_rbconj4841); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(string_literal908);

            TOKEN909=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbconj4843_static.FOLLOW_TOKEN_in_rbconj4843); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN909);



            // AST REWRITE
            // elements: TOKEN, 131
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 581:24: -> ^( 'RB-CONJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:581:27: ^( 'RB-CONJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_131.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 219, rbconj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbconj"

    public static class colon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "colon"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:582:1: colon : 'COLON' TOKEN -> ^( 'COLON' TOKEN ) ;
    public final ChemicalChunkerParser.colon_return colon() throws RecognitionException {
        ChemicalChunkerParser.colon_return retval = new ChemicalChunkerParser.colon_return();
        retval.start = input.LT(1);
        int colon_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal910=null;
        Token TOKEN911=null;

        Object string_literal910_tree=null;
        Object TOKEN911_tree=null;
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 220) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:582:6: ( 'COLON' TOKEN -> ^( 'COLON' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:582:7: 'COLON' TOKEN
            {
            string_literal910=(Token)match(input,132,FOLLOW_132_in_colon4856_static.FOLLOW_132_in_colon4856); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_132.add(string_literal910);

            TOKEN911=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_colon4858_static.FOLLOW_TOKEN_in_colon4858); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN911);



            // AST REWRITE
            // elements: 132, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 582:21: -> ^( 'COLON' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:582:24: ^( 'COLON' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_132.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 220, colon_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "colon"

    public static class comma_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comma"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:583:1: comma : 'COMMA' TOKEN -> ^( 'COMMA' TOKEN ) ;
    public final ChemicalChunkerParser.comma_return comma() throws RecognitionException {
        ChemicalChunkerParser.comma_return retval = new ChemicalChunkerParser.comma_return();
        retval.start = input.LT(1);
        int comma_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal912=null;
        Token TOKEN913=null;

        Object string_literal912_tree=null;
        Object TOKEN913_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 221) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:583:6: ( 'COMMA' TOKEN -> ^( 'COMMA' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:583:7: 'COMMA' TOKEN
            {
            string_literal912=(Token)match(input,133,FOLLOW_133_in_comma4871_static.FOLLOW_133_in_comma4871); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(string_literal912);

            TOKEN913=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_comma4873_static.FOLLOW_TOKEN_in_comma4873); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN913);



            // AST REWRITE
            // elements: 133, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 583:21: -> ^( 'COMMA' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:583:24: ^( 'COMMA' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_133.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 221, comma_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "comma"

    public static class apost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apost"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:584:1: apost : 'APOST' TOKEN -> ^( 'APOST' TOKEN ) ;
    public final ChemicalChunkerParser.apost_return apost() throws RecognitionException {
        ChemicalChunkerParser.apost_return retval = new ChemicalChunkerParser.apost_return();
        retval.start = input.LT(1);
        int apost_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal914=null;
        Token TOKEN915=null;

        Object string_literal914_tree=null;
        Object TOKEN915_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 222) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:584:6: ( 'APOST' TOKEN -> ^( 'APOST' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:584:7: 'APOST' TOKEN
            {
            string_literal914=(Token)match(input,134,FOLLOW_134_in_apost4886_static.FOLLOW_134_in_apost4886); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(string_literal914);

            TOKEN915=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_apost4888_static.FOLLOW_TOKEN_in_apost4888); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN915);



            // AST REWRITE
            // elements: 134, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 584:21: -> ^( 'APOST' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:584:24: ^( 'APOST' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_134.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 222, apost_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "apost"

    public static class neg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neg"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:585:1: neg : 'NEG' TOKEN -> ^( 'NEG' TOKEN ) ;
    public final ChemicalChunkerParser.neg_return neg() throws RecognitionException {
        ChemicalChunkerParser.neg_return retval = new ChemicalChunkerParser.neg_return();
        retval.start = input.LT(1);
        int neg_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal916=null;
        Token TOKEN917=null;

        Object string_literal916_tree=null;
        Object TOKEN917_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 223) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:585:4: ( 'NEG' TOKEN -> ^( 'NEG' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:585:5: 'NEG' TOKEN
            {
            string_literal916=(Token)match(input,135,FOLLOW_135_in_neg4901_static.FOLLOW_135_in_neg4901); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(string_literal916);

            TOKEN917=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_neg4903_static.FOLLOW_TOKEN_in_neg4903); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN917);



            // AST REWRITE
            // elements: 135, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 585:17: -> ^( 'NEG' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:585:20: ^( 'NEG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_135.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 223, neg_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "neg"

    public static class dash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:586:1: dash : 'DASH' TOKEN -> ^( 'DASH' TOKEN ) ;
    public final ChemicalChunkerParser.dash_return dash() throws RecognitionException {
        ChemicalChunkerParser.dash_return retval = new ChemicalChunkerParser.dash_return();
        retval.start = input.LT(1);
        int dash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal918=null;
        Token TOKEN919=null;

        Object string_literal918_tree=null;
        Object TOKEN919_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 224) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:586:5: ( 'DASH' TOKEN -> ^( 'DASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:586:6: 'DASH' TOKEN
            {
            string_literal918=(Token)match(input,136,FOLLOW_136_in_dash4916_static.FOLLOW_136_in_dash4916); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(string_literal918);

            TOKEN919=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dash4918_static.FOLLOW_TOKEN_in_dash4918); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN919);



            // AST REWRITE
            // elements: 136, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 586:19: -> ^( 'DASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:586:22: ^( 'DASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_136.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 224, dash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dash"

    public static class stop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stop"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:587:1: stop : 'STOP' TOKEN -> ^( 'STOP' TOKEN ) ;
    public final ChemicalChunkerParser.stop_return stop() throws RecognitionException {
        ChemicalChunkerParser.stop_return retval = new ChemicalChunkerParser.stop_return();
        retval.start = input.LT(1);
        int stop_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal920=null;
        Token TOKEN921=null;

        Object string_literal920_tree=null;
        Object TOKEN921_tree=null;
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 225) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:587:5: ( 'STOP' TOKEN -> ^( 'STOP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:587:6: 'STOP' TOKEN
            {
            string_literal920=(Token)match(input,137,FOLLOW_137_in_stop4931_static.FOLLOW_137_in_stop4931); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_137.add(string_literal920);

            TOKEN921=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_stop4933_static.FOLLOW_TOKEN_in_stop4933); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN921);



            // AST REWRITE
            // elements: 137, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 587:19: -> ^( 'STOP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:587:22: ^( 'STOP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_137.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 225, stop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "stop"

    public static class percentsign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percentsign"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:588:1: percentsign : 'NN-PERCENT' TOKEN -> ^( 'NN-PERCENT' TOKEN ) ;
    public final ChemicalChunkerParser.percentsign_return percentsign() throws RecognitionException {
        ChemicalChunkerParser.percentsign_return retval = new ChemicalChunkerParser.percentsign_return();
        retval.start = input.LT(1);
        int percentsign_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal922=null;
        Token TOKEN923=null;

        Object string_literal922_tree=null;
        Object TOKEN923_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 226) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:588:12: ( 'NN-PERCENT' TOKEN -> ^( 'NN-PERCENT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:588:13: 'NN-PERCENT' TOKEN
            {
            string_literal922=(Token)match(input,138,FOLLOW_138_in_percentsign4946_static.FOLLOW_138_in_percentsign4946); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_138.add(string_literal922);

            TOKEN923=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_percentsign4948_static.FOLLOW_TOKEN_in_percentsign4948); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN923);



            // AST REWRITE
            // elements: 138, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 588:32: -> ^( 'NN-PERCENT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:588:35: ^( 'NN-PERCENT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_138.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 226, percentsign_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "percentsign"

    public static class lsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lsqb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:589:1: lsqb : 'LSQB' TOKEN -> ^( 'LSQB' TOKEN ) ;
    public final ChemicalChunkerParser.lsqb_return lsqb() throws RecognitionException {
        ChemicalChunkerParser.lsqb_return retval = new ChemicalChunkerParser.lsqb_return();
        retval.start = input.LT(1);
        int lsqb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal924=null;
        Token TOKEN925=null;

        Object string_literal924_tree=null;
        Object TOKEN925_tree=null;
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 227) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:589:5: ( 'LSQB' TOKEN -> ^( 'LSQB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:589:6: 'LSQB' TOKEN
            {
            string_literal924=(Token)match(input,139,FOLLOW_139_in_lsqb4961_static.FOLLOW_139_in_lsqb4961); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_139.add(string_literal924);

            TOKEN925=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lsqb4963_static.FOLLOW_TOKEN_in_lsqb4963); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN925);



            // AST REWRITE
            // elements: TOKEN, 139
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 589:19: -> ^( 'LSQB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:589:22: ^( 'LSQB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_139.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 227, lsqb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lsqb"

    public static class rsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rsqb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:590:1: rsqb : 'RSQB' TOKEN -> ^( 'RSQB' TOKEN ) ;
    public final ChemicalChunkerParser.rsqb_return rsqb() throws RecognitionException {
        ChemicalChunkerParser.rsqb_return retval = new ChemicalChunkerParser.rsqb_return();
        retval.start = input.LT(1);
        int rsqb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal926=null;
        Token TOKEN927=null;

        Object string_literal926_tree=null;
        Object TOKEN927_tree=null;
        RewriteRuleTokenStream stream_140=new RewriteRuleTokenStream(adaptor,"token 140");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 228) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:590:5: ( 'RSQB' TOKEN -> ^( 'RSQB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:590:6: 'RSQB' TOKEN
            {
            string_literal926=(Token)match(input,140,FOLLOW_140_in_rsqb4976_static.FOLLOW_140_in_rsqb4976); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_140.add(string_literal926);

            TOKEN927=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rsqb4978_static.FOLLOW_TOKEN_in_rsqb4978); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN927);



            // AST REWRITE
            // elements: 140, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 590:19: -> ^( 'RSQB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:590:22: ^( 'RSQB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_140.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 228, rsqb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rsqb"

    public static class nnidentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnidentifier"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:592:1: nnidentifier : 'NN-IDENTIFIER' TOKEN -> ^( 'NN-IDENTIFIER' TOKEN ) ;
    public final ChemicalChunkerParser.nnidentifier_return nnidentifier() throws RecognitionException {
        ChemicalChunkerParser.nnidentifier_return retval = new ChemicalChunkerParser.nnidentifier_return();
        retval.start = input.LT(1);
        int nnidentifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal928=null;
        Token TOKEN929=null;

        Object string_literal928_tree=null;
        Object TOKEN929_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 229) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:592:13: ( 'NN-IDENTIFIER' TOKEN -> ^( 'NN-IDENTIFIER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:592:14: 'NN-IDENTIFIER' TOKEN
            {
            string_literal928=(Token)match(input,141,FOLLOW_141_in_nnidentifier4992_static.FOLLOW_141_in_nnidentifier4992); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_141.add(string_literal928);

            TOKEN929=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnidentifier4994_static.FOLLOW_TOKEN_in_nnidentifier4994); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN929);



            // AST REWRITE
            // elements: TOKEN, 141
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 592:36: -> ^( 'NN-IDENTIFIER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:592:39: ^( 'NN-IDENTIFIER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_141.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 229, nnidentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnidentifier"

    public static class dtTHE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dtTHE"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:595:1: dtTHE : 'DT-THE' TOKEN -> ^( 'DT-THE' TOKEN ) ;
    public final ChemicalChunkerParser.dtTHE_return dtTHE() throws RecognitionException {
        ChemicalChunkerParser.dtTHE_return retval = new ChemicalChunkerParser.dtTHE_return();
        retval.start = input.LT(1);
        int dtTHE_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal930=null;
        Token TOKEN931=null;

        Object string_literal930_tree=null;
        Object TOKEN931_tree=null;
        RewriteRuleTokenStream stream_142=new RewriteRuleTokenStream(adaptor,"token 142");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 230) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:595:6: ( 'DT-THE' TOKEN -> ^( 'DT-THE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:595:7: 'DT-THE' TOKEN
            {
            string_literal930=(Token)match(input,142,FOLLOW_142_in_dtTHE5009_static.FOLLOW_142_in_dtTHE5009); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_142.add(string_literal930);

            TOKEN931=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dtTHE5011_static.FOLLOW_TOKEN_in_dtTHE5011); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN931);



            // AST REWRITE
            // elements: TOKEN, 142
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 595:22: -> ^( 'DT-THE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:595:25: ^( 'DT-THE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_142.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 230, dtTHE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dtTHE"

    public static class lrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:597:1: lrb : '-LRB-' TOKEN -> ^( '-LRB-' TOKEN ) ;
    public final ChemicalChunkerParser.lrb_return lrb() throws RecognitionException {
        ChemicalChunkerParser.lrb_return retval = new ChemicalChunkerParser.lrb_return();
        retval.start = input.LT(1);
        int lrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal932=null;
        Token TOKEN933=null;

        Object string_literal932_tree=null;
        Object TOKEN933_tree=null;
        RewriteRuleTokenStream stream_143=new RewriteRuleTokenStream(adaptor,"token 143");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 231) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:597:4: ( '-LRB-' TOKEN -> ^( '-LRB-' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:597:5: '-LRB-' TOKEN
            {
            string_literal932=(Token)match(input,143,FOLLOW_143_in_lrb5025_static.FOLLOW_143_in_lrb5025); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_143.add(string_literal932);

            TOKEN933=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lrb5027_static.FOLLOW_TOKEN_in_lrb5027); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN933);



            // AST REWRITE
            // elements: TOKEN, 143
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 597:19: -> ^( '-LRB-' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:597:22: ^( '-LRB-' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_143.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 231, lrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lrb"

    public static class rrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:598:1: rrb : '-RRB-' TOKEN -> ^( '-RRB-' TOKEN ) ;
    public final ChemicalChunkerParser.rrb_return rrb() throws RecognitionException {
        ChemicalChunkerParser.rrb_return retval = new ChemicalChunkerParser.rrb_return();
        retval.start = input.LT(1);
        int rrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal934=null;
        Token TOKEN935=null;

        Object string_literal934_tree=null;
        Object TOKEN935_tree=null;
        RewriteRuleTokenStream stream_144=new RewriteRuleTokenStream(adaptor,"token 144");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 232) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:598:4: ( '-RRB-' TOKEN -> ^( '-RRB-' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:598:5: '-RRB-' TOKEN
            {
            string_literal934=(Token)match(input,144,FOLLOW_144_in_rrb5040_static.FOLLOW_144_in_rrb5040); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_144.add(string_literal934);

            TOKEN935=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rrb5042_static.FOLLOW_TOKEN_in_rrb5042); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN935);



            // AST REWRITE
            // elements: TOKEN, 144
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 598:19: -> ^( '-RRB-' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:598:22: ^( '-RRB-' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_144.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 232, rrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rrb"

    public static class cc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cc"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:603:1: cc : 'CC' TOKEN -> ^( 'CC' TOKEN ) ;
    public final ChemicalChunkerParser.cc_return cc() throws RecognitionException {
        ChemicalChunkerParser.cc_return retval = new ChemicalChunkerParser.cc_return();
        retval.start = input.LT(1);
        int cc_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal936=null;
        Token TOKEN937=null;

        Object string_literal936_tree=null;
        Object TOKEN937_tree=null;
        RewriteRuleTokenStream stream_145=new RewriteRuleTokenStream(adaptor,"token 145");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 233) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:603:3: ( 'CC' TOKEN -> ^( 'CC' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:603:4: 'CC' TOKEN
            {
            string_literal936=(Token)match(input,145,FOLLOW_145_in_cc5059_static.FOLLOW_145_in_cc5059); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_145.add(string_literal936);

            TOKEN937=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cc5061_static.FOLLOW_TOKEN_in_cc5061); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN937);



            // AST REWRITE
            // elements: TOKEN, 145
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 603:15: -> ^( 'CC' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:603:18: ^( 'CC' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_145.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 233, cc_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cc"

    public static class cd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:606:1: cd : 'CD' TOKEN -> ^( 'CD' TOKEN ) ;
    public final ChemicalChunkerParser.cd_return cd() throws RecognitionException {
        ChemicalChunkerParser.cd_return retval = new ChemicalChunkerParser.cd_return();
        retval.start = input.LT(1);
        int cd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal938=null;
        Token TOKEN939=null;

        Object string_literal938_tree=null;
        Object TOKEN939_tree=null;
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 234) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:606:3: ( 'CD' TOKEN -> ^( 'CD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:606:4: 'CD' TOKEN
            {
            string_literal938=(Token)match(input,146,FOLLOW_146_in_cd5076_static.FOLLOW_146_in_cd5076); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_146.add(string_literal938);

            TOKEN939=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cd5078_static.FOLLOW_TOKEN_in_cd5078); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN939);



            // AST REWRITE
            // elements: 146, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 606:15: -> ^( 'CD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:606:18: ^( 'CD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_146.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 234, cd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cd"

    public static class dt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:609:1: dt : 'DT' TOKEN -> ^( 'DT' TOKEN ) ;
    public final ChemicalChunkerParser.dt_return dt() throws RecognitionException {
        ChemicalChunkerParser.dt_return retval = new ChemicalChunkerParser.dt_return();
        retval.start = input.LT(1);
        int dt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal940=null;
        Token TOKEN941=null;

        Object string_literal940_tree=null;
        Object TOKEN941_tree=null;
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 235) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:609:3: ( 'DT' TOKEN -> ^( 'DT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:609:4: 'DT' TOKEN
            {
            string_literal940=(Token)match(input,147,FOLLOW_147_in_dt5093_static.FOLLOW_147_in_dt5093); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_147.add(string_literal940);

            TOKEN941=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dt5095_static.FOLLOW_TOKEN_in_dt5095); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN941);



            // AST REWRITE
            // elements: 147, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 609:15: -> ^( 'DT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:609:18: ^( 'DT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_147.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 235, dt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dt"

    public static class ex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ex"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:612:1: ex : 'EX' TOKEN -> ^( 'EX' TOKEN ) ;
    public final ChemicalChunkerParser.ex_return ex() throws RecognitionException {
        ChemicalChunkerParser.ex_return retval = new ChemicalChunkerParser.ex_return();
        retval.start = input.LT(1);
        int ex_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal942=null;
        Token TOKEN943=null;

        Object string_literal942_tree=null;
        Object TOKEN943_tree=null;
        RewriteRuleTokenStream stream_148=new RewriteRuleTokenStream(adaptor,"token 148");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 236) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:612:3: ( 'EX' TOKEN -> ^( 'EX' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:612:4: 'EX' TOKEN
            {
            string_literal942=(Token)match(input,148,FOLLOW_148_in_ex5110_static.FOLLOW_148_in_ex5110); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_148.add(string_literal942);

            TOKEN943=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ex5112_static.FOLLOW_TOKEN_in_ex5112); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN943);



            // AST REWRITE
            // elements: TOKEN, 148
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 612:15: -> ^( 'EX' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:612:18: ^( 'EX' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_148.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 236, ex_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ex"

    public static class fw_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fw"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:615:1: fw : 'FW' TOKEN -> ^( 'FW' TOKEN ) ;
    public final ChemicalChunkerParser.fw_return fw() throws RecognitionException {
        ChemicalChunkerParser.fw_return retval = new ChemicalChunkerParser.fw_return();
        retval.start = input.LT(1);
        int fw_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal944=null;
        Token TOKEN945=null;

        Object string_literal944_tree=null;
        Object TOKEN945_tree=null;
        RewriteRuleTokenStream stream_149=new RewriteRuleTokenStream(adaptor,"token 149");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 237) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:615:3: ( 'FW' TOKEN -> ^( 'FW' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:615:4: 'FW' TOKEN
            {
            string_literal944=(Token)match(input,149,FOLLOW_149_in_fw5127_static.FOLLOW_149_in_fw5127); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_149.add(string_literal944);

            TOKEN945=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fw5129_static.FOLLOW_TOKEN_in_fw5129); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN945);



            // AST REWRITE
            // elements: 149, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 615:15: -> ^( 'FW' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:615:18: ^( 'FW' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_149.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 237, fw_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fw"

    public static class in_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:618:1: in : 'IN' TOKEN -> ^( 'IN' TOKEN ) ;
    public final ChemicalChunkerParser.in_return in() throws RecognitionException {
        ChemicalChunkerParser.in_return retval = new ChemicalChunkerParser.in_return();
        retval.start = input.LT(1);
        int in_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal946=null;
        Token TOKEN947=null;

        Object string_literal946_tree=null;
        Object TOKEN947_tree=null;
        RewriteRuleTokenStream stream_150=new RewriteRuleTokenStream(adaptor,"token 150");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 238) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:618:3: ( 'IN' TOKEN -> ^( 'IN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:618:4: 'IN' TOKEN
            {
            string_literal946=(Token)match(input,150,FOLLOW_150_in_in5144_static.FOLLOW_150_in_in5144); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_150.add(string_literal946);

            TOKEN947=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_in5146_static.FOLLOW_TOKEN_in_in5146); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN947);



            // AST REWRITE
            // elements: 150, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 618:15: -> ^( 'IN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:618:18: ^( 'IN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_150.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 238, in_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "in"

    public static class jj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:621:1: jj : 'JJ' TOKEN -> ^( 'JJ' TOKEN ) ;
    public final ChemicalChunkerParser.jj_return jj() throws RecognitionException {
        ChemicalChunkerParser.jj_return retval = new ChemicalChunkerParser.jj_return();
        retval.start = input.LT(1);
        int jj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal948=null;
        Token TOKEN949=null;

        Object string_literal948_tree=null;
        Object TOKEN949_tree=null;
        RewriteRuleTokenStream stream_151=new RewriteRuleTokenStream(adaptor,"token 151");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 239) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:621:3: ( 'JJ' TOKEN -> ^( 'JJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:621:4: 'JJ' TOKEN
            {
            string_literal948=(Token)match(input,151,FOLLOW_151_in_jj5161_static.FOLLOW_151_in_jj5161); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_151.add(string_literal948);

            TOKEN949=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jj5163_static.FOLLOW_TOKEN_in_jj5163); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN949);



            // AST REWRITE
            // elements: 151, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 621:15: -> ^( 'JJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:621:18: ^( 'JJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_151.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 239, jj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jj"

    public static class jjr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjr"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:624:1: jjr : 'JJR' TOKEN -> ^( 'JJR' TOKEN ) ;
    public final ChemicalChunkerParser.jjr_return jjr() throws RecognitionException {
        ChemicalChunkerParser.jjr_return retval = new ChemicalChunkerParser.jjr_return();
        retval.start = input.LT(1);
        int jjr_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal950=null;
        Token TOKEN951=null;

        Object string_literal950_tree=null;
        Object TOKEN951_tree=null;
        RewriteRuleTokenStream stream_152=new RewriteRuleTokenStream(adaptor,"token 152");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 240) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:624:4: ( 'JJR' TOKEN -> ^( 'JJR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:624:5: 'JJR' TOKEN
            {
            string_literal950=(Token)match(input,152,FOLLOW_152_in_jjr5178_static.FOLLOW_152_in_jjr5178); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_152.add(string_literal950);

            TOKEN951=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjr5180_static.FOLLOW_TOKEN_in_jjr5180); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN951);



            // AST REWRITE
            // elements: 152, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 624:17: -> ^( 'JJR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:624:20: ^( 'JJR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_152.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 240, jjr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjr"

    public static class jjs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjs"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:627:1: jjs : 'JJS' TOKEN -> ^( 'JJS' TOKEN ) ;
    public final ChemicalChunkerParser.jjs_return jjs() throws RecognitionException {
        ChemicalChunkerParser.jjs_return retval = new ChemicalChunkerParser.jjs_return();
        retval.start = input.LT(1);
        int jjs_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal952=null;
        Token TOKEN953=null;

        Object string_literal952_tree=null;
        Object TOKEN953_tree=null;
        RewriteRuleTokenStream stream_153=new RewriteRuleTokenStream(adaptor,"token 153");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 241) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:627:4: ( 'JJS' TOKEN -> ^( 'JJS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:627:5: 'JJS' TOKEN
            {
            string_literal952=(Token)match(input,153,FOLLOW_153_in_jjs5195_static.FOLLOW_153_in_jjs5195); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_153.add(string_literal952);

            TOKEN953=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjs5197_static.FOLLOW_TOKEN_in_jjs5197); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN953);



            // AST REWRITE
            // elements: 153, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 627:17: -> ^( 'JJS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:627:20: ^( 'JJS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_153.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 241, jjs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjs"

    public static class ls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ls"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:630:1: ls : 'LS' TOKEN -> ^( 'LS' TOKEN ) ;
    public final ChemicalChunkerParser.ls_return ls() throws RecognitionException {
        ChemicalChunkerParser.ls_return retval = new ChemicalChunkerParser.ls_return();
        retval.start = input.LT(1);
        int ls_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal954=null;
        Token TOKEN955=null;

        Object string_literal954_tree=null;
        Object TOKEN955_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_154=new RewriteRuleTokenStream(adaptor,"token 154");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 242) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:630:3: ( 'LS' TOKEN -> ^( 'LS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:630:4: 'LS' TOKEN
            {
            string_literal954=(Token)match(input,154,FOLLOW_154_in_ls5212_static.FOLLOW_154_in_ls5212); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_154.add(string_literal954);

            TOKEN955=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ls5214_static.FOLLOW_TOKEN_in_ls5214); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN955);



            // AST REWRITE
            // elements: TOKEN, 154
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 630:15: -> ^( 'LS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:630:18: ^( 'LS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_154.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 242, ls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ls"

    public static class md_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "md"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:633:1: md : 'MD' TOKEN -> ^( 'MD' TOKEN ) ;
    public final ChemicalChunkerParser.md_return md() throws RecognitionException {
        ChemicalChunkerParser.md_return retval = new ChemicalChunkerParser.md_return();
        retval.start = input.LT(1);
        int md_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal956=null;
        Token TOKEN957=null;

        Object string_literal956_tree=null;
        Object TOKEN957_tree=null;
        RewriteRuleTokenStream stream_155=new RewriteRuleTokenStream(adaptor,"token 155");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 243) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:633:3: ( 'MD' TOKEN -> ^( 'MD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:633:4: 'MD' TOKEN
            {
            string_literal956=(Token)match(input,155,FOLLOW_155_in_md5229_static.FOLLOW_155_in_md5229); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_155.add(string_literal956);

            TOKEN957=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_md5231_static.FOLLOW_TOKEN_in_md5231); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN957);



            // AST REWRITE
            // elements: 155, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 633:15: -> ^( 'MD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:633:18: ^( 'MD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_155.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 243, md_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "md"

    public static class nn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:636:1: nn : 'NN' TOKEN -> ^( 'NN' TOKEN ) ;
    public final ChemicalChunkerParser.nn_return nn() throws RecognitionException {
        ChemicalChunkerParser.nn_return retval = new ChemicalChunkerParser.nn_return();
        retval.start = input.LT(1);
        int nn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal958=null;
        Token TOKEN959=null;

        Object string_literal958_tree=null;
        Object TOKEN959_tree=null;
        RewriteRuleTokenStream stream_156=new RewriteRuleTokenStream(adaptor,"token 156");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 244) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:636:3: ( 'NN' TOKEN -> ^( 'NN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:636:4: 'NN' TOKEN
            {
            string_literal958=(Token)match(input,156,FOLLOW_156_in_nn5246_static.FOLLOW_156_in_nn5246); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_156.add(string_literal958);

            TOKEN959=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn5248_static.FOLLOW_TOKEN_in_nn5248); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN959);



            // AST REWRITE
            // elements: 156, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 636:15: -> ^( 'NN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:636:18: ^( 'NN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_156.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 244, nn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nn"

    public static class nns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:639:1: nns : 'NNS' TOKEN -> ^( 'NNS' TOKEN ) ;
    public final ChemicalChunkerParser.nns_return nns() throws RecognitionException {
        ChemicalChunkerParser.nns_return retval = new ChemicalChunkerParser.nns_return();
        retval.start = input.LT(1);
        int nns_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal960=null;
        Token TOKEN961=null;

        Object string_literal960_tree=null;
        Object TOKEN961_tree=null;
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 245) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:639:4: ( 'NNS' TOKEN -> ^( 'NNS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:639:5: 'NNS' TOKEN
            {
            string_literal960=(Token)match(input,157,FOLLOW_157_in_nns5263_static.FOLLOW_157_in_nns5263); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_157.add(string_literal960);

            TOKEN961=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns5265_static.FOLLOW_TOKEN_in_nns5265); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN961);



            // AST REWRITE
            // elements: TOKEN, 157
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 639:17: -> ^( 'NNS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:639:20: ^( 'NNS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_157.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 245, nns_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nns"

    public static class nnp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:642:1: nnp : 'NNP' TOKEN -> ^( 'NNP' TOKEN ) ;
    public final ChemicalChunkerParser.nnp_return nnp() throws RecognitionException {
        ChemicalChunkerParser.nnp_return retval = new ChemicalChunkerParser.nnp_return();
        retval.start = input.LT(1);
        int nnp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal962=null;
        Token TOKEN963=null;

        Object string_literal962_tree=null;
        Object TOKEN963_tree=null;
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 246) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:642:4: ( 'NNP' TOKEN -> ^( 'NNP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:642:5: 'NNP' TOKEN
            {
            string_literal962=(Token)match(input,158,FOLLOW_158_in_nnp5280_static.FOLLOW_158_in_nnp5280); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_158.add(string_literal962);

            TOKEN963=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnp5282_static.FOLLOW_TOKEN_in_nnp5282); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN963);



            // AST REWRITE
            // elements: 158, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 642:17: -> ^( 'NNP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:642:20: ^( 'NNP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_158.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 246, nnp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnp"

    public static class nnps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnps"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:645:1: nnps : 'NNPS' TOKEN -> ^( 'NNPS' TOKEN ) ;
    public final ChemicalChunkerParser.nnps_return nnps() throws RecognitionException {
        ChemicalChunkerParser.nnps_return retval = new ChemicalChunkerParser.nnps_return();
        retval.start = input.LT(1);
        int nnps_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal964=null;
        Token TOKEN965=null;

        Object string_literal964_tree=null;
        Object TOKEN965_tree=null;
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 247) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:645:5: ( 'NNPS' TOKEN -> ^( 'NNPS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:645:6: 'NNPS' TOKEN
            {
            string_literal964=(Token)match(input,159,FOLLOW_159_in_nnps5297_static.FOLLOW_159_in_nnps5297); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_159.add(string_literal964);

            TOKEN965=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnps5299_static.FOLLOW_TOKEN_in_nnps5299); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN965);



            // AST REWRITE
            // elements: 159, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 645:19: -> ^( 'NNPS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:645:22: ^( 'NNPS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_159.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 247, nnps_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnps"

    public static class pdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pdt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:648:1: pdt : 'PDT' TOKEN -> ^( 'PDT' TOKEN ) ;
    public final ChemicalChunkerParser.pdt_return pdt() throws RecognitionException {
        ChemicalChunkerParser.pdt_return retval = new ChemicalChunkerParser.pdt_return();
        retval.start = input.LT(1);
        int pdt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal966=null;
        Token TOKEN967=null;

        Object string_literal966_tree=null;
        Object TOKEN967_tree=null;
        RewriteRuleTokenStream stream_160=new RewriteRuleTokenStream(adaptor,"token 160");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 248) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:648:4: ( 'PDT' TOKEN -> ^( 'PDT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:648:5: 'PDT' TOKEN
            {
            string_literal966=(Token)match(input,160,FOLLOW_160_in_pdt5314_static.FOLLOW_160_in_pdt5314); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_160.add(string_literal966);

            TOKEN967=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pdt5316_static.FOLLOW_TOKEN_in_pdt5316); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN967);



            // AST REWRITE
            // elements: TOKEN, 160
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 648:17: -> ^( 'PDT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:648:20: ^( 'PDT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_160.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 248, pdt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pdt"

    public static class pos_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pos"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:651:1: pos : 'POS' TOKEN -> ^( 'POS' TOKEN ) ;
    public final ChemicalChunkerParser.pos_return pos() throws RecognitionException {
        ChemicalChunkerParser.pos_return retval = new ChemicalChunkerParser.pos_return();
        retval.start = input.LT(1);
        int pos_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal968=null;
        Token TOKEN969=null;

        Object string_literal968_tree=null;
        Object TOKEN969_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 249) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:651:4: ( 'POS' TOKEN -> ^( 'POS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:651:5: 'POS' TOKEN
            {
            string_literal968=(Token)match(input,161,FOLLOW_161_in_pos5331_static.FOLLOW_161_in_pos5331); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_161.add(string_literal968);

            TOKEN969=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pos5333_static.FOLLOW_TOKEN_in_pos5333); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN969);



            // AST REWRITE
            // elements: TOKEN, 161
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 651:17: -> ^( 'POS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:651:20: ^( 'POS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_161.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 249, pos_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pos"

    public static class prp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:654:1: prp : 'PRP' TOKEN -> ^( 'PRP' TOKEN ) ;
    public final ChemicalChunkerParser.prp_return prp() throws RecognitionException {
        ChemicalChunkerParser.prp_return retval = new ChemicalChunkerParser.prp_return();
        retval.start = input.LT(1);
        int prp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal970=null;
        Token TOKEN971=null;

        Object string_literal970_tree=null;
        Object TOKEN971_tree=null;
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 250) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:654:4: ( 'PRP' TOKEN -> ^( 'PRP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:654:5: 'PRP' TOKEN
            {
            string_literal970=(Token)match(input,162,FOLLOW_162_in_prp5348_static.FOLLOW_162_in_prp5348); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_162.add(string_literal970);

            TOKEN971=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp5350_static.FOLLOW_TOKEN_in_prp5350); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN971);



            // AST REWRITE
            // elements: TOKEN, 162
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 654:17: -> ^( 'PRP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:654:20: ^( 'PRP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_162.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 250, prp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prp"

    public static class prp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:657:1: prp_poss : 'PRP$' TOKEN -> ^( 'PRP$' TOKEN ) ;
    public final ChemicalChunkerParser.prp_poss_return prp_poss() throws RecognitionException {
        ChemicalChunkerParser.prp_poss_return retval = new ChemicalChunkerParser.prp_poss_return();
        retval.start = input.LT(1);
        int prp_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal972=null;
        Token TOKEN973=null;

        Object string_literal972_tree=null;
        Object TOKEN973_tree=null;
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 251) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:657:9: ( 'PRP$' TOKEN -> ^( 'PRP$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:657:10: 'PRP$' TOKEN
            {
            string_literal972=(Token)match(input,163,FOLLOW_163_in_prp_poss5365_static.FOLLOW_163_in_prp_poss5365); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_163.add(string_literal972);

            TOKEN973=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp_poss5367_static.FOLLOW_TOKEN_in_prp_poss5367); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN973);



            // AST REWRITE
            // elements: TOKEN, 163
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 657:23: -> ^( 'PRP$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:657:26: ^( 'PRP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_163.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 251, prp_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prp_poss"

    public static class rb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:660:1: rb : 'RB' TOKEN -> ^( 'RB' TOKEN ) ;
    public final ChemicalChunkerParser.rb_return rb() throws RecognitionException {
        ChemicalChunkerParser.rb_return retval = new ChemicalChunkerParser.rb_return();
        retval.start = input.LT(1);
        int rb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal974=null;
        Token TOKEN975=null;

        Object string_literal974_tree=null;
        Object TOKEN975_tree=null;
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 252) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:660:3: ( 'RB' TOKEN -> ^( 'RB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:660:4: 'RB' TOKEN
            {
            string_literal974=(Token)match(input,164,FOLLOW_164_in_rb5382_static.FOLLOW_164_in_rb5382); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_164.add(string_literal974);

            TOKEN975=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rb5384_static.FOLLOW_TOKEN_in_rb5384); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN975);



            // AST REWRITE
            // elements: TOKEN, 164
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 660:15: -> ^( 'RB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:660:18: ^( 'RB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_164.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 252, rb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rb"

    public static class rbr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbr"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:663:1: rbr : 'RBR' TOKEN -> ^( 'RBR' TOKEN ) ;
    public final ChemicalChunkerParser.rbr_return rbr() throws RecognitionException {
        ChemicalChunkerParser.rbr_return retval = new ChemicalChunkerParser.rbr_return();
        retval.start = input.LT(1);
        int rbr_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal976=null;
        Token TOKEN977=null;

        Object string_literal976_tree=null;
        Object TOKEN977_tree=null;
        RewriteRuleTokenStream stream_165=new RewriteRuleTokenStream(adaptor,"token 165");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 253) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:663:4: ( 'RBR' TOKEN -> ^( 'RBR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:663:5: 'RBR' TOKEN
            {
            string_literal976=(Token)match(input,165,FOLLOW_165_in_rbr5399_static.FOLLOW_165_in_rbr5399); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_165.add(string_literal976);

            TOKEN977=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbr5401_static.FOLLOW_TOKEN_in_rbr5401); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN977);



            // AST REWRITE
            // elements: TOKEN, 165
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 663:17: -> ^( 'RBR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:663:20: ^( 'RBR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_165.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 253, rbr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbr"

    public static class rbs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbs"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:666:1: rbs : 'RBS' TOKEN -> ^( 'RBS' TOKEN ) ;
    public final ChemicalChunkerParser.rbs_return rbs() throws RecognitionException {
        ChemicalChunkerParser.rbs_return retval = new ChemicalChunkerParser.rbs_return();
        retval.start = input.LT(1);
        int rbs_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal978=null;
        Token TOKEN979=null;

        Object string_literal978_tree=null;
        Object TOKEN979_tree=null;
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 254) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:666:4: ( 'RBS' TOKEN -> ^( 'RBS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:666:5: 'RBS' TOKEN
            {
            string_literal978=(Token)match(input,166,FOLLOW_166_in_rbs5416_static.FOLLOW_166_in_rbs5416); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_166.add(string_literal978);

            TOKEN979=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbs5418_static.FOLLOW_TOKEN_in_rbs5418); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN979);



            // AST REWRITE
            // elements: 166, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 666:17: -> ^( 'RBS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:666:20: ^( 'RBS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_166.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 254, rbs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbs"

    public static class rp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:669:1: rp : 'RP' TOKEN -> ^( 'RP' TOKEN ) ;
    public final ChemicalChunkerParser.rp_return rp() throws RecognitionException {
        ChemicalChunkerParser.rp_return retval = new ChemicalChunkerParser.rp_return();
        retval.start = input.LT(1);
        int rp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal980=null;
        Token TOKEN981=null;

        Object string_literal980_tree=null;
        Object TOKEN981_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 255) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:669:3: ( 'RP' TOKEN -> ^( 'RP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:669:4: 'RP' TOKEN
            {
            string_literal980=(Token)match(input,167,FOLLOW_167_in_rp5433_static.FOLLOW_167_in_rp5433); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_167.add(string_literal980);

            TOKEN981=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rp5435_static.FOLLOW_TOKEN_in_rp5435); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN981);



            // AST REWRITE
            // elements: TOKEN, 167
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 669:15: -> ^( 'RP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:669:18: ^( 'RP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_167.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 255, rp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rp"

    public static class sym_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sym"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:672:1: sym : 'SYM' TOKEN -> ^( 'SYM' TOKEN ) ;
    public final ChemicalChunkerParser.sym_return sym() throws RecognitionException {
        ChemicalChunkerParser.sym_return retval = new ChemicalChunkerParser.sym_return();
        retval.start = input.LT(1);
        int sym_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal982=null;
        Token TOKEN983=null;

        Object string_literal982_tree=null;
        Object TOKEN983_tree=null;
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 256) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:672:4: ( 'SYM' TOKEN -> ^( 'SYM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:672:5: 'SYM' TOKEN
            {
            string_literal982=(Token)match(input,168,FOLLOW_168_in_sym5450_static.FOLLOW_168_in_sym5450); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_168.add(string_literal982);

            TOKEN983=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_sym5452_static.FOLLOW_TOKEN_in_sym5452); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN983);



            // AST REWRITE
            // elements: TOKEN, 168
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 672:17: -> ^( 'SYM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:672:20: ^( 'SYM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_168.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 256, sym_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sym"

    public static class to_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:675:1: to : 'TO' TOKEN -> ^( 'TO' TOKEN ) ;
    public final ChemicalChunkerParser.to_return to() throws RecognitionException {
        ChemicalChunkerParser.to_return retval = new ChemicalChunkerParser.to_return();
        retval.start = input.LT(1);
        int to_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal984=null;
        Token TOKEN985=null;

        Object string_literal984_tree=null;
        Object TOKEN985_tree=null;
        RewriteRuleTokenStream stream_169=new RewriteRuleTokenStream(adaptor,"token 169");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 257) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:675:3: ( 'TO' TOKEN -> ^( 'TO' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:675:4: 'TO' TOKEN
            {
            string_literal984=(Token)match(input,169,FOLLOW_169_in_to5467_static.FOLLOW_169_in_to5467); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_169.add(string_literal984);

            TOKEN985=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_to5469_static.FOLLOW_TOKEN_in_to5469); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN985);



            // AST REWRITE
            // elements: TOKEN, 169
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 675:15: -> ^( 'TO' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:675:18: ^( 'TO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_169.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 257, to_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "to"

    public static class uh_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uh"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:678:1: uh : 'UH' TOKEN -> ^( 'UH' TOKEN ) ;
    public final ChemicalChunkerParser.uh_return uh() throws RecognitionException {
        ChemicalChunkerParser.uh_return retval = new ChemicalChunkerParser.uh_return();
        retval.start = input.LT(1);
        int uh_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal986=null;
        Token TOKEN987=null;

        Object string_literal986_tree=null;
        Object TOKEN987_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 258) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:678:3: ( 'UH' TOKEN -> ^( 'UH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:678:4: 'UH' TOKEN
            {
            string_literal986=(Token)match(input,170,FOLLOW_170_in_uh5484_static.FOLLOW_170_in_uh5484); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_170.add(string_literal986);

            TOKEN987=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_uh5486_static.FOLLOW_TOKEN_in_uh5486); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN987);



            // AST REWRITE
            // elements: TOKEN, 170
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 678:15: -> ^( 'UH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:678:18: ^( 'UH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_170.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 258, uh_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "uh"

    public static class vb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:681:1: vb : 'VB' TOKEN -> ^( 'VB' TOKEN ) ;
    public final ChemicalChunkerParser.vb_return vb() throws RecognitionException {
        ChemicalChunkerParser.vb_return retval = new ChemicalChunkerParser.vb_return();
        retval.start = input.LT(1);
        int vb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal988=null;
        Token TOKEN989=null;

        Object string_literal988_tree=null;
        Object TOKEN989_tree=null;
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 259) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:681:3: ( 'VB' TOKEN -> ^( 'VB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:681:4: 'VB' TOKEN
            {
            string_literal988=(Token)match(input,171,FOLLOW_171_in_vb5501_static.FOLLOW_171_in_vb5501); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_171.add(string_literal988);

            TOKEN989=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vb5503_static.FOLLOW_TOKEN_in_vb5503); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN989);



            // AST REWRITE
            // elements: TOKEN, 171
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 681:15: -> ^( 'VB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:681:18: ^( 'VB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_171.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 259, vb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vb"

    public static class vbd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:684:1: vbd : 'VBD' TOKEN -> ^( 'VBD' TOKEN ) ;
    public final ChemicalChunkerParser.vbd_return vbd() throws RecognitionException {
        ChemicalChunkerParser.vbd_return retval = new ChemicalChunkerParser.vbd_return();
        retval.start = input.LT(1);
        int vbd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal990=null;
        Token TOKEN991=null;

        Object string_literal990_tree=null;
        Object TOKEN991_tree=null;
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 260) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:684:4: ( 'VBD' TOKEN -> ^( 'VBD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:684:5: 'VBD' TOKEN
            {
            string_literal990=(Token)match(input,172,FOLLOW_172_in_vbd5518_static.FOLLOW_172_in_vbd5518); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_172.add(string_literal990);

            TOKEN991=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbd5520_static.FOLLOW_TOKEN_in_vbd5520); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN991);



            // AST REWRITE
            // elements: 172, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 684:17: -> ^( 'VBD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:684:20: ^( 'VBD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_172.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 260, vbd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbd"

    public static class vbg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbg"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:687:1: vbg : 'VBG' TOKEN -> ^( 'VBG' TOKEN ) ;
    public final ChemicalChunkerParser.vbg_return vbg() throws RecognitionException {
        ChemicalChunkerParser.vbg_return retval = new ChemicalChunkerParser.vbg_return();
        retval.start = input.LT(1);
        int vbg_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal992=null;
        Token TOKEN993=null;

        Object string_literal992_tree=null;
        Object TOKEN993_tree=null;
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 261) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:687:4: ( 'VBG' TOKEN -> ^( 'VBG' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:687:5: 'VBG' TOKEN
            {
            string_literal992=(Token)match(input,173,FOLLOW_173_in_vbg5535_static.FOLLOW_173_in_vbg5535); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_173.add(string_literal992);

            TOKEN993=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbg5537_static.FOLLOW_TOKEN_in_vbg5537); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN993);



            // AST REWRITE
            // elements: TOKEN, 173
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 687:17: -> ^( 'VBG' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:687:20: ^( 'VBG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_173.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 261, vbg_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbg"

    public static class vbn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:690:1: vbn : 'VBN' TOKEN -> ^( 'VBN' TOKEN ) ;
    public final ChemicalChunkerParser.vbn_return vbn() throws RecognitionException {
        ChemicalChunkerParser.vbn_return retval = new ChemicalChunkerParser.vbn_return();
        retval.start = input.LT(1);
        int vbn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal994=null;
        Token TOKEN995=null;

        Object string_literal994_tree=null;
        Object TOKEN995_tree=null;
        RewriteRuleTokenStream stream_174=new RewriteRuleTokenStream(adaptor,"token 174");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 262) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:690:4: ( 'VBN' TOKEN -> ^( 'VBN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:690:5: 'VBN' TOKEN
            {
            string_literal994=(Token)match(input,174,FOLLOW_174_in_vbn5552_static.FOLLOW_174_in_vbn5552); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_174.add(string_literal994);

            TOKEN995=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbn5554_static.FOLLOW_TOKEN_in_vbn5554); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN995);



            // AST REWRITE
            // elements: 174, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 690:17: -> ^( 'VBN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:690:20: ^( 'VBN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_174.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 262, vbn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbn"

    public static class vbp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:693:1: vbp : 'VBP' TOKEN -> ^( 'VBP' TOKEN ) ;
    public final ChemicalChunkerParser.vbp_return vbp() throws RecognitionException {
        ChemicalChunkerParser.vbp_return retval = new ChemicalChunkerParser.vbp_return();
        retval.start = input.LT(1);
        int vbp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal996=null;
        Token TOKEN997=null;

        Object string_literal996_tree=null;
        Object TOKEN997_tree=null;
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 263) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:693:4: ( 'VBP' TOKEN -> ^( 'VBP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:693:5: 'VBP' TOKEN
            {
            string_literal996=(Token)match(input,175,FOLLOW_175_in_vbp5569_static.FOLLOW_175_in_vbp5569); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_175.add(string_literal996);

            TOKEN997=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbp5571_static.FOLLOW_TOKEN_in_vbp5571); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN997);



            // AST REWRITE
            // elements: 175, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 693:17: -> ^( 'VBP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:693:20: ^( 'VBP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_175.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 263, vbp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbp"

    public static class vbz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbz"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:696:1: vbz : 'VBZ' TOKEN -> ^( 'VBZ' TOKEN ) ;
    public final ChemicalChunkerParser.vbz_return vbz() throws RecognitionException {
        ChemicalChunkerParser.vbz_return retval = new ChemicalChunkerParser.vbz_return();
        retval.start = input.LT(1);
        int vbz_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal998=null;
        Token TOKEN999=null;

        Object string_literal998_tree=null;
        Object TOKEN999_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 264) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:696:4: ( 'VBZ' TOKEN -> ^( 'VBZ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:696:5: 'VBZ' TOKEN
            {
            string_literal998=(Token)match(input,176,FOLLOW_176_in_vbz5586_static.FOLLOW_176_in_vbz5586); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_176.add(string_literal998);

            TOKEN999=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbz5588_static.FOLLOW_TOKEN_in_vbz5588); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN999);



            // AST REWRITE
            // elements: TOKEN, 176
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 696:17: -> ^( 'VBZ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:696:20: ^( 'VBZ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_176.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 264, vbz_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbz"

    public static class wdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wdt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:699:1: wdt : 'WDT' TOKEN -> ^( 'WDT' TOKEN ) ;
    public final ChemicalChunkerParser.wdt_return wdt() throws RecognitionException {
        ChemicalChunkerParser.wdt_return retval = new ChemicalChunkerParser.wdt_return();
        retval.start = input.LT(1);
        int wdt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1000=null;
        Token TOKEN1001=null;

        Object string_literal1000_tree=null;
        Object TOKEN1001_tree=null;
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 265) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:699:4: ( 'WDT' TOKEN -> ^( 'WDT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:699:5: 'WDT' TOKEN
            {
            string_literal1000=(Token)match(input,177,FOLLOW_177_in_wdt5603_static.FOLLOW_177_in_wdt5603); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_177.add(string_literal1000);

            TOKEN1001=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wdt5605_static.FOLLOW_TOKEN_in_wdt5605); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1001);



            // AST REWRITE
            // elements: 177, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 699:17: -> ^( 'WDT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:699:20: ^( 'WDT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_177.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 265, wdt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wdt"

    public static class wp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:702:1: wp : 'WP' TOKEN -> ^( 'WP' TOKEN ) ;
    public final ChemicalChunkerParser.wp_return wp() throws RecognitionException {
        ChemicalChunkerParser.wp_return retval = new ChemicalChunkerParser.wp_return();
        retval.start = input.LT(1);
        int wp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1002=null;
        Token TOKEN1003=null;

        Object string_literal1002_tree=null;
        Object TOKEN1003_tree=null;
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 266) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:702:3: ( 'WP' TOKEN -> ^( 'WP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:702:4: 'WP' TOKEN
            {
            string_literal1002=(Token)match(input,178,FOLLOW_178_in_wp5620_static.FOLLOW_178_in_wp5620); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_178.add(string_literal1002);

            TOKEN1003=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp5622_static.FOLLOW_TOKEN_in_wp5622); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1003);



            // AST REWRITE
            // elements: 178, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 702:15: -> ^( 'WP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:702:18: ^( 'WP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_178.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 266, wp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wp"

    public static class wp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:705:1: wp_poss : 'WP$' TOKEN -> ^( 'WP$' TOKEN ) ;
    public final ChemicalChunkerParser.wp_poss_return wp_poss() throws RecognitionException {
        ChemicalChunkerParser.wp_poss_return retval = new ChemicalChunkerParser.wp_poss_return();
        retval.start = input.LT(1);
        int wp_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1004=null;
        Token TOKEN1005=null;

        Object string_literal1004_tree=null;
        Object TOKEN1005_tree=null;
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 267) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:705:8: ( 'WP$' TOKEN -> ^( 'WP$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:705:9: 'WP$' TOKEN
            {
            string_literal1004=(Token)match(input,179,FOLLOW_179_in_wp_poss5637_static.FOLLOW_179_in_wp_poss5637); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_179.add(string_literal1004);

            TOKEN1005=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp_poss5639_static.FOLLOW_TOKEN_in_wp_poss5639); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1005);



            // AST REWRITE
            // elements: 179, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 705:21: -> ^( 'WP$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:705:24: ^( 'WP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_179.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 267, wp_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wp_poss"

    public static class wrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:708:1: wrb : 'WRB' TOKEN -> ^( 'WRB' TOKEN ) ;
    public final ChemicalChunkerParser.wrb_return wrb() throws RecognitionException {
        ChemicalChunkerParser.wrb_return retval = new ChemicalChunkerParser.wrb_return();
        retval.start = input.LT(1);
        int wrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1006=null;
        Token TOKEN1007=null;

        Object string_literal1006_tree=null;
        Object TOKEN1007_tree=null;
        RewriteRuleTokenStream stream_180=new RewriteRuleTokenStream(adaptor,"token 180");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 268) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:708:4: ( 'WRB' TOKEN -> ^( 'WRB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:708:5: 'WRB' TOKEN
            {
            string_literal1006=(Token)match(input,180,FOLLOW_180_in_wrb5654_static.FOLLOW_180_in_wrb5654); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_180.add(string_literal1006);

            TOKEN1007=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wrb5656_static.FOLLOW_TOKEN_in_wrb5656); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1007);



            // AST REWRITE
            // elements: TOKEN, 180
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 708:17: -> ^( 'WRB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:708:20: ^( 'WRB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_180.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 268, wrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wrb"

    // $ANTLR start synpred2_ChemicalChunker
    public final void synpred2_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:12: ( procedureNounPhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:12: procedureNounPhrase
        {
        pushFollow(FOLLOW_procedureNounPhrase_in_synpred2_ChemicalChunker222_static.FOLLOW_procedureNounPhrase_in_synpred2_ChemicalChunker222);
        procedureNounPhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_ChemicalChunker

    // $ANTLR start synpred3_ChemicalChunker
    public final void synpred3_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:35: ( sentenceStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:35: sentenceStructure
        {
        pushFollow(FOLLOW_sentenceStructure_in_synpred3_ChemicalChunker227_static.FOLLOW_sentenceStructure_in_synpred3_ChemicalChunker227);
        sentenceStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_ChemicalChunker

    // $ANTLR start synpred4_ChemicalChunker
    public final void synpred4_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:53: ( unmatchedPhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:53: unmatchedPhrase
        {
        pushFollow(FOLLOW_unmatchedPhrase_in_synpred4_ChemicalChunker229_static.FOLLOW_unmatchedPhrase_in_synpred4_ChemicalChunker229);
        unmatchedPhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_ChemicalChunker

    // $ANTLR start synpred6_ChemicalChunker
    public final void synpred6_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:22: ( nounphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:22: nounphrase
        {
        pushFollow(FOLLOW_nounphrase_in_synpred6_ChemicalChunker244_static.FOLLOW_nounphrase_in_synpred6_ChemicalChunker244);
        nounphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_ChemicalChunker

    // $ANTLR start synpred7_ChemicalChunker
    public final void synpred7_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:33: ( verbphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:33: verbphrase
        {
        pushFollow(FOLLOW_verbphrase_in_synpred7_ChemicalChunker246_static.FOLLOW_verbphrase_in_synpred7_ChemicalChunker246);
        verbphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_ChemicalChunker

    // $ANTLR start synpred8_ChemicalChunker
    public final void synpred8_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:44: ( prepphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:44: prepphrase
        {
        pushFollow(FOLLOW_prepphrase_in_synpred8_ChemicalChunker248_static.FOLLOW_prepphrase_in_synpred8_ChemicalChunker248);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_ChemicalChunker

    // $ANTLR start synpred9_ChemicalChunker
    public final void synpred9_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:55: ( prepphraseAfter )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:55: prepphraseAfter
        {
        pushFollow(FOLLOW_prepphraseAfter_in_synpred9_ChemicalChunker250_static.FOLLOW_prepphraseAfter_in_synpred9_ChemicalChunker250);
        prepphraseAfter();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_ChemicalChunker

    // $ANTLR start synpred10_ChemicalChunker
    public final void synpred10_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:74: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:74: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred10_ChemicalChunker255_static.FOLLOW_advAdj_in_synpred10_ChemicalChunker255);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_ChemicalChunker

    // $ANTLR start synpred11_ChemicalChunker
    public final void synpred11_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:81: ( colon )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:81: colon
        {
        pushFollow(FOLLOW_colon_in_synpred11_ChemicalChunker257_static.FOLLOW_colon_in_synpred11_ChemicalChunker257);
        colon();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_ChemicalChunker

    // $ANTLR start synpred12_ChemicalChunker
    public final void synpred12_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:90: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:90: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred12_ChemicalChunker262_static.FOLLOW_conjunction_in_synpred12_ChemicalChunker262);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_ChemicalChunker

    // $ANTLR start synpred13_ChemicalChunker
    public final void synpred13_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:102: ( rbconj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:102: rbconj
        {
        pushFollow(FOLLOW_rbconj_in_synpred13_ChemicalChunker264_static.FOLLOW_rbconj_in_synpred13_ChemicalChunker264);
        rbconj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_ChemicalChunker

    // $ANTLR start synpred14_ChemicalChunker
    public final void synpred14_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:109: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:109: comma
        {
        pushFollow(FOLLOW_comma_in_synpred14_ChemicalChunker266_static.FOLLOW_comma_in_synpred14_ChemicalChunker266);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_ChemicalChunker

    // $ANTLR start synpred86_ChemicalChunker
    public final void synpred86_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:96: ( headingProcedureTerminators )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:96: headingProcedureTerminators
        {
        pushFollow(FOLLOW_headingProcedureTerminators_in_synpred86_ChemicalChunker483_static.FOLLOW_headingProcedureTerminators_in_synpred86_ChemicalChunker483);
        headingProcedureTerminators();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred86_ChemicalChunker

    // $ANTLR start synpred92_ChemicalChunker
    public final void synpred92_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:4: ( nounphraseStructure1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:4: nounphraseStructure1
        {
        pushFollow(FOLLOW_nounphraseStructure1_in_synpred92_ChemicalChunker584_static.FOLLOW_nounphraseStructure1_in_synpred92_ChemicalChunker584);
        nounphraseStructure1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred92_ChemicalChunker

    // $ANTLR start synpred94_ChemicalChunker
    public final void synpred94_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:11: ( dt )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:11: dt
        {
        pushFollow(FOLLOW_dt_in_synpred94_ChemicalChunker615_static.FOLLOW_dt_in_synpred94_ChemicalChunker615);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred94_ChemicalChunker

    // $ANTLR start synpred95_ChemicalChunker
    public final void synpred95_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:35: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:35: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred95_ChemicalChunker622_static.FOLLOW_conjunction_in_synpred95_ChemicalChunker622);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred95_ChemicalChunker

    // $ANTLR start synpred96_ChemicalChunker
    public final void synpred96_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:35: ( ( conjunction )* nounphraseContent {...}?)
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:35: ( conjunction )* nounphraseContent {...}?
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:35: ( conjunction )*
        loop203:
        do {
            int alt203=2;
            alt203 = dfa203.predict(input);
            switch (alt203) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred96_ChemicalChunker622_static.FOLLOW_conjunction_in_synpred96_ChemicalChunker622);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop203;
            }
        } while (true);

        pushFollow(FOLLOW_nounphraseContent_in_synpred96_ChemicalChunker625_static.FOLLOW_nounphraseContent_in_synpred96_ChemicalChunker625);
        nounphraseContent();

        state._fsp--;
        if (state.failed) return ;
        if ( !((!followedByVBDorVBZthenVBYIELDed(input))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred96_ChemicalChunker", "!followedByVBDorVBZthenVBYIELDed(input)");
        }

        }
    }
    // $ANTLR end synpred96_ChemicalChunker

    // $ANTLR start synpred97_ChemicalChunker
    public final void synpred97_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:112: ( prepphraseOf )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:112: prepphraseOf
        {
        pushFollow(FOLLOW_prepphraseOf_in_synpred97_ChemicalChunker632_static.FOLLOW_prepphraseOf_in_synpred97_ChemicalChunker632);
        prepphraseOf();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred97_ChemicalChunker

    // $ANTLR start synpred98_ChemicalChunker
    public final void synpred98_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:126: ( prepphraseIN )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:126: prepphraseIN
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred98_ChemicalChunker635_static.FOLLOW_prepphraseIN_in_synpred98_ChemicalChunker635);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred98_ChemicalChunker

    // $ANTLR start synpred99_ChemicalChunker
    public final void synpred99_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:4: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:4: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred99_ChemicalChunker647_static.FOLLOW_advAdj_in_synpred99_ChemicalChunker647);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred99_ChemicalChunker

    // $ANTLR start synpred100_ChemicalChunker
    public final void synpred100_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:14: ( dissolvePhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:14: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred100_ChemicalChunker652_static.FOLLOW_dissolvePhrase_in_synpred100_ChemicalChunker652);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred100_ChemicalChunker

    // $ANTLR start synpred101_ChemicalChunker
    public final void synpred101_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:29: ( ratioOrBracketedRatio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:29: ratioOrBracketedRatio
        {
        pushFollow(FOLLOW_ratioOrBracketedRatio_in_synpred101_ChemicalChunker654_static.FOLLOW_ratioOrBracketedRatio_in_synpred101_ChemicalChunker654);
        ratioOrBracketedRatio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred101_ChemicalChunker

    // $ANTLR start synpred102_ChemicalChunker
    public final void synpred102_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:51: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:51: noun
        {
        pushFollow(FOLLOW_noun_in_synpred102_ChemicalChunker656_static.FOLLOW_noun_in_synpred102_ChemicalChunker656);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred102_ChemicalChunker

    // $ANTLR start synpred103_ChemicalChunker
    public final void synpred103_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:56: ( numeric )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:56: numeric
        {
        pushFollow(FOLLOW_numeric_in_synpred103_ChemicalChunker658_static.FOLLOW_numeric_in_synpred103_ChemicalChunker658);
        numeric();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred103_ChemicalChunker

    // $ANTLR start synpred104_ChemicalChunker
    public final void synpred104_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:64: ( bracketedContent )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:64: bracketedContent
        {
        pushFollow(FOLLOW_bracketedContent_in_synpred104_ChemicalChunker660_static.FOLLOW_bracketedContent_in_synpred104_ChemicalChunker660);
        bracketedContent();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred104_ChemicalChunker

    // $ANTLR start synpred105_ChemicalChunker
    public final void synpred105_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:202:5: ( dissolveStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:202:5: dissolveStructure
        {
        pushFollow(FOLLOW_dissolveStructure_in_synpred105_ChemicalChunker672_static.FOLLOW_dissolveStructure_in_synpred105_ChemicalChunker672);
        dissolveStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred105_ChemicalChunker

    // $ANTLR start synpred106_ChemicalChunker
    public final void synpred106_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:4: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:4: adj
        {
        pushFollow(FOLLOW_adj_in_synpred106_ChemicalChunker703_static.FOLLOW_adj_in_synpred106_ChemicalChunker703);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred106_ChemicalChunker

    // $ANTLR start synpred109_ChemicalChunker
    public final void synpred109_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:33: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:33: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred109_ChemicalChunker715_static.FOLLOW_molecule_in_synpred109_ChemicalChunker715);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred109_ChemicalChunker

    // $ANTLR start synpred110_ChemicalChunker
    public final void synpred110_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:72: ( conjunction molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:72: conjunction molecule
        {
        pushFollow(FOLLOW_conjunction_in_synpred110_ChemicalChunker724_static.FOLLOW_conjunction_in_synpred110_ChemicalChunker724);
        conjunction();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_molecule_in_synpred110_ChemicalChunker726_static.FOLLOW_molecule_in_synpred110_ChemicalChunker726);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred110_ChemicalChunker

    // $ANTLR start synpred112_ChemicalChunker
    public final void synpred112_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:208:16: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:208:16: adj
        {
        pushFollow(FOLLOW_adj_in_synpred112_ChemicalChunker743_static.FOLLOW_adj_in_synpred112_ChemicalChunker743);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred112_ChemicalChunker

    // $ANTLR start synpred114_ChemicalChunker
    public final void synpred114_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:208:27: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:208:27: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred114_ChemicalChunker750_static.FOLLOW_molecule_in_synpred114_ChemicalChunker750);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred114_ChemicalChunker

    // $ANTLR start synpred116_ChemicalChunker
    public final void synpred116_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:28: ( to )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:28: to
        {
        pushFollow(FOLLOW_to_in_synpred116_ChemicalChunker783_static.FOLLOW_to_in_synpred116_ChemicalChunker783);
        to();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred116_ChemicalChunker

    // $ANTLR start synpred117_ChemicalChunker
    public final void synpred117_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:32: ( inAll )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:32: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred117_ChemicalChunker786_static.FOLLOW_inAll_in_synpred117_ChemicalChunker786);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred117_ChemicalChunker

    // $ANTLR start synpred123_ChemicalChunker
    public final void synpred123_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:71: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:71: verb
        {
        pushFollow(FOLLOW_verb_in_synpred123_ChemicalChunker805_static.FOLLOW_verb_in_synpred123_ChemicalChunker805);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred123_ChemicalChunker

    // $ANTLR start synpred124_ChemicalChunker
    public final void synpred124_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:77: ( md )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:77: md
        {
        pushFollow(FOLLOW_md_in_synpred124_ChemicalChunker808_static.FOLLOW_md_in_synpred124_ChemicalChunker808);
        md();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred124_ChemicalChunker

    // $ANTLR start synpred125_ChemicalChunker
    public final void synpred125_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:81: ( adv )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:81: adv
        {
        pushFollow(FOLLOW_adv_in_synpred125_ChemicalChunker811_static.FOLLOW_adv_in_synpred125_ChemicalChunker811);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred125_ChemicalChunker

    // $ANTLR start synpred126_ChemicalChunker
    public final void synpred126_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:86: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:86: adj
        {
        pushFollow(FOLLOW_adj_in_synpred126_ChemicalChunker814_static.FOLLOW_adj_in_synpred126_ChemicalChunker814);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred126_ChemicalChunker

    // $ANTLR start synpred127_ChemicalChunker
    public final void synpred127_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:91: ( neg )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:91: neg
        {
        pushFollow(FOLLOW_neg_in_synpred127_ChemicalChunker817_static.FOLLOW_neg_in_synpred127_ChemicalChunker817);
        neg();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred127_ChemicalChunker

    // $ANTLR start synpred128_ChemicalChunker
    public final void synpred128_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:49: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:49: ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:49: ( md )*
        loop204:
        do {
            int alt204=2;
            switch ( input.LA(1) ) {
            case 155:
                {
                alt204=1;
                }
                break;

            }

            switch (alt204) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred128_ChemicalChunker793_static.FOLLOW_md_in_synpred128_ChemicalChunker793);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop204;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:53: ( rbconj )?
        int alt205=2;
        switch ( input.LA(1) ) {
            case 131:
                {
                alt205=1;
                }
                break;
        }

        switch (alt205) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: rbconj
                {
                pushFollow(FOLLOW_rbconj_in_synpred128_ChemicalChunker796_static.FOLLOW_rbconj_in_synpred128_ChemicalChunker796);
                rbconj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:61: ( adv )*
        loop206:
        do {
            int alt206=2;
            switch ( input.LA(1) ) {
            case 164:
            case 165:
            case 166:
            case 167:
                {
                alt206=1;
                }
                break;

            }

            switch (alt206) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred128_ChemicalChunker799_static.FOLLOW_adv_in_synpred128_ChemicalChunker799);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop206;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:66: ( adj )?
        int alt207=2;
        switch ( input.LA(1) ) {
            case 39:
            case 40:
            case 45:
            case 151:
            case 152:
            case 153:
                {
                alt207=1;
                }
                break;
        }

        switch (alt207) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred128_ChemicalChunker802_static.FOLLOW_adj_in_synpred128_ChemicalChunker802);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:71: ( verb )+
        int cnt208=0;
        loop208:
        do {
            int alt208=2;
            switch ( input.LA(1) ) {
            case 85:
            case 86:
            case 87:
            case 88:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 110:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 118:
            case 120:
            case 121:
            case 122:
            case 124:
            case 125:
            case 127:
            case 128:
            case 129:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
                {
                alt208=1;
                }
                break;

            }

            switch (alt208) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: verb
        	    {
        	    pushFollow(FOLLOW_verb_in_synpred128_ChemicalChunker805_static.FOLLOW_verb_in_synpred128_ChemicalChunker805);
        	    verb();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt208 >= 1 ) break loop208;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(208, input);
                    throw eee;
            }
            cnt208++;
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:77: ( md )*
        loop209:
        do {
            int alt209=2;
            switch ( input.LA(1) ) {
            case 155:
                {
                alt209=1;
                }
                break;

            }

            switch (alt209) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred128_ChemicalChunker808_static.FOLLOW_md_in_synpred128_ChemicalChunker808);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop209;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:81: ( adv )*
        loop210:
        do {
            int alt210=2;
            switch ( input.LA(1) ) {
            case 164:
            case 165:
            case 166:
            case 167:
                {
                alt210=1;
                }
                break;

            }

            switch (alt210) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred128_ChemicalChunker811_static.FOLLOW_adv_in_synpred128_ChemicalChunker811);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop210;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:86: ( adj )?
        int alt211=2;
        switch ( input.LA(1) ) {
            case 39:
            case 40:
            case 45:
            case 151:
            case 152:
            case 153:
                {
                alt211=1;
                }
                break;
        }

        switch (alt211) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred128_ChemicalChunker814_static.FOLLOW_adj_in_synpred128_ChemicalChunker814);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:91: ( neg )?
        int alt212=2;
        switch ( input.LA(1) ) {
            case 135:
                {
                alt212=1;
                }
                break;
        }

        switch (alt212) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
                {
                pushFollow(FOLLOW_neg_in_synpred128_ChemicalChunker817_static.FOLLOW_neg_in_synpred128_ChemicalChunker817);
                neg();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred128_ChemicalChunker

    // $ANTLR start synpred129_ChemicalChunker
    public final void synpred129_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:99: ( inoff )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:99: inoff
        {
        pushFollow(FOLLOW_inoff_in_synpred129_ChemicalChunker823_static.FOLLOW_inoff_in_synpred129_ChemicalChunker823);
        inoff();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred129_ChemicalChunker

    // $ANTLR start synpred132_ChemicalChunker
    public final void synpred132_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:107: ( ( cc )? ( comma )? prepphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:107: ( cc )? ( comma )? prepphrase
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:107: ( cc )?
        int alt213=2;
        switch ( input.LA(1) ) {
            case 145:
                {
                alt213=1;
                }
                break;
        }

        switch (alt213) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cc
                {
                pushFollow(FOLLOW_cc_in_synpred132_ChemicalChunker827_static.FOLLOW_cc_in_synpred132_ChemicalChunker827);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:111: ( comma )?
        int alt214=2;
        switch ( input.LA(1) ) {
            case 133:
                {
                alt214=1;
                }
                break;
        }

        switch (alt214) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: comma
                {
                pushFollow(FOLLOW_comma_in_synpred132_ChemicalChunker830_static.FOLLOW_comma_in_synpred132_ChemicalChunker830);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_prepphrase_in_synpred132_ChemicalChunker833_static.FOLLOW_prepphrase_in_synpred132_ChemicalChunker833);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred132_ChemicalChunker

    // $ANTLR start synpred142_ChemicalChunker
    public final void synpred142_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:58: ( degassMultiVerb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:58: degassMultiVerb
        {
        pushFollow(FOLLOW_degassMultiVerb_in_synpred142_ChemicalChunker863_static.FOLLOW_degassMultiVerb_in_synpred142_ChemicalChunker863);
        degassMultiVerb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred142_ChemicalChunker

    // $ANTLR start synpred155_ChemicalChunker
    public final void synpred155_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:183: ( vbdegass )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:183: vbdegass
        {
        pushFollow(FOLLOW_vbdegass_in_synpred155_ChemicalChunker889_static.FOLLOW_vbdegass_in_synpred155_ChemicalChunker889);
        vbdegass();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred155_ChemicalChunker

    // $ANTLR start synpred173_ChemicalChunker
    public final void synpred173_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:24: ( dash nounStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:24: dash nounStructure
        {
        pushFollow(FOLLOW_dash_in_synpred173_ChemicalChunker951_static.FOLLOW_dash_in_synpred173_ChemicalChunker951);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nounStructure_in_synpred173_ChemicalChunker953_static.FOLLOW_nounStructure_in_synpred173_ChemicalChunker953);
        nounStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred173_ChemicalChunker

    // $ANTLR start synpred176_ChemicalChunker
    public final void synpred176_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:31: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:31: citation
        {
        pushFollow(FOLLOW_citation_in_synpred176_ChemicalChunker968_static.FOLLOW_citation_in_synpred176_ChemicalChunker968);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred176_ChemicalChunker

    // $ANTLR start synpred177_ChemicalChunker
    public final void synpred177_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:40: ( cycles )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:40: cycles
        {
        pushFollow(FOLLOW_cycles_in_synpred177_ChemicalChunker970_static.FOLLOW_cycles_in_synpred177_ChemicalChunker970);
        cycles();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred177_ChemicalChunker

    // $ANTLR start synpred178_ChemicalChunker
    public final void synpred178_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:47: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:47: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred178_ChemicalChunker972_static.FOLLOW_molecule_in_synpred178_ChemicalChunker972);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred178_ChemicalChunker

    // $ANTLR start synpred179_ChemicalChunker
    public final void synpred179_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:56: ( apparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:56: apparatus
        {
        pushFollow(FOLLOW_apparatus_in_synpred179_ChemicalChunker974_static.FOLLOW_apparatus_in_synpred179_ChemicalChunker974);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred179_ChemicalChunker

    // $ANTLR start synpred180_ChemicalChunker
    public final void synpred180_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:66: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:66: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred180_ChemicalChunker976_static.FOLLOW_unnamedmolecule_in_synpred180_ChemicalChunker976);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred180_ChemicalChunker

    // $ANTLR start synpred181_ChemicalChunker
    public final void synpred181_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:82: ( nnstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:82: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred181_ChemicalChunker978_static.FOLLOW_nnstate_in_synpred181_ChemicalChunker978);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred181_ChemicalChunker

    // $ANTLR start synpred182_ChemicalChunker
    public final void synpred182_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:90: ( procedureNode )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:90: procedureNode
        {
        pushFollow(FOLLOW_procedureNode_in_synpred182_ChemicalChunker980_static.FOLLOW_procedureNode_in_synpred182_ChemicalChunker980);
        procedureNode();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred182_ChemicalChunker

    // $ANTLR start synpred183_ChemicalChunker
    public final void synpred183_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:104: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:104: nn
        {
        pushFollow(FOLLOW_nn_in_synpred183_ChemicalChunker982_static.FOLLOW_nn_in_synpred183_ChemicalChunker982);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred183_ChemicalChunker

    // $ANTLR start synpred186_ChemicalChunker
    public final void synpred186_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:115: ( nnadd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:115: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred186_ChemicalChunker988_static.FOLLOW_nnadd_in_synpred186_ChemicalChunker988);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred186_ChemicalChunker

    // $ANTLR start synpred188_ChemicalChunker
    public final void synpred188_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:139: ( nnexample )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:139: nnexample
        {
        pushFollow(FOLLOW_nnexample_in_synpred188_ChemicalChunker992_static.FOLLOW_nnexample_in_synpred188_ChemicalChunker992);
        nnexample();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred188_ChemicalChunker

    // $ANTLR start synpred189_ChemicalChunker
    public final void synpred189_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:149: ( range )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:149: range
        {
        pushFollow(FOLLOW_range_in_synpred189_ChemicalChunker994_static.FOLLOW_range_in_synpred189_ChemicalChunker994);
        range();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred189_ChemicalChunker

    // $ANTLR start synpred190_ChemicalChunker
    public final void synpred190_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:155: ( oscaronts )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:155: oscaronts
        {
        pushFollow(FOLLOW_oscaronts_in_synpred190_ChemicalChunker996_static.FOLLOW_oscaronts_in_synpred190_ChemicalChunker996);
        oscaronts();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred190_ChemicalChunker

    // $ANTLR start synpred192_ChemicalChunker
    public final void synpred192_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:172: ( nnatmosphere )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:172: nnatmosphere
        {
        pushFollow(FOLLOW_nnatmosphere_in_synpred192_ChemicalChunker1000_static.FOLLOW_nnatmosphere_in_synpred192_ChemicalChunker1000);
        nnatmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred192_ChemicalChunker

    // $ANTLR start synpred194_ChemicalChunker
    public final void synpred194_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:195: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:195: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred194_ChemicalChunker1004_static.FOLLOW_quantity_in_synpred194_ChemicalChunker1004);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred194_ChemicalChunker

    // $ANTLR start synpred195_ChemicalChunker
    public final void synpred195_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:204: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:204: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred195_ChemicalChunker1006_static.FOLLOW_nnchementity_in_synpred195_ChemicalChunker1006);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred195_ChemicalChunker

    // $ANTLR start synpred197_ChemicalChunker
    public final void synpred197_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:224: ( nnph )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:224: nnph
        {
        pushFollow(FOLLOW_nnph_in_synpred197_ChemicalChunker1010_static.FOLLOW_nnph_in_synpred197_ChemicalChunker1010);
        nnph();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred197_ChemicalChunker

    // $ANTLR start synpred199_ChemicalChunker
    public final void synpred199_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:237: ( nngeneral )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:237: nngeneral
        {
        pushFollow(FOLLOW_nngeneral_in_synpred199_ChemicalChunker1014_static.FOLLOW_nngeneral_in_synpred199_ChemicalChunker1014);
        nngeneral();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred199_ChemicalChunker

    // $ANTLR start synpred202_ChemicalChunker
    public final void synpred202_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:261: ( nnpressure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:261: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred202_ChemicalChunker1020_static.FOLLOW_nnpressure_in_synpred202_ChemicalChunker1020);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred202_ChemicalChunker

    // $ANTLR start synpred212_ChemicalChunker
    public final void synpred212_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:365: ( nnmixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:365: nnmixture
        {
        pushFollow(FOLLOW_nnmixture_in_synpred212_ChemicalChunker1040_static.FOLLOW_nnmixture_in_synpred212_ChemicalChunker1040);
        nnmixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred212_ChemicalChunker

    // $ANTLR start synpred213_ChemicalChunker
    public final void synpred213_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:375: ( squareBracketedReference )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:375: squareBracketedReference
        {
        pushFollow(FOLLOW_squareBracketedReference_in_synpred213_ChemicalChunker1042_static.FOLLOW_squareBracketedReference_in_synpred213_ChemicalChunker1042);
        squareBracketedReference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred213_ChemicalChunker

    // $ANTLR start synpred219_ChemicalChunker
    public final void synpred219_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:448: ( nnyield )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:448: nnyield
        {
        pushFollow(FOLLOW_nnyield_in_synpred219_ChemicalChunker1054_static.FOLLOW_nnyield_in_synpred219_ChemicalChunker1054);
        nnyield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred219_ChemicalChunker

    // $ANTLR start synpred227_ChemicalChunker
    public final void synpred227_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:11: ( prepphraseAtmosphere )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:11: prepphraseAtmosphere
        {
        pushFollow(FOLLOW_prepphraseAtmosphere_in_synpred227_ChemicalChunker1084_static.FOLLOW_prepphraseAtmosphere_in_synpred227_ChemicalChunker1084);
        prepphraseAtmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred227_ChemicalChunker

    // $ANTLR start synpred228_ChemicalChunker
    public final void synpred228_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:32: ( prepphraseTime )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:32: prepphraseTime
        {
        pushFollow(FOLLOW_prepphraseTime_in_synpred228_ChemicalChunker1086_static.FOLLOW_prepphraseTime_in_synpred228_ChemicalChunker1086);
        prepphraseTime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred228_ChemicalChunker

    // $ANTLR start synpred229_ChemicalChunker
    public final void synpred229_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:47: ( prepphraseTemp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:47: prepphraseTemp
        {
        pushFollow(FOLLOW_prepphraseTemp_in_synpred229_ChemicalChunker1088_static.FOLLOW_prepphraseTemp_in_synpred229_ChemicalChunker1088);
        prepphraseTemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred229_ChemicalChunker

    // $ANTLR start synpred230_ChemicalChunker
    public final void synpred230_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:62: ( prepphraseIN )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:62: prepphraseIN
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred230_ChemicalChunker1090_static.FOLLOW_prepphraseIN_in_synpred230_ChemicalChunker1090);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred230_ChemicalChunker

    // $ANTLR start synpred231_ChemicalChunker
    public final void synpred231_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:75: ( prepphraseRole )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:75: prepphraseRole
        {
        pushFollow(FOLLOW_prepphraseRole_in_synpred231_ChemicalChunker1092_static.FOLLOW_prepphraseRole_in_synpred231_ChemicalChunker1092);
        prepphraseRole();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred231_ChemicalChunker

    // $ANTLR start synpred233_ChemicalChunker
    public final void synpred233_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:16: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:16: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred233_ChemicalChunker1132_static.FOLLOW_advAdj_in_synpred233_ChemicalChunker1132);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred233_ChemicalChunker

    // $ANTLR start synpred234_ChemicalChunker
    public final void synpred234_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:33: ( nnatmosphere )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:33: nnatmosphere
        {
        pushFollow(FOLLOW_nnatmosphere_in_synpred234_ChemicalChunker1137_static.FOLLOW_nnatmosphere_in_synpred234_ChemicalChunker1137);
        nnatmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred234_ChemicalChunker

    // $ANTLR start synpred235_ChemicalChunker
    public final void synpred235_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:3: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:3: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred235_ChemicalChunker1165_static.FOLLOW_advAdj_in_synpred235_ChemicalChunker1165);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred235_ChemicalChunker

    // $ANTLR start synpred240_ChemicalChunker
    public final void synpred240_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:35: ( nntime )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:35: nntime
        {
        pushFollow(FOLLOW_nntime_in_synpred240_ChemicalChunker1181_static.FOLLOW_nntime_in_synpred240_ChemicalChunker1181);
        nntime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred240_ChemicalChunker

    // $ANTLR start synpred241_ChemicalChunker
    public final void synpred241_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:5: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:5: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred241_ChemicalChunker1212_static.FOLLOW_advAdj_in_synpred241_ChemicalChunker1212);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred241_ChemicalChunker

    // $ANTLR start synpred246_ChemicalChunker
    public final void synpred246_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:36: ( nntemp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:36: nntemp
        {
        pushFollow(FOLLOW_nntemp_in_synpred246_ChemicalChunker1227_static.FOLLOW_nntemp_in_synpred246_ChemicalChunker1227);
        nntemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred246_ChemicalChunker

    // $ANTLR start synpred252_ChemicalChunker
    public final void synpred252_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:15: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:15: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred252_ChemicalChunker1400_static.FOLLOW_conjunction_in_synpred252_ChemicalChunker1400);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred252_ChemicalChunker

    // $ANTLR start synpred253_ChemicalChunker
    public final void synpred253_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:15: ( ( conjunction )* apparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:15: ( conjunction )* apparatus
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:15: ( conjunction )*
        loop215:
        do {
            int alt215=2;
            alt215 = dfa215.predict(input);
            switch (alt215) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred253_ChemicalChunker1400_static.FOLLOW_conjunction_in_synpred253_ChemicalChunker1400);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop215;
            }
        } while (true);

        pushFollow(FOLLOW_apparatus_in_synpred253_ChemicalChunker1403_static.FOLLOW_apparatus_in_synpred253_ChemicalChunker1403);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred253_ChemicalChunker

    // $ANTLR start synpred256_ChemicalChunker
    public final void synpred256_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:22: ( nnApp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:22: nnApp
        {
        pushFollow(FOLLOW_nnApp_in_synpred256_ChemicalChunker1420_static.FOLLOW_nnApp_in_synpred256_ChemicalChunker1420);
        nnApp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred256_ChemicalChunker

    // $ANTLR start synpred257_ChemicalChunker
    public final void synpred257_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:4: ( nnapparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:4: nnapparatus
        {
        pushFollow(FOLLOW_nnapparatus_in_synpred257_ChemicalChunker1447_static.FOLLOW_nnapparatus_in_synpred257_ChemicalChunker1447);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred257_ChemicalChunker

    // $ANTLR start synpred258_ChemicalChunker
    public final void synpred258_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:18: ( dash nnapparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:18: dash nnapparatus
        {
        pushFollow(FOLLOW_dash_in_synpred258_ChemicalChunker1451_static.FOLLOW_dash_in_synpred258_ChemicalChunker1451);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nnapparatus_in_synpred258_ChemicalChunker1453_static.FOLLOW_nnapparatus_in_synpred258_ChemicalChunker1453);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred258_ChemicalChunker

    // $ANTLR start synpred259_ChemicalChunker
    public final void synpred259_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:8: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:8: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred259_ChemicalChunker1467_static.FOLLOW_quantity_in_synpred259_ChemicalChunker1467);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred259_ChemicalChunker

    // $ANTLR start synpred260_ChemicalChunker
    public final void synpred260_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:17: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:17: adj
        {
        pushFollow(FOLLOW_adj_in_synpred260_ChemicalChunker1469_static.FOLLOW_adj_in_synpred260_ChemicalChunker1469);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred260_ChemicalChunker

    // $ANTLR start synpred261_ChemicalChunker
    public final void synpred261_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:21: ( nnpressure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:21: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred261_ChemicalChunker1471_static.FOLLOW_nnpressure_in_synpred261_ChemicalChunker1471);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred261_ChemicalChunker

    // $ANTLR start synpred262_ChemicalChunker
    public final void synpred262_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:32: ( nnadd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:32: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred262_ChemicalChunker1473_static.FOLLOW_nnadd_in_synpred262_ChemicalChunker1473);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred262_ChemicalChunker

    // $ANTLR start synpred263_ChemicalChunker
    public final void synpred263_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:38: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:38: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred263_ChemicalChunker1475_static.FOLLOW_molecule_in_synpred263_ChemicalChunker1475);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred263_ChemicalChunker

    // $ANTLR start synpred264_ChemicalChunker
    public final void synpred264_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:47: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:47: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred264_ChemicalChunker1477_static.FOLLOW_nnchementity_in_synpred264_ChemicalChunker1477);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred264_ChemicalChunker

    // $ANTLR start synpred265_ChemicalChunker
    public final void synpred265_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:60: ( nnstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:60: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred265_ChemicalChunker1479_static.FOLLOW_nnstate_in_synpred265_ChemicalChunker1479);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred265_ChemicalChunker

    // $ANTLR start synpred266_ChemicalChunker
    public final void synpred266_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:68: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:68: nn
        {
        pushFollow(FOLLOW_nn_in_synpred266_ChemicalChunker1481_static.FOLLOW_nn_in_synpred266_ChemicalChunker1481);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred266_ChemicalChunker

    // $ANTLR start synpred267_ChemicalChunker
    public final void synpred267_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:4: ( oscaront )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:4: oscaront
        {
        pushFollow(FOLLOW_oscaront_in_synpred267_ChemicalChunker1493_static.FOLLOW_oscaront_in_synpred267_ChemicalChunker1493);
        oscaront();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred267_ChemicalChunker

    // $ANTLR start synpred270_ChemicalChunker
    public final void synpred270_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:55: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:55: adj
        {
        pushFollow(FOLLOW_adj_in_synpred270_ChemicalChunker1522_static.FOLLOW_adj_in_synpred270_ChemicalChunker1522);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred270_ChemicalChunker

    // $ANTLR start synpred271_ChemicalChunker
    public final void synpred271_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:60: ( nnstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:60: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred271_ChemicalChunker1525_static.FOLLOW_nnstate_in_synpred271_ChemicalChunker1525);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred271_ChemicalChunker

    // $ANTLR start synpred272_ChemicalChunker
    public final void synpred272_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:70: ( numericReferenceOrQuantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:70: numericReferenceOrQuantity
        {
        pushFollow(FOLLOW_numericReferenceOrQuantity_in_synpred272_ChemicalChunker1529_static.FOLLOW_numericReferenceOrQuantity_in_synpred272_ChemicalChunker1529);
        numericReferenceOrQuantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred272_ChemicalChunker

    // $ANTLR start synpred273_ChemicalChunker
    public final void synpred273_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:99: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:99: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred273_ChemicalChunker1533_static.FOLLOW_nnchementity_in_synpred273_ChemicalChunker1533);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred273_ChemicalChunker

    // $ANTLR start synpred274_ChemicalChunker
    public final void synpred274_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:115: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:115: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred274_ChemicalChunker1538_static.FOLLOW_quantity_in_synpred274_ChemicalChunker1538);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred274_ChemicalChunker

    // $ANTLR start synpred275_ChemicalChunker
    public final void synpred275_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:125: ( fromProcedure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:125: fromProcedure
        {
        pushFollow(FOLLOW_fromProcedure_in_synpred275_ChemicalChunker1541_static.FOLLOW_fromProcedure_in_synpred275_ChemicalChunker1541);
        fromProcedure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred275_ChemicalChunker

    // $ANTLR start synpred276_ChemicalChunker
    public final void synpred276_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:26: ( oscarcm )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:26: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred276_ChemicalChunker1550_static.FOLLOW_oscarcm_in_synpred276_ChemicalChunker1550);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred276_ChemicalChunker

    // $ANTLR start synpred277_ChemicalChunker
    public final void synpred277_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:35: ( afterOscarCompoundStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:35: afterOscarCompoundStructure
        {
        pushFollow(FOLLOW_afterOscarCompoundStructure_in_synpred277_ChemicalChunker1553_static.FOLLOW_afterOscarCompoundStructure_in_synpred277_ChemicalChunker1553);
        afterOscarCompoundStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred277_ChemicalChunker

    // $ANTLR start synpred279_ChemicalChunker
    public final void synpred279_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:36: ( oscarcm )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:36: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred279_ChemicalChunker1583_static.FOLLOW_oscarcm_in_synpred279_ChemicalChunker1583);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred279_ChemicalChunker

    // $ANTLR start synpred280_ChemicalChunker
    public final void synpred280_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:31: ( dash ( oscarcm )+ )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:31: dash ( oscarcm )+
        {
        pushFollow(FOLLOW_dash_in_synpred280_ChemicalChunker1581_static.FOLLOW_dash_in_synpred280_ChemicalChunker1581);
        dash();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:36: ( oscarcm )+
        int cnt218=0;
        loop218:
        do {
            int alt218=2;
            switch ( input.LA(1) ) {
            case 84:
                {
                alt218=1;
                }
                break;

            }

            switch (alt218) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
        	    {
        	    pushFollow(FOLLOW_oscarcm_in_synpred280_ChemicalChunker1583_static.FOLLOW_oscarcm_in_synpred280_ChemicalChunker1583);
        	    oscarcm();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt218 >= 1 ) break loop218;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(218, input);
                    throw eee;
            }
            cnt218++;
        } while (true);


        }
    }
    // $ANTLR end synpred280_ChemicalChunker

    // $ANTLR start synpred281_ChemicalChunker
    public final void synpred281_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:47: ( dash )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:47: dash
        {
        pushFollow(FOLLOW_dash_in_synpred281_ChemicalChunker1588_static.FOLLOW_dash_in_synpred281_ChemicalChunker1588);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred281_ChemicalChunker

    // $ANTLR start synpred282_ChemicalChunker
    public final void synpred282_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:30: ( ( dash ( oscarcm )+ )+ ( dash )? )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:30: ( dash ( oscarcm )+ )+ ( dash )?
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:30: ( dash ( oscarcm )+ )+
        int cnt220=0;
        loop220:
        do {
            int alt220=2;
            switch ( input.LA(1) ) {
            case 136:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 84:
                        {
                        alt220=1;
                        }
                        break;

                    }

                    }
                    break;

                }

                }
                break;

            }

            switch (alt220) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:31: dash ( oscarcm )+
        	    {
        	    pushFollow(FOLLOW_dash_in_synpred282_ChemicalChunker1581_static.FOLLOW_dash_in_synpred282_ChemicalChunker1581);
        	    dash();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:36: ( oscarcm )+
        	    int cnt219=0;
        	    loop219:
        	    do {
        	        int alt219=2;
        	        switch ( input.LA(1) ) {
        	        case 84:
        	            {
        	            alt219=1;
        	            }
        	            break;

        	        }

        	        switch (alt219) {
        	    	case 1 :
        	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
        	    	    {
        	    	    pushFollow(FOLLOW_oscarcm_in_synpred282_ChemicalChunker1583_static.FOLLOW_oscarcm_in_synpred282_ChemicalChunker1583);
        	    	    oscarcm();

        	    	    state._fsp--;
        	    	    if (state.failed) return ;

        	    	    }
        	    	    break;

        	    	default :
        	    	    if ( cnt219 >= 1 ) break loop219;
        	    	    if (state.backtracking>0) {state.failed=true; return ;}
        	                EarlyExitException eee =
        	                    new EarlyExitException(219, input);
        	                throw eee;
        	        }
        	        cnt219++;
        	    } while (true);


        	    }
        	    break;

        	default :
        	    if ( cnt220 >= 1 ) break loop220;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(220, input);
                    throw eee;
            }
            cnt220++;
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:47: ( dash )?
        int alt221=2;
        switch ( input.LA(1) ) {
            case 136:
                {
                alt221=1;
                }
                break;
        }

        switch (alt221) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dash
                {
                pushFollow(FOLLOW_dash_in_synpred282_ChemicalChunker1588_static.FOLLOW_dash_in_synpred282_ChemicalChunker1588);
                dash();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred282_ChemicalChunker

    // $ANTLR start synpred286_ChemicalChunker
    public final void synpred286_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:53: ( ( colon ( oscarcm )+ )+ ( lrb )? ratio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:54: ( colon ( oscarcm )+ )+ ( lrb )? ratio
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:54: ( colon ( oscarcm )+ )+
        int cnt224=0;
        loop224:
        do {
            int alt224=2;
            switch ( input.LA(1) ) {
            case 132:
                {
                alt224=1;
                }
                break;

            }

            switch (alt224) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:55: colon ( oscarcm )+
        	    {
        	    pushFollow(FOLLOW_colon_in_synpred286_ChemicalChunker1593_static.FOLLOW_colon_in_synpred286_ChemicalChunker1593);
        	    colon();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:61: ( oscarcm )+
        	    int cnt223=0;
        	    loop223:
        	    do {
        	        int alt223=2;
        	        switch ( input.LA(1) ) {
        	        case 84:
        	            {
        	            alt223=1;
        	            }
        	            break;

        	        }

        	        switch (alt223) {
        	    	case 1 :
        	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
        	    	    {
        	    	    pushFollow(FOLLOW_oscarcm_in_synpred286_ChemicalChunker1595_static.FOLLOW_oscarcm_in_synpred286_ChemicalChunker1595);
        	    	    oscarcm();

        	    	    state._fsp--;
        	    	    if (state.failed) return ;

        	    	    }
        	    	    break;

        	    	default :
        	    	    if ( cnt223 >= 1 ) break loop223;
        	    	    if (state.backtracking>0) {state.failed=true; return ;}
        	                EarlyExitException eee =
        	                    new EarlyExitException(223, input);
        	                throw eee;
        	        }
        	        cnt223++;
        	    } while (true);


        	    }
        	    break;

        	default :
        	    if ( cnt224 >= 1 ) break loop224;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(224, input);
                    throw eee;
            }
            cnt224++;
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:72: ( lrb )?
        int alt225=2;
        switch ( input.LA(1) ) {
            case 143:
                {
                alt225=1;
                }
                break;
        }

        switch (alt225) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: lrb
                {
                pushFollow(FOLLOW_lrb_in_synpred286_ChemicalChunker1600_static.FOLLOW_lrb_in_synpred286_ChemicalChunker1600);
                lrb();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_ratio_in_synpred286_ChemicalChunker1603_static.FOLLOW_ratio_in_synpred286_ChemicalChunker1603);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred286_ChemicalChunker

    // $ANTLR start synpred287_ChemicalChunker
    public final void synpred287_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:92: ( oscarcm )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:92: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred287_ChemicalChunker1609_static.FOLLOW_oscarcm_in_synpred287_ChemicalChunker1609);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred287_ChemicalChunker

    // $ANTLR start synpred288_ChemicalChunker
    public final void synpred288_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:86: ( colon ( oscarcm )+ )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:86: colon ( oscarcm )+
        {
        pushFollow(FOLLOW_colon_in_synpred288_ChemicalChunker1607_static.FOLLOW_colon_in_synpred288_ChemicalChunker1607);
        colon();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:92: ( oscarcm )+
        int cnt226=0;
        loop226:
        do {
            int alt226=2;
            switch ( input.LA(1) ) {
            case 84:
                {
                alt226=1;
                }
                break;

            }

            switch (alt226) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
        	    {
        	    pushFollow(FOLLOW_oscarcm_in_synpred288_ChemicalChunker1609_static.FOLLOW_oscarcm_in_synpred288_ChemicalChunker1609);
        	    oscarcm();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt226 >= 1 ) break loop226;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(226, input);
                    throw eee;
            }
            cnt226++;
        } while (true);


        }
    }
    // $ANTLR end synpred288_ChemicalChunker

    // $ANTLR start synpred289_ChemicalChunker
    public final void synpred289_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:104: ( dash )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:104: dash
        {
        pushFollow(FOLLOW_dash_in_synpred289_ChemicalChunker1615_static.FOLLOW_dash_in_synpred289_ChemicalChunker1615);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred289_ChemicalChunker

    // $ANTLR start synpred290_ChemicalChunker
    public final void synpred290_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:109: ( apost )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:109: apost
        {
        pushFollow(FOLLOW_apost_in_synpred290_ChemicalChunker1617_static.FOLLOW_apost_in_synpred290_ChemicalChunker1617);
        apost();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred290_ChemicalChunker

    // $ANTLR start synpred292_ChemicalChunker
    public final void synpred292_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:19: ( moleculeamount3 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:19: moleculeamount3
        {
        pushFollow(FOLLOW_moleculeamount3_in_synpred292_ChemicalChunker1660_static.FOLLOW_moleculeamount3_in_synpred292_ChemicalChunker1660);
        moleculeamount3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred292_ChemicalChunker

    // $ANTLR start synpred293_ChemicalChunker
    public final void synpred293_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:36: ( moleculeamount1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:36: moleculeamount1
        {
        pushFollow(FOLLOW_moleculeamount1_in_synpred293_ChemicalChunker1663_static.FOLLOW_moleculeamount1_in_synpred293_ChemicalChunker1663);
        moleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred293_ChemicalChunker

    // $ANTLR start synpred294_ChemicalChunker
    public final void synpred294_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:71: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:71: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred294_ChemicalChunker1670_static.FOLLOW_asAstate_in_synpred294_ChemicalChunker1670);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred294_ChemicalChunker

    // $ANTLR start synpred295_ChemicalChunker
    public final void synpred295_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred295_ChemicalChunker1681_static.FOLLOW_quantity_in_synpred295_ChemicalChunker1681);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred295_ChemicalChunker

    // $ANTLR start synpred296_ChemicalChunker
    public final void synpred296_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:13: ( bracketedContentInMol )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:13: bracketedContentInMol
        {
        pushFollow(FOLLOW_bracketedContentInMol_in_synpred296_ChemicalChunker1683_static.FOLLOW_bracketedContentInMol_in_synpred296_ChemicalChunker1683);
        bracketedContentInMol();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred296_ChemicalChunker

    // $ANTLR start synpred299_ChemicalChunker
    public final void synpred299_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:78: ( bracketedContentInMol )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:78: bracketedContentInMol
        {
        pushFollow(FOLLOW_bracketedContentInMol_in_synpred299_ChemicalChunker1700_static.FOLLOW_bracketedContentInMol_in_synpred299_ChemicalChunker1700);
        bracketedContentInMol();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred299_ChemicalChunker

    // $ANTLR start synpred302_ChemicalChunker
    public final void synpred302_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:30: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:30: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred302_ChemicalChunker1722_static.FOLLOW_quantity_in_synpred302_ChemicalChunker1722);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred302_ChemicalChunker

    // $ANTLR start synpred303_ChemicalChunker
    public final void synpred303_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:39: ( bracketedContentInMol )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:39: bracketedContentInMol
        {
        pushFollow(FOLLOW_bracketedContentInMol_in_synpred303_ChemicalChunker1724_static.FOLLOW_bracketedContentInMol_in_synpred303_ChemicalChunker1724);
        bracketedContentInMol();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred303_ChemicalChunker

    // $ANTLR start synpred308_ChemicalChunker
    public final void synpred308_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:100: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:100: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred308_ChemicalChunker1747_static.FOLLOW_oscarCompound_in_synpred308_ChemicalChunker1747);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred308_ChemicalChunker

    // $ANTLR start synpred309_ChemicalChunker
    public final void synpred309_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred309_ChemicalChunker1759_static.FOLLOW_quantity_in_synpred309_ChemicalChunker1759);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred309_ChemicalChunker

    // $ANTLR start synpred310_ChemicalChunker
    public final void synpred310_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:13: ( bracketedContentInMol )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:13: bracketedContentInMol
        {
        pushFollow(FOLLOW_bracketedContentInMol_in_synpred310_ChemicalChunker1761_static.FOLLOW_bracketedContentInMol_in_synpred310_ChemicalChunker1761);
        bracketedContentInMol();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred310_ChemicalChunker

    // $ANTLR start synpred311_ChemicalChunker
    public final void synpred311_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:37: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:37: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred311_ChemicalChunker1765_static.FOLLOW_oscarCompound_in_synpred311_ChemicalChunker1765);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred311_ChemicalChunker

    // $ANTLR start synpred312_ChemicalChunker
    public final void synpred312_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:35: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:35: citation
        {
        pushFollow(FOLLOW_citation_in_synpred312_ChemicalChunker1776_static.FOLLOW_citation_in_synpred312_ChemicalChunker1776);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred312_ChemicalChunker

    // $ANTLR start synpred313_ChemicalChunker
    public final void synpred313_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:44: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:44: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred313_ChemicalChunker1778_static.FOLLOW_quantity_in_synpred313_ChemicalChunker1778);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred313_ChemicalChunker

    // $ANTLR start synpred315_ChemicalChunker
    public final void synpred315_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:53: ( comma ( quantity1Node | citationStructure ) )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:53: comma ( quantity1Node | citationStructure )
        {
        pushFollow(FOLLOW_comma_in_synpred315_ChemicalChunker1780_static.FOLLOW_comma_in_synpred315_ChemicalChunker1780);
        comma();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:59: ( quantity1Node | citationStructure )
        int alt228=2;
        switch ( input.LA(1) ) {
        case 143:
            {
            switch ( input.LA(2) ) {
            case TOKEN:
                {
                switch ( input.LA(3) ) {
                case 146:
                    {
                    switch ( input.LA(4) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(5) ) {
                        case 44:
                        case 65:
                        case 66:
                        case 67:
                        case 69:
                        case 70:
                        case 138:
                        case 156:
                            {
                            alt228=1;
                            }
                            break;
                        case 133:
                        case 145:
                        case 146:
                        case 149:
                        case 158:
                            {
                            alt228=2;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 228, 6, input);

                            throw nvae;
                        }

                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 228, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                case 73:
                case 130:
                    {
                    alt228=1;
                    }
                    break;
                case 133:
                case 145:
                case 149:
                case 158:
                    {
                    alt228=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 228, 2, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 228, 1, input);

                throw nvae;
            }

            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 228, 0, input);

            throw nvae;
        }

        switch (alt228) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:60: quantity1Node
                {
                pushFollow(FOLLOW_quantity1Node_in_synpred315_ChemicalChunker1783_static.FOLLOW_quantity1Node_in_synpred315_ChemicalChunker1783);
                quantity1Node();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:74: citationStructure
                {
                pushFollow(FOLLOW_citationStructure_in_synpred315_ChemicalChunker1785_static.FOLLOW_citationStructure_in_synpred315_ChemicalChunker1785);
                citationStructure();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred315_ChemicalChunker

    // $ANTLR start synpred316_ChemicalChunker
    public final void synpred316_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:93: ( bracketedContentInMol )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:93: bracketedContentInMol
        {
        pushFollow(FOLLOW_bracketedContentInMol_in_synpred316_ChemicalChunker1788_static.FOLLOW_bracketedContentInMol_in_synpred316_ChemicalChunker1788);
        bracketedContentInMol();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred316_ChemicalChunker

    // $ANTLR start synpred317_ChemicalChunker
    public final void synpred317_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:68: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:68: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred317_ChemicalChunker1820_static.FOLLOW_asAstate_in_synpred317_ChemicalChunker1820);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred317_ChemicalChunker

    // $ANTLR start synpred318_ChemicalChunker
    public final void synpred318_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:16: ( potentialUnnamedMoleculeAmount1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:16: potentialUnnamedMoleculeAmount1
        {
        pushFollow(FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred318_ChemicalChunker1833_static.FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred318_ChemicalChunker1833);
        potentialUnnamedMoleculeAmount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred318_ChemicalChunker

    // $ANTLR start synpred319_ChemicalChunker
    public final void synpred319_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:50: ( potentialUnnamedMoleculeAmount2 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:50: potentialUnnamedMoleculeAmount2
        {
        pushFollow(FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred319_ChemicalChunker1837_static.FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred319_ChemicalChunker1837);
        potentialUnnamedMoleculeAmount2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred319_ChemicalChunker

    // $ANTLR start synpred321_ChemicalChunker
    public final void synpred321_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:112: ( potentialUnnamedMoleculeAmount2 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:112: potentialUnnamedMoleculeAmount2
        {
        pushFollow(FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred321_ChemicalChunker1847_static.FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred321_ChemicalChunker1847);
        potentialUnnamedMoleculeAmount2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred321_ChemicalChunker

    // $ANTLR start synpred322_ChemicalChunker
    public final void synpred322_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred322_ChemicalChunker1860_static.FOLLOW_quantity_in_synpred322_ChemicalChunker1860);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred322_ChemicalChunker

    // $ANTLR start synpred326_ChemicalChunker
    public final void synpred326_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:29: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:29: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred326_ChemicalChunker1884_static.FOLLOW_quantity_in_synpred326_ChemicalChunker1884);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred326_ChemicalChunker

    // $ANTLR start synpred327_ChemicalChunker
    public final void synpred327_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:39: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:39: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred327_ChemicalChunker1887_static.FOLLOW_asAstate_in_synpred327_ChemicalChunker1887);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred327_ChemicalChunker

    // $ANTLR start synpred328_ChemicalChunker
    public final void synpred328_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:49: ( fromProcedure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:49: fromProcedure
        {
        pushFollow(FOLLOW_fromProcedure_in_synpred328_ChemicalChunker1890_static.FOLLOW_fromProcedure_in_synpred328_ChemicalChunker1890);
        fromProcedure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred328_ChemicalChunker

    // $ANTLR start synpred333_ChemicalChunker
    public final void synpred333_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:148: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:148: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred333_ChemicalChunker1930_static.FOLLOW_quantity_in_synpred333_ChemicalChunker1930);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred333_ChemicalChunker

    // $ANTLR start synpred334_ChemicalChunker
    public final void synpred334_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:158: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:158: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred334_ChemicalChunker1933_static.FOLLOW_asAstate_in_synpred334_ChemicalChunker1933);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred334_ChemicalChunker

    // $ANTLR start synpred335_ChemicalChunker
    public final void synpred335_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:168: ( fromProcedure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:168: fromProcedure
        {
        pushFollow(FOLLOW_fromProcedure_in_synpred335_ChemicalChunker1936_static.FOLLOW_fromProcedure_in_synpred335_ChemicalChunker1936);
        fromProcedure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred335_ChemicalChunker

    // $ANTLR start synpred336_ChemicalChunker
    public final void synpred336_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:37: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:37: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred336_ChemicalChunker1948_static.FOLLOW_quantity_in_synpred336_ChemicalChunker1948);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred336_ChemicalChunker

    // $ANTLR start synpred337_ChemicalChunker
    public final void synpred337_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:47: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:47: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred337_ChemicalChunker1951_static.FOLLOW_asAstate_in_synpred337_ChemicalChunker1951);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred337_ChemicalChunker

    // $ANTLR start synpred338_ChemicalChunker
    public final void synpred338_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:57: ( fromProcedure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:57: fromProcedure
        {
        pushFollow(FOLLOW_fromProcedure_in_synpred338_ChemicalChunker1954_static.FOLLOW_fromProcedure_in_synpred338_ChemicalChunker1954);
        fromProcedure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred338_ChemicalChunker

    // $ANTLR start synpred341_ChemicalChunker
    public final void synpred341_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:82: ( numericReferenceOrQuantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:82: numericReferenceOrQuantity
        {
        pushFollow(FOLLOW_numericReferenceOrQuantity_in_synpred341_ChemicalChunker1978_static.FOLLOW_numericReferenceOrQuantity_in_synpred341_ChemicalChunker1978);
        numericReferenceOrQuantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred341_ChemicalChunker

    // $ANTLR start synpred344_ChemicalChunker
    public final void synpred344_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:66: ( numericReferenceOrQuantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:66: numericReferenceOrQuantity
        {
        pushFollow(FOLLOW_numericReferenceOrQuantity_in_synpred344_ChemicalChunker1999_static.FOLLOW_numericReferenceOrQuantity_in_synpred344_ChemicalChunker1999);
        numericReferenceOrQuantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred344_ChemicalChunker

    // $ANTLR start synpred358_ChemicalChunker
    public final void synpred358_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred358_ChemicalChunker2057_static.FOLLOW_quantity_in_synpred358_ChemicalChunker2057);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred358_ChemicalChunker

    // $ANTLR start synpred363_ChemicalChunker
    public final void synpred363_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:42: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:42: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred363_ChemicalChunker2086_static.FOLLOW_quantity_in_synpred363_ChemicalChunker2086);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred363_ChemicalChunker

    // $ANTLR start synpred368_ChemicalChunker
    public final void synpred368_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:19: ( comma measurements )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:19: comma measurements
        {
        pushFollow(FOLLOW_comma_in_synpred368_ChemicalChunker2247_static.FOLLOW_comma_in_synpred368_ChemicalChunker2247);
        comma();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_measurements_in_synpred368_ChemicalChunker2250_static.FOLLOW_measurements_in_synpred368_ChemicalChunker2250);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred368_ChemicalChunker

    // $ANTLR start synpred371_ChemicalChunker
    public final void synpred371_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:40: ( dt )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:40: dt
        {
        pushFollow(FOLLOW_dt_in_synpred371_ChemicalChunker2275_static.FOLLOW_dt_in_synpred371_ChemicalChunker2275);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred371_ChemicalChunker

    // $ANTLR start synpred372_ChemicalChunker
    public final void synpred372_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:25: ( measurementtypes )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:25: measurementtypes
        {
        pushFollow(FOLLOW_measurementtypes_in_synpred372_ChemicalChunker2287_static.FOLLOW_measurementtypes_in_synpred372_ChemicalChunker2287);
        measurementtypes();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred372_ChemicalChunker

    // $ANTLR start synpred379_ChemicalChunker
    public final void synpred379_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:60: ( yield )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:60: yield
        {
        pushFollow(FOLLOW_yield_in_synpred379_ChemicalChunker2324_static.FOLLOW_yield_in_synpred379_ChemicalChunker2324);
        yield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred379_ChemicalChunker

    // $ANTLR start synpred384_ChemicalChunker
    public final void synpred384_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:32: ( dash cd percentsign )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:32: dash cd percentsign
        {
        pushFollow(FOLLOW_dash_in_synpred384_ChemicalChunker2523_static.FOLLOW_dash_in_synpred384_ChemicalChunker2523);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_cd_in_synpred384_ChemicalChunker2525_static.FOLLOW_cd_in_synpred384_ChemicalChunker2525);
        cd();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_percentsign_in_synpred384_ChemicalChunker2527_static.FOLLOW_percentsign_in_synpred384_ChemicalChunker2527);
        percentsign();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred384_ChemicalChunker

    // $ANTLR start synpred388_ChemicalChunker
    public final void synpred388_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:28: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:28: verb
        {
        pushFollow(FOLLOW_verb_in_synpred388_ChemicalChunker2630_static.FOLLOW_verb_in_synpred388_ChemicalChunker2630);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred388_ChemicalChunker

    // $ANTLR start synpred389_ChemicalChunker
    public final void synpred389_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:33: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:33: noun
        {
        pushFollow(FOLLOW_noun_in_synpred389_ChemicalChunker2632_static.FOLLOW_noun_in_synpred389_ChemicalChunker2632);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred389_ChemicalChunker

    // $ANTLR start synpred390_ChemicalChunker
    public final void synpred390_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:38: ( bracketedContent )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:38: bracketedContent
        {
        pushFollow(FOLLOW_bracketedContent_in_synpred390_ChemicalChunker2634_static.FOLLOW_bracketedContent_in_synpred390_ChemicalChunker2634);
        bracketedContent();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred390_ChemicalChunker

    // $ANTLR start synpred395_ChemicalChunker
    public final void synpred395_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:81: ( ratio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:81: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred395_ChemicalChunker2644_static.FOLLOW_ratio_in_synpred395_ChemicalChunker2644);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred395_ChemicalChunker

    // $ANTLR start synpred396_ChemicalChunker
    public final void synpred396_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:87: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:87: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred396_ChemicalChunker2646_static.FOLLOW_conjunction_in_synpred396_ChemicalChunker2646);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred396_ChemicalChunker

    // $ANTLR start synpred397_ChemicalChunker
    public final void synpred397_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:99: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:99: adj
        {
        pushFollow(FOLLOW_adj_in_synpred397_ChemicalChunker2648_static.FOLLOW_adj_in_synpred397_ChemicalChunker2648);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred397_ChemicalChunker

    // $ANTLR start synpred400_ChemicalChunker
    public final void synpred400_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:114: ( numeric )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:114: numeric
        {
        pushFollow(FOLLOW_numeric_in_synpred400_ChemicalChunker2654_static.FOLLOW_numeric_in_synpred400_ChemicalChunker2654);
        numeric();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred400_ChemicalChunker

    // $ANTLR start synpred404_ChemicalChunker
    public final void synpred404_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:33: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:33: verb
        {
        pushFollow(FOLLOW_verb_in_synpred404_ChemicalChunker2732_static.FOLLOW_verb_in_synpred404_ChemicalChunker2732);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred404_ChemicalChunker

    // $ANTLR start synpred405_ChemicalChunker
    public final void synpred405_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:38: ( quantity2Node )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:38: quantity2Node
        {
        pushFollow(FOLLOW_quantity2Node_in_synpred405_ChemicalChunker2734_static.FOLLOW_quantity2Node_in_synpred405_ChemicalChunker2734);
        quantity2Node();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred405_ChemicalChunker

    // $ANTLR start synpred406_ChemicalChunker
    public final void synpred406_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:52: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:52: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred406_ChemicalChunker2736_static.FOLLOW_oscarCompound_in_synpred406_ChemicalChunker2736);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred406_ChemicalChunker

    // $ANTLR start synpred407_ChemicalChunker
    public final void synpred407_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:66: ( alphanumericOrIdentifierCompoundReference )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:66: alphanumericOrIdentifierCompoundReference
        {
        pushFollow(FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred407_ChemicalChunker2738_static.FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred407_ChemicalChunker2738);
        alphanumericOrIdentifierCompoundReference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred407_ChemicalChunker

    // $ANTLR start synpred408_ChemicalChunker
    public final void synpred408_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:108: ( ratio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:108: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred408_ChemicalChunker2740_static.FOLLOW_ratio_in_synpred408_ChemicalChunker2740);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred408_ChemicalChunker

    // $ANTLR start synpred411_ChemicalChunker
    public final void synpred411_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:114: ( numberCompoundReference ( comma | colon | {...}? stop ) )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:114: numberCompoundReference ( comma | colon | {...}? stop )
        {
        pushFollow(FOLLOW_numberCompoundReference_in_synpred411_ChemicalChunker2742_static.FOLLOW_numberCompoundReference_in_synpred411_ChemicalChunker2742);
        numberCompoundReference();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:138: ( comma | colon | {...}? stop )
        int alt236=3;
        switch ( input.LA(1) ) {
        case 133:
            {
            alt236=1;
            }
            break;
        case 132:
            {
            alt236=2;
            }
            break;
        case 137:
            {
            alt236=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 236, 0, input);

            throw nvae;
        }

        switch (alt236) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:139: comma
                {
                pushFollow(FOLLOW_comma_in_synpred411_ChemicalChunker2745_static.FOLLOW_comma_in_synpred411_ChemicalChunker2745);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:147: colon
                {
                pushFollow(FOLLOW_colon_in_synpred411_ChemicalChunker2749_static.FOLLOW_colon_in_synpred411_ChemicalChunker2749);
                colon();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:155: {...}? stop
                {
                if ( !((nextIsSemiColon(input))) ) {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    throw new FailedPredicateException(input, "synpred411_ChemicalChunker", "nextIsSemiColon(input)");
                }
                pushFollow(FOLLOW_stop_in_synpred411_ChemicalChunker2755_static.FOLLOW_stop_in_synpred411_ChemicalChunker2755);
                stop();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred411_ChemicalChunker

    // $ANTLR start synpred412_ChemicalChunker
    public final void synpred412_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:187: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:187: cd
        {
        pushFollow(FOLLOW_cd_in_synpred412_ChemicalChunker2758_static.FOLLOW_cd_in_synpred412_ChemicalChunker2758);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred412_ChemicalChunker

    // $ANTLR start synpred417_ChemicalChunker
    public final void synpred417_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:216: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:216: comma
        {
        pushFollow(FOLLOW_comma_in_synpred417_ChemicalChunker2768_static.FOLLOW_comma_in_synpred417_ChemicalChunker2768);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred417_ChemicalChunker

    // $ANTLR start synpred418_ChemicalChunker
    public final void synpred418_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:222: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:222: adj
        {
        pushFollow(FOLLOW_adj_in_synpred418_ChemicalChunker2770_static.FOLLOW_adj_in_synpred418_ChemicalChunker2770);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred418_ChemicalChunker

    // $ANTLR start synpred421_ChemicalChunker
    public final void synpred421_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:237: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:237: noun
        {
        pushFollow(FOLLOW_noun_in_synpred421_ChemicalChunker2776_static.FOLLOW_noun_in_synpred421_ChemicalChunker2776);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred421_ChemicalChunker

    // $ANTLR start synpred422_ChemicalChunker
    public final void synpred422_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:266: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:266: verb
        {
        pushFollow(FOLLOW_verb_in_synpred422_ChemicalChunker2782_static.FOLLOW_verb_in_synpred422_ChemicalChunker2782);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred422_ChemicalChunker

    // $ANTLR start synpred423_ChemicalChunker
    public final void synpred423_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:271: ( quantity2Node )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:271: quantity2Node
        {
        pushFollow(FOLLOW_quantity2Node_in_synpred423_ChemicalChunker2784_static.FOLLOW_quantity2Node_in_synpred423_ChemicalChunker2784);
        quantity2Node();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred423_ChemicalChunker

    // $ANTLR start synpred424_ChemicalChunker
    public final void synpred424_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:285: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:285: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred424_ChemicalChunker2786_static.FOLLOW_oscarCompound_in_synpred424_ChemicalChunker2786);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred424_ChemicalChunker

    // $ANTLR start synpred425_ChemicalChunker
    public final void synpred425_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:299: ( alphanumericOrIdentifierCompoundReference )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:299: alphanumericOrIdentifierCompoundReference
        {
        pushFollow(FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred425_ChemicalChunker2788_static.FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred425_ChemicalChunker2788);
        alphanumericOrIdentifierCompoundReference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred425_ChemicalChunker

    // $ANTLR start synpred426_ChemicalChunker
    public final void synpred426_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:341: ( ratio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:341: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred426_ChemicalChunker2790_static.FOLLOW_ratio_in_synpred426_ChemicalChunker2790);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred426_ChemicalChunker

    // $ANTLR start synpred427_ChemicalChunker
    public final void synpred427_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:347: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:347: cd
        {
        pushFollow(FOLLOW_cd_in_synpred427_ChemicalChunker2792_static.FOLLOW_cd_in_synpred427_ChemicalChunker2792);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred427_ChemicalChunker

    // $ANTLR start synpred432_ChemicalChunker
    public final void synpred432_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:376: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:376: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred432_ChemicalChunker2802_static.FOLLOW_conjunction_in_synpred432_ChemicalChunker2802);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred432_ChemicalChunker

    // $ANTLR start synpred433_ChemicalChunker
    public final void synpred433_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:388: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:388: adj
        {
        pushFollow(FOLLOW_adj_in_synpred433_ChemicalChunker2804_static.FOLLOW_adj_in_synpred433_ChemicalChunker2804);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred433_ChemicalChunker

    // $ANTLR start synpred436_ChemicalChunker
    public final void synpred436_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:403: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:403: noun
        {
        pushFollow(FOLLOW_noun_in_synpred436_ChemicalChunker2810_static.FOLLOW_noun_in_synpred436_ChemicalChunker2810);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred436_ChemicalChunker

    // $ANTLR start synpred437_ChemicalChunker
    public final void synpred437_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:408: ( bracketedContentInMol )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:408: bracketedContentInMol
        {
        pushFollow(FOLLOW_bracketedContentInMol_in_synpred437_ChemicalChunker2812_static.FOLLOW_bracketedContentInMol_in_synpred437_ChemicalChunker2812);
        bracketedContentInMol();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred437_ChemicalChunker

    // $ANTLR start synpred445_ChemicalChunker
    public final void synpred445_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:31: ( allIdentifierTypes )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:31: allIdentifierTypes
        {
        pushFollow(FOLLOW_allIdentifierTypes_in_synpred445_ChemicalChunker2886_static.FOLLOW_allIdentifierTypes_in_synpred445_ChemicalChunker2886);
        allIdentifierTypes();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred445_ChemicalChunker

    // $ANTLR start synpred451_ChemicalChunker
    public final void synpred451_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:85: ( ( comma | colon | inof | infrom )? submethod )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:85: ( comma | colon | inof | infrom )? submethod
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:85: ( comma | colon | inof | infrom )?
        int alt239=5;
        switch ( input.LA(1) ) {
            case 133:
                {
                alt239=1;
                }
                break;
            case 132:
                {
                alt239=2;
                }
                break;
            case 56:
                {
                alt239=3;
                }
                break;
            case 59:
                {
                alt239=4;
                }
                break;
        }

        switch (alt239) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:86: comma
                {
                pushFollow(FOLLOW_comma_in_synpred451_ChemicalChunker2899_static.FOLLOW_comma_in_synpred451_ChemicalChunker2899);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:93: colon
                {
                pushFollow(FOLLOW_colon_in_synpred451_ChemicalChunker2902_static.FOLLOW_colon_in_synpred451_ChemicalChunker2902);
                colon();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:100: inof
                {
                pushFollow(FOLLOW_inof_in_synpred451_ChemicalChunker2905_static.FOLLOW_inof_in_synpred451_ChemicalChunker2905);
                inof();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 4 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:107: infrom
                {
                pushFollow(FOLLOW_infrom_in_synpred451_ChemicalChunker2909_static.FOLLOW_infrom_in_synpred451_ChemicalChunker2909);
                infrom();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_submethod_in_synpred451_ChemicalChunker2913_static.FOLLOW_submethod_in_synpred451_ChemicalChunker2913);
        submethod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred451_ChemicalChunker

    // $ANTLR start synpred452_ChemicalChunker
    public final void synpred452_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:128: ( lrb submethod rrb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:128: lrb submethod rrb
        {
        pushFollow(FOLLOW_lrb_in_synpred452_ChemicalChunker2917_static.FOLLOW_lrb_in_synpred452_ChemicalChunker2917);
        lrb();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_submethod_in_synpred452_ChemicalChunker2919_static.FOLLOW_submethod_in_synpred452_ChemicalChunker2919);
        submethod();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_rrb_in_synpred452_ChemicalChunker2921_static.FOLLOW_rrb_in_synpred452_ChemicalChunker2921);
        rrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred452_ChemicalChunker

    // $ANTLR start synpred462_ChemicalChunker
    public final void synpred462_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:15: ( colon cd {...}?)
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:15: colon cd {...}?
        {
        pushFollow(FOLLOW_colon_in_synpred462_ChemicalChunker3075_static.FOLLOW_colon_in_synpred462_ChemicalChunker3075);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_cd_in_synpred462_ChemicalChunker3077_static.FOLLOW_cd_in_synpred462_ChemicalChunker3077);
        cd();

        state._fsp--;
        if (state.failed) return ;
        if ( !((!followedByQuantityUnits(input))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred462_ChemicalChunker", "!followedByQuantityUnits(input)");
        }

        }
    }
    // $ANTLR end synpred462_ChemicalChunker

    // $ANTLR start synpred471_ChemicalChunker
    public final void synpred471_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:22: ( allIdentifierTypesOtherThanCD )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:22: allIdentifierTypesOtherThanCD
        {
        pushFollow(FOLLOW_allIdentifierTypesOtherThanCD_in_synpred471_ChemicalChunker3152_static.FOLLOW_allIdentifierTypesOtherThanCD_in_synpred471_ChemicalChunker3152);
        allIdentifierTypesOtherThanCD();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred471_ChemicalChunker

    // Delegated rules

    public final boolean synpred292_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred270_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred270_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred408_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred408_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred246_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred246_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred424_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred424_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred445_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred445_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred98_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred98_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred358_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred358_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred311_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred311_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred116_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred116_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred299_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred299_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred427_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred427_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred368_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred368_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred312_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred312_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred202_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred202_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred407_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred407_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred334_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred334_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred336_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred336_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred432_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred432_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred388_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred388_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred437_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred437_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred418_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred418_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred384_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred384_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred452_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred452_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred308_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred308_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred129_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred129_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred417_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred417_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred197_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred197_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred328_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred328_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred433_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred433_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred282_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred337_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred337_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred462_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred462_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred423_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred423_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred267_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred267_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred421_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred421_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred318_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred318_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred277_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred277_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred310_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred310_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred199_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred199_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred390_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred390_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred397_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred397_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred271_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred271_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred425_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred425_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred451_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred451_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred272_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred272_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred186_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred186_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred106_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred106_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred363_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred363_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred188_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred188_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred194_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred404_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred404_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred132_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred132_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred286_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred286_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred290_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred290_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred276_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred276_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred422_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred422_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred257_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred257_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred195_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred195_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred280_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred280_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred315_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred315_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred411_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred411_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred379_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred379_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred296_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred296_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred155_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred155_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred316_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred316_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred400_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred400_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred264_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred436_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred436_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred321_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred321_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred344_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred344_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred114_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred117_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred117_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred335_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred335_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred322_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred322_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred372_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred372_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred341_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred341_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred126_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred265_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred265_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred293_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred293_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred266_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred266_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred412_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred412_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred426_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred426_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred406_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred406_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred273_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred326_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred326_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred112_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred112_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred471_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred471_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred302_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred302_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred295_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred295_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred253_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred253_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred274_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred274_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred287_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred389_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred389_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred303_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred303_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred260_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred260_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred313_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred313_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred281_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred281_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred327_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred327_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred371_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred371_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred405_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred405_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred309_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred309_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred333_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred333_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred395_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred395_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred317_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred317_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred396_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred396_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred338_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred338_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred319_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred319_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred219_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred219_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA3 dfa3 = new DFA3(this);
    protected DFA2 dfa2 = new DFA2(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA6 dfa6 = new DFA6(this);
    protected DFA7 dfa7 = new DFA7(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA18 dfa18 = new DFA18(this);
    protected DFA17 dfa17 = new DFA17(this);
    protected DFA20 dfa20 = new DFA20(this);
    protected DFA21 dfa21 = new DFA21(this);
    protected DFA22 dfa22 = new DFA22(this);
    protected DFA23 dfa23 = new DFA23(this);
    protected DFA25 dfa25 = new DFA25(this);
    protected DFA27 dfa27 = new DFA27(this);
    protected DFA29 dfa29 = new DFA29(this);
    protected DFA31 dfa31 = new DFA31(this);
    protected DFA45 dfa45 = new DFA45(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA42 dfa42 = new DFA42(this);
    protected DFA43 dfa43 = new DFA43(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA50 dfa50 = new DFA50(this);
    protected DFA52 dfa52 = new DFA52(this);
    protected DFA54 dfa54 = new DFA54(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA58 dfa58 = new DFA58(this);
    protected DFA64 dfa64 = new DFA64(this);
    protected DFA76 dfa76 = new DFA76(this);
    protected DFA75 dfa75 = new DFA75(this);
    protected DFA82 dfa82 = new DFA82(this);
    protected DFA85 dfa85 = new DFA85(this);
    protected DFA87 dfa87 = new DFA87(this);
    protected DFA88 dfa88 = new DFA88(this);
    protected DFA89 dfa89 = new DFA89(this);
    protected DFA91 dfa91 = new DFA91(this);
    protected DFA101 dfa101 = new DFA101(this);
    protected DFA102 dfa102 = new DFA102(this);
    protected DFA105 dfa105 = new DFA105(this);
    protected DFA111 dfa111 = new DFA111(this);
    protected DFA112 dfa112 = new DFA112(this);
    protected DFA113 dfa113 = new DFA113(this);
    protected DFA115 dfa115 = new DFA115(this);
    protected DFA116 dfa116 = new DFA116(this);
    protected DFA118 dfa118 = new DFA118(this);
    protected DFA117 dfa117 = new DFA117(this);
    protected DFA119 dfa119 = new DFA119(this);
    protected DFA122 dfa122 = new DFA122(this);
    protected DFA123 dfa123 = new DFA123(this);
    protected DFA124 dfa124 = new DFA124(this);
    protected DFA128 dfa128 = new DFA128(this);
    protected DFA129 dfa129 = new DFA129(this);
    protected DFA130 dfa130 = new DFA130(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA135 dfa135 = new DFA135(this);
    protected DFA138 dfa138 = new DFA138(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA147 dfa147 = new DFA147(this);
    protected DFA152 dfa152 = new DFA152(this);
    protected DFA156 dfa156 = new DFA156(this);
    protected DFA157 dfa157 = new DFA157(this);
    protected DFA165 dfa165 = new DFA165(this);
    protected DFA169 dfa169 = new DFA169(this);
    protected DFA170 dfa170 = new DFA170(this);
    protected DFA175 dfa175 = new DFA175(this);
    protected DFA178 dfa178 = new DFA178(this);
    protected DFA203 dfa203 = new DFA203(this);
    protected DFA215 dfa215 = new DFA215(this);
    static class DFA3_static {
    static final String DFA3_eotS =
        "\47\uffff";
    static final String DFA3_eofS =
        "\7\uffff\5\6\15\uffff\5\6\5\uffff\1\6\3\uffff";
    static final String DFA3_minS =
        "\1\46\5\45\1\uffff\5\46\11\45\4\0\5\46\1\uffff\4\45\1\46\3\0";
    static final String DFA3_maxS =
        "\1\u00b4\5\45\1\uffff\5\u00b4\11\45\4\0\5\u00b4\1\uffff\4\45\1"+
        "\u00b4\3\0";
    static final String DFA3_acceptS =
        "\6\uffff\1\2\27\uffff\1\1\10\uffff";
    static final String DFA3_specialS =
        "\25\uffff\1\5\1\2\1\4\1\3\13\uffff\1\0\1\6\1\1}>";
    static final String[] DFA3_transitionS = {
            "\1\3\142\6\1\uffff\1\6\1\5\1\6\1\1\1\6\1\4\2\6\1\2\42\6",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "",
            "\136\6\1\15\4\6\1\14\6\6\1\16\44\6",
            "\136\6\1\17\4\6\1\14\6\6\1\16\44\6",
            "\136\6\1\15\4\6\1\14\6\6\1\16\44\6",
            "\1\22\146\6\1\21\4\6\1\20\42\6",
            "\1\24\153\6\1\23\42\6",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "\1\35",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\147\6\1\37\2\6\1\40\44\6",
            "\152\6\1\41\44\6",
            "\152\6\1\40\44\6",
            "\146\6\1\42\50\6",
            "\146\6\1\42\50\6",
            "",
            "\1\43",
            "\1\44",
            "\1\45",
            "\1\46",
            "\152\6\1\41\44\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_static.DFA3_eotS);
    static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_static.DFA3_eofS);
    static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_static.DFA3_minS);
    static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_static.DFA3_maxS);
    static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_static.DFA3_acceptS);
    static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_static.DFA3_specialS);
    static final short[][] DFA3_transition;

    static {
        int numStates = DFA3_static.DFA3_transitionS.length;
        DFA3_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA3_transition[i] = DFA.unpackEncodedString(DFA3_static.DFA3_transitionS[i]);
        }
    }

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = DFA3_eot;
            this.eof = DFA3_eof;
            this.min = DFA3_min;
            this.max = DFA3_max;
            this.accept = DFA3_accept;
            this.special = DFA3_special;
            this.transition = DFA3_transition;
        }
        public String getDescription() {
            return "160:11: ( procedureNounPhrase | ( sentenceStructure | unmatchedPhrase )+ )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA3_36 = input.LA(1);

                         
                        int index3_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index3_36);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA3_38 = input.LA(1);

                         
                        int index3_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index3_38);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA3_22 = input.LA(1);

                         
                        int index3_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index3_22);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA3_24 = input.LA(1);

                         
                        int index3_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index3_24);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA3_23 = input.LA(1);

                         
                        int index3_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index3_23);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA3_21 = input.LA(1);

                         
                        int index3_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index3_21);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA3_37 = input.LA(1);

                         
                        int index3_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index3_37);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 3, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA2_static {
    static final String DFA2_eotS =
        "\u0092\uffff";
    static final String DFA2_eofS =
        "\1\1\u0091\uffff";
    static final String DFA2_minS =
        "\1\46\1\uffff\u008e\0\2\uffff";
    static final String DFA2_maxS =
        "\1\u00b4\1\uffff\u008e\0\2\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\1\3\u008e\uffff\1\1\1\2";
    static final String DFA2_specialS =
        "\2\uffff\1\121\1\141\1\123\1\153\1\0\1\137\1\52\1\154\1\155\1\30"+
        "\1\110\1\23\1\24\1\17\1\60\1\151\1\u0083\1\56\1\170\1\117\1\173"+
        "\1\106\1\172\1\107\1\31\1\163\1\15\1\66\1\146\1\116\1\111\1\171"+
        "\1\133\1\166\1\3\1\35\1\11\1\14\1\150\1\120\1\43\1\145\1\143\1\u0087"+
        "\1\40\1\124\1\42\1\53\1\72\1\103\1\130\1\50\1\147\1\21\1\46\1\u0082"+
        "\1\156\1\142\1\5\1\122\1\2\1\140\1\7\1\165\1\161\1\101\1\102\1\u0080"+
        "\1\u0084\1\45\1\71\1\27\1\u008c\1\62\1\176\1\6\1\25\1\u0089\1\136"+
        "\1\112\1\113\1\131\1\174\1\157\1\4\1\61\1\u0085\1\51\1\105\1\125"+
        "\1\20\1\74\1\32\1\36\1\76\1\1\1\22\1\152\1\u008b\1\44\1\37\1\77"+
        "\1\16\1\33\1\10\1\u008a\1\177\1\175\1\160\1\134\1\127\1\67\1\55"+
        "\1\26\1\12\1\u008d\1\135\1\114\1\132\1\104\1\70\1\34\1\167\1\162"+
        "\1\u0081\1\115\1\64\1\65\1\100\1\u0086\1\u0088\1\164\1\126\1\144"+
        "\1\13\1\75\1\41\1\57\1\73\1\54\1\63\1\47\2\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\4\1\16\1\17\1\43\1\40\1\53\1\u0085\1\15\1\25\1\114\1\115"+
            "\1\113\1\121\1\122\1\131\1\132\1\116\1\130\1\123\1\125\1\117"+
            "\1\120\1\127\1\126\1\124\1\24\1\52\1\u0086\1\56\1\u0087\1\41"+
            "\1\57\1\66\1\23\1\54\1\10\1\55\1\46\1\47\1\20\1\60\1\61\1\62"+
            "\1\63\1\64\1\37\1\26\1\143\1\u0083\1\144\1\147\1\21\1\42\1\151"+
            "\1\150\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\30\1\161"+
            "\1\65\1\162\1\146\1\163\1\164\1\71\1\165\1\72\1\166\1\73\1\167"+
            "\1\170\1\145\1\171\1\172\1\74\1\173\1\67\1\174\1\175\1\176\1"+
            "\75\1\177\1\51\1\70\1\u0080\1\u0081\1\u0082\1\11\1\134\1\u0088"+
            "\1\22\1\u0089\1\u0084\1\u008a\1\1\1\u008b\1\6\1\u008c\1\2\1"+
            "\31\1\5\1\u008d\1\u008e\1\3\1\7\1\103\1\76\1\112\1\12\1\13\1"+
            "\14\1\106\1\133\1\27\1\50\1\36\1\107\1\104\1\110\1\44\1\45\1"+
            "\32\1\33\1\35\1\34\1\77\1\111\1\u008f\1\135\1\140\1\137\1\142"+
            "\1\136\1\141\1\100\1\105\1\101\1\102",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_static.DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_static.DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_static.DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_static.DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_static.DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_static.DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_static.DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_static.DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "()+ loopback of 160:34: ( sentenceStructure | unmatchedPhrase )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA2_6 = input.LA(1);

                         
                        int index2_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_6);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA2_97 = input.LA(1);

                         
                        int index2_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_97);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA2_62 = input.LA(1);

                         
                        int index2_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_62);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA2_36 = input.LA(1);

                         
                        int index2_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_36);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA2_86 = input.LA(1);

                         
                        int index2_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_86);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA2_60 = input.LA(1);

                         
                        int index2_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_60);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA2_77 = input.LA(1);

                         
                        int index2_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_77);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA2_64 = input.LA(1);

                         
                        int index2_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_64);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA2_106 = input.LA(1);

                         
                        int index2_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_106);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA2_38 = input.LA(1);

                         
                        int index2_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_38);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA2_116 = input.LA(1);

                         
                        int index2_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_116);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA2_136 = input.LA(1);

                         
                        int index2_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_136);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA2_39 = input.LA(1);

                         
                        int index2_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_39);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA2_28 = input.LA(1);

                         
                        int index2_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_28);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA2_104 = input.LA(1);

                         
                        int index2_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_104);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA2_15 = input.LA(1);

                         
                        int index2_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_15);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA2_92 = input.LA(1);

                         
                        int index2_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_92);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA2_55 = input.LA(1);

                         
                        int index2_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_55);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA2_98 = input.LA(1);

                         
                        int index2_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_98);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA2_13 = input.LA(1);

                         
                        int index2_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_13);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA2_14 = input.LA(1);

                         
                        int index2_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_14);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA2_78 = input.LA(1);

                         
                        int index2_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_78);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA2_115 = input.LA(1);

                         
                        int index2_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_115);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA2_73 = input.LA(1);

                         
                        int index2_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_73);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA2_11 = input.LA(1);

                         
                        int index2_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_11);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA2_26 = input.LA(1);

                         
                        int index2_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_26);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA2_94 = input.LA(1);

                         
                        int index2_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_94);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA2_105 = input.LA(1);

                         
                        int index2_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_105);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA2_123 = input.LA(1);

                         
                        int index2_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_123);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA2_37 = input.LA(1);

                         
                        int index2_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_37);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA2_95 = input.LA(1);

                         
                        int index2_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_95);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA2_102 = input.LA(1);

                         
                        int index2_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_102);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA2_46 = input.LA(1);

                         
                        int index2_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_46);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA2_138 = input.LA(1);

                         
                        int index2_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_138);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA2_48 = input.LA(1);

                         
                        int index2_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_48);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA2_42 = input.LA(1);

                         
                        int index2_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_42);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA2_101 = input.LA(1);

                         
                        int index2_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_101);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA2_71 = input.LA(1);

                         
                        int index2_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_71);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA2_56 = input.LA(1);

                         
                        int index2_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_56);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA2_143 = input.LA(1);

                         
                        int index2_143 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_143);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA2_53 = input.LA(1);

                         
                        int index2_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_53);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA2_89 = input.LA(1);

                         
                        int index2_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_89);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA2_8 = input.LA(1);

                         
                        int index2_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_8);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA2_49 = input.LA(1);

                         
                        int index2_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_49);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA2_141 = input.LA(1);

                         
                        int index2_141 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_141);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA2_114 = input.LA(1);

                         
                        int index2_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_114);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA2_19 = input.LA(1);

                         
                        int index2_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_19);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA2_139 = input.LA(1);

                         
                        int index2_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_139);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA2_16 = input.LA(1);

                         
                        int index2_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_16);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA2_87 = input.LA(1);

                         
                        int index2_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_87);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA2_75 = input.LA(1);

                         
                        int index2_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_75);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA2_142 = input.LA(1);

                         
                        int index2_142 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_142);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA2_128 = input.LA(1);

                         
                        int index2_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_128);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA2_129 = input.LA(1);

                         
                        int index2_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_129);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA2_29 = input.LA(1);

                         
                        int index2_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_29);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA2_113 = input.LA(1);

                         
                        int index2_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_113);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA2_122 = input.LA(1);

                         
                        int index2_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_122);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA2_72 = input.LA(1);

                         
                        int index2_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_72);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA2_50 = input.LA(1);

                         
                        int index2_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_50);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA2_140 = input.LA(1);

                         
                        int index2_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_140);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA2_93 = input.LA(1);

                         
                        int index2_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_93);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA2_137 = input.LA(1);

                         
                        int index2_137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_137);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA2_96 = input.LA(1);

                         
                        int index2_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_96);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA2_103 = input.LA(1);

                         
                        int index2_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_103);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA2_130 = input.LA(1);

                         
                        int index2_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_130);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA2_67 = input.LA(1);

                         
                        int index2_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_67);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA2_68 = input.LA(1);

                         
                        int index2_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_68);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA2_51 = input.LA(1);

                         
                        int index2_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_51);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA2_121 = input.LA(1);

                         
                        int index2_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_121);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA2_90 = input.LA(1);

                         
                        int index2_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_90);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA2_23 = input.LA(1);

                         
                        int index2_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_23);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA2_25 = input.LA(1);

                         
                        int index2_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_25);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA2_12 = input.LA(1);

                         
                        int index2_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_12);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA2_32 = input.LA(1);

                         
                        int index2_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_32);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA2_81 = input.LA(1);

                         
                        int index2_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_81);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA2_82 = input.LA(1);

                         
                        int index2_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_82);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA2_119 = input.LA(1);

                         
                        int index2_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_119);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA2_127 = input.LA(1);

                         
                        int index2_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_127);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA2_31 = input.LA(1);

                         
                        int index2_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_31);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA2_21 = input.LA(1);

                         
                        int index2_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_21);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA2_41 = input.LA(1);

                         
                        int index2_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_41);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA2_2 = input.LA(1);

                         
                        int index2_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_2);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA2_61 = input.LA(1);

                         
                        int index2_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_61);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA2_4 = input.LA(1);

                         
                        int index2_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_4);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA2_47 = input.LA(1);

                         
                        int index2_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_47);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA2_91 = input.LA(1);

                         
                        int index2_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_91);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA2_134 = input.LA(1);

                         
                        int index2_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_134);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA2_112 = input.LA(1);

                         
                        int index2_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_112);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA2_52 = input.LA(1);

                         
                        int index2_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_52);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA2_83 = input.LA(1);

                         
                        int index2_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_83);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA2_120 = input.LA(1);

                         
                        int index2_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_120);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA2_34 = input.LA(1);

                         
                        int index2_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_34);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA2_111 = input.LA(1);

                         
                        int index2_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_111);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA2_118 = input.LA(1);

                         
                        int index2_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_118);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA2_80 = input.LA(1);

                         
                        int index2_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_80);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA2_7 = input.LA(1);

                         
                        int index2_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_7);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA2_63 = input.LA(1);

                         
                        int index2_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_63);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA2_3 = input.LA(1);

                         
                        int index2_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_3);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA2_59 = input.LA(1);

                         
                        int index2_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_59);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA2_44 = input.LA(1);

                         
                        int index2_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_44);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA2_135 = input.LA(1);

                         
                        int index2_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_135);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA2_43 = input.LA(1);

                         
                        int index2_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_43);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA2_30 = input.LA(1);

                         
                        int index2_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_30);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA2_54 = input.LA(1);

                         
                        int index2_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_54);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA2_40 = input.LA(1);

                         
                        int index2_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_40);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA2_17 = input.LA(1);

                         
                        int index2_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_17);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA2_99 = input.LA(1);

                         
                        int index2_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_99);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA2_5 = input.LA(1);

                         
                        int index2_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||synpred3_ChemicalChunker()||(synpred3_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_5);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA2_9 = input.LA(1);

                         
                        int index2_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_9);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA2_10 = input.LA(1);

                         
                        int index2_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_10);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA2_58 = input.LA(1);

                         
                        int index2_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_58);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA2_85 = input.LA(1);

                         
                        int index2_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_85);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA2_110 = input.LA(1);

                         
                        int index2_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_110);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA2_66 = input.LA(1);

                         
                        int index2_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_66);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA2_125 = input.LA(1);

                         
                        int index2_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_125);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA2_27 = input.LA(1);

                         
                        int index2_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_27);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA2_133 = input.LA(1);

                         
                        int index2_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_133);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA2_65 = input.LA(1);

                         
                        int index2_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_65);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA2_35 = input.LA(1);

                         
                        int index2_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_35);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA2_124 = input.LA(1);

                         
                        int index2_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_124);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA2_20 = input.LA(1);

                         
                        int index2_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_20);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA2_33 = input.LA(1);

                         
                        int index2_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_33);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA2_24 = input.LA(1);

                         
                        int index2_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_24);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA2_22 = input.LA(1);

                         
                        int index2_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_22);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA2_84 = input.LA(1);

                         
                        int index2_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_84);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA2_109 = input.LA(1);

                         
                        int index2_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_109);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA2_76 = input.LA(1);

                         
                        int index2_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_76);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA2_108 = input.LA(1);

                         
                        int index2_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_108);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA2_69 = input.LA(1);

                         
                        int index2_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_69);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA2_126 = input.LA(1);

                         
                        int index2_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_126);
                        if ( s>=0 ) return s;
                        break;

                    case 130 : 
                        int LA2_57 = input.LA(1);

                         
                        int index2_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_57);
                        if ( s>=0 ) return s;
                        break;

                    case 131 : 
                        int LA2_18 = input.LA(1);

                         
                        int index2_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_18);
                        if ( s>=0 ) return s;
                        break;

                    case 132 : 
                        int LA2_70 = input.LA(1);

                         
                        int index2_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_70);
                        if ( s>=0 ) return s;
                        break;

                    case 133 : 
                        int LA2_88 = input.LA(1);

                         
                        int index2_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_88);
                        if ( s>=0 ) return s;
                        break;

                    case 134 : 
                        int LA2_131 = input.LA(1);

                         
                        int index2_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_131);
                        if ( s>=0 ) return s;
                        break;

                    case 135 : 
                        int LA2_45 = input.LA(1);

                         
                        int index2_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_45);
                        if ( s>=0 ) return s;
                        break;

                    case 136 : 
                        int LA2_132 = input.LA(1);

                         
                        int index2_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_132);
                        if ( s>=0 ) return s;
                        break;

                    case 137 : 
                        int LA2_79 = input.LA(1);

                         
                        int index2_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_79);
                        if ( s>=0 ) return s;
                        break;

                    case 138 : 
                        int LA2_107 = input.LA(1);

                         
                        int index2_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_107);
                        if ( s>=0 ) return s;
                        break;

                    case 139 : 
                        int LA2_100 = input.LA(1);

                         
                        int index2_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_100);
                        if ( s>=0 ) return s;
                        break;

                    case 140 : 
                        int LA2_74 = input.LA(1);

                         
                        int index2_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_74);
                        if ( s>=0 ) return s;
                        break;

                    case 141 : 
                        int LA2_117 = input.LA(1);

                         
                        int index2_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_117);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA5_static {
    static final String DFA5_eotS =
        "\u0089\uffff";
    static final String DFA5_eofS =
        "\1\13\u0088\uffff";
    static final String DFA5_minS =
        "\1\46\12\0\1\uffff\171\0\4\uffff";
    static final String DFA5_maxS =
        "\1\u00b4\12\0\1\uffff\171\0\4\uffff";
    static final String DFA5_acceptS =
        "\13\uffff\1\5\171\uffff\1\1\1\2\1\3\1\4";
    static final String DFA5_specialS =
        "\1\uffff\1\154\1\70\1\63\1\177\1\161\1\157\1\u0080\1\165\1\23\1"+
        "\123\1\uffff\1\73\1\144\1\50\1\65\1\140\1\21\1\164\1\127\1\55\1"+
        "\113\1\116\1\41\1\74\1\120\1\135\1\115\1\37\1\166\1\26\1\u0082\1"+
        "\40\1\111\1\125\1\130\1\147\1\13\1\35\1\20\1\11\1\136\1\45\1\44"+
        "\1\75\1\114\1\46\1\4\1\150\1\160\1\175\1\102\1\121\1\137\1\162\1"+
        "\122\1\112\1\51\1\53\1\117\1\173\1\57\1\0\1\64\1\134\1\103\1\133"+
        "\1\30\1\101\1\52\1\110\1\172\1\56\1\62\1\54\1\126\1\7\1\155\1\43"+
        "\1\17\1\152\1\105\1\171\1\u0081\1\104\1\176\1\36\1\10\1\151\1\145"+
        "\1\76\1\42\1\153\1\66\1\163\1\22\1\6\1\167\1\33\1\3\1\31\1\12\1"+
        "\2\1\146\1\124\1\131\1\47\1\67\1\15\1\1\1\25\1\142\1\100\1\174\1"+
        "\27\1\16\1\72\1\132\1\77\1\156\1\32\1\5\1\61\1\107\1\141\1\143\1"+
        "\170\1\14\1\60\1\71\1\106\1\24\1\34\4\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\20\1\11\1\12\1\44\1\41\1\54\1\13\1\10\1\32\1\115\1\116\1"+
            "\114\1\122\1\123\1\132\1\133\1\117\1\131\1\124\1\126\1\120\1"+
            "\121\1\130\1\127\1\125\1\31\1\53\1\13\1\57\1\13\1\42\1\60\1"+
            "\67\1\30\1\55\1\24\1\56\1\47\1\50\1\26\1\61\1\62\1\63\1\64\1"+
            "\65\1\40\1\33\1\143\1\u0083\1\144\1\147\1\27\1\43\1\151\1\150"+
            "\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\35\1\161\1\66\1"+
            "\162\1\146\1\163\1\164\1\72\1\165\1\73\1\166\1\74\1\167\1\170"+
            "\1\145\1\171\1\172\1\75\1\173\1\70\1\174\1\175\1\176\1\76\1"+
            "\177\1\52\1\71\1\u0080\1\u0081\1\u0082\1\25\1\15\1\13\1\14\1"+
            "\13\1\u0084\3\13\1\22\1\13\1\16\1\36\1\21\2\13\1\17\1\23\1\104"+
            "\1\77\1\113\1\5\1\6\1\7\1\107\1\134\1\34\1\51\1\37\1\110\1\105"+
            "\1\111\1\45\1\46\1\1\1\2\1\4\1\3\1\100\1\112\1\13\1\135\1\140"+
            "\1\137\1\142\1\136\1\141\1\101\1\106\1\102\1\103",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_static.DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_static.DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_static.DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_static.DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_static.DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_static.DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_static.DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_static.DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "()+ loopback of 162:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA5_62 = input.LA(1);

                         
                        int index5_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_62);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA5_109 = input.LA(1);

                         
                        int index5_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_109);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA5_102 = input.LA(1);

                         
                        int index5_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_102);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA5_99 = input.LA(1);

                         
                        int index5_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_99);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA5_47 = input.LA(1);

                         
                        int index5_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_47);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA5_121 = input.LA(1);

                         
                        int index5_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_121);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA5_96 = input.LA(1);

                         
                        int index5_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_96);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA5_76 = input.LA(1);

                         
                        int index5_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_76);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA5_87 = input.LA(1);

                         
                        int index5_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_87);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA5_40 = input.LA(1);

                         
                        int index5_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_40);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA5_101 = input.LA(1);

                         
                        int index5_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_101);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA5_37 = input.LA(1);

                         
                        int index5_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_37);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA5_127 = input.LA(1);

                         
                        int index5_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_127);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA5_108 = input.LA(1);

                         
                        int index5_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_108);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA5_115 = input.LA(1);

                         
                        int index5_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_115);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA5_79 = input.LA(1);

                         
                        int index5_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_79);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA5_39 = input.LA(1);

                         
                        int index5_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_39);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA5_17 = input.LA(1);

                         
                        int index5_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred6_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||synpred6_ChemicalChunker()||(synpred6_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_17);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA5_95 = input.LA(1);

                         
                        int index5_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_95);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA5_9 = input.LA(1);

                         
                        int index5_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_9);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA5_131 = input.LA(1);

                         
                        int index5_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_131);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA5_110 = input.LA(1);

                         
                        int index5_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_110);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA5_30 = input.LA(1);

                         
                        int index5_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_30);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA5_114 = input.LA(1);

                         
                        int index5_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_114);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA5_67 = input.LA(1);

                         
                        int index5_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_67);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA5_100 = input.LA(1);

                         
                        int index5_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_100);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA5_120 = input.LA(1);

                         
                        int index5_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_120);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA5_98 = input.LA(1);

                         
                        int index5_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_98);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA5_132 = input.LA(1);

                         
                        int index5_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_132);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA5_38 = input.LA(1);

                         
                        int index5_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_38);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA5_86 = input.LA(1);

                         
                        int index5_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_86);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA5_28 = input.LA(1);

                         
                        int index5_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_28);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA5_32 = input.LA(1);

                         
                        int index5_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_32);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA5_23 = input.LA(1);

                         
                        int index5_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_23);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA5_91 = input.LA(1);

                         
                        int index5_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_91);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA5_78 = input.LA(1);

                         
                        int index5_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_78);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA5_43 = input.LA(1);

                         
                        int index5_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_43);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA5_42 = input.LA(1);

                         
                        int index5_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_42);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA5_46 = input.LA(1);

                         
                        int index5_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_46);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA5_106 = input.LA(1);

                         
                        int index5_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_106);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA5_14 = input.LA(1);

                         
                        int index5_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_14);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA5_57 = input.LA(1);

                         
                        int index5_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_57);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA5_69 = input.LA(1);

                         
                        int index5_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_69);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA5_58 = input.LA(1);

                         
                        int index5_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_58);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA5_74 = input.LA(1);

                         
                        int index5_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_74);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA5_20 = input.LA(1);

                         
                        int index5_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_20);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA5_72 = input.LA(1);

                         
                        int index5_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_72);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA5_61 = input.LA(1);

                         
                        int index5_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_61);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA5_128 = input.LA(1);

                         
                        int index5_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_128);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA5_122 = input.LA(1);

                         
                        int index5_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_122);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA5_73 = input.LA(1);

                         
                        int index5_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_73);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA5_3 = input.LA(1);

                         
                        int index5_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_3);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA5_63 = input.LA(1);

                         
                        int index5_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_63);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA5_15 = input.LA(1);

                         
                        int index5_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_15);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA5_93 = input.LA(1);

                         
                        int index5_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_93);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA5_107 = input.LA(1);

                         
                        int index5_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_107);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA5_2 = input.LA(1);

                         
                        int index5_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_2);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA5_129 = input.LA(1);

                         
                        int index5_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_129);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA5_116 = input.LA(1);

                         
                        int index5_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_116);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA5_12 = input.LA(1);

                         
                        int index5_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_12);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA5_24 = input.LA(1);

                         
                        int index5_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_24);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA5_44 = input.LA(1);

                         
                        int index5_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_44);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA5_90 = input.LA(1);

                         
                        int index5_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_90);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA5_118 = input.LA(1);

                         
                        int index5_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_118);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA5_112 = input.LA(1);

                         
                        int index5_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_112);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA5_68 = input.LA(1);

                         
                        int index5_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_68);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA5_51 = input.LA(1);

                         
                        int index5_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_51);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA5_65 = input.LA(1);

                         
                        int index5_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_65);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA5_84 = input.LA(1);

                         
                        int index5_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_84);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA5_81 = input.LA(1);

                         
                        int index5_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_81);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA5_130 = input.LA(1);

                         
                        int index5_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_130);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA5_123 = input.LA(1);

                         
                        int index5_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_123);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA5_70 = input.LA(1);

                         
                        int index5_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_70);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA5_33 = input.LA(1);

                         
                        int index5_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_33);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA5_56 = input.LA(1);

                         
                        int index5_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_56);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA5_21 = input.LA(1);

                         
                        int index5_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_21);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA5_45 = input.LA(1);

                         
                        int index5_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_45);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA5_27 = input.LA(1);

                         
                        int index5_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_27);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA5_22 = input.LA(1);

                         
                        int index5_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_22);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA5_59 = input.LA(1);

                         
                        int index5_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_59);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA5_25 = input.LA(1);

                         
                        int index5_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_25);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA5_52 = input.LA(1);

                         
                        int index5_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_52);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA5_55 = input.LA(1);

                         
                        int index5_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_55);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA5_10 = input.LA(1);

                         
                        int index5_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_10);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA5_104 = input.LA(1);

                         
                        int index5_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_104);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA5_34 = input.LA(1);

                         
                        int index5_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_34);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA5_75 = input.LA(1);

                         
                        int index5_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_75);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA5_19 = input.LA(1);

                         
                        int index5_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_19);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA5_35 = input.LA(1);

                         
                        int index5_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_35);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA5_105 = input.LA(1);

                         
                        int index5_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_105);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA5_117 = input.LA(1);

                         
                        int index5_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_117);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA5_66 = input.LA(1);

                         
                        int index5_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_66);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA5_64 = input.LA(1);

                         
                        int index5_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_64);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA5_26 = input.LA(1);

                         
                        int index5_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_26);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA5_41 = input.LA(1);

                         
                        int index5_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_41);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA5_53 = input.LA(1);

                         
                        int index5_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_53);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA5_16 = input.LA(1);

                         
                        int index5_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_16);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA5_124 = input.LA(1);

                         
                        int index5_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_124);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA5_111 = input.LA(1);

                         
                        int index5_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_111);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA5_125 = input.LA(1);

                         
                        int index5_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_125);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA5_13 = input.LA(1);

                         
                        int index5_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_13);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA5_89 = input.LA(1);

                         
                        int index5_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_89);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA5_103 = input.LA(1);

                         
                        int index5_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_103);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA5_36 = input.LA(1);

                         
                        int index5_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_36);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA5_48 = input.LA(1);

                         
                        int index5_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_48);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA5_88 = input.LA(1);

                         
                        int index5_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_88);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA5_80 = input.LA(1);

                         
                        int index5_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_80);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA5_92 = input.LA(1);

                         
                        int index5_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_92);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA5_1 = input.LA(1);

                         
                        int index5_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_1);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA5_77 = input.LA(1);

                         
                        int index5_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_77);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA5_119 = input.LA(1);

                         
                        int index5_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_119);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA5_6 = input.LA(1);

                         
                        int index5_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_6);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA5_49 = input.LA(1);

                         
                        int index5_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_49);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA5_5 = input.LA(1);

                         
                        int index5_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_5);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA5_54 = input.LA(1);

                         
                        int index5_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_54);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA5_94 = input.LA(1);

                         
                        int index5_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_94);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA5_18 = input.LA(1);

                         
                        int index5_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_18);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA5_8 = input.LA(1);

                         
                        int index5_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_8);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA5_29 = input.LA(1);

                         
                        int index5_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_29);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA5_97 = input.LA(1);

                         
                        int index5_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_97);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA5_126 = input.LA(1);

                         
                        int index5_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_126);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA5_82 = input.LA(1);

                         
                        int index5_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_82);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA5_71 = input.LA(1);

                         
                        int index5_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_71);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA5_60 = input.LA(1);

                         
                        int index5_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_60);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA5_113 = input.LA(1);

                         
                        int index5_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_113);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA5_50 = input.LA(1);

                         
                        int index5_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_50);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA5_85 = input.LA(1);

                         
                        int index5_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_85);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA5_4 = input.LA(1);

                         
                        int index5_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_4);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA5_7 = input.LA(1);

                         
                        int index5_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_7);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA5_83 = input.LA(1);

                         
                        int index5_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_83);
                        if ( s>=0 ) return s;
                        break;

                    case 130 : 
                        int LA5_31 = input.LA(1);

                         
                        int index5_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA6_static {
    static final String DFA6_eotS =
        "\32\uffff";
    static final String DFA6_eofS =
        "\1\1\31\uffff";
    static final String DFA6_minS =
        "\1\46\1\uffff\13\45\13\0\2\uffff";
    static final String DFA6_maxS =
        "\1\u00b4\1\uffff\13\45\13\0\2\uffff";
    static final String DFA6_acceptS =
        "\1\uffff\1\3\26\uffff\1\1\1\2";
    static final String DFA6_specialS =
        "\15\uffff\1\6\1\11\1\12\1\7\1\3\1\0\1\5\1\4\1\1\1\10\1\2\2\uffff}>";
    static final String[] DFA6_transitionS = {
            "\1\1\1\6\1\7\4\1\1\5\126\1\1\14\22\1\1\2\1\3\1\4\12\1\1\10"+
            "\1\11\1\13\1\12\15\1",
            "",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA6_eot = DFA.unpackEncodedString(DFA6_static.DFA6_eotS);
    static final short[] DFA6_eof = DFA.unpackEncodedString(DFA6_static.DFA6_eofS);
    static final char[] DFA6_min = DFA.unpackEncodedStringToUnsignedChars(DFA6_static.DFA6_minS);
    static final char[] DFA6_max = DFA.unpackEncodedStringToUnsignedChars(DFA6_static.DFA6_maxS);
    static final short[] DFA6_accept = DFA.unpackEncodedString(DFA6_static.DFA6_acceptS);
    static final short[] DFA6_special = DFA.unpackEncodedString(DFA6_static.DFA6_specialS);
    static final short[][] DFA6_transition;

    static {
        int numStates = DFA6_static.DFA6_transitionS.length;
        DFA6_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA6_transition[i] = DFA.unpackEncodedString(DFA6_static.DFA6_transitionS[i]);
        }
    }

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = DFA6_eot;
            this.eof = DFA6_eof;
            this.min = DFA6_min;
            this.max = DFA6_max;
            this.accept = DFA6_accept;
            this.special = DFA6_special;
            this.transition = DFA6_transition;
        }
        public String getDescription() {
            return "()* loopback of 162:73: ( advAdj | colon )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA6_18 = input.LA(1);

                         
                        int index6_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_18);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA6_21 = input.LA(1);

                         
                        int index6_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_21);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA6_23 = input.LA(1);

                         
                        int index6_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 25;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_23);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA6_17 = input.LA(1);

                         
                        int index6_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_17);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA6_20 = input.LA(1);

                         
                        int index6_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_20);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA6_19 = input.LA(1);

                         
                        int index6_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_19);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA6_13 = input.LA(1);

                         
                        int index6_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_13);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA6_16 = input.LA(1);

                         
                        int index6_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_16);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA6_22 = input.LA(1);

                         
                        int index6_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_22);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA6_14 = input.LA(1);

                         
                        int index6_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_14);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA6_15 = input.LA(1);

                         
                        int index6_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 6, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA7_static {
    static final String DFA7_eotS =
        "\13\uffff";
    static final String DFA7_eofS =
        "\1\1\12\uffff";
    static final String DFA7_minS =
        "\1\46\1\uffff\3\45\3\0\3\uffff";
    static final String DFA7_maxS =
        "\1\u00b4\1\uffff\3\45\3\0\3\uffff";
    static final String DFA7_acceptS =
        "\1\uffff\1\4\6\uffff\1\1\1\3\1\2";
    static final String DFA7_specialS =
        "\5\uffff\1\2\1\1\1\0\3\uffff}>";
    static final String[] DFA7_transitionS = {
            "\135\1\1\3\1\1\1\2\13\1\1\4\43\1",
            "",
            "\1\5",
            "\1\6",
            "\1\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    }

    static final short[] DFA7_eot = DFA.unpackEncodedString(DFA7_static.DFA7_eotS);
    static final short[] DFA7_eof = DFA.unpackEncodedString(DFA7_static.DFA7_eofS);
    static final char[] DFA7_min = DFA.unpackEncodedStringToUnsignedChars(DFA7_static.DFA7_minS);
    static final char[] DFA7_max = DFA.unpackEncodedStringToUnsignedChars(DFA7_static.DFA7_maxS);
    static final short[] DFA7_accept = DFA.unpackEncodedString(DFA7_static.DFA7_acceptS);
    static final short[] DFA7_special = DFA.unpackEncodedString(DFA7_static.DFA7_specialS);
    static final short[][] DFA7_transition;

    static {
        int numStates = DFA7_static.DFA7_transitionS.length;
        DFA7_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA7_transition[i] = DFA.unpackEncodedString(DFA7_static.DFA7_transitionS[i]);
        }
    }

    class DFA7 extends DFA {

        public DFA7(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = DFA7_eot;
            this.eof = DFA7_eof;
            this.min = DFA7_min;
            this.max = DFA7_max;
            this.accept = DFA7_accept;
            this.special = DFA7_special;
            this.transition = DFA7_transition;
        }
        public String getDescription() {
            return "()* loopback of 162:89: ( conjunction | rbconj | comma )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA7_7 = input.LA(1);

                         
                        int index7_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_7);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA7_6 = input.LA(1);

                         
                        int index7_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_6);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA7_5 = input.LA(1);

                         
                        int index7_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred14_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 7, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA14_static {
    static final String DFA14_eotS =
        "\111\uffff";
    static final String DFA14_eofS =
        "\111\uffff";
    static final String DFA14_minS =
        "\1\46\25\0\63\uffff";
    static final String DFA14_maxS =
        "\1\u00b4\25\0\63\uffff";
    static final String DFA14_acceptS =
        "\26\uffff\1\2\61\uffff\1\1";
    static final String DFA14_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\63\uffff}>";
    static final String[] DFA14_transitionS = {
            "\1\26\1\12\1\13\3\26\1\uffff\1\11\1\22\20\uffff\1\21\1\26\1"+
            "\uffff\1\26\1\uffff\3\26\1\20\1\26\1\4\3\26\1\14\6\26\1\23\4"+
            "\uffff\1\15\1\26\11\uffff\1\25\1\uffff\1\26\4\uffff\1\26\1\uffff"+
            "\1\26\1\uffff\1\26\5\uffff\1\26\1\uffff\1\26\3\uffff\1\26\1"+
            "\uffff\2\26\3\uffff\1\5\2\uffff\1\16\5\uffff\1\17\1\uffff\2"+
            "\26\1\2\2\uffff\1\3\1\1\2\26\1\uffff\1\6\1\7\1\10\1\26\1\uffff"+
            "\1\24\14\26\10\uffff\4\26",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA14_eot = DFA.unpackEncodedString(DFA14_static.DFA14_eotS);
    static final short[] DFA14_eof = DFA.unpackEncodedString(DFA14_static.DFA14_eofS);
    static final char[] DFA14_min = DFA.unpackEncodedStringToUnsignedChars(DFA14_static.DFA14_minS);
    static final char[] DFA14_max = DFA.unpackEncodedStringToUnsignedChars(DFA14_static.DFA14_maxS);
    static final short[] DFA14_accept = DFA.unpackEncodedString(DFA14_static.DFA14_acceptS);
    static final short[] DFA14_special = DFA.unpackEncodedString(DFA14_static.DFA14_specialS);
    static final short[][] DFA14_transition;

    static {
        int numStates = DFA14_static.DFA14_transitionS.length;
        DFA14_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA14_transition[i] = DFA.unpackEncodedString(DFA14_static.DFA14_transitionS[i]);
        }
    }

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = DFA14_eot;
            this.eof = DFA14_eof;
            this.min = DFA14_min;
            this.max = DFA14_max;
            this.accept = DFA14_accept;
            this.special = DFA14_special;
            this.transition = DFA14_transition;
        }
        public String getDescription() {
            return "191:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA14_1 = input.LA(1);

                         
                        int index14_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA14_2 = input.LA(1);

                         
                        int index14_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA14_3 = input.LA(1);

                         
                        int index14_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA14_4 = input.LA(1);

                         
                        int index14_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA14_5 = input.LA(1);

                         
                        int index14_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA14_6 = input.LA(1);

                         
                        int index14_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA14_7 = input.LA(1);

                         
                        int index14_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA14_8 = input.LA(1);

                         
                        int index14_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA14_9 = input.LA(1);

                         
                        int index14_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA14_10 = input.LA(1);

                         
                        int index14_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA14_11 = input.LA(1);

                         
                        int index14_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA14_12 = input.LA(1);

                         
                        int index14_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA14_13 = input.LA(1);

                         
                        int index14_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA14_14 = input.LA(1);

                         
                        int index14_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA14_15 = input.LA(1);

                         
                        int index14_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA14_16 = input.LA(1);

                         
                        int index14_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA14_17 = input.LA(1);

                         
                        int index14_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA14_18 = input.LA(1);

                         
                        int index14_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA14_19 = input.LA(1);

                         
                        int index14_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA14_20 = input.LA(1);

                         
                        int index14_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_20);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA14_21 = input.LA(1);

                         
                        int index14_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 14, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA18_static {
    static final String DFA18_eotS =
        "\112\uffff";
    static final String DFA18_eofS =
        "\1\1\111\uffff";
    static final String DFA18_minS =
        "\1\46\1\uffff\107\0\1\uffff";
    static final String DFA18_maxS =
        "\1\u00b4\1\uffff\107\0\1\uffff";
    static final String DFA18_acceptS =
        "\1\uffff\1\2\107\uffff\1\1";
    static final String DFA18_specialS =
        "\2\uffff\1\51\1\63\1\12\1\20\1\74\1\27\1\23\1\50\1\75\1\36\1\4"+
        "\1\41\1\37\1\0\1\54\1\33\1\25\1\32\1\103\1\6\1\73\1\10\1\55\1\60"+
        "\1\21\1\3\1\100\1\77\1\65\1\24\1\44\1\11\1\15\1\56\1\34\1\52\1\47"+
        "\1\46\1\31\1\71\1\67\1\72\1\70\1\53\1\102\1\43\1\1\1\30\1\76\1\64"+
        "\1\42\1\22\1\62\1\35\1\16\1\13\1\66\1\14\1\101\1\17\1\105\1\45\1"+
        "\104\1\40\1\7\1\61\1\26\1\57\1\106\1\5\1\2\1\uffff}>";
    static final String[] DFA18_transitionS = {
            "\1\20\1\12\1\13\1\43\1\40\1\53\1\1\1\11\1\32\20\1\1\31\1\52"+
            "\1\1\1\56\1\1\1\41\1\57\1\66\1\30\1\54\1\24\1\55\1\46\1\47\1"+
            "\26\1\60\1\61\1\62\1\63\1\64\1\37\1\33\4\1\1\27\1\42\11\1\1"+
            "\35\1\1\1\65\4\1\1\71\1\1\1\72\1\1\1\73\5\1\1\74\1\1\1\67\3"+
            "\1\1\75\1\1\1\51\1\70\3\1\1\25\2\1\1\15\5\1\1\22\1\1\1\16\1"+
            "\1\1\21\1\1\1\14\1\17\1\23\1\103\1\76\1\1\1\6\1\7\1\10\1\106"+
            "\1\1\1\34\1\50\1\36\1\107\1\104\1\110\1\44\1\45\1\2\1\3\1\5"+
            "\1\4\1\77\10\1\1\100\1\105\1\101\1\102",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA18_eot = DFA.unpackEncodedString(DFA18_static.DFA18_eotS);
    static final short[] DFA18_eof = DFA.unpackEncodedString(DFA18_static.DFA18_eofS);
    static final char[] DFA18_min = DFA.unpackEncodedStringToUnsignedChars(DFA18_static.DFA18_minS);
    static final char[] DFA18_max = DFA.unpackEncodedStringToUnsignedChars(DFA18_static.DFA18_maxS);
    static final short[] DFA18_accept = DFA.unpackEncodedString(DFA18_static.DFA18_acceptS);
    static final short[] DFA18_special = DFA.unpackEncodedString(DFA18_static.DFA18_specialS);
    static final short[][] DFA18_transition;

    static {
        int numStates = DFA18_static.DFA18_transitionS.length;
        DFA18_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA18_transition[i] = DFA.unpackEncodedString(DFA18_static.DFA18_transitionS[i]);
        }
    }

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = DFA18_eot;
            this.eof = DFA18_eof;
            this.min = DFA18_min;
            this.max = DFA18_max;
            this.accept = DFA18_accept;
            this.special = DFA18_special;
            this.transition = DFA18_transition;
        }
        public String getDescription() {
            return "()* loopback of 196:34: ( ( conjunction )* nounphraseContent {...}?)*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA18_15 = input.LA(1);

                         
                        int index18_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_15);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA18_48 = input.LA(1);

                         
                        int index18_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_48);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA18_72 = input.LA(1);

                         
                        int index18_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_72);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA18_27 = input.LA(1);

                         
                        int index18_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_27);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA18_12 = input.LA(1);

                         
                        int index18_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_12);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA18_71 = input.LA(1);

                         
                        int index18_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_71);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA18_21 = input.LA(1);

                         
                        int index18_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_21);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA18_66 = input.LA(1);

                         
                        int index18_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_66);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA18_23 = input.LA(1);

                         
                        int index18_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_23);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA18_33 = input.LA(1);

                         
                        int index18_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_33);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA18_4 = input.LA(1);

                         
                        int index18_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_4);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA18_57 = input.LA(1);

                         
                        int index18_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_57);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA18_59 = input.LA(1);

                         
                        int index18_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_59);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA18_34 = input.LA(1);

                         
                        int index18_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_34);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA18_56 = input.LA(1);

                         
                        int index18_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_56);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA18_61 = input.LA(1);

                         
                        int index18_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_61);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA18_5 = input.LA(1);

                         
                        int index18_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_5);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA18_26 = input.LA(1);

                         
                        int index18_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_26);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA18_53 = input.LA(1);

                         
                        int index18_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_53);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA18_8 = input.LA(1);

                         
                        int index18_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_8);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA18_31 = input.LA(1);

                         
                        int index18_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_31);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA18_18 = input.LA(1);

                         
                        int index18_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_18);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA18_68 = input.LA(1);

                         
                        int index18_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_68);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA18_7 = input.LA(1);

                         
                        int index18_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_7);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA18_49 = input.LA(1);

                         
                        int index18_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_49);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA18_40 = input.LA(1);

                         
                        int index18_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_40);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA18_19 = input.LA(1);

                         
                        int index18_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_19);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA18_17 = input.LA(1);

                         
                        int index18_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred96_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||(synpred96_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||synpred96_ChemicalChunker())) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_17);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA18_36 = input.LA(1);

                         
                        int index18_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_36);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA18_55 = input.LA(1);

                         
                        int index18_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_55);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA18_11 = input.LA(1);

                         
                        int index18_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_11);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA18_14 = input.LA(1);

                         
                        int index18_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_14);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA18_65 = input.LA(1);

                         
                        int index18_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_65);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA18_13 = input.LA(1);

                         
                        int index18_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_13);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA18_52 = input.LA(1);

                         
                        int index18_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_52);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA18_47 = input.LA(1);

                         
                        int index18_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_47);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA18_32 = input.LA(1);

                         
                        int index18_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_32);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA18_63 = input.LA(1);

                         
                        int index18_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_63);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA18_39 = input.LA(1);

                         
                        int index18_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_39);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA18_38 = input.LA(1);

                         
                        int index18_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_38);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA18_9 = input.LA(1);

                         
                        int index18_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_9);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA18_2 = input.LA(1);

                         
                        int index18_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_2);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA18_37 = input.LA(1);

                         
                        int index18_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_37);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA18_45 = input.LA(1);

                         
                        int index18_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_45);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA18_16 = input.LA(1);

                         
                        int index18_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_16);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA18_24 = input.LA(1);

                         
                        int index18_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_24);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA18_35 = input.LA(1);

                         
                        int index18_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_35);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA18_69 = input.LA(1);

                         
                        int index18_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_69);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA18_25 = input.LA(1);

                         
                        int index18_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_25);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA18_67 = input.LA(1);

                         
                        int index18_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_67);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA18_54 = input.LA(1);

                         
                        int index18_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_54);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA18_3 = input.LA(1);

                         
                        int index18_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_3);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA18_51 = input.LA(1);

                         
                        int index18_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_51);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA18_30 = input.LA(1);

                         
                        int index18_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_30);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA18_58 = input.LA(1);

                         
                        int index18_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_58);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA18_42 = input.LA(1);

                         
                        int index18_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_42);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA18_44 = input.LA(1);

                         
                        int index18_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_44);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA18_41 = input.LA(1);

                         
                        int index18_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_41);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA18_43 = input.LA(1);

                         
                        int index18_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_43);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA18_22 = input.LA(1);

                         
                        int index18_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_22);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA18_6 = input.LA(1);

                         
                        int index18_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_6);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA18_10 = input.LA(1);

                         
                        int index18_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_10);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA18_50 = input.LA(1);

                         
                        int index18_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_50);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA18_29 = input.LA(1);

                         
                        int index18_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_29);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA18_28 = input.LA(1);

                         
                        int index18_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_28);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA18_60 = input.LA(1);

                         
                        int index18_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_60);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA18_46 = input.LA(1);

                         
                        int index18_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_46);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA18_20 = input.LA(1);

                         
                        int index18_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_20);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA18_64 = input.LA(1);

                         
                        int index18_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_64);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA18_62 = input.LA(1);

                         
                        int index18_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_62);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA18_70 = input.LA(1);

                         
                        int index18_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_70);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA17_static {
    static final String DFA17_eotS =
        "\110\uffff";
    static final String DFA17_eofS =
        "\110\uffff";
    static final String DFA17_minS =
        "\1\46\17\uffff\1\0\67\uffff";
    static final String DFA17_maxS =
        "\1\u00b4\17\uffff\1\0\67\uffff";
    static final String DFA17_acceptS =
        "\1\uffff\1\2\105\uffff\1\1";
    static final String DFA17_specialS =
        "\20\uffff\1\0\67\uffff}>";
    static final String[] DFA17_transitionS = {
            "\6\1\1\uffff\2\1\20\uffff\2\1\1\uffff\1\1\1\uffff\21\1\4\uffff"+
            "\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff"+
            "\1\1\2\uffff\1\20\5\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\107\4\1\1\uffff\4\1\1\uffff\15\1\10\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA17_eot = DFA.unpackEncodedString(DFA17_static.DFA17_eotS);
    static final short[] DFA17_eof = DFA.unpackEncodedString(DFA17_static.DFA17_eofS);
    static final char[] DFA17_min = DFA.unpackEncodedStringToUnsignedChars(DFA17_static.DFA17_minS);
    static final char[] DFA17_max = DFA.unpackEncodedStringToUnsignedChars(DFA17_static.DFA17_maxS);
    static final short[] DFA17_accept = DFA.unpackEncodedString(DFA17_static.DFA17_acceptS);
    static final short[] DFA17_special = DFA.unpackEncodedString(DFA17_static.DFA17_specialS);
    static final short[][] DFA17_transition;

    static {
        int numStates = DFA17_static.DFA17_transitionS.length;
        DFA17_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA17_transition[i] = DFA.unpackEncodedString(DFA17_static.DFA17_transitionS[i]);
        }
    }

    class DFA17 extends DFA {

        public DFA17(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 17;
            this.eot = DFA17_eot;
            this.eof = DFA17_eof;
            this.min = DFA17_min;
            this.max = DFA17_max;
            this.accept = DFA17_accept;
            this.special = DFA17_special;
            this.transition = DFA17_transition;
        }
        public String getDescription() {
            return "()* loopback of 196:35: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA17_16 = input.LA(1);

                         
                        int index17_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index17_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 17, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA20_static {
    static final String DFA20_eotS =
        "\17\uffff";
    static final String DFA20_eofS =
        "\17\uffff";
    static final String DFA20_minS =
        "\1\46\6\45\2\uffff\6\0";
    static final String DFA20_maxS =
        "\1\u00b4\6\45\2\uffff\6\0";
    static final String DFA20_acceptS =
        "\7\uffff\1\2\1\1\6\uffff";
    static final String DFA20_specialS =
        "\11\uffff\1\5\1\3\1\0\1\4\1\2\1\1}>";
    static final String[] DFA20_transitionS = {
            "\1\7\1\5\1\6\3\7\1\uffff\1\4\1\7\20\uffff\2\7\1\uffff\1\7\1"+
            "\uffff\21\7\4\uffff\2\7\11\uffff\1\7\1\uffff\1\7\4\uffff\1\7"+
            "\1\uffff\1\7\1\uffff\1\7\5\uffff\1\7\1\uffff\1\7\3\uffff\1\7"+
            "\1\uffff\2\7\3\uffff\1\7\2\uffff\1\7\5\uffff\1\7\1\uffff\1\7"+
            "\1\uffff\1\7\2\uffff\4\7\1\uffff\1\1\1\2\1\3\1\7\1\uffff\10"+
            "\7\4\10\1\7\10\uffff\4\7",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA20_eot = DFA.unpackEncodedString(DFA20_static.DFA20_eotS);
    static final short[] DFA20_eof = DFA.unpackEncodedString(DFA20_static.DFA20_eofS);
    static final char[] DFA20_min = DFA.unpackEncodedStringToUnsignedChars(DFA20_static.DFA20_minS);
    static final char[] DFA20_max = DFA.unpackEncodedStringToUnsignedChars(DFA20_static.DFA20_maxS);
    static final short[] DFA20_accept = DFA.unpackEncodedString(DFA20_static.DFA20_acceptS);
    static final short[] DFA20_special = DFA.unpackEncodedString(DFA20_static.DFA20_specialS);
    static final short[][] DFA20_transition;

    static {
        int numStates = DFA20_static.DFA20_transitionS.length;
        DFA20_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA20_transition[i] = DFA.unpackEncodedString(DFA20_static.DFA20_transitionS[i]);
        }
    }

    class DFA20 extends DFA {

        public DFA20(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 20;
            this.eot = DFA20_eot;
            this.eof = DFA20_eof;
            this.min = DFA20_min;
            this.max = DFA20_max;
            this.accept = DFA20_accept;
            this.special = DFA20_special;
            this.transition = DFA20_transition;
        }
        public String getDescription() {
            return "()* loopback of 199:4: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA20_11 = input.LA(1);

                         
                        int index20_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA20_14 = input.LA(1);

                         
                        int index20_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_14);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA20_13 = input.LA(1);

                         
                        int index20_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_13);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA20_10 = input.LA(1);

                         
                        int index20_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_10);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA20_12 = input.LA(1);

                         
                        int index20_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_12);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA20_9 = input.LA(1);

                         
                        int index20_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 20, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA21_static {
    static final String DFA21_eotS =
        "\111\uffff";
    static final String DFA21_eofS =
        "\1\1\110\uffff";
    static final String DFA21_minS =
        "\1\46\1\uffff\102\0\5\uffff";
    static final String DFA21_maxS =
        "\1\u00b4\1\uffff\102\0\5\uffff";
    static final String DFA21_acceptS =
        "\1\uffff\1\6\102\uffff\1\1\1\3\1\5\1\2\1\4";
    static final String DFA21_specialS =
        "\2\uffff\1\73\1\46\1\37\1\74\1\15\1\5\1\35\1\100\1\23\1\50\1\27"+
        "\1\63\1\36\1\7\1\32\1\21\1\44\1\70\1\55\1\0\1\43\1\67\1\34\1\47"+
        "\1\56\1\72\1\6\1\51\1\17\1\61\1\13\1\76\1\10\1\77\1\64\1\16\1\22"+
        "\1\11\1\41\1\52\1\40\1\62\1\45\1\26\1\2\1\101\1\66\1\71\1\65\1\24"+
        "\1\60\1\4\1\42\1\25\1\53\1\54\1\12\1\20\1\75\1\57\1\1\1\14\1\3\1"+
        "\31\1\33\1\30\5\uffff}>";
    static final String[] DFA21_transitionS = {
            "\1\31\1\7\1\10\1\27\1\24\1\46\1\1\1\6\1\21\20\1\1\20\1\45\1"+
            "\1\1\51\1\1\1\25\1\52\1\61\1\17\1\47\1\14\1\50\1\41\1\42\1\35"+
            "\1\53\1\54\1\55\1\56\1\57\1\23\1\22\4\1\1\36\1\26\11\1\1\40"+
            "\1\1\1\60\4\1\1\64\1\1\1\65\1\1\1\66\5\1\1\67\1\1\1\62\3\1\1"+
            "\70\1\1\1\44\1\63\3\1\1\15\2\1\1\2\5\1\1\16\1\1\1\30\1\1\1\12"+
            "\2\1\1\13\1\34\1\76\1\71\1\1\1\3\1\4\1\5\1\101\1\1\1\37\1\43"+
            "\1\11\1\102\1\77\1\103\1\32\1\33\4\1\1\72\10\1\1\73\1\100\1"+
            "\74\1\75",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA21_eot = DFA.unpackEncodedString(DFA21_static.DFA21_eotS);
    static final short[] DFA21_eof = DFA.unpackEncodedString(DFA21_static.DFA21_eofS);
    static final char[] DFA21_min = DFA.unpackEncodedStringToUnsignedChars(DFA21_static.DFA21_minS);
    static final char[] DFA21_max = DFA.unpackEncodedStringToUnsignedChars(DFA21_static.DFA21_maxS);
    static final short[] DFA21_accept = DFA.unpackEncodedString(DFA21_static.DFA21_acceptS);
    static final short[] DFA21_special = DFA.unpackEncodedString(DFA21_static.DFA21_specialS);
    static final short[][] DFA21_transition;

    static {
        int numStates = DFA21_static.DFA21_transitionS.length;
        DFA21_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA21_transition[i] = DFA.unpackEncodedString(DFA21_static.DFA21_transitionS[i]);
        }
    }

    class DFA21 extends DFA {

        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = DFA21_eot;
            this.eof = DFA21_eof;
            this.min = DFA21_min;
            this.max = DFA21_max;
            this.accept = DFA21_accept;
            this.special = DFA21_special;
            this.transition = DFA21_transition;
        }
        public String getDescription() {
            return "()+ loopback of 199:13: ( dissolvePhrase | ratioOrBracketedRatio | noun | numeric | bracketedContent )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA21_21 = input.LA(1);

                         
                        int index21_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_21);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA21_62 = input.LA(1);

                         
                        int index21_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_62);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA21_46 = input.LA(1);

                         
                        int index21_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_46);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA21_64 = input.LA(1);

                         
                        int index21_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_64);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA21_53 = input.LA(1);

                         
                        int index21_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_53);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA21_7 = input.LA(1);

                         
                        int index21_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_7);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA21_28 = input.LA(1);

                         
                        int index21_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_28);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA21_15 = input.LA(1);

                         
                        int index21_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_15);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA21_34 = input.LA(1);

                         
                        int index21_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_34);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA21_39 = input.LA(1);

                         
                        int index21_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_39);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA21_58 = input.LA(1);

                         
                        int index21_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_58);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA21_32 = input.LA(1);

                         
                        int index21_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_32);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA21_63 = input.LA(1);

                         
                        int index21_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_63);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA21_6 = input.LA(1);

                         
                        int index21_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_6);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA21_37 = input.LA(1);

                         
                        int index21_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_37);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA21_30 = input.LA(1);

                         
                        int index21_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_30);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA21_59 = input.LA(1);

                         
                        int index21_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_59);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA21_17 = input.LA(1);

                         
                        int index21_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_17);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA21_38 = input.LA(1);

                         
                        int index21_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_38);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA21_10 = input.LA(1);

                         
                        int index21_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred100_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||synpred100_ChemicalChunker())) ) {s = 68;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 71;}

                        else if ( ((synpred102_ChemicalChunker()||(synpred102_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 69;}

                        else if ( (synpred104_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_10);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA21_51 = input.LA(1);

                         
                        int index21_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_51);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA21_55 = input.LA(1);

                         
                        int index21_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_55);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA21_45 = input.LA(1);

                         
                        int index21_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_45);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA21_12 = input.LA(1);

                         
                        int index21_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_12);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA21_67 = input.LA(1);

                         
                        int index21_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_67);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA21_65 = input.LA(1);

                         
                        int index21_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_65);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA21_16 = input.LA(1);

                         
                        int index21_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_16);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA21_66 = input.LA(1);

                         
                        int index21_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_66);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA21_24 = input.LA(1);

                         
                        int index21_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_24);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA21_8 = input.LA(1);

                         
                        int index21_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_8);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA21_14 = input.LA(1);

                         
                        int index21_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred104_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_14);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA21_4 = input.LA(1);

                         
                        int index21_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_4);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA21_42 = input.LA(1);

                         
                        int index21_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_42);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA21_40 = input.LA(1);

                         
                        int index21_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_40);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA21_54 = input.LA(1);

                         
                        int index21_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_54);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA21_22 = input.LA(1);

                         
                        int index21_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_22);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA21_18 = input.LA(1);

                         
                        int index21_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_18);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA21_44 = input.LA(1);

                         
                        int index21_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_44);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA21_3 = input.LA(1);

                         
                        int index21_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_3);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA21_25 = input.LA(1);

                         
                        int index21_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_25);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA21_11 = input.LA(1);

                         
                        int index21_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 71;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 72;}

                        else if ( (synpred104_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_11);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA21_29 = input.LA(1);

                         
                        int index21_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_29);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA21_41 = input.LA(1);

                         
                        int index21_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_41);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA21_56 = input.LA(1);

                         
                        int index21_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_56);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA21_57 = input.LA(1);

                         
                        int index21_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_57);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA21_20 = input.LA(1);

                         
                        int index21_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_20);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA21_26 = input.LA(1);

                         
                        int index21_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_26);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA21_61 = input.LA(1);

                         
                        int index21_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_61);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA21_52 = input.LA(1);

                         
                        int index21_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_52);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA21_31 = input.LA(1);

                         
                        int index21_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_31);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA21_43 = input.LA(1);

                         
                        int index21_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_43);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA21_13 = input.LA(1);

                         
                        int index21_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_13);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA21_36 = input.LA(1);

                         
                        int index21_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_36);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA21_50 = input.LA(1);

                         
                        int index21_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_50);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA21_48 = input.LA(1);

                         
                        int index21_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_48);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA21_23 = input.LA(1);

                         
                        int index21_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_23);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA21_19 = input.LA(1);

                         
                        int index21_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_19);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA21_49 = input.LA(1);

                         
                        int index21_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_49);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA21_27 = input.LA(1);

                         
                        int index21_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_27);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA21_2 = input.LA(1);

                         
                        int index21_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred104_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_2);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA21_5 = input.LA(1);

                         
                        int index21_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_5);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA21_60 = input.LA(1);

                         
                        int index21_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_60);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA21_33 = input.LA(1);

                         
                        int index21_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_33);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA21_35 = input.LA(1);

                         
                        int index21_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_35);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA21_9 = input.LA(1);

                         
                        int index21_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_9);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA21_47 = input.LA(1);

                         
                        int index21_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_47);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 21, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA22_static {
    static final String DFA22_eotS =
        "\32\uffff";
    static final String DFA22_eofS =
        "\32\uffff";
    static final String DFA22_minS =
        "\1\46\7\uffff\1\0\21\uffff";
    static final String DFA22_maxS =
        "\1\u009e\7\uffff\1\0\21\uffff";
    static final String DFA22_acceptS =
        "\1\uffff\1\1\27\uffff\1\2";
    static final String DFA22_specialS =
        "\10\uffff\1\0\21\uffff}>";
    static final String[] DFA22_transitionS = {
            "\5\1\2\uffff\2\1\20\uffff\1\1\4\uffff\1\1\2\uffff\1\1\1\uffff"+
            "\1\1\11\uffff\2\1\5\uffff\1\1\47\uffff\1\1\2\uffff\1\1\5\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\1\10\2\uffff\1\1\4\uffff\3\1\4\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA22_eot = DFA.unpackEncodedString(DFA22_static.DFA22_eotS);
    static final short[] DFA22_eof = DFA.unpackEncodedString(DFA22_static.DFA22_eofS);
    static final char[] DFA22_min = DFA.unpackEncodedStringToUnsignedChars(DFA22_static.DFA22_minS);
    static final char[] DFA22_max = DFA.unpackEncodedStringToUnsignedChars(DFA22_static.DFA22_maxS);
    static final short[] DFA22_accept = DFA.unpackEncodedString(DFA22_static.DFA22_acceptS);
    static final short[] DFA22_special = DFA.unpackEncodedString(DFA22_static.DFA22_specialS);
    static final short[][] DFA22_transition;

    static {
        int numStates = DFA22_static.DFA22_transitionS.length;
        DFA22_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA22_transition[i] = DFA.unpackEncodedString(DFA22_static.DFA22_transitionS[i]);
        }
    }

    class DFA22 extends DFA {

        public DFA22(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 22;
            this.eot = DFA22_eot;
            this.eof = DFA22_eof;
            this.min = DFA22_min;
            this.max = DFA22_max;
            this.accept = DFA22_accept;
            this.special = DFA22_special;
            this.transition = DFA22_transition;
        }
        public String getDescription() {
            return "202:4: ( dissolveStructure | lrb dissolveStructure rrb )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA22_8 = input.LA(1);

                         
                        int index22_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred105_ChemicalChunker()||(synpred105_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index22_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 22, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA23_static {
    static final String DFA23_eotS =
        "\17\uffff";
    static final String DFA23_eofS =
        "\17\uffff";
    static final String DFA23_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA23_maxS =
        "\1\u009e\6\45\1\uffff\6\0\1\uffff";
    static final String DFA23_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA23_specialS =
        "\10\uffff\1\2\1\3\1\4\1\5\1\1\1\0\1\uffff}>";
    static final String[] DFA23_transitionS = {
            "\1\7\1\5\1\6\2\7\2\uffff\1\4\1\7\20\uffff\1\7\4\uffff\1\7\2"+
            "\uffff\1\7\1\uffff\1\7\11\uffff\2\7\5\uffff\1\7\47\uffff\1\7"+
            "\2\uffff\1\7\5\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7"+
            "\4\uffff\1\1\1\2\1\3\4\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA23_eot = DFA.unpackEncodedString(DFA23_static.DFA23_eotS);
    static final short[] DFA23_eof = DFA.unpackEncodedString(DFA23_static.DFA23_eofS);
    static final char[] DFA23_min = DFA.unpackEncodedStringToUnsignedChars(DFA23_static.DFA23_minS);
    static final char[] DFA23_max = DFA.unpackEncodedStringToUnsignedChars(DFA23_static.DFA23_maxS);
    static final short[] DFA23_accept = DFA.unpackEncodedString(DFA23_static.DFA23_acceptS);
    static final short[] DFA23_special = DFA.unpackEncodedString(DFA23_static.DFA23_specialS);
    static final short[][] DFA23_transition;

    static {
        int numStates = DFA23_static.DFA23_transitionS.length;
        DFA23_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA23_transition[i] = DFA.unpackEncodedString(DFA23_static.DFA23_transitionS[i]);
        }
    }

    class DFA23 extends DFA {

        public DFA23(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 23;
            this.eot = DFA23_eot;
            this.eof = DFA23_eof;
            this.min = DFA23_min;
            this.max = DFA23_max;
            this.accept = DFA23_accept;
            this.special = DFA23_special;
            this.transition = DFA23_transition;
        }
        public String getDescription() {
            return "205:4: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA23_13 = input.LA(1);

                         
                        int index23_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_13);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA23_12 = input.LA(1);

                         
                        int index23_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_12);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA23_8 = input.LA(1);

                         
                        int index23_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_8);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA23_9 = input.LA(1);

                         
                        int index23_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_9);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA23_10 = input.LA(1);

                         
                        int index23_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_10);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA23_11 = input.LA(1);

                         
                        int index23_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 23, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA25_static {
    static final String DFA25_eotS =
        "\30\uffff";
    static final String DFA25_eofS =
        "\30\uffff";
    static final String DFA25_minS =
        "\1\46\4\0\1\uffff\12\0\10\uffff";
    static final String DFA25_maxS =
        "\1\u0099\4\0\1\uffff\12\0\10\uffff";
    static final String DFA25_acceptS =
        "\5\uffff\1\1\13\uffff\1\2\6\uffff";
    static final String DFA25_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\10\uffff}>";
    static final String[] DFA25_transitionS = {
            "\1\21\1\16\1\17\2\21\2\uffff\1\15\1\11\20\uffff\1\10\4\uffff"+
            "\1\21\2\uffff\1\7\1\uffff\1\3\11\uffff\1\21\1\5\5\uffff\1\21"+
            "\47\uffff\1\4\2\uffff\1\5\5\uffff\1\6\1\uffff\1\21\1\uffff\1"+
            "\1\2\uffff\1\2\4\uffff\1\12\1\13\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA25_eot = DFA.unpackEncodedString(DFA25_static.DFA25_eotS);
    static final short[] DFA25_eof = DFA.unpackEncodedString(DFA25_static.DFA25_eofS);
    static final char[] DFA25_min = DFA.unpackEncodedStringToUnsignedChars(DFA25_static.DFA25_minS);
    static final char[] DFA25_max = DFA.unpackEncodedStringToUnsignedChars(DFA25_static.DFA25_maxS);
    static final short[] DFA25_accept = DFA.unpackEncodedString(DFA25_static.DFA25_acceptS);
    static final short[] DFA25_special = DFA.unpackEncodedString(DFA25_static.DFA25_specialS);
    static final short[][] DFA25_transition;

    static {
        int numStates = DFA25_static.DFA25_transitionS.length;
        DFA25_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA25_transition[i] = DFA.unpackEncodedString(DFA25_static.DFA25_transitionS[i]);
        }
    }

    class DFA25 extends DFA {

        public DFA25(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 25;
            this.eot = DFA25_eot;
            this.eof = DFA25_eof;
            this.min = DFA25_min;
            this.max = DFA25_max;
            this.accept = DFA25_accept;
            this.special = DFA25_special;
            this.transition = DFA25_transition;
        }
        public String getDescription() {
            return "205:32: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA25_1 = input.LA(1);

                         
                        int index25_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA25_2 = input.LA(1);

                         
                        int index25_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA25_3 = input.LA(1);

                         
                        int index25_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA25_4 = input.LA(1);

                         
                        int index25_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA25_6 = input.LA(1);

                         
                        int index25_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_6);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA25_7 = input.LA(1);

                         
                        int index25_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_7);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA25_8 = input.LA(1);

                         
                        int index25_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_8);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA25_9 = input.LA(1);

                         
                        int index25_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_9);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA25_10 = input.LA(1);

                         
                        int index25_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_10);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA25_11 = input.LA(1);

                         
                        int index25_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_11);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA25_12 = input.LA(1);

                         
                        int index25_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_12);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA25_13 = input.LA(1);

                         
                        int index25_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_13);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA25_14 = input.LA(1);

                         
                        int index25_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_14);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA25_15 = input.LA(1);

                         
                        int index25_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 25, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA27_static {
    static final String DFA27_eotS =
        "\u0092\uffff";
    static final String DFA27_eofS =
        "\1\3\u0091\uffff";
    static final String DFA27_minS =
        "\1\46\2\0\u008f\uffff";
    static final String DFA27_maxS =
        "\1\u00b4\2\0\u008f\uffff";
    static final String DFA27_acceptS =
        "\3\uffff\1\2\u008d\uffff\1\1";
    static final String DFA27_specialS =
        "\1\uffff\1\0\1\1\u008f\uffff}>";
    static final String[] DFA27_transitionS = {
            "\137\3\1\2\13\3\1\1\43\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA27_eot = DFA.unpackEncodedString(DFA27_static.DFA27_eotS);
    static final short[] DFA27_eof = DFA.unpackEncodedString(DFA27_static.DFA27_eofS);
    static final char[] DFA27_min = DFA.unpackEncodedStringToUnsignedChars(DFA27_static.DFA27_minS);
    static final char[] DFA27_max = DFA.unpackEncodedStringToUnsignedChars(DFA27_static.DFA27_maxS);
    static final short[] DFA27_accept = DFA.unpackEncodedString(DFA27_static.DFA27_acceptS);
    static final short[] DFA27_special = DFA.unpackEncodedString(DFA27_static.DFA27_specialS);
    static final short[][] DFA27_transition;

    static {
        int numStates = DFA27_static.DFA27_transitionS.length;
        DFA27_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA27_transition[i] = DFA.unpackEncodedString(DFA27_static.DFA27_transitionS[i]);
        }
    }

    class DFA27 extends DFA {

        public DFA27(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 27;
            this.eot = DFA27_eot;
            this.eof = DFA27_eof;
            this.min = DFA27_min;
            this.max = DFA27_max;
            this.accept = DFA27_accept;
            this.special = DFA27_special;
            this.transition = DFA27_transition;
        }
        public String getDescription() {
            return "()* loopback of 205:71: ( conjunction molecule )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA27_1 = input.LA(1);

                         
                        int index27_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index27_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA27_2 = input.LA(1);

                         
                        int index27_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index27_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 27, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA29_static {
    static final String DFA29_eotS =
        "\17\uffff";
    static final String DFA29_eofS =
        "\17\uffff";
    static final String DFA29_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA29_maxS =
        "\1\u009e\6\45\1\uffff\6\0\1\uffff";
    static final String DFA29_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA29_specialS =
        "\10\uffff\1\4\1\2\1\5\1\3\1\0\1\1\1\uffff}>";
    static final String[] DFA29_transitionS = {
            "\1\7\1\5\1\6\2\7\2\uffff\1\4\1\7\20\uffff\1\7\4\uffff\1\7\2"+
            "\uffff\1\7\1\uffff\1\7\11\uffff\2\7\5\uffff\1\7\47\uffff\1\7"+
            "\2\uffff\1\7\5\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7"+
            "\4\uffff\1\1\1\2\1\3\4\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA29_eot = DFA.unpackEncodedString(DFA29_static.DFA29_eotS);
    static final short[] DFA29_eof = DFA.unpackEncodedString(DFA29_static.DFA29_eofS);
    static final char[] DFA29_min = DFA.unpackEncodedStringToUnsignedChars(DFA29_static.DFA29_minS);
    static final char[] DFA29_max = DFA.unpackEncodedStringToUnsignedChars(DFA29_static.DFA29_maxS);
    static final short[] DFA29_accept = DFA.unpackEncodedString(DFA29_static.DFA29_acceptS);
    static final short[] DFA29_special = DFA.unpackEncodedString(DFA29_static.DFA29_specialS);
    static final short[][] DFA29_transition;

    static {
        int numStates = DFA29_static.DFA29_transitionS.length;
        DFA29_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA29_transition[i] = DFA.unpackEncodedString(DFA29_static.DFA29_transitionS[i]);
        }
    }

    class DFA29 extends DFA {

        public DFA29(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = DFA29_eot;
            this.eof = DFA29_eof;
            this.min = DFA29_min;
            this.max = DFA29_max;
            this.accept = DFA29_accept;
            this.special = DFA29_special;
            this.transition = DFA29_transition;
        }
        public String getDescription() {
            return "208:16: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA29_12 = input.LA(1);

                         
                        int index29_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_12);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA29_13 = input.LA(1);

                         
                        int index29_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_13);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA29_9 = input.LA(1);

                         
                        int index29_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA29_11 = input.LA(1);

                         
                        int index29_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_11);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA29_8 = input.LA(1);

                         
                        int index29_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_8);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA29_10 = input.LA(1);

                         
                        int index29_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 29, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA31_static {
    static final String DFA31_eotS =
        "\30\uffff";
    static final String DFA31_eofS =
        "\30\uffff";
    static final String DFA31_minS =
        "\1\46\4\0\1\uffff\12\0\10\uffff";
    static final String DFA31_maxS =
        "\1\u0099\4\0\1\uffff\12\0\10\uffff";
    static final String DFA31_acceptS =
        "\5\uffff\1\1\13\uffff\1\2\6\uffff";
    static final String DFA31_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\10\uffff}>";
    static final String[] DFA31_transitionS = {
            "\1\21\1\16\1\17\2\21\2\uffff\1\15\1\11\20\uffff\1\10\4\uffff"+
            "\1\21\2\uffff\1\7\1\uffff\1\3\11\uffff\1\21\1\5\5\uffff\1\21"+
            "\47\uffff\1\4\2\uffff\1\5\5\uffff\1\6\1\uffff\1\21\1\uffff\1"+
            "\1\2\uffff\1\2\4\uffff\1\12\1\13\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA31_eot = DFA.unpackEncodedString(DFA31_static.DFA31_eotS);
    static final short[] DFA31_eof = DFA.unpackEncodedString(DFA31_static.DFA31_eofS);
    static final char[] DFA31_min = DFA.unpackEncodedStringToUnsignedChars(DFA31_static.DFA31_minS);
    static final char[] DFA31_max = DFA.unpackEncodedStringToUnsignedChars(DFA31_static.DFA31_maxS);
    static final short[] DFA31_accept = DFA.unpackEncodedString(DFA31_static.DFA31_acceptS);
    static final short[] DFA31_special = DFA.unpackEncodedString(DFA31_static.DFA31_specialS);
    static final short[][] DFA31_transition;

    static {
        int numStates = DFA31_static.DFA31_transitionS.length;
        DFA31_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA31_transition[i] = DFA.unpackEncodedString(DFA31_static.DFA31_transitionS[i]);
        }
    }

    class DFA31 extends DFA {

        public DFA31(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 31;
            this.eot = DFA31_eot;
            this.eof = DFA31_eof;
            this.min = DFA31_min;
            this.max = DFA31_max;
            this.accept = DFA31_accept;
            this.special = DFA31_special;
            this.transition = DFA31_transition;
        }
        public String getDescription() {
            return "208:26: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA31_1 = input.LA(1);

                         
                        int index31_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA31_2 = input.LA(1);

                         
                        int index31_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA31_3 = input.LA(1);

                         
                        int index31_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA31_4 = input.LA(1);

                         
                        int index31_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA31_6 = input.LA(1);

                         
                        int index31_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_6);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA31_7 = input.LA(1);

                         
                        int index31_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_7);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA31_8 = input.LA(1);

                         
                        int index31_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_8);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA31_9 = input.LA(1);

                         
                        int index31_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_9);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA31_10 = input.LA(1);

                         
                        int index31_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_10);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA31_11 = input.LA(1);

                         
                        int index31_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_11);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA31_12 = input.LA(1);

                         
                        int index31_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_12);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA31_13 = input.LA(1);

                         
                        int index31_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_13);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA31_14 = input.LA(1);

                         
                        int index31_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_14);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA31_15 = input.LA(1);

                         
                        int index31_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 31, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA45_static {
    static final String DFA45_eotS =
        "\67\uffff";
    static final String DFA45_eofS =
        "\1\1\66\uffff";
    static final String DFA45_minS =
        "\1\46\1\uffff\64\0\1\uffff";
    static final String DFA45_maxS =
        "\1\u00b4\1\uffff\64\0\1\uffff";
    static final String DFA45_acceptS =
        "\1\uffff\1\2\64\uffff\1\1";
    static final String DFA45_specialS =
        "\2\uffff\1\42\1\4\1\47\1\61\1\60\1\0\1\7\1\34\1\12\1\57\1\30\1"+
        "\50\1\35\1\37\1\41\1\44\1\53\1\25\1\63\1\16\1\46\1\36\1\5\1\23\1"+
        "\21\1\43\1\10\1\3\1\51\1\33\1\22\1\11\1\62\1\24\1\52\1\40\1\56\1"+
        "\20\1\31\1\2\1\15\1\55\1\6\1\26\1\1\1\14\1\54\1\17\1\45\1\27\1\13"+
        "\1\32\1\uffff}>";
    static final String[] DFA45_transitionS = {
            "\1\1\1\12\1\13\4\1\1\11\47\1\1\25\1\65\1\26\1\31\2\1\1\33\1"+
            "\32\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\1\1\43\1\1\1\44\1\30"+
            "\1\45\1\46\1\1\1\47\1\1\1\50\1\1\1\51\1\52\1\27\1\53\1\54\1"+
            "\1\1\55\1\1\1\56\1\57\1\60\1\1\1\61\1\15\1\1\1\62\1\63\1\64"+
            "\1\1\1\14\23\1\1\6\1\7\1\10\1\1\1\16\10\1\1\2\1\3\1\5\1\4\3"+
            "\1\1\17\1\22\1\21\1\24\1\20\1\23\4\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA45_eot = DFA.unpackEncodedString(DFA45_static.DFA45_eotS);
    static final short[] DFA45_eof = DFA.unpackEncodedString(DFA45_static.DFA45_eofS);
    static final char[] DFA45_min = DFA.unpackEncodedStringToUnsignedChars(DFA45_static.DFA45_minS);
    static final char[] DFA45_max = DFA.unpackEncodedStringToUnsignedChars(DFA45_static.DFA45_maxS);
    static final short[] DFA45_accept = DFA.unpackEncodedString(DFA45_static.DFA45_acceptS);
    static final short[] DFA45_special = DFA.unpackEncodedString(DFA45_static.DFA45_specialS);
    static final short[][] DFA45_transition;

    static {
        int numStates = DFA45_static.DFA45_transitionS.length;
        DFA45_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA45_transition[i] = DFA.unpackEncodedString(DFA45_static.DFA45_transitionS[i]);
        }
    }

    class DFA45 extends DFA {

        public DFA45(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 45;
            this.eot = DFA45_eot;
            this.eof = DFA45_eof;
            this.min = DFA45_min;
            this.max = DFA45_max;
            this.accept = DFA45_accept;
            this.special = DFA45_special;
            this.transition = DFA45_transition;
        }
        public String getDescription() {
            return "()+ loopback of 212:48: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA45_7 = input.LA(1);

                         
                        int index45_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_7);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA45_46 = input.LA(1);

                         
                        int index45_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_46);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA45_41 = input.LA(1);

                         
                        int index45_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_41);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA45_29 = input.LA(1);

                         
                        int index45_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_29);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA45_3 = input.LA(1);

                         
                        int index45_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_3);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA45_24 = input.LA(1);

                         
                        int index45_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_24);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA45_44 = input.LA(1);

                         
                        int index45_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_44);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA45_8 = input.LA(1);

                         
                        int index45_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA45_28 = input.LA(1);

                         
                        int index45_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_28);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA45_33 = input.LA(1);

                         
                        int index45_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_33);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA45_10 = input.LA(1);

                         
                        int index45_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_10);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA45_52 = input.LA(1);

                         
                        int index45_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_52);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA45_47 = input.LA(1);

                         
                        int index45_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_47);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA45_42 = input.LA(1);

                         
                        int index45_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_42);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA45_21 = input.LA(1);

                         
                        int index45_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_21);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA45_49 = input.LA(1);

                         
                        int index45_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_49);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA45_39 = input.LA(1);

                         
                        int index45_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_39);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA45_26 = input.LA(1);

                         
                        int index45_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_26);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA45_32 = input.LA(1);

                         
                        int index45_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_32);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA45_25 = input.LA(1);

                         
                        int index45_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_25);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA45_35 = input.LA(1);

                         
                        int index45_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_35);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA45_19 = input.LA(1);

                         
                        int index45_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_19);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA45_45 = input.LA(1);

                         
                        int index45_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_45);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA45_51 = input.LA(1);

                         
                        int index45_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_51);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA45_12 = input.LA(1);

                         
                        int index45_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_12);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA45_40 = input.LA(1);

                         
                        int index45_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_40);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA45_53 = input.LA(1);

                         
                        int index45_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_53);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA45_31 = input.LA(1);

                         
                        int index45_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_31);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA45_9 = input.LA(1);

                         
                        int index45_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_9);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA45_14 = input.LA(1);

                         
                        int index45_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_14);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA45_23 = input.LA(1);

                         
                        int index45_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_23);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA45_15 = input.LA(1);

                         
                        int index45_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_15);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA45_37 = input.LA(1);

                         
                        int index45_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_37);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA45_16 = input.LA(1);

                         
                        int index45_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_16);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA45_2 = input.LA(1);

                         
                        int index45_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_2);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA45_27 = input.LA(1);

                         
                        int index45_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_27);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA45_17 = input.LA(1);

                         
                        int index45_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_17);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA45_50 = input.LA(1);

                         
                        int index45_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_50);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA45_22 = input.LA(1);

                         
                        int index45_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_22);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA45_4 = input.LA(1);

                         
                        int index45_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_4);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA45_13 = input.LA(1);

                         
                        int index45_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_13);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA45_30 = input.LA(1);

                         
                        int index45_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_30);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA45_36 = input.LA(1);

                         
                        int index45_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_36);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA45_18 = input.LA(1);

                         
                        int index45_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_18);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA45_48 = input.LA(1);

                         
                        int index45_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_48);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA45_43 = input.LA(1);

                         
                        int index45_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_43);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA45_38 = input.LA(1);

                         
                        int index45_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_38);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA45_11 = input.LA(1);

                         
                        int index45_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_11);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA45_6 = input.LA(1);

                         
                        int index45_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_6);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA45_5 = input.LA(1);

                         
                        int index45_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_5);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA45_34 = input.LA(1);

                         
                        int index45_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_34);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA45_20 = input.LA(1);

                         
                        int index45_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 45, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA40_static {
    static final String DFA40_eotS =
        "\53\uffff";
    static final String DFA40_eofS =
        "\1\1\52\uffff";
    static final String DFA40_minS =
        "\1\46\1\uffff\50\0\1\uffff";
    static final String DFA40_maxS =
        "\1\u00b4\1\uffff\50\0\1\uffff";
    static final String DFA40_acceptS =
        "\1\uffff\1\2\50\uffff\1\1";
    static final String DFA40_specialS =
        "\2\uffff\1\12\1\37\1\34\1\41\1\16\1\17\1\13\1\23\1\36\1\14\1\3"+
        "\1\20\1\6\1\27\1\35\1\10\1\33\1\7\1\22\1\2\1\30\1\44\1\25\1\21\1"+
        "\43\1\45\1\11\1\15\1\47\1\42\1\32\1\40\1\46\1\5\1\26\1\24\1\1\1"+
        "\31\1\4\1\0\1\uffff}>";
    static final String[] DFA40_transitionS = {
            "\57\1\1\11\1\51\1\12\1\15\2\1\1\17\1\16\1\20\1\21\1\22\1\23"+
            "\1\24\1\25\1\26\1\1\1\27\1\1\1\30\1\14\1\31\1\32\1\1\1\33\1"+
            "\1\1\34\1\1\1\35\1\36\1\13\1\37\1\40\1\1\1\41\1\1\1\42\1\43"+
            "\1\44\1\1\1\45\1\2\1\1\1\46\1\47\1\50\51\1\1\3\1\6\1\5\1\10"+
            "\1\4\1\7\4\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA40_eot = DFA.unpackEncodedString(DFA40_static.DFA40_eotS);
    static final short[] DFA40_eof = DFA.unpackEncodedString(DFA40_static.DFA40_eofS);
    static final char[] DFA40_min = DFA.unpackEncodedStringToUnsignedChars(DFA40_static.DFA40_minS);
    static final char[] DFA40_max = DFA.unpackEncodedStringToUnsignedChars(DFA40_static.DFA40_maxS);
    static final short[] DFA40_accept = DFA.unpackEncodedString(DFA40_static.DFA40_acceptS);
    static final short[] DFA40_special = DFA.unpackEncodedString(DFA40_static.DFA40_specialS);
    static final short[][] DFA40_transition;

    static {
        int numStates = DFA40_static.DFA40_transitionS.length;
        DFA40_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA40_transition[i] = DFA.unpackEncodedString(DFA40_static.DFA40_transitionS[i]);
        }
    }

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = DFA40_eot;
            this.eof = DFA40_eof;
            this.min = DFA40_min;
            this.max = DFA40_max;
            this.accept = DFA40_accept;
            this.special = DFA40_special;
            this.transition = DFA40_transition;
        }
        public String getDescription() {
            return "()+ loopback of 212:71: ( verb )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA40_41 = input.LA(1);

                         
                        int index40_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_41);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA40_38 = input.LA(1);

                         
                        int index40_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_38);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA40_21 = input.LA(1);

                         
                        int index40_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_21);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA40_12 = input.LA(1);

                         
                        int index40_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_12);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA40_40 = input.LA(1);

                         
                        int index40_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_40);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA40_35 = input.LA(1);

                         
                        int index40_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_35);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA40_14 = input.LA(1);

                         
                        int index40_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_14);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA40_19 = input.LA(1);

                         
                        int index40_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_19);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA40_17 = input.LA(1);

                         
                        int index40_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_17);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA40_28 = input.LA(1);

                         
                        int index40_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_28);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA40_2 = input.LA(1);

                         
                        int index40_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_2);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA40_8 = input.LA(1);

                         
                        int index40_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_8);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA40_11 = input.LA(1);

                         
                        int index40_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_11);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA40_29 = input.LA(1);

                         
                        int index40_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_29);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA40_6 = input.LA(1);

                         
                        int index40_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_6);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA40_7 = input.LA(1);

                         
                        int index40_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_7);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA40_13 = input.LA(1);

                         
                        int index40_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_13);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA40_25 = input.LA(1);

                         
                        int index40_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_25);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA40_20 = input.LA(1);

                         
                        int index40_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_20);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA40_9 = input.LA(1);

                         
                        int index40_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_9);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA40_37 = input.LA(1);

                         
                        int index40_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_37);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA40_24 = input.LA(1);

                         
                        int index40_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_24);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA40_36 = input.LA(1);

                         
                        int index40_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_36);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA40_15 = input.LA(1);

                         
                        int index40_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_15);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA40_22 = input.LA(1);

                         
                        int index40_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_22);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA40_39 = input.LA(1);

                         
                        int index40_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_39);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA40_32 = input.LA(1);

                         
                        int index40_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_32);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA40_18 = input.LA(1);

                         
                        int index40_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_18);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA40_4 = input.LA(1);

                         
                        int index40_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_4);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA40_16 = input.LA(1);

                         
                        int index40_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_16);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA40_10 = input.LA(1);

                         
                        int index40_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_10);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA40_3 = input.LA(1);

                         
                        int index40_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_3);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA40_33 = input.LA(1);

                         
                        int index40_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_33);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA40_5 = input.LA(1);

                         
                        int index40_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_5);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA40_31 = input.LA(1);

                         
                        int index40_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_31);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA40_26 = input.LA(1);

                         
                        int index40_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_26);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA40_23 = input.LA(1);

                         
                        int index40_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_23);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA40_27 = input.LA(1);

                         
                        int index40_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_27);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA40_34 = input.LA(1);

                         
                        int index40_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_34);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA40_30 = input.LA(1);

                         
                        int index40_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 40, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA42_static {
    static final String DFA42_eotS =
        "\13\uffff";
    static final String DFA42_eofS =
        "\1\1\12\uffff";
    static final String DFA42_minS =
        "\1\46\1\uffff\4\45\4\0\1\uffff";
    static final String DFA42_maxS =
        "\1\u00b4\1\uffff\4\45\4\0\1\uffff";
    static final String DFA42_acceptS =
        "\1\uffff\1\2\10\uffff\1\1";
    static final String DFA42_specialS =
        "\6\uffff\1\3\1\2\1\0\1\1\1\uffff}>";
    static final String[] DFA42_transitionS = {
            "\176\1\1\2\1\3\1\5\1\4\15\1",
            "",
            "\1\6",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA42_eot = DFA.unpackEncodedString(DFA42_static.DFA42_eotS);
    static final short[] DFA42_eof = DFA.unpackEncodedString(DFA42_static.DFA42_eofS);
    static final char[] DFA42_min = DFA.unpackEncodedStringToUnsignedChars(DFA42_static.DFA42_minS);
    static final char[] DFA42_max = DFA.unpackEncodedStringToUnsignedChars(DFA42_static.DFA42_maxS);
    static final short[] DFA42_accept = DFA.unpackEncodedString(DFA42_static.DFA42_acceptS);
    static final short[] DFA42_special = DFA.unpackEncodedString(DFA42_static.DFA42_specialS);
    static final short[][] DFA42_transition;

    static {
        int numStates = DFA42_static.DFA42_transitionS.length;
        DFA42_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA42_transition[i] = DFA.unpackEncodedString(DFA42_static.DFA42_transitionS[i]);
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;
        }
        public String getDescription() {
            return "()* loopback of 212:81: ( adv )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA42_8 = input.LA(1);

                         
                        int index42_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index42_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA42_9 = input.LA(1);

                         
                        int index42_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index42_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA42_7 = input.LA(1);

                         
                        int index42_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index42_7);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA42_6 = input.LA(1);

                         
                        int index42_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index42_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 42, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA43_static {
    static final String DFA43_eotS =
        "\17\uffff";
    static final String DFA43_eofS =
        "\1\7\16\uffff";
    static final String DFA43_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA43_maxS =
        "\1\u00b4\6\45\1\uffff\6\0\1\uffff";
    static final String DFA43_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA43_specialS =
        "\10\uffff\1\2\1\1\1\4\1\5\1\3\1\0\1\uffff}>";
    static final String[] DFA43_transitionS = {
            "\1\7\1\5\1\6\4\7\1\4\151\7\1\1\1\2\1\3\33\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA43_eot = DFA.unpackEncodedString(DFA43_static.DFA43_eotS);
    static final short[] DFA43_eof = DFA.unpackEncodedString(DFA43_static.DFA43_eofS);
    static final char[] DFA43_min = DFA.unpackEncodedStringToUnsignedChars(DFA43_static.DFA43_minS);
    static final char[] DFA43_max = DFA.unpackEncodedStringToUnsignedChars(DFA43_static.DFA43_maxS);
    static final short[] DFA43_accept = DFA.unpackEncodedString(DFA43_static.DFA43_acceptS);
    static final short[] DFA43_special = DFA.unpackEncodedString(DFA43_static.DFA43_specialS);
    static final short[][] DFA43_transition;

    static {
        int numStates = DFA43_static.DFA43_transitionS.length;
        DFA43_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA43_transition[i] = DFA.unpackEncodedString(DFA43_static.DFA43_transitionS[i]);
        }
    }

    class DFA43 extends DFA {

        public DFA43(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 43;
            this.eot = DFA43_eot;
            this.eof = DFA43_eof;
            this.min = DFA43_min;
            this.max = DFA43_max;
            this.accept = DFA43_accept;
            this.special = DFA43_special;
            this.transition = DFA43_transition;
        }
        public String getDescription() {
            return "212:86: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA43_13 = input.LA(1);

                         
                        int index43_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index43_13);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA43_9 = input.LA(1);

                         
                        int index43_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index43_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA43_8 = input.LA(1);

                         
                        int index43_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index43_8);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA43_12 = input.LA(1);

                         
                        int index43_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index43_12);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA43_10 = input.LA(1);

                         
                        int index43_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index43_10);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA43_11 = input.LA(1);

                         
                        int index43_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index43_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 43, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA49_static {
    static final String DFA49_eotS =
        "\u0092\uffff";
    static final String DFA49_eofS =
        "\1\13\u0091\uffff";
    static final String DFA49_minS =
        "\1\46\12\0\1\uffff\2\0\4\uffff\1\0\3\uffff\1\0\27\uffff\1\0\1\uffff"+
        "\1\0\34\uffff\22\0\50\uffff\1\0\12\uffff";
    static final String DFA49_maxS =
        "\1\u00b4\12\0\1\uffff\2\0\4\uffff\1\0\3\uffff\1\0\27\uffff\1\0"+
        "\1\uffff\1\0\34\uffff\22\0\50\uffff\1\0\12\uffff";
    static final String DFA49_acceptS =
        "\13\uffff\1\2\u0085\uffff\1\1";
    static final String DFA49_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\12"+
        "\1\13\4\uffff\1\14\3\uffff\1\15\27\uffff\1\16\1\uffff\1\17\34\uffff"+
        "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
        "\1\35\1\36\1\37\1\40\1\41\50\uffff\1\42\12\uffff}>";
    static final String[] DFA49_transitionS = {
            "\1\13\1\11\1\12\4\13\1\10\1\13\1\120\1\121\1\117\1\125\1\126"+
            "\1\135\1\136\1\122\1\134\1\127\1\131\1\123\1\124\1\133\1\132"+
            "\1\130\1\13\1\56\7\13\1\60\74\13\1\15\1\13\1\u0087\11\13\1\14"+
            "\1\22\1\26\2\13\1\116\1\5\1\6\1\7\12\13\1\1\1\2\1\4\1\3\1\13"+
            "\1\115\13\13",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_static.DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_static.DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_static.DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_static.DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_static.DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_static.DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_static.DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_static.DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "()* loopback of 212:106: ( ( cc )? ( comma )? prepphrase )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA49_1 = input.LA(1);

                         
                        int index49_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA49_2 = input.LA(1);

                         
                        int index49_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA49_3 = input.LA(1);

                         
                        int index49_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA49_4 = input.LA(1);

                         
                        int index49_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA49_5 = input.LA(1);

                         
                        int index49_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA49_6 = input.LA(1);

                         
                        int index49_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA49_7 = input.LA(1);

                         
                        int index49_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA49_8 = input.LA(1);

                         
                        int index49_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA49_9 = input.LA(1);

                         
                        int index49_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA49_10 = input.LA(1);

                         
                        int index49_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA49_12 = input.LA(1);

                         
                        int index49_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_12);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA49_13 = input.LA(1);

                         
                        int index49_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_13);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA49_18 = input.LA(1);

                         
                        int index49_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_18);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA49_22 = input.LA(1);

                         
                        int index49_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_22);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA49_46 = input.LA(1);

                         
                        int index49_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_46);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA49_48 = input.LA(1);

                         
                        int index49_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_48);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA49_77 = input.LA(1);

                         
                        int index49_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_77);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA49_78 = input.LA(1);

                         
                        int index49_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_78);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA49_79 = input.LA(1);

                         
                        int index49_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_79);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA49_80 = input.LA(1);

                         
                        int index49_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_80);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA49_81 = input.LA(1);

                         
                        int index49_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_81);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA49_82 = input.LA(1);

                         
                        int index49_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_82);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA49_83 = input.LA(1);

                         
                        int index49_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_83);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA49_84 = input.LA(1);

                         
                        int index49_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_84);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA49_85 = input.LA(1);

                         
                        int index49_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_85);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA49_86 = input.LA(1);

                         
                        int index49_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_86);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA49_87 = input.LA(1);

                         
                        int index49_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_87);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA49_88 = input.LA(1);

                         
                        int index49_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_88);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA49_89 = input.LA(1);

                         
                        int index49_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_89);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA49_90 = input.LA(1);

                         
                        int index49_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_90);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA49_91 = input.LA(1);

                         
                        int index49_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_91);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA49_92 = input.LA(1);

                         
                        int index49_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_92);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA49_93 = input.LA(1);

                         
                        int index49_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_93);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA49_94 = input.LA(1);

                         
                        int index49_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_94);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA49_135 = input.LA(1);

                         
                        int index49_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_135);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 49, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA50_static {
    static final String DFA50_eotS =
        "\60\uffff";
    static final String DFA50_eofS =
        "\51\uffff\1\52\2\uffff\1\52\3\uffff";
    static final String DFA50_minS =
        "\1\125\11\uffff\1\45\36\uffff\1\46\1\uffff\1\45\1\46\1\45\1\0\1"+
        "\uffff";
    static final String DFA50_maxS =
        "\1\u00b0\11\uffff\1\45\36\uffff\1\u00b4\1\uffff\1\45\1\u00b4\1"+
        "\45\1\0\1\uffff";
    static final String DFA50_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\30\1\31\1\32"+
        "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
        "\1\50\1\51\1\uffff\1\27\4\uffff\1\12";
    static final String DFA50_specialS =
        "\56\uffff\1\0\1\uffff}>";
    static final String[] DFA50_transitionS = {
            "\1\7\1\50\1\10\1\13\2\uffff\1\15\1\14\1\16\1\17\1\20\1\21\1"+
            "\22\1\23\1\24\1\uffff\1\25\1\uffff\1\26\1\12\1\27\1\30\1\uffff"+
            "\1\31\1\uffff\1\32\1\uffff\1\33\1\34\1\11\1\35\1\36\1\uffff"+
            "\1\37\1\uffff\1\40\1\41\1\42\1\uffff\1\43\1\44\1\uffff\1\45"+
            "\1\46\1\47\51\uffff\1\1\1\4\1\3\1\6\1\2\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\51",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\153\52\1\53\43\52",
            "",
            "\1\54",
            "\72\52\1\55\124\52",
            "\1\56",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA50_eot = DFA.unpackEncodedString(DFA50_static.DFA50_eotS);
    static final short[] DFA50_eof = DFA.unpackEncodedString(DFA50_static.DFA50_eofS);
    static final char[] DFA50_min = DFA.unpackEncodedStringToUnsignedChars(DFA50_static.DFA50_minS);
    static final char[] DFA50_max = DFA.unpackEncodedStringToUnsignedChars(DFA50_static.DFA50_maxS);
    static final short[] DFA50_accept = DFA.unpackEncodedString(DFA50_static.DFA50_acceptS);
    static final short[] DFA50_special = DFA.unpackEncodedString(DFA50_static.DFA50_specialS);
    static final short[][] DFA50_transition;

    static {
        int numStates = DFA50_static.DFA50_transitionS.length;
        DFA50_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA50_transition[i] = DFA.unpackEncodedString(DFA50_static.DFA50_transitionS[i]);
        }
    }

    class DFA50 extends DFA {

        public DFA50(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 50;
            this.eot = DFA50_eot;
            this.eof = DFA50_eof;
            this.min = DFA50_min;
            this.max = DFA50_max;
            this.accept = DFA50_accept;
            this.special = DFA50_special;
            this.transition = DFA50_transition;
        }
        public String getDescription() {
            return "213:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA50_46 = input.LA(1);

                         
                        int index50_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_ChemicalChunker()) ) {s = 47;}

                        else if ( (synpred155_ChemicalChunker()) ) {s = 42;}

                         
                        input.seek(index50_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 50, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA52_static {
    static final String DFA52_eotS =
        "\126\uffff";
    static final String DFA52_eofS =
        "\126\uffff";
    static final String DFA52_minS =
        "\1\46\2\uffff\20\0\1\uffff\3\0\1\uffff\5\0\1\uffff\2\0\66\uffff";
    static final String DFA52_maxS =
        "\1\u00b4\2\uffff\20\0\1\uffff\3\0\1\uffff\5\0\1\uffff\2\0\66\uffff";
    static final String DFA52_acceptS =
        "\1\uffff\1\1\1\2\20\uffff\1\6\11\uffff\1\7\2\uffff\1\11\1\13\1"+
        "\14\1\16\1\22\1\24\1\27\1\31\1\33\1\34\1\36\1\37\1\40\1\41\1\42"+
        "\1\43\1\44\1\45\1\46\1\51\1\52\1\53\1\54\1\55\1\57\1\60\1\61\5\uffff"+
        "\1\62\1\63\1\64\1\3\1\5\1\25\1\4\1\20\1\30\1\56\1\50\1\26\1\10\1"+
        "\35\1\15\1\12\1\17\1\21\1\23\1\47\1\65\1\32";
    static final String DFA52_specialS =
        "\3\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\uffff\1\20\1\21\1\22\1\uffff\1\23\1\24\1\25"+
        "\1\26\1\27\1\uffff\1\30\1\31\66\uffff}>";
    static final String[] DFA52_transitionS = {
            "\1\36\1\20\1\21\1\34\1\31\1\45\1\uffff\1\17\1\13\20\uffff\1"+
            "\12\1\44\1\uffff\1\50\1\uffff\1\32\1\51\1\60\1\11\1\46\1\6\1"+
            "\47\1\37\1\40\1\24\1\52\1\53\1\54\1\55\1\56\1\30\1\22\4\uffff"+
            "\1\25\1\33\11\uffff\1\23\1\uffff\1\57\4\uffff\1\63\1\uffff\1"+
            "\64\1\uffff\1\65\5\uffff\1\66\1\uffff\1\61\3\uffff\1\67\1\uffff"+
            "\1\43\1\62\3\uffff\1\7\2\uffff\1\4\5\uffff\1\10\1\uffff\1\35"+
            "\1\uffff\1\3\2\uffff\1\5\1\23\1\72\1\70\1\uffff\1\14\1\15\1"+
            "\16\1\100\1\uffff\1\26\1\41\1\42\1\101\1\72\1\102\1\1\1\2\4"+
            "\uffff\1\71\10\uffff\4\72",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA52_eot = DFA.unpackEncodedString(DFA52_static.DFA52_eotS);
    static final short[] DFA52_eof = DFA.unpackEncodedString(DFA52_static.DFA52_eofS);
    static final char[] DFA52_min = DFA.unpackEncodedStringToUnsignedChars(DFA52_static.DFA52_minS);
    static final char[] DFA52_max = DFA.unpackEncodedStringToUnsignedChars(DFA52_static.DFA52_maxS);
    static final short[] DFA52_accept = DFA.unpackEncodedString(DFA52_static.DFA52_acceptS);
    static final short[] DFA52_special = DFA.unpackEncodedString(DFA52_static.DFA52_specialS);
    static final short[][] DFA52_transition;

    static {
        int numStates = DFA52_static.DFA52_transitionS.length;
        DFA52_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA52_transition[i] = DFA.unpackEncodedString(DFA52_static.DFA52_transitionS[i]);
        }
    }

    class DFA52 extends DFA {

        public DFA52(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 52;
            this.eot = DFA52_eot;
            this.eof = DFA52_eof;
            this.min = DFA52_min;
            this.max = DFA52_max;
            this.accept = DFA52_accept;
            this.special = DFA52_special;
            this.transition = DFA52_transition;
        }
        public String getDescription() {
            return "220:1: nounStructure : ( prp | prp_poss | citation | cycles | molecule | apparatus | unnamedmolecule | nnstate | procedureNode | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | oscaronts | nntime | nnatmosphere | tmunicode | quantity | nnchementity | nntemp | nnph | nnflash | nngeneral | nnamount | nneq | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | squareBracketedReference | nndry | nnextract | nnfilter | nnprecipitate | nnremove | nnyield | fw | sym | clause | ls | nnps | pos | oscarase );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA52_3 = input.LA(1);

                         
                        int index52_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 19;}

                        else if ( (((synpred180_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||synpred180_ChemicalChunker())) ) {s = 29;}

                        else if ( (synpred194_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index52_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA52_4 = input.LA(1);

                         
                        int index52_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 19;}

                         
                        input.seek(index52_4);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA52_5 = input.LA(1);

                         
                        int index52_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 29;}

                        else if ( (synpred189_ChemicalChunker()) ) {s = 71;}

                        else if ( (synpred194_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index52_5);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA52_6 = input.LA(1);

                         
                        int index52_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 29;}

                        else if ( (synpred194_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred197_ChemicalChunker()) ) {s = 72;}

                         
                        input.seek(index52_6);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA52_7 = input.LA(1);

                         
                        int index52_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 29;}

                        else if ( (synpred194_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred219_ChemicalChunker()) ) {s = 73;}

                         
                        input.seek(index52_7);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA52_8 = input.LA(1);

                         
                        int index52_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 29;}

                        else if ( (synpred213_ChemicalChunker()) ) {s = 74;}

                         
                        input.seek(index52_8);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA52_9 = input.LA(1);

                         
                        int index52_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 29;}

                        else if ( (synpred195_ChemicalChunker()) ) {s = 75;}

                         
                        input.seek(index52_9);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA52_10 = input.LA(1);

                         
                        int index52_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 29;}

                        else if ( (synpred181_ChemicalChunker()) ) {s = 76;}

                         
                        input.seek(index52_10);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA52_11 = input.LA(1);

                         
                        int index52_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 29;}

                         
                        input.seek(index52_11);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA52_12 = input.LA(1);

                         
                        int index52_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 29;}

                         
                        input.seek(index52_12);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA52_13 = input.LA(1);

                         
                        int index52_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 29;}

                         
                        input.seek(index52_13);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA52_14 = input.LA(1);

                         
                        int index52_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 29;}

                         
                        input.seek(index52_14);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA52_15 = input.LA(1);

                         
                        int index52_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 29;}

                         
                        input.seek(index52_15);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA52_16 = input.LA(1);

                         
                        int index52_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 29;}

                         
                        input.seek(index52_16);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA52_17 = input.LA(1);

                         
                        int index52_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 29;}

                         
                        input.seek(index52_17);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA52_18 = input.LA(1);

                         
                        int index52_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 19;}

                         
                        input.seek(index52_18);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA52_20 = input.LA(1);

                         
                        int index52_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred202_ChemicalChunker()) ) {s = 77;}

                         
                        input.seek(index52_20);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA52_21 = input.LA(1);

                         
                        int index52_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred186_ChemicalChunker()) ) {s = 78;}

                         
                        input.seek(index52_21);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA52_22 = input.LA(1);

                         
                        int index52_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred182_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred183_ChemicalChunker()) ) {s = 79;}

                         
                        input.seek(index52_22);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA52_24 = input.LA(1);

                         
                        int index52_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_ChemicalChunker()) ) {s = 29;}

                        else if ( (synpred182_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred188_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index52_24);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA52_25 = input.LA(1);

                         
                        int index52_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_ChemicalChunker()) ) {s = 29;}

                        else if ( (synpred190_ChemicalChunker()) ) {s = 81;}

                         
                        input.seek(index52_25);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA52_26 = input.LA(1);

                         
                        int index52_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_ChemicalChunker()) ) {s = 29;}

                        else if ( (synpred192_ChemicalChunker()) ) {s = 82;}

                         
                        input.seek(index52_26);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA52_27 = input.LA(1);

                         
                        int index52_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_ChemicalChunker()) ) {s = 29;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index52_27);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA52_28 = input.LA(1);

                         
                        int index52_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_ChemicalChunker()) ) {s = 29;}

                        else if ( (true) ) {s = 84;}

                         
                        input.seek(index52_28);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA52_30 = input.LA(1);

                         
                        int index52_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_ChemicalChunker()) ) {s = 29;}

                        else if ( (synpred189_ChemicalChunker()) ) {s = 71;}

                         
                        input.seek(index52_30);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA52_31 = input.LA(1);

                         
                        int index52_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 85;}

                         
                        input.seek(index52_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 52, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA54_static {
    static final String DFA54_eotS =
        "\45\uffff";
    static final String DFA54_eofS =
        "\45\uffff";
    static final String DFA54_minS =
        "\1\47\36\0\6\uffff";
    static final String DFA54_maxS =
        "\1\u00a9\36\0\6\uffff";
    static final String DFA54_acceptS =
        "\37\uffff\1\2\1\3\1\1\1\6\1\5\1\4";
    static final String DFA54_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\6\uffff}>";
    static final String[] DFA54_transitionS = {
            "\1\12\1\13\4\uffff\1\11\1\uffff\1\16\1\17\1\15\1\23\1\24\1"+
            "\32\1\33\1\20\1\31\1\25\1\27\1\21\1\22\1\1\1\30\1\26\1\uffff"+
            "\1\37\7\uffff\1\40\111\uffff\1\36\1\35\2\uffff\1\14\1\6\1\7"+
            "\1\10\12\uffff\1\2\1\3\1\5\1\4\1\uffff\1\34",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA54_eot = DFA.unpackEncodedString(DFA54_static.DFA54_eotS);
    static final short[] DFA54_eof = DFA.unpackEncodedString(DFA54_static.DFA54_eofS);
    static final char[] DFA54_min = DFA.unpackEncodedStringToUnsignedChars(DFA54_static.DFA54_minS);
    static final char[] DFA54_max = DFA.unpackEncodedStringToUnsignedChars(DFA54_static.DFA54_maxS);
    static final short[] DFA54_accept = DFA.unpackEncodedString(DFA54_static.DFA54_acceptS);
    static final short[] DFA54_special = DFA.unpackEncodedString(DFA54_static.DFA54_specialS);
    static final short[][] DFA54_transition;

    static {
        int numStates = DFA54_static.DFA54_transitionS.length;
        DFA54_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA54_transition[i] = DFA.unpackEncodedString(DFA54_static.DFA54_transitionS[i]);
        }
    }

    class DFA54 extends DFA {

        public DFA54(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 54;
            this.eot = DFA54_eot;
            this.eof = DFA54_eof;
            this.min = DFA54_min;
            this.max = DFA54_max;
            this.accept = DFA54_accept;
            this.special = DFA54_special;
            this.transition = DFA54_transition;
        }
        public String getDescription() {
            return "225:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA54_1 = input.LA(1);

                         
                        int index54_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA54_2 = input.LA(1);

                         
                        int index54_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA54_3 = input.LA(1);

                         
                        int index54_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA54_4 = input.LA(1);

                         
                        int index54_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA54_5 = input.LA(1);

                         
                        int index54_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA54_6 = input.LA(1);

                         
                        int index54_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA54_7 = input.LA(1);

                         
                        int index54_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA54_8 = input.LA(1);

                         
                        int index54_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA54_9 = input.LA(1);

                         
                        int index54_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA54_10 = input.LA(1);

                         
                        int index54_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA54_11 = input.LA(1);

                         
                        int index54_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA54_12 = input.LA(1);

                         
                        int index54_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA54_13 = input.LA(1);

                         
                        int index54_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index54_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA54_14 = input.LA(1);

                         
                        int index54_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 35;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA54_15 = input.LA(1);

                         
                        int index54_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA54_16 = input.LA(1);

                         
                        int index54_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA54_17 = input.LA(1);

                         
                        int index54_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA54_18 = input.LA(1);

                         
                        int index54_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA54_19 = input.LA(1);

                         
                        int index54_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA54_20 = input.LA(1);

                         
                        int index54_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_20);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA54_21 = input.LA(1);

                         
                        int index54_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_21);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA54_22 = input.LA(1);

                         
                        int index54_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_22);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA54_23 = input.LA(1);

                         
                        int index54_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_23);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA54_24 = input.LA(1);

                         
                        int index54_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_24);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA54_25 = input.LA(1);

                         
                        int index54_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_25);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA54_26 = input.LA(1);

                         
                        int index54_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_26);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA54_27 = input.LA(1);

                         
                        int index54_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_27);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA54_28 = input.LA(1);

                         
                        int index54_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_28);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA54_29 = input.LA(1);

                         
                        int index54_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index54_29);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA54_30 = input.LA(1);

                         
                        int index54_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index54_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 54, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA56_static {
    static final String DFA56_eotS =
        "\17\uffff";
    static final String DFA56_eofS =
        "\17\uffff";
    static final String DFA56_minS =
        "\1\47\1\uffff\6\45\1\uffff\6\0";
    static final String DFA56_maxS =
        "\1\u00a7\1\uffff\6\45\1\uffff\6\0";
    static final String DFA56_acceptS =
        "\1\uffff\1\2\6\uffff\1\1\6\uffff";
    static final String DFA56_specialS =
        "\11\uffff\1\3\1\2\1\0\1\5\1\1\1\4}>";
    static final String[] DFA56_transitionS = {
            "\1\6\1\7\4\uffff\1\5\1\1\20\uffff\1\1\7\uffff\1\1\1\uffff\1"+
            "\1\12\uffff\1\1\55\uffff\1\1\2\uffff\1\1\5\uffff\1\1\3\uffff"+
            "\1\1\2\uffff\1\1\4\uffff\1\2\1\3\1\4\12\uffff\4\10",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_static.DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_static.DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_static.DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_static.DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_static.DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_static.DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_static.DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_static.DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "()* loopback of 231:16: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA56_11 = input.LA(1);

                         
                        int index56_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA56_13 = input.LA(1);

                         
                        int index56_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_13);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA56_10 = input.LA(1);

                         
                        int index56_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_10);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA56_9 = input.LA(1);

                         
                        int index56_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_9);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA56_14 = input.LA(1);

                         
                        int index56_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_14);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA56_12 = input.LA(1);

                         
                        int index56_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 56, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA58_static {
    static final String DFA58_eotS =
        "\27\uffff";
    static final String DFA58_eofS =
        "\27\uffff";
    static final String DFA58_minS =
        "\1\47\1\uffff\12\45\12\0\1\uffff";
    static final String DFA58_maxS =
        "\1\u00a9\1\uffff\12\45\12\0\1\uffff";
    static final String DFA58_acceptS =
        "\1\uffff\1\2\24\uffff\1\1";
    static final String DFA58_specialS =
        "\14\uffff\1\3\1\7\1\10\1\11\1\6\1\2\1\4\1\0\1\5\1\1\1\uffff}>";
    static final String[] DFA58_transitionS = {
            "\1\12\1\13\4\uffff\1\11\1\uffff\20\1\1\uffff\1\1\121\uffff"+
            "\2\1\2\uffff\1\1\1\6\1\7\1\10\12\uffff\1\2\1\3\1\5\1\4\1\uffff"+
            "\1\1",
            "",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA58_eot = DFA.unpackEncodedString(DFA58_static.DFA58_eotS);
    static final short[] DFA58_eof = DFA.unpackEncodedString(DFA58_static.DFA58_eofS);
    static final char[] DFA58_min = DFA.unpackEncodedStringToUnsignedChars(DFA58_static.DFA58_minS);
    static final char[] DFA58_max = DFA.unpackEncodedStringToUnsignedChars(DFA58_static.DFA58_maxS);
    static final short[] DFA58_accept = DFA.unpackEncodedString(DFA58_static.DFA58_acceptS);
    static final short[] DFA58_special = DFA.unpackEncodedString(DFA58_static.DFA58_specialS);
    static final short[][] DFA58_transition;

    static {
        int numStates = DFA58_static.DFA58_transitionS.length;
        DFA58_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA58_transition[i] = DFA.unpackEncodedString(DFA58_static.DFA58_transitionS[i]);
        }
    }

    class DFA58 extends DFA {

        public DFA58(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = DFA58_eot;
            this.eof = DFA58_eof;
            this.min = DFA58_min;
            this.max = DFA58_max;
            this.accept = DFA58_accept;
            this.special = DFA58_special;
            this.transition = DFA58_transition;
        }
        public String getDescription() {
            return "()* loopback of 237:3: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA58_19 = input.LA(1);

                         
                        int index58_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_19);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA58_21 = input.LA(1);

                         
                        int index58_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_21);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA58_17 = input.LA(1);

                         
                        int index58_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA58_12 = input.LA(1);

                         
                        int index58_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_12);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA58_18 = input.LA(1);

                         
                        int index58_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_18);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA58_20 = input.LA(1);

                         
                        int index58_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_20);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA58_16 = input.LA(1);

                         
                        int index58_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_16);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA58_13 = input.LA(1);

                         
                        int index58_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_13);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA58_14 = input.LA(1);

                         
                        int index58_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_14);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA58_15 = input.LA(1);

                         
                        int index58_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 58, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA64_static {
    static final String DFA64_eotS =
        "\27\uffff";
    static final String DFA64_eofS =
        "\27\uffff";
    static final String DFA64_minS =
        "\1\47\12\45\1\uffff\12\0\1\uffff";
    static final String DFA64_maxS =
        "\1\u00a9\12\45\1\uffff\12\0\1\uffff";
    static final String DFA64_acceptS =
        "\13\uffff\1\2\12\uffff\1\1";
    static final String DFA64_specialS =
        "\14\uffff\1\10\1\11\1\5\1\2\1\3\1\0\1\6\1\1\1\4\1\7\1\uffff}>";
    static final String[] DFA64_transitionS = {
            "\1\11\1\12\4\uffff\1\10\1\uffff\20\13\11\uffff\1\13\111\uffff"+
            "\2\13\2\uffff\1\13\1\5\1\6\1\7\12\uffff\1\1\1\2\1\4\1\3\1\uffff"+
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA64_eot = DFA.unpackEncodedString(DFA64_static.DFA64_eotS);
    static final short[] DFA64_eof = DFA.unpackEncodedString(DFA64_static.DFA64_eofS);
    static final char[] DFA64_min = DFA.unpackEncodedStringToUnsignedChars(DFA64_static.DFA64_minS);
    static final char[] DFA64_max = DFA.unpackEncodedStringToUnsignedChars(DFA64_static.DFA64_maxS);
    static final short[] DFA64_accept = DFA.unpackEncodedString(DFA64_static.DFA64_acceptS);
    static final short[] DFA64_special = DFA.unpackEncodedString(DFA64_static.DFA64_specialS);
    static final short[][] DFA64_transition;

    static {
        int numStates = DFA64_static.DFA64_transitionS.length;
        DFA64_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA64_transition[i] = DFA.unpackEncodedString(DFA64_static.DFA64_transitionS[i]);
        }
    }

    class DFA64 extends DFA {

        public DFA64(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 64;
            this.eot = DFA64_eot;
            this.eof = DFA64_eof;
            this.min = DFA64_min;
            this.max = DFA64_max;
            this.accept = DFA64_accept;
            this.special = DFA64_special;
            this.transition = DFA64_transition;
        }
        public String getDescription() {
            return "242:5: ( advAdj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA64_17 = input.LA(1);

                         
                        int index64_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_17);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA64_19 = input.LA(1);

                         
                        int index64_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_19);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA64_15 = input.LA(1);

                         
                        int index64_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_15);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA64_16 = input.LA(1);

                         
                        int index64_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_16);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA64_20 = input.LA(1);

                         
                        int index64_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_20);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA64_14 = input.LA(1);

                         
                        int index64_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_14);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA64_18 = input.LA(1);

                         
                        int index64_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_18);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA64_21 = input.LA(1);

                         
                        int index64_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_21);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA64_12 = input.LA(1);

                         
                        int index64_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_12);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA64_13 = input.LA(1);

                         
                        int index64_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 64, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA76_static {
    static final String DFA76_eotS =
        "\u0092\uffff";
    static final String DFA76_eofS =
        "\1\1\u0091\uffff";
    static final String DFA76_minS =
        "\1\46\4\uffff\6\0\1\uffff\2\0\4\uffff\1\0\1\uffff\15\0\161\uffff";
    static final String DFA76_maxS =
        "\1\u00b4\4\uffff\6\0\1\uffff\2\0\4\uffff\1\0\1\uffff\15\0\161\uffff";
    static final String DFA76_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA76_specialS =
        "\5\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\uffff\1\6\1\7\4\uffff\1\10\1"+
        "\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1"+
        "\24\1\25\161\uffff}>";
    static final String[] DFA76_transitionS = {
            "\1\1\1\11\1\12\4\1\1\10\1\35\20\1\1\34\7\1\1\33\1\1\1\27\3"+
            "\1\1\31\6\1\1\36\4\1\1\32\12\1\1\40\35\1\1\30\2\1\1\15\5\1\1"+
            "\25\3\1\1\24\1\1\1\14\1\22\1\26\3\1\1\5\1\6\1\7\2\1\1\37\30"+
            "\1",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA76_eot = DFA.unpackEncodedString(DFA76_static.DFA76_eotS);
    static final short[] DFA76_eof = DFA.unpackEncodedString(DFA76_static.DFA76_eofS);
    static final char[] DFA76_min = DFA.unpackEncodedStringToUnsignedChars(DFA76_static.DFA76_minS);
    static final char[] DFA76_max = DFA.unpackEncodedStringToUnsignedChars(DFA76_static.DFA76_maxS);
    static final short[] DFA76_accept = DFA.unpackEncodedString(DFA76_static.DFA76_acceptS);
    static final short[] DFA76_special = DFA.unpackEncodedString(DFA76_static.DFA76_specialS);
    static final short[][] DFA76_transition;

    static {
        int numStates = DFA76_static.DFA76_transitionS.length;
        DFA76_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA76_transition[i] = DFA.unpackEncodedString(DFA76_static.DFA76_transitionS[i]);
        }
    }

    class DFA76 extends DFA {

        public DFA76(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 76;
            this.eot = DFA76_eot;
            this.eof = DFA76_eof;
            this.min = DFA76_min;
            this.max = DFA76_max;
            this.accept = DFA76_accept;
            this.special = DFA76_special;
            this.transition = DFA76_transition;
        }
        public String getDescription() {
            return "()* loopback of 263:14: ( ( conjunction )* apparatus )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA76_5 = input.LA(1);

                         
                        int index76_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_5);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA76_6 = input.LA(1);

                         
                        int index76_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_6);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA76_7 = input.LA(1);

                         
                        int index76_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_7);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA76_8 = input.LA(1);

                         
                        int index76_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA76_9 = input.LA(1);

                         
                        int index76_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_9);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA76_10 = input.LA(1);

                         
                        int index76_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_10);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA76_12 = input.LA(1);

                         
                        int index76_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_12);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA76_13 = input.LA(1);

                         
                        int index76_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_13);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA76_18 = input.LA(1);

                         
                        int index76_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_18);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA76_20 = input.LA(1);

                         
                        int index76_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_20);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA76_21 = input.LA(1);

                         
                        int index76_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_21);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA76_22 = input.LA(1);

                         
                        int index76_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_22);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA76_23 = input.LA(1);

                         
                        int index76_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_23);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA76_24 = input.LA(1);

                         
                        int index76_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_24);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA76_25 = input.LA(1);

                         
                        int index76_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_25);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA76_26 = input.LA(1);

                         
                        int index76_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_26);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA76_27 = input.LA(1);

                         
                        int index76_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_27);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA76_28 = input.LA(1);

                         
                        int index76_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_28);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA76_29 = input.LA(1);

                         
                        int index76_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_29);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA76_30 = input.LA(1);

                         
                        int index76_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_30);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA76_31 = input.LA(1);

                         
                        int index76_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_31);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA76_32 = input.LA(1);

                         
                        int index76_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 76, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA75_static {
    static final String DFA75_eotS =
        "\27\uffff";
    static final String DFA75_eofS =
        "\27\uffff";
    static final String DFA75_minS =
        "\1\47\15\uffff\1\0\10\uffff";
    static final String DFA75_maxS =
        "\1\u009c\15\uffff\1\0\10\uffff";
    static final String DFA75_acceptS =
        "\1\uffff\1\2\24\uffff\1\1";
    static final String DFA75_specialS =
        "\16\uffff\1\0\10\uffff}>";
    static final String[] DFA75_transitionS = {
            "\2\1\4\uffff\2\1\20\uffff\1\1\7\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\6\uffff\1\1\4\uffff\1\1\12\uffff\1\1\35\uffff\1\1\2\uffff"+
            "\1\16\5\uffff\1\1\3\uffff\1\1\1\uffff\1\26\2\1\3\uffff\3\1\2"+
            "\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA75_eot = DFA.unpackEncodedString(DFA75_static.DFA75_eotS);
    static final short[] DFA75_eof = DFA.unpackEncodedString(DFA75_static.DFA75_eofS);
    static final char[] DFA75_min = DFA.unpackEncodedStringToUnsignedChars(DFA75_static.DFA75_minS);
    static final char[] DFA75_max = DFA.unpackEncodedStringToUnsignedChars(DFA75_static.DFA75_maxS);
    static final short[] DFA75_accept = DFA.unpackEncodedString(DFA75_static.DFA75_acceptS);
    static final short[] DFA75_special = DFA.unpackEncodedString(DFA75_static.DFA75_specialS);
    static final short[][] DFA75_transition;

    static {
        int numStates = DFA75_static.DFA75_transitionS.length;
        DFA75_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA75_transition[i] = DFA.unpackEncodedString(DFA75_static.DFA75_transitionS[i]);
        }
    }

    class DFA75 extends DFA {

        public DFA75(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 75;
            this.eot = DFA75_eot;
            this.eof = DFA75_eof;
            this.min = DFA75_min;
            this.max = DFA75_max;
            this.accept = DFA75_accept;
            this.special = DFA75_special;
            this.transition = DFA75_transition;
        }
        public String getDescription() {
            return "()* loopback of 263:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA75_14 = input.LA(1);

                         
                        int index75_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 75, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA82_static {
    static final String DFA82_eotS =
        "\35\uffff";
    static final String DFA82_eofS =
        "\1\1\34\uffff";
    static final String DFA82_minS =
        "\1\47\1\uffff\23\0\10\uffff";
    static final String DFA82_maxS =
        "\1\u009c\1\uffff\23\0\10\uffff";
    static final String DFA82_acceptS =
        "\1\uffff\1\11\23\uffff\1\1\1\5\1\2\1\3\1\4\1\6\1\7\1\10";
    static final String DFA82_specialS =
        "\2\uffff\1\12\1\6\1\13\1\11\1\4\1\1\1\22\1\0\1\17\1\16\1\10\1\15"+
        "\1\5\1\2\1\7\1\21\1\20\1\14\1\3\10\uffff}>";
    static final String[] DFA82_transitionS = {
            "\1\12\1\13\4\uffff\1\11\1\22\20\uffff\1\21\7\uffff\1\20\1\uffff"+
            "\1\4\3\uffff\1\14\6\uffff\1\23\4\uffff\1\15\12\uffff\1\1\35"+
            "\uffff\1\5\2\uffff\1\16\5\uffff\1\17\3\uffff\1\2\2\uffff\1\3"+
            "\4\uffff\1\6\1\7\1\10\2\uffff\1\24",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA82_eot = DFA.unpackEncodedString(DFA82_static.DFA82_eotS);
    static final short[] DFA82_eof = DFA.unpackEncodedString(DFA82_static.DFA82_eofS);
    static final char[] DFA82_min = DFA.unpackEncodedStringToUnsignedChars(DFA82_static.DFA82_minS);
    static final char[] DFA82_max = DFA.unpackEncodedStringToUnsignedChars(DFA82_static.DFA82_maxS);
    static final short[] DFA82_accept = DFA.unpackEncodedString(DFA82_static.DFA82_acceptS);
    static final short[] DFA82_special = DFA.unpackEncodedString(DFA82_static.DFA82_specialS);
    static final short[][] DFA82_transition;

    static {
        int numStates = DFA82_static.DFA82_transitionS.length;
        DFA82_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA82_transition[i] = DFA.unpackEncodedString(DFA82_static.DFA82_transitionS[i]);
        }
    }

    class DFA82 extends DFA {

        public DFA82(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = DFA82_eot;
            this.eof = DFA82_eof;
            this.min = DFA82_min;
            this.max = DFA82_max;
            this.accept = DFA82_accept;
            this.special = DFA82_special;
            this.transition = DFA82_transition;
        }
        public String getDescription() {
            return "()+ loopback of 270:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA82_9 = input.LA(1);

                         
                        int index82_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA82_7 = input.LA(1);

                         
                        int index82_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_7);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA82_15 = input.LA(1);

                         
                        int index82_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_15);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA82_20 = input.LA(1);

                         
                        int index82_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred266_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_20);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA82_6 = input.LA(1);

                         
                        int index82_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_6);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA82_14 = input.LA(1);

                         
                        int index82_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_14);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA82_3 = input.LA(1);

                         
                        int index82_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_3);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA82_16 = input.LA(1);

                         
                        int index82_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_16);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA82_12 = input.LA(1);

                         
                        int index82_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_12);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA82_5 = input.LA(1);

                         
                        int index82_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_5);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA82_2 = input.LA(1);

                         
                        int index82_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_2);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA82_4 = input.LA(1);

                         
                        int index82_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_4);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA82_19 = input.LA(1);

                         
                        int index82_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_19);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA82_13 = input.LA(1);

                         
                        int index82_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 25;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_13);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA82_11 = input.LA(1);

                         
                        int index82_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_11);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA82_10 = input.LA(1);

                         
                        int index82_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_10);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA82_18 = input.LA(1);

                         
                        int index82_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_18);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA82_17 = input.LA(1);

                         
                        int index82_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred265_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_17);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA82_8 = input.LA(1);

                         
                        int index82_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 82, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA85_static {
    static final String DFA85_eotS =
        "\17\uffff";
    static final String DFA85_eofS =
        "\1\7\16\uffff";
    static final String DFA85_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA85_maxS =
        "\1\u00b4\6\45\1\uffff\6\0\1\uffff";
    static final String DFA85_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA85_specialS =
        "\10\uffff\1\1\1\0\1\2\1\5\1\4\1\3\1\uffff}>";
    static final String[] DFA85_transitionS = {
            "\1\7\1\5\1\6\4\7\1\4\151\7\1\1\1\2\1\3\33\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA85_eot = DFA.unpackEncodedString(DFA85_static.DFA85_eotS);
    static final short[] DFA85_eof = DFA.unpackEncodedString(DFA85_static.DFA85_eofS);
    static final char[] DFA85_min = DFA.unpackEncodedStringToUnsignedChars(DFA85_static.DFA85_minS);
    static final char[] DFA85_max = DFA.unpackEncodedStringToUnsignedChars(DFA85_static.DFA85_maxS);
    static final short[] DFA85_accept = DFA.unpackEncodedString(DFA85_static.DFA85_acceptS);
    static final short[] DFA85_special = DFA.unpackEncodedString(DFA85_static.DFA85_specialS);
    static final short[][] DFA85_transition;

    static {
        int numStates = DFA85_static.DFA85_transitionS.length;
        DFA85_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA85_transition[i] = DFA.unpackEncodedString(DFA85_static.DFA85_transitionS[i]);
        }
    }

    class DFA85 extends DFA {

        public DFA85(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 85;
            this.eot = DFA85_eot;
            this.eof = DFA85_eof;
            this.min = DFA85_min;
            this.max = DFA85_max;
            this.accept = DFA85_accept;
            this.special = DFA85_special;
            this.transition = DFA85_transition;
        }
        public String getDescription() {
            return "274:55: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA85_9 = input.LA(1);

                         
                        int index85_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index85_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA85_8 = input.LA(1);

                         
                        int index85_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index85_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA85_10 = input.LA(1);

                         
                        int index85_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index85_10);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA85_13 = input.LA(1);

                         
                        int index85_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index85_13);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA85_12 = input.LA(1);

                         
                        int index85_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index85_12);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA85_11 = input.LA(1);

                         
                        int index85_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index85_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 85, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA87_static {
    static final String DFA87_eotS =
        "\u0093\uffff";
    static final String DFA87_eofS =
        "\1\11\u0092\uffff";
    static final String DFA87_minS =
        "\1\46\10\0\u008a\uffff";
    static final String DFA87_maxS =
        "\1\u00b4\10\0\u008a\uffff";
    static final String DFA87_acceptS =
        "\11\uffff\1\3\u0087\uffff\1\1\1\2";
    static final String DFA87_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\u008a\uffff}>";
    static final String[] DFA87_transitionS = {
            "\1\7\40\11\1\10\1\11\1\3\70\11\1\4\10\11\1\5\1\11\1\6\1\11"+
            "\1\1\2\11\1\2\42\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_static.DFA87_eotS);
    static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_static.DFA87_eofS);
    static final char[] DFA87_min = DFA.unpackEncodedStringToUnsignedChars(DFA87_static.DFA87_minS);
    static final char[] DFA87_max = DFA.unpackEncodedStringToUnsignedChars(DFA87_static.DFA87_maxS);
    static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_static.DFA87_acceptS);
    static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_static.DFA87_specialS);
    static final short[][] DFA87_transition;

    static {
        int numStates = DFA87_static.DFA87_transitionS.length;
        DFA87_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA87_transition[i] = DFA.unpackEncodedString(DFA87_static.DFA87_transitionS[i]);
        }
    }

    class DFA87 extends DFA {

        public DFA87(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = DFA87_eot;
            this.eof = DFA87_eof;
            this.min = DFA87_min;
            this.max = DFA87_max;
            this.accept = DFA87_accept;
            this.special = DFA87_special;
            this.transition = DFA87_transition;
        }
        public String getDescription() {
            return "274:69: ( numericReferenceOrQuantity | nnchementity )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA87_1 = input.LA(1);

                         
                        int index87_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred272_ChemicalChunker()||(synpred272_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index87_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA87_2 = input.LA(1);

                         
                        int index87_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index87_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA87_3 = input.LA(1);

                         
                        int index87_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index87_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA87_4 = input.LA(1);

                         
                        int index87_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index87_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA87_5 = input.LA(1);

                         
                        int index87_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index87_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA87_6 = input.LA(1);

                         
                        int index87_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index87_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA87_7 = input.LA(1);

                         
                        int index87_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index87_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA87_8 = input.LA(1);

                         
                        int index87_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index87_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 87, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA88_static {
    static final String DFA88_eotS =
        "\u0092\uffff";
    static final String DFA88_eofS =
        "\1\1\u0091\uffff";
    static final String DFA88_minS =
        "\1\46\23\uffff\4\0\172\uffff";
    static final String DFA88_maxS =
        "\1\u00b4\23\uffff\4\0\172\uffff";
    static final String DFA88_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA88_specialS =
        "\24\uffff\1\0\1\1\1\2\1\3\172\uffff}>";
    static final String[] DFA88_transitionS = {
            "\43\1\1\26\70\1\1\27\14\1\1\24\2\1\1\25\42\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA88_eot = DFA.unpackEncodedString(DFA88_static.DFA88_eotS);
    static final short[] DFA88_eof = DFA.unpackEncodedString(DFA88_static.DFA88_eofS);
    static final char[] DFA88_min = DFA.unpackEncodedStringToUnsignedChars(DFA88_static.DFA88_minS);
    static final char[] DFA88_max = DFA.unpackEncodedStringToUnsignedChars(DFA88_static.DFA88_maxS);
    static final short[] DFA88_accept = DFA.unpackEncodedString(DFA88_static.DFA88_acceptS);
    static final short[] DFA88_special = DFA.unpackEncodedString(DFA88_static.DFA88_specialS);
    static final short[][] DFA88_transition;

    static {
        int numStates = DFA88_static.DFA88_transitionS.length;
        DFA88_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA88_transition[i] = DFA.unpackEncodedString(DFA88_static.DFA88_transitionS[i]);
        }
    }

    class DFA88 extends DFA {

        public DFA88(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 88;
            this.eot = DFA88_eot;
            this.eof = DFA88_eof;
            this.min = DFA88_min;
            this.max = DFA88_max;
            this.accept = DFA88_accept;
            this.special = DFA88_special;
            this.transition = DFA88_transition;
        }
        public String getDescription() {
            return "()* loopback of 274:115: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA88_20 = input.LA(1);

                         
                        int index88_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index88_20);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA88_21 = input.LA(1);

                         
                        int index88_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index88_21);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA88_22 = input.LA(1);

                         
                        int index88_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index88_22);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA88_23 = input.LA(1);

                         
                        int index88_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index88_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 88, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA89_static {
    static final String DFA89_eotS =
        "\u0092\uffff";
    static final String DFA89_eofS =
        "\1\5\u0091\uffff";
    static final String DFA89_minS =
        "\1\46\4\0\u008d\uffff";
    static final String DFA89_maxS =
        "\1\u00b4\4\0\u008d\uffff";
    static final String DFA89_acceptS =
        "\5\uffff\1\2\u008b\uffff\1\1";
    static final String DFA89_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008d\uffff}>";
    static final String[] DFA89_transitionS = {
            "\22\5\1\2\2\5\1\1\101\5\1\4\3\5\1\3\63\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA89_eot = DFA.unpackEncodedString(DFA89_static.DFA89_eotS);
    static final short[] DFA89_eof = DFA.unpackEncodedString(DFA89_static.DFA89_eofS);
    static final char[] DFA89_min = DFA.unpackEncodedStringToUnsignedChars(DFA89_static.DFA89_minS);
    static final char[] DFA89_max = DFA.unpackEncodedStringToUnsignedChars(DFA89_static.DFA89_maxS);
    static final short[] DFA89_accept = DFA.unpackEncodedString(DFA89_static.DFA89_acceptS);
    static final short[] DFA89_special = DFA.unpackEncodedString(DFA89_static.DFA89_specialS);
    static final short[][] DFA89_transition;

    static {
        int numStates = DFA89_static.DFA89_transitionS.length;
        DFA89_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA89_transition[i] = DFA.unpackEncodedString(DFA89_static.DFA89_transitionS[i]);
        }
    }

    class DFA89 extends DFA {

        public DFA89(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 89;
            this.eot = DFA89_eot;
            this.eof = DFA89_eof;
            this.min = DFA89_min;
            this.max = DFA89_max;
            this.accept = DFA89_accept;
            this.special = DFA89_special;
            this.transition = DFA89_transition;
        }
        public String getDescription() {
            return "274:125: ( fromProcedure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA89_1 = input.LA(1);

                         
                        int index89_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index89_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA89_2 = input.LA(1);

                         
                        int index89_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred275_ChemicalChunker()&&(precededByProduct(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index89_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA89_3 = input.LA(1);

                         
                        int index89_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred275_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index89_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA89_4 = input.LA(1);

                         
                        int index89_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred275_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index89_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 89, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA91_static {
    static final String DFA91_eotS =
        "\13\uffff";
    static final String DFA91_eofS =
        "\1\4\5\uffff\1\4\4\uffff";
    static final String DFA91_minS =
        "\1\46\3\45\1\uffff\1\0\1\46\1\0\1\uffff\1\45\1\0";
    static final String DFA91_maxS =
        "\1\u00b4\3\45\1\uffff\1\0\1\u00b4\1\0\1\uffff\1\45\1\0";
    static final String DFA91_acceptS =
        "\4\uffff\1\2\3\uffff\1\1\2\uffff";
    static final String DFA91_specialS =
        "\5\uffff\1\0\1\uffff\1\2\2\uffff\1\1}>";
    static final String[] DFA91_transitionS = {
            "\136\4\1\2\1\4\1\3\1\4\1\1\54\4",
            "\1\5",
            "\1\6",
            "\1\7",
            "",
            "\1\uffff",
            "\56\4\1\11\140\4",
            "\1\uffff",
            "",
            "\1\12",
            "\1\uffff"
    };
    }

    static final short[] DFA91_eot = DFA.unpackEncodedString(DFA91_static.DFA91_eotS);
    static final short[] DFA91_eof = DFA.unpackEncodedString(DFA91_static.DFA91_eofS);
    static final char[] DFA91_min = DFA.unpackEncodedStringToUnsignedChars(DFA91_static.DFA91_minS);
    static final char[] DFA91_max = DFA.unpackEncodedStringToUnsignedChars(DFA91_static.DFA91_maxS);
    static final short[] DFA91_accept = DFA.unpackEncodedString(DFA91_static.DFA91_acceptS);
    static final short[] DFA91_special = DFA.unpackEncodedString(DFA91_static.DFA91_specialS);
    static final short[][] DFA91_transition;

    static {
        int numStates = DFA91_static.DFA91_transitionS.length;
        DFA91_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA91_transition[i] = DFA.unpackEncodedString(DFA91_static.DFA91_transitionS[i]);
        }
    }

    class DFA91 extends DFA {

        public DFA91(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 91;
            this.eot = DFA91_eot;
            this.eof = DFA91_eof;
            this.min = DFA91_min;
            this.max = DFA91_max;
            this.accept = DFA91_accept;
            this.special = DFA91_special;
            this.transition = DFA91_transition;
        }
        public String getDescription() {
            return "276:35: ( afterOscarCompoundStructure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA91_5 = input.LA(1);

                         
                        int index91_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index91_5);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA91_10 = input.LA(1);

                         
                        int index91_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index91_10);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA91_7 = input.LA(1);

                         
                        int index91_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index91_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 91, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA101_static {
    static final String DFA101_eotS =
        "\22\uffff";
    static final String DFA101_eofS =
        "\22\uffff";
    static final String DFA101_minS =
        "\1\47\6\0\13\uffff";
    static final String DFA101_maxS =
        "\1\u0099\6\0\13\uffff";
    static final String DFA101_acceptS =
        "\7\uffff\1\2\1\uffff\1\3\7\uffff\1\1";
    static final String DFA101_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\13\uffff}>";
    static final String[] DFA101_transitionS = {
            "\2\11\4\uffff\2\11\20\uffff\1\7\7\uffff\1\7\1\uffff\1\3\12"+
            "\uffff\1\11\55\uffff\1\4\2\uffff\1\5\5\uffff\1\6\3\uffff\1\1"+
            "\2\uffff\1\2\4\uffff\3\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA101_eot = DFA.unpackEncodedString(DFA101_static.DFA101_eotS);
    static final short[] DFA101_eof = DFA.unpackEncodedString(DFA101_static.DFA101_eofS);
    static final char[] DFA101_min = DFA.unpackEncodedStringToUnsignedChars(DFA101_static.DFA101_minS);
    static final char[] DFA101_max = DFA.unpackEncodedStringToUnsignedChars(DFA101_static.DFA101_maxS);
    static final short[] DFA101_accept = DFA.unpackEncodedString(DFA101_static.DFA101_acceptS);
    static final short[] DFA101_special = DFA.unpackEncodedString(DFA101_static.DFA101_specialS);
    static final short[][] DFA101_transition;

    static {
        int numStates = DFA101_static.DFA101_transitionS.length;
        DFA101_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA101_transition[i] = DFA.unpackEncodedString(DFA101_static.DFA101_transitionS[i]);
        }
    }

    class DFA101 extends DFA {

        public DFA101(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 101;
            this.eot = DFA101_eot;
            this.eof = DFA101_eof;
            this.min = DFA101_min;
            this.max = DFA101_max;
            this.accept = DFA101_accept;
            this.special = DFA101_special;
            this.transition = DFA101_transition;
        }
        public String getDescription() {
            return "283:18: ( moleculeamount3 | moleculeamount1 | moleculeamount2 )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA101_1 = input.LA(1);

                         
                        int index101_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index101_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA101_2 = input.LA(1);

                         
                        int index101_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index101_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA101_3 = input.LA(1);

                         
                        int index101_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index101_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA101_4 = input.LA(1);

                         
                        int index101_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index101_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA101_5 = input.LA(1);

                         
                        int index101_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index101_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA101_6 = input.LA(1);

                         
                        int index101_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred293_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index101_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 101, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA102_static {
    static final String DFA102_eotS =
        "\43\uffff";
    static final String DFA102_eofS =
        "\1\2\2\uffff\1\2\5\uffff\4\2\11\uffff\3\2\1\uffff\3\2\3\uffff\3"+
        "\2";
    static final String DFA102_minS =
        "\1\46\1\45\1\uffff\1\46\5\45\4\46\1\0\7\45\1\uffff\3\46\1\0\3\46"+
        "\3\45\3\46";
    static final String DFA102_maxS =
        "\1\u00b4\1\45\1\uffff\1\u00b4\5\45\4\u00b4\1\0\7\45\1\uffff\3\u00b4"+
        "\1\0\3\u00b4\3\45\3\u00b4";
    static final String DFA102_acceptS =
        "\2\uffff\1\2\22\uffff\1\1\15\uffff";
    static final String DFA102_specialS =
        "\15\uffff\1\0\13\uffff\1\1\11\uffff}>";
    static final String[] DFA102_transitionS = {
            "\11\2\1\1\u0085\2",
            "\1\3",
            "",
            "\1\2\1\7\5\2\1\6\21\2\1\10\123\2\1\4\3\2\1\5\35\2",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\2\1\20\5\2\1\17\21\2\1\21\127\2\1\16\35\2",
            "\1\2\1\24\5\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\5\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\5\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\uffff",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "",
            "\1\2\1\37\5\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\5\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\5\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\uffff",
            "\1\2\1\24\5\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\5\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\5\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\40",
            "\1\41",
            "\1\42",
            "\1\2\1\37\5\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\5\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\5\2\1\36\21\2\1\21\127\2\1\35\35\2"
    };
    }

    static final short[] DFA102_eot = DFA.unpackEncodedString(DFA102_static.DFA102_eotS);
    static final short[] DFA102_eof = DFA.unpackEncodedString(DFA102_static.DFA102_eofS);
    static final char[] DFA102_min = DFA.unpackEncodedStringToUnsignedChars(DFA102_static.DFA102_minS);
    static final char[] DFA102_max = DFA.unpackEncodedStringToUnsignedChars(DFA102_static.DFA102_maxS);
    static final short[] DFA102_accept = DFA.unpackEncodedString(DFA102_static.DFA102_acceptS);
    static final short[] DFA102_special = DFA.unpackEncodedString(DFA102_static.DFA102_specialS);
    static final short[][] DFA102_transition;

    static {
        int numStates = DFA102_static.DFA102_transitionS.length;
        DFA102_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA102_transition[i] = DFA.unpackEncodedString(DFA102_static.DFA102_transitionS[i]);
        }
    }

    class DFA102 extends DFA {

        public DFA102(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 102;
            this.eot = DFA102_eot;
            this.eof = DFA102_eof;
            this.min = DFA102_min;
            this.max = DFA102_max;
            this.accept = DFA102_accept;
            this.special = DFA102_special;
            this.transition = DFA102_transition;
        }
        public String getDescription() {
            return "283:71: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA102_13 = input.LA(1);

                         
                        int index102_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_13);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA102_25 = input.LA(1);

                         
                        int index102_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 102, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA105_static {
    static final String DFA105_eotS =
        "\15\uffff";
    static final String DFA105_eofS =
        "\15\uffff";
    static final String DFA105_minS =
        "\1\47\2\uffff\1\0\11\uffff";
    static final String DFA105_maxS =
        "\1\u0099\2\uffff\1\0\11\uffff";
    static final String DFA105_acceptS =
        "\1\uffff\1\1\3\uffff\1\2\7\uffff";
    static final String DFA105_specialS =
        "\3\uffff\1\0\11\uffff}>";
    static final String[] DFA105_transitionS = {
            "\2\5\4\uffff\2\5\45\uffff\1\5\60\uffff\1\1\5\uffff\1\1\3\uffff"+
            "\1\3\2\uffff\1\1\4\uffff\3\5",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA105_eot = DFA.unpackEncodedString(DFA105_static.DFA105_eotS);
    static final short[] DFA105_eof = DFA.unpackEncodedString(DFA105_static.DFA105_eofS);
    static final char[] DFA105_min = DFA.unpackEncodedStringToUnsignedChars(DFA105_static.DFA105_minS);
    static final char[] DFA105_max = DFA.unpackEncodedStringToUnsignedChars(DFA105_static.DFA105_maxS);
    static final short[] DFA105_accept = DFA.unpackEncodedString(DFA105_static.DFA105_acceptS);
    static final short[] DFA105_special = DFA.unpackEncodedString(DFA105_static.DFA105_specialS);
    static final short[][] DFA105_transition;

    static {
        int numStates = DFA105_static.DFA105_transitionS.length;
        DFA105_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA105_transition[i] = DFA.unpackEncodedString(DFA105_static.DFA105_transitionS[i]);
        }
    }

    class DFA105 extends DFA {

        public DFA105(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 105;
            this.eot = DFA105_eot;
            this.eof = DFA105_eof;
            this.min = DFA105_min;
            this.max = DFA105_max;
            this.accept = DFA105_accept;
            this.special = DFA105_special;
            this.transition = DFA105_transition;
        }
        public String getDescription() {
            return "286:78: ( bracketedContentInMol )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA105_3 = input.LA(1);

                         
                        int index105_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred299_ChemicalChunker()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index105_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 105, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA111_static {
    static final String DFA111_eotS =
        "\u0092\uffff";
    static final String DFA111_eofS =
        "\1\2\u0091\uffff";
    static final String DFA111_minS =
        "\1\46\1\0\14\uffff\6\0\3\uffff\2\0\171\uffff";
    static final String DFA111_maxS =
        "\1\u00b4\1\0\14\uffff\6\0\3\uffff\2\0\171\uffff";
    static final String DFA111_acceptS =
        "\2\uffff\1\2\u008e\uffff\1\1";
    static final String DFA111_specialS =
        "\1\uffff\1\0\14\uffff\1\1\1\2\1\3\1\4\1\5\1\6\3\uffff\1\7\1\10"+
        "\171\uffff}>";
    static final String[] DFA111_transitionS = {
            "\1\2\1\22\1\23\4\2\1\21\1\27\45\2\1\30\72\2\1\1\7\2\1\16\1"+
            "\17\1\20\33\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA111_eot = DFA.unpackEncodedString(DFA111_static.DFA111_eotS);
    static final short[] DFA111_eof = DFA.unpackEncodedString(DFA111_static.DFA111_eofS);
    static final char[] DFA111_min = DFA.unpackEncodedStringToUnsignedChars(DFA111_static.DFA111_minS);
    static final char[] DFA111_max = DFA.unpackEncodedStringToUnsignedChars(DFA111_static.DFA111_maxS);
    static final short[] DFA111_accept = DFA.unpackEncodedString(DFA111_static.DFA111_acceptS);
    static final short[] DFA111_special = DFA.unpackEncodedString(DFA111_static.DFA111_specialS);
    static final short[][] DFA111_transition;

    static {
        int numStates = DFA111_static.DFA111_transitionS.length;
        DFA111_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA111_transition[i] = DFA.unpackEncodedString(DFA111_static.DFA111_transitionS[i]);
        }
    }

    class DFA111 extends DFA {

        public DFA111(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 111;
            this.eot = DFA111_eot;
            this.eof = DFA111_eof;
            this.min = DFA111_min;
            this.max = DFA111_max;
            this.accept = DFA111_accept;
            this.special = DFA111_special;
            this.transition = DFA111_transition;
        }
        public String getDescription() {
            return "()+ loopback of 289:100: ( oscarCompound )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA111_1 = input.LA(1);

                         
                        int index111_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA111_14 = input.LA(1);

                         
                        int index111_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_14);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA111_15 = input.LA(1);

                         
                        int index111_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_15);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA111_16 = input.LA(1);

                         
                        int index111_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_16);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA111_17 = input.LA(1);

                         
                        int index111_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_17);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA111_18 = input.LA(1);

                         
                        int index111_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_18);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA111_19 = input.LA(1);

                         
                        int index111_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_19);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA111_23 = input.LA(1);

                         
                        int index111_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_23);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA111_24 = input.LA(1);

                         
                        int index111_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 111, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA112_static {
    static final String DFA112_eotS =
        "\17\uffff";
    static final String DFA112_eofS =
        "\17\uffff";
    static final String DFA112_minS =
        "\1\47\10\uffff\2\0\4\uffff";
    static final String DFA112_maxS =
        "\1\u0099\10\uffff\2\0\4\uffff";
    static final String DFA112_acceptS =
        "\1\uffff\1\3\11\uffff\1\1\1\uffff\1\2\1\uffff";
    static final String DFA112_specialS =
        "\11\uffff\1\0\1\1\4\uffff}>";
    static final String[] DFA112_transitionS = {
            "\2\1\4\uffff\2\1\32\uffff\1\13\12\uffff\1\1\55\uffff\1\13\2"+
            "\uffff\1\15\5\uffff\1\15\3\uffff\1\11\2\uffff\1\12\4\uffff\3"+
            "\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA112_eot = DFA.unpackEncodedString(DFA112_static.DFA112_eotS);
    static final short[] DFA112_eof = DFA.unpackEncodedString(DFA112_static.DFA112_eofS);
    static final char[] DFA112_min = DFA.unpackEncodedStringToUnsignedChars(DFA112_static.DFA112_minS);
    static final char[] DFA112_max = DFA.unpackEncodedStringToUnsignedChars(DFA112_static.DFA112_maxS);
    static final short[] DFA112_accept = DFA.unpackEncodedString(DFA112_static.DFA112_acceptS);
    static final short[] DFA112_special = DFA.unpackEncodedString(DFA112_static.DFA112_specialS);
    static final short[][] DFA112_transition;

    static {
        int numStates = DFA112_static.DFA112_transitionS.length;
        DFA112_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA112_transition[i] = DFA.unpackEncodedString(DFA112_static.DFA112_transitionS[i]);
        }
    }

    class DFA112 extends DFA {

        public DFA112(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 112;
            this.eot = DFA112_eot;
            this.eof = DFA112_eof;
            this.min = DFA112_min;
            this.max = DFA112_max;
            this.accept = DFA112_accept;
            this.special = DFA112_special;
            this.transition = DFA112_transition;
        }
        public String getDescription() {
            return "()* loopback of 292:3: ( quantity | bracketedContentInMol )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA112_9 = input.LA(1);

                         
                        int index112_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred309_ChemicalChunker()) ) {s = 11;}

                        else if ( (synpred310_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA112_10 = input.LA(1);

                         
                        int index112_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred309_ChemicalChunker()) ) {s = 11;}

                        else if ( (synpred310_ChemicalChunker()) ) {s = 13;}

                         
                        input.seek(index112_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 112, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA113_static {
    static final String DFA113_eotS =
        "\14\uffff";
    static final String DFA113_eofS =
        "\1\2\13\uffff";
    static final String DFA113_minS =
        "\1\46\1\0\1\uffff\10\0\1\uffff";
    static final String DFA113_maxS =
        "\1\u00b4\1\0\1\uffff\10\0\1\uffff";
    static final String DFA113_acceptS =
        "\2\uffff\1\2\10\uffff\1\1";
    static final String DFA113_specialS =
        "\1\uffff\1\2\1\uffff\1\7\1\6\1\5\1\3\1\10\1\4\1\1\1\0\1\uffff}>";
    static final String[] DFA113_transitionS = {
            "\1\2\1\7\1\10\4\2\1\6\1\11\45\2\1\12\72\2\1\1\7\2\1\3\1\4\1"+
            "\5\33\2",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA113_eot = DFA.unpackEncodedString(DFA113_static.DFA113_eotS);
    static final short[] DFA113_eof = DFA.unpackEncodedString(DFA113_static.DFA113_eofS);
    static final char[] DFA113_min = DFA.unpackEncodedStringToUnsignedChars(DFA113_static.DFA113_minS);
    static final char[] DFA113_max = DFA.unpackEncodedStringToUnsignedChars(DFA113_static.DFA113_maxS);
    static final short[] DFA113_accept = DFA.unpackEncodedString(DFA113_static.DFA113_acceptS);
    static final short[] DFA113_special = DFA.unpackEncodedString(DFA113_static.DFA113_specialS);
    static final short[][] DFA113_transition;

    static {
        int numStates = DFA113_static.DFA113_transitionS.length;
        DFA113_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA113_transition[i] = DFA.unpackEncodedString(DFA113_static.DFA113_transitionS[i]);
        }
    }

    class DFA113 extends DFA {

        public DFA113(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 113;
            this.eot = DFA113_eot;
            this.eof = DFA113_eof;
            this.min = DFA113_min;
            this.max = DFA113_max;
            this.accept = DFA113_accept;
            this.special = DFA113_special;
            this.transition = DFA113_transition;
        }
        public String getDescription() {
            return "()+ loopback of 292:37: ( oscarCompound )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA113_10 = input.LA(1);

                         
                        int index113_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index113_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA113_9 = input.LA(1);

                         
                        int index113_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index113_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA113_1 = input.LA(1);

                         
                        int index113_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index113_1);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA113_6 = input.LA(1);

                         
                        int index113_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index113_6);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA113_8 = input.LA(1);

                         
                        int index113_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index113_8);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA113_5 = input.LA(1);

                         
                        int index113_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index113_5);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA113_4 = input.LA(1);

                         
                        int index113_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index113_4);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA113_3 = input.LA(1);

                         
                        int index113_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index113_3);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA113_7 = input.LA(1);

                         
                        int index113_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index113_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 113, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA115_static {
    static final String DFA115_eotS =
        "\u0095\uffff";
    static final String DFA115_eofS =
        "\1\1\u0094\uffff";
    static final String DFA115_minS =
        "\1\46\3\uffff\1\0\13\uffff\5\0\u0080\uffff";
    static final String DFA115_maxS =
        "\1\u00b4\3\uffff\1\0\13\uffff\5\0\u0080\uffff";
    static final String DFA115_acceptS =
        "\1\uffff\1\5\u008f\uffff\1\1\1\3\1\4\1\2";
    static final String DFA115_specialS =
        "\4\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\1\5\u0080\uffff}>";
    static final String[] DFA115_transitionS = {
            "\43\1\1\22\70\1\1\23\2\1\1\4\5\1\1\24\3\1\1\20\2\1\1\21\42"+
            "\1",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA115_eot = DFA.unpackEncodedString(DFA115_static.DFA115_eotS);
    static final short[] DFA115_eof = DFA.unpackEncodedString(DFA115_static.DFA115_eofS);
    static final char[] DFA115_min = DFA.unpackEncodedStringToUnsignedChars(DFA115_static.DFA115_minS);
    static final char[] DFA115_max = DFA.unpackEncodedStringToUnsignedChars(DFA115_static.DFA115_maxS);
    static final short[] DFA115_accept = DFA.unpackEncodedString(DFA115_static.DFA115_acceptS);
    static final short[] DFA115_special = DFA.unpackEncodedString(DFA115_static.DFA115_specialS);
    static final short[][] DFA115_transition;

    static {
        int numStates = DFA115_static.DFA115_transitionS.length;
        DFA115_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA115_transition[i] = DFA.unpackEncodedString(DFA115_static.DFA115_transitionS[i]);
        }
    }

    class DFA115 extends DFA {

        public DFA115(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 115;
            this.eot = DFA115_eot;
            this.eof = DFA115_eof;
            this.min = DFA115_min;
            this.max = DFA115_max;
            this.accept = DFA115_accept;
            this.special = DFA115_special;
            this.transition = DFA115_transition;
        }
        public String getDescription() {
            return "()* loopback of 294:34: ( citation | quantity | comma ( quantity1Node | citationStructure ) | bracketedContentInMol )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA115_4 = input.LA(1);

                         
                        int index115_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred315_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred316_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index115_4);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA115_16 = input.LA(1);

                         
                        int index115_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred313_ChemicalChunker()) ) {s = 148;}

                        else if ( (synpred316_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index115_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA115_17 = input.LA(1);

                         
                        int index115_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_ChemicalChunker()) ) {s = 148;}

                        else if ( (synpred316_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index115_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA115_18 = input.LA(1);

                         
                        int index115_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_ChemicalChunker()) ) {s = 148;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index115_18);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA115_19 = input.LA(1);

                         
                        int index115_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_ChemicalChunker()) ) {s = 148;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index115_19);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA115_20 = input.LA(1);

                         
                        int index115_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred316_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index115_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 115, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA116_static {
    static final String DFA116_eotS =
        "\43\uffff";
    static final String DFA116_eofS =
        "\1\2\2\uffff\1\2\5\uffff\4\2\11\uffff\3\2\1\uffff\3\2\3\uffff\3"+
        "\2";
    static final String DFA116_minS =
        "\1\46\1\45\1\uffff\1\46\5\45\4\46\1\0\7\45\1\uffff\3\46\1\0\3\46"+
        "\3\45\3\46";
    static final String DFA116_maxS =
        "\1\u00b4\1\45\1\uffff\1\u00b4\5\45\4\u00b4\1\0\7\45\1\uffff\3\u00b4"+
        "\1\0\3\u00b4\3\45\3\u00b4";
    static final String DFA116_acceptS =
        "\2\uffff\1\2\22\uffff\1\1\15\uffff";
    static final String DFA116_specialS =
        "\15\uffff\1\0\13\uffff\1\1\11\uffff}>";
    static final String[] DFA116_transitionS = {
            "\11\2\1\1\u0085\2",
            "\1\3",
            "",
            "\1\2\1\7\5\2\1\6\21\2\1\10\123\2\1\4\3\2\1\5\35\2",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\2\1\20\5\2\1\17\21\2\1\21\127\2\1\16\35\2",
            "\1\2\1\24\5\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\5\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\5\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\uffff",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "",
            "\1\2\1\37\5\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\5\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\5\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\uffff",
            "\1\2\1\24\5\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\5\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\5\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\40",
            "\1\41",
            "\1\42",
            "\1\2\1\37\5\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\5\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\5\2\1\36\21\2\1\21\127\2\1\35\35\2"
    };
    }

    static final short[] DFA116_eot = DFA.unpackEncodedString(DFA116_static.DFA116_eotS);
    static final short[] DFA116_eof = DFA.unpackEncodedString(DFA116_static.DFA116_eofS);
    static final char[] DFA116_min = DFA.unpackEncodedStringToUnsignedChars(DFA116_static.DFA116_minS);
    static final char[] DFA116_max = DFA.unpackEncodedStringToUnsignedChars(DFA116_static.DFA116_maxS);
    static final short[] DFA116_accept = DFA.unpackEncodedString(DFA116_static.DFA116_acceptS);
    static final short[] DFA116_special = DFA.unpackEncodedString(DFA116_static.DFA116_specialS);
    static final short[][] DFA116_transition;

    static {
        int numStates = DFA116_static.DFA116_transitionS.length;
        DFA116_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA116_transition[i] = DFA.unpackEncodedString(DFA116_static.DFA116_transitionS[i]);
        }
    }

    class DFA116 extends DFA {

        public DFA116(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 116;
            this.eot = DFA116_eot;
            this.eof = DFA116_eof;
            this.min = DFA116_min;
            this.max = DFA116_max;
            this.accept = DFA116_accept;
            this.special = DFA116_special;
            this.transition = DFA116_transition;
        }
        public String getDescription() {
            return "300:68: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA116_13 = input.LA(1);

                         
                        int index116_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index116_13);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA116_25 = input.LA(1);

                         
                        int index116_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index116_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 116, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA118_static {
    static final String DFA118_eotS =
        "\56\uffff";
    static final String DFA118_eofS =
        "\56\uffff";
    static final String DFA118_minS =
        "\1\46\2\45\1\uffff\4\45\1\uffff\1\45\1\uffff\1\46\1\54\4\47\1\46"+
        "\6\45\1\54\1\46\1\0\1\46\2\0\5\45\1\54\2\u0090\2\u008c\3\45\3\0";
    static final String DFA118_maxS =
        "\1\u0099\2\45\1\uffff\4\45\1\uffff\1\45\1\uffff\1\u0092\1\u009c"+
        "\3\u0099\1\u0097\1\u0092\6\45\1\u009c\1\u0092\1\0\1\u0092\2\0\5"+
        "\45\1\u009c\2\u0090\2\u008c\3\45\3\0";
    static final String DFA118_acceptS =
        "\3\uffff\1\1\4\uffff\1\2\1\uffff\1\3\43\uffff";
    static final String DFA118_specialS =
        "\32\uffff\1\0\1\uffff\1\3\1\4\15\uffff\1\1\1\5\1\2}>";
    static final String[] DFA118_transitionS = {
            "\1\12\1\6\1\12\2\10\2\uffff\1\5\1\7\20\uffff\1\10\4\uffff\1"+
            "\10\2\uffff\1\11\1\uffff\1\3\11\uffff\1\10\6\uffff\1\10\47\uffff"+
            "\1\3\10\uffff\1\12\1\uffff\1\12\1\uffff\1\1\2\uffff\1\2\4\uffff"+
            "\1\4\2\12",
            "\1\13",
            "\1\14",
            "",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "",
            "\1\21",
            "",
            "\1\12\42\uffff\1\3\70\uffff\1\3\12\uffff\1\12\4\uffff\1\22",
            "\1\3\2\uffff\1\10\21\uffff\3\3\1\uffff\2\3\2\uffff\1\10\70"+
            "\uffff\1\10\7\uffff\1\3\2\uffff\1\12\1\uffff\1\10\2\uffff\1"+
            "\10\11\uffff\1\3",
            "\1\6\1\12\2\10\2\uffff\1\5\1\7\20\uffff\1\10\4\uffff\1\10"+
            "\2\uffff\1\11\13\uffff\1\10\6\uffff\1\10\74\uffff\1\4\2\12",
            "\1\6\1\12\2\10\2\uffff\1\5\1\7\20\uffff\1\10\4\uffff\1\10"+
            "\2\uffff\1\11\13\uffff\1\10\6\uffff\1\10\74\uffff\1\4\2\12",
            "\1\6\1\12\2\10\2\uffff\1\5\1\7\20\uffff\1\10\4\uffff\1\10"+
            "\2\uffff\1\11\13\uffff\1\10\6\uffff\1\10\74\uffff\1\4\2\12",
            "\1\10\1\uffff\2\10\2\uffff\2\10\20\uffff\1\10\4\uffff\1\10"+
            "\2\uffff\1\12\13\uffff\1\10\6\uffff\1\10\74\uffff\1\10",
            "\1\27\10\uffff\1\10\10\uffff\1\10\2\uffff\1\10\15\uffff\1"+
            "\10\63\uffff\1\10\3\uffff\2\10\10\uffff\1\25\1\uffff\1\26\1"+
            "\uffff\1\23\2\uffff\1\24",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "\1\35",
            "\1\3\24\uffff\3\3\1\uffff\2\3\103\uffff\1\3\2\uffff\1\12\2"+
            "\uffff\1\12\13\uffff\1\3",
            "\1\40\42\uffff\1\10\70\uffff\1\10\12\uffff\1\37\4\uffff\1"+
            "\36",
            "\1\uffff",
            "\1\42\153\uffff\1\41",
            "\1\uffff",
            "\1\uffff",
            "\1\43",
            "\1\44",
            "\1\45",
            "\1\46",
            "\1\47",
            "\1\10\24\uffff\3\10\1\uffff\2\10\103\uffff\1\10\2\uffff\1"+
            "\37\2\uffff\1\50\13\uffff\1\10",
            "\1\51",
            "\1\50",
            "\1\52",
            "\1\52",
            "\1\53",
            "\1\54",
            "\1\55",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA118_eot = DFA.unpackEncodedString(DFA118_static.DFA118_eotS);
    static final short[] DFA118_eof = DFA.unpackEncodedString(DFA118_static.DFA118_eofS);
    static final char[] DFA118_min = DFA.unpackEncodedStringToUnsignedChars(DFA118_static.DFA118_minS);
    static final char[] DFA118_max = DFA.unpackEncodedStringToUnsignedChars(DFA118_static.DFA118_maxS);
    static final short[] DFA118_accept = DFA.unpackEncodedString(DFA118_static.DFA118_acceptS);
    static final short[] DFA118_special = DFA.unpackEncodedString(DFA118_static.DFA118_specialS);
    static final short[][] DFA118_transition;

    static {
        int numStates = DFA118_static.DFA118_transitionS.length;
        DFA118_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA118_transition[i] = DFA.unpackEncodedString(DFA118_static.DFA118_transitionS[i]);
        }
    }

    class DFA118 extends DFA {

        public DFA118(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 118;
            this.eot = DFA118_eot;
            this.eof = DFA118_eof;
            this.min = DFA118_min;
            this.max = DFA118_max;
            this.accept = DFA118_accept;
            this.special = DFA118_special;
            this.transition = DFA118_transition;
        }
        public String getDescription() {
            return "302:1: unnamedmoleculeDescriptionStart : ( quantityOf ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule ) | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA118_26 = input.LA(1);

                         
                        int index118_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index118_26);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA118_43 = input.LA(1);

                         
                        int index118_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index118_43);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA118_45 = input.LA(1);

                         
                        int index118_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index118_45);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA118_28 = input.LA(1);

                         
                        int index118_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index118_28);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA118_29 = input.LA(1);

                         
                        int index118_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index118_29);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA118_44 = input.LA(1);

                         
                        int index118_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index118_44);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 118, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA117_static {
    static final String DFA117_eotS =
        "\26\uffff";
    static final String DFA117_eofS =
        "\26\uffff";
    static final String DFA117_minS =
        "\1\46\14\0\11\uffff";
    static final String DFA117_maxS =
        "\1\u0099\14\0\11\uffff";
    static final String DFA117_acceptS =
        "\15\uffff\1\3\6\uffff\1\1\1\2";
    static final String DFA117_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\11"+
        "\uffff}>";
    static final String[] DFA117_transitionS = {
            "\1\15\1\4\1\15\1\13\1\10\2\uffff\1\3\1\5\20\uffff\1\6\4\uffff"+
            "\1\11\2\uffff\1\14\13\uffff\1\7\6\uffff\1\12\60\uffff\1\15\1"+
            "\uffff\1\15\1\uffff\1\15\2\uffff\1\1\4\uffff\1\2\2\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_static.DFA117_eotS);
    static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_static.DFA117_eofS);
    static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_static.DFA117_minS);
    static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_static.DFA117_maxS);
    static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_static.DFA117_acceptS);
    static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_static.DFA117_specialS);
    static final short[][] DFA117_transition;

    static {
        int numStates = DFA117_static.DFA117_transitionS.length;
        DFA117_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA117_transition[i] = DFA.unpackEncodedString(DFA117_static.DFA117_transitionS[i]);
        }
    }

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = DFA117_eot;
            this.eof = DFA117_eof;
            this.min = DFA117_min;
            this.max = DFA117_max;
            this.accept = DFA117_accept;
            this.special = DFA117_special;
            this.transition = DFA117_transition;
        }
        public String getDescription() {
            return "303:15: ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA117_1 = input.LA(1);

                         
                        int index117_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index117_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA117_2 = input.LA(1);

                         
                        int index117_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index117_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA117_3 = input.LA(1);

                         
                        int index117_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index117_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA117_4 = input.LA(1);

                         
                        int index117_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index117_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA117_5 = input.LA(1);

                         
                        int index117_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index117_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA117_6 = input.LA(1);

                         
                        int index117_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index117_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA117_7 = input.LA(1);

                         
                        int index117_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index117_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA117_8 = input.LA(1);

                         
                        int index117_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index117_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA117_9 = input.LA(1);

                         
                        int index117_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index117_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA117_10 = input.LA(1);

                         
                        int index117_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index117_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA117_11 = input.LA(1);

                         
                        int index117_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index117_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA117_12 = input.LA(1);

                         
                        int index117_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred319_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index117_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 117, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA119_static {
    static final String DFA119_eotS =
        "\31\uffff";
    static final String DFA119_eofS =
        "\5\uffff\1\1\23\uffff";
    static final String DFA119_minS =
        "\1\46\1\uffff\2\45\1\uffff\2\46\11\45\10\0\1\54";
    static final String DFA119_maxS =
        "\1\u0099\1\uffff\2\45\1\uffff\1\u00b4\1\u0092\11\45\10\0\1\u009c";
    static final String DFA119_acceptS =
        "\1\uffff\1\2\2\uffff\1\1\24\uffff";
    static final String DFA119_specialS =
        "\20\uffff\1\2\1\5\1\0\1\6\1\7\1\1\1\3\1\4\1\uffff}>";
    static final String[] DFA119_transitionS = {
            "\5\1\2\uffff\2\1\11\uffff\1\1\6\uffff\1\1\4\uffff\1\1\2\uffff"+
            "\1\1\1\uffff\1\4\11\uffff\1\1\6\uffff\1\1\47\uffff\1\4\10\uffff"+
            "\1\1\1\uffff\2\1\1\3\2\uffff\1\2\1\1\3\uffff\3\1",
            "",
            "\1\5",
            "\1\6",
            "",
            "\6\1\1\14\24\1\1\15\1\16\1\13\1\1\1\10\1\7\103\1\1\12\21\1"+
            "\1\11\30\1",
            "\1\1\42\uffff\1\4\70\uffff\1\4\12\uffff\1\1\4\uffff\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\4\24\uffff\3\4\1\uffff\2\4\103\uffff\1\4\2\uffff\1\1\2"+
            "\uffff\1\1\13\uffff\1\4"
    };
    }

    static final short[] DFA119_eot = DFA.unpackEncodedString(DFA119_static.DFA119_eotS);
    static final short[] DFA119_eof = DFA.unpackEncodedString(DFA119_static.DFA119_eofS);
    static final char[] DFA119_min = DFA.unpackEncodedStringToUnsignedChars(DFA119_static.DFA119_minS);
    static final char[] DFA119_max = DFA.unpackEncodedStringToUnsignedChars(DFA119_static.DFA119_maxS);
    static final short[] DFA119_accept = DFA.unpackEncodedString(DFA119_static.DFA119_acceptS);
    static final short[] DFA119_special = DFA.unpackEncodedString(DFA119_static.DFA119_specialS);
    static final short[][] DFA119_transition;

    static {
        int numStates = DFA119_static.DFA119_transitionS.length;
        DFA119_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA119_transition[i] = DFA.unpackEncodedString(DFA119_static.DFA119_transitionS[i]);
        }
    }

    class DFA119 extends DFA {

        public DFA119(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 119;
            this.eot = DFA119_eot;
            this.eof = DFA119_eof;
            this.min = DFA119_min;
            this.max = DFA119_max;
            this.accept = DFA119_accept;
            this.special = DFA119_special;
            this.transition = DFA119_transition;
        }
        public String getDescription() {
            return "()+ loopback of 306:4: ( quantity )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA119_18 = input.LA(1);

                         
                        int index119_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred322_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index119_18);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA119_21 = input.LA(1);

                         
                        int index119_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred322_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index119_21);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA119_16 = input.LA(1);

                         
                        int index119_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred322_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index119_16);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA119_22 = input.LA(1);

                         
                        int index119_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred322_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index119_22);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA119_23 = input.LA(1);

                         
                        int index119_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred322_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index119_23);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA119_17 = input.LA(1);

                         
                        int index119_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred322_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index119_17);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA119_19 = input.LA(1);

                         
                        int index119_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred322_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index119_19);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA119_20 = input.LA(1);

                         
                        int index119_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred322_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index119_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 119, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA122_static {
    static final String DFA122_eotS =
        "\u0092\uffff";
    static final String DFA122_eofS =
        "\1\1\u0091\uffff";
    static final String DFA122_minS =
        "\1\46\5\uffff\1\0\1\uffff\3\0\u0087\uffff";
    static final String DFA122_maxS =
        "\1\u00b4\5\uffff\1\0\1\uffff\3\0\u0087\uffff";
    static final String DFA122_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA122_specialS =
        "\6\uffff\1\0\1\uffff\1\1\1\2\1\3\u0087\uffff}>";
    static final String[] DFA122_transitionS = {
            "\43\1\1\11\70\1\1\12\14\1\1\6\2\1\1\10\42\1",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA122_eot = DFA.unpackEncodedString(DFA122_static.DFA122_eotS);
    static final short[] DFA122_eof = DFA.unpackEncodedString(DFA122_static.DFA122_eofS);
    static final char[] DFA122_min = DFA.unpackEncodedStringToUnsignedChars(DFA122_static.DFA122_minS);
    static final char[] DFA122_max = DFA.unpackEncodedStringToUnsignedChars(DFA122_static.DFA122_maxS);
    static final short[] DFA122_accept = DFA.unpackEncodedString(DFA122_static.DFA122_acceptS);
    static final short[] DFA122_special = DFA.unpackEncodedString(DFA122_static.DFA122_specialS);
    static final short[][] DFA122_transition;

    static {
        int numStates = DFA122_static.DFA122_transitionS.length;
        DFA122_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA122_transition[i] = DFA.unpackEncodedString(DFA122_static.DFA122_transitionS[i]);
        }
    }

    class DFA122 extends DFA {

        public DFA122(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 122;
            this.eot = DFA122_eot;
            this.eof = DFA122_eof;
            this.min = DFA122_min;
            this.max = DFA122_max;
            this.accept = DFA122_accept;
            this.special = DFA122_special;
            this.transition = DFA122_transition;
        }
        public String getDescription() {
            return "()* loopback of 309:29: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA122_6 = input.LA(1);

                         
                        int index122_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_6);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA122_8 = input.LA(1);

                         
                        int index122_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA122_9 = input.LA(1);

                         
                        int index122_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA122_10 = input.LA(1);

                         
                        int index122_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 122, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA123_static {
    static final String DFA123_eotS =
        "\u0092\uffff";
    static final String DFA123_eofS =
        "\1\2\u0091\uffff";
    static final String DFA123_minS =
        "\1\46\1\0\u0090\uffff";
    static final String DFA123_maxS =
        "\1\u00b4\1\0\u0090\uffff";
    static final String DFA123_acceptS =
        "\2\uffff\1\2\u008e\uffff\1\1";
    static final String DFA123_specialS =
        "\1\uffff\1\0\u0090\uffff}>";
    static final String[] DFA123_transitionS = {
            "\11\2\1\1\u0085\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA123_eot = DFA.unpackEncodedString(DFA123_static.DFA123_eotS);
    static final short[] DFA123_eof = DFA.unpackEncodedString(DFA123_static.DFA123_eofS);
    static final char[] DFA123_min = DFA.unpackEncodedStringToUnsignedChars(DFA123_static.DFA123_minS);
    static final char[] DFA123_max = DFA.unpackEncodedStringToUnsignedChars(DFA123_static.DFA123_maxS);
    static final short[] DFA123_accept = DFA.unpackEncodedString(DFA123_static.DFA123_acceptS);
    static final short[] DFA123_special = DFA.unpackEncodedString(DFA123_static.DFA123_specialS);
    static final short[][] DFA123_transition;

    static {
        int numStates = DFA123_static.DFA123_transitionS.length;
        DFA123_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA123_transition[i] = DFA.unpackEncodedString(DFA123_static.DFA123_transitionS[i]);
        }
    }

    class DFA123 extends DFA {

        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = DFA123_eot;
            this.eof = DFA123_eof;
            this.min = DFA123_min;
            this.max = DFA123_max;
            this.accept = DFA123_accept;
            this.special = DFA123_special;
            this.transition = DFA123_transition;
        }
        public String getDescription() {
            return "309:39: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA123_1 = input.LA(1);

                         
                        int index123_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred327_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index123_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 123, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA124_static {
    static final String DFA124_eotS =
        "\u0092\uffff";
    static final String DFA124_eofS =
        "\1\5\u0091\uffff";
    static final String DFA124_minS =
        "\1\46\4\0\u008d\uffff";
    static final String DFA124_maxS =
        "\1\u00b4\4\0\u008d\uffff";
    static final String DFA124_acceptS =
        "\5\uffff\1\2\u008b\uffff\1\1";
    static final String DFA124_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008d\uffff}>";
    static final String[] DFA124_transitionS = {
            "\22\5\1\2\2\5\1\1\101\5\1\4\3\5\1\3\63\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_static.DFA124_eotS);
    static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_static.DFA124_eofS);
    static final char[] DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_static.DFA124_minS);
    static final char[] DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_static.DFA124_maxS);
    static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_static.DFA124_acceptS);
    static final short[] DFA124_special = DFA.unpackEncodedString(DFA124_static.DFA124_specialS);
    static final short[][] DFA124_transition;

    static {
        int numStates = DFA124_static.DFA124_transitionS.length;
        DFA124_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA124_transition[i] = DFA.unpackEncodedString(DFA124_static.DFA124_transitionS[i]);
        }
    }

    class DFA124 extends DFA {

        public DFA124(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = DFA124_eot;
            this.eof = DFA124_eof;
            this.min = DFA124_min;
            this.max = DFA124_max;
            this.accept = DFA124_accept;
            this.special = DFA124_special;
            this.transition = DFA124_transition;
        }
        public String getDescription() {
            return "309:49: ( fromProcedure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA124_1 = input.LA(1);

                         
                        int index124_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index124_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA124_2 = input.LA(1);

                         
                        int index124_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred328_ChemicalChunker()&&(precededByProduct(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index124_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA124_3 = input.LA(1);

                         
                        int index124_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred328_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index124_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA124_4 = input.LA(1);

                         
                        int index124_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred328_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index124_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 124, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA128_static {
    static final String DFA128_eotS =
        "\u0092\uffff";
    static final String DFA128_eofS =
        "\1\1\u0091\uffff";
    static final String DFA128_minS =
        "\1\46\5\uffff\1\0\1\uffff\3\0\u0087\uffff";
    static final String DFA128_maxS =
        "\1\u00b4\5\uffff\1\0\1\uffff\3\0\u0087\uffff";
    static final String DFA128_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA128_specialS =
        "\6\uffff\1\0\1\uffff\1\1\1\2\1\3\u0087\uffff}>";
    static final String[] DFA128_transitionS = {
            "\43\1\1\11\70\1\1\12\14\1\1\6\2\1\1\10\42\1",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA128_eot = DFA.unpackEncodedString(DFA128_static.DFA128_eotS);
    static final short[] DFA128_eof = DFA.unpackEncodedString(DFA128_static.DFA128_eofS);
    static final char[] DFA128_min = DFA.unpackEncodedStringToUnsignedChars(DFA128_static.DFA128_minS);
    static final char[] DFA128_max = DFA.unpackEncodedStringToUnsignedChars(DFA128_static.DFA128_maxS);
    static final short[] DFA128_accept = DFA.unpackEncodedString(DFA128_static.DFA128_acceptS);
    static final short[] DFA128_special = DFA.unpackEncodedString(DFA128_static.DFA128_specialS);
    static final short[][] DFA128_transition;

    static {
        int numStates = DFA128_static.DFA128_transitionS.length;
        DFA128_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA128_transition[i] = DFA.unpackEncodedString(DFA128_static.DFA128_transitionS[i]);
        }
    }

    class DFA128 extends DFA {

        public DFA128(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 128;
            this.eot = DFA128_eot;
            this.eof = DFA128_eof;
            this.min = DFA128_min;
            this.max = DFA128_max;
            this.accept = DFA128_accept;
            this.special = DFA128_special;
            this.transition = DFA128_transition;
        }
        public String getDescription() {
            return "()* loopback of 312:148: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA128_6 = input.LA(1);

                         
                        int index128_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_6);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA128_8 = input.LA(1);

                         
                        int index128_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA128_9 = input.LA(1);

                         
                        int index128_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA128_10 = input.LA(1);

                         
                        int index128_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 128, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA129_static {
    static final String DFA129_eotS =
        "\43\uffff";
    static final String DFA129_eofS =
        "\1\2\2\uffff\1\2\5\uffff\4\2\11\uffff\3\2\1\uffff\3\2\3\uffff\3"+
        "\2";
    static final String DFA129_minS =
        "\1\46\1\45\1\uffff\1\46\5\45\4\46\1\0\7\45\1\uffff\3\46\1\0\3\46"+
        "\3\45\3\46";
    static final String DFA129_maxS =
        "\1\u00b4\1\45\1\uffff\1\u00b4\5\45\4\u00b4\1\0\7\45\1\uffff\3\u00b4"+
        "\1\0\3\u00b4\3\45\3\u00b4";
    static final String DFA129_acceptS =
        "\2\uffff\1\2\22\uffff\1\1\15\uffff";
    static final String DFA129_specialS =
        "\15\uffff\1\0\13\uffff\1\1\11\uffff}>";
    static final String[] DFA129_transitionS = {
            "\11\2\1\1\u0085\2",
            "\1\3",
            "",
            "\1\2\1\7\5\2\1\6\21\2\1\10\123\2\1\4\3\2\1\5\35\2",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\2\1\20\5\2\1\17\21\2\1\21\127\2\1\16\35\2",
            "\1\2\1\24\5\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\5\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\5\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\uffff",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "",
            "\1\2\1\37\5\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\5\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\5\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\uffff",
            "\1\2\1\24\5\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\5\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\2\1\24\5\2\1\23\21\2\1\10\127\2\1\22\35\2",
            "\1\40",
            "\1\41",
            "\1\42",
            "\1\2\1\37\5\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\5\2\1\36\21\2\1\21\127\2\1\35\35\2",
            "\1\2\1\37\5\2\1\36\21\2\1\21\127\2\1\35\35\2"
    };
    }

    static final short[] DFA129_eot = DFA.unpackEncodedString(DFA129_static.DFA129_eotS);
    static final short[] DFA129_eof = DFA.unpackEncodedString(DFA129_static.DFA129_eofS);
    static final char[] DFA129_min = DFA.unpackEncodedStringToUnsignedChars(DFA129_static.DFA129_minS);
    static final char[] DFA129_max = DFA.unpackEncodedStringToUnsignedChars(DFA129_static.DFA129_maxS);
    static final short[] DFA129_accept = DFA.unpackEncodedString(DFA129_static.DFA129_acceptS);
    static final short[] DFA129_special = DFA.unpackEncodedString(DFA129_static.DFA129_specialS);
    static final short[][] DFA129_transition;

    static {
        int numStates = DFA129_static.DFA129_transitionS.length;
        DFA129_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA129_transition[i] = DFA.unpackEncodedString(DFA129_static.DFA129_transitionS[i]);
        }
    }

    class DFA129 extends DFA {

        public DFA129(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 129;
            this.eot = DFA129_eot;
            this.eof = DFA129_eof;
            this.min = DFA129_min;
            this.max = DFA129_max;
            this.accept = DFA129_accept;
            this.special = DFA129_special;
            this.transition = DFA129_transition;
        }
        public String getDescription() {
            return "312:158: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA129_13 = input.LA(1);

                         
                        int index129_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred334_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index129_13);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA129_25 = input.LA(1);

                         
                        int index129_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred334_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index129_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 129, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA130_static {
    static final String DFA130_eotS =
        "\u0092\uffff";
    static final String DFA130_eofS =
        "\1\5\u0091\uffff";
    static final String DFA130_minS =
        "\1\46\4\0\u008d\uffff";
    static final String DFA130_maxS =
        "\1\u00b4\4\0\u008d\uffff";
    static final String DFA130_acceptS =
        "\5\uffff\1\2\u008b\uffff\1\1";
    static final String DFA130_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008d\uffff}>";
    static final String[] DFA130_transitionS = {
            "\22\5\1\2\2\5\1\1\101\5\1\4\3\5\1\3\63\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA130_eot = DFA.unpackEncodedString(DFA130_static.DFA130_eotS);
    static final short[] DFA130_eof = DFA.unpackEncodedString(DFA130_static.DFA130_eofS);
    static final char[] DFA130_min = DFA.unpackEncodedStringToUnsignedChars(DFA130_static.DFA130_minS);
    static final char[] DFA130_max = DFA.unpackEncodedStringToUnsignedChars(DFA130_static.DFA130_maxS);
    static final short[] DFA130_accept = DFA.unpackEncodedString(DFA130_static.DFA130_acceptS);
    static final short[] DFA130_special = DFA.unpackEncodedString(DFA130_static.DFA130_specialS);
    static final short[][] DFA130_transition;

    static {
        int numStates = DFA130_static.DFA130_transitionS.length;
        DFA130_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA130_transition[i] = DFA.unpackEncodedString(DFA130_static.DFA130_transitionS[i]);
        }
    }

    class DFA130 extends DFA {

        public DFA130(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 130;
            this.eot = DFA130_eot;
            this.eof = DFA130_eof;
            this.min = DFA130_min;
            this.max = DFA130_max;
            this.accept = DFA130_accept;
            this.special = DFA130_special;
            this.transition = DFA130_transition;
        }
        public String getDescription() {
            return "312:168: ( fromProcedure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA130_1 = input.LA(1);

                         
                        int index130_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred335_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index130_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA130_2 = input.LA(1);

                         
                        int index130_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred335_ChemicalChunker()&&(precededByProduct(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index130_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA130_3 = input.LA(1);

                         
                        int index130_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred335_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index130_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA130_4 = input.LA(1);

                         
                        int index130_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred335_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index130_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 130, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA131_static {
    static final String DFA131_eotS =
        "\u0092\uffff";
    static final String DFA131_eofS =
        "\1\1\u0091\uffff";
    static final String DFA131_minS =
        "\1\46\5\uffff\1\0\1\uffff\3\0\u0087\uffff";
    static final String DFA131_maxS =
        "\1\u00b4\5\uffff\1\0\1\uffff\3\0\u0087\uffff";
    static final String DFA131_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA131_specialS =
        "\6\uffff\1\0\1\uffff\1\1\1\2\1\3\u0087\uffff}>";
    static final String[] DFA131_transitionS = {
            "\43\1\1\11\70\1\1\12\14\1\1\6\2\1\1\10\42\1",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA131_eot = DFA.unpackEncodedString(DFA131_static.DFA131_eotS);
    static final short[] DFA131_eof = DFA.unpackEncodedString(DFA131_static.DFA131_eofS);
    static final char[] DFA131_min = DFA.unpackEncodedStringToUnsignedChars(DFA131_static.DFA131_minS);
    static final char[] DFA131_max = DFA.unpackEncodedStringToUnsignedChars(DFA131_static.DFA131_maxS);
    static final short[] DFA131_accept = DFA.unpackEncodedString(DFA131_static.DFA131_acceptS);
    static final short[] DFA131_special = DFA.unpackEncodedString(DFA131_static.DFA131_specialS);
    static final short[][] DFA131_transition;

    static {
        int numStates = DFA131_static.DFA131_transitionS.length;
        DFA131_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA131_transition[i] = DFA.unpackEncodedString(DFA131_static.DFA131_transitionS[i]);
        }
    }

    class DFA131 extends DFA {

        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = DFA131_eot;
            this.eof = DFA131_eof;
            this.min = DFA131_min;
            this.max = DFA131_max;
            this.accept = DFA131_accept;
            this.special = DFA131_special;
            this.transition = DFA131_transition;
        }
        public String getDescription() {
            return "()* loopback of 315:37: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA131_6 = input.LA(1);

                         
                        int index131_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred336_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index131_6);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA131_8 = input.LA(1);

                         
                        int index131_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred336_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index131_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA131_9 = input.LA(1);

                         
                        int index131_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred336_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index131_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA131_10 = input.LA(1);

                         
                        int index131_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred336_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index131_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 131, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA132_static {
    static final String DFA132_eotS =
        "\u0092\uffff";
    static final String DFA132_eofS =
        "\1\2\u0091\uffff";
    static final String DFA132_minS =
        "\1\46\1\0\u0090\uffff";
    static final String DFA132_maxS =
        "\1\u00b4\1\0\u0090\uffff";
    static final String DFA132_acceptS =
        "\2\uffff\1\2\u008e\uffff\1\1";
    static final String DFA132_specialS =
        "\1\uffff\1\0\u0090\uffff}>";
    static final String[] DFA132_transitionS = {
            "\11\2\1\1\u0085\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA132_eot = DFA.unpackEncodedString(DFA132_static.DFA132_eotS);
    static final short[] DFA132_eof = DFA.unpackEncodedString(DFA132_static.DFA132_eofS);
    static final char[] DFA132_min = DFA.unpackEncodedStringToUnsignedChars(DFA132_static.DFA132_minS);
    static final char[] DFA132_max = DFA.unpackEncodedStringToUnsignedChars(DFA132_static.DFA132_maxS);
    static final short[] DFA132_accept = DFA.unpackEncodedString(DFA132_static.DFA132_acceptS);
    static final short[] DFA132_special = DFA.unpackEncodedString(DFA132_static.DFA132_specialS);
    static final short[][] DFA132_transition;

    static {
        int numStates = DFA132_static.DFA132_transitionS.length;
        DFA132_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA132_transition[i] = DFA.unpackEncodedString(DFA132_static.DFA132_transitionS[i]);
        }
    }

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = DFA132_eot;
            this.eof = DFA132_eof;
            this.min = DFA132_min;
            this.max = DFA132_max;
            this.accept = DFA132_accept;
            this.special = DFA132_special;
            this.transition = DFA132_transition;
        }
        public String getDescription() {
            return "315:47: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA132_1 = input.LA(1);

                         
                        int index132_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index132_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 132, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA133_static {
    static final String DFA133_eotS =
        "\u0092\uffff";
    static final String DFA133_eofS =
        "\1\5\u0091\uffff";
    static final String DFA133_minS =
        "\1\46\4\0\u008d\uffff";
    static final String DFA133_maxS =
        "\1\u00b4\4\0\u008d\uffff";
    static final String DFA133_acceptS =
        "\5\uffff\1\2\u008b\uffff\1\1";
    static final String DFA133_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008d\uffff}>";
    static final String[] DFA133_transitionS = {
            "\22\5\1\2\2\5\1\1\101\5\1\4\3\5\1\3\63\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA133_eot = DFA.unpackEncodedString(DFA133_static.DFA133_eotS);
    static final short[] DFA133_eof = DFA.unpackEncodedString(DFA133_static.DFA133_eofS);
    static final char[] DFA133_min = DFA.unpackEncodedStringToUnsignedChars(DFA133_static.DFA133_minS);
    static final char[] DFA133_max = DFA.unpackEncodedStringToUnsignedChars(DFA133_static.DFA133_maxS);
    static final short[] DFA133_accept = DFA.unpackEncodedString(DFA133_static.DFA133_acceptS);
    static final short[] DFA133_special = DFA.unpackEncodedString(DFA133_static.DFA133_specialS);
    static final short[][] DFA133_transition;

    static {
        int numStates = DFA133_static.DFA133_transitionS.length;
        DFA133_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA133_transition[i] = DFA.unpackEncodedString(DFA133_static.DFA133_transitionS[i]);
        }
    }

    class DFA133 extends DFA {

        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = DFA133_eot;
            this.eof = DFA133_eof;
            this.min = DFA133_min;
            this.max = DFA133_max;
            this.accept = DFA133_accept;
            this.special = DFA133_special;
            this.transition = DFA133_transition;
        }
        public String getDescription() {
            return "315:57: ( fromProcedure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA133_1 = input.LA(1);

                         
                        int index133_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index133_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA133_2 = input.LA(1);

                         
                        int index133_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred338_ChemicalChunker()&&(precededByProduct(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index133_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA133_3 = input.LA(1);

                         
                        int index133_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred338_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index133_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA133_4 = input.LA(1);

                         
                        int index133_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred338_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index133_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 133, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA135_static {
    static final String DFA135_eotS =
        "\u0092\uffff";
    static final String DFA135_eofS =
        "\1\10\u0091\uffff";
    static final String DFA135_minS =
        "\1\46\7\0\u008a\uffff";
    static final String DFA135_maxS =
        "\1\u00b4\7\0\u008a\uffff";
    static final String DFA135_acceptS =
        "\10\uffff\1\2\u0088\uffff\1\1";
    static final String DFA135_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\u008a\uffff}>";
    static final String[] DFA135_transitionS = {
            "\1\7\42\10\1\3\70\10\1\4\10\10\1\5\1\10\1\6\1\10\1\1\2\10\1"+
            "\2\42\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA135_eot = DFA.unpackEncodedString(DFA135_static.DFA135_eotS);
    static final short[] DFA135_eof = DFA.unpackEncodedString(DFA135_static.DFA135_eofS);
    static final char[] DFA135_min = DFA.unpackEncodedStringToUnsignedChars(DFA135_static.DFA135_minS);
    static final char[] DFA135_max = DFA.unpackEncodedStringToUnsignedChars(DFA135_static.DFA135_maxS);
    static final short[] DFA135_accept = DFA.unpackEncodedString(DFA135_static.DFA135_acceptS);
    static final short[] DFA135_special = DFA.unpackEncodedString(DFA135_static.DFA135_specialS);
    static final short[][] DFA135_transition;

    static {
        int numStates = DFA135_static.DFA135_transitionS.length;
        DFA135_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA135_transition[i] = DFA.unpackEncodedString(DFA135_static.DFA135_transitionS[i]);
        }
    }

    class DFA135 extends DFA {

        public DFA135(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 135;
            this.eot = DFA135_eot;
            this.eof = DFA135_eof;
            this.min = DFA135_min;
            this.max = DFA135_max;
            this.accept = DFA135_accept;
            this.special = DFA135_special;
            this.transition = DFA135_transition;
        }
        public String getDescription() {
            return "318:82: ( numericReferenceOrQuantity )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA135_1 = input.LA(1);

                         
                        int index135_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred341_ChemicalChunker()||(synpred341_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index135_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA135_2 = input.LA(1);

                         
                        int index135_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index135_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA135_3 = input.LA(1);

                         
                        int index135_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index135_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA135_4 = input.LA(1);

                         
                        int index135_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index135_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA135_5 = input.LA(1);

                         
                        int index135_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index135_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA135_6 = input.LA(1);

                         
                        int index135_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index135_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA135_7 = input.LA(1);

                         
                        int index135_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index135_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 135, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA138_static {
    static final String DFA138_eotS =
        "\u0092\uffff";
    static final String DFA138_eofS =
        "\1\10\u0091\uffff";
    static final String DFA138_minS =
        "\1\46\7\0\u008a\uffff";
    static final String DFA138_maxS =
        "\1\u00b4\7\0\u008a\uffff";
    static final String DFA138_acceptS =
        "\10\uffff\1\2\u0088\uffff\1\1";
    static final String DFA138_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\u008a\uffff}>";
    static final String[] DFA138_transitionS = {
            "\1\7\42\10\1\3\70\10\1\4\10\10\1\5\1\10\1\6\1\10\1\1\2\10\1"+
            "\2\42\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA138_eot = DFA.unpackEncodedString(DFA138_static.DFA138_eotS);
    static final short[] DFA138_eof = DFA.unpackEncodedString(DFA138_static.DFA138_eofS);
    static final char[] DFA138_min = DFA.unpackEncodedStringToUnsignedChars(DFA138_static.DFA138_minS);
    static final char[] DFA138_max = DFA.unpackEncodedStringToUnsignedChars(DFA138_static.DFA138_maxS);
    static final short[] DFA138_accept = DFA.unpackEncodedString(DFA138_static.DFA138_acceptS);
    static final short[] DFA138_special = DFA.unpackEncodedString(DFA138_static.DFA138_specialS);
    static final short[][] DFA138_transition;

    static {
        int numStates = DFA138_static.DFA138_transitionS.length;
        DFA138_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA138_transition[i] = DFA.unpackEncodedString(DFA138_static.DFA138_transitionS[i]);
        }
    }

    class DFA138 extends DFA {

        public DFA138(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 138;
            this.eot = DFA138_eot;
            this.eof = DFA138_eof;
            this.min = DFA138_min;
            this.max = DFA138_max;
            this.accept = DFA138_accept;
            this.special = DFA138_special;
            this.transition = DFA138_transition;
        }
        public String getDescription() {
            return "321:66: ( numericReferenceOrQuantity )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA138_1 = input.LA(1);

                         
                        int index138_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred344_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||synpred344_ChemicalChunker())) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index138_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA138_2 = input.LA(1);

                         
                        int index138_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index138_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA138_3 = input.LA(1);

                         
                        int index138_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index138_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA138_4 = input.LA(1);

                         
                        int index138_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index138_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA138_5 = input.LA(1);

                         
                        int index138_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index138_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA138_6 = input.LA(1);

                         
                        int index138_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index138_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA138_7 = input.LA(1);

                         
                        int index138_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index138_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 138, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA143_static {
    static final String DFA143_eotS =
        "\11\uffff";
    static final String DFA143_eofS =
        "\11\uffff";
    static final String DFA143_minS =
        "\1\47\3\45\2\uffff\3\47";
    static final String DFA143_maxS =
        "\1\u0097\3\45\2\uffff\3\u0097";
    static final String DFA143_acceptS =
        "\4\uffff\1\1\1\2\3\uffff";
    static final String DFA143_specialS =
        "\11\uffff}>";
    static final String[] DFA143_transitionS = {
            "\1\3\1\uffff\2\4\2\uffff\1\2\1\4\20\uffff\1\4\4\uffff\1\4\2"+
            "\uffff\1\5\13\uffff\1\4\6\uffff\1\4\74\uffff\1\1",
            "\1\6",
            "\1\7",
            "\1\10",
            "",
            "",
            "\1\3\1\uffff\2\4\2\uffff\1\2\1\4\20\uffff\1\4\4\uffff\1\4"+
            "\2\uffff\1\5\13\uffff\1\4\6\uffff\1\4\74\uffff\1\1",
            "\1\3\1\uffff\2\4\2\uffff\1\2\1\4\20\uffff\1\4\4\uffff\1\4"+
            "\2\uffff\1\5\13\uffff\1\4\6\uffff\1\4\74\uffff\1\1",
            "\1\3\1\uffff\2\4\2\uffff\1\2\1\4\20\uffff\1\4\4\uffff\1\4"+
            "\2\uffff\1\5\13\uffff\1\4\6\uffff\1\4\74\uffff\1\1"
    };
    }

    static final short[] DFA143_eot = DFA.unpackEncodedString(DFA143_static.DFA143_eotS);
    static final short[] DFA143_eof = DFA.unpackEncodedString(DFA143_static.DFA143_eofS);
    static final char[] DFA143_min = DFA.unpackEncodedStringToUnsignedChars(DFA143_static.DFA143_minS);
    static final char[] DFA143_max = DFA.unpackEncodedStringToUnsignedChars(DFA143_static.DFA143_maxS);
    static final short[] DFA143_accept = DFA.unpackEncodedString(DFA143_static.DFA143_acceptS);
    static final short[] DFA143_special = DFA.unpackEncodedString(DFA143_static.DFA143_specialS);
    static final short[][] DFA143_transition;

    static {
        int numStates = DFA143_static.DFA143_transitionS.length;
        DFA143_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA143_transition[i] = DFA.unpackEncodedString(DFA143_static.DFA143_transitionS[i]);
        }
    }

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = DFA143_eot;
            this.eof = DFA143_eof;
            this.min = DFA143_min;
            this.max = DFA143_max;
            this.accept = DFA143_accept;
            this.special = DFA143_special;
            this.transition = DFA143_transition;
        }
        public String getDescription() {
            return "323:1: potentialUnnamedMoleculeStructureNN : ( ( jj | jjchem | oscarcj | jjcomp )* ( nnstate | referenceToExampleCompound | oscaronts | nnatmosphere | nnmixture | oscarase ) | ( jj | jjchem | oscarcj )* nnchementity );";
        }
    }
    static class DFA147_static {
    static final String DFA147_eotS =
        "\u0092\uffff";
    static final String DFA147_eofS =
        "\1\1\u0091\uffff";
    static final String DFA147_minS =
        "\1\46\16\uffff\4\0\177\uffff";
    static final String DFA147_maxS =
        "\1\u00b4\16\uffff\4\0\177\uffff";
    static final String DFA147_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA147_specialS =
        "\17\uffff\1\0\1\1\1\2\1\3\177\uffff}>";
    static final String[] DFA147_transitionS = {
            "\43\1\1\21\70\1\1\22\14\1\1\17\2\1\1\20\42\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA147_eot = DFA.unpackEncodedString(DFA147_static.DFA147_eotS);
    static final short[] DFA147_eof = DFA.unpackEncodedString(DFA147_static.DFA147_eofS);
    static final char[] DFA147_min = DFA.unpackEncodedStringToUnsignedChars(DFA147_static.DFA147_minS);
    static final char[] DFA147_max = DFA.unpackEncodedStringToUnsignedChars(DFA147_static.DFA147_maxS);
    static final short[] DFA147_accept = DFA.unpackEncodedString(DFA147_static.DFA147_acceptS);
    static final short[] DFA147_special = DFA.unpackEncodedString(DFA147_static.DFA147_specialS);
    static final short[][] DFA147_transition;

    static {
        int numStates = DFA147_static.DFA147_transitionS.length;
        DFA147_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA147_transition[i] = DFA.unpackEncodedString(DFA147_static.DFA147_transitionS[i]);
        }
    }

    class DFA147 extends DFA {

        public DFA147(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 147;
            this.eot = DFA147_eot;
            this.eof = DFA147_eof;
            this.min = DFA147_min;
            this.max = DFA147_max;
            this.accept = DFA147_accept;
            this.special = DFA147_special;
            this.transition = DFA147_transition;
        }
        public String getDescription() {
            return "()* loopback of 331:42: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA147_15 = input.LA(1);

                         
                        int index147_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred363_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index147_15);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA147_16 = input.LA(1);

                         
                        int index147_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred363_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index147_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA147_17 = input.LA(1);

                         
                        int index147_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred363_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index147_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA147_18 = input.LA(1);

                         
                        int index147_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred363_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index147_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 147, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA152_static {
    static final String DFA152_eotS =
        "\u0092\uffff";
    static final String DFA152_eofS =
        "\1\1\u0091\uffff";
    static final String DFA152_minS =
        "\1\46\2\uffff\1\0\u008e\uffff";
    static final String DFA152_maxS =
        "\1\u00b4\2\uffff\1\0\u008e\uffff";
    static final String DFA152_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA152_specialS =
        "\3\uffff\1\0\u008e\uffff}>";
    static final String[] DFA152_transitionS = {
            "\137\1\1\3\57\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA152_eot = DFA.unpackEncodedString(DFA152_static.DFA152_eotS);
    static final short[] DFA152_eof = DFA.unpackEncodedString(DFA152_static.DFA152_eofS);
    static final char[] DFA152_min = DFA.unpackEncodedStringToUnsignedChars(DFA152_static.DFA152_minS);
    static final char[] DFA152_max = DFA.unpackEncodedStringToUnsignedChars(DFA152_static.DFA152_maxS);
    static final short[] DFA152_accept = DFA.unpackEncodedString(DFA152_static.DFA152_acceptS);
    static final short[] DFA152_special = DFA.unpackEncodedString(DFA152_static.DFA152_specialS);
    static final short[][] DFA152_transition;

    static {
        int numStates = DFA152_static.DFA152_transitionS.length;
        DFA152_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA152_transition[i] = DFA.unpackEncodedString(DFA152_static.DFA152_transitionS[i]);
        }
    }

    class DFA152 extends DFA {

        public DFA152(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 152;
            this.eot = DFA152_eot;
            this.eof = DFA152_eof;
            this.min = DFA152_min;
            this.max = DFA152_max;
            this.accept = DFA152_accept;
            this.special = DFA152_special;
            this.transition = DFA152_transition;
        }
        public String getDescription() {
            return "()* loopback of 352:18: ( comma measurements )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA152_3 = input.LA(1);

                         
                        int index152_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred368_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 152, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA156_static {
    static final String DFA156_eotS =
        "\u0092\uffff";
    static final String DFA156_eofS =
        "\1\4\u0091\uffff";
    static final String DFA156_minS =
        "\1\46\3\0\u008e\uffff";
    static final String DFA156_maxS =
        "\1\u00b4\3\0\u008e\uffff";
    static final String DFA156_acceptS =
        "\4\uffff\1\2\u008c\uffff\1\1";
    static final String DFA156_specialS =
        "\1\uffff\1\0\1\1\1\2\u008e\uffff}>";
    static final String[] DFA156_transitionS = {
            "\43\4\1\2\70\4\1\3\17\4\1\1\42\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA156_eot = DFA.unpackEncodedString(DFA156_static.DFA156_eotS);
    static final short[] DFA156_eof = DFA.unpackEncodedString(DFA156_static.DFA156_eofS);
    static final char[] DFA156_min = DFA.unpackEncodedStringToUnsignedChars(DFA156_static.DFA156_minS);
    static final char[] DFA156_max = DFA.unpackEncodedStringToUnsignedChars(DFA156_static.DFA156_maxS);
    static final short[] DFA156_accept = DFA.unpackEncodedString(DFA156_static.DFA156_acceptS);
    static final short[] DFA156_special = DFA.unpackEncodedString(DFA156_static.DFA156_specialS);
    static final short[][] DFA156_transition;

    static {
        int numStates = DFA156_static.DFA156_transitionS.length;
        DFA156_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA156_transition[i] = DFA.unpackEncodedString(DFA156_static.DFA156_transitionS[i]);
        }
    }

    class DFA156 extends DFA {

        public DFA156(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 156;
            this.eot = DFA156_eot;
            this.eof = DFA156_eof;
            this.min = DFA156_min;
            this.max = DFA156_max;
            this.accept = DFA156_accept;
            this.special = DFA156_special;
            this.transition = DFA156_transition;
        }
        public String getDescription() {
            return "356:25: ( measurementtypes )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA156_1 = input.LA(1);

                         
                        int index156_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred372_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index156_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA156_2 = input.LA(1);

                         
                        int index156_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred372_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index156_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA156_3 = input.LA(1);

                         
                        int index156_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred372_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index156_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 156, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA157_static {
    static final String DFA157_eotS =
        "\27\uffff";
    static final String DFA157_eofS =
        "\15\uffff\1\20\3\uffff\1\20\2\uffff\1\20\2\uffff";
    static final String DFA157_minS =
        "\1\111\1\45\2\uffff\1\101\1\uffff\2\45\4\uffff\1\u008a\1\46\2\45"+
        "\1\uffff\1\46\1\0\1\45\1\46\1\45\1\0";
    static final String DFA157_maxS =
        "\1\u0092\1\45\2\uffff\1\u009c\1\uffff\2\45\4\uffff\1\u008a\1\u00b4"+
        "\2\45\1\uffff\1\u00b4\1\0\1\45\1\u00b4\1\45\1\0";
    static final String DFA157_acceptS =
        "\2\uffff\1\5\1\7\1\uffff\1\2\2\uffff\1\3\1\1\1\4\1\6\4\uffff\1"+
        "\10\6\uffff";
    static final String DFA157_specialS =
        "\22\uffff\1\0\3\uffff\1\1}>";
    static final String[] DFA157_transitionS = {
            "\1\2\70\uffff\1\3\17\uffff\1\1",
            "\1\4",
            "",
            "",
            "\1\10\1\5\1\11\1\uffff\1\13\1\12\103\uffff\1\7\21\uffff\1"+
            "\6",
            "",
            "\1\14",
            "\1\15",
            "",
            "",
            "",
            "",
            "\1\7",
            "\134\20\1\17\5\20\1\16\54\20",
            "\1\21",
            "\1\22",
            "",
            "\154\20\1\23\42\20",
            "\1\uffff",
            "\1\24",
            "\144\20\1\25\52\20",
            "\1\26",
            "\1\uffff"
    };
    }

    static final short[] DFA157_eot = DFA.unpackEncodedString(DFA157_static.DFA157_eotS);
    static final short[] DFA157_eof = DFA.unpackEncodedString(DFA157_static.DFA157_eofS);
    static final char[] DFA157_min = DFA.unpackEncodedStringToUnsignedChars(DFA157_static.DFA157_minS);
    static final char[] DFA157_max = DFA.unpackEncodedStringToUnsignedChars(DFA157_static.DFA157_maxS);
    static final short[] DFA157_accept = DFA.unpackEncodedString(DFA157_static.DFA157_acceptS);
    static final short[] DFA157_special = DFA.unpackEncodedString(DFA157_static.DFA157_specialS);
    static final short[][] DFA157_transition;

    static {
        int numStates = DFA157_static.DFA157_transitionS.length;
        DFA157_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA157_transition[i] = DFA.unpackEncodedString(DFA157_static.DFA157_transitionS[i]);
        }
    }

    class DFA157 extends DFA {

        public DFA157(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 157;
            this.eot = DFA157_eot;
            this.eof = DFA157_eof;
            this.min = DFA157_min;
            this.max = DFA157_max;
            this.accept = DFA157_accept;
            this.special = DFA157_special;
            this.transition = DFA157_transition;
        }
        public String getDescription() {
            return "357:1: measurementtypes : ( molar | amount | mass | volume | logHydrogenActivity | equivalent | yield | percent );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA157_18 = input.LA(1);

                         
                        int index157_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred379_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index157_18);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA157_22 = input.LA(1);

                         
                        int index157_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred379_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index157_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 157, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA165_static {
    static final String DFA165_eotS =
        "\u0088\uffff";
    static final String DFA165_eofS =
        "\u0088\uffff";
    static final String DFA165_minS =
        "\1\46\45\uffff\1\0\6\uffff\3\0\2\uffff\1\0\3\uffff\6\0\14\uffff"+
        "\1\0\77\uffff";
    static final String DFA165_maxS =
        "\1\u00b4\45\uffff\1\0\6\uffff\3\0\2\uffff\1\0\3\uffff\6\0\14\uffff"+
        "\1\0\77\uffff";
    static final String DFA165_acceptS =
        "\1\uffff\1\16\1\uffff\1\1\47\uffff\1\2\100\uffff\1\4\1\5\1\6\1"+
        "\7\21\uffff\1\11\1\13\1\14\1\3\1\10\1\15\1\12";
    static final String DFA165_specialS =
        "\46\uffff\1\0\6\uffff\1\1\1\2\1\3\2\uffff\1\4\3\uffff\1\5\1\6\1"+
        "\7\1\10\1\11\1\12\14\uffff\1\13\77\uffff}>";
    static final String[] DFA165_transitionS = {
            "\1\110\1\72\1\73\3\53\1\uffff\1\71\1\53\20\157\2\53\1\uffff"+
            "\1\53\1\uffff\21\53\4\3\2\53\11\3\1\53\1\3\1\53\4\3\1\53\1\3"+
            "\1\53\1\3\1\53\5\3\1\53\1\3\1\53\3\3\1\53\1\3\1\46\1\53\3\3"+
            "\1\53\1\uffff\1\u0082\1\56\2\uffff\1\156\1\u0083\1\155\1\62"+
            "\1\1\1\53\1\uffff\1\55\1\1\1\u0081\1\57\3\53\1\157\1\66\1\67"+
            "\1\70\1\53\1\154\10\53\4\uffff\1\53\1\157\1\uffff\6\3\4\53",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA165_eot = DFA.unpackEncodedString(DFA165_static.DFA165_eotS);
    static final short[] DFA165_eof = DFA.unpackEncodedString(DFA165_static.DFA165_eofS);
    static final char[] DFA165_min = DFA.unpackEncodedStringToUnsignedChars(DFA165_static.DFA165_minS);
    static final char[] DFA165_max = DFA.unpackEncodedStringToUnsignedChars(DFA165_static.DFA165_maxS);
    static final short[] DFA165_accept = DFA.unpackEncodedString(DFA165_static.DFA165_acceptS);
    static final short[] DFA165_special = DFA.unpackEncodedString(DFA165_static.DFA165_specialS);
    static final short[][] DFA165_transition;

    static {
        int numStates = DFA165_static.DFA165_transitionS.length;
        DFA165_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA165_transition[i] = DFA.unpackEncodedString(DFA165_static.DFA165_transitionS[i]);
        }
    }

    class DFA165 extends DFA {

        public DFA165(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 165;
            this.eot = DFA165_eot;
            this.eof = DFA165_eof;
            this.min = DFA165_min;
            this.max = DFA165_max;
            this.accept = DFA165_accept;
            this.special = DFA165_special;
            this.transition = DFA165_transition;
        }
        public String getDescription() {
            return "()+ loopback of 376:27: ( verb | noun | bracketedContent | md | percentsign | dash | inAll | ratio | conjunction | adj | colon | stop | numeric )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA165_38 = input.LA(1);

                         
                        int index165_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred388_ChemicalChunker()) ) {s = 3;}

                        else if ( (synpred389_ChemicalChunker()) ) {s = 43;}

                         
                        input.seek(index165_38);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA165_45 = input.LA(1);

                         
                        int index165_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred389_ChemicalChunker()||(synpred389_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 43;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 132;}

                         
                        input.seek(index165_45);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA165_46 = input.LA(1);

                         
                        int index165_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred396_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index165_46);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA165_47 = input.LA(1);

                         
                        int index165_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index165_47);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA165_50 = input.LA(1);

                         
                        int index165_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 132;}

                         
                        input.seek(index165_50);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA165_54 = input.LA(1);

                         
                        int index165_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred397_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index165_54);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA165_55 = input.LA(1);

                         
                        int index165_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred397_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index165_55);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA165_56 = input.LA(1);

                         
                        int index165_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred397_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index165_56);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA165_57 = input.LA(1);

                         
                        int index165_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred397_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index165_57);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA165_58 = input.LA(1);

                         
                        int index165_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred397_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index165_58);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA165_59 = input.LA(1);

                         
                        int index165_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred397_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index165_59);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA165_72 = input.LA(1);

                         
                        int index165_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index165_72);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 165, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA169_static {
    static final String DFA169_eotS =
        "\u008a\uffff";
    static final String DFA169_eofS =
        "\u008a\uffff";
    static final String DFA169_minS =
        "\1\46\43\uffff\1\0\4\uffff\17\0\25\uffff\1\0\74\uffff";
    static final String DFA169_maxS =
        "\1\u00b4\43\uffff\1\0\4\uffff\17\0\25\uffff\1\0\74\uffff";
    static final String DFA169_acceptS =
        "\1\uffff\1\1\66\uffff\1\10\1\11\1\12\1\13\22\uffff\1\16\1\17\1"+
        "\20\60\uffff\1\2\1\4\1\5\1\6\1\7\1\21\1\3\1\15\1\14";
    static final String DFA169_specialS =
        "\44\uffff\1\0\4\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\25\uffff\1\20\74\uffff}>";
    static final String[] DFA169_transitionS = {
            "\1\67\1\61\1\62\3\120\1\uffff\1\60\1\54\20\73\2\120\1\uffff"+
            "\1\120\1\uffff\5\120\1\52\12\120\1\63\4\1\2\120\11\1\1\120\1"+
            "\1\1\120\4\1\1\120\1\1\1\120\1\1\1\120\5\1\1\120\1\1\1\120\3"+
            "\1\1\120\1\1\1\44\1\120\3\1\1\53\1\uffff\1\116\1\115\2\uffff"+
            "\1\72\1\117\1\71\1\65\1\uffff\1\66\1\uffff\1\64\2\uffff\1\51"+
            "\3\120\1\73\1\55\1\56\1\57\1\120\1\70\10\120\4\uffff\1\120\1"+
            "\73\1\uffff\6\1\4\120",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA169_eot = DFA.unpackEncodedString(DFA169_static.DFA169_eotS);
    static final short[] DFA169_eof = DFA.unpackEncodedString(DFA169_static.DFA169_eofS);
    static final char[] DFA169_min = DFA.unpackEncodedStringToUnsignedChars(DFA169_static.DFA169_minS);
    static final char[] DFA169_max = DFA.unpackEncodedStringToUnsignedChars(DFA169_static.DFA169_maxS);
    static final short[] DFA169_accept = DFA.unpackEncodedString(DFA169_static.DFA169_acceptS);
    static final short[] DFA169_special = DFA.unpackEncodedString(DFA169_static.DFA169_specialS);
    static final short[][] DFA169_transition;

    static {
        int numStates = DFA169_static.DFA169_transitionS.length;
        DFA169_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA169_transition[i] = DFA.unpackEncodedString(DFA169_static.DFA169_transitionS[i]);
        }
    }

    class DFA169 extends DFA {

        public DFA169(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 169;
            this.eot = DFA169_eot;
            this.eof = DFA169_eof;
            this.min = DFA169_min;
            this.max = DFA169_max;
            this.accept = DFA169_accept;
            this.special = DFA169_special;
            this.transition = DFA169_transition;
        }
        public String getDescription() {
            return "382:32: ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | numberCompoundReference ( comma | colon | {...}? stop ) | cd | md | percentsign | dash | inAll | comma | adj | colon | stop | noun | bracketedContentInMol )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA169_36 = input.LA(1);

                         
                        int index169_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred404_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred421_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index169_36);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA169_41 = input.LA(1);

                         
                        int index169_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred405_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred407_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred408_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred411_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred412_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred421_ChemicalChunker()) ) {s = 80;}

                        else if ( (true) ) {s = 134;}

                         
                        input.seek(index169_41);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA169_42 = input.LA(1);

                         
                        int index169_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred405_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred421_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index169_42);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA169_43 = input.LA(1);

                         
                        int index169_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred405_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred421_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index169_43);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA169_44 = input.LA(1);

                         
                        int index169_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred406_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred421_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index169_44);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA169_45 = input.LA(1);

                         
                        int index169_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred406_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred418_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred421_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index169_45);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA169_46 = input.LA(1);

                         
                        int index169_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred406_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred418_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred421_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index169_46);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA169_47 = input.LA(1);

                         
                        int index169_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred406_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred418_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred421_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index169_47);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA169_48 = input.LA(1);

                         
                        int index169_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred406_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred418_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred421_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index169_48);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA169_49 = input.LA(1);

                         
                        int index169_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred406_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred418_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred421_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index169_49);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA169_50 = input.LA(1);

                         
                        int index169_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred406_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred418_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred421_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index169_50);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA169_51 = input.LA(1);

                         
                        int index169_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred406_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred421_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index169_51);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA169_52 = input.LA(1);

                         
                        int index169_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred406_ChemicalChunker()) ) {s = 135;}

                        else if ( ((synpred407_ChemicalChunker()||(synpred407_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 130;}

                        else if ( ((synpred421_ChemicalChunker()||(synpred421_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 80;}

                        else if ( (true) ) {s = 134;}

                         
                        input.seek(index169_52);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA169_53 = input.LA(1);

                         
                        int index169_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred407_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred421_ChemicalChunker()) ) {s = 80;}

                        else if ( (true) ) {s = 134;}

                         
                        input.seek(index169_53);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA169_54 = input.LA(1);

                         
                        int index169_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred407_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred421_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index169_54);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA169_55 = input.LA(1);

                         
                        int index169_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred407_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred421_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index169_55);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA169_77 = input.LA(1);

                         
                        int index169_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred417_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred421_ChemicalChunker()) ) {s = 80;}

                        else if ( (true) ) {s = 134;}

                         
                        input.seek(index169_77);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 169, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA170_static {
    static final String DFA170_eotS =
        "\u008b\uffff";
    static final String DFA170_eofS =
        "\u008b\uffff";
    static final String DFA170_minS =
        "\1\46\45\uffff\1\0\4\uffff\17\0\26\uffff\1\0\72\uffff";
    static final String DFA170_maxS =
        "\1\u00b4\45\uffff\1\0\4\uffff\17\0\26\uffff\1\0\72\uffff";
    static final String DFA170_acceptS =
        "\1\uffff\1\21\1\uffff\1\1\66\uffff\1\7\1\10\1\11\1\12\21\uffff"+
        "\1\13\1\uffff\1\15\1\16\1\17\60\uffff\1\2\1\4\1\5\1\6\1\20\1\3\1"+
        "\14";
    static final String DFA170_specialS =
        "\46\uffff\1\0\4\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\26\uffff\1\20\72\uffff}>";
    static final String[] DFA170_transitionS = {
            "\1\71\1\63\1\64\3\123\1\uffff\1\62\1\56\20\75\2\123\1\uffff"+
            "\1\123\1\uffff\5\123\1\54\12\123\1\65\4\3\2\123\11\3\1\123\1"+
            "\3\1\123\4\3\1\123\1\3\1\123\1\3\1\123\5\3\1\123\1\3\1\123\3"+
            "\3\1\123\1\3\1\46\1\123\3\3\1\55\1\uffff\1\121\1\120\2\uffff"+
            "\1\74\1\122\1\73\1\67\1\1\1\70\1\uffff\1\66\1\1\1\117\1\53\3"+
            "\123\1\75\1\57\1\60\1\61\1\123\1\72\10\123\4\uffff\1\123\1\75"+
            "\1\uffff\6\3\4\123",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA170_eot = DFA.unpackEncodedString(DFA170_static.DFA170_eotS);
    static final short[] DFA170_eof = DFA.unpackEncodedString(DFA170_static.DFA170_eofS);
    static final char[] DFA170_min = DFA.unpackEncodedStringToUnsignedChars(DFA170_static.DFA170_minS);
    static final char[] DFA170_max = DFA.unpackEncodedStringToUnsignedChars(DFA170_static.DFA170_maxS);
    static final short[] DFA170_accept = DFA.unpackEncodedString(DFA170_static.DFA170_acceptS);
    static final short[] DFA170_special = DFA.unpackEncodedString(DFA170_static.DFA170_specialS);
    static final short[][] DFA170_transition;

    static {
        int numStates = DFA170_static.DFA170_transitionS.length;
        DFA170_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA170_transition[i] = DFA.unpackEncodedString(DFA170_static.DFA170_transitionS[i]);
        }
    }

    class DFA170 extends DFA {

        public DFA170(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 170;
            this.eot = DFA170_eot;
            this.eof = DFA170_eof;
            this.min = DFA170_min;
            this.max = DFA170_max;
            this.accept = DFA170_accept;
            this.special = DFA170_special;
            this.transition = DFA170_transition;
        }
        public String getDescription() {
            return "()* loopback of 382:265: ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | cd | md | percentsign | dash | inAll | conjunction | adj | colon | stop | noun | bracketedContentInMol )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA170_38 = input.LA(1);

                         
                        int index170_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred422_ChemicalChunker()) ) {s = 3;}

                        else if ( (synpred436_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index170_38);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA170_43 = input.LA(1);

                         
                        int index170_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred423_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred425_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred426_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred427_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred436_ChemicalChunker()) ) {s = 83;}

                        else if ( (synpred437_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index170_43);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA170_44 = input.LA(1);

                         
                        int index170_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred423_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred436_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index170_44);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA170_45 = input.LA(1);

                         
                        int index170_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred423_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred436_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index170_45);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA170_46 = input.LA(1);

                         
                        int index170_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred424_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred436_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index170_46);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA170_47 = input.LA(1);

                         
                        int index170_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred424_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred433_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred436_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index170_47);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA170_48 = input.LA(1);

                         
                        int index170_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred424_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred433_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred436_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index170_48);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA170_49 = input.LA(1);

                         
                        int index170_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred424_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred433_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred436_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index170_49);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA170_50 = input.LA(1);

                         
                        int index170_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred424_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred433_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred436_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index170_50);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA170_51 = input.LA(1);

                         
                        int index170_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred424_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred433_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred436_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index170_51);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA170_52 = input.LA(1);

                         
                        int index170_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred424_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred433_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred436_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index170_52);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA170_53 = input.LA(1);

                         
                        int index170_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred424_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred436_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index170_53);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA170_54 = input.LA(1);

                         
                        int index170_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred424_ChemicalChunker()) ) {s = 137;}

                        else if ( ((synpred425_ChemicalChunker()||(synpred425_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 133;}

                        else if ( (((synpred436_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||synpred436_ChemicalChunker())) ) {s = 83;}

                        else if ( (synpred437_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index170_54);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA170_55 = input.LA(1);

                         
                        int index170_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred436_ChemicalChunker()) ) {s = 83;}

                        else if ( (synpred437_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index170_55);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA170_56 = input.LA(1);

                         
                        int index170_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred436_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index170_56);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA170_57 = input.LA(1);

                         
                        int index170_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred436_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index170_57);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA170_80 = input.LA(1);

                         
                        int index170_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred432_ChemicalChunker()) ) {s = 79;}

                        else if ( (synpred436_ChemicalChunker()) ) {s = 83;}

                        else if ( (synpred437_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index170_80);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 170, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA175_static {
    static final String DFA175_eotS =
        "\u0092\uffff";
    static final String DFA175_eofS =
        "\1\6\u0091\uffff";
    static final String DFA175_minS =
        "\1\46\5\0\u008c\uffff";
    static final String DFA175_maxS =
        "\1\u00b4\5\0\u008c\uffff";
    static final String DFA175_acceptS =
        "\6\uffff\1\2\u008a\uffff\1\1";
    static final String DFA175_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\u008c\uffff}>";
    static final String[] DFA175_transitionS = {
            "\1\5\144\6\1\1\1\6\1\3\1\6\1\4\2\6\1\2\42\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA175_eot = DFA.unpackEncodedString(DFA175_static.DFA175_eotS);
    static final short[] DFA175_eof = DFA.unpackEncodedString(DFA175_static.DFA175_eofS);
    static final char[] DFA175_min = DFA.unpackEncodedStringToUnsignedChars(DFA175_static.DFA175_minS);
    static final char[] DFA175_max = DFA.unpackEncodedStringToUnsignedChars(DFA175_static.DFA175_maxS);
    static final short[] DFA175_accept = DFA.unpackEncodedString(DFA175_static.DFA175_acceptS);
    static final short[] DFA175_special = DFA.unpackEncodedString(DFA175_static.DFA175_specialS);
    static final short[][] DFA175_transition;

    static {
        int numStates = DFA175_static.DFA175_transitionS.length;
        DFA175_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA175_transition[i] = DFA.unpackEncodedString(DFA175_static.DFA175_transitionS[i]);
        }
    }

    class DFA175 extends DFA {

        public DFA175(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 175;
            this.eot = DFA175_eot;
            this.eof = DFA175_eof;
            this.min = DFA175_min;
            this.max = DFA175_max;
            this.accept = DFA175_accept;
            this.special = DFA175_special;
            this.transition = DFA175_transition;
        }
        public String getDescription() {
            return "389:31: ( allIdentifierTypes )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA175_1 = input.LA(1);

                         
                        int index175_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred445_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index175_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA175_2 = input.LA(1);

                         
                        int index175_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred445_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index175_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA175_3 = input.LA(1);

                         
                        int index175_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred445_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index175_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA175_4 = input.LA(1);

                         
                        int index175_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred445_ChemicalChunker()||(synpred445_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index175_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA175_5 = input.LA(1);

                         
                        int index175_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred445_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index175_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 175, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA178_static {
    static final String DFA178_eotS =
        "\u0093\uffff";
    static final String DFA178_eofS =
        "\1\1\u0092\uffff";
    static final String DFA178_minS =
        "\1\46\2\uffff\1\0\13\uffff\1\0\10\uffff\1\0\16\uffff\1\0\41\uffff"+
        "\1\0\1\uffff\1\0\13\uffff\1\0\73\uffff";
    static final String DFA178_maxS =
        "\1\u00b4\2\uffff\1\0\13\uffff\1\0\10\uffff\1\0\16\uffff\1\0\41"+
        "\uffff\1\0\1\uffff\1\0\13\uffff\1\0\73\uffff";
    static final String DFA178_acceptS =
        "\1\uffff\1\3\u008f\uffff\1\1\1\2";
    static final String DFA178_specialS =
        "\3\uffff\1\0\13\uffff\1\1\10\uffff\1\2\16\uffff\1\3\41\uffff\1"+
        "\4\1\uffff\1\5\13\uffff\1\6\73\uffff}>";
    static final String[] DFA178_transitionS = {
            "\22\1\1\111\2\1\1\127\20\1\1\47\6\1\1\30\60\1\1\113\1\3\11"+
            "\1\1\17\45\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA178_eot = DFA.unpackEncodedString(DFA178_static.DFA178_eotS);
    static final short[] DFA178_eof = DFA.unpackEncodedString(DFA178_static.DFA178_eofS);
    static final char[] DFA178_min = DFA.unpackEncodedStringToUnsignedChars(DFA178_static.DFA178_minS);
    static final char[] DFA178_max = DFA.unpackEncodedStringToUnsignedChars(DFA178_static.DFA178_maxS);
    static final short[] DFA178_accept = DFA.unpackEncodedString(DFA178_static.DFA178_acceptS);
    static final short[] DFA178_special = DFA.unpackEncodedString(DFA178_static.DFA178_specialS);
    static final short[][] DFA178_transition;

    static {
        int numStates = DFA178_static.DFA178_transitionS.length;
        DFA178_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA178_transition[i] = DFA.unpackEncodedString(DFA178_static.DFA178_transitionS[i]);
        }
    }

    class DFA178 extends DFA {

        public DFA178(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 178;
            this.eot = DFA178_eot;
            this.eof = DFA178_eof;
            this.min = DFA178_min;
            this.max = DFA178_max;
            this.accept = DFA178_accept;
            this.special = DFA178_special;
            this.transition = DFA178_transition;
        }
        public String getDescription() {
            return "()* loopback of 389:83: ( ( comma | colon | inof | infrom )? submethod | lrb submethod rrb )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA178_3 = input.LA(1);

                         
                        int index178_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred451_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index178_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA178_15 = input.LA(1);

                         
                        int index178_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred452_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index178_15);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA178_24 = input.LA(1);

                         
                        int index178_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred451_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index178_24);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA178_39 = input.LA(1);

                         
                        int index178_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred451_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index178_39);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA178_73 = input.LA(1);

                         
                        int index178_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred451_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index178_73);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA178_75 = input.LA(1);

                         
                        int index178_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred451_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index178_75);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA178_87 = input.LA(1);

                         
                        int index178_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred451_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index178_87);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 178, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA203_static {
    static final String DFA203_eotS =
        "\110\uffff";
    static final String DFA203_eofS =
        "\110\uffff";
    static final String DFA203_minS =
        "\1\46\17\uffff\1\0\67\uffff";
    static final String DFA203_maxS =
        "\1\u00b4\17\uffff\1\0\67\uffff";
    static final String DFA203_acceptS =
        "\1\uffff\1\2\105\uffff\1\1";
    static final String DFA203_specialS =
        "\20\uffff\1\0\67\uffff}>";
    static final String[] DFA203_transitionS = {
            "\6\1\1\uffff\2\1\20\uffff\2\1\1\uffff\1\1\1\uffff\21\1\4\uffff"+
            "\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff"+
            "\1\1\2\uffff\1\20\5\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\107\4\1\1\uffff\4\1\1\uffff\15\1\10\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA203_eot = DFA.unpackEncodedString(DFA203_static.DFA203_eotS);
    static final short[] DFA203_eof = DFA.unpackEncodedString(DFA203_static.DFA203_eofS);
    static final char[] DFA203_min = DFA.unpackEncodedStringToUnsignedChars(DFA203_static.DFA203_minS);
    static final char[] DFA203_max = DFA.unpackEncodedStringToUnsignedChars(DFA203_static.DFA203_maxS);
    static final short[] DFA203_accept = DFA.unpackEncodedString(DFA203_static.DFA203_acceptS);
    static final short[] DFA203_special = DFA.unpackEncodedString(DFA203_static.DFA203_specialS);
    static final short[][] DFA203_transition;

    static {
        int numStates = DFA203_static.DFA203_transitionS.length;
        DFA203_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA203_transition[i] = DFA.unpackEncodedString(DFA203_static.DFA203_transitionS[i]);
        }
    }

    class DFA203 extends DFA {

        public DFA203(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 203;
            this.eot = DFA203_eot;
            this.eof = DFA203_eof;
            this.min = DFA203_min;
            this.max = DFA203_max;
            this.accept = DFA203_accept;
            this.special = DFA203_special;
            this.transition = DFA203_transition;
        }
        public String getDescription() {
            return "()* loopback of 196:35: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA203_16 = input.LA(1);

                         
                        int index203_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index203_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 203, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA215_static {
    static final String DFA215_eotS =
        "\27\uffff";
    static final String DFA215_eofS =
        "\27\uffff";
    static final String DFA215_minS =
        "\1\47\15\uffff\1\0\10\uffff";
    static final String DFA215_maxS =
        "\1\u009c\15\uffff\1\0\10\uffff";
    static final String DFA215_acceptS =
        "\1\uffff\1\2\24\uffff\1\1";
    static final String DFA215_specialS =
        "\16\uffff\1\0\10\uffff}>";
    static final String[] DFA215_transitionS = {
            "\2\1\4\uffff\2\1\20\uffff\1\1\7\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\6\uffff\1\1\4\uffff\1\1\12\uffff\1\1\35\uffff\1\1\2\uffff"+
            "\1\16\5\uffff\1\1\3\uffff\1\1\1\uffff\1\26\2\1\3\uffff\3\1\2"+
            "\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA215_eot = DFA.unpackEncodedString(DFA215_static.DFA215_eotS);
    static final short[] DFA215_eof = DFA.unpackEncodedString(DFA215_static.DFA215_eofS);
    static final char[] DFA215_min = DFA.unpackEncodedStringToUnsignedChars(DFA215_static.DFA215_minS);
    static final char[] DFA215_max = DFA.unpackEncodedStringToUnsignedChars(DFA215_static.DFA215_maxS);
    static final short[] DFA215_accept = DFA.unpackEncodedString(DFA215_static.DFA215_acceptS);
    static final short[] DFA215_special = DFA.unpackEncodedString(DFA215_static.DFA215_specialS);
    static final short[][] DFA215_transition;

    static {
        int numStates = DFA215_static.DFA215_transitionS.length;
        DFA215_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA215_transition[i] = DFA.unpackEncodedString(DFA215_static.DFA215_transitionS[i]);
        }
    }

    class DFA215 extends DFA {

        public DFA215(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 215;
            this.eot = DFA215_eot;
            this.eof = DFA215_eof;
            this.min = DFA215_min;
            this.max = DFA215_max;
            this.accept = DFA215_accept;
            this.special = DFA215_special;
            this.transition = DFA215_transition;
        }
        public String getDescription() {
            return "()* loopback of 263:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA215_14 = input.LA(1);

                         
                        int index215_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index215_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 215, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    static class FOLLOW_sentence_in_document202_static {
    public static final BitSet FOLLOW_sentence_in_document202 = new BitSet(new long[]{0xFFFFFFC000000002L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFDFFL});

    }static class FOLLOW_procedureNounPhrase_in_sentence222_static {
    public static final BitSet FOLLOW_procedureNounPhrase_in_sentence222 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});

    }static class FOLLOW_sentenceStructure_in_sentence227_static {
    public static final BitSet FOLLOW_sentenceStructure_in_sentence227 = new BitSet(new long[]{0xFFFFFFC000000002L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});

    }static class FOLLOW_unmatchedPhrase_in_sentence229_static {
    public static final BitSet FOLLOW_unmatchedPhrase_in_sentence229 = new BitSet(new long[]{0xFFFFFFC000000002L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});

    }static class FOLLOW_stop_in_sentence234_static {
    public static final BitSet FOLLOW_stop_in_sentence234 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});

    }static class FOLLOW_nounphrase_in_sentenceStructure244_static {
    public static final BitSet FOLLOW_nounphrase_in_sentenceStructure244 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEE8BFL});

    }static class FOLLOW_verbphrase_in_sentenceStructure246_static {
    public static final BitSet FOLLOW_verbphrase_in_sentenceStructure246 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEE8BFL});

    }static class FOLLOW_prepphrase_in_sentenceStructure248_static {
    public static final BitSet FOLLOW_prepphrase_in_sentenceStructure248 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEE8BFL});

    }static class FOLLOW_prepphraseAfter_in_sentenceStructure250_static {
    public static final BitSet FOLLOW_prepphraseAfter_in_sentenceStructure250 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEE8BFL});

    }static class FOLLOW_advAdj_in_sentenceStructure255_static {
    public static final BitSet FOLLOW_advAdj_in_sentenceStructure255 = new BitSet(new long[]{0x0000218000000002L,0x0000000000000000L,0x000000F003820038L});

    }static class FOLLOW_colon_in_sentenceStructure257_static {
    public static final BitSet FOLLOW_colon_in_sentenceStructure257 = new BitSet(new long[]{0x0000218000000002L,0x0000000000000000L,0x000000F003820038L});

    }static class FOLLOW_conjunction_in_sentenceStructure262_static {
    public static final BitSet FOLLOW_conjunction_in_sentenceStructure262 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020028L});

    }static class FOLLOW_rbconj_in_sentenceStructure264_static {
    public static final BitSet FOLLOW_rbconj_in_sentenceStructure264 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020028L});

    }static class FOLLOW_comma_in_sentenceStructure266_static {
    public static final BitSet FOLLOW_comma_in_sentenceStructure266 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020028L});

    }static class FOLLOW_unmatchedToken_in_unmatchedPhrase278_static {
    public static final BitSet FOLLOW_unmatchedToken_in_unmatchedPhrase278 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_unmatchedToken297_static {
    public static final BitSet FOLLOW_numeric_in_unmatchedToken297 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_unmatchedToken299_static {
    public static final BitSet FOLLOW_advAdj_in_unmatchedToken299 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_tmunicode_in_unmatchedToken301_static {
    public static final BitSet FOLLOW_tmunicode_in_unmatchedToken301 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdunicode_in_unmatchedToken303_static {
    public static final BitSet FOLLOW_cdunicode_in_unmatchedToken303 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjcomp_in_unmatchedToken305_static {
    public static final BitSet FOLLOW_jjcomp_in_unmatchedToken305 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_unmatchedToken307_static {
    public static final BitSet FOLLOW_inAll_in_unmatchedToken307 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_unmatchedToken311_static {
    public static final BitSet FOLLOW_nnexample_in_unmatchedToken311 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_unmatchedToken313_static {
    public static final BitSet FOLLOW_nnstate_in_unmatchedToken313 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_unmatchedToken315_static {
    public static final BitSet FOLLOW_nntime_in_unmatchedToken315 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmass_in_unmatchedToken317_static {
    public static final BitSet FOLLOW_nnmass_in_unmatchedToken317 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmolar_in_unmatchedToken319_static {
    public static final BitSet FOLLOW_nnmolar_in_unmatchedToken319 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnamount_in_unmatchedToken321_static {
    public static final BitSet FOLLOW_nnamount_in_unmatchedToken321 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_unmatchedToken323_static {
    public static final BitSet FOLLOW_nnatmosphere_in_unmatchedToken323 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nneq_in_unmatchedToken325_static {
    public static final BitSet FOLLOW_nneq_in_unmatchedToken325 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvol_in_unmatchedToken327_static {
    public static final BitSet FOLLOW_nnvol_in_unmatchedToken327 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_unmatchedToken329_static {
    public static final BitSet FOLLOW_nnchementity_in_unmatchedToken329 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_unmatchedToken331_static {
    public static final BitSet FOLLOW_nntemp_in_unmatchedToken331 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_unmatchedToken333_static {
    public static final BitSet FOLLOW_nnph_in_unmatchedToken333 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnflash_in_unmatchedToken335_static {
    public static final BitSet FOLLOW_nnflash_in_unmatchedToken335 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_unmatchedToken337_static {
    public static final BitSet FOLLOW_nngeneral_in_unmatchedToken337 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmethod_in_unmatchedToken339_static {
    public static final BitSet FOLLOW_nnmethod_in_unmatchedToken339 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_unmatchedToken341_static {
    public static final BitSet FOLLOW_nnpressure_in_unmatchedToken341 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncolumn_in_unmatchedToken343_static {
    public static final BitSet FOLLOW_nncolumn_in_unmatchedToken343 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchromatography_in_unmatchedToken345_static {
    public static final BitSet FOLLOW_nnchromatography_in_unmatchedToken345 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvacuum_in_unmatchedToken347_static {
    public static final BitSet FOLLOW_nnvacuum_in_unmatchedToken347 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncycle_in_unmatchedToken349_static {
    public static final BitSet FOLLOW_nncycle_in_unmatchedToken349 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntimes_in_unmatchedToken351_static {
    public static final BitSet FOLLOW_nntimes_in_unmatchedToken351 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_unmatchedToken355_static {
    public static final BitSet FOLLOW_oscarcm_in_unmatchedToken355 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaronts_in_unmatchedToken357_static {
    public static final BitSet FOLLOW_oscaronts_in_unmatchedToken357 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_unmatchedToken359_static {
    public static final BitSet FOLLOW_oscarase_in_unmatchedToken359 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_unmatchedToken361_static {
    public static final BitSet FOLLOW_verb_in_unmatchedToken361 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_unmatchedToken363_static {
    public static final BitSet FOLLOW_nnadd_in_unmatchedToken363 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_unmatchedToken365_static {
    public static final BitSet FOLLOW_nnmixture_in_unmatchedToken365 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnapparatus_in_unmatchedToken367_static {
    public static final BitSet FOLLOW_nnapparatus_in_unmatchedToken367 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnconcentrate_in_unmatchedToken369_static {
    public static final BitSet FOLLOW_nnconcentrate_in_unmatchedToken369 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nndry_in_unmatchedToken371_static {
    public static final BitSet FOLLOW_nndry_in_unmatchedToken371 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnextract_in_unmatchedToken373_static {
    public static final BitSet FOLLOW_nnextract_in_unmatchedToken373 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnfilter_in_unmatchedToken375_static {
    public static final BitSet FOLLOW_nnfilter_in_unmatchedToken375 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnprecipitate_in_unmatchedToken377_static {
    public static final BitSet FOLLOW_nnprecipitate_in_unmatchedToken377 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpurify_in_unmatchedToken379_static {
    public static final BitSet FOLLOW_nnpurify_in_unmatchedToken379 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnremove_in_unmatchedToken381_static {
    public static final BitSet FOLLOW_nnremove_in_unmatchedToken381 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnsynthesize_in_unmatchedToken383_static {
    public static final BitSet FOLLOW_nnsynthesize_in_unmatchedToken383 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_unmatchedToken385_static {
    public static final BitSet FOLLOW_nnyield_in_unmatchedToken385 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_unmatchedToken387_static {
    public static final BitSet FOLLOW_colon_in_unmatchedToken387 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apost_in_unmatchedToken389_static {
    public static final BitSet FOLLOW_apost_in_unmatchedToken389 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_unmatchedToken391_static {
    public static final BitSet FOLLOW_neg_in_unmatchedToken391 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_unmatchedToken393_static {
    public static final BitSet FOLLOW_dash_in_unmatchedToken393 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percentsign_in_unmatchedToken395_static {
    public static final BitSet FOLLOW_percentsign_in_unmatchedToken395 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_unmatchedToken397_static {
    public static final BitSet FOLLOW_lsqb_in_unmatchedToken397 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rsqb_in_unmatchedToken399_static {
    public static final BitSet FOLLOW_rsqb_in_unmatchedToken399 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_unmatchedToken401_static {
    public static final BitSet FOLLOW_lrb_in_unmatchedToken401 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rrb_in_unmatchedToken403_static {
    public static final BitSet FOLLOW_rrb_in_unmatchedToken403 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_unmatchedToken407_static {
    public static final BitSet FOLLOW_cc_in_unmatchedToken407 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_unmatchedToken409_static {
    public static final BitSet FOLLOW_dt_in_unmatchedToken409 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dtTHE_in_unmatchedToken411_static {
    public static final BitSet FOLLOW_dtTHE_in_unmatchedToken411 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_unmatchedToken413_static {
    public static final BitSet FOLLOW_fw_in_unmatchedToken413 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_unmatchedToken415_static {
    public static final BitSet FOLLOW_md_in_unmatchedToken415 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_unmatchedToken417_static {
    public static final BitSet FOLLOW_nn_in_unmatchedToken417 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nns_in_unmatchedToken419_static {
    public static final BitSet FOLLOW_nns_in_unmatchedToken419 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_unmatchedToken421_static {
    public static final BitSet FOLLOW_nnp_in_unmatchedToken421 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_in_unmatchedToken423_static {
    public static final BitSet FOLLOW_prp_in_unmatchedToken423 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_poss_in_unmatchedToken425_static {
    public static final BitSet FOLLOW_prp_poss_in_unmatchedToken425 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbconj_in_unmatchedToken427_static {
    public static final BitSet FOLLOW_rbconj_in_unmatchedToken427 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_unmatchedToken429_static {
    public static final BitSet FOLLOW_sym_in_unmatchedToken429 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_uh_in_unmatchedToken431_static {
    public static final BitSet FOLLOW_uh_in_unmatchedToken431 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_clause_in_unmatchedToken433_static {
    public static final BitSet FOLLOW_clause_in_unmatchedToken433 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_unmatchedToken435_static {
    public static final BitSet FOLLOW_comma_in_unmatchedToken435 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ls_in_unmatchedToken437_static {
    public static final BitSet FOLLOW_ls_in_unmatchedToken437 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnps_in_unmatchedToken439_static {
    public static final BitSet FOLLOW_nnps_in_unmatchedToken439 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pos_in_unmatchedToken441_static {
    public static final BitSet FOLLOW_pos_in_unmatchedToken441 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnidentifier_in_unmatchedToken443_static {
    public static final BitSet FOLLOW_nnidentifier_in_unmatchedToken443 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_headingProcedure_in_procedureNounPhrase456_static {
    public static final BitSet FOLLOW_headingProcedure_in_procedureNounPhrase456 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_headingProcedureRequiringTerminator_in_headingProcedure475_static {
    public static final BitSet FOLLOW_headingProcedureRequiringTerminator_in_headingProcedure475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010210L});

    }static class FOLLOW_headingProcedureTerminators_in_headingProcedure477_static {
    public static final BitSet FOLLOW_headingProcedureTerminators_in_headingProcedure477 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedHeadingProcedure_in_headingProcedure481_static {
    public static final BitSet FOLLOW_bracketedHeadingProcedure_in_headingProcedure481 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010210L});

    }static class FOLLOW_headingProcedureTerminators_in_headingProcedure483_static {
    public static final BitSet FOLLOW_headingProcedureTerminators_in_headingProcedure483 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnidentifier_in_headingProcedureRequiringTerminator494_static {
    public static final BitSet FOLLOW_nnidentifier_in_headingProcedureRequiringTerminator494 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_headingProcedureRequiringTerminator496_static {
    public static final BitSet FOLLOW_numeric_in_headingProcedureRequiringTerminator496 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedIdentifier_in_bracketedHeadingProcedure519_static {
    public static final BitSet FOLLOW_bracketedIdentifier_in_bracketedHeadingProcedure519 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedNumeric_in_bracketedHeadingProcedure523_static {
    public static final BitSet FOLLOW_bracketedNumeric_in_bracketedHeadingProcedure523 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_bracketedHeadingProcedure527_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_bracketedHeadingProcedure527 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rrb_in_headingProcedureTerminators552_static {
    public static final BitSet FOLLOW_rrb_in_headingProcedureTerminators552 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_headingProcedureTerminators554_static {
    public static final BitSet FOLLOW_stop_in_headingProcedureTerminators554 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_headingProcedureTerminators556_static {
    public static final BitSet FOLLOW_colon_in_headingProcedureTerminators556 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure_in_nounphrase565_static {
    public static final BitSet FOLLOW_nounphraseStructure_in_nounphrase565 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure1_in_nounphraseStructure584_static {
    public static final BitSet FOLLOW_nounphraseStructure1_in_nounphraseStructure584 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure2_in_nounphraseStructure586_static {
    public static final BitSet FOLLOW_nounphraseStructure2_in_nounphraseStructure586 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_multiApparatus_in_nounphraseStructure1595_static {
    public static final BitSet FOLLOW_multiApparatus_in_nounphraseStructure1595 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dtTHE_in_nounphraseStructure2612_static {
    public static final BitSet FOLLOW_dtTHE_in_nounphraseStructure2612 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_dt_in_nounphraseStructure2615_static {
    public static final BitSet FOLLOW_dt_in_nounphraseStructure2615 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_nounphraseContent_in_nounphraseStructure2618_static {
    public static final BitSet FOLLOW_nounphraseContent_in_nounphraseStructure2618 = new BitSet(new long[]{0x81046FC000000002L,0x68A0A850061FFFF5L,0x001E01FFF7BEE824L});

    }static class FOLLOW_conjunction_in_nounphraseStructure2622_static {
    public static final BitSet FOLLOW_conjunction_in_nounphraseStructure2622 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BEE824L});

    }static class FOLLOW_nounphraseContent_in_nounphraseStructure2625_static {
    public static final BitSet FOLLOW_nounphraseContent_in_nounphraseStructure2625 = new BitSet(new long[]{0x81046FC000000002L,0x68A0A850061FFFF5L,0x001E01FFF7BEE824L});

    }static class FOLLOW_prepphraseOf_in_nounphraseStructure2632_static {
    public static final BitSet FOLLOW_prepphraseOf_in_nounphraseStructure2632 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_nounphraseStructure2635_static {
    public static final BitSet FOLLOW_prepphraseIN_in_nounphraseStructure2635 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_nounphraseContent647_static {
    public static final BitSet FOLLOW_advAdj_in_nounphraseContent647 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_dissolvePhrase_in_nounphraseContent652_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseContent652 = new BitSet(new long[]{0x80006FC000000002L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_ratioOrBracketedRatio_in_nounphraseContent654_static {
    public static final BitSet FOLLOW_ratioOrBracketedRatio_in_nounphraseContent654 = new BitSet(new long[]{0x80006FC000000002L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_noun_in_nounphraseContent656_static {
    public static final BitSet FOLLOW_noun_in_nounphraseContent656 = new BitSet(new long[]{0x80006FC000000002L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_numeric_in_nounphraseContent658_static {
    public static final BitSet FOLLOW_numeric_in_nounphraseContent658 = new BitSet(new long[]{0x80006FC000000002L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_bracketedContent_in_nounphraseContent660_static {
    public static final BitSet FOLLOW_bracketedContent_in_nounphraseContent660 = new BitSet(new long[]{0x80006FC000000002L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_dissolveStructure_in_dissolvePhrase672_static {
    public static final BitSet FOLLOW_dissolveStructure_in_dissolvePhrase672 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_dissolvePhrase674_static {
    public static final BitSet FOLLOW_lrb_in_dissolvePhrase674 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_dissolveStructure_in_dissolvePhrase676_static {
    public static final BitSet FOLLOW_dissolveStructure_in_dissolvePhrase676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_dissolvePhrase678_static {
    public static final BitSet FOLLOW_rrb_in_dissolvePhrase678 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_dissolveStructure703_static {
    public static final BitSet FOLLOW_adj_in_dissolveStructure703 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_nnp_in_dissolveStructure707_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nnchementity_in_dissolveStructure709_static {
    public static final BitSet FOLLOW_nnchementity_in_dissolveStructure709 = new BitSet(new long[]{0x0004000000000000L});

    }static class FOLLOW_nnp_in_dissolveStructure712_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure712 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_molecule_in_dissolveStructure715_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure715 = new BitSet(new long[]{0x0004000000000000L});

    }static class FOLLOW_unnamedmolecule_in_dissolveStructure717_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure717 = new BitSet(new long[]{0x0004000000000000L});

    }static class FOLLOW_inMolecule_in_dissolveStructure721_static {
    public static final BitSet FOLLOW_inMolecule_in_dissolveStructure721 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020020L});

    }static class FOLLOW_conjunction_in_dissolveStructure724_static {
    public static final BitSet FOLLOW_conjunction_in_dissolveStructure724 = new BitSet(new long[]{0x800061C000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_molecule_in_dissolveStructure726_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure726 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020020L});

    }static class FOLLOW_inin_in_inMolecule738_static {
    public static final BitSet FOLLOW_inin_in_inMolecule738 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384E824L});

    }static class FOLLOW_dtTHE_in_inMolecule740_static {
    public static final BitSet FOLLOW_dtTHE_in_inMolecule740 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_adj_in_inMolecule743_static {
    public static final BitSet FOLLOW_adj_in_inMolecule743 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_nnp_in_inMolecule746_static {
    public static final BitSet FOLLOW_nnp_in_inMolecule746 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_molecule_in_inMolecule750_static {
    public static final BitSet FOLLOW_molecule_in_inMolecule750 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_inMolecule752_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_inMolecule752 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verbphraseStructure_in_verbphrase762_static {
    public static final BitSet FOLLOW_verbphraseStructure_in_verbphrase762 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_verbphraseStructure780_static {
    public static final BitSet FOLLOW_dt_in_verbphraseStructure780 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_to_in_verbphraseStructure783_static {
    public static final BitSet FOLLOW_to_in_verbphraseStructure783 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_inAll_in_verbphraseStructure786_static {
    public static final BitSet FOLLOW_inAll_in_verbphraseStructure786 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_inafter_in_verbphraseStructure789_static {
    public static final BitSet FOLLOW_inafter_in_verbphraseStructure789 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_md_in_verbphraseStructure793_static {
    public static final BitSet FOLLOW_md_in_verbphraseStructure793 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_rbconj_in_verbphraseStructure796_static {
    public static final BitSet FOLLOW_rbconj_in_verbphraseStructure796 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_adv_in_verbphraseStructure799_static {
    public static final BitSet FOLLOW_adv_in_verbphraseStructure799 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_adj_in_verbphraseStructure802_static {
    public static final BitSet FOLLOW_adj_in_verbphraseStructure802 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_verb_in_verbphraseStructure805_static {
    public static final BitSet FOLLOW_verb_in_verbphraseStructure805 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_md_in_verbphraseStructure808_static {
    public static final BitSet FOLLOW_md_in_verbphraseStructure808 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_adv_in_verbphraseStructure811_static {
    public static final BitSet FOLLOW_adv_in_verbphraseStructure811 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_adj_in_verbphraseStructure814_static {
    public static final BitSet FOLLOW_adj_in_verbphraseStructure814 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_neg_in_verbphraseStructure817_static {
    public static final BitSet FOLLOW_neg_in_verbphraseStructure817 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_inoff_in_verbphraseStructure823_static {
    public static final BitSet FOLLOW_inoff_in_verbphraseStructure823 = new BitSet(new long[]{0x7FFFA18000000002L,0x0000000000000101L,0x000002F003CE00A0L});

    }static class FOLLOW_cc_in_verbphraseStructure827_static {
    public static final BitSet FOLLOW_cc_in_verbphraseStructure827 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC00A0L});

    }static class FOLLOW_comma_in_verbphraseStructure830_static {
    public static final BitSet FOLLOW_comma_in_verbphraseStructure830 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC0080L});

    }static class FOLLOW_prepphrase_in_verbphraseStructure833_static {
    public static final BitSet FOLLOW_prepphrase_in_verbphraseStructure833 = new BitSet(new long[]{0x7FFFA18000000002L,0x0000000000000101L,0x000002F003CE00A0L});

    }static class FOLLOW_vb_in_verb845_static {
    public static final BitSet FOLLOW_vb_in_verb845 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbp_in_verb847_static {
    public static final BitSet FOLLOW_vbp_in_verb847 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbg_in_verb849_static {
    public static final BitSet FOLLOW_vbg_in_verb849 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbd_in_verb851_static {
    public static final BitSet FOLLOW_vbd_in_verb851 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbz_in_verb853_static {
    public static final BitSet FOLLOW_vbz_in_verb853 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbn_in_verb855_static {
    public static final BitSet FOLLOW_vbn_in_verb855 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbuse_in_verb857_static {
    public static final BitSet FOLLOW_vbuse_in_verb857 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsubmerge_in_verb859_static {
    public static final BitSet FOLLOW_vbsubmerge_in_verb859 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbimmerse_in_verb861_static {
    public static final BitSet FOLLOW_vbimmerse_in_verb861 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_degassMultiVerb_in_verb863_static {
    public static final BitSet FOLLOW_degassMultiVerb_in_verb863 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsubject_in_verb865_static {
    public static final BitSet FOLLOW_vbsubject_in_verb865 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbadd_in_verb867_static {
    public static final BitSet FOLLOW_vbadd_in_verb867 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdilute_in_verb869_static {
    public static final BitSet FOLLOW_vbdilute_in_verb869 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcharge_in_verb871_static {
    public static final BitSet FOLLOW_vbcharge_in_verb871 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcontain_in_verb873_static {
    public static final BitSet FOLLOW_vbcontain_in_verb873 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdrop_in_verb875_static {
    public static final BitSet FOLLOW_vbdrop_in_verb875 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbfill_in_verb877_static {
    public static final BitSet FOLLOW_vbfill_in_verb877 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsuspend_in_verb879_static {
    public static final BitSet FOLLOW_vbsuspend_in_verb879 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbtreat_in_verb881_static {
    public static final BitSet FOLLOW_vbtreat_in_verb881 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbapparatus_in_verb883_static {
    public static final BitSet FOLLOW_vbapparatus_in_verb883 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbconcentrate_in_verb885_static {
    public static final BitSet FOLLOW_vbconcentrate_in_verb885 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcool_in_verb887_static {
    public static final BitSet FOLLOW_vbcool_in_verb887 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_verb889_static {
    public static final BitSet FOLLOW_vbdegass_in_verb889 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdissolve_in_verb891_static {
    public static final BitSet FOLLOW_vbdissolve_in_verb891 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdry_in_verb893_static {
    public static final BitSet FOLLOW_vbdry_in_verb893 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbextract_in_verb895_static {
    public static final BitSet FOLLOW_vbextract_in_verb895 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbfilter_in_verb897_static {
    public static final BitSet FOLLOW_vbfilter_in_verb897 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbheat_in_verb900_static {
    public static final BitSet FOLLOW_vbheat_in_verb900 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbincrease_in_verb902_static {
    public static final BitSet FOLLOW_vbincrease_in_verb902 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbpartition_in_verb904_static {
    public static final BitSet FOLLOW_vbpartition_in_verb904 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbprecipitate_in_verb906_static {
    public static final BitSet FOLLOW_vbprecipitate_in_verb906 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbpurify_in_verb908_static {
    public static final BitSet FOLLOW_vbpurify_in_verb908 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbquench_in_verb910_static {
    public static final BitSet FOLLOW_vbquench_in_verb910 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbrecover_in_verb912_static {
    public static final BitSet FOLLOW_vbrecover_in_verb912 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbremove_in_verb914_static {
    public static final BitSet FOLLOW_vbremove_in_verb914 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbstir_in_verb916_static {
    public static final BitSet FOLLOW_vbstir_in_verb916 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsynthesize_in_verb918_static {
    public static final BitSet FOLLOW_vbsynthesize_in_verb918 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbwait_in_verb920_static {
    public static final BitSet FOLLOW_vbwait_in_verb920 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbwash_in_verb922_static {
    public static final BitSet FOLLOW_vbwash_in_verb922 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbyield_in_verb924_static {
    public static final BitSet FOLLOW_vbyield_in_verb924 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbchange_in_verb926_static {
    public static final BitSet FOLLOW_vbchange_in_verb926 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_degassMultiVerb935_static {
    public static final BitSet FOLLOW_vbdegass_in_degassMultiVerb935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_cc_in_degassMultiVerb937_static {
    public static final BitSet FOLLOW_cc_in_degassMultiVerb937 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});

    }static class FOLLOW_vbfill_in_degassMultiVerb939_static {
    public static final BitSet FOLLOW_vbfill_in_degassMultiVerb939 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounStructure_in_noun948_static {
    public static final BitSet FOLLOW_nounStructure_in_noun948 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_noun951_static {
    public static final BitSet FOLLOW_dash_in_noun951 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_nounStructure_in_noun953_static {
    public static final BitSet FOLLOW_nounStructure_in_noun953 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_prp_in_nounStructure964_static {
    public static final BitSet FOLLOW_prp_in_nounStructure964 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_poss_in_nounStructure966_static {
    public static final BitSet FOLLOW_prp_poss_in_nounStructure966 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_nounStructure968_static {
    public static final BitSet FOLLOW_citation_in_nounStructure968 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycles_in_nounStructure970_static {
    public static final BitSet FOLLOW_cycles_in_nounStructure970 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_nounStructure972_static {
    public static final BitSet FOLLOW_molecule_in_nounStructure972 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_nounStructure974_static {
    public static final BitSet FOLLOW_apparatus_in_nounStructure974 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_nounStructure976_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_nounStructure976 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_nounStructure978_static {
    public static final BitSet FOLLOW_nnstate_in_nounStructure978 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_procedureNode_in_nounStructure980_static {
    public static final BitSet FOLLOW_procedureNode_in_nounStructure980 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_nounStructure982_static {
    public static final BitSet FOLLOW_nn_in_nounStructure982 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nns_in_nounStructure984_static {
    public static final BitSet FOLLOW_nns_in_nounStructure984 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_nounStructure986_static {
    public static final BitSet FOLLOW_nnp_in_nounStructure986 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_nounStructure988_static {
    public static final BitSet FOLLOW_nnadd_in_nounStructure988 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_preparationphrase_in_nounStructure990_static {
    public static final BitSet FOLLOW_preparationphrase_in_nounStructure990 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_nounStructure992_static {
    public static final BitSet FOLLOW_nnexample_in_nounStructure992 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_range_in_nounStructure994_static {
    public static final BitSet FOLLOW_range_in_nounStructure994 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaronts_in_nounStructure996_static {
    public static final BitSet FOLLOW_oscaronts_in_nounStructure996 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_nounStructure998_static {
    public static final BitSet FOLLOW_nntime_in_nounStructure998 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_nounStructure1000_static {
    public static final BitSet FOLLOW_nnatmosphere_in_nounStructure1000 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_tmunicode_in_nounStructure1002_static {
    public static final BitSet FOLLOW_tmunicode_in_nounStructure1002 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_nounStructure1004_static {
    public static final BitSet FOLLOW_quantity_in_nounStructure1004 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_nounStructure1006_static {
    public static final BitSet FOLLOW_nnchementity_in_nounStructure1006 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_nounStructure1008_static {
    public static final BitSet FOLLOW_nntemp_in_nounStructure1008 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_nounStructure1010_static {
    public static final BitSet FOLLOW_nnph_in_nounStructure1010 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnflash_in_nounStructure1012_static {
    public static final BitSet FOLLOW_nnflash_in_nounStructure1012 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_nounStructure1014_static {
    public static final BitSet FOLLOW_nngeneral_in_nounStructure1014 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnamount_in_nounStructure1016_static {
    public static final BitSet FOLLOW_nnamount_in_nounStructure1016 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nneq_in_nounStructure1018_static {
    public static final BitSet FOLLOW_nneq_in_nounStructure1018 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_nounStructure1020_static {
    public static final BitSet FOLLOW_nnpressure_in_nounStructure1020 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncolumn_in_nounStructure1022_static {
    public static final BitSet FOLLOW_nncolumn_in_nounStructure1022 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchromatography_in_nounStructure1024_static {
    public static final BitSet FOLLOW_nnchromatography_in_nounStructure1024 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvacuum_in_nounStructure1026_static {
    public static final BitSet FOLLOW_nnvacuum_in_nounStructure1026 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncycle_in_nounStructure1028_static {
    public static final BitSet FOLLOW_nncycle_in_nounStructure1028 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntimes_in_nounStructure1030_static {
    public static final BitSet FOLLOW_nntimes_in_nounStructure1030 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnconcentrate_in_nounStructure1032_static {
    public static final BitSet FOLLOW_nnconcentrate_in_nounStructure1032 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvol_in_nounStructure1034_static {
    public static final BitSet FOLLOW_nnvol_in_nounStructure1034 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpurify_in_nounStructure1036_static {
    public static final BitSet FOLLOW_nnpurify_in_nounStructure1036 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnsynthesize_in_nounStructure1038_static {
    public static final BitSet FOLLOW_nnsynthesize_in_nounStructure1038 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_nounStructure1040_static {
    public static final BitSet FOLLOW_nnmixture_in_nounStructure1040 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_nounStructure1042_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_nounStructure1042 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nndry_in_nounStructure1044_static {
    public static final BitSet FOLLOW_nndry_in_nounStructure1044 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnextract_in_nounStructure1046_static {
    public static final BitSet FOLLOW_nnextract_in_nounStructure1046 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnfilter_in_nounStructure1048_static {
    public static final BitSet FOLLOW_nnfilter_in_nounStructure1048 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnprecipitate_in_nounStructure1050_static {
    public static final BitSet FOLLOW_nnprecipitate_in_nounStructure1050 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnremove_in_nounStructure1052_static {
    public static final BitSet FOLLOW_nnremove_in_nounStructure1052 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_nounStructure1054_static {
    public static final BitSet FOLLOW_nnyield_in_nounStructure1054 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_nounStructure1056_static {
    public static final BitSet FOLLOW_fw_in_nounStructure1056 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_nounStructure1058_static {
    public static final BitSet FOLLOW_sym_in_nounStructure1058 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_clause_in_nounStructure1060_static {
    public static final BitSet FOLLOW_clause_in_nounStructure1060 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ls_in_nounStructure1062_static {
    public static final BitSet FOLLOW_ls_in_nounStructure1062 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnps_in_nounStructure1064_static {
    public static final BitSet FOLLOW_nnps_in_nounStructure1064 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pos_in_nounStructure1066_static {
    public static final BitSet FOLLOW_pos_in_nounStructure1066 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_nounStructure1068_static {
    public static final BitSet FOLLOW_oscarase_in_nounStructure1068 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_prepphrase1080_static {
    public static final BitSet FOLLOW_neg_in_prepphrase1080 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC0080L});

    }static class FOLLOW_prepphraseAtmosphere_in_prepphrase1084_static {
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_prepphrase1084 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTime_in_prepphrase1086_static {
    public static final BitSet FOLLOW_prepphraseTime_in_prepphrase1086 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTemp_in_prepphrase1088_static {
    public static final BitSet FOLLOW_prepphraseTemp_in_prepphrase1088 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_prepphrase1090_static {
    public static final BitSet FOLLOW_prepphraseIN_in_prepphrase1090 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseRole_in_prepphrase1092_static {
    public static final BitSet FOLLOW_prepphraseRole_in_prepphrase1092 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseOther_in_prepphrase1094_static {
    public static final BitSet FOLLOW_prepphraseOther_in_prepphrase1094 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1106_static {
    public static final BitSet FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1106 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_prepphraseAtmosphereContent1126_static {
    public static final BitSet FOLLOW_inunder_in_prepphraseAtmosphereContent1126 = new BitSet(new long[]{0x800061C000000000L,0x0000000000100280L,0x000000F0038CA824L});

    }static class FOLLOW_dt_in_prepphraseAtmosphereContent1129_static {
    public static final BitSet FOLLOW_dt_in_prepphraseAtmosphereContent1129 = new BitSet(new long[]{0x800061C000000000L,0x0000000000100280L,0x000000F00384A824L});

    }static class FOLLOW_advAdj_in_prepphraseAtmosphereContent1132_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseAtmosphereContent1132 = new BitSet(new long[]{0x800061C000000000L,0x0000000000100280L,0x000000F00384A824L});

    }static class FOLLOW_molecule_in_prepphraseAtmosphereContent1135_static {
    public static final BitSet FOLLOW_molecule_in_prepphraseAtmosphereContent1135 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});

    }static class FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1137_static {
    public static final BitSet FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1137 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1147_static {
    public static final BitSet FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1147 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepPhraseTimeStructure1165_static {
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1165 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000001L,0x000002F003CC0000L});

    }static class FOLLOW_inAll_in_prepPhraseTimeStructure1168_static {
    public static final BitSet FOLLOW_inAll_in_prepPhraseTimeStructure1168 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000001L,0x000000F0038C0000L});

    }static class FOLLOW_dt_in_prepPhraseTimeStructure1172_static {
    public static final BitSet FOLLOW_dt_in_prepPhraseTimeStructure1172 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000001L,0x000000F003840000L});

    }static class FOLLOW_advAdj_in_prepPhraseTimeStructure1175_static {
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1175 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000001L,0x000000F003840000L});

    }static class FOLLOW_cd_in_prepPhraseTimeStructure1178_static {
    public static final BitSet FOLLOW_cd_in_prepPhraseTimeStructure1178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_nntime_in_prepPhraseTimeStructure1181_static {
    public static final BitSet FOLLOW_nntime_in_prepPhraseTimeStructure1181 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000001L});

    }static class FOLLOW_prepphraseTempContent_in_prepphraseTemp1191_static {
    public static final BitSet FOLLOW_prepphraseTempContent_in_prepphraseTemp1191 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseTempContent1212_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1212 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000100L,0x000002F003CC0000L});

    }static class FOLLOW_inAll_in_prepphraseTempContent1215_static {
    public static final BitSet FOLLOW_inAll_in_prepphraseTempContent1215 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000100L,0x000000F0038C0000L});

    }static class FOLLOW_dt_in_prepphraseTempContent1218_static {
    public static final BitSet FOLLOW_dt_in_prepphraseTempContent1218 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000100L,0x000000F003840000L});

    }static class FOLLOW_advAdj_in_prepphraseTempContent1221_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0000000000040000L});

    }static class FOLLOW_cd_in_prepphraseTempContent1224_static {
    public static final BitSet FOLLOW_cd_in_prepphraseTempContent1224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_nntemp_in_prepphraseTempContent1227_static {
    public static final BitSet FOLLOW_nntemp_in_prepphraseTempContent1227 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});

    }static class FOLLOW_inin_in_prepphraseIN1236_static {
    public static final BitSet FOLLOW_inin_in_prepphraseIN1236 = new BitSet(new long[]{0x800061C000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_molecule_in_prepphraseIN1238_static {
    public static final BitSet FOLLOW_molecule_in_prepphraseIN1238 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_prepphraseRole1259_static {
    public static final BitSet FOLLOW_inas_in_prepphraseRole1259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L,0x0000000000080000L});

    }static class FOLLOW_dt_in_prepphraseRole1261_static {
    public static final BitSet FOLLOW_dt_in_prepphraseRole1261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nnchementity_in_prepphraseRole1264_static {
    public static final BitSet FOLLOW_nnchementity_in_prepphraseRole1264 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseOther1287_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseOther1287 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC0080L});

    }static class FOLLOW_inMost_in_prepphraseOther1290_static {
    public static final BitSet FOLLOW_inMost_in_prepphraseOther1290 = new BitSet(new long[]{0xFFFFEFC000000000L,0x68A0A850061FFFF5L,0x001E03FFF7FCE8A4L});

    }static class FOLLOW_nounphrase_in_prepphraseOther1294_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOther1294 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_prepphraseOf1320_static {
    public static final BitSet FOLLOW_inof_in_prepphraseOf1320 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_nounphrase_in_prepphraseOf1323_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOf1323 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseAfter1345_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseAfter1345 = new BitSet(new long[]{0x0002000000000000L});

    }static class FOLLOW_inafter_in_prepphraseAfter1348_static {
    public static final BitSet FOLLOW_inafter_in_prepphraseAfter1348 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_nounphrase_in_prepphraseAfter1351_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseAfter1351 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsynthesize_in_preparationphrase1376_static {
    public static final BitSet FOLLOW_vbsynthesize_in_preparationphrase1376 = new BitSet(new long[]{0x0000800000000000L});

    }static class FOLLOW_inas_in_preparationphrase1378_static {
    public static final BitSet FOLLOW_inas_in_preparationphrase1378 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000080101L,0x000002F003CC0080L});

    }static class FOLLOW_nnexample_in_preparationphrase1381_static {
    public static final BitSet FOLLOW_nnexample_in_preparationphrase1381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_preparationphrase1383_static {
    public static final BitSet FOLLOW_cd_in_preparationphrase1383 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphrase_in_preparationphrase1386_static {
    public static final BitSet FOLLOW_prepphrase_in_preparationphrase1386 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_multiApparatus1397_static {
    public static final BitSet FOLLOW_apparatus_in_multiApparatus1397 = new BitSet(new long[]{0x800061C000000002L,0x0000001002102280L,0x00000000138EA824L});

    }static class FOLLOW_conjunction_in_multiApparatus1400_static {
    public static final BitSet FOLLOW_conjunction_in_multiApparatus1400 = new BitSet(new long[]{0x800061C000000000L,0x0000001002102280L,0x00000000138EA824L});

    }static class FOLLOW_apparatus_in_multiApparatus1403_static {
    public static final BitSet FOLLOW_apparatus_in_multiApparatus1403 = new BitSet(new long[]{0x800061C000000002L,0x0000001002102280L,0x00000000138EA824L});

    }static class FOLLOW_dt_in_apparatus1414_static {
    public static final BitSet FOLLOW_dt_in_apparatus1414 = new BitSet(new long[]{0x800061C000000000L,0x0000001002102280L,0x00000000138CA824L});

    }static class FOLLOW_preapparatus_in_apparatus1417_static {
    public static final BitSet FOLLOW_preapparatus_in_apparatus1417 = new BitSet(new long[]{0x800061C000000000L,0x0000001002102280L,0x00000000138CA824L});

    }static class FOLLOW_nnApp_in_apparatus1420_static {
    public static final BitSet FOLLOW_nnApp_in_apparatus1420 = new BitSet(new long[]{0x800061C000000002L,0x0000001002102280L,0x00000000138CA824L});

    }static class FOLLOW_nnapparatus_in_nnApp1447_static {
    public static final BitSet FOLLOW_nnapparatus_in_nnApp1447 = new BitSet(new long[]{0x800061C000000002L,0x0000001002102280L,0x00000000138CA924L});

    }static class FOLLOW_dash_in_nnApp1451_static {
    public static final BitSet FOLLOW_dash_in_nnApp1451 = new BitSet(new long[]{0x800061C000000000L,0x0000001002102280L,0x00000000138CA824L});

    }static class FOLLOW_nnapparatus_in_nnApp1453_static {
    public static final BitSet FOLLOW_nnapparatus_in_nnApp1453 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_quantity_in_preapparatus1467_static {
    public static final BitSet FOLLOW_quantity_in_preapparatus1467 = new BitSet(new long[]{0x800061C000000002L,0x0000000002102280L,0x000000001384A824L});

    }static class FOLLOW_adj_in_preapparatus1469_static {
    public static final BitSet FOLLOW_adj_in_preapparatus1469 = new BitSet(new long[]{0x800061C000000002L,0x0000000002102280L,0x000000001384A824L});

    }static class FOLLOW_nnpressure_in_preapparatus1471_static {
    public static final BitSet FOLLOW_nnpressure_in_preapparatus1471 = new BitSet(new long[]{0x800061C000000002L,0x0000000002102280L,0x000000001384A824L});

    }static class FOLLOW_nnadd_in_preapparatus1473_static {
    public static final BitSet FOLLOW_nnadd_in_preapparatus1473 = new BitSet(new long[]{0x800061C000000002L,0x0000000002102280L,0x000000001384A824L});

    }static class FOLLOW_molecule_in_preapparatus1475_static {
    public static final BitSet FOLLOW_molecule_in_preapparatus1475 = new BitSet(new long[]{0x800061C000000002L,0x0000000002102280L,0x000000001384A824L});

    }static class FOLLOW_nnchementity_in_preapparatus1477_static {
    public static final BitSet FOLLOW_nnchementity_in_preapparatus1477 = new BitSet(new long[]{0x800061C000000002L,0x0000000002102280L,0x000000001384A824L});

    }static class FOLLOW_nnstate_in_preapparatus1479_static {
    public static final BitSet FOLLOW_nnstate_in_preapparatus1479 = new BitSet(new long[]{0x800061C000000002L,0x0000000002102280L,0x000000001384A824L});

    }static class FOLLOW_nn_in_preapparatus1481_static {
    public static final BitSet FOLLOW_nn_in_preapparatus1481 = new BitSet(new long[]{0x800061C000000002L,0x0000000002102280L,0x000000001384A824L});

    }static class FOLLOW_oscaront_in_oscaronts1493_static {
    public static final BitSet FOLLOW_oscaront_in_oscaronts1493 = new BitSet(new long[]{0x0000040000000002L});

    }static class FOLLOW_jjcomp_in_oscarCompound1514_static {
    public static final BitSet FOLLOW_jjcomp_in_oscarCompound1514 = new BitSet(new long[]{0x800061C000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_adj_in_oscarCompound1516_static {
    public static final BitSet FOLLOW_adj_in_oscarCompound1516 = new BitSet(new long[]{0x800061C000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_oscarCompoundStructure_in_oscarCompound1520_static {
    public static final BitSet FOLLOW_oscarCompoundStructure_in_oscarCompound1520 = new BitSet(new long[]{0x890067C000000002L,0x2000000004180290L,0x000000004384A826L});

    }static class FOLLOW_adj_in_oscarCompound1522_static {
    public static final BitSet FOLLOW_adj_in_oscarCompound1522 = new BitSet(new long[]{0x890067C000000002L,0x2000000004180290L,0x000000004384A826L});

    }static class FOLLOW_nnstate_in_oscarCompound1525_static {
    public static final BitSet FOLLOW_nnstate_in_oscarCompound1525 = new BitSet(new long[]{0x890067C000000002L,0x2000000004180290L,0x000000004384A826L});

    }static class FOLLOW_numericReferenceOrQuantity_in_oscarCompound1529_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_oscarCompound1529 = new BitSet(new long[]{0x0900000000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_nnchementity_in_oscarCompound1533_static {
    public static final BitSet FOLLOW_nnchementity_in_oscarCompound1533 = new BitSet(new long[]{0x0900000000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_quantity_in_oscarCompound1538_static {
    public static final BitSet FOLLOW_quantity_in_oscarCompound1538 = new BitSet(new long[]{0x0900000000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_fromProcedure_in_oscarCompound1541_static {
    public static final BitSet FOLLOW_fromProcedure_in_oscarCompound1541 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_oscarCompoundStructure1550_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompoundStructure1550 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L,0x0000000000000150L});

    }static class FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1553_static {
    public static final BitSet FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1553 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1558_static {
    public static final BitSet FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1558 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_afterOscarCompoundStructure1581_static {
    public static final BitSet FOLLOW_dash_in_afterOscarCompoundStructure1581 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_afterOscarCompoundStructure1583_static {
    public static final BitSet FOLLOW_oscarcm_in_afterOscarCompoundStructure1583 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_afterOscarCompoundStructure1588_static {
    public static final BitSet FOLLOW_dash_in_afterOscarCompoundStructure1588 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_afterOscarCompoundStructure1607_static {
    public static final BitSet FOLLOW_colon_in_afterOscarCompoundStructure1607 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_afterOscarCompoundStructure1609_static {
    public static final BitSet FOLLOW_oscarcm_in_afterOscarCompoundStructure1609 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L,0x0000000000000010L});

    }static class FOLLOW_dash_in_afterOscarCompoundStructure1615_static {
    public static final BitSet FOLLOW_dash_in_afterOscarCompoundStructure1615 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000140L});

    }static class FOLLOW_apost_in_afterOscarCompoundStructure1617_static {
    public static final BitSet FOLLOW_apost_in_afterOscarCompoundStructure1617 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000140L});

    }static class FOLLOW_lrb_in_bracketedOscarCompoundStructure1626_static {
    public static final BitSet FOLLOW_lrb_in_bracketedOscarCompoundStructure1626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1629_static {
    public static final BitSet FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_bracketedOscarCompoundStructure1632_static {
    public static final BitSet FOLLOW_rrb_in_bracketedOscarCompoundStructure1632 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount_in_molecule1642_static {
    public static final BitSet FOLLOW_moleculeamount_in_molecule1642 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount3_in_moleculeamount1660_static {
    public static final BitSet FOLLOW_moleculeamount3_in_moleculeamount1660 = new BitSet(new long[]{0x0000800000000002L});

    }static class FOLLOW_moleculeamount1_in_moleculeamount1663_static {
    public static final BitSet FOLLOW_moleculeamount1_in_moleculeamount1663 = new BitSet(new long[]{0x0000800000000002L});

    }static class FOLLOW_moleculeamount2_in_moleculeamount1667_static {
    public static final BitSet FOLLOW_moleculeamount2_in_moleculeamount1667 = new BitSet(new long[]{0x0000800000000002L});

    }static class FOLLOW_asAstate_in_moleculeamount1670_static {
    public static final BitSet FOLLOW_asAstate_in_moleculeamount1670 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_moleculeamount31681_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount31681 = new BitSet(new long[]{0x0100004000000000L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_bracketedContentInMol_in_moleculeamount31683_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_moleculeamount31683 = new BitSet(new long[]{0x0100004000000000L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_inof_in_moleculeamount31687_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount31687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000000CC000L});

    }static class FOLLOW_dtTHE_in_moleculeamount31690_static {
    public static final BitSet FOLLOW_dtTHE_in_moleculeamount31690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000048000L});

    }static class FOLLOW_dt_in_moleculeamount31694_static {
    public static final BitSet FOLLOW_dt_in_moleculeamount31694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000048000L});

    }static class FOLLOW_ratioOrBracketedRatio_in_moleculeamount31698_static {
    public static final BitSet FOLLOW_ratioOrBracketedRatio_in_moleculeamount31698 = new BitSet(new long[]{0x800061C000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_bracketedContentInMol_in_moleculeamount31700_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_moleculeamount31700 = new BitSet(new long[]{0x800061C000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_oscarCompound_in_moleculeamount31703_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount31703 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_moleculeamount11713_static {
    public static final BitSet FOLLOW_nnchementity_in_moleculeamount11713 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_nnstate_in_moleculeamount11717_static {
    public static final BitSet FOLLOW_nnstate_in_moleculeamount11717 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_quantity_in_moleculeamount11722_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount11722 = new BitSet(new long[]{0x0100004000000000L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_bracketedContentInMol_in_moleculeamount11724_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_moleculeamount11724 = new BitSet(new long[]{0x0100004000000000L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_inof_in_moleculeamount11728_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount11728 = new BitSet(new long[]{0x800061C000000000L,0x0000000000100280L,0x00000000038CE824L});

    }static class FOLLOW_quantity_in_moleculeamount11731_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount11731 = new BitSet(new long[]{0x810061C000000000L,0x0000000000100280L,0x00000000038CE824L});

    }static class FOLLOW_inof_in_moleculeamount11733_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount11733 = new BitSet(new long[]{0x800061C000000000L,0x0000000000100280L,0x00000000038CE824L});

    }static class FOLLOW_dtTHE_in_moleculeamount11739_static {
    public static final BitSet FOLLOW_dtTHE_in_moleculeamount11739 = new BitSet(new long[]{0x800061C000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_dt_in_moleculeamount11743_static {
    public static final BitSet FOLLOW_dt_in_moleculeamount11743 = new BitSet(new long[]{0x800061C000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_oscarCompound_in_moleculeamount11747_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount11747 = new BitSet(new long[]{0x800061C000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11750_static {
    public static final BitSet FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11750 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_moleculeamount21759_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount21759 = new BitSet(new long[]{0x800061C000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_bracketedContentInMol_in_moleculeamount21761_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_moleculeamount21761 = new BitSet(new long[]{0x800061C000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_oscarCompound_in_moleculeamount21765_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount21765 = new BitSet(new long[]{0x800061C000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21768_static {
    public static final BitSet FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21768 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_afterCompoundCitationOrQuantity1776_static {
    public static final BitSet FOLLOW_citation_in_afterCompoundCitationOrQuantity1776 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_quantity_in_afterCompoundCitationOrQuantity1778_static {
    public static final BitSet FOLLOW_quantity_in_afterCompoundCitationOrQuantity1778 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_comma_in_afterCompoundCitationOrQuantity1780_static {
    public static final BitSet FOLLOW_comma_in_afterCompoundCitationOrQuantity1780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1783_static {
    public static final BitSet FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1783 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1785_static {
    public static final BitSet FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1785 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_bracketedContentInMol_in_afterCompoundCitationOrQuantity1788_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_afterCompoundCitationOrQuantity1788 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1799_static {
    public static final BitSet FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1799 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeDescriptionStart_in_unnamedmoleculeDescription1816_static {
    public static final BitSet FOLLOW_unnamedmoleculeDescriptionStart_in_unnamedmoleculeDescription1816 = new BitSet(new long[]{0x0000804000000000L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_afterCompoundCitationOrQuantity_in_unnamedmoleculeDescription1818_static {
    public static final BitSet FOLLOW_afterCompoundCitationOrQuantity_in_unnamedmoleculeDescription1818 = new BitSet(new long[]{0x0000800000000002L});

    }static class FOLLOW_asAstate_in_unnamedmoleculeDescription1820_static {
    public static final BitSet FOLLOW_asAstate_in_unnamedmoleculeDescription1820 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantityOf_in_unnamedmoleculeDescriptionStart1830_static {
    public static final BitSet FOLLOW_quantityOf_in_unnamedmoleculeDescriptionStart1830 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount1_in_unnamedmoleculeDescriptionStart1833_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount1_in_unnamedmoleculeDescriptionStart1833 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1837_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1837 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1841_static {
    public static final BitSet FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1841 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1847_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1847 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1851_static {
    public static final BitSet FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1851 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_quantityOf1860_static {
    public static final BitSet FOLLOW_quantity_in_quantityOf1860 = new BitSet(new long[]{0x0100000000000002L,0x0000000000000200L,0x00000000000CC004L});

    }static class FOLLOW_inof_in_quantityOf1863_static {
    public static final BitSet FOLLOW_inof_in_quantityOf1863 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000084000L});

    }static class FOLLOW_dtTHE_in_quantityOf1867_static {
    public static final BitSet FOLLOW_dtTHE_in_quantityOf1867 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_quantityOf1871_static {
    public static final BitSet FOLLOW_dt_in_quantityOf1871 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMolecule_in_potentialUnnamedMoleculeAmount11882_static {
    public static final BitSet FOLLOW_potentialUnnamedMolecule_in_potentialUnnamedMoleculeAmount11882 = new BitSet(new long[]{0x0900800000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_quantity_in_potentialUnnamedMoleculeAmount11884_static {
    public static final BitSet FOLLOW_quantity_in_potentialUnnamedMoleculeAmount11884 = new BitSet(new long[]{0x0900800000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount11887_static {
    public static final BitSet FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount11887 = new BitSet(new long[]{0x0900000000000002L,0x2000000000000000L,0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount11890_static {
    public static final BitSet FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount11890 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numberCompoundReference_in_potentialUnnamedMoleculeAmount21901_static {
    public static final BitSet FOLLOW_numberCompoundReference_in_potentialUnnamedMoleculeAmount21901 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21904_static {
    public static final BitSet FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21904 = new BitSet(new long[]{0x0900800000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21908_static {
    public static final BitSet FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21908 = new BitSet(new long[]{0x0900800000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMoleculeAmount21914_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMoleculeAmount21914 = new BitSet(new long[]{0x8900E7C000000000L,0x2000000004180290L,0x000000004384A826L});

    }static class FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMoleculeAmount21917_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMoleculeAmount21917 = new BitSet(new long[]{0x0900800000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21921_static {
    public static final BitSet FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21921 = new BitSet(new long[]{0x0900800000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21925_static {
    public static final BitSet FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21925 = new BitSet(new long[]{0x0900800000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21930_static {
    public static final BitSet FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21930 = new BitSet(new long[]{0x0900800000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21933_static {
    public static final BitSet FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21933 = new BitSet(new long[]{0x0900000000000002L,0x2000000000000000L,0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21936_static {
    public static final BitSet FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21936 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_definiteUnnamedMoleculeStructure_in_definiteUnnamedMolecule1946_static {
    public static final BitSet FOLLOW_definiteUnnamedMoleculeStructure_in_definiteUnnamedMolecule1946 = new BitSet(new long[]{0x0900800000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_quantity_in_definiteUnnamedMolecule1948_static {
    public static final BitSet FOLLOW_quantity_in_definiteUnnamedMolecule1948 = new BitSet(new long[]{0x0900800000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_asAstate_in_definiteUnnamedMolecule1951_static {
    public static final BitSet FOLLOW_asAstate_in_definiteUnnamedMolecule1951 = new BitSet(new long[]{0x0900000000000002L,0x2000000000000000L,0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_definiteUnnamedMolecule1954_static {
    public static final BitSet FOLLOW_fromProcedure_in_definiteUnnamedMolecule1954 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_definiteUnnamedMoleculeStructure1964_static {
    public static final BitSet FOLLOW_adj_in_definiteUnnamedMoleculeStructure1964 = new BitSet(new long[]{0x0000618000000000L,0x0000000000000080L,0x0000000003800000L});

    }static class FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1968_static {
    public static final BitSet FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1968 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_numericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1970_static {
    public static final BitSet FOLLOW_numericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1970 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjcomp_in_definiteUnnamedMoleculeStructure1974_static {
    public static final BitSet FOLLOW_jjcomp_in_definiteUnnamedMoleculeStructure1974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1976_static {
    public static final BitSet FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1976 = new BitSet(new long[]{0x800067C000000002L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_numericReferenceOrQuantity_in_definiteUnnamedMoleculeStructure1978_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_definiteUnnamedMoleculeStructure1978 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_alphanumericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1984_static {
    public static final BitSet FOLLOW_alphanumericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1984 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numberCompoundReference_in_potentialUnnamedMolecule1993_static {
    public static final BitSet FOLLOW_numberCompoundReference_in_potentialUnnamedMolecule1993 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMolecule1997_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMolecule1997 = new BitSet(new long[]{0x800067C000000002L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMolecule1999_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMolecule1999 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2012_static {
    public static final BitSet FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2012 = new BitSet(new long[]{0x8000668000000000L,0x0000000004080010L,0x0000000000800000L});

    }static class FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2014_static {
    public static final BitSet FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2014 = new BitSet(new long[]{0x8000668000000000L,0x0000000004080010L,0x0000000000800000L});

    }static class FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN2016_static {
    public static final BitSet FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN2016 = new BitSet(new long[]{0x8000668000000000L,0x0000000004080010L,0x0000000000800000L});

    }static class FOLLOW_jjcomp_in_potentialUnnamedMoleculeStructureNN2018_static {
    public static final BitSet FOLLOW_jjcomp_in_potentialUnnamedMoleculeStructureNN2018 = new BitSet(new long[]{0x8000668000000000L,0x0000000004080010L,0x0000000000800000L});

    }static class FOLLOW_nnstate_in_potentialUnnamedMoleculeStructureNN2023_static {
    public static final BitSet FOLLOW_nnstate_in_potentialUnnamedMoleculeStructureNN2023 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_referenceToExampleCompound_in_potentialUnnamedMoleculeStructureNN2025_static {
    public static final BitSet FOLLOW_referenceToExampleCompound_in_potentialUnnamedMoleculeStructureNN2025 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaronts_in_potentialUnnamedMoleculeStructureNN2027_static {
    public static final BitSet FOLLOW_oscaronts_in_potentialUnnamedMoleculeStructureNN2027 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_potentialUnnamedMoleculeStructureNN2029_static {
    public static final BitSet FOLLOW_nnatmosphere_in_potentialUnnamedMoleculeStructureNN2029 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_potentialUnnamedMoleculeStructureNN2031_static {
    public static final BitSet FOLLOW_nnmixture_in_potentialUnnamedMoleculeStructureNN2031 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_potentialUnnamedMoleculeStructureNN2033_static {
    public static final BitSet FOLLOW_oscarase_in_potentialUnnamedMoleculeStructureNN2033 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2039_static {
    public static final BitSet FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2039 = new BitSet(new long[]{0x0000208000000000L,0x0000000000000080L,0x0000000000800000L});

    }static class FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2041_static {
    public static final BitSet FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2041 = new BitSet(new long[]{0x0000208000000000L,0x0000000000000080L,0x0000000000800000L});

    }static class FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN2043_static {
    public static final BitSet FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN2043 = new BitSet(new long[]{0x0000208000000000L,0x0000000000000080L,0x0000000000800000L});

    }static class FOLLOW_nnchementity_in_potentialUnnamedMoleculeStructureNN2047_static {
    public static final BitSet FOLLOW_nnchementity_in_potentialUnnamedMoleculeStructureNN2047 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_numericReferenceOrQuantity2057_static {
    public static final BitSet FOLLOW_quantity_in_numericReferenceOrQuantity2057 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericOrIdentifierCompoundReference_in_numericReferenceOrQuantity2061_static {
    public static final BitSet FOLLOW_numericOrIdentifierCompoundReference_in_numericReferenceOrQuantity2061 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_asAstate2070_static {
    public static final BitSet FOLLOW_inas_in_asAstate2070 = new BitSet(new long[]{0x8000208000000000L,0x0000000000000000L,0x0000000000880000L});

    }static class FOLLOW_dt_in_asAstate2072_static {
    public static final BitSet FOLLOW_dt_in_asAstate2072 = new BitSet(new long[]{0x8000208000000000L,0x0000000000000000L,0x0000000000800000L});

    }static class FOLLOW_jj_in_asAstate2076_static {
    public static final BitSet FOLLOW_jj_in_asAstate2076 = new BitSet(new long[]{0x8000208000000000L,0x0000000000000000L,0x0000000000800000L});

    }static class FOLLOW_jjchem_in_asAstate2078_static {
    public static final BitSet FOLLOW_jjchem_in_asAstate2078 = new BitSet(new long[]{0x8000208000000000L,0x0000000000000000L,0x0000000000800000L});

    }static class FOLLOW_oscarcj_in_asAstate2080_static {
    public static final BitSet FOLLOW_oscarcj_in_asAstate2080 = new BitSet(new long[]{0x8000208000000000L,0x0000000000000000L,0x0000000000800000L});

    }static class FOLLOW_nnstate_in_asAstate2084_static {
    public static final BitSet FOLLOW_nnstate_in_asAstate2084 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_quantity_in_asAstate2086_static {
    public static final BitSet FOLLOW_quantity_in_asAstate2086 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_allIdentifierTypesOtherThanCD_in_alphanumericOrIdentifierCompoundReference2097_static {
    public static final BitSet FOLLOW_allIdentifierTypesOtherThanCD_in_alphanumericOrIdentifierCompoundReference2097 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_numberCompoundReference2116_static {
    public static final BitSet FOLLOW_cd_in_numberCompoundReference2116 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_allIdentifierTypes_in_numericOrIdentifierCompoundReference2137_static {
    public static final BitSet FOLLOW_allIdentifierTypes_in_numericOrIdentifierCompoundReference2137 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity1Node_in_quantity2157_static {
    public static final BitSet FOLLOW_quantity1Node_in_quantity2157 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_quantity2159_static {
    public static final BitSet FOLLOW_quantity2Node_in_quantity2159 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity1_in_quantity1Node2168_static {
    public static final BitSet FOLLOW_quantity1_in_quantity1Node2168 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_quantity12188_static {
    public static final BitSet FOLLOW_lrb_in_quantity12188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_measurements_in_quantity12190_static {
    public static final BitSet FOLLOW_measurements_in_quantity12190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010220L});

    }static class FOLLOW_comma_in_quantity12193_static {
    public static final BitSet FOLLOW_comma_in_quantity12193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_measurements_in_quantity12196_static {
    public static final BitSet FOLLOW_measurements_in_quantity12196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010220L});

    }static class FOLLOW_comma_in_quantity12201_static {
    public static final BitSet FOLLOW_comma_in_quantity12201 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});

    }static class FOLLOW_preparationphrase_in_quantity12203_static {
    public static final BitSet FOLLOW_preparationphrase_in_quantity12203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010220L});

    }static class FOLLOW_stop_in_quantity12208_static {
    public static final BitSet FOLLOW_stop_in_quantity12208 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});

    }static class FOLLOW_preparationphrase_in_quantity12210_static {
    public static final BitSet FOLLOW_preparationphrase_in_quantity12210 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010200L});

    }static class FOLLOW_rrb_in_quantity12215_static {
    public static final BitSet FOLLOW_rrb_in_quantity12215 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2_in_quantity2Node2223_static {
    public static final BitSet FOLLOW_quantity2_in_quantity2Node2223 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurements_in_quantity22244_static {
    public static final BitSet FOLLOW_measurements_in_quantity22244 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_comma_in_quantity22247_static {
    public static final BitSet FOLLOW_comma_in_quantity22247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_measurements_in_quantity22250_static {
    public static final BitSet FOLLOW_measurements_in_quantity22250 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_cd_in_measurements2263_static {
    public static final BitSet FOLLOW_cd_in_measurements2263 = new BitSet(new long[]{0x800061C000000000L,0x0000000002102280L,0x000000001384A824L});

    }static class FOLLOW_nn_in_measurements2265_static {
    public static final BitSet FOLLOW_nn_in_measurements2265 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_multiple_in_measurements2270_static {
    public static final BitSet FOLLOW_multiple_in_measurements2270 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000080000L});

    }static class FOLLOW_measurementtypes_in_measurements2272_static {
    public static final BitSet FOLLOW_measurementtypes_in_measurements2272 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000080000L});

    }static class FOLLOW_dt_in_measurements2275_static {
    public static final BitSet FOLLOW_dt_in_measurements2275 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_multiple2283_static {
    public static final BitSet FOLLOW_cd_in_multiple2283 = new BitSet(new long[]{0x0000100000000000L});

    }static class FOLLOW_cdunicode_in_multiple2285_static {
    public static final BitSet FOLLOW_cdunicode_in_multiple2285 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_measurementtypes_in_multiple2287_static {
    public static final BitSet FOLLOW_measurementtypes_in_multiple2287 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molar_in_measurementtypes2312_static {
    public static final BitSet FOLLOW_molar_in_measurementtypes2312 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_amount_in_measurementtypes2314_static {
    public static final BitSet FOLLOW_amount_in_measurementtypes2314 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mass_in_measurementtypes2316_static {
    public static final BitSet FOLLOW_mass_in_measurementtypes2316 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_volume_in_measurementtypes2318_static {
    public static final BitSet FOLLOW_volume_in_measurementtypes2318 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_logHydrogenActivity_in_measurementtypes2320_static {
    public static final BitSet FOLLOW_logHydrogenActivity_in_measurementtypes2320 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_equivalent_in_measurementtypes2322_static {
    public static final BitSet FOLLOW_equivalent_in_measurementtypes2322 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield_in_measurementtypes2324_static {
    public static final BitSet FOLLOW_yield_in_measurementtypes2324 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percent_in_measurementtypes2326_static {
    public static final BitSet FOLLOW_percent_in_measurementtypes2326 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_molar2334_static {
    public static final BitSet FOLLOW_cd_in_molar2334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_nnmolar_in_molar2336_static {
    public static final BitSet FOLLOW_nnmolar_in_molar2336 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_amount2356_static {
    public static final BitSet FOLLOW_cd_in_amount2356 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});

    }static class FOLLOW_nnamount_in_amount2358_static {
    public static final BitSet FOLLOW_nnamount_in_amount2358 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_mass2378_static {
    public static final BitSet FOLLOW_cd_in_mass2378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});

    }static class FOLLOW_nnmass_in_mass2380_static {
    public static final BitSet FOLLOW_nnmass_in_mass2380 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_volume2399_static {
    public static final BitSet FOLLOW_cd_in_volume2399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_nnvol_in_volume2401_static {
    public static final BitSet FOLLOW_nnvol_in_volume2401 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_logHydrogenActivity2421_static {
    public static final BitSet FOLLOW_nnph_in_logHydrogenActivity2421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000040000L});

    }static class FOLLOW_sym_in_logHydrogenActivity2423_static {
    public static final BitSet FOLLOW_sym_in_logHydrogenActivity2423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_logHydrogenActivity2426_static {
    public static final BitSet FOLLOW_cd_in_logHydrogenActivity2426 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_equivalent2446_static {
    public static final BitSet FOLLOW_cd_in_equivalent2446 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_nneq_in_equivalent2448_static {
    public static final BitSet FOLLOW_nneq_in_equivalent2448 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield1_in_yield2465_static {
    public static final BitSet FOLLOW_yield1_in_yield2465 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield2_in_yield2476_static {
    public static final BitSet FOLLOW_yield2_in_yield2476 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_yield12490_static {
    public static final BitSet FOLLOW_nnyield_in_yield12490 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_inof_in_yield12493_static {
    public static final BitSet FOLLOW_inof_in_yield12493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040004L});

    }static class FOLLOW_colon_in_yield12495_static {
    public static final BitSet FOLLOW_colon_in_yield12495 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040004L});

    }static class FOLLOW_percent_in_yield12498_static {
    public static final BitSet FOLLOW_percent_in_yield12498 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percent_in_yield22504_static {
    public static final BitSet FOLLOW_percent_in_yield22504 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});

    }static class FOLLOW_nnyield_in_yield22506_static {
    public static final BitSet FOLLOW_nnyield_in_yield22506 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_percent2514_static {
    public static final BitSet FOLLOW_cd_in_percent2514 = new BitSet(new long[]{0x800061C000000000L,0x0000000002102280L,0x000000001384AC24L});

    }static class FOLLOW_nn_in_percent2516_static {
    public static final BitSet FOLLOW_nn_in_percent2516 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_percentsign_in_percent2519_static {
    public static final BitSet FOLLOW_percentsign_in_percent2519 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_percent2523_static {
    public static final BitSet FOLLOW_dash_in_percent2523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_percent2525_static {
    public static final BitSet FOLLOW_cd_in_percent2525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_percentsign_in_percent2527_static {
    public static final BitSet FOLLOW_percentsign_in_percent2527 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_bracketedContent2561_static {
    public static final BitSet FOLLOW_ratio_in_bracketedContent2561 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_bracketedContent1_in_bracketedContent2566_static {
    public static final BitSet FOLLOW_bracketedContent1_in_bracketedContent2566 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContent2_in_bracketedContent2568_static {
    public static final BitSet FOLLOW_bracketedContent2_in_bracketedContent2568 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContent3_in_bracketedContent2570_static {
    public static final BitSet FOLLOW_bracketedContent3_in_bracketedContent2570 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_bracketedContent12595_static {
    public static final BitSet FOLLOW_comma_in_bracketedContent12595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_lrb_in_bracketedContent12597_static {
    public static final BitSet FOLLOW_lrb_in_bracketedContent12597 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_bracketedContentContents_in_bracketedContent12599_static {
    public static final BitSet FOLLOW_bracketedContentContents_in_bracketedContent12599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_bracketedContent12601_static {
    public static final BitSet FOLLOW_rrb_in_bracketedContent12601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_comma_in_bracketedContent12603_static {
    public static final BitSet FOLLOW_comma_in_bracketedContent12603 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_bracketedContent22609_static {
    public static final BitSet FOLLOW_lrb_in_bracketedContent22609 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_bracketedContentContents_in_bracketedContent22611_static {
    public static final BitSet FOLLOW_bracketedContentContents_in_bracketedContent22611 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_bracketedContent22613_static {
    public static final BitSet FOLLOW_rrb_in_bracketedContent22613 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_bracketedContent32619_static {
    public static final BitSet FOLLOW_lsqb_in_bracketedContent32619 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_bracketedContentContents_in_bracketedContent32621_static {
    public static final BitSet FOLLOW_bracketedContentContents_in_bracketedContent32621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_rsqb_in_bracketedContent32623_static {
    public static final BitSet FOLLOW_rsqb_in_bracketedContent32623 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_bracketedContentContents2630_static {
    public static final BitSet FOLLOW_verb_in_bracketedContentContents2630 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_noun_in_bracketedContentContents2632_static {
    public static final BitSet FOLLOW_noun_in_bracketedContentContents2632 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_bracketedContent_in_bracketedContentContents2634_static {
    public static final BitSet FOLLOW_bracketedContent_in_bracketedContentContents2634 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_md_in_bracketedContentContents2636_static {
    public static final BitSet FOLLOW_md_in_bracketedContentContents2636 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_percentsign_in_bracketedContentContents2638_static {
    public static final BitSet FOLLOW_percentsign_in_bracketedContentContents2638 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_dash_in_bracketedContentContents2640_static {
    public static final BitSet FOLLOW_dash_in_bracketedContentContents2640 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_inAll_in_bracketedContentContents2642_static {
    public static final BitSet FOLLOW_inAll_in_bracketedContentContents2642 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_ratio_in_bracketedContentContents2644_static {
    public static final BitSet FOLLOW_ratio_in_bracketedContentContents2644 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_conjunction_in_bracketedContentContents2646_static {
    public static final BitSet FOLLOW_conjunction_in_bracketedContentContents2646 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_adj_in_bracketedContentContents2648_static {
    public static final BitSet FOLLOW_adj_in_bracketedContentContents2648 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_colon_in_bracketedContentContents2650_static {
    public static final BitSet FOLLOW_colon_in_bracketedContentContents2650 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_stop_in_bracketedContentContents2652_static {
    public static final BitSet FOLLOW_stop_in_bracketedContentContents2652 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_numeric_in_bracketedContentContents2654_static {
    public static final BitSet FOLLOW_numeric_in_bracketedContentContents2654 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_ratio_in_bracketedContentInMol2663_static {
    public static final BitSet FOLLOW_ratio_in_bracketedContentInMol2663 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_bracketedContentInMolStructure1_in_bracketedContentInMol2668_static {
    public static final BitSet FOLLOW_bracketedContentInMolStructure1_in_bracketedContentInMol2668 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMolStructure2_in_bracketedContentInMol2670_static {
    public static final BitSet FOLLOW_bracketedContentInMolStructure2_in_bracketedContentInMol2670 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMolStructure3_in_bracketedContentInMol2672_static {
    public static final BitSet FOLLOW_bracketedContentInMolStructure3_in_bracketedContentInMol2672 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_bracketedContentInMolStructure12697_static {
    public static final BitSet FOLLOW_comma_in_bracketedContentInMolStructure12697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_lrb_in_bracketedContentInMolStructure12699_static {
    public static final BitSet FOLLOW_lrb_in_bracketedContentInMolStructure12699 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure12701_static {
    public static final BitSet FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure12701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_bracketedContentInMolStructure12703_static {
    public static final BitSet FOLLOW_rrb_in_bracketedContentInMolStructure12703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_comma_in_bracketedContentInMolStructure12705_static {
    public static final BitSet FOLLOW_comma_in_bracketedContentInMolStructure12705 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_bracketedContentInMolStructure22711_static {
    public static final BitSet FOLLOW_lrb_in_bracketedContentInMolStructure22711 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure22713_static {
    public static final BitSet FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure22713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_bracketedContentInMolStructure22715_static {
    public static final BitSet FOLLOW_rrb_in_bracketedContentInMolStructure22715 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_bracketedContentInMolStructure32721_static {
    public static final BitSet FOLLOW_lsqb_in_bracketedContentInMolStructure32721 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure32723_static {
    public static final BitSet FOLLOW_bracketedContentInMolContents_in_bracketedContentInMolStructure32723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_rsqb_in_bracketedContentInMolStructure32725_static {
    public static final BitSet FOLLOW_rsqb_in_bracketedContentInMolStructure32725 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_bracketedContentInMolContents2732_static {
    public static final BitSet FOLLOW_verb_in_bracketedContentInMolContents2732 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_quantity2Node_in_bracketedContentInMolContents2734_static {
    public static final BitSet FOLLOW_quantity2Node_in_bracketedContentInMolContents2734 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_oscarCompound_in_bracketedContentInMolContents2736_static {
    public static final BitSet FOLLOW_oscarCompound_in_bracketedContentInMolContents2736 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_alphanumericOrIdentifierCompoundReference_in_bracketedContentInMolContents2738_static {
    public static final BitSet FOLLOW_alphanumericOrIdentifierCompoundReference_in_bracketedContentInMolContents2738 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_ratio_in_bracketedContentInMolContents2740_static {
    public static final BitSet FOLLOW_ratio_in_bracketedContentInMolContents2740 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_numberCompoundReference_in_bracketedContentInMolContents2742_static {
    public static final BitSet FOLLOW_numberCompoundReference_in_bracketedContentInMolContents2742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000230L});

    }static class FOLLOW_comma_in_bracketedContentInMolContents2745_static {
    public static final BitSet FOLLOW_comma_in_bracketedContentInMolContents2745 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_colon_in_bracketedContentInMolContents2749_static {
    public static final BitSet FOLLOW_colon_in_bracketedContentInMolContents2749 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_stop_in_bracketedContentInMolContents2755_static {
    public static final BitSet FOLLOW_stop_in_bracketedContentInMolContents2755 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_cd_in_bracketedContentInMolContents2758_static {
    public static final BitSet FOLLOW_cd_in_bracketedContentInMolContents2758 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_md_in_bracketedContentInMolContents2760_static {
    public static final BitSet FOLLOW_md_in_bracketedContentInMolContents2760 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_percentsign_in_bracketedContentInMolContents2762_static {
    public static final BitSet FOLLOW_percentsign_in_bracketedContentInMolContents2762 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_dash_in_bracketedContentInMolContents2764_static {
    public static final BitSet FOLLOW_dash_in_bracketedContentInMolContents2764 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_inAll_in_bracketedContentInMolContents2766_static {
    public static final BitSet FOLLOW_inAll_in_bracketedContentInMolContents2766 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_comma_in_bracketedContentInMolContents2768_static {
    public static final BitSet FOLLOW_comma_in_bracketedContentInMolContents2768 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_adj_in_bracketedContentInMolContents2770_static {
    public static final BitSet FOLLOW_adj_in_bracketedContentInMolContents2770 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_colon_in_bracketedContentInMolContents2772_static {
    public static final BitSet FOLLOW_colon_in_bracketedContentInMolContents2772 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_stop_in_bracketedContentInMolContents2774_static {
    public static final BitSet FOLLOW_stop_in_bracketedContentInMolContents2774 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_noun_in_bracketedContentInMolContents2776_static {
    public static final BitSet FOLLOW_noun_in_bracketedContentInMolContents2776 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_bracketedContentInMol_in_bracketedContentInMolContents2778_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_bracketedContentInMolContents2778 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_verb_in_bracketedContentInMolContents2782_static {
    public static final BitSet FOLLOW_verb_in_bracketedContentInMolContents2782 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_quantity2Node_in_bracketedContentInMolContents2784_static {
    public static final BitSet FOLLOW_quantity2Node_in_bracketedContentInMolContents2784 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_oscarCompound_in_bracketedContentInMolContents2786_static {
    public static final BitSet FOLLOW_oscarCompound_in_bracketedContentInMolContents2786 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_alphanumericOrIdentifierCompoundReference_in_bracketedContentInMolContents2788_static {
    public static final BitSet FOLLOW_alphanumericOrIdentifierCompoundReference_in_bracketedContentInMolContents2788 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_ratio_in_bracketedContentInMolContents2790_static {
    public static final BitSet FOLLOW_ratio_in_bracketedContentInMolContents2790 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_cd_in_bracketedContentInMolContents2792_static {
    public static final BitSet FOLLOW_cd_in_bracketedContentInMolContents2792 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_md_in_bracketedContentInMolContents2794_static {
    public static final BitSet FOLLOW_md_in_bracketedContentInMolContents2794 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_percentsign_in_bracketedContentInMolContents2796_static {
    public static final BitSet FOLLOW_percentsign_in_bracketedContentInMolContents2796 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_dash_in_bracketedContentInMolContents2798_static {
    public static final BitSet FOLLOW_dash_in_bracketedContentInMolContents2798 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_inAll_in_bracketedContentInMolContents2800_static {
    public static final BitSet FOLLOW_inAll_in_bracketedContentInMolContents2800 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_conjunction_in_bracketedContentInMolContents2802_static {
    public static final BitSet FOLLOW_conjunction_in_bracketedContentInMolContents2802 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_adj_in_bracketedContentInMolContents2804_static {
    public static final BitSet FOLLOW_adj_in_bracketedContentInMolContents2804 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_colon_in_bracketedContentInMolContents2806_static {
    public static final BitSet FOLLOW_colon_in_bracketedContentInMolContents2806 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_stop_in_bracketedContentInMolContents2808_static {
    public static final BitSet FOLLOW_stop_in_bracketedContentInMolContents2808 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_noun_in_bracketedContentInMolContents2810_static {
    public static final BitSet FOLLOW_noun_in_bracketedContentInMolContents2810 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_bracketedContentInMol_in_bracketedContentInMolContents2812_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_bracketedContentInMolContents2812 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_infrom_in_fromProcedure2823_static {
    public static final BitSet FOLLOW_infrom_in_fromProcedure2823 = new BitSet(new long[]{0x800061C000000000L,0x0000000002183A80L,0x000000001384A824L});

    }static class FOLLOW_inof_in_fromProcedure2829_static {
    public static final BitSet FOLLOW_inof_in_fromProcedure2829 = new BitSet(new long[]{0x800061C000000000L,0x0000000002183A80L,0x000000001384A824L});

    }static class FOLLOW_vbyield_in_fromProcedure2836_static {
    public static final BitSet FOLLOW_vbyield_in_fromProcedure2836 = new BitSet(new long[]{0x0844000000000000L});

    }static class FOLLOW_vbsynthesize_in_fromProcedure2838_static {
    public static final BitSet FOLLOW_vbsynthesize_in_fromProcedure2838 = new BitSet(new long[]{0x0844000000000000L});

    }static class FOLLOW_inin_in_fromProcedure2842_static {
    public static final BitSet FOLLOW_inin_in_fromProcedure2842 = new BitSet(new long[]{0x800061C000000000L,0x0000000002183A80L,0x000000001384A824L});

    }static class FOLLOW_inby_in_fromProcedure2844_static {
    public static final BitSet FOLLOW_inby_in_fromProcedure2844 = new BitSet(new long[]{0x800061C000000000L,0x0000000002183A80L,0x000000001384A824L});

    }static class FOLLOW_infrom_in_fromProcedure2846_static {
    public static final BitSet FOLLOW_infrom_in_fromProcedure2846 = new BitSet(new long[]{0x800061C000000000L,0x0000000002183A80L,0x000000001384A824L});

    }static class FOLLOW_procedureNode_in_fromProcedure2850_static {
    public static final BitSet FOLLOW_procedureNode_in_fromProcedure2850 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_method_in_procedureNode2857_static {
    public static final BitSet FOLLOW_method_in_procedureNode2857 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_method2878_static {
    public static final BitSet FOLLOW_nngeneral_in_method2878 = new BitSet(new long[]{0x800061C000000000L,0x0000000002103A80L,0x000000001384A824L});

    }static class FOLLOW_nn_in_method2880_static {
    public static final BitSet FOLLOW_nn_in_method2880 = new BitSet(new long[]{0x800061C000000000L,0x0000000002103A80L,0x000000001384A824L});

    }static class FOLLOW_nnmethod_in_method2884_static {
    public static final BitSet FOLLOW_nnmethod_in_method2884 = new BitSet(new long[]{0x890067C000000002L,0x0000000006183A90L,0x000000005384A834L});

    }static class FOLLOW_allIdentifierTypes_in_method2886_static {
    public static final BitSet FOLLOW_allIdentifierTypes_in_method2886 = new BitSet(new long[]{0x890061C000000002L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_nnexample_in_method2891_static {
    public static final BitSet FOLLOW_nnexample_in_method2891 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_allIdentifierTypes_in_method2893_static {
    public static final BitSet FOLLOW_allIdentifierTypes_in_method2893 = new BitSet(new long[]{0x890061C000000002L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_comma_in_method2899_static {
    public static final BitSet FOLLOW_comma_in_method2899 = new BitSet(new long[]{0x890061C000000000L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_colon_in_method2902_static {
    public static final BitSet FOLLOW_colon_in_method2902 = new BitSet(new long[]{0x890061C000000000L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_inof_in_method2905_static {
    public static final BitSet FOLLOW_inof_in_method2905 = new BitSet(new long[]{0x890061C000000000L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_infrom_in_method2909_static {
    public static final BitSet FOLLOW_infrom_in_method2909 = new BitSet(new long[]{0x890061C000000000L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_submethod_in_method2913_static {
    public static final BitSet FOLLOW_submethod_in_method2913 = new BitSet(new long[]{0x890061C000000002L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_lrb_in_method2917_static {
    public static final BitSet FOLLOW_lrb_in_method2917 = new BitSet(new long[]{0x890061C000000000L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_submethod_in_method2919_static {
    public static final BitSet FOLLOW_submethod_in_method2919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_method2921_static {
    public static final BitSet FOLLOW_rrb_in_method2921 = new BitSet(new long[]{0x890061C000000002L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_nnmethod_in_submethod2932_static {
    public static final BitSet FOLLOW_nnmethod_in_submethod2932 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_nnexample_in_submethod2934_static {
    public static final BitSet FOLLOW_nnexample_in_submethod2934 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_allIdentifierTypes_in_submethod2937_static {
    public static final BitSet FOLLOW_allIdentifierTypes_in_submethod2937 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_referenceToExampleCompound2946_static {
    public static final BitSet FOLLOW_nnexample_in_referenceToExampleCompound2946 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_allIdentifierTypes_in_referenceToExampleCompound2948_static {
    public static final BitSet FOLLOW_allIdentifierTypes_in_referenceToExampleCompound2948 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_advAdj2966_static {
    public static final BitSet FOLLOW_adv_in_advAdj2966 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_advAdj2968_static {
    public static final BitSet FOLLOW_adj_in_advAdj2968 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_range2975_static {
    public static final BitSet FOLLOW_numeric_in_range2975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_range2977_static {
    public static final BitSet FOLLOW_dash_in_range2977 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000042000L});

    }static class FOLLOW_numeric_in_range2979_static {
    public static final BitSet FOLLOW_numeric_in_range2979 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycleStructure_in_cycles2986_static {
    public static final BitSet FOLLOW_cycleStructure_in_cycles2986 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_cycleStructure3003_static {
    public static final BitSet FOLLOW_cd_in_cycleStructure3003 = new BitSet(new long[]{0x800061C000000000L,0x0000000002122280L,0x000000001384A824L});

    }static class FOLLOW_dashNN_in_cycleStructure3005_static {
    public static final BitSet FOLLOW_dashNN_in_cycleStructure3005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_nncycle_in_cycleStructure3008_static {
    public static final BitSet FOLLOW_nncycle_in_cycleStructure3008 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_dashNN3016_static {
    public static final BitSet FOLLOW_adj_in_dashNN3016 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_nn_in_dashNN3018_static {
    public static final BitSet FOLLOW_nn_in_dashNN3018 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_cd_in_dashNN3020_static {
    public static final BitSet FOLLOW_cd_in_dashNN3020 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_dashNN3024_static {
    public static final BitSet FOLLOW_dash_in_dashNN3024 = new BitSet(new long[]{0x800061C000000000L,0x0000000002102280L,0x000000001384A824L});

    }static class FOLLOW_adj_in_dashNN3027_static {
    public static final BitSet FOLLOW_adj_in_dashNN3027 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_nn_in_dashNN3029_static {
    public static final BitSet FOLLOW_nn_in_dashNN3029 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_cd_in_dashNN3031_static {
    public static final BitSet FOLLOW_cd_in_dashNN3031 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_lrb_in_ratioOrBracketedRatio3042_static {
    public static final BitSet FOLLOW_lrb_in_ratioOrBracketedRatio3042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_ratio_in_ratioOrBracketedRatio3044_static {
    public static final BitSet FOLLOW_ratio_in_ratioOrBracketedRatio3044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_ratioOrBracketedRatio3046_static {
    public static final BitSet FOLLOW_rrb_in_ratioOrBracketedRatio3046 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_ratioOrBracketedRatio3050_static {
    public static final BitSet FOLLOW_ratio_in_ratioOrBracketedRatio3050 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdRatio_in_ratio3057_static {
    public static final BitSet FOLLOW_cdRatio_in_ratio3057 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_cdRatio3072_static {
    public static final BitSet FOLLOW_cd_in_cdRatio3072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_colon_in_cdRatio3075_static {
    public static final BitSet FOLLOW_colon_in_cdRatio3075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_cdRatio3077_static {
    public static final BitSet FOLLOW_cd_in_cdRatio3077 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_citationStructure_in_citation3089_static {
    public static final BitSet FOLLOW_citationStructure_in_citation3089 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_citation3091_static {
    public static final BitSet FOLLOW_comma_in_citation3091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_citationContent_in_citation3093_static {
    public static final BitSet FOLLOW_citationContent_in_citation3093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_comma_in_citation3095_static {
    public static final BitSet FOLLOW_comma_in_citation3095 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citationContent_in_citationStructure3103_static {
    public static final BitSet FOLLOW_citationContent_in_citationStructure3103 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_citationContent3119_static {
    public static final BitSet FOLLOW_lrb_in_citationContent3119 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_nnp_in_citationContent3122_static {
    public static final BitSet FOLLOW_nnp_in_citationContent3122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_fw_in_citationContent3124_static {
    public static final BitSet FOLLOW_fw_in_citationContent3124 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_cd_in_citationContent3126_static {
    public static final BitSet FOLLOW_cd_in_citationContent3126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_conjunction_in_citationContent3128_static {
    public static final BitSet FOLLOW_conjunction_in_citationContent3128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_nnp_in_citationContent3132_static {
    public static final BitSet FOLLOW_nnp_in_citationContent3132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040270020L});

    }static class FOLLOW_fw_in_citationContent3134_static {
    public static final BitSet FOLLOW_fw_in_citationContent3134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040270020L});

    }static class FOLLOW_cd_in_citationContent3136_static {
    public static final BitSet FOLLOW_cd_in_citationContent3136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040270020L});

    }static class FOLLOW_conjunction_in_citationContent3138_static {
    public static final BitSet FOLLOW_conjunction_in_citationContent3138 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040270020L});

    }static class FOLLOW_rrb_in_citationContent3142_static {
    public static final BitSet FOLLOW_rrb_in_citationContent3142 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_allIdentifierTypesOtherThanCD_in_allIdentifierTypes3152_static {
    public static final BitSet FOLLOW_allIdentifierTypesOtherThanCD_in_allIdentifierTypes3152 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_allIdentifierTypes3156_static {
    public static final BitSet FOLLOW_cd_in_allIdentifierTypes3156 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_allIdentifierTypesOtherThanCD3165_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_allIdentifierTypesOtherThanCD3165 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_allIdentifierTypesOtherThanCD3167_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_allIdentifierTypesOtherThanCD3167 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_allIdentifierTypesOtherThanCD3169_static {
    public static final BitSet FOLLOW_cdAlphanum_in_allIdentifierTypesOtherThanCD3169 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedNumeric_in_allIdentifierTypesOtherThanCD3172_static {
    public static final BitSet FOLLOW_bracketedNumeric_in_allIdentifierTypesOtherThanCD3172 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_numericOrBracketedNumeric3180_static {
    public static final BitSet FOLLOW_numeric_in_numericOrBracketedNumeric3180 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric3184_static {
    public static final BitSet FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric3184 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_bracketedNumeric3192_static {
    public static final BitSet FOLLOW_lrb_in_bracketedNumeric3192 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000042000L});

    }static class FOLLOW_numeric_in_bracketedNumeric3194_static {
    public static final BitSet FOLLOW_numeric_in_bracketedNumeric3194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_bracketedNumeric3196_static {
    public static final BitSet FOLLOW_rrb_in_bracketedNumeric3196 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_squareBracketedReference3203_static {
    public static final BitSet FOLLOW_lsqb_in_squareBracketedReference3203 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000042000L});

    }static class FOLLOW_numeric_in_squareBracketedReference3205_static {
    public static final BitSet FOLLOW_numeric_in_squareBracketedReference3205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_rsqb_in_squareBracketedReference3207_static {
    public static final BitSet FOLLOW_rsqb_in_squareBracketedReference3207 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_identifierOrBracketedIdentifier3214_static {
    public static final BitSet FOLLOW_cd_in_identifierOrBracketedIdentifier3214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});

    }static class FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier3217_static {
    public static final BitSet FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier3217 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier3221_static {
    public static final BitSet FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier3221 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_bracketedIdentifier3229_static {
    public static final BitSet FOLLOW_lrb_in_bracketedIdentifier3229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000042000L});

    }static class FOLLOW_cd_in_bracketedIdentifier3231_static {
    public static final BitSet FOLLOW_cd_in_bracketedIdentifier3231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});

    }static class FOLLOW_nnidentifier_in_bracketedIdentifier3234_static {
    public static final BitSet FOLLOW_nnidentifier_in_bracketedIdentifier3234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_bracketedIdentifier3236_static {
    public static final BitSet FOLLOW_rrb_in_bracketedIdentifier3236 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_adj3244_static {
    public static final BitSet FOLLOW_jj_in_adj3244 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjr_in_adj3246_static {
    public static final BitSet FOLLOW_jjr_in_adj3246 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjs_in_adj3248_static {
    public static final BitSet FOLLOW_jjs_in_adj3248 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjchem_in_adj3250_static {
    public static final BitSet FOLLOW_jjchem_in_adj3250 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcj_in_adj3252_static {
    public static final BitSet FOLLOW_oscarcj_in_adj3252 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarrn_in_adj3254_static {
    public static final BitSet FOLLOW_oscarrn_in_adj3254 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rb_in_adv3261_static {
    public static final BitSet FOLLOW_rb_in_adv3261 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbr_in_adv3263_static {
    public static final BitSet FOLLOW_rbr_in_adv3263 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rp_in_adv3265_static {
    public static final BitSet FOLLOW_rp_in_adv3265 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbs_in_adv3267_static {
    public static final BitSet FOLLOW_rbs_in_adv3267 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wdt_in_clause3274_static {
    public static final BitSet FOLLOW_wdt_in_clause3274 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wp_poss_in_clause3276_static {
    public static final BitSet FOLLOW_wp_poss_in_clause3276 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wrb_in_clause3278_static {
    public static final BitSet FOLLOW_wrb_in_clause3278 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ex_in_clause3280_static {
    public static final BitSet FOLLOW_ex_in_clause3280 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pdt_in_clause3282_static {
    public static final BitSet FOLLOW_pdt_in_clause3282 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wp_in_clause3284_static {
    public static final BitSet FOLLOW_wp_in_clause3284 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_conjunction3291_static {
    public static final BitSet FOLLOW_cc_in_conjunction3291 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_conjunction3293_static {
    public static final BitSet FOLLOW_comma_in_conjunction3293 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_in_in_inAll3300_static {
    public static final BitSet FOLLOW_in_in_inAll3300 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inafter_in_inAll3302_static {
    public static final BitSet FOLLOW_inafter_in_inAll3302 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_inAll3304_static {
    public static final BitSet FOLLOW_inas_in_inAll3304 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inbefore_in_inAll3306_static {
    public static final BitSet FOLLOW_inbefore_in_inAll3306 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inby_in_inAll3308_static {
    public static final BitSet FOLLOW_inby_in_inAll3308 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infor_in_inAll3310_static {
    public static final BitSet FOLLOW_infor_in_inAll3310 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infrom_in_inAll3312_static {
    public static final BitSet FOLLOW_infrom_in_inAll3312 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_inAll3314_static {
    public static final BitSet FOLLOW_inin_in_inAll3314 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ininto_in_inAll3316_static {
    public static final BitSet FOLLOW_ininto_in_inAll3316 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_inAll3318_static {
    public static final BitSet FOLLOW_inof_in_inAll3318 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_inAll3320_static {
    public static final BitSet FOLLOW_inoff_in_inAll3320 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inon_in_inAll3322_static {
    public static final BitSet FOLLOW_inon_in_inAll3322 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inover_in_inAll3324_static {
    public static final BitSet FOLLOW_inover_in_inAll3324 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_inAll3326_static {
    public static final BitSet FOLLOW_inunder_in_inAll3326 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_invia_in_inAll3328_static {
    public static final BitSet FOLLOW_invia_in_inAll3328 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwith_in_inAll3330_static {
    public static final BitSet FOLLOW_inwith_in_inAll3330 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwithout_in_inAll3332_static {
    public static final BitSet FOLLOW_inwithout_in_inAll3332 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_inAll3334_static {
    public static final BitSet FOLLOW_to_in_inAll3334 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_in_in_inMost3341_static {
    public static final BitSet FOLLOW_in_in_inMost3341 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_inMost3343_static {
    public static final BitSet FOLLOW_inas_in_inMost3343 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inbefore_in_inMost3345_static {
    public static final BitSet FOLLOW_inbefore_in_inMost3345 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inby_in_inMost3347_static {
    public static final BitSet FOLLOW_inby_in_inMost3347 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infor_in_inMost3349_static {
    public static final BitSet FOLLOW_infor_in_inMost3349 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infrom_in_inMost3351_static {
    public static final BitSet FOLLOW_infrom_in_inMost3351 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_inMost3353_static {
    public static final BitSet FOLLOW_inin_in_inMost3353 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ininto_in_inMost3355_static {
    public static final BitSet FOLLOW_ininto_in_inMost3355 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_inMost3357_static {
    public static final BitSet FOLLOW_inof_in_inMost3357 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_inMost3359_static {
    public static final BitSet FOLLOW_inoff_in_inMost3359 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inon_in_inMost3361_static {
    public static final BitSet FOLLOW_inon_in_inMost3361 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inover_in_inMost3363_static {
    public static final BitSet FOLLOW_inover_in_inMost3363 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_inMost3365_static {
    public static final BitSet FOLLOW_inunder_in_inMost3365 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_invia_in_inMost3367_static {
    public static final BitSet FOLLOW_invia_in_inMost3367 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwith_in_inMost3369_static {
    public static final BitSet FOLLOW_inwith_in_inMost3369 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwithout_in_inMost3371_static {
    public static final BitSet FOLLOW_inwithout_in_inMost3371 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_inMost3373_static {
    public static final BitSet FOLLOW_to_in_inMost3373 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_numeric3380_static {
    public static final BitSet FOLLOW_cd_in_numeric3380 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_numeric3382_static {
    public static final BitSet FOLLOW_cdAlphanum_in_numeric3382 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_38_in_cdAlphanum3390_static {
    public static final BitSet FOLLOW_38_in_cdAlphanum3390 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cdAlphanum3392_static {
    public static final BitSet FOLLOW_TOKEN_in_cdAlphanum3392 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_39_in_oscarcj3405_static {
    public static final BitSet FOLLOW_39_in_oscarcj3405 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarcj3407_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarcj3407 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_40_in_oscarrn3420_static {
    public static final BitSet FOLLOW_40_in_oscarrn3420 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarrn3422_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarrn3422 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_41_in_oscarase3435_static {
    public static final BitSet FOLLOW_41_in_oscarase3435 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarase3437_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarase3437 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_42_in_oscaront3450_static {
    public static final BitSet FOLLOW_42_in_oscaront3450 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscaront3452_static {
    public static final BitSet FOLLOW_TOKEN_in_oscaront3452 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_43_in_tmunicode3465_static {
    public static final BitSet FOLLOW_43_in_tmunicode3465 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_tmunicode3467_static {
    public static final BitSet FOLLOW_TOKEN_in_tmunicode3467 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_44_in_cdunicode3480_static {
    public static final BitSet FOLLOW_44_in_cdunicode3480 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cdunicode3482_static {
    public static final BitSet FOLLOW_TOKEN_in_cdunicode3482 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_45_in_jjchem3495_static {
    public static final BitSet FOLLOW_45_in_jjchem3495 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjchem3497_static {
    public static final BitSet FOLLOW_TOKEN_in_jjchem3497 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_46_in_jjcomp3510_static {
    public static final BitSet FOLLOW_46_in_jjcomp3510 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjcomp3512_static {
    public static final BitSet FOLLOW_TOKEN_in_jjcomp3512 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_47_in_inas3526_static {
    public static final BitSet FOLLOW_47_in_inas3526 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inas3528_static {
    public static final BitSet FOLLOW_TOKEN_in_inas3528 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_48_in_inbefore3541_static {
    public static final BitSet FOLLOW_48_in_inbefore3541 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inbefore3543_static {
    public static final BitSet FOLLOW_TOKEN_in_inbefore3543 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_49_in_inafter3556_static {
    public static final BitSet FOLLOW_49_in_inafter3556 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inafter3558_static {
    public static final BitSet FOLLOW_TOKEN_in_inafter3558 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_50_in_inin3571_static {
    public static final BitSet FOLLOW_50_in_inin3571 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inin3573_static {
    public static final BitSet FOLLOW_TOKEN_in_inin3573 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_51_in_ininto3586_static {
    public static final BitSet FOLLOW_51_in_ininto3586 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_ininto3588_static {
    public static final BitSet FOLLOW_TOKEN_in_ininto3588 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_52_in_inwith3601_static {
    public static final BitSet FOLLOW_52_in_inwith3601 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inwith3603_static {
    public static final BitSet FOLLOW_TOKEN_in_inwith3603 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_53_in_inwithout3616_static {
    public static final BitSet FOLLOW_53_in_inwithout3616 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inwithout3618_static {
    public static final BitSet FOLLOW_TOKEN_in_inwithout3618 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_54_in_inby3631_static {
    public static final BitSet FOLLOW_54_in_inby3631 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inby3633_static {
    public static final BitSet FOLLOW_TOKEN_in_inby3633 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_55_in_invia3646_static {
    public static final BitSet FOLLOW_55_in_invia3646 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_invia3648_static {
    public static final BitSet FOLLOW_TOKEN_in_invia3648 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_56_in_inof3661_static {
    public static final BitSet FOLLOW_56_in_inof3661 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inof3663_static {
    public static final BitSet FOLLOW_TOKEN_in_inof3663 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_57_in_inon3676_static {
    public static final BitSet FOLLOW_57_in_inon3676 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inon3678_static {
    public static final BitSet FOLLOW_TOKEN_in_inon3678 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_58_in_infor3691_static {
    public static final BitSet FOLLOW_58_in_infor3691 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_infor3693_static {
    public static final BitSet FOLLOW_TOKEN_in_infor3693 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_59_in_infrom3706_static {
    public static final BitSet FOLLOW_59_in_infrom3706 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_infrom3708_static {
    public static final BitSet FOLLOW_TOKEN_in_infrom3708 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_60_in_inunder3721_static {
    public static final BitSet FOLLOW_60_in_inunder3721 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inunder3723_static {
    public static final BitSet FOLLOW_TOKEN_in_inunder3723 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_61_in_inover3736_static {
    public static final BitSet FOLLOW_61_in_inover3736 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inover3738_static {
    public static final BitSet FOLLOW_TOKEN_in_inover3738 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_62_in_inoff3751_static {
    public static final BitSet FOLLOW_62_in_inoff3751 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inoff3753_static {
    public static final BitSet FOLLOW_TOKEN_in_inoff3753 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_63_in_nnstate3768_static {
    public static final BitSet FOLLOW_63_in_nnstate3768 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnstate3770_static {
    public static final BitSet FOLLOW_TOKEN_in_nnstate3770 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_64_in_nntime3783_static {
    public static final BitSet FOLLOW_64_in_nntime3783 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nntime3785_static {
    public static final BitSet FOLLOW_TOKEN_in_nntime3785 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_65_in_nnmass3798_static {
    public static final BitSet FOLLOW_65_in_nnmass3798 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmass3800_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmass3800 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_66_in_nnamount3813_static {
    public static final BitSet FOLLOW_66_in_nnamount3813 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnamount3815_static {
    public static final BitSet FOLLOW_TOKEN_in_nnamount3815 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_67_in_nnmolar3828_static {
    public static final BitSet FOLLOW_67_in_nnmolar3828 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmolar3830_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmolar3830 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_68_in_nnatmosphere3843_static {
    public static final BitSet FOLLOW_68_in_nnatmosphere3843 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnatmosphere3845_static {
    public static final BitSet FOLLOW_TOKEN_in_nnatmosphere3845 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_69_in_nneq3858_static {
    public static final BitSet FOLLOW_69_in_nneq3858 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nneq3860_static {
    public static final BitSet FOLLOW_TOKEN_in_nneq3860 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_70_in_nnvol3873_static {
    public static final BitSet FOLLOW_70_in_nnvol3873 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnvol3875_static {
    public static final BitSet FOLLOW_TOKEN_in_nnvol3875 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_71_in_nnchementity3888_static {
    public static final BitSet FOLLOW_71_in_nnchementity3888 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnchementity3890_static {
    public static final BitSet FOLLOW_TOKEN_in_nnchementity3890 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_72_in_nntemp3903_static {
    public static final BitSet FOLLOW_72_in_nntemp3903 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nntemp3905_static {
    public static final BitSet FOLLOW_TOKEN_in_nntemp3905 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_73_in_nnph3918_static {
    public static final BitSet FOLLOW_73_in_nnph3918 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnph3920_static {
    public static final BitSet FOLLOW_TOKEN_in_nnph3920 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_74_in_nnflash3933_static {
    public static final BitSet FOLLOW_74_in_nnflash3933 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnflash3935_static {
    public static final BitSet FOLLOW_TOKEN_in_nnflash3935 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_75_in_nngeneral3948_static {
    public static final BitSet FOLLOW_75_in_nngeneral3948 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nngeneral3950_static {
    public static final BitSet FOLLOW_TOKEN_in_nngeneral3950 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_76_in_nnmethod3963_static {
    public static final BitSet FOLLOW_76_in_nnmethod3963 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmethod3965_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmethod3965 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_77_in_nnpressure3978_static {
    public static final BitSet FOLLOW_77_in_nnpressure3978 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnpressure3980_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpressure3980 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_78_in_nncolumn3993_static {
    public static final BitSet FOLLOW_78_in_nncolumn3993 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nncolumn3995_static {
    public static final BitSet FOLLOW_TOKEN_in_nncolumn3995 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_79_in_nnchromatography4008_static {
    public static final BitSet FOLLOW_79_in_nnchromatography4008 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnchromatography4010_static {
    public static final BitSet FOLLOW_TOKEN_in_nnchromatography4010 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_80_in_nnvacuum4023_static {
    public static final BitSet FOLLOW_80_in_nnvacuum4023 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnvacuum4025_static {
    public static final BitSet FOLLOW_TOKEN_in_nnvacuum4025 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_81_in_nncycle4038_static {
    public static final BitSet FOLLOW_81_in_nncycle4038 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nncycle4040_static {
    public static final BitSet FOLLOW_TOKEN_in_nncycle4040 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_82_in_nntimes4053_static {
    public static final BitSet FOLLOW_82_in_nntimes4053 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nntimes4055_static {
    public static final BitSet FOLLOW_TOKEN_in_nntimes4055 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_83_in_nnexample4068_static {
    public static final BitSet FOLLOW_83_in_nnexample4068 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnexample4070_static {
    public static final BitSet FOLLOW_TOKEN_in_nnexample4070 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_84_in_oscarcm4085_static {
    public static final BitSet FOLLOW_84_in_oscarcm4085 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarcm4087_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarcm4087 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_85_in_vbuse4102_static {
    public static final BitSet FOLLOW_85_in_vbuse4102 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbuse4104_static {
    public static final BitSet FOLLOW_TOKEN_in_vbuse4104 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_86_in_vbchange4117_static {
    public static final BitSet FOLLOW_86_in_vbchange4117 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbchange4119_static {
    public static final BitSet FOLLOW_TOKEN_in_vbchange4119 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_87_in_vbsubmerge4132_static {
    public static final BitSet FOLLOW_87_in_vbsubmerge4132 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsubmerge4134_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsubmerge4134 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_88_in_vbsubject4147_static {
    public static final BitSet FOLLOW_88_in_vbsubject4147 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsubject4149_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsubject4149 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_89_in_nnadd4164_static {
    public static final BitSet FOLLOW_89_in_nnadd4164 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnadd4166_static {
    public static final BitSet FOLLOW_TOKEN_in_nnadd4166 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_90_in_nnmixture4179_static {
    public static final BitSet FOLLOW_90_in_nnmixture4179 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmixture4181_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmixture4181 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_91_in_vbdilute4194_static {
    public static final BitSet FOLLOW_91_in_vbdilute4194 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdilute4196_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdilute4196 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_92_in_vbadd4209_static {
    public static final BitSet FOLLOW_92_in_vbadd4209 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbadd4211_static {
    public static final BitSet FOLLOW_TOKEN_in_vbadd4211 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_93_in_vbcharge4224_static {
    public static final BitSet FOLLOW_93_in_vbcharge4224 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbcharge4226_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcharge4226 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_94_in_vbcontain4239_static {
    public static final BitSet FOLLOW_94_in_vbcontain4239 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbcontain4241_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcontain4241 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_95_in_vbdrop4254_static {
    public static final BitSet FOLLOW_95_in_vbdrop4254 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdrop4256_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdrop4256 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_96_in_vbfill4269_static {
    public static final BitSet FOLLOW_96_in_vbfill4269 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbfill4271_static {
    public static final BitSet FOLLOW_TOKEN_in_vbfill4271 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_97_in_vbsuspend4284_static {
    public static final BitSet FOLLOW_97_in_vbsuspend4284 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsuspend4286_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsuspend4286 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_98_in_vbtreat4299_static {
    public static final BitSet FOLLOW_98_in_vbtreat4299 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbtreat4301_static {
    public static final BitSet FOLLOW_TOKEN_in_vbtreat4301 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_99_in_vbapparatus4316_static {
    public static final BitSet FOLLOW_99_in_vbapparatus4316 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbapparatus4318_static {
    public static final BitSet FOLLOW_TOKEN_in_vbapparatus4318 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_100_in_nnapparatus4331_static {
    public static final BitSet FOLLOW_100_in_nnapparatus4331 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnapparatus4333_static {
    public static final BitSet FOLLOW_TOKEN_in_nnapparatus4333 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_101_in_vbconcentrate4348_static {
    public static final BitSet FOLLOW_101_in_vbconcentrate4348 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbconcentrate4350_static {
    public static final BitSet FOLLOW_TOKEN_in_vbconcentrate4350 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_102_in_nnconcentrate4363_static {
    public static final BitSet FOLLOW_102_in_nnconcentrate4363 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnconcentrate4365_static {
    public static final BitSet FOLLOW_TOKEN_in_nnconcentrate4365 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_103_in_vbcool4380_static {
    public static final BitSet FOLLOW_103_in_vbcool4380 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbcool4382_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcool4382 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_104_in_vbdegass4397_static {
    public static final BitSet FOLLOW_104_in_vbdegass4397 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdegass4399_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdegass4399 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_105_in_vbdissolve4414_static {
    public static final BitSet FOLLOW_105_in_vbdissolve4414 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdissolve4416_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdissolve4416 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_106_in_vbdry4431_static {
    public static final BitSet FOLLOW_106_in_vbdry4431 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdry4433_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdry4433 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_107_in_nndry4446_static {
    public static final BitSet FOLLOW_107_in_nndry4446 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nndry4448_static {
    public static final BitSet FOLLOW_TOKEN_in_nndry4448 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_108_in_vbextract4463_static {
    public static final BitSet FOLLOW_108_in_vbextract4463 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbextract4465_static {
    public static final BitSet FOLLOW_TOKEN_in_vbextract4465 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_109_in_nnextract4478_static {
    public static final BitSet FOLLOW_109_in_nnextract4478 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnextract4480_static {
    public static final BitSet FOLLOW_TOKEN_in_nnextract4480 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_110_in_vbfilter4495_static {
    public static final BitSet FOLLOW_110_in_vbfilter4495 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbfilter4497_static {
    public static final BitSet FOLLOW_TOKEN_in_vbfilter4497 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_111_in_nnfilter4510_static {
    public static final BitSet FOLLOW_111_in_nnfilter4510 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnfilter4512_static {
    public static final BitSet FOLLOW_TOKEN_in_nnfilter4512 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_112_in_vbheat4527_static {
    public static final BitSet FOLLOW_112_in_vbheat4527 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbheat4529_static {
    public static final BitSet FOLLOW_TOKEN_in_vbheat4529 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_113_in_vbincrease4542_static {
    public static final BitSet FOLLOW_113_in_vbincrease4542 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbincrease4544_static {
    public static final BitSet FOLLOW_TOKEN_in_vbincrease4544 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_114_in_vbimmerse4559_static {
    public static final BitSet FOLLOW_114_in_vbimmerse4559 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbimmerse4561_static {
    public static final BitSet FOLLOW_TOKEN_in_vbimmerse4561 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_115_in_vbpartition4576_static {
    public static final BitSet FOLLOW_115_in_vbpartition4576 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbpartition4578_static {
    public static final BitSet FOLLOW_TOKEN_in_vbpartition4578 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_116_in_vbprecipitate4593_static {
    public static final BitSet FOLLOW_116_in_vbprecipitate4593 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbprecipitate4595_static {
    public static final BitSet FOLLOW_TOKEN_in_vbprecipitate4595 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_117_in_nnprecipitate4608_static {
    public static final BitSet FOLLOW_117_in_nnprecipitate4608 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnprecipitate4610_static {
    public static final BitSet FOLLOW_TOKEN_in_nnprecipitate4610 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_118_in_vbpurify4625_static {
    public static final BitSet FOLLOW_118_in_vbpurify4625 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbpurify4627_static {
    public static final BitSet FOLLOW_TOKEN_in_vbpurify4627 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_119_in_nnpurify4640_static {
    public static final BitSet FOLLOW_119_in_nnpurify4640 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnpurify4642_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpurify4642 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_120_in_vbquench4657_static {
    public static final BitSet FOLLOW_120_in_vbquench4657 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbquench4659_static {
    public static final BitSet FOLLOW_TOKEN_in_vbquench4659 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_121_in_vbrecover4674_static {
    public static final BitSet FOLLOW_121_in_vbrecover4674 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbrecover4676_static {
    public static final BitSet FOLLOW_TOKEN_in_vbrecover4676 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_122_in_vbremove4691_static {
    public static final BitSet FOLLOW_122_in_vbremove4691 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbremove4693_static {
    public static final BitSet FOLLOW_TOKEN_in_vbremove4693 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_123_in_nnremove4706_static {
    public static final BitSet FOLLOW_123_in_nnremove4706 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnremove4708_static {
    public static final BitSet FOLLOW_TOKEN_in_nnremove4708 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_124_in_vbstir4723_static {
    public static final BitSet FOLLOW_124_in_vbstir4723 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbstir4725_static {
    public static final BitSet FOLLOW_TOKEN_in_vbstir4725 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_125_in_vbsynthesize4740_static {
    public static final BitSet FOLLOW_125_in_vbsynthesize4740 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsynthesize4742_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsynthesize4742 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_126_in_nnsynthesize4755_static {
    public static final BitSet FOLLOW_126_in_nnsynthesize4755 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnsynthesize4757_static {
    public static final BitSet FOLLOW_TOKEN_in_nnsynthesize4757 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_127_in_vbwait4772_static {
    public static final BitSet FOLLOW_127_in_vbwait4772 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbwait4774_static {
    public static final BitSet FOLLOW_TOKEN_in_vbwait4774 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_128_in_vbwash4789_static {
    public static final BitSet FOLLOW_128_in_vbwash4789 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbwash4791_static {
    public static final BitSet FOLLOW_TOKEN_in_vbwash4791 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_129_in_vbyield4806_static {
    public static final BitSet FOLLOW_129_in_vbyield4806 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbyield4808_static {
    public static final BitSet FOLLOW_TOKEN_in_vbyield4808 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_130_in_nnyield4823_static {
    public static final BitSet FOLLOW_130_in_nnyield4823 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnyield4825_static {
    public static final BitSet FOLLOW_TOKEN_in_nnyield4825 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_131_in_rbconj4841_static {
    public static final BitSet FOLLOW_131_in_rbconj4841 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rbconj4843_static {
    public static final BitSet FOLLOW_TOKEN_in_rbconj4843 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_132_in_colon4856_static {
    public static final BitSet FOLLOW_132_in_colon4856 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_colon4858_static {
    public static final BitSet FOLLOW_TOKEN_in_colon4858 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_133_in_comma4871_static {
    public static final BitSet FOLLOW_133_in_comma4871 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_comma4873_static {
    public static final BitSet FOLLOW_TOKEN_in_comma4873 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_134_in_apost4886_static {
    public static final BitSet FOLLOW_134_in_apost4886 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_apost4888_static {
    public static final BitSet FOLLOW_TOKEN_in_apost4888 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_135_in_neg4901_static {
    public static final BitSet FOLLOW_135_in_neg4901 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_neg4903_static {
    public static final BitSet FOLLOW_TOKEN_in_neg4903 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_136_in_dash4916_static {
    public static final BitSet FOLLOW_136_in_dash4916 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_dash4918_static {
    public static final BitSet FOLLOW_TOKEN_in_dash4918 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_137_in_stop4931_static {
    public static final BitSet FOLLOW_137_in_stop4931 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_stop4933_static {
    public static final BitSet FOLLOW_TOKEN_in_stop4933 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_138_in_percentsign4946_static {
    public static final BitSet FOLLOW_138_in_percentsign4946 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_percentsign4948_static {
    public static final BitSet FOLLOW_TOKEN_in_percentsign4948 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_139_in_lsqb4961_static {
    public static final BitSet FOLLOW_139_in_lsqb4961 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_lsqb4963_static {
    public static final BitSet FOLLOW_TOKEN_in_lsqb4963 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_140_in_rsqb4976_static {
    public static final BitSet FOLLOW_140_in_rsqb4976 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rsqb4978_static {
    public static final BitSet FOLLOW_TOKEN_in_rsqb4978 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_141_in_nnidentifier4992_static {
    public static final BitSet FOLLOW_141_in_nnidentifier4992 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnidentifier4994_static {
    public static final BitSet FOLLOW_TOKEN_in_nnidentifier4994 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_142_in_dtTHE5009_static {
    public static final BitSet FOLLOW_142_in_dtTHE5009 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_dtTHE5011_static {
    public static final BitSet FOLLOW_TOKEN_in_dtTHE5011 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_143_in_lrb5025_static {
    public static final BitSet FOLLOW_143_in_lrb5025 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_lrb5027_static {
    public static final BitSet FOLLOW_TOKEN_in_lrb5027 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_144_in_rrb5040_static {
    public static final BitSet FOLLOW_144_in_rrb5040 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rrb5042_static {
    public static final BitSet FOLLOW_TOKEN_in_rrb5042 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_145_in_cc5059_static {
    public static final BitSet FOLLOW_145_in_cc5059 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cc5061_static {
    public static final BitSet FOLLOW_TOKEN_in_cc5061 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_146_in_cd5076_static {
    public static final BitSet FOLLOW_146_in_cd5076 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cd5078_static {
    public static final BitSet FOLLOW_TOKEN_in_cd5078 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_147_in_dt5093_static {
    public static final BitSet FOLLOW_147_in_dt5093 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_dt5095_static {
    public static final BitSet FOLLOW_TOKEN_in_dt5095 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_148_in_ex5110_static {
    public static final BitSet FOLLOW_148_in_ex5110 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_ex5112_static {
    public static final BitSet FOLLOW_TOKEN_in_ex5112 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_149_in_fw5127_static {
    public static final BitSet FOLLOW_149_in_fw5127 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_fw5129_static {
    public static final BitSet FOLLOW_TOKEN_in_fw5129 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_150_in_in5144_static {
    public static final BitSet FOLLOW_150_in_in5144 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_in5146_static {
    public static final BitSet FOLLOW_TOKEN_in_in5146 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_151_in_jj5161_static {
    public static final BitSet FOLLOW_151_in_jj5161 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jj5163_static {
    public static final BitSet FOLLOW_TOKEN_in_jj5163 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_152_in_jjr5178_static {
    public static final BitSet FOLLOW_152_in_jjr5178 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjr5180_static {
    public static final BitSet FOLLOW_TOKEN_in_jjr5180 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_153_in_jjs5195_static {
    public static final BitSet FOLLOW_153_in_jjs5195 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjs5197_static {
    public static final BitSet FOLLOW_TOKEN_in_jjs5197 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_154_in_ls5212_static {
    public static final BitSet FOLLOW_154_in_ls5212 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_ls5214_static {
    public static final BitSet FOLLOW_TOKEN_in_ls5214 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_155_in_md5229_static {
    public static final BitSet FOLLOW_155_in_md5229 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_md5231_static {
    public static final BitSet FOLLOW_TOKEN_in_md5231 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_156_in_nn5246_static {
    public static final BitSet FOLLOW_156_in_nn5246 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nn5248_static {
    public static final BitSet FOLLOW_TOKEN_in_nn5248 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_157_in_nns5263_static {
    public static final BitSet FOLLOW_157_in_nns5263 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nns5265_static {
    public static final BitSet FOLLOW_TOKEN_in_nns5265 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_158_in_nnp5280_static {
    public static final BitSet FOLLOW_158_in_nnp5280 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnp5282_static {
    public static final BitSet FOLLOW_TOKEN_in_nnp5282 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_159_in_nnps5297_static {
    public static final BitSet FOLLOW_159_in_nnps5297 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnps5299_static {
    public static final BitSet FOLLOW_TOKEN_in_nnps5299 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_160_in_pdt5314_static {
    public static final BitSet FOLLOW_160_in_pdt5314 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_pdt5316_static {
    public static final BitSet FOLLOW_TOKEN_in_pdt5316 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_161_in_pos5331_static {
    public static final BitSet FOLLOW_161_in_pos5331 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_pos5333_static {
    public static final BitSet FOLLOW_TOKEN_in_pos5333 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_162_in_prp5348_static {
    public static final BitSet FOLLOW_162_in_prp5348 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_prp5350_static {
    public static final BitSet FOLLOW_TOKEN_in_prp5350 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_163_in_prp_poss5365_static {
    public static final BitSet FOLLOW_163_in_prp_poss5365 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_prp_poss5367_static {
    public static final BitSet FOLLOW_TOKEN_in_prp_poss5367 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_164_in_rb5382_static {
    public static final BitSet FOLLOW_164_in_rb5382 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rb5384_static {
    public static final BitSet FOLLOW_TOKEN_in_rb5384 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_165_in_rbr5399_static {
    public static final BitSet FOLLOW_165_in_rbr5399 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rbr5401_static {
    public static final BitSet FOLLOW_TOKEN_in_rbr5401 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_166_in_rbs5416_static {
    public static final BitSet FOLLOW_166_in_rbs5416 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rbs5418_static {
    public static final BitSet FOLLOW_TOKEN_in_rbs5418 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_167_in_rp5433_static {
    public static final BitSet FOLLOW_167_in_rp5433 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rp5435_static {
    public static final BitSet FOLLOW_TOKEN_in_rp5435 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_168_in_sym5450_static {
    public static final BitSet FOLLOW_168_in_sym5450 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_sym5452_static {
    public static final BitSet FOLLOW_TOKEN_in_sym5452 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_169_in_to5467_static {
    public static final BitSet FOLLOW_169_in_to5467 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_to5469_static {
    public static final BitSet FOLLOW_TOKEN_in_to5469 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_170_in_uh5484_static {
    public static final BitSet FOLLOW_170_in_uh5484 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_uh5486_static {
    public static final BitSet FOLLOW_TOKEN_in_uh5486 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_171_in_vb5501_static {
    public static final BitSet FOLLOW_171_in_vb5501 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vb5503_static {
    public static final BitSet FOLLOW_TOKEN_in_vb5503 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_172_in_vbd5518_static {
    public static final BitSet FOLLOW_172_in_vbd5518 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbd5520_static {
    public static final BitSet FOLLOW_TOKEN_in_vbd5520 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_173_in_vbg5535_static {
    public static final BitSet FOLLOW_173_in_vbg5535 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbg5537_static {
    public static final BitSet FOLLOW_TOKEN_in_vbg5537 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_174_in_vbn5552_static {
    public static final BitSet FOLLOW_174_in_vbn5552 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbn5554_static {
    public static final BitSet FOLLOW_TOKEN_in_vbn5554 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_175_in_vbp5569_static {
    public static final BitSet FOLLOW_175_in_vbp5569 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbp5571_static {
    public static final BitSet FOLLOW_TOKEN_in_vbp5571 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_176_in_vbz5586_static {
    public static final BitSet FOLLOW_176_in_vbz5586 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbz5588_static {
    public static final BitSet FOLLOW_TOKEN_in_vbz5588 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_177_in_wdt5603_static {
    public static final BitSet FOLLOW_177_in_wdt5603 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wdt5605_static {
    public static final BitSet FOLLOW_TOKEN_in_wdt5605 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_178_in_wp5620_static {
    public static final BitSet FOLLOW_178_in_wp5620 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wp5622_static {
    public static final BitSet FOLLOW_TOKEN_in_wp5622 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_179_in_wp_poss5637_static {
    public static final BitSet FOLLOW_179_in_wp_poss5637 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wp_poss5639_static {
    public static final BitSet FOLLOW_TOKEN_in_wp_poss5639 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_180_in_wrb5654_static {
    public static final BitSet FOLLOW_180_in_wrb5654 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wrb5656_static {
    public static final BitSet FOLLOW_TOKEN_in_wrb5656 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_procedureNounPhrase_in_synpred2_ChemicalChunker222_static {
    public static final BitSet FOLLOW_procedureNounPhrase_in_synpred2_ChemicalChunker222 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sentenceStructure_in_synpred3_ChemicalChunker227_static {
    public static final BitSet FOLLOW_sentenceStructure_in_synpred3_ChemicalChunker227 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unmatchedPhrase_in_synpred4_ChemicalChunker229_static {
    public static final BitSet FOLLOW_unmatchedPhrase_in_synpred4_ChemicalChunker229 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphrase_in_synpred6_ChemicalChunker244_static {
    public static final BitSet FOLLOW_nounphrase_in_synpred6_ChemicalChunker244 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verbphrase_in_synpred7_ChemicalChunker246_static {
    public static final BitSet FOLLOW_verbphrase_in_synpred7_ChemicalChunker246 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphrase_in_synpred8_ChemicalChunker248_static {
    public static final BitSet FOLLOW_prepphrase_in_synpred8_ChemicalChunker248 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAfter_in_synpred9_ChemicalChunker250_static {
    public static final BitSet FOLLOW_prepphraseAfter_in_synpred9_ChemicalChunker250 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred10_ChemicalChunker255_static {
    public static final BitSet FOLLOW_advAdj_in_synpred10_ChemicalChunker255 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred11_ChemicalChunker257_static {
    public static final BitSet FOLLOW_colon_in_synpred11_ChemicalChunker257 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred12_ChemicalChunker262_static {
    public static final BitSet FOLLOW_conjunction_in_synpred12_ChemicalChunker262 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbconj_in_synpred13_ChemicalChunker264_static {
    public static final BitSet FOLLOW_rbconj_in_synpred13_ChemicalChunker264 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred14_ChemicalChunker266_static {
    public static final BitSet FOLLOW_comma_in_synpred14_ChemicalChunker266 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_headingProcedureTerminators_in_synpred86_ChemicalChunker483_static {
    public static final BitSet FOLLOW_headingProcedureTerminators_in_synpred86_ChemicalChunker483 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure1_in_synpred92_ChemicalChunker584_static {
    public static final BitSet FOLLOW_nounphraseStructure1_in_synpred92_ChemicalChunker584 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_synpred94_ChemicalChunker615_static {
    public static final BitSet FOLLOW_dt_in_synpred94_ChemicalChunker615 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred95_ChemicalChunker622_static {
    public static final BitSet FOLLOW_conjunction_in_synpred95_ChemicalChunker622 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred96_ChemicalChunker622_static {
    public static final BitSet FOLLOW_conjunction_in_synpred96_ChemicalChunker622 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BEE824L});

    }static class FOLLOW_nounphraseContent_in_synpred96_ChemicalChunker625_static {
    public static final BitSet FOLLOW_nounphraseContent_in_synpred96_ChemicalChunker625 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseOf_in_synpred97_ChemicalChunker632_static {
    public static final BitSet FOLLOW_prepphraseOf_in_synpred97_ChemicalChunker632 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_synpred98_ChemicalChunker635_static {
    public static final BitSet FOLLOW_prepphraseIN_in_synpred98_ChemicalChunker635 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred99_ChemicalChunker647_static {
    public static final BitSet FOLLOW_advAdj_in_synpred99_ChemicalChunker647 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolvePhrase_in_synpred100_ChemicalChunker652_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred100_ChemicalChunker652 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratioOrBracketedRatio_in_synpred101_ChemicalChunker654_static {
    public static final BitSet FOLLOW_ratioOrBracketedRatio_in_synpred101_ChemicalChunker654 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred102_ChemicalChunker656_static {
    public static final BitSet FOLLOW_noun_in_synpred102_ChemicalChunker656 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_synpred103_ChemicalChunker658_static {
    public static final BitSet FOLLOW_numeric_in_synpred103_ChemicalChunker658 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContent_in_synpred104_ChemicalChunker660_static {
    public static final BitSet FOLLOW_bracketedContent_in_synpred104_ChemicalChunker660 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolveStructure_in_synpred105_ChemicalChunker672_static {
    public static final BitSet FOLLOW_dissolveStructure_in_synpred105_ChemicalChunker672 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred106_ChemicalChunker703_static {
    public static final BitSet FOLLOW_adj_in_synpred106_ChemicalChunker703 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred109_ChemicalChunker715_static {
    public static final BitSet FOLLOW_molecule_in_synpred109_ChemicalChunker715 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred110_ChemicalChunker724_static {
    public static final BitSet FOLLOW_conjunction_in_synpred110_ChemicalChunker724 = new BitSet(new long[]{0x800061C000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_molecule_in_synpred110_ChemicalChunker726_static {
    public static final BitSet FOLLOW_molecule_in_synpred110_ChemicalChunker726 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred112_ChemicalChunker743_static {
    public static final BitSet FOLLOW_adj_in_synpred112_ChemicalChunker743 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred114_ChemicalChunker750_static {
    public static final BitSet FOLLOW_molecule_in_synpred114_ChemicalChunker750 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_synpred116_ChemicalChunker783_static {
    public static final BitSet FOLLOW_to_in_synpred116_ChemicalChunker783 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_synpred117_ChemicalChunker786_static {
    public static final BitSet FOLLOW_inAll_in_synpred117_ChemicalChunker786 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred123_ChemicalChunker805_static {
    public static final BitSet FOLLOW_verb_in_synpred123_ChemicalChunker805 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_synpred124_ChemicalChunker808_static {
    public static final BitSet FOLLOW_md_in_synpred124_ChemicalChunker808 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_synpred125_ChemicalChunker811_static {
    public static final BitSet FOLLOW_adv_in_synpred125_ChemicalChunker811 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred126_ChemicalChunker814_static {
    public static final BitSet FOLLOW_adj_in_synpred126_ChemicalChunker814 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_synpred127_ChemicalChunker817_static {
    public static final BitSet FOLLOW_neg_in_synpred127_ChemicalChunker817 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_synpred128_ChemicalChunker793_static {
    public static final BitSet FOLLOW_md_in_synpred128_ChemicalChunker793 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_rbconj_in_synpred128_ChemicalChunker796_static {
    public static final BitSet FOLLOW_rbconj_in_synpred128_ChemicalChunker796 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_adv_in_synpred128_ChemicalChunker799_static {
    public static final BitSet FOLLOW_adv_in_synpred128_ChemicalChunker799 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_adj_in_synpred128_ChemicalChunker802_static {
    public static final BitSet FOLLOW_adj_in_synpred128_ChemicalChunker802 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_verb_in_synpred128_ChemicalChunker805_static {
    public static final BitSet FOLLOW_verb_in_synpred128_ChemicalChunker805 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00000L,0x0001FAF00BC8008BL});

    }static class FOLLOW_md_in_synpred128_ChemicalChunker808_static {
    public static final BitSet FOLLOW_md_in_synpred128_ChemicalChunker808 = new BitSet(new long[]{0x0000218000000002L,0x0000000000000000L,0x000000F00B800080L});

    }static class FOLLOW_adv_in_synpred128_ChemicalChunker811_static {
    public static final BitSet FOLLOW_adv_in_synpred128_ChemicalChunker811 = new BitSet(new long[]{0x0000218000000002L,0x0000000000000000L,0x000000F003800080L});

    }static class FOLLOW_adj_in_synpred128_ChemicalChunker814_static {
    public static final BitSet FOLLOW_adj_in_synpred128_ChemicalChunker814 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_neg_in_synpred128_ChemicalChunker817_static {
    public static final BitSet FOLLOW_neg_in_synpred128_ChemicalChunker817 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_synpred129_ChemicalChunker823_static {
    public static final BitSet FOLLOW_inoff_in_synpred129_ChemicalChunker823 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_synpred132_ChemicalChunker827_static {
    public static final BitSet FOLLOW_cc_in_synpred132_ChemicalChunker827 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC00A0L});

    }static class FOLLOW_comma_in_synpred132_ChemicalChunker830_static {
    public static final BitSet FOLLOW_comma_in_synpred132_ChemicalChunker830 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC0080L});

    }static class FOLLOW_prepphrase_in_synpred132_ChemicalChunker833_static {
    public static final BitSet FOLLOW_prepphrase_in_synpred132_ChemicalChunker833 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_degassMultiVerb_in_synpred142_ChemicalChunker863_static {
    public static final BitSet FOLLOW_degassMultiVerb_in_synpred142_ChemicalChunker863 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_synpred155_ChemicalChunker889_static {
    public static final BitSet FOLLOW_vbdegass_in_synpred155_ChemicalChunker889 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred173_ChemicalChunker951_static {
    public static final BitSet FOLLOW_dash_in_synpred173_ChemicalChunker951 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_nounStructure_in_synpred173_ChemicalChunker953_static {
    public static final BitSet FOLLOW_nounStructure_in_synpred173_ChemicalChunker953 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred176_ChemicalChunker968_static {
    public static final BitSet FOLLOW_citation_in_synpred176_ChemicalChunker968 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycles_in_synpred177_ChemicalChunker970_static {
    public static final BitSet FOLLOW_cycles_in_synpred177_ChemicalChunker970 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred178_ChemicalChunker972_static {
    public static final BitSet FOLLOW_molecule_in_synpred178_ChemicalChunker972 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_synpred179_ChemicalChunker974_static {
    public static final BitSet FOLLOW_apparatus_in_synpred179_ChemicalChunker974 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred180_ChemicalChunker976_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred180_ChemicalChunker976 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_synpred181_ChemicalChunker978_static {
    public static final BitSet FOLLOW_nnstate_in_synpred181_ChemicalChunker978 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_procedureNode_in_synpred182_ChemicalChunker980_static {
    public static final BitSet FOLLOW_procedureNode_in_synpred182_ChemicalChunker980 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred183_ChemicalChunker982_static {
    public static final BitSet FOLLOW_nn_in_synpred183_ChemicalChunker982 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_synpred186_ChemicalChunker988_static {
    public static final BitSet FOLLOW_nnadd_in_synpred186_ChemicalChunker988 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_synpred188_ChemicalChunker992_static {
    public static final BitSet FOLLOW_nnexample_in_synpred188_ChemicalChunker992 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_range_in_synpred189_ChemicalChunker994_static {
    public static final BitSet FOLLOW_range_in_synpred189_ChemicalChunker994 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaronts_in_synpred190_ChemicalChunker996_static {
    public static final BitSet FOLLOW_oscaronts_in_synpred190_ChemicalChunker996 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_synpred192_ChemicalChunker1000_static {
    public static final BitSet FOLLOW_nnatmosphere_in_synpred192_ChemicalChunker1000 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred194_ChemicalChunker1004_static {
    public static final BitSet FOLLOW_quantity_in_synpred194_ChemicalChunker1004 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred195_ChemicalChunker1006_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred195_ChemicalChunker1006 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_synpred197_ChemicalChunker1010_static {
    public static final BitSet FOLLOW_nnph_in_synpred197_ChemicalChunker1010 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_synpred199_ChemicalChunker1014_static {
    public static final BitSet FOLLOW_nngeneral_in_synpred199_ChemicalChunker1014 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_synpred202_ChemicalChunker1020_static {
    public static final BitSet FOLLOW_nnpressure_in_synpred202_ChemicalChunker1020 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_synpred212_ChemicalChunker1040_static {
    public static final BitSet FOLLOW_nnmixture_in_synpred212_ChemicalChunker1040 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_synpred213_ChemicalChunker1042_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_synpred213_ChemicalChunker1042 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_synpred219_ChemicalChunker1054_static {
    public static final BitSet FOLLOW_nnyield_in_synpred219_ChemicalChunker1054 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAtmosphere_in_synpred227_ChemicalChunker1084_static {
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_synpred227_ChemicalChunker1084 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTime_in_synpred228_ChemicalChunker1086_static {
    public static final BitSet FOLLOW_prepphraseTime_in_synpred228_ChemicalChunker1086 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTemp_in_synpred229_ChemicalChunker1088_static {
    public static final BitSet FOLLOW_prepphraseTemp_in_synpred229_ChemicalChunker1088 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_synpred230_ChemicalChunker1090_static {
    public static final BitSet FOLLOW_prepphraseIN_in_synpred230_ChemicalChunker1090 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseRole_in_synpred231_ChemicalChunker1092_static {
    public static final BitSet FOLLOW_prepphraseRole_in_synpred231_ChemicalChunker1092 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred233_ChemicalChunker1132_static {
    public static final BitSet FOLLOW_advAdj_in_synpred233_ChemicalChunker1132 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_synpred234_ChemicalChunker1137_static {
    public static final BitSet FOLLOW_nnatmosphere_in_synpred234_ChemicalChunker1137 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred235_ChemicalChunker1165_static {
    public static final BitSet FOLLOW_advAdj_in_synpred235_ChemicalChunker1165 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_synpred240_ChemicalChunker1181_static {
    public static final BitSet FOLLOW_nntime_in_synpred240_ChemicalChunker1181 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred241_ChemicalChunker1212_static {
    public static final BitSet FOLLOW_advAdj_in_synpred241_ChemicalChunker1212 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_synpred246_ChemicalChunker1227_static {
    public static final BitSet FOLLOW_nntemp_in_synpred246_ChemicalChunker1227 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred252_ChemicalChunker1400_static {
    public static final BitSet FOLLOW_conjunction_in_synpred252_ChemicalChunker1400 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred253_ChemicalChunker1400_static {
    public static final BitSet FOLLOW_conjunction_in_synpred253_ChemicalChunker1400 = new BitSet(new long[]{0x800061C000000000L,0x0000001002102280L,0x00000000138EA824L});

    }static class FOLLOW_apparatus_in_synpred253_ChemicalChunker1403_static {
    public static final BitSet FOLLOW_apparatus_in_synpred253_ChemicalChunker1403 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnApp_in_synpred256_ChemicalChunker1420_static {
    public static final BitSet FOLLOW_nnApp_in_synpred256_ChemicalChunker1420 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnapparatus_in_synpred257_ChemicalChunker1447_static {
    public static final BitSet FOLLOW_nnapparatus_in_synpred257_ChemicalChunker1447 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred258_ChemicalChunker1451_static {
    public static final BitSet FOLLOW_dash_in_synpred258_ChemicalChunker1451 = new BitSet(new long[]{0x800061C000000000L,0x0000001002102280L,0x00000000138CA824L});

    }static class FOLLOW_nnapparatus_in_synpred258_ChemicalChunker1453_static {
    public static final BitSet FOLLOW_nnapparatus_in_synpred258_ChemicalChunker1453 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred259_ChemicalChunker1467_static {
    public static final BitSet FOLLOW_quantity_in_synpred259_ChemicalChunker1467 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred260_ChemicalChunker1469_static {
    public static final BitSet FOLLOW_adj_in_synpred260_ChemicalChunker1469 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_synpred261_ChemicalChunker1471_static {
    public static final BitSet FOLLOW_nnpressure_in_synpred261_ChemicalChunker1471 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_synpred262_ChemicalChunker1473_static {
    public static final BitSet FOLLOW_nnadd_in_synpred262_ChemicalChunker1473 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred263_ChemicalChunker1475_static {
    public static final BitSet FOLLOW_molecule_in_synpred263_ChemicalChunker1475 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred264_ChemicalChunker1477_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred264_ChemicalChunker1477 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_synpred265_ChemicalChunker1479_static {
    public static final BitSet FOLLOW_nnstate_in_synpred265_ChemicalChunker1479 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred266_ChemicalChunker1481_static {
    public static final BitSet FOLLOW_nn_in_synpred266_ChemicalChunker1481 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaront_in_synpred267_ChemicalChunker1493_static {
    public static final BitSet FOLLOW_oscaront_in_synpred267_ChemicalChunker1493 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred270_ChemicalChunker1522_static {
    public static final BitSet FOLLOW_adj_in_synpred270_ChemicalChunker1522 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_synpred271_ChemicalChunker1525_static {
    public static final BitSet FOLLOW_nnstate_in_synpred271_ChemicalChunker1525 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericReferenceOrQuantity_in_synpred272_ChemicalChunker1529_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_synpred272_ChemicalChunker1529 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred273_ChemicalChunker1533_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred273_ChemicalChunker1533 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred274_ChemicalChunker1538_static {
    public static final BitSet FOLLOW_quantity_in_synpred274_ChemicalChunker1538 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_synpred275_ChemicalChunker1541_static {
    public static final BitSet FOLLOW_fromProcedure_in_synpred275_ChemicalChunker1541 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_synpred276_ChemicalChunker1550_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred276_ChemicalChunker1550 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_afterOscarCompoundStructure_in_synpred277_ChemicalChunker1553_static {
    public static final BitSet FOLLOW_afterOscarCompoundStructure_in_synpred277_ChemicalChunker1553 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_synpred279_ChemicalChunker1583_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred279_ChemicalChunker1583 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred280_ChemicalChunker1581_static {
    public static final BitSet FOLLOW_dash_in_synpred280_ChemicalChunker1581 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_synpred280_ChemicalChunker1583_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred280_ChemicalChunker1583 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});

    }static class FOLLOW_dash_in_synpred281_ChemicalChunker1588_static {
    public static final BitSet FOLLOW_dash_in_synpred281_ChemicalChunker1588 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred282_ChemicalChunker1581_static {
    public static final BitSet FOLLOW_dash_in_synpred282_ChemicalChunker1581 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_synpred282_ChemicalChunker1583_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred282_ChemicalChunker1583 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_synpred282_ChemicalChunker1588_static {
    public static final BitSet FOLLOW_dash_in_synpred282_ChemicalChunker1588 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred286_ChemicalChunker1593_static {
    public static final BitSet FOLLOW_colon_in_synpred286_ChemicalChunker1593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_synpred286_ChemicalChunker1595_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred286_ChemicalChunker1595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000048010L});

    }static class FOLLOW_lrb_in_synpred286_ChemicalChunker1600_static {
    public static final BitSet FOLLOW_lrb_in_synpred286_ChemicalChunker1600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_ratio_in_synpred286_ChemicalChunker1603_static {
    public static final BitSet FOLLOW_ratio_in_synpred286_ChemicalChunker1603 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_synpred287_ChemicalChunker1609_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred287_ChemicalChunker1609 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred288_ChemicalChunker1607_static {
    public static final BitSet FOLLOW_colon_in_synpred288_ChemicalChunker1607 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_synpred288_ChemicalChunker1609_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred288_ChemicalChunker1609 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});

    }static class FOLLOW_dash_in_synpred289_ChemicalChunker1615_static {
    public static final BitSet FOLLOW_dash_in_synpred289_ChemicalChunker1615 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apost_in_synpred290_ChemicalChunker1617_static {
    public static final BitSet FOLLOW_apost_in_synpred290_ChemicalChunker1617 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount3_in_synpred292_ChemicalChunker1660_static {
    public static final BitSet FOLLOW_moleculeamount3_in_synpred292_ChemicalChunker1660 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount1_in_synpred293_ChemicalChunker1663_static {
    public static final BitSet FOLLOW_moleculeamount1_in_synpred293_ChemicalChunker1663 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred294_ChemicalChunker1670_static {
    public static final BitSet FOLLOW_asAstate_in_synpred294_ChemicalChunker1670 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred295_ChemicalChunker1681_static {
    public static final BitSet FOLLOW_quantity_in_synpred295_ChemicalChunker1681 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMol_in_synpred296_ChemicalChunker1683_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_synpred296_ChemicalChunker1683 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMol_in_synpred299_ChemicalChunker1700_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_synpred299_ChemicalChunker1700 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred302_ChemicalChunker1722_static {
    public static final BitSet FOLLOW_quantity_in_synpred302_ChemicalChunker1722 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMol_in_synpred303_ChemicalChunker1724_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_synpred303_ChemicalChunker1724 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred308_ChemicalChunker1747_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred308_ChemicalChunker1747 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred309_ChemicalChunker1759_static {
    public static final BitSet FOLLOW_quantity_in_synpred309_ChemicalChunker1759 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMol_in_synpred310_ChemicalChunker1761_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_synpred310_ChemicalChunker1761 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred311_ChemicalChunker1765_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred311_ChemicalChunker1765 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred312_ChemicalChunker1776_static {
    public static final BitSet FOLLOW_citation_in_synpred312_ChemicalChunker1776 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred313_ChemicalChunker1778_static {
    public static final BitSet FOLLOW_quantity_in_synpred313_ChemicalChunker1778 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred315_ChemicalChunker1780_static {
    public static final BitSet FOLLOW_comma_in_synpred315_ChemicalChunker1780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_quantity1Node_in_synpred315_ChemicalChunker1783_static {
    public static final BitSet FOLLOW_quantity1Node_in_synpred315_ChemicalChunker1783 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citationStructure_in_synpred315_ChemicalChunker1785_static {
    public static final BitSet FOLLOW_citationStructure_in_synpred315_ChemicalChunker1785 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMol_in_synpred316_ChemicalChunker1788_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_synpred316_ChemicalChunker1788 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred317_ChemicalChunker1820_static {
    public static final BitSet FOLLOW_asAstate_in_synpred317_ChemicalChunker1820 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred318_ChemicalChunker1833_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred318_ChemicalChunker1833 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred319_ChemicalChunker1837_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred319_ChemicalChunker1837 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred321_ChemicalChunker1847_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred321_ChemicalChunker1847 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred322_ChemicalChunker1860_static {
    public static final BitSet FOLLOW_quantity_in_synpred322_ChemicalChunker1860 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred326_ChemicalChunker1884_static {
    public static final BitSet FOLLOW_quantity_in_synpred326_ChemicalChunker1884 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred327_ChemicalChunker1887_static {
    public static final BitSet FOLLOW_asAstate_in_synpred327_ChemicalChunker1887 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_synpred328_ChemicalChunker1890_static {
    public static final BitSet FOLLOW_fromProcedure_in_synpred328_ChemicalChunker1890 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred333_ChemicalChunker1930_static {
    public static final BitSet FOLLOW_quantity_in_synpred333_ChemicalChunker1930 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred334_ChemicalChunker1933_static {
    public static final BitSet FOLLOW_asAstate_in_synpred334_ChemicalChunker1933 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_synpred335_ChemicalChunker1936_static {
    public static final BitSet FOLLOW_fromProcedure_in_synpred335_ChemicalChunker1936 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred336_ChemicalChunker1948_static {
    public static final BitSet FOLLOW_quantity_in_synpred336_ChemicalChunker1948 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred337_ChemicalChunker1951_static {
    public static final BitSet FOLLOW_asAstate_in_synpred337_ChemicalChunker1951 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_synpred338_ChemicalChunker1954_static {
    public static final BitSet FOLLOW_fromProcedure_in_synpred338_ChemicalChunker1954 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericReferenceOrQuantity_in_synpred341_ChemicalChunker1978_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_synpred341_ChemicalChunker1978 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericReferenceOrQuantity_in_synpred344_ChemicalChunker1999_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_synpred344_ChemicalChunker1999 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred358_ChemicalChunker2057_static {
    public static final BitSet FOLLOW_quantity_in_synpred358_ChemicalChunker2057 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred363_ChemicalChunker2086_static {
    public static final BitSet FOLLOW_quantity_in_synpred363_ChemicalChunker2086 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred368_ChemicalChunker2247_static {
    public static final BitSet FOLLOW_comma_in_synpred368_ChemicalChunker2247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_measurements_in_synpred368_ChemicalChunker2250_static {
    public static final BitSet FOLLOW_measurements_in_synpred368_ChemicalChunker2250 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_synpred371_ChemicalChunker2275_static {
    public static final BitSet FOLLOW_dt_in_synpred371_ChemicalChunker2275 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurementtypes_in_synpred372_ChemicalChunker2287_static {
    public static final BitSet FOLLOW_measurementtypes_in_synpred372_ChemicalChunker2287 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield_in_synpred379_ChemicalChunker2324_static {
    public static final BitSet FOLLOW_yield_in_synpred379_ChemicalChunker2324 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred384_ChemicalChunker2523_static {
    public static final BitSet FOLLOW_dash_in_synpred384_ChemicalChunker2523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_synpred384_ChemicalChunker2525_static {
    public static final BitSet FOLLOW_cd_in_synpred384_ChemicalChunker2525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_percentsign_in_synpred384_ChemicalChunker2527_static {
    public static final BitSet FOLLOW_percentsign_in_synpred384_ChemicalChunker2527 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred388_ChemicalChunker2630_static {
    public static final BitSet FOLLOW_verb_in_synpred388_ChemicalChunker2630 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred389_ChemicalChunker2632_static {
    public static final BitSet FOLLOW_noun_in_synpred389_ChemicalChunker2632 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContent_in_synpred390_ChemicalChunker2634_static {
    public static final BitSet FOLLOW_bracketedContent_in_synpred390_ChemicalChunker2634 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_synpred395_ChemicalChunker2644_static {
    public static final BitSet FOLLOW_ratio_in_synpred395_ChemicalChunker2644 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred396_ChemicalChunker2646_static {
    public static final BitSet FOLLOW_conjunction_in_synpred396_ChemicalChunker2646 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred397_ChemicalChunker2648_static {
    public static final BitSet FOLLOW_adj_in_synpred397_ChemicalChunker2648 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_synpred400_ChemicalChunker2654_static {
    public static final BitSet FOLLOW_numeric_in_synpred400_ChemicalChunker2654 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred404_ChemicalChunker2732_static {
    public static final BitSet FOLLOW_verb_in_synpred404_ChemicalChunker2732 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_synpred405_ChemicalChunker2734_static {
    public static final BitSet FOLLOW_quantity2Node_in_synpred405_ChemicalChunker2734 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred406_ChemicalChunker2736_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred406_ChemicalChunker2736 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred407_ChemicalChunker2738_static {
    public static final BitSet FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred407_ChemicalChunker2738 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_synpred408_ChemicalChunker2740_static {
    public static final BitSet FOLLOW_ratio_in_synpred408_ChemicalChunker2740 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numberCompoundReference_in_synpred411_ChemicalChunker2742_static {
    public static final BitSet FOLLOW_numberCompoundReference_in_synpred411_ChemicalChunker2742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000230L});

    }static class FOLLOW_comma_in_synpred411_ChemicalChunker2745_static {
    public static final BitSet FOLLOW_comma_in_synpred411_ChemicalChunker2745 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred411_ChemicalChunker2749_static {
    public static final BitSet FOLLOW_colon_in_synpred411_ChemicalChunker2749 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_synpred411_ChemicalChunker2755_static {
    public static final BitSet FOLLOW_stop_in_synpred411_ChemicalChunker2755 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred412_ChemicalChunker2758_static {
    public static final BitSet FOLLOW_cd_in_synpred412_ChemicalChunker2758 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred417_ChemicalChunker2768_static {
    public static final BitSet FOLLOW_comma_in_synpred417_ChemicalChunker2768 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred418_ChemicalChunker2770_static {
    public static final BitSet FOLLOW_adj_in_synpred418_ChemicalChunker2770 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred421_ChemicalChunker2776_static {
    public static final BitSet FOLLOW_noun_in_synpred421_ChemicalChunker2776 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred422_ChemicalChunker2782_static {
    public static final BitSet FOLLOW_verb_in_synpred422_ChemicalChunker2782 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_synpred423_ChemicalChunker2784_static {
    public static final BitSet FOLLOW_quantity2Node_in_synpred423_ChemicalChunker2784 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred424_ChemicalChunker2786_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred424_ChemicalChunker2786 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred425_ChemicalChunker2788_static {
    public static final BitSet FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred425_ChemicalChunker2788 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_synpred426_ChemicalChunker2790_static {
    public static final BitSet FOLLOW_ratio_in_synpred426_ChemicalChunker2790 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred427_ChemicalChunker2792_static {
    public static final BitSet FOLLOW_cd_in_synpred427_ChemicalChunker2792 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred432_ChemicalChunker2802_static {
    public static final BitSet FOLLOW_conjunction_in_synpred432_ChemicalChunker2802 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred433_ChemicalChunker2804_static {
    public static final BitSet FOLLOW_adj_in_synpred433_ChemicalChunker2804 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred436_ChemicalChunker2810_static {
    public static final BitSet FOLLOW_noun_in_synpred436_ChemicalChunker2810 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMol_in_synpred437_ChemicalChunker2812_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_synpred437_ChemicalChunker2812 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_allIdentifierTypes_in_synpred445_ChemicalChunker2886_static {
    public static final BitSet FOLLOW_allIdentifierTypes_in_synpred445_ChemicalChunker2886 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred451_ChemicalChunker2899_static {
    public static final BitSet FOLLOW_comma_in_synpred451_ChemicalChunker2899 = new BitSet(new long[]{0x890061C000000000L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_colon_in_synpred451_ChemicalChunker2902_static {
    public static final BitSet FOLLOW_colon_in_synpred451_ChemicalChunker2902 = new BitSet(new long[]{0x890061C000000000L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_inof_in_synpred451_ChemicalChunker2905_static {
    public static final BitSet FOLLOW_inof_in_synpred451_ChemicalChunker2905 = new BitSet(new long[]{0x890061C000000000L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_infrom_in_synpred451_ChemicalChunker2909_static {
    public static final BitSet FOLLOW_infrom_in_synpred451_ChemicalChunker2909 = new BitSet(new long[]{0x890061C000000000L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_submethod_in_synpred451_ChemicalChunker2913_static {
    public static final BitSet FOLLOW_submethod_in_synpred451_ChemicalChunker2913 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_synpred452_ChemicalChunker2917_static {
    public static final BitSet FOLLOW_lrb_in_synpred452_ChemicalChunker2917 = new BitSet(new long[]{0x890061C000000000L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_submethod_in_synpred452_ChemicalChunker2919_static {
    public static final BitSet FOLLOW_submethod_in_synpred452_ChemicalChunker2919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_synpred452_ChemicalChunker2921_static {
    public static final BitSet FOLLOW_rrb_in_synpred452_ChemicalChunker2921 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred462_ChemicalChunker3075_static {
    public static final BitSet FOLLOW_colon_in_synpred462_ChemicalChunker3075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_synpred462_ChemicalChunker3077_static {
    public static final BitSet FOLLOW_cd_in_synpred462_ChemicalChunker3077 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_allIdentifierTypesOtherThanCD_in_synpred471_ChemicalChunker3152_static {
    public static final BitSet FOLLOW_allIdentifierTypesOtherThanCD_in_synpred471_ChemicalChunker3152 = new BitSet(new long[]{0x0000000000000002L});

    }
}