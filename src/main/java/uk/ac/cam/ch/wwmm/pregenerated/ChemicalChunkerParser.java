// $ANTLR 3.2 Sep 23, 2009 14:05:07 uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g 2010-07-11 12:05:04

    package uk.ac.cam.ch.wwmm.pregenerated;
 

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class ChemicalChunkerParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "NODE", "WS", "NEWLINE", "ACHAR", "DIGIT", "UNICODE", "TOKEN", "'OSCAR-CD'", "'OSCAR-CJ'", "'OSCAR-RN'", "'OSCAR-CPR'", "'OSCAR-ONT'", "'TM-UNICODE'", "'CD-UNICODE'", "'IN-AS'", "'IN-BEFORE'", "'IN-AFTER'", "'IN-IN'", "'IN-INTO'", "'IN-WITH'", "'IN-WITHOUT'", "'IN-BY'", "'IN-VIA'", "'IN-OF'", "'IN-ON'", "'IN-FOR'", "'IN-FROM'", "'IN-UNDER'", "'IN-OVER'", "'IN-OFF'", "'NN-EXAMPLE'", "'NN-STATE'", "'NN-TIME'", "'NN-MASS'", "'NN-MOLAR'", "'NN-AMOUNT'", "'NN-ATMOSPHERE'", "'NN-EQ'", "'NN-VOL'", "'NN-CHEMENTITY'", "'NN-TEMP'", "'NN-FLASH'", "'NN-GENERAL'", "'NN-METHOD'", "'NN-PRESSURE'", "'NN-COLUMN'", "'NN-CHROMATOGRAPHY'", "'NN-VACUUM'", "'NN-CYCLE'", "'NN-TIMES'", "'OSCAR-CM'", "'VB-USE'", "'VB-CHANGE'", "'VB-SUBMERGE'", "'VB-SUBJECT'", "'NN-ADD'", "'NN-MIXTURE'", "'VB-ADD'", "'VB-CHARGE'", "'VB-CONTAIN'", "'VB-DROP'", "'VB-FILL'", "'VB-SUSPEND'", "'VB-TREAT'", "'VB-APPARATUS'", "'NN-APPARATUS'", "'VB-CONCENTRATE'", "'NN-CONCENTRATE'", "'VB-COOL'", "'VB-DEGASS'", "'VB-DISSOLVE'", "'VB-DRY'", "'NN-DRY'", "'VB-EXTRACT'", "'NN-EXTRACT'", "'VB-FILTER'", "'NN-FILTER'", "'VB-HEAT'", "'VB-INCREASE'", "'VB-PARTITION'", "'VB-PRECIPITATE'", "'NN-PRECIPITATE'", "'VB-PURIFY'", "'NN-PURIFY'", "'VB-QUENCH'", "'VB-RECOVER'", "'VB-REMOVE'", "'NN-REMOVE'", "'VB-STIR'", "'VB-SYNTHESIZE'", "'NN-SYNTHESIZE'", "'VB-WAIT'", "'VB-WASH'", "'VB-YIELD'", "'COLON'", "'COMMA'", "'APOST'", "'NEG'", "'DASH'", "'STOP'", "'NN-PERCENT'", "'LSQB'", "'RSQB'", "'-LRB-'", "'-RRB-'", "'ABL'", "'ABN'", "'ABX'", "'AP'", "'AT'", "'BE'", "'BED'", "'BEDZ'", "'BEG'", "'BEM'", "'BEN'", "'BER'", "'BEZ'", "'CC'", "'CD'", "'CS'", "'DO'", "'DOD'", "'DOZ'", "'DT'", "'DTI'", "'DTS'", "'DTX'", "'EX'", "'FW'", "'FW-IN'", "'HV'", "'HVD'", "'HVG'", "'HVN'", "'IN'", "'JJ'", "'JJR'", "'JJS'", "'JJT'", "'MD'", "'NC'", "'NN'", "'NN$'", "'NNS'", "'NNS$'", "'NP'", "'NNP'", "'NP$'", "'NPS'", "'NPS$'", "'NR'", "'OD'", "'PN'", "'PN$'", "'PP$'", "'PP$$'", "'PPL'", "'PPLS'", "'PRP'", "'PPO'", "'PPS'", "'PPSS'", "'QL'", "'QLP'", "'RB'", "'RBR'", "'RB-CONJ'", "'RBT'", "'RBS'", "'RN'", "'RP'", "'SYM'", "'TO'", "'UH'", "'VB'", "'VBP'", "'VBD'", "'VBG'", "'VBN'", "'VBZ'", "'WDT'", "'WP$'", "'WPO'", "'WPS'", "'WQL'", "'WRB'", "'PDT'"
    };
    public static final int T__159=159;
    public static final int T__158=158;
    public static final int T__160=160;
    public static final int T__167=167;
    public static final int EOF=-1;
    public static final int T__168=168;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__161=161;
    public static final int TOKEN=10;
    public static final int T__162=162;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int T__92=92;
    public static final int T__148=148;
    public static final int T__90=90;
    public static final int T__147=147;
    public static final int T__149=149;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__99=99;
    public static final int T__157=157;
    public static final int T__98=98;
    public static final int T__150=150;
    public static final int T__97=97;
    public static final int T__151=151;
    public static final int T__96=96;
    public static final int T__152=152;
    public static final int T__95=95;
    public static final int T__153=153;
    public static final int T__139=139;
    public static final int T__138=138;
    public static final int T__137=137;
    public static final int T__136=136;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int T__85=85;
    public static final int T__141=141;
    public static final int T__84=84;
    public static final int T__142=142;
    public static final int T__87=87;
    public static final int T__86=86;
    public static final int T__140=140;
    public static final int T__89=89;
    public static final int T__145=145;
    public static final int T__88=88;
    public static final int T__146=146;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__126=126;
    public static final int T__125=125;
    public static final int T__128=128;
    public static final int T__127=127;
    public static final int T__71=71;
    public static final int WS=5;
    public static final int T__72=72;
    public static final int T__129=129;
    public static final int T__70=70;
    public static final int T__76=76;
    public static final int T__75=75;
    public static final int T__74=74;
    public static final int T__130=130;
    public static final int T__73=73;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__79=79;
    public static final int T__133=133;
    public static final int T__78=78;
    public static final int T__134=134;
    public static final int T__77=77;
    public static final int T__135=135;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int T__123=123;
    public static final int T__122=122;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int T__112=112;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int UNICODE=9;
    public static final int ACHAR=7;
    public static final int T__29=29;
    public static final int T__28=28;
    public static final int T__27=27;
    public static final int T__26=26;
    public static final int T__25=25;
    public static final int T__24=24;
    public static final int T__23=23;
    public static final int T__22=22;
    public static final int T__21=21;
    public static final int T__20=20;
    public static final int T__19=19;
    public static final int T__16=16;
    public static final int T__15=15;
    public static final int T__18=18;
    public static final int T__17=17;
    public static final int T__12=12;
    public static final int T__11=11;
    public static final int T__14=14;
    public static final int T__13=13;
    public static final int NODE=4;
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int T__65=65;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__61=61;
    public static final int T__60=60;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__191=191;
    public static final int T__190=190;
    public static final int T__59=59;
    public static final int DIGIT=8;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int T__184=184;
    public static final int T__43=43;
    public static final int T__183=183;
    public static final int T__40=40;
    public static final int T__186=186;
    public static final int T__41=41;
    public static final int T__185=185;
    public static final int T__46=46;
    public static final int T__188=188;
    public static final int T__47=47;
    public static final int T__187=187;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__189=189;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__180=180;
    public static final int T__182=182;
    public static final int T__181=181;
    public static final int T__175=175;
    public static final int T__30=30;
    public static final int T__174=174;
    public static final int T__31=31;
    public static final int T__173=173;
    public static final int T__32=32;
    public static final int T__172=172;
    public static final int T__33=33;
    public static final int T__179=179;
    public static final int T__34=34;
    public static final int T__178=178;
    public static final int T__35=35;
    public static final int T__177=177;
    public static final int NEWLINE=6;
    public static final int T__36=36;
    public static final int T__176=176;
    public static final int T__37=37;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int T__171=171;
    public static final int T__170=170;
    public static final int T__169=169;

    // delegates
    // delegators


        public ChemicalChunkerParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public ChemicalChunkerParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return ChemicalChunkerParser.tokenNames; }
    public String getGrammarFileName() { return "uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g"; }


    public static class document_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "document"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:1: document : ( sentences )+ -> ( ^( NODE[\"Sentence\"] sentences ) )+ ;
    public final ChemicalChunkerParser.document_return document() throws RecognitionException {
        ChemicalChunkerParser.document_return retval = new ChemicalChunkerParser.document_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.sentences_return sentences1 = null;


        RewriteRuleSubtreeStream stream_sentences=new RewriteRuleSubtreeStream(adaptor,"rule sentences");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:9: ( ( sentences )+ -> ( ^( NODE[\"Sentence\"] sentences ) )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:11: ( sentences )+
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:11: ( sentences )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                switch ( input.LA(1) ) {
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 35:
                case 36:
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 101:
                case 105:
                case 106:
                case 107:
                case 108:
                case 123:
                case 128:
                case 132:
                case 133:
                case 134:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case 146:
                case 148:
                case 151:
                case 163:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 175:
                case 176:
                case 177:
                case 179:
                case 180:
                case 181:
                case 182:
                case 183:
                case 184:
                case 185:
                case 186:
                case 187:
                case 188:
                case 189:
                case 190:
                case 191:
                    {
                    alt1=1;
                    }
                    break;

                }

                switch (alt1) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: sentences
            	    {
            	    pushFollow(FOLLOW_sentences_in_document208);
            	    sentences1=sentences();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sentences.add(sentences1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);



            // AST REWRITE
            // elements: sentences
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 34:21: -> ( ^( NODE[\"Sentence\"] sentences ) )+
            {
                if ( !(stream_sentences.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_sentences.hasNext() ) {
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:24: ^( NODE[\"Sentence\"] sentences )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "Sentence"), root_1);

                    adaptor.addChild(root_1, stream_sentences.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_sentences.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "document"

    public static class sentences_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentences"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:1: sentences : ( sentence | unmatchedPhrase )+ ( comma | stop )* ;
    public final ChemicalChunkerParser.sentences_return sentences() throws RecognitionException {
        ChemicalChunkerParser.sentences_return retval = new ChemicalChunkerParser.sentences_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.sentence_return sentence2 = null;

        ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase3 = null;

        ChemicalChunkerParser.comma_return comma4 = null;

        ChemicalChunkerParser.stop_return stop5 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:10: ( ( sentence | unmatchedPhrase )+ ( comma | stop )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:13: ( sentence | unmatchedPhrase )+ ( comma | stop )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:13: ( sentence | unmatchedPhrase )+
            int cnt2=0;
            loop2:
            do {
                int alt2=3;
                alt2 = dfa2.predict(input);
                switch (alt2) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:14: sentence
            	    {
            	    pushFollow(FOLLOW_sentence_in_sentences230);
            	    sentence2=sentence();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentence2.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:23: unmatchedPhrase
            	    {
            	    pushFollow(FOLLOW_unmatchedPhrase_in_sentences232);
            	    unmatchedPhrase3=unmatchedPhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unmatchedPhrase3.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt2 >= 1 ) break loop2;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(2, input);
                        throw eee;
                }
                cnt2++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:44: ( comma | stop )*
            loop3:
            do {
                int alt3=3;
                switch ( input.LA(1) ) {
                case 99:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA3_4 = input.LA(3);

                        if ( (synpred4_ChemicalChunker()) ) {
                            alt3=1;
                        }


                        }
                        break;

                    }

                    }
                    break;
                case 103:
                    {
                    alt3=2;
                    }
                    break;

                }

                switch (alt3) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:45: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_sentences240);
            	    comma4=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma4.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:51: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_sentences242);
            	    stop5=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop5.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sentences"

    public static class sentence_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentence"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:1: sentence : ( nounphrase | verbphrase | prepphrase )+ ( advAdj | colon )* ( conjunction )* ;
    public final ChemicalChunkerParser.sentence_return sentence() throws RecognitionException {
        ChemicalChunkerParser.sentence_return retval = new ChemicalChunkerParser.sentence_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase6 = null;

        ChemicalChunkerParser.verbphrase_return verbphrase7 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase8 = null;

        ChemicalChunkerParser.advAdj_return advAdj9 = null;

        ChemicalChunkerParser.colon_return colon10 = null;

        ChemicalChunkerParser.conjunction_return conjunction11 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:9: ( ( nounphrase | verbphrase | prepphrase )+ ( advAdj | colon )* ( conjunction )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:12: ( nounphrase | verbphrase | prepphrase )+ ( advAdj | colon )* ( conjunction )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:12: ( nounphrase | verbphrase | prepphrase )+
            int cnt4=0;
            loop4:
            do {
                int alt4=4;
                alt4 = dfa4.predict(input);
                switch (alt4) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:13: nounphrase
            	    {
            	    pushFollow(FOLLOW_nounphrase_in_sentence253);
            	    nounphrase6=nounphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphrase6.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:24: verbphrase
            	    {
            	    pushFollow(FOLLOW_verbphrase_in_sentence255);
            	    verbphrase7=verbphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verbphrase7.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:35: prepphrase
            	    {
            	    pushFollow(FOLLOW_prepphrase_in_sentence257);
            	    prepphrase8=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase8.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt4 >= 1 ) break loop4;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(4, input);
                        throw eee;
                }
                cnt4++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:48: ( advAdj | colon )*
            loop5:
            do {
                int alt5=3;
                alt5 = dfa5.predict(input);
                switch (alt5) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:49: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_sentence262);
            	    advAdj9=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj9.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:56: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_sentence264);
            	    colon10=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon10.getTree());

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:65: ( conjunction )*
            loop6:
            do {
                int alt6=2;
                switch ( input.LA(1) ) {
                case 99:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA6_4 = input.LA(3);

                        if ( (synpred11_ChemicalChunker()) ) {
                            alt6=1;
                        }


                        }
                        break;

                    }

                    }
                    break;
                case 122:
                    {
                    alt6=1;
                    }
                    break;

                }

                switch (alt6) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_sentence269);
            	    conjunction11=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction11.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sentence"

    public static class unmatchedPhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedPhrase"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:41:1: unmatchedPhrase : unmatchedTokens -> ( ^( NODE[\"Unmatched\"] unmatchedTokens ) )+ ;
    public final ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase() throws RecognitionException {
        ChemicalChunkerParser.unmatchedPhrase_return retval = new ChemicalChunkerParser.unmatchedPhrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unmatchedTokens_return unmatchedTokens12 = null;


        RewriteRuleSubtreeStream stream_unmatchedTokens=new RewriteRuleSubtreeStream(adaptor,"rule unmatchedTokens");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:42:2: ( unmatchedTokens -> ( ^( NODE[\"Unmatched\"] unmatchedTokens ) )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:42:5: unmatchedTokens
            {
            pushFollow(FOLLOW_unmatchedTokens_in_unmatchedPhrase281);
            unmatchedTokens12=unmatchedTokens();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unmatchedTokens.add(unmatchedTokens12.getTree());


            // AST REWRITE
            // elements: unmatchedTokens
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 42:21: -> ( ^( NODE[\"Unmatched\"] unmatchedTokens ) )+
            {
                if ( !(stream_unmatchedTokens.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_unmatchedTokens.hasNext() ) {
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:42:24: ^( NODE[\"Unmatched\"] unmatchedTokens )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "Unmatched"), root_1);

                    adaptor.addChild(root_1, stream_unmatchedTokens.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_unmatchedTokens.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unmatchedPhrase"

    public static class unmatchedTokens_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedTokens"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:1: unmatchedTokens : ( fw | noun | verb | inAll | dt | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj ) ;
    public final ChemicalChunkerParser.unmatchedTokens_return unmatchedTokens() throws RecognitionException {
        ChemicalChunkerParser.unmatchedTokens_return retval = new ChemicalChunkerParser.unmatchedTokens_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.fw_return fw13 = null;

        ChemicalChunkerParser.noun_return noun14 = null;

        ChemicalChunkerParser.verb_return verb15 = null;

        ChemicalChunkerParser.inAll_return inAll16 = null;

        ChemicalChunkerParser.dt_return dt17 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd18 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm19 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn20 = null;

        ChemicalChunkerParser.oscaront_return oscaront21 = null;

        ChemicalChunkerParser.brackets_return brackets22 = null;

        ChemicalChunkerParser.sym_return sym23 = null;

        ChemicalChunkerParser.colon_return colon24 = null;

        ChemicalChunkerParser.md_return md25 = null;

        ChemicalChunkerParser.neg_return neg26 = null;

        ChemicalChunkerParser.number_return number27 = null;

        ChemicalChunkerParser.comma_return comma28 = null;

        ChemicalChunkerParser.advAdj_return advAdj29 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:2: ( ( fw | noun | verb | inAll | dt | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:4: ( fw | noun | verb | inAll | dt | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj )
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:4: ( fw | noun | verb | inAll | dt | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj )
            int alt7=17;
            alt7 = dfa7.predict(input);
            switch (alt7) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:5: fw
                    {
                    pushFollow(FOLLOW_fw_in_unmatchedTokens302);
                    fw13=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw13.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:8: noun
                    {
                    pushFollow(FOLLOW_noun_in_unmatchedTokens304);
                    noun14=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun14.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:13: verb
                    {
                    pushFollow(FOLLOW_verb_in_unmatchedTokens306);
                    verb15=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb15.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:18: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_unmatchedTokens308);
                    inAll16=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll16.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:24: dt
                    {
                    pushFollow(FOLLOW_dt_in_unmatchedTokens310);
                    dt17=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt17.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:27: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_unmatchedTokens312);
                    oscarcd18=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd18.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:35: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_unmatchedTokens314);
                    oscarcm19=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm19.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:43: oscarrn
                    {
                    pushFollow(FOLLOW_oscarrn_in_unmatchedTokens316);
                    oscarrn20=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn20.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:51: oscaront
                    {
                    pushFollow(FOLLOW_oscaront_in_unmatchedTokens318);
                    oscaront21=oscaront();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaront21.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:60: brackets
                    {
                    pushFollow(FOLLOW_brackets_in_unmatchedTokens320);
                    brackets22=brackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackets22.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:69: sym
                    {
                    pushFollow(FOLLOW_sym_in_unmatchedTokens322);
                    sym23=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym23.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:73: colon
                    {
                    pushFollow(FOLLOW_colon_in_unmatchedTokens324);
                    colon24=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon24.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:79: md
                    {
                    pushFollow(FOLLOW_md_in_unmatchedTokens326);
                    md25=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md25.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:82: neg
                    {
                    pushFollow(FOLLOW_neg_in_unmatchedTokens328);
                    neg26=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg26.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:86: number
                    {
                    pushFollow(FOLLOW_number_in_unmatchedTokens330);
                    number27=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, number27.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:93: comma
                    {
                    pushFollow(FOLLOW_comma_in_unmatchedTokens332);
                    comma28=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma28.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:99: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_unmatchedTokens334);
                    advAdj29=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj29.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unmatchedTokens"

    public static class nounphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphrase"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:1: nounphrase : nounphraseStructure -> ^( NODE[\"NounPhrase\"] nounphraseStructure ) ;
    public final ChemicalChunkerParser.nounphrase_return nounphrase() throws RecognitionException {
        ChemicalChunkerParser.nounphrase_return retval = new ChemicalChunkerParser.nounphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure30 = null;


        RewriteRuleSubtreeStream stream_nounphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule nounphraseStructure");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:2: ( nounphraseStructure -> ^( NODE[\"NounPhrase\"] nounphraseStructure ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:4: nounphraseStructure
            {
            pushFollow(FOLLOW_nounphraseStructure_in_nounphrase346);
            nounphraseStructure30=nounphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphraseStructure.add(nounphraseStructure30.getTree());


            // AST REWRITE
            // elements: nounphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 49:24: -> ^( NODE[\"NounPhrase\"] nounphraseStructure )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:28: ^( NODE[\"NounPhrase\"] nounphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "NounPhrase"), root_1);

                adaptor.addChild(root_1, stream_nounphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounphrase"

    public static class nounphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:1: nounphraseStructure : ( dt )? ( apparatus | advAdj )* ( dissolvePhrase | noun | number | ratio )+ ( ( conjunction )* ( advAdj )* noun | number | ratio )* ( prepphraseOf | prepphraseIN ( dissolvePhrase )? )* ;
    public final ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure_return retval = new ChemicalChunkerParser.nounphraseStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt31 = null;

        ChemicalChunkerParser.apparatus_return apparatus32 = null;

        ChemicalChunkerParser.advAdj_return advAdj33 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase34 = null;

        ChemicalChunkerParser.noun_return noun35 = null;

        ChemicalChunkerParser.number_return number36 = null;

        ChemicalChunkerParser.ratio_return ratio37 = null;

        ChemicalChunkerParser.conjunction_return conjunction38 = null;

        ChemicalChunkerParser.advAdj_return advAdj39 = null;

        ChemicalChunkerParser.noun_return noun40 = null;

        ChemicalChunkerParser.number_return number41 = null;

        ChemicalChunkerParser.ratio_return ratio42 = null;

        ChemicalChunkerParser.prepphraseOf_return prepphraseOf43 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN44 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase45 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:21: ( ( dt )? ( apparatus | advAdj )* ( dissolvePhrase | noun | number | ratio )+ ( ( conjunction )* ( advAdj )* noun | number | ratio )* ( prepphraseOf | prepphraseIN ( dissolvePhrase )? )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:23: ( dt )? ( apparatus | advAdj )* ( dissolvePhrase | noun | number | ratio )+ ( ( conjunction )* ( advAdj )* noun | number | ratio )* ( prepphraseOf | prepphraseIN ( dissolvePhrase )? )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:23: ( dt )?
            int alt8=2;
            switch ( input.LA(1) ) {
                case 128:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA8_3 = input.LA(3);

                            if ( (synpred28_ChemicalChunker()) ) {
                                alt8=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt8) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_nounphraseStructure365);
                    dt31=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt31.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:27: ( apparatus | advAdj )*
            loop9:
            do {
                int alt9=3;
                alt9 = dfa9.predict(input);
                switch (alt9) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:28: apparatus
            	    {
            	    pushFollow(FOLLOW_apparatus_in_nounphraseStructure369);
            	    apparatus32=apparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus32.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:38: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_nounphraseStructure371);
            	    advAdj33=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj33.getTree());

            	    }
            	    break;

            	default :
            	    break loop9;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:48: ( dissolvePhrase | noun | number | ratio )+
            int cnt10=0;
            loop10:
            do {
                int alt10=5;
                alt10 = dfa10.predict(input);
                switch (alt10) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:49: dissolvePhrase
            	    {
            	    pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure377);
            	    dissolvePhrase34=dissolvePhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase34.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:64: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_nounphraseStructure379);
            	    noun35=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun35.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:69: number
            	    {
            	    pushFollow(FOLLOW_number_in_nounphraseStructure381);
            	    number36=number();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, number36.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:76: ratio
            	    {
            	    pushFollow(FOLLOW_ratio_in_nounphraseStructure383);
            	    ratio37=ratio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio37.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt10 >= 1 ) break loop10;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(10, input);
                        throw eee;
                }
                cnt10++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:87: ( ( conjunction )* ( advAdj )* noun | number | ratio )*
            loop13:
            do {
                int alt13=4;
                alt13 = dfa13.predict(input);
                switch (alt13) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:88: ( conjunction )* ( advAdj )* noun
            	    {
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:88: ( conjunction )*
            	    loop11:
            	    do {
            	        int alt11=2;
            	        alt11 = dfa11.predict(input);
            	        switch (alt11) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_nounphraseStructure391);
            	    	    conjunction38=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction38.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop11;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:101: ( advAdj )*
            	    loop12:
            	    do {
            	        int alt12=2;
            	        alt12 = dfa12.predict(input);
            	        switch (alt12) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
            	    	    {
            	    	    pushFollow(FOLLOW_advAdj_in_nounphraseStructure394);
            	    	    advAdj39=advAdj();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj39.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop12;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_noun_in_nounphraseStructure398);
            	    noun40=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun40.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:115: number
            	    {
            	    pushFollow(FOLLOW_number_in_nounphraseStructure400);
            	    number41=number();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, number41.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:122: ratio
            	    {
            	    pushFollow(FOLLOW_ratio_in_nounphraseStructure402);
            	    ratio42=ratio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio42.getTree());

            	    }
            	    break;

            	default :
            	    break loop13;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:133: ( prepphraseOf | prepphraseIN ( dissolvePhrase )? )*
            loop15:
            do {
                int alt15=3;
                switch ( input.LA(1) ) {
                case 21:
                    {
                    int LA15_2 = input.LA(2);

                    if ( (synpred42_ChemicalChunker()) ) {
                        alt15=2;
                    }


                    }
                    break;
                case 27:
                    {
                    int LA15_3 = input.LA(2);

                    if ( (synpred40_ChemicalChunker()) ) {
                        alt15=1;
                    }


                    }
                    break;

                }

                switch (alt15) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:134: prepphraseOf
            	    {
            	    pushFollow(FOLLOW_prepphraseOf_in_nounphraseStructure410);
            	    prepphraseOf43=prepphraseOf();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOf43.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:148: prepphraseIN ( dissolvePhrase )?
            	    {
            	    pushFollow(FOLLOW_prepphraseIN_in_nounphraseStructure413);
            	    prepphraseIN44=prepphraseIN();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN44.getTree());
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:161: ( dissolvePhrase )?
            	    int alt14=2;
            	    alt14 = dfa14.predict(input);
            	    switch (alt14) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dissolvePhrase
            	            {
            	            pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure415);
            	            dissolvePhrase45=dissolvePhrase();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase45.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure"

    public static class dissolvePhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolvePhrase"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:51:1: dissolvePhrase : ( dissolveStructure1 | dissolveStructure2 ) -> ^( NODE[\"DissolvePhrase\"] ( dissolveStructure1 )? ( dissolveStructure2 )? ) ;
    public final ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase() throws RecognitionException {
        ChemicalChunkerParser.dissolvePhrase_return retval = new ChemicalChunkerParser.dissolvePhrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.dissolveStructure1_return dissolveStructure146 = null;

        ChemicalChunkerParser.dissolveStructure2_return dissolveStructure247 = null;


        RewriteRuleSubtreeStream stream_dissolveStructure1=new RewriteRuleSubtreeStream(adaptor,"rule dissolveStructure1");
        RewriteRuleSubtreeStream stream_dissolveStructure2=new RewriteRuleSubtreeStream(adaptor,"rule dissolveStructure2");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:2: ( ( dissolveStructure1 | dissolveStructure2 ) -> ^( NODE[\"DissolvePhrase\"] ( dissolveStructure1 )? ( dissolveStructure2 )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:4: ( dissolveStructure1 | dissolveStructure2 )
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:4: ( dissolveStructure1 | dissolveStructure2 )
            int alt16=2;
            switch ( input.LA(1) ) {
            case 107:
                {
                int LA16_1 = input.LA(2);

                if ( (synpred43_ChemicalChunker()) ) {
                    alt16=1;
                }
                else if ( (true) ) {
                    alt16=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 1, input);

                    throw nvae;
                }
                }
                break;
            case 38:
            case 54:
            case 99:
            case 123:
                {
                alt16=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }

            switch (alt16) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:5: dissolveStructure1
                    {
                    pushFollow(FOLLOW_dissolveStructure1_in_dissolvePhrase430);
                    dissolveStructure146=dissolveStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure1.add(dissolveStructure146.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:24: dissolveStructure2
                    {
                    pushFollow(FOLLOW_dissolveStructure2_in_dissolvePhrase432);
                    dissolveStructure247=dissolveStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure2.add(dissolveStructure247.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: dissolveStructure1, dissolveStructure2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 52:44: -> ^( NODE[\"DissolvePhrase\"] ( dissolveStructure1 )? ( dissolveStructure2 )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:48: ^( NODE[\"DissolvePhrase\"] ( dissolveStructure1 )? ( dissolveStructure2 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "DissolvePhrase"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:73: ( dissolveStructure1 )?
                if ( stream_dissolveStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_dissolveStructure1.nextTree());

                }
                stream_dissolveStructure1.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:93: ( dissolveStructure2 )?
                if ( stream_dissolveStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_dissolveStructure2.nextTree());

                }
                stream_dissolveStructure2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dissolvePhrase"

    public static class dissolveStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolveStructure1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:1: dissolveStructure1 : lrb molecule ( inin molecule )+ rrb ;
    public final ChemicalChunkerParser.dissolveStructure1_return dissolveStructure1() throws RecognitionException {
        ChemicalChunkerParser.dissolveStructure1_return retval = new ChemicalChunkerParser.dissolveStructure1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb48 = null;

        ChemicalChunkerParser.molecule_return molecule49 = null;

        ChemicalChunkerParser.inin_return inin50 = null;

        ChemicalChunkerParser.molecule_return molecule51 = null;

        ChemicalChunkerParser.rrb_return rrb52 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:2: ( lrb molecule ( inin molecule )+ rrb )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:4: lrb molecule ( inin molecule )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_dissolveStructure1456);
            lrb48=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb48.getTree());
            pushFollow(FOLLOW_molecule_in_dissolveStructure1458);
            molecule49=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule49.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:17: ( inin molecule )+
            int cnt17=0;
            loop17:
            do {
                int alt17=2;
                switch ( input.LA(1) ) {
                case 21:
                    {
                    alt17=1;
                    }
                    break;

                }

                switch (alt17) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:18: inin molecule
            	    {
            	    pushFollow(FOLLOW_inin_in_dissolveStructure1461);
            	    inin50=inin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin50.getTree());
            	    pushFollow(FOLLOW_molecule_in_dissolveStructure1463);
            	    molecule51=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule51.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt17 >= 1 ) break loop17;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(17, input);
                        throw eee;
                }
                cnt17++;
            } while (true);

            pushFollow(FOLLOW_rrb_in_dissolveStructure1467);
            rrb52=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb52.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dissolveStructure1"

    public static class dissolveStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolveStructure2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:1: dissolveStructure2 : molecule ( inin molecule )+ ;
    public final ChemicalChunkerParser.dissolveStructure2_return dissolveStructure2() throws RecognitionException {
        ChemicalChunkerParser.dissolveStructure2_return retval = new ChemicalChunkerParser.dissolveStructure2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.molecule_return molecule53 = null;

        ChemicalChunkerParser.inin_return inin54 = null;

        ChemicalChunkerParser.molecule_return molecule55 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:2: ( molecule ( inin molecule )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:4: molecule ( inin molecule )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_molecule_in_dissolveStructure2476);
            molecule53=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule53.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:13: ( inin molecule )+
            int cnt18=0;
            loop18:
            do {
                int alt18=2;
                alt18 = dfa18.predict(input);
                switch (alt18) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:14: inin molecule
            	    {
            	    pushFollow(FOLLOW_inin_in_dissolveStructure2479);
            	    inin54=inin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin54.getTree());
            	    pushFollow(FOLLOW_molecule_in_dissolveStructure2481);
            	    molecule55=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule55.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt18 >= 1 ) break loop18;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(18, input);
                        throw eee;
                }
                cnt18++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dissolveStructure2"

    public static class conjunction_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conjunction"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:1: conjunction : ( cc | comma );
    public final ChemicalChunkerParser.conjunction_return conjunction() throws RecognitionException {
        ChemicalChunkerParser.conjunction_return retval = new ChemicalChunkerParser.conjunction_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cc_return cc56 = null;

        ChemicalChunkerParser.comma_return comma57 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:2: ( cc | comma )
            int alt19=2;
            switch ( input.LA(1) ) {
            case 122:
                {
                alt19=1;
                }
                break;
            case 99:
                {
                alt19=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;
            }

            switch (alt19) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:5: cc
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cc_in_conjunction496);
                    cc56=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc56.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:8: comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_conjunction498);
                    comma57=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma57.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "conjunction"

    public static class verbphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphrase"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:64:1: verbphrase : verbphraseStructure -> ^( NODE[\"VerbPhrase\"] verbphraseStructure ) ;
    public final ChemicalChunkerParser.verbphrase_return verbphrase() throws RecognitionException {
        ChemicalChunkerParser.verbphrase_return retval = new ChemicalChunkerParser.verbphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure58 = null;


        RewriteRuleSubtreeStream stream_verbphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule verbphraseStructure");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:2: ( verbphraseStructure -> ^( NODE[\"VerbPhrase\"] verbphraseStructure ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:4: verbphraseStructure
            {
            pushFollow(FOLLOW_verbphraseStructure_in_verbphrase508);
            verbphraseStructure58=verbphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_verbphraseStructure.add(verbphraseStructure58.getTree());


            // AST REWRITE
            // elements: verbphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 65:24: -> ^( NODE[\"VerbPhrase\"] verbphraseStructure )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:28: ^( NODE[\"VerbPhrase\"] verbphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "VerbPhrase"), root_1);

                adaptor.addChild(root_1, stream_verbphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "verbphrase"

    public static class verbphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphraseStructure"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:1: verbphraseStructure : ( to )? ( inAll )? ( inafter )? ( ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* ;
    public final ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.verbphraseStructure_return retval = new ChemicalChunkerParser.verbphraseStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.to_return to59 = null;

        ChemicalChunkerParser.inAll_return inAll60 = null;

        ChemicalChunkerParser.inafter_return inafter61 = null;

        ChemicalChunkerParser.md_return md62 = null;

        ChemicalChunkerParser.adv_return adv63 = null;

        ChemicalChunkerParser.adj_return adj64 = null;

        ChemicalChunkerParser.verb_return verb65 = null;

        ChemicalChunkerParser.md_return md66 = null;

        ChemicalChunkerParser.adv_return adv67 = null;

        ChemicalChunkerParser.adj_return adj68 = null;

        ChemicalChunkerParser.neg_return neg69 = null;

        ChemicalChunkerParser.inoff_return inoff70 = null;

        ChemicalChunkerParser.cc_return cc71 = null;

        ChemicalChunkerParser.comma_return comma72 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase73 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:21: ( ( to )? ( inAll )? ( inafter )? ( ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:24: ( to )? ( inAll )? ( inafter )? ( ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:24: ( to )?
            int alt20=2;
            switch ( input.LA(1) ) {
                case 177:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA20_3 = input.LA(3);

                            if ( (synpred47_ChemicalChunker()) ) {
                                alt20=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt20) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: to
                    {
                    pushFollow(FOLLOW_to_in_verbphraseStructure527);
                    to59=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to59.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:28: ( inAll )?
            int alt21=2;
            switch ( input.LA(1) ) {
                case 18:
                case 19:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 139:
                case 177:
                    {
                    alt21=1;
                    }
                    break;
                case 20:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA21_4 = input.LA(3);

                            if ( (synpred48_ChemicalChunker()) ) {
                                alt21=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt21) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_verbphraseStructure530);
                    inAll60=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll60.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:35: ( inafter )?
            int alt22=2;
            switch ( input.LA(1) ) {
                case 20:
                    {
                    alt22=1;
                    }
                    break;
            }

            switch (alt22) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inafter
                    {
                    pushFollow(FOLLOW_inafter_in_verbphraseStructure533);
                    inafter61=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter61.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:44: ( ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+
            int cnt31=0;
            loop31:
            do {
                int alt31=2;
                alt31 = dfa31.predict(input);
                switch (alt31) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:45: ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
            	    {
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:45: ( md )*
            	    loop23:
            	    do {
            	        int alt23=2;
            	        switch ( input.LA(1) ) {
            	        case 144:
            	            {
            	            alt23=1;
            	            }
            	            break;

            	        }

            	        switch (alt23) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure537);
            	    	    md62=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md62.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop23;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:49: ( adv )*
            	    loop24:
            	    do {
            	        int alt24=2;
            	        switch ( input.LA(1) ) {
            	        case 169:
            	        case 170:
            	        case 171:
            	        case 172:
            	        case 173:
            	        case 175:
            	            {
            	            alt24=1;
            	            }
            	            break;

            	        }

            	        switch (alt24) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure540);
            	    	    adv63=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv63.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop24;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:54: ( adj )?
            	    int alt25=2;
            	    switch ( input.LA(1) ) {
            	        case 12:
            	        case 13:
            	        case 140:
            	        case 141:
            	        case 142:
            	        case 143:
            	            {
            	            alt25=1;
            	            }
            	            break;
            	    }

            	    switch (alt25) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure543);
            	            adj64=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj64.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:59: ( verb )+
            	    int cnt26=0;
            	    loop26:
            	    do {
            	        int alt26=2;
            	        alt26 = dfa26.predict(input);
            	        switch (alt26) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: verb
            	    	    {
            	    	    pushFollow(FOLLOW_verb_in_verbphraseStructure546);
            	    	    verb65=verb();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb65.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt26 >= 1 ) break loop26;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(26, input);
            	                throw eee;
            	        }
            	        cnt26++;
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:65: ( md )*
            	    loop27:
            	    do {
            	        int alt27=2;
            	        switch ( input.LA(1) ) {
            	        case 144:
            	            {
            	            switch ( input.LA(2) ) {
            	            case TOKEN:
            	                {
            	                int LA27_3 = input.LA(3);

            	                if ( (synpred54_ChemicalChunker()) ) {
            	                    alt27=1;
            	                }


            	                }
            	                break;

            	            }

            	            }
            	            break;

            	        }

            	        switch (alt27) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure549);
            	    	    md66=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md66.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop27;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:69: ( adv )*
            	    loop28:
            	    do {
            	        int alt28=2;
            	        alt28 = dfa28.predict(input);
            	        switch (alt28) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure552);
            	    	    adv67=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv67.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop28;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:74: ( adj )?
            	    int alt29=2;
            	    alt29 = dfa29.predict(input);
            	    switch (alt29) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure555);
            	            adj68=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj68.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:79: ( neg )?
            	    int alt30=2;
            	    switch ( input.LA(1) ) {
            	        case 101:
            	            {
            	            switch ( input.LA(2) ) {
            	                case TOKEN:
            	                    {
            	                    int LA30_3 = input.LA(3);

            	                    if ( (synpred57_ChemicalChunker()) ) {
            	                        alt30=1;
            	                    }
            	                    }
            	                    break;
            	            }

            	            }
            	            break;
            	    }

            	    switch (alt30) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: neg
            	            {
            	            pushFollow(FOLLOW_neg_in_verbphraseStructure558);
            	            neg69=neg();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, neg69.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt31 >= 1 ) break loop31;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(31, input);
                        throw eee;
                }
                cnt31++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:87: ( inoff )?
            int alt32=2;
            switch ( input.LA(1) ) {
                case 33:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA32_3 = input.LA(3);

                            if ( (synpred59_ChemicalChunker()) ) {
                                alt32=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt32) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inoff
                    {
                    pushFollow(FOLLOW_inoff_in_verbphraseStructure564);
                    inoff70=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff70.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:94: ( ( cc )? ( comma )? prepphrase )*
            loop35:
            do {
                int alt35=2;
                alt35 = dfa35.predict(input);
                switch (alt35) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:95: ( cc )? ( comma )? prepphrase
            	    {
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:95: ( cc )?
            	    int alt33=2;
            	    switch ( input.LA(1) ) {
            	        case 122:
            	            {
            	            alt33=1;
            	            }
            	            break;
            	    }

            	    switch (alt33) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
            	            {
            	            pushFollow(FOLLOW_cc_in_verbphraseStructure568);
            	            cc71=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc71.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:99: ( comma )?
            	    int alt34=2;
            	    switch ( input.LA(1) ) {
            	        case 99:
            	            {
            	            alt34=1;
            	            }
            	            break;
            	    }

            	    switch (alt34) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: comma
            	            {
            	            pushFollow(FOLLOW_comma_in_verbphraseStructure571);
            	            comma72=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma72.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_prepphrase_in_verbphraseStructure574);
            	    prepphrase73=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase73.getTree());

            	    }
            	    break;

            	default :
            	    break loop35;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "verbphraseStructure"

    public static class verb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbsubject | vbadd | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );
    public final ChemicalChunkerParser.verb_return verb() throws RecognitionException {
        ChemicalChunkerParser.verb_return retval = new ChemicalChunkerParser.verb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.vb_return vb74 = null;

        ChemicalChunkerParser.vbp_return vbp75 = null;

        ChemicalChunkerParser.vbg_return vbg76 = null;

        ChemicalChunkerParser.vbd_return vbd77 = null;

        ChemicalChunkerParser.vbz_return vbz78 = null;

        ChemicalChunkerParser.vbn_return vbn79 = null;

        ChemicalChunkerParser.vbuse_return vbuse80 = null;

        ChemicalChunkerParser.vbsubmerge_return vbsubmerge81 = null;

        ChemicalChunkerParser.vbsubject_return vbsubject82 = null;

        ChemicalChunkerParser.vbadd_return vbadd83 = null;

        ChemicalChunkerParser.vbcharge_return vbcharge84 = null;

        ChemicalChunkerParser.vbcontain_return vbcontain85 = null;

        ChemicalChunkerParser.vbdrop_return vbdrop86 = null;

        ChemicalChunkerParser.vbfill_return vbfill87 = null;

        ChemicalChunkerParser.vbsuspend_return vbsuspend88 = null;

        ChemicalChunkerParser.vbtreat_return vbtreat89 = null;

        ChemicalChunkerParser.vbapparatus_return vbapparatus90 = null;

        ChemicalChunkerParser.vbconcentrate_return vbconcentrate91 = null;

        ChemicalChunkerParser.vbcool_return vbcool92 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass93 = null;

        ChemicalChunkerParser.vbdissolve_return vbdissolve94 = null;

        ChemicalChunkerParser.vbdry_return vbdry95 = null;

        ChemicalChunkerParser.vbextract_return vbextract96 = null;

        ChemicalChunkerParser.vbfilter_return vbfilter97 = null;

        ChemicalChunkerParser.vbheat_return vbheat98 = null;

        ChemicalChunkerParser.vbincrease_return vbincrease99 = null;

        ChemicalChunkerParser.vbpartition_return vbpartition100 = null;

        ChemicalChunkerParser.vbprecipitate_return vbprecipitate101 = null;

        ChemicalChunkerParser.vbpurify_return vbpurify102 = null;

        ChemicalChunkerParser.vbquench_return vbquench103 = null;

        ChemicalChunkerParser.vbrecover_return vbrecover104 = null;

        ChemicalChunkerParser.vbremove_return vbremove105 = null;

        ChemicalChunkerParser.vbstir_return vbstir106 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize107 = null;

        ChemicalChunkerParser.vbwait_return vbwait108 = null;

        ChemicalChunkerParser.vbwash_return vbwash109 = null;

        ChemicalChunkerParser.vbyield_return vbyield110 = null;

        ChemicalChunkerParser.vbchange_return vbchange111 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:6: ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbsubject | vbadd | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange )
            int alt36=38;
            switch ( input.LA(1) ) {
            case 179:
                {
                alt36=1;
                }
                break;
            case 180:
                {
                alt36=2;
                }
                break;
            case 182:
                {
                alt36=3;
                }
                break;
            case 181:
                {
                alt36=4;
                }
                break;
            case 184:
                {
                alt36=5;
                }
                break;
            case 183:
                {
                alt36=6;
                }
                break;
            case 55:
                {
                alt36=7;
                }
                break;
            case 57:
                {
                alt36=8;
                }
                break;
            case 58:
                {
                alt36=9;
                }
                break;
            case 61:
                {
                alt36=10;
                }
                break;
            case 62:
                {
                alt36=11;
                }
                break;
            case 63:
                {
                alt36=12;
                }
                break;
            case 64:
                {
                alt36=13;
                }
                break;
            case 65:
                {
                alt36=14;
                }
                break;
            case 66:
                {
                alt36=15;
                }
                break;
            case 67:
                {
                alt36=16;
                }
                break;
            case 68:
                {
                alt36=17;
                }
                break;
            case 70:
                {
                alt36=18;
                }
                break;
            case 72:
                {
                alt36=19;
                }
                break;
            case 73:
                {
                alt36=20;
                }
                break;
            case 74:
                {
                alt36=21;
                }
                break;
            case 75:
                {
                alt36=22;
                }
                break;
            case 77:
                {
                alt36=23;
                }
                break;
            case 79:
                {
                alt36=24;
                }
                break;
            case 81:
                {
                alt36=25;
                }
                break;
            case 82:
                {
                alt36=26;
                }
                break;
            case 83:
                {
                alt36=27;
                }
                break;
            case 84:
                {
                alt36=28;
                }
                break;
            case 86:
                {
                alt36=29;
                }
                break;
            case 88:
                {
                alt36=30;
                }
                break;
            case 89:
                {
                alt36=31;
                }
                break;
            case 90:
                {
                alt36=32;
                }
                break;
            case 92:
                {
                alt36=33;
                }
                break;
            case 93:
                {
                alt36=34;
                }
                break;
            case 95:
                {
                alt36=35;
                }
                break;
            case 96:
                {
                alt36=36;
                }
                break;
            case 97:
                {
                alt36=37;
                }
                break;
            case 56:
                {
                alt36=38;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;
            }

            switch (alt36) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:8: vb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vb_in_verb586);
                    vb74=vb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vb74.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:11: vbp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbp_in_verb588);
                    vbp75=vbp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbp75.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:15: vbg
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbg_in_verb590);
                    vbg76=vbg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbg76.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:19: vbd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbd_in_verb592);
                    vbd77=vbd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbd77.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:23: vbz
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbz_in_verb594);
                    vbz78=vbz();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbz78.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:27: vbn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbn_in_verb596);
                    vbn79=vbn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbn79.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:31: vbuse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbuse_in_verb598);
                    vbuse80=vbuse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbuse80.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:37: vbsubmerge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubmerge_in_verb600);
                    vbsubmerge81=vbsubmerge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubmerge81.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:48: vbsubject
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubject_in_verb602);
                    vbsubject82=vbsubject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubject82.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:58: vbadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbadd_in_verb604);
                    vbadd83=vbadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbadd83.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:64: vbcharge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcharge_in_verb606);
                    vbcharge84=vbcharge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcharge84.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:73: vbcontain
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcontain_in_verb608);
                    vbcontain85=vbcontain();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcontain85.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:83: vbdrop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdrop_in_verb610);
                    vbdrop86=vbdrop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdrop86.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:90: vbfill
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfill_in_verb612);
                    vbfill87=vbfill();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill87.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:97: vbsuspend
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsuspend_in_verb614);
                    vbsuspend88=vbsuspend();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsuspend88.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:107: vbtreat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbtreat_in_verb616);
                    vbtreat89=vbtreat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbtreat89.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:115: vbapparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbapparatus_in_verb618);
                    vbapparatus90=vbapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbapparatus90.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:127: vbconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbconcentrate_in_verb620);
                    vbconcentrate91=vbconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbconcentrate91.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:141: vbcool
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcool_in_verb622);
                    vbcool92=vbcool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcool92.getTree());

                    }
                    break;
                case 20 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:148: vbdegass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdegass_in_verb624);
                    vbdegass93=vbdegass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass93.getTree());

                    }
                    break;
                case 21 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:157: vbdissolve
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdissolve_in_verb626);
                    vbdissolve94=vbdissolve();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdissolve94.getTree());

                    }
                    break;
                case 22 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:168: vbdry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdry_in_verb628);
                    vbdry95=vbdry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdry95.getTree());

                    }
                    break;
                case 23 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:174: vbextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbextract_in_verb630);
                    vbextract96=vbextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbextract96.getTree());

                    }
                    break;
                case 24 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:184: vbfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfilter_in_verb632);
                    vbfilter97=vbfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfilter97.getTree());

                    }
                    break;
                case 25 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:194: vbheat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbheat_in_verb635);
                    vbheat98=vbheat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbheat98.getTree());

                    }
                    break;
                case 26 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:201: vbincrease
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbincrease_in_verb637);
                    vbincrease99=vbincrease();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbincrease99.getTree());

                    }
                    break;
                case 27 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:212: vbpartition
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpartition_in_verb639);
                    vbpartition100=vbpartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpartition100.getTree());

                    }
                    break;
                case 28 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:224: vbprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbprecipitate_in_verb641);
                    vbprecipitate101=vbprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbprecipitate101.getTree());

                    }
                    break;
                case 29 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:238: vbpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpurify_in_verb643);
                    vbpurify102=vbpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpurify102.getTree());

                    }
                    break;
                case 30 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:247: vbquench
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbquench_in_verb645);
                    vbquench103=vbquench();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbquench103.getTree());

                    }
                    break;
                case 31 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:256: vbrecover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbrecover_in_verb647);
                    vbrecover104=vbrecover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbrecover104.getTree());

                    }
                    break;
                case 32 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:266: vbremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbremove_in_verb649);
                    vbremove105=vbremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbremove105.getTree());

                    }
                    break;
                case 33 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:275: vbstir
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbstir_in_verb651);
                    vbstir106=vbstir();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbstir106.getTree());

                    }
                    break;
                case 34 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:282: vbsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsynthesize_in_verb653);
                    vbsynthesize107=vbsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize107.getTree());

                    }
                    break;
                case 35 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:295: vbwait
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwait_in_verb655);
                    vbwait108=vbwait();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwait108.getTree());

                    }
                    break;
                case 36 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:302: vbwash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwash_in_verb657);
                    vbwash109=vbwash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwash109.getTree());

                    }
                    break;
                case 37 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:309: vbyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbyield_in_verb659);
                    vbyield110=vbyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield110.getTree());

                    }
                    break;
                case 38 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:317: vbchange
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbchange_in_verb661);
                    vbchange111=vbchange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbchange111.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "verb"

    public static class number_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:1: number : ( cd | oscarcd );
    public final ChemicalChunkerParser.number_return number() throws RecognitionException {
        ChemicalChunkerParser.number_return retval = new ChemicalChunkerParser.number_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd112 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd113 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:8: ( cd | oscarcd )
            int alt37=2;
            switch ( input.LA(1) ) {
            case 123:
                {
                alt37=1;
                }
                break;
            case 11:
                {
                alt37=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;
            }

            switch (alt37) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:10: cd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cd_in_number669);
                    cd112=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd112.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:13: oscarcd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcd_in_number671);
                    oscarcd113=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd113.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "number"

    public static class clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "clause"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:1: clause : ( wdt | wp_poss | wpo | wpo | wps | wql | wrb | ex | pdt );
    public final ChemicalChunkerParser.clause_return clause() throws RecognitionException {
        ChemicalChunkerParser.clause_return retval = new ChemicalChunkerParser.clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.wdt_return wdt114 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss115 = null;

        ChemicalChunkerParser.wpo_return wpo116 = null;

        ChemicalChunkerParser.wpo_return wpo117 = null;

        ChemicalChunkerParser.wps_return wps118 = null;

        ChemicalChunkerParser.wql_return wql119 = null;

        ChemicalChunkerParser.wrb_return wrb120 = null;

        ChemicalChunkerParser.ex_return ex121 = null;

        ChemicalChunkerParser.pdt_return pdt122 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:8: ( wdt | wp_poss | wpo | wpo | wps | wql | wrb | ex | pdt )
            int alt38=9;
            alt38 = dfa38.predict(input);
            switch (alt38) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:10: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wdt_in_clause679);
                    wdt114=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt114.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:14: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_poss_in_clause681);
                    wp_poss115=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss115.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:22: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wpo_in_clause683);
                    wpo116=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo116.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:26: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wpo_in_clause685);
                    wpo117=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo117.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:30: wps
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wps_in_clause687);
                    wps118=wps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wps118.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:34: wql
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wql_in_clause689);
                    wql119=wql();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wql119.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:38: wrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wrb_in_clause691);
                    wrb120=wrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wrb120.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:42: ex
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ex_in_clause693);
                    ex121=ex();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex121.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:45: pdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pdt_in_clause695);
                    pdt122=pdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pdt122.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "clause"

    public static class noun_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "noun"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:1: noun : ( prp | citation | molecule | apparatus | unnamedmolecule | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | oscarcpr | range | amount | mixture | nntime | nnatmosphere | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | oscaront | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | fwin | sym | clause );
    public final ChemicalChunkerParser.noun_return noun() throws RecognitionException {
        ChemicalChunkerParser.noun_return retval = new ChemicalChunkerParser.noun_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prp_return prp123 = null;

        ChemicalChunkerParser.citation_return citation124 = null;

        ChemicalChunkerParser.molecule_return molecule125 = null;

        ChemicalChunkerParser.apparatus_return apparatus126 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule127 = null;

        ChemicalChunkerParser.nnstate_return nnstate128 = null;

        ChemicalChunkerParser.nn_return nn129 = null;

        ChemicalChunkerParser.nns_return nns130 = null;

        ChemicalChunkerParser.nnp_return nnp131 = null;

        ChemicalChunkerParser.nnadd_return nnadd132 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase133 = null;

        ChemicalChunkerParser.nnexample_return nnexample134 = null;

        ChemicalChunkerParser.oscarcpr_return oscarcpr135 = null;

        ChemicalChunkerParser.range_return range136 = null;

        ChemicalChunkerParser.amount_return amount137 = null;

        ChemicalChunkerParser.mixture_return mixture138 = null;

        ChemicalChunkerParser.nntime_return nntime139 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere140 = null;

        ChemicalChunkerParser.nneq_return nneq141 = null;

        ChemicalChunkerParser.quantity_return quantity142 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity143 = null;

        ChemicalChunkerParser.measurements_return measurements144 = null;

        ChemicalChunkerParser.nntemp_return nntemp145 = null;

        ChemicalChunkerParser.nnflash_return nnflash146 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral147 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod148 = null;

        ChemicalChunkerParser.nnamount_return nnamount149 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure150 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn151 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography152 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum153 = null;

        ChemicalChunkerParser.nncycle_return nncycle154 = null;

        ChemicalChunkerParser.nntimes_return nntimes155 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate156 = null;

        ChemicalChunkerParser.nnvol_return nnvol157 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify158 = null;

        ChemicalChunkerParser.wdt_return wdt159 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss160 = null;

        ChemicalChunkerParser.wpo_return wpo161 = null;

        ChemicalChunkerParser.wps_return wps162 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize163 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture164 = null;

        ChemicalChunkerParser.oscaront_return oscaront165 = null;

        ChemicalChunkerParser.number_return number166 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound167 = null;

        ChemicalChunkerParser.nnextract_return nnextract168 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter169 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate170 = null;

        ChemicalChunkerParser.nnremove_return nnremove171 = null;

        ChemicalChunkerParser.fw_return fw172 = null;

        ChemicalChunkerParser.fwin_return fwin173 = null;

        ChemicalChunkerParser.sym_return sym174 = null;

        ChemicalChunkerParser.clause_return clause175 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:6: ( prp | citation | molecule | apparatus | unnamedmolecule | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | oscarcpr | range | amount | mixture | nntime | nnatmosphere | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | oscaront | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | fwin | sym | clause )
            int alt39=53;
            alt39 = dfa39.predict(input);
            switch (alt39) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:9: prp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_in_noun703);
                    prp123=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp123.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:13: citation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_citation_in_noun705);
                    citation124=citation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation124.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:22: molecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molecule_in_noun707);
                    molecule125=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule125.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:31: apparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_apparatus_in_noun709);
                    apparatus126=apparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus126.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:41: unnamedmolecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmolecule_in_noun711);
                    unnamedmolecule127=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule127.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:57: nnstate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnstate_in_noun713);
                    nnstate128=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate128.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:65: nn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nn_in_noun715);
                    nn129=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn129.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:68: nns
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nns_in_noun717);
                    nns130=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns130.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:72: nnp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnp_in_noun719);
                    nnp131=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp131.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:76: nnadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnadd_in_noun721);
                    nnadd132=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd132.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:82: preparationphrase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_preparationphrase_in_noun723);
                    preparationphrase133=preparationphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase133.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:100: nnexample
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnexample_in_noun725);
                    nnexample134=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample134.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:110: oscarcpr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcpr_in_noun727);
                    oscarcpr135=oscarcpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcpr135.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:119: range
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_range_in_noun729);
                    range136=range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, range136.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:125: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_amount_in_noun731);
                    amount137=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount137.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:132: mixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mixture_in_noun733);
                    mixture138=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture138.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:140: nntime
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntime_in_noun735);
                    nntime139=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime139.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:147: nnatmosphere
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnatmosphere_in_noun737);
                    nnatmosphere140=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere140.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:160: nneq
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nneq_in_noun739);
                    nneq141=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq141.getTree());

                    }
                    break;
                case 20 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:165: quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantity_in_noun741);
                    quantity142=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity142.getTree());

                    }
                    break;
                case 21 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:174: nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchementity_in_noun743);
                    nnchementity143=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity143.getTree());

                    }
                    break;
                case 22 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:187: measurements
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_measurements_in_noun745);
                    measurements144=measurements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements144.getTree());

                    }
                    break;
                case 23 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:200: nntemp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntemp_in_noun747);
                    nntemp145=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp145.getTree());

                    }
                    break;
                case 24 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:207: nnflash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnflash_in_noun749);
                    nnflash146=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash146.getTree());

                    }
                    break;
                case 25 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:215: nngeneral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nngeneral_in_noun751);
                    nngeneral147=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral147.getTree());

                    }
                    break;
                case 26 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:225: nnmethod
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnmethod_in_noun753);
                    nnmethod148=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod148.getTree());

                    }
                    break;
                case 27 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:234: nnamount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnamount_in_noun755);
                    nnamount149=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount149.getTree());

                    }
                    break;
                case 28 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:243: nnpressure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpressure_in_noun757);
                    nnpressure150=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure150.getTree());

                    }
                    break;
                case 29 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:254: nncolumn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncolumn_in_noun759);
                    nncolumn151=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn151.getTree());

                    }
                    break;
                case 30 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:263: nnchromatography
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchromatography_in_noun761);
                    nnchromatography152=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography152.getTree());

                    }
                    break;
                case 31 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:280: nnvacuum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvacuum_in_noun763);
                    nnvacuum153=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum153.getTree());

                    }
                    break;
                case 32 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:289: nncycle
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncycle_in_noun765);
                    nncycle154=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle154.getTree());

                    }
                    break;
                case 33 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:297: nntimes
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntimes_in_noun767);
                    nntimes155=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes155.getTree());

                    }
                    break;
                case 34 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:305: nnconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnconcentrate_in_noun769);
                    nnconcentrate156=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate156.getTree());

                    }
                    break;
                case 35 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:319: nnvol
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvol_in_noun771);
                    nnvol157=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol157.getTree());

                    }
                    break;
                case 36 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:325: nnpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpurify_in_noun773);
                    nnpurify158=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify158.getTree());

                    }
                    break;
                case 37 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:334: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wdt_in_noun775);
                    wdt159=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt159.getTree());

                    }
                    break;
                case 38 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:338: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_poss_in_noun777);
                    wp_poss160=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss160.getTree());

                    }
                    break;
                case 39 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:346: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wpo_in_noun779);
                    wpo161=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo161.getTree());

                    }
                    break;
                case 40 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:350: wps
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wps_in_noun781);
                    wps162=wps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wps162.getTree());

                    }
                    break;
                case 41 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:354: nnsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnsynthesize_in_noun783);
                    nnsynthesize163=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize163.getTree());

                    }
                    break;
                case 42 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:367: nnmixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnmixture_in_noun785);
                    nnmixture164=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture164.getTree());

                    }
                    break;
                case 43 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:377: oscaront
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscaront_in_noun787);
                    oscaront165=oscaront();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaront165.getTree());

                    }
                    break;
                case 44 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:386: number
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_number_in_noun789);
                    number166=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, number166.getTree());

                    }
                    break;
                case 45 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:393: oscarCompound
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarCompound_in_noun791);
                    oscarCompound167=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound167.getTree());

                    }
                    break;
                case 46 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:407: nnextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnextract_in_noun793);
                    nnextract168=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract168.getTree());

                    }
                    break;
                case 47 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:417: nnfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnfilter_in_noun795);
                    nnfilter169=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter169.getTree());

                    }
                    break;
                case 48 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:426: nnprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnprecipitate_in_noun797);
                    nnprecipitate170=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate170.getTree());

                    }
                    break;
                case 49 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:440: nnremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnremove_in_noun799);
                    nnremove171=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove171.getTree());

                    }
                    break;
                case 50 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:449: fw
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fw_in_noun801);
                    fw172=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw172.getTree());

                    }
                    break;
                case 51 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:452: fwin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fwin_in_noun803);
                    fwin173=fwin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fwin173.getTree());

                    }
                    break;
                case 52 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:457: sym
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sym_in_noun805);
                    sym174=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym174.getTree());

                    }
                    break;
                case 53 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:461: clause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_clause_in_noun807);
                    clause175=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause175.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "noun"

    public static class range_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "range"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:1: range : cd dash cd ;
    public final ChemicalChunkerParser.range_return range() throws RecognitionException {
        ChemicalChunkerParser.range_return retval = new ChemicalChunkerParser.range_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd176 = null;

        ChemicalChunkerParser.dash_return dash177 = null;

        ChemicalChunkerParser.cd_return cd178 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:6: ( cd dash cd )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:8: cd dash cd
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_range813);
            cd176=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd176.getTree());
            pushFollow(FOLLOW_dash_in_range815);
            dash177=dash();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash177.getTree());
            pushFollow(FOLLOW_cd_in_range817);
            cd178=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd178.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "range"

    public static class ratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ratio"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:1: ratio : ( numberratio | nounratio ) -> ^( NODE[\"RATIO\"] ( numberratio )? ( nounratio )? ) ;
    public final ChemicalChunkerParser.ratio_return ratio() throws RecognitionException {
        ChemicalChunkerParser.ratio_return retval = new ChemicalChunkerParser.ratio_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.numberratio_return numberratio179 = null;

        ChemicalChunkerParser.nounratio_return nounratio180 = null;


        RewriteRuleSubtreeStream stream_nounratio=new RewriteRuleSubtreeStream(adaptor,"rule nounratio");
        RewriteRuleSubtreeStream stream_numberratio=new RewriteRuleSubtreeStream(adaptor,"rule numberratio");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:7: ( ( numberratio | nounratio ) -> ^( NODE[\"RATIO\"] ( numberratio )? ( nounratio )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:9: ( numberratio | nounratio )
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:9: ( numberratio | nounratio )
            int alt40=2;
            switch ( input.LA(1) ) {
            case 123:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 37:
                    case 38:
                    case 39:
                    case 42:
                    case 102:
                    case 104:
                    case 146:
                        {
                        alt40=2;
                        }
                        break;
                    case 98:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 11:
                            case 12:
                            case 13:
                            case 14:
                            case 15:
                            case 34:
                            case 35:
                            case 36:
                            case 38:
                            case 39:
                            case 40:
                            case 41:
                            case 42:
                            case 43:
                            case 44:
                            case 45:
                            case 46:
                            case 47:
                            case 48:
                            case 49:
                            case 50:
                            case 51:
                            case 52:
                            case 53:
                            case 54:
                            case 59:
                            case 60:
                            case 69:
                            case 71:
                            case 78:
                            case 80:
                            case 85:
                            case 87:
                            case 91:
                            case 93:
                            case 94:
                            case 99:
                            case 107:
                            case 128:
                            case 132:
                            case 133:
                            case 134:
                            case 140:
                            case 141:
                            case 142:
                            case 143:
                            case 146:
                            case 148:
                            case 151:
                            case 163:
                            case 176:
                            case 185:
                            case 186:
                            case 187:
                            case 188:
                            case 189:
                            case 190:
                            case 191:
                                {
                                alt40=2;
                                }
                                break;
                            case 123:
                                {
                                switch ( input.LA(6) ) {
                                case TOKEN:
                                    {
                                    int LA40_7 = input.LA(7);

                                    if ( (synpred161_ChemicalChunker()) ) {
                                        alt40=1;
                                    }
                                    else if ( (true) ) {
                                        alt40=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 40, 7, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 40, 6, input);

                                    throw nvae;
                                }

                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 40, 5, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 40, 4, input);

                            throw nvae;
                        }

                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 40, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 40, 1, input);

                    throw nvae;
                }

                }
                break;
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 34:
            case 35:
            case 36:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 59:
            case 60:
            case 69:
            case 71:
            case 78:
            case 80:
            case 85:
            case 87:
            case 91:
            case 93:
            case 94:
            case 99:
            case 107:
            case 128:
            case 132:
            case 133:
            case 134:
            case 140:
            case 141:
            case 142:
            case 143:
            case 146:
            case 148:
            case 151:
            case 163:
            case 176:
            case 185:
            case 186:
            case 187:
            case 188:
            case 189:
            case 190:
            case 191:
                {
                alt40=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;
            }

            switch (alt40) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:10: numberratio
                    {
                    pushFollow(FOLLOW_numberratio_in_ratio826);
                    numberratio179=numberratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberratio.add(numberratio179.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:22: nounratio
                    {
                    pushFollow(FOLLOW_nounratio_in_ratio828);
                    nounratio180=nounratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nounratio.add(nounratio180.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: nounratio, numberratio
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 74:33: -> ^( NODE[\"RATIO\"] ( numberratio )? ( nounratio )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:36: ^( NODE[\"RATIO\"] ( numberratio )? ( nounratio )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "RATIO"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:52: ( numberratio )?
                if ( stream_numberratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberratio.nextTree());

                }
                stream_numberratio.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:65: ( nounratio )?
                if ( stream_nounratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_nounratio.nextTree());

                }
                stream_nounratio.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ratio"

    public static class numberratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberratio"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:1: numberratio : cd ( colon cd )+ ;
    public final ChemicalChunkerParser.numberratio_return numberratio() throws RecognitionException {
        ChemicalChunkerParser.numberratio_return retval = new ChemicalChunkerParser.numberratio_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd181 = null;

        ChemicalChunkerParser.colon_return colon182 = null;

        ChemicalChunkerParser.cd_return cd183 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:13: ( cd ( colon cd )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:16: cd ( colon cd )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_numberratio852);
            cd181=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd181.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:19: ( colon cd )+
            int cnt41=0;
            loop41:
            do {
                int alt41=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 123:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA41_5 = input.LA(5);

                                if ( (synpred162_ChemicalChunker()) ) {
                                    alt41=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt41) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:20: colon cd
            	    {
            	    pushFollow(FOLLOW_colon_in_numberratio855);
            	    colon182=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon182.getTree());
            	    pushFollow(FOLLOW_cd_in_numberratio857);
            	    cd183=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd183.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt41 >= 1 ) break loop41;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(41, input);
                        throw eee;
                }
                cnt41++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberratio"

    public static class nounratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounratio"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:1: nounratio : noun ( colon noun )+ ;
    public final ChemicalChunkerParser.nounratio_return nounratio() throws RecognitionException {
        ChemicalChunkerParser.nounratio_return retval = new ChemicalChunkerParser.nounratio_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.noun_return noun184 = null;

        ChemicalChunkerParser.colon_return colon185 = null;

        ChemicalChunkerParser.noun_return noun186 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:2: ( noun ( colon noun )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:5: noun ( colon noun )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_noun_in_nounratio870);
            noun184=noun();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, noun184.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:11: ( colon noun )+
            int cnt42=0;
            loop42:
            do {
                int alt42=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    int LA42_2 = input.LA(2);

                    if ( (synpred163_ChemicalChunker()) ) {
                        alt42=1;
                    }


                    }
                    break;

                }

                switch (alt42) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:12: colon noun
            	    {
            	    pushFollow(FOLLOW_colon_in_nounratio874);
            	    colon185=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon185.getTree());
            	    pushFollow(FOLLOW_noun_in_nounratio876);
            	    noun186=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun186.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt42 >= 1 ) break loop42;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(42, input);
                        throw eee;
                }
                cnt42++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounratio"

    public static class citation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citation"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:1: citation : ( citationStructure1 | citationStructure2 ) -> ^( NODE[\"CITATION\"] ( citationStructure1 )? ( citationStructure2 )? ) ;
    public final ChemicalChunkerParser.citation_return citation() throws RecognitionException {
        ChemicalChunkerParser.citation_return retval = new ChemicalChunkerParser.citation_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.citationStructure1_return citationStructure1187 = null;

        ChemicalChunkerParser.citationStructure2_return citationStructure2188 = null;


        RewriteRuleSubtreeStream stream_citationStructure2=new RewriteRuleSubtreeStream(adaptor,"rule citationStructure2");
        RewriteRuleSubtreeStream stream_citationStructure1=new RewriteRuleSubtreeStream(adaptor,"rule citationStructure1");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:9: ( ( citationStructure1 | citationStructure2 ) -> ^( NODE[\"CITATION\"] ( citationStructure1 )? ( citationStructure2 )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:11: ( citationStructure1 | citationStructure2 )
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:11: ( citationStructure1 | citationStructure2 )
            int alt43=2;
            switch ( input.LA(1) ) {
            case 107:
                {
                alt43=1;
                }
                break;
            case 99:
                {
                alt43=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;
            }

            switch (alt43) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:12: citationStructure1
                    {
                    pushFollow(FOLLOW_citationStructure1_in_citation889);
                    citationStructure1187=citationStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_citationStructure1.add(citationStructure1187.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:31: citationStructure2
                    {
                    pushFollow(FOLLOW_citationStructure2_in_citation891);
                    citationStructure2188=citationStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_citationStructure2.add(citationStructure2188.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: citationStructure2, citationStructure1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 80:51: -> ^( NODE[\"CITATION\"] ( citationStructure1 )? ( citationStructure2 )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:54: ^( NODE[\"CITATION\"] ( citationStructure1 )? ( citationStructure2 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "CITATION"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:74: ( citationStructure1 )?
                if ( stream_citationStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_citationStructure1.nextTree());

                }
                stream_citationStructure1.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:94: ( citationStructure2 )?
                if ( stream_citationStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_citationStructure2.nextTree());

                }
                stream_citationStructure2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "citation"

    public static class citationStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationStructure1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:1: citationStructure1 : lrb citationContent rrb ;
    public final ChemicalChunkerParser.citationStructure1_return citationStructure1() throws RecognitionException {
        ChemicalChunkerParser.citationStructure1_return retval = new ChemicalChunkerParser.citationStructure1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb189 = null;

        ChemicalChunkerParser.citationContent_return citationContent190 = null;

        ChemicalChunkerParser.rrb_return rrb191 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:19: ( lrb citationContent rrb )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:22: lrb citationContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_citationStructure1914);
            lrb189=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb189.getTree());
            pushFollow(FOLLOW_citationContent_in_citationStructure1916);
            citationContent190=citationContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, citationContent190.getTree());
            pushFollow(FOLLOW_rrb_in_citationStructure1918);
            rrb191=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb191.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "citationStructure1"

    public static class citationStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationStructure2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:1: citationStructure2 : comma lrb citationContent rrb comma ;
    public final ChemicalChunkerParser.citationStructure2_return citationStructure2() throws RecognitionException {
        ChemicalChunkerParser.citationStructure2_return retval = new ChemicalChunkerParser.citationStructure2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma192 = null;

        ChemicalChunkerParser.lrb_return lrb193 = null;

        ChemicalChunkerParser.citationContent_return citationContent194 = null;

        ChemicalChunkerParser.rrb_return rrb195 = null;

        ChemicalChunkerParser.comma_return comma196 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:19: ( comma lrb citationContent rrb comma )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:21: comma lrb citationContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_citationStructure2924);
            comma192=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma192.getTree());
            pushFollow(FOLLOW_lrb_in_citationStructure2926);
            lrb193=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb193.getTree());
            pushFollow(FOLLOW_citationContent_in_citationStructure2928);
            citationContent194=citationContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, citationContent194.getTree());
            pushFollow(FOLLOW_rrb_in_citationStructure2930);
            rrb195=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb195.getTree());
            pushFollow(FOLLOW_comma_in_citationStructure2932);
            comma196=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma196.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "citationStructure2"

    public static class citationContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationContent"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:1: citationContent : ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ ;
    public final ChemicalChunkerParser.citationContent_return citationContent() throws RecognitionException {
        ChemicalChunkerParser.citationContent_return retval = new ChemicalChunkerParser.citationContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nnp_return nnp197 = null;

        ChemicalChunkerParser.fw_return fw198 = null;

        ChemicalChunkerParser.cd_return cd199 = null;

        ChemicalChunkerParser.conjunction_return conjunction200 = null;

        ChemicalChunkerParser.nnp_return nnp201 = null;

        ChemicalChunkerParser.fw_return fw202 = null;

        ChemicalChunkerParser.cd_return cd203 = null;

        ChemicalChunkerParser.conjunction_return conjunction204 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:16: ( ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:20: ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:20: ( nnp | fw | cd | conjunction )
            int alt44=4;
            switch ( input.LA(1) ) {
            case 151:
                {
                alt44=1;
                }
                break;
            case 133:
                {
                alt44=2;
                }
                break;
            case 123:
                {
                alt44=3;
                }
                break;
            case 99:
            case 122:
                {
                alt44=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;
            }

            switch (alt44) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:21: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_citationContent941);
                    nnp197=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp197.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:25: fw
                    {
                    pushFollow(FOLLOW_fw_in_citationContent943);
                    fw198=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw198.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:28: cd
                    {
                    pushFollow(FOLLOW_cd_in_citationContent945);
                    cd199=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd199.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:31: conjunction
                    {
                    pushFollow(FOLLOW_conjunction_in_citationContent947);
                    conjunction200=conjunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction200.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:44: ( nnp | fw | cd | conjunction )+
            int cnt45=0;
            loop45:
            do {
                int alt45=5;
                switch ( input.LA(1) ) {
                case 151:
                    {
                    alt45=1;
                    }
                    break;
                case 133:
                    {
                    alt45=2;
                    }
                    break;
                case 123:
                    {
                    alt45=3;
                    }
                    break;
                case 99:
                case 122:
                    {
                    alt45=4;
                    }
                    break;

                }

                switch (alt45) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:45: nnp
            	    {
            	    pushFollow(FOLLOW_nnp_in_citationContent951);
            	    nnp201=nnp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp201.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:49: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_citationContent953);
            	    fw202=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw202.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:52: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_citationContent955);
            	    cd203=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd203.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:55: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_citationContent957);
            	    conjunction204=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction204.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt45 >= 1 ) break loop45;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(45, input);
                        throw eee;
                }
                cnt45++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "citationContent"

    public static class mixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixture"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:1: mixture : ( mixtureStructure2 | mixtureStructure1 ) -> ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? ) ;
    public final ChemicalChunkerParser.mixture_return mixture() throws RecognitionException {
        ChemicalChunkerParser.mixture_return retval = new ChemicalChunkerParser.mixture_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2205 = null;

        ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1206 = null;


        RewriteRuleSubtreeStream stream_mixtureStructure1=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure1");
        RewriteRuleSubtreeStream stream_mixtureStructure2=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure2");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:8: ( ( mixtureStructure2 | mixtureStructure1 ) -> ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:10: ( mixtureStructure2 | mixtureStructure1 )
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:10: ( mixtureStructure2 | mixtureStructure1 )
            int alt46=2;
            switch ( input.LA(1) ) {
            case 99:
                {
                alt46=1;
                }
                break;
            case 107:
                {
                alt46=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;
            }

            switch (alt46) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:11: mixtureStructure2
                    {
                    pushFollow(FOLLOW_mixtureStructure2_in_mixture969);
                    mixtureStructure2205=mixtureStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure2.add(mixtureStructure2205.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:29: mixtureStructure1
                    {
                    pushFollow(FOLLOW_mixtureStructure1_in_mixture971);
                    mixtureStructure1206=mixtureStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure1.add(mixtureStructure1206.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: mixtureStructure1, mixtureStructure2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 86:48: -> ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:51: ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MIXTURE"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:70: ( mixtureStructure2 )?
                if ( stream_mixtureStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure2.nextTree());

                }
                stream_mixtureStructure2.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:89: ( mixtureStructure1 )?
                if ( stream_mixtureStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure1.nextTree());

                }
                stream_mixtureStructure1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixture"

    public static class mixtureStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:1: mixtureStructure2 : comma lrb mixtureContent rrb comma ;
    public final ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure2_return retval = new ChemicalChunkerParser.mixtureStructure2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma207 = null;

        ChemicalChunkerParser.lrb_return lrb208 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent209 = null;

        ChemicalChunkerParser.rrb_return rrb210 = null;

        ChemicalChunkerParser.comma_return comma211 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:18: ( comma lrb mixtureContent rrb comma )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:20: comma lrb mixtureContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_mixtureStructure2992);
            comma207=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma207.getTree());
            pushFollow(FOLLOW_lrb_in_mixtureStructure2994);
            lrb208=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb208.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure2996);
            mixtureContent209=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent209.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure2998);
            rrb210=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb210.getTree());
            pushFollow(FOLLOW_comma_in_mixtureStructure21000);
            comma211=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma211.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure2"

    public static class mixtureStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:88:1: mixtureStructure1 : lrb mixtureContent rrb ;
    public final ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure1_return retval = new ChemicalChunkerParser.mixtureStructure1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb212 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent213 = null;

        ChemicalChunkerParser.rrb_return rrb214 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:88:18: ( lrb mixtureContent rrb )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:88:21: lrb mixtureContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_mixtureStructure11007);
            lrb212=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb212.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure11009);
            mixtureContent213=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent213.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure11011);
            rrb214=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb214.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure1"

    public static class mixtureContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureContent"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:1: mixtureContent : ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ ;
    public final ChemicalChunkerParser.mixtureContent_return mixtureContent() throws RecognitionException {
        ChemicalChunkerParser.mixtureContent_return retval = new ChemicalChunkerParser.mixtureContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.fw_return fw215 = null;

        ChemicalChunkerParser.verb_return verb216 = null;

        ChemicalChunkerParser.measurements_return measurements217 = null;

        ChemicalChunkerParser.md_return md218 = null;

        ChemicalChunkerParser.stop_return stop219 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound220 = null;

        ChemicalChunkerParser.molecule_return molecule221 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule222 = null;

        ChemicalChunkerParser.dash_return dash223 = null;

        ChemicalChunkerParser.sym_return sym224 = null;

        ChemicalChunkerParser.cd_return cd225 = null;

        ChemicalChunkerParser.noun_return noun226 = null;

        ChemicalChunkerParser.inof_return inof227 = null;

        ChemicalChunkerParser.inAll_return inAll228 = null;

        ChemicalChunkerParser.cd_return cd229 = null;

        ChemicalChunkerParser.comma_return comma230 = null;

        ChemicalChunkerParser.adj_return adj231 = null;

        ChemicalChunkerParser.colon_return colon232 = null;

        ChemicalChunkerParser.stop_return stop233 = null;

        ChemicalChunkerParser.fw_return fw234 = null;

        ChemicalChunkerParser.verb_return verb235 = null;

        ChemicalChunkerParser.measurements_return measurements236 = null;

        ChemicalChunkerParser.md_return md237 = null;

        ChemicalChunkerParser.stop_return stop238 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound239 = null;

        ChemicalChunkerParser.molecule_return molecule240 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule241 = null;

        ChemicalChunkerParser.dash_return dash242 = null;

        ChemicalChunkerParser.sym_return sym243 = null;

        ChemicalChunkerParser.cd_return cd244 = null;

        ChemicalChunkerParser.noun_return noun245 = null;

        ChemicalChunkerParser.inof_return inof246 = null;

        ChemicalChunkerParser.inAll_return inAll247 = null;

        ChemicalChunkerParser.cd_return cd248 = null;

        ChemicalChunkerParser.comma_return comma249 = null;

        ChemicalChunkerParser.adj_return adj250 = null;

        ChemicalChunkerParser.colon_return colon251 = null;

        ChemicalChunkerParser.stop_return stop252 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:15: ( ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:19: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:19: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )
            int alt47=19;
            alt47 = dfa47.predict(input);
            switch (alt47) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:20: fw
                    {
                    pushFollow(FOLLOW_fw_in_mixtureContent1020);
                    fw215=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw215.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:23: verb
                    {
                    pushFollow(FOLLOW_verb_in_mixtureContent1022);
                    verb216=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb216.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:28: measurements
                    {
                    pushFollow(FOLLOW_measurements_in_mixtureContent1024);
                    measurements217=measurements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements217.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:41: md
                    {
                    pushFollow(FOLLOW_md_in_mixtureContent1026);
                    md218=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md218.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:44: stop
                    {
                    pushFollow(FOLLOW_stop_in_mixtureContent1028);
                    stop219=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop219.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:49: oscarCompound
                    {
                    pushFollow(FOLLOW_oscarCompound_in_mixtureContent1030);
                    oscarCompound220=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound220.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:63: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_mixtureContent1032);
                    molecule221=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule221.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:72: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent1034);
                    unnamedmolecule222=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule222.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:88: dash
                    {
                    pushFollow(FOLLOW_dash_in_mixtureContent1036);
                    dash223=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash223.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:93: sym
                    {
                    pushFollow(FOLLOW_sym_in_mixtureContent1038);
                    sym224=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym224.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:97: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureContent1040);
                    cd225=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd225.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:100: noun
                    {
                    pushFollow(FOLLOW_noun_in_mixtureContent1042);
                    noun226=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun226.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:105: inof
                    {
                    pushFollow(FOLLOW_inof_in_mixtureContent1044);
                    inof227=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof227.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:110: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_mixtureContent1046);
                    inAll228=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll228.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:116: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureContent1048);
                    cd229=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd229.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:119: comma
                    {
                    pushFollow(FOLLOW_comma_in_mixtureContent1050);
                    comma230=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma230.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:125: adj
                    {
                    pushFollow(FOLLOW_adj_in_mixtureContent1052);
                    adj231=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj231.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:129: colon
                    {
                    pushFollow(FOLLOW_colon_in_mixtureContent1054);
                    colon232=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon232.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:135: stop
                    {
                    pushFollow(FOLLOW_stop_in_mixtureContent1056);
                    stop233=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop233.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:141: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            int cnt48=0;
            loop48:
            do {
                int alt48=20;
                alt48 = dfa48.predict(input);
                switch (alt48) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:142: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_mixtureContent1060);
            	    fw234=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw234.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:145: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_mixtureContent1062);
            	    verb235=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb235.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:150: measurements
            	    {
            	    pushFollow(FOLLOW_measurements_in_mixtureContent1064);
            	    measurements236=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements236.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:163: md
            	    {
            	    pushFollow(FOLLOW_md_in_mixtureContent1066);
            	    md237=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md237.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:166: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_mixtureContent1068);
            	    stop238=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop238.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:171: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_mixtureContent1070);
            	    oscarCompound239=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound239.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:185: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_mixtureContent1072);
            	    molecule240=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule240.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:194: unnamedmolecule
            	    {
            	    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent1074);
            	    unnamedmolecule241=unnamedmolecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule241.getTree());

            	    }
            	    break;
            	case 9 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:210: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_mixtureContent1076);
            	    dash242=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash242.getTree());

            	    }
            	    break;
            	case 10 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:215: sym
            	    {
            	    pushFollow(FOLLOW_sym_in_mixtureContent1078);
            	    sym243=sym();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym243.getTree());

            	    }
            	    break;
            	case 11 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:219: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mixtureContent1080);
            	    cd244=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd244.getTree());

            	    }
            	    break;
            	case 12 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:222: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_mixtureContent1082);
            	    noun245=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun245.getTree());

            	    }
            	    break;
            	case 13 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:227: inof
            	    {
            	    pushFollow(FOLLOW_inof_in_mixtureContent1084);
            	    inof246=inof();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof246.getTree());

            	    }
            	    break;
            	case 14 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:232: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_mixtureContent1086);
            	    inAll247=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll247.getTree());

            	    }
            	    break;
            	case 15 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:238: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mixtureContent1088);
            	    cd248=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd248.getTree());

            	    }
            	    break;
            	case 16 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:241: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_mixtureContent1090);
            	    comma249=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma249.getTree());

            	    }
            	    break;
            	case 17 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:247: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_mixtureContent1092);
            	    adj250=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj250.getTree());

            	    }
            	    break;
            	case 18 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:251: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_mixtureContent1094);
            	    colon251=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon251.getTree());

            	    }
            	    break;
            	case 19 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:257: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_mixtureContent1096);
            	    stop252=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop252.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt48 >= 1 ) break loop48;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(48, input);
                        throw eee;
                }
                cnt48++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixtureContent"

    public static class adj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adj"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:1: adj : ( jj | jjr | jjs | jjt | oscarcj | oscarrn );
    public final ChemicalChunkerParser.adj_return adj() throws RecognitionException {
        ChemicalChunkerParser.adj_return retval = new ChemicalChunkerParser.adj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj253 = null;

        ChemicalChunkerParser.jjr_return jjr254 = null;

        ChemicalChunkerParser.jjs_return jjs255 = null;

        ChemicalChunkerParser.jjt_return jjt256 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj257 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn258 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:5: ( jj | jjr | jjs | jjt | oscarcj | oscarrn )
            int alt49=6;
            switch ( input.LA(1) ) {
            case 140:
                {
                alt49=1;
                }
                break;
            case 141:
                {
                alt49=2;
                }
                break;
            case 142:
                {
                alt49=3;
                }
                break;
            case 143:
                {
                alt49=4;
                }
                break;
            case 12:
                {
                alt49=5;
                }
                break;
            case 13:
                {
                alt49=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                throw nvae;
            }

            switch (alt49) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:7: jj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jj_in_adj1107);
                    jj253=jj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj253.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:10: jjr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjr_in_adj1109);
                    jjr254=jjr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjr254.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:14: jjs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjs_in_adj1111);
                    jjs255=jjs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjs255.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:18: jjt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjt_in_adj1113);
                    jjt256=jjt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjt256.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:22: oscarcj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcj_in_adj1115);
                    oscarcj257=oscarcj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj257.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:30: oscarrn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarrn_in_adj1117);
                    oscarrn258=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn258.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "adj"

    public static class adv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adv"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:1: adv : ( rb | rbr | rbt | rp | rbs | rbconj );
    public final ChemicalChunkerParser.adv_return adv() throws RecognitionException {
        ChemicalChunkerParser.adv_return retval = new ChemicalChunkerParser.adv_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.rb_return rb259 = null;

        ChemicalChunkerParser.rbr_return rbr260 = null;

        ChemicalChunkerParser.rbt_return rbt261 = null;

        ChemicalChunkerParser.rp_return rp262 = null;

        ChemicalChunkerParser.rbs_return rbs263 = null;

        ChemicalChunkerParser.rbconj_return rbconj264 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:5: ( rb | rbr | rbt | rp | rbs | rbconj )
            int alt50=6;
            switch ( input.LA(1) ) {
            case 169:
                {
                alt50=1;
                }
                break;
            case 170:
                {
                alt50=2;
                }
                break;
            case 172:
                {
                alt50=3;
                }
                break;
            case 175:
                {
                alt50=4;
                }
                break;
            case 173:
                {
                alt50=5;
                }
                break;
            case 171:
                {
                alt50=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                throw nvae;
            }

            switch (alt50) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:7: rb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rb_in_adv1124);
                    rb259=rb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rb259.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:10: rbr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbr_in_adv1126);
                    rbr260=rbr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbr260.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:14: rbt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbt_in_adv1128);
                    rbt261=rbt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbt261.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:18: rp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rp_in_adv1130);
                    rp262=rp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rp262.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:21: rbs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbs_in_adv1132);
                    rbs263=rbs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbs263.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:25: rbconj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbconj_in_adv1134);
                    rbconj264=rbconj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj264.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "adv"

    public static class prepphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphrase"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:1: prepphrase : ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseOther ) ;
    public final ChemicalChunkerParser.prepphrase_return prepphrase() throws RecognitionException {
        ChemicalChunkerParser.prepphrase_return retval = new ChemicalChunkerParser.prepphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.neg_return neg265 = null;

        ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere266 = null;

        ChemicalChunkerParser.prepphraseTime_return prepphraseTime267 = null;

        ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp268 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN269 = null;

        ChemicalChunkerParser.prepphraseOther_return prepphraseOther270 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:2: ( ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseOther ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:5: ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseOther )
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:5: ( neg )?
            int alt51=2;
            switch ( input.LA(1) ) {
                case 101:
                    {
                    alt51=1;
                    }
                    break;
            }

            switch (alt51) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: neg
                    {
                    pushFollow(FOLLOW_neg_in_prepphrase1147);
                    neg265=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg265.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseOther )
            int alt52=5;
            alt52 = dfa52.predict(input);
            switch (alt52) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:11: prepphraseAtmosphere
                    {
                    pushFollow(FOLLOW_prepphraseAtmosphere_in_prepphrase1151);
                    prepphraseAtmosphere266=prepphraseAtmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAtmosphere266.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:32: prepphraseTime
                    {
                    pushFollow(FOLLOW_prepphraseTime_in_prepphrase1153);
                    prepphraseTime267=prepphraseTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTime267.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:47: prepphraseTemp
                    {
                    pushFollow(FOLLOW_prepphraseTemp_in_prepphrase1155);
                    prepphraseTemp268=prepphraseTemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTemp268.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:62: prepphraseIN
                    {
                    pushFollow(FOLLOW_prepphraseIN_in_prepphrase1157);
                    prepphraseIN269=prepphraseIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN269.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:75: prepphraseOther
                    {
                    pushFollow(FOLLOW_prepphraseOther_in_prepphrase1159);
                    prepphraseOther270=prepphraseOther();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOther270.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphrase"

    public static class advAdj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "advAdj"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:1: advAdj : ( adv | adj );
    public final ChemicalChunkerParser.advAdj_return advAdj() throws RecognitionException {
        ChemicalChunkerParser.advAdj_return retval = new ChemicalChunkerParser.advAdj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv271 = null;

        ChemicalChunkerParser.adj_return adj272 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:2: ( adv | adj )
            int alt53=2;
            switch ( input.LA(1) ) {
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 175:
                {
                alt53=1;
                }
                break;
            case 12:
            case 13:
            case 140:
            case 141:
            case 142:
            case 143:
                {
                alt53=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                throw nvae;
            }

            switch (alt53) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:3: adv
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adv_in_advAdj1173);
                    adv271=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv271.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:7: adj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adj_in_advAdj1175);
                    adj272=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj272.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "advAdj"

    public static class prepphraseOther_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOther"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:101:1: prepphraseOther : ( advAdj )* ( inAll )+ nounphrase -> ^( NODE[\"PrepPhrase\"] ( advAdj )* ( inAll )+ nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOther_return prepphraseOther() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOther_return retval = new ChemicalChunkerParser.prepphraseOther_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj273 = null;

        ChemicalChunkerParser.inAll_return inAll274 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase275 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inAll=new RewriteRuleSubtreeStream(adaptor,"rule inAll");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:2: ( ( advAdj )* ( inAll )+ nounphrase -> ^( NODE[\"PrepPhrase\"] ( advAdj )* ( inAll )+ nounphrase ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:4: ( advAdj )* ( inAll )+ nounphrase
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:4: ( advAdj )*
            loop54:
            do {
                int alt54=2;
                switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 140:
                case 141:
                case 142:
                case 143:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 175:
                    {
                    alt54=1;
                    }
                    break;

                }

                switch (alt54) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseOther1184);
            	    advAdj273=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_advAdj.add(advAdj273.getTree());

            	    }
            	    break;

            	default :
            	    break loop54;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:12: ( inAll )+
            int cnt55=0;
            loop55:
            do {
                int alt55=2;
                switch ( input.LA(1) ) {
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 139:
                case 177:
                    {
                    alt55=1;
                    }
                    break;

                }

                switch (alt55) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_prepphraseOther1187);
            	    inAll274=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_inAll.add(inAll274.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt55 >= 1 ) break loop55;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(55, input);
                        throw eee;
                }
                cnt55++;
            } while (true);

            pushFollow(FOLLOW_nounphrase_in_prepphraseOther1191);
            nounphrase275=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase275.getTree());


            // AST REWRITE
            // elements: advAdj, nounphrase, inAll
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 102:31: -> ^( NODE[\"PrepPhrase\"] ( advAdj )* ( inAll )+ nounphrase )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:35: ^( NODE[\"PrepPhrase\"] ( advAdj )* ( inAll )+ nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PrepPhrase"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:57: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                if ( !(stream_inAll.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_inAll.hasNext() ) {
                    adaptor.addChild(root_1, stream_inAll.nextTree());

                }
                stream_inAll.reset();
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseOther"

    public static class prepphraseOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOf"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:1: prepphraseOf : inof nounphrase -> ^( NODE[\"PrepPhrase\"] inof nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOf_return prepphraseOf() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOf_return retval = new ChemicalChunkerParser.prepphraseOf_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inof_return inof276 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase277 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inof=new RewriteRuleSubtreeStream(adaptor,"rule inof");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:2: ( inof nounphrase -> ^( NODE[\"PrepPhrase\"] inof nounphrase ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:4: inof nounphrase
            {
            pushFollow(FOLLOW_inof_in_prepphraseOf1218);
            inof276=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inof.add(inof276.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseOf1221);
            nounphrase277=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase277.getTree());


            // AST REWRITE
            // elements: nounphrase, inof
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 104:20: -> ^( NODE[\"PrepPhrase\"] inof nounphrase )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:24: ^( NODE[\"PrepPhrase\"] inof nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inof.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseOf"

    public static class prepphraseTime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTime"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:106:1: prepphraseTime : prepPhraseTimeStructure -> ^( NODE[\"TimePhrase\"] prepPhraseTimeStructure ) ;
    public final ChemicalChunkerParser.prepphraseTime_return prepphraseTime() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTime_return retval = new ChemicalChunkerParser.prepphraseTime_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure278 = null;


        RewriteRuleSubtreeStream stream_prepPhraseTimeStructure=new RewriteRuleSubtreeStream(adaptor,"rule prepPhraseTimeStructure");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:2: ( prepPhraseTimeStructure -> ^( NODE[\"TimePhrase\"] prepPhraseTimeStructure ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:3: prepPhraseTimeStructure
            {
            pushFollow(FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1243);
            prepPhraseTimeStructure278=prepPhraseTimeStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepPhraseTimeStructure.add(prepPhraseTimeStructure278.getTree());


            // AST REWRITE
            // elements: prepPhraseTimeStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 107:27: -> ^( NODE[\"TimePhrase\"] prepPhraseTimeStructure )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:31: ^( NODE[\"TimePhrase\"] prepPhraseTimeStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "TimePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepPhraseTimeStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseTime"

    public static class prepPhraseTimeStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepPhraseTimeStructure"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:1: prepPhraseTimeStructure : ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ ;
    public final ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure() throws RecognitionException {
        ChemicalChunkerParser.prepPhraseTimeStructure_return retval = new ChemicalChunkerParser.prepPhraseTimeStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj279 = null;

        ChemicalChunkerParser.inAll_return inAll280 = null;

        ChemicalChunkerParser.dt_return dt281 = null;

        ChemicalChunkerParser.advAdj_return advAdj282 = null;

        ChemicalChunkerParser.cd_return cd283 = null;

        ChemicalChunkerParser.nntime_return nntime284 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:2: ( ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:3: ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:3: ( advAdj )*
            loop56:
            do {
                int alt56=2;
                alt56 = dfa56.predict(input);
                switch (alt56) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1261);
            	    advAdj279=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj279.getTree());

            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:11: ( inAll )?
            int alt57=2;
            switch ( input.LA(1) ) {
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 139:
                case 177:
                    {
                    alt57=1;
                    }
                    break;
            }

            switch (alt57) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepPhraseTimeStructure1264);
                    inAll280=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll280.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:19: ( dt )?
            int alt58=2;
            switch ( input.LA(1) ) {
                case 128:
                    {
                    alt58=1;
                    }
                    break;
            }

            switch (alt58) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepPhraseTimeStructure1268);
                    dt281=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt281.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:23: ( advAdj )*
            loop59:
            do {
                int alt59=2;
                switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 140:
                case 141:
                case 142:
                case 143:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 175:
                    {
                    alt59=1;
                    }
                    break;

                }

                switch (alt59) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1271);
            	    advAdj282=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj282.getTree());

            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:31: ( cd )?
            int alt60=2;
            switch ( input.LA(1) ) {
                case 123:
                    {
                    alt60=1;
                    }
                    break;
            }

            switch (alt60) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepPhraseTimeStructure1274);
                    cd283=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd283.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:35: ( nntime )+
            int cnt61=0;
            loop61:
            do {
                int alt61=2;
                switch ( input.LA(1) ) {
                case 36:
                    {
                    int LA61_2 = input.LA(2);

                    if ( (synpred233_ChemicalChunker()) ) {
                        alt61=1;
                    }


                    }
                    break;

                }

                switch (alt61) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nntime
            	    {
            	    pushFollow(FOLLOW_nntime_in_prepPhraseTimeStructure1277);
            	    nntime284=nntime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime284.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt61 >= 1 ) break loop61;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(61, input);
                        throw eee;
                }
                cnt61++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepPhraseTimeStructure"

    public static class prepphraseIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseIN"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:111:1: prepphraseIN : inin molecule -> ^( NODE[\"PrepPhrase\"] inin molecule ) ;
    public final ChemicalChunkerParser.prepphraseIN_return prepphraseIN() throws RecognitionException {
        ChemicalChunkerParser.prepphraseIN_return retval = new ChemicalChunkerParser.prepphraseIN_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin285 = null;

        ChemicalChunkerParser.molecule_return molecule286 = null;


        RewriteRuleSubtreeStream stream_inin=new RewriteRuleSubtreeStream(adaptor,"rule inin");
        RewriteRuleSubtreeStream stream_molecule=new RewriteRuleSubtreeStream(adaptor,"rule molecule");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:2: ( inin molecule -> ^( NODE[\"PrepPhrase\"] inin molecule ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:3: inin molecule
            {
            pushFollow(FOLLOW_inin_in_prepphraseIN1289);
            inin285=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inin.add(inin285.getTree());
            pushFollow(FOLLOW_molecule_in_prepphraseIN1291);
            molecule286=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_molecule.add(molecule286.getTree());


            // AST REWRITE
            // elements: inin, molecule
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 112:17: -> ^( NODE[\"PrepPhrase\"] inin molecule )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:21: ^( NODE[\"PrepPhrase\"] inin molecule )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inin.nextTree());
                adaptor.addChild(root_1, stream_molecule.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseIN"

    public static class prepphraseAtmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphere"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:1: prepphraseAtmosphere : prepphraseAtmosphereContent -> ^( NODE[\"AtmospherePhrase\"] prepphraseAtmosphereContent ) ;
    public final ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphere_return retval = new ChemicalChunkerParser.prepphraseAtmosphere_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent287 = null;


        RewriteRuleSubtreeStream stream_prepphraseAtmosphereContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseAtmosphereContent");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:115:2: ( prepphraseAtmosphereContent -> ^( NODE[\"AtmospherePhrase\"] prepphraseAtmosphereContent ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:115:4: prepphraseAtmosphereContent
            {
            pushFollow(FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1315);
            prepphraseAtmosphereContent287=prepphraseAtmosphereContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseAtmosphereContent.add(prepphraseAtmosphereContent287.getTree());


            // AST REWRITE
            // elements: prepphraseAtmosphereContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 115:32: -> ^( NODE[\"AtmospherePhrase\"] prepphraseAtmosphereContent )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:115:36: ^( NODE[\"AtmospherePhrase\"] prepphraseAtmosphereContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "AtmospherePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseAtmosphereContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphere"

    public static class prepphraseAtmosphereContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphereContent"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:116:1: prepphraseAtmosphereContent : inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? ;
    public final ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphereContent_return retval = new ChemicalChunkerParser.prepphraseAtmosphereContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inunder_return inunder288 = null;

        ChemicalChunkerParser.dt_return dt289 = null;

        ChemicalChunkerParser.advAdj_return advAdj290 = null;

        ChemicalChunkerParser.molecule_return molecule291 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere292 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:2: ( inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:3: inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inunder_in_prepphraseAtmosphereContent1335);
            inunder288=inunder();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder288.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:12: ( dt )?
            int alt62=2;
            switch ( input.LA(1) ) {
                case 128:
                    {
                    alt62=1;
                    }
                    break;
            }

            switch (alt62) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseAtmosphereContent1338);
                    dt289=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt289.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:16: ( advAdj )*
            loop63:
            do {
                int alt63=2;
                switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 140:
                case 141:
                case 142:
                case 143:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 175:
                    {
                    alt63=1;
                    }
                    break;

                }

                switch (alt63) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseAtmosphereContent1341);
            	    advAdj290=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj290.getTree());

            	    }
            	    break;

            	default :
            	    break loop63;
                }
            } while (true);

            pushFollow(FOLLOW_molecule_in_prepphraseAtmosphereContent1344);
            molecule291=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule291.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:33: ( nnatmosphere )?
            int alt64=2;
            switch ( input.LA(1) ) {
                case 40:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA64_3 = input.LA(3);

                            if ( (synpred236_ChemicalChunker()) ) {
                                alt64=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt64) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1346);
                    nnatmosphere292=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere292.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphereContent"

    public static class inAll_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inAll"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:1: inAll : ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inAll_return inAll() throws RecognitionException {
        ChemicalChunkerParser.inAll_return retval = new ChemicalChunkerParser.inAll_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.in_return in293 = null;

        ChemicalChunkerParser.inafter_return inafter294 = null;

        ChemicalChunkerParser.inas_return inas295 = null;

        ChemicalChunkerParser.inbefore_return inbefore296 = null;

        ChemicalChunkerParser.inby_return inby297 = null;

        ChemicalChunkerParser.infor_return infor298 = null;

        ChemicalChunkerParser.infrom_return infrom299 = null;

        ChemicalChunkerParser.inin_return inin300 = null;

        ChemicalChunkerParser.ininto_return ininto301 = null;

        ChemicalChunkerParser.inof_return inof302 = null;

        ChemicalChunkerParser.inoff_return inoff303 = null;

        ChemicalChunkerParser.inon_return inon304 = null;

        ChemicalChunkerParser.inover_return inover305 = null;

        ChemicalChunkerParser.inunder_return inunder306 = null;

        ChemicalChunkerParser.invia_return invia307 = null;

        ChemicalChunkerParser.inwith_return inwith308 = null;

        ChemicalChunkerParser.inwithout_return inwithout309 = null;

        ChemicalChunkerParser.to_return to310 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:7: ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt65=18;
            switch ( input.LA(1) ) {
            case 139:
                {
                alt65=1;
                }
                break;
            case 20:
                {
                alt65=2;
                }
                break;
            case 18:
                {
                alt65=3;
                }
                break;
            case 19:
                {
                alt65=4;
                }
                break;
            case 25:
                {
                alt65=5;
                }
                break;
            case 29:
                {
                alt65=6;
                }
                break;
            case 30:
                {
                alt65=7;
                }
                break;
            case 21:
                {
                alt65=8;
                }
                break;
            case 22:
                {
                alt65=9;
                }
                break;
            case 27:
                {
                alt65=10;
                }
                break;
            case 33:
                {
                alt65=11;
                }
                break;
            case 28:
                {
                alt65=12;
                }
                break;
            case 32:
                {
                alt65=13;
                }
                break;
            case 31:
                {
                alt65=14;
                }
                break;
            case 26:
                {
                alt65=15;
                }
                break;
            case 23:
                {
                alt65=16;
                }
                break;
            case 24:
                {
                alt65=17;
                }
                break;
            case 177:
                {
                alt65=18;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;
            }

            switch (alt65) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:9: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inAll1358);
                    in293=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in293.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:12: inafter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inafter_in_inAll1360);
                    inafter294=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter294.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:20: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inAll1362);
                    inas295=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas295.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:25: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inAll1364);
                    inbefore296=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore296.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:34: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inAll1366);
                    inby297=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby297.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:39: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inAll1368);
                    infor298=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor298.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:45: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inAll1370);
                    infrom299=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom299.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:52: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inAll1372);
                    inin300=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin300.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:57: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inAll1374);
                    ininto301=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto301.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:64: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inAll1376);
                    inof302=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof302.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:69: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inAll1378);
                    inoff303=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff303.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:75: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inAll1380);
                    inon304=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon304.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:80: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inAll1382);
                    inover305=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover305.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:87: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inAll1384);
                    inunder306=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder306.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:95: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inAll1386);
                    invia307=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia307.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:101: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inAll1388);
                    inwith308=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith308.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:108: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inAll1390);
                    inwithout309=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout309.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:118: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inAll1392);
                    to310=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to310.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inAll"

    public static class prepphraseTemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTemp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:1: prepphraseTemp : prepphraseTempContent -> ^( NODE[\"TempPhrase\"] prepphraseTempContent ) ;
    public final ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTemp_return retval = new ChemicalChunkerParser.prepphraseTemp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent311 = null;


        RewriteRuleSubtreeStream stream_prepphraseTempContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseTempContent");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:15: ( prepphraseTempContent -> ^( NODE[\"TempPhrase\"] prepphraseTempContent ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:18: prepphraseTempContent
            {
            pushFollow(FOLLOW_prepphraseTempContent_in_prepphraseTemp1399);
            prepphraseTempContent311=prepphraseTempContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseTempContent.add(prepphraseTempContent311.getTree());


            // AST REWRITE
            // elements: prepphraseTempContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 121:40: -> ^( NODE[\"TempPhrase\"] prepphraseTempContent )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:44: ^( NODE[\"TempPhrase\"] prepphraseTempContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "TempPhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseTempContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseTemp"

    public static class prepphraseTempContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTempContent"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:123:1: prepphraseTempContent : ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ ;
    public final ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTempContent_return retval = new ChemicalChunkerParser.prepphraseTempContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj312 = null;

        ChemicalChunkerParser.inAll_return inAll313 = null;

        ChemicalChunkerParser.dt_return dt314 = null;

        ChemicalChunkerParser.advAdj_return advAdj315 = null;

        ChemicalChunkerParser.cd_return cd316 = null;

        ChemicalChunkerParser.nntemp_return nntemp317 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:2: ( ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:5: ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:5: ( advAdj )?
            int alt66=2;
            alt66 = dfa66.predict(input);
            switch (alt66) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1421);
                    advAdj312=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj312.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:13: ( inAll )?
            int alt67=2;
            switch ( input.LA(1) ) {
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 139:
                case 177:
                    {
                    alt67=1;
                    }
                    break;
            }

            switch (alt67) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepphraseTempContent1424);
                    inAll313=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll313.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:20: ( dt )?
            int alt68=2;
            switch ( input.LA(1) ) {
                case 128:
                    {
                    alt68=1;
                    }
                    break;
            }

            switch (alt68) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseTempContent1427);
                    dt314=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt314.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:24: ( advAdj )?
            int alt69=2;
            switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 140:
                case 141:
                case 142:
                case 143:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 175:
                    {
                    alt69=1;
                    }
                    break;
            }

            switch (alt69) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1430);
                    advAdj315=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj315.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:32: ( cd )?
            int alt70=2;
            switch ( input.LA(1) ) {
                case 123:
                    {
                    alt70=1;
                    }
                    break;
            }

            switch (alt70) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepphraseTempContent1433);
                    cd316=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd316.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:36: ( nntemp )+
            int cnt71=0;
            loop71:
            do {
                int alt71=2;
                switch ( input.LA(1) ) {
                case 44:
                    {
                    int LA71_2 = input.LA(2);

                    if ( (synpred259_ChemicalChunker()) ) {
                        alt71=1;
                    }


                    }
                    break;

                }

                switch (alt71) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nntemp
            	    {
            	    pushFollow(FOLLOW_nntemp_in_prepphraseTempContent1436);
            	    nntemp317=nntemp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp317.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt71 >= 1 ) break loop71;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(71, input);
                        throw eee;
                }
                cnt71++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseTempContent"

    public static class amount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "amount"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:1: amount : cd nnamount -> ^( NODE[\"AMOUNT\"] cd nnamount ) ;
    public final ChemicalChunkerParser.amount_return amount() throws RecognitionException {
        ChemicalChunkerParser.amount_return retval = new ChemicalChunkerParser.amount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd318 = null;

        ChemicalChunkerParser.nnamount_return nnamount319 = null;


        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        RewriteRuleSubtreeStream stream_nnamount=new RewriteRuleSubtreeStream(adaptor,"rule nnamount");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:8: ( cd nnamount -> ^( NODE[\"AMOUNT\"] cd nnamount ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:10: cd nnamount
            {
            pushFollow(FOLLOW_cd_in_amount1451);
            cd318=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd318.getTree());
            pushFollow(FOLLOW_nnamount_in_amount1453);
            nnamount319=nnamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnamount.add(nnamount319.getTree());


            // AST REWRITE
            // elements: cd, nnamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 127:22: -> ^( NODE[\"AMOUNT\"] cd nnamount )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:25: ^( NODE[\"AMOUNT\"] cd nnamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "AMOUNT"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "amount"

    public static class mass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mass"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:1: mass : cd nnmass -> ^( NODE[\"MASS\"] cd nnmass ) ;
    public final ChemicalChunkerParser.mass_return mass() throws RecognitionException {
        ChemicalChunkerParser.mass_return retval = new ChemicalChunkerParser.mass_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd320 = null;

        ChemicalChunkerParser.nnmass_return nnmass321 = null;


        RewriteRuleSubtreeStream stream_nnmass=new RewriteRuleSubtreeStream(adaptor,"rule nnmass");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:6: ( cd nnmass -> ^( NODE[\"MASS\"] cd nnmass ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:8: cd nnmass
            {
            pushFollow(FOLLOW_cd_in_mass1474);
            cd320=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd320.getTree());
            pushFollow(FOLLOW_nnmass_in_mass1476);
            nnmass321=nnmass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmass.add(nnmass321.getTree());


            // AST REWRITE
            // elements: cd, nnmass
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 128:17: -> ^( NODE[\"MASS\"] cd nnmass )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:20: ^( NODE[\"MASS\"] cd nnmass )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MASS"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnmass.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mass"

    public static class percent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:1: percent : cd ( nn )? nnpercent -> ^( NODE[\"PERCENT\"] cd ( nn )? nnpercent ) ;
    public final ChemicalChunkerParser.percent_return percent() throws RecognitionException {
        ChemicalChunkerParser.percent_return retval = new ChemicalChunkerParser.percent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd322 = null;

        ChemicalChunkerParser.nn_return nn323 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent324 = null;


        RewriteRuleSubtreeStream stream_nnpercent=new RewriteRuleSubtreeStream(adaptor,"rule nnpercent");
        RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:9: ( cd ( nn )? nnpercent -> ^( NODE[\"PERCENT\"] cd ( nn )? nnpercent ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:11: cd ( nn )? nnpercent
            {
            pushFollow(FOLLOW_cd_in_percent1497);
            cd322=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd322.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:14: ( nn )?
            int alt72=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt72=1;
                    }
                    break;
            }

            switch (alt72) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nn
                    {
                    pushFollow(FOLLOW_nn_in_percent1499);
                    nn323=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nn.add(nn323.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnpercent_in_percent1502);
            nnpercent324=nnpercent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnpercent.add(nnpercent324.getTree());


            // AST REWRITE
            // elements: nn, nnpercent, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 129:28: -> ^( NODE[\"PERCENT\"] cd ( nn )? nnpercent )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:31: ^( NODE[\"PERCENT\"] cd ( nn )? nnpercent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PERCENT"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:54: ( nn )?
                if ( stream_nn.hasNext() ) {
                    adaptor.addChild(root_1, stream_nn.nextTree());

                }
                stream_nn.reset();
                adaptor.addChild(root_1, stream_nnpercent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "percent"

    public static class volume_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "volume"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:1: volume : cd nnvol -> ^( NODE[\"VOLUME\"] cd nnvol ) ;
    public final ChemicalChunkerParser.volume_return volume() throws RecognitionException {
        ChemicalChunkerParser.volume_return retval = new ChemicalChunkerParser.volume_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd325 = null;

        ChemicalChunkerParser.nnvol_return nnvol326 = null;


        RewriteRuleSubtreeStream stream_nnvol=new RewriteRuleSubtreeStream(adaptor,"rule nnvol");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:8: ( cd nnvol -> ^( NODE[\"VOLUME\"] cd nnvol ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:10: cd nnvol
            {
            pushFollow(FOLLOW_cd_in_volume1526);
            cd325=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd325.getTree());
            pushFollow(FOLLOW_nnvol_in_volume1528);
            nnvol326=nnvol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnvol.add(nnvol326.getTree());


            // AST REWRITE
            // elements: cd, nnvol
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 130:19: -> ^( NODE[\"VOLUME\"] cd nnvol )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:22: ^( NODE[\"VOLUME\"] cd nnvol )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "VOLUME"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnvol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "volume"

    public static class molar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molar"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:131:1: molar : ( cd )? nnmolar -> ^( NODE[\"MOLAR\"] ( cd )? nnmolar ) ;
    public final ChemicalChunkerParser.molar_return molar() throws RecognitionException {
        ChemicalChunkerParser.molar_return retval = new ChemicalChunkerParser.molar_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd327 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar328 = null;


        RewriteRuleSubtreeStream stream_nnmolar=new RewriteRuleSubtreeStream(adaptor,"rule nnmolar");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:131:7: ( ( cd )? nnmolar -> ^( NODE[\"MOLAR\"] ( cd )? nnmolar ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:131:9: ( cd )? nnmolar
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:131:9: ( cd )?
            int alt73=2;
            switch ( input.LA(1) ) {
                case 123:
                    {
                    alt73=1;
                    }
                    break;
            }

            switch (alt73) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_molar1549);
                    cd327=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cd.add(cd327.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnmolar_in_molar1552);
            nnmolar328=nnmolar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmolar.add(nnmolar328.getTree());


            // AST REWRITE
            // elements: cd, nnmolar
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 131:21: -> ^( NODE[\"MOLAR\"] ( cd )? nnmolar )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:131:24: ^( NODE[\"MOLAR\"] ( cd )? nnmolar )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MOLAR"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:131:42: ( cd )?
                if ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnmolar.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "molar"

    public static class preparationphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preparationphrase"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:132:1: preparationphrase : vbsynthesize inas ( nnexample cd | prepphrase ) ;
    public final ChemicalChunkerParser.preparationphrase_return preparationphrase() throws RecognitionException {
        ChemicalChunkerParser.preparationphrase_return retval = new ChemicalChunkerParser.preparationphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize329 = null;

        ChemicalChunkerParser.inas_return inas330 = null;

        ChemicalChunkerParser.nnexample_return nnexample331 = null;

        ChemicalChunkerParser.cd_return cd332 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase333 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:2: ( vbsynthesize inas ( nnexample cd | prepphrase ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:4: vbsynthesize inas ( nnexample cd | prepphrase )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbsynthesize_in_preparationphrase1575);
            vbsynthesize329=vbsynthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize329.getTree());
            pushFollow(FOLLOW_inas_in_preparationphrase1577);
            inas330=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inas330.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:22: ( nnexample cd | prepphrase )
            int alt74=2;
            switch ( input.LA(1) ) {
            case 34:
                {
                alt74=1;
                }
                break;
            case 12:
            case 13:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 36:
            case 44:
            case 101:
            case 123:
            case 128:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 175:
            case 177:
                {
                alt74=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;
            }

            switch (alt74) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:23: nnexample cd
                    {
                    pushFollow(FOLLOW_nnexample_in_preparationphrase1580);
                    nnexample331=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample331.getTree());
                    pushFollow(FOLLOW_cd_in_preparationphrase1582);
                    cd332=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd332.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:37: prepphrase
                    {
                    pushFollow(FOLLOW_prepphrase_in_preparationphrase1585);
                    prepphrase333=prepphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase333.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "preparationphrase"

    public static class apparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apparatus"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:134:1: apparatus : ( preapparatus )* ( nnapparatus )+ -> ^( NODE[\"APPARATUS\"] ( preapparatus )* ( nnapparatus )+ ) ;
    public final ChemicalChunkerParser.apparatus_return apparatus() throws RecognitionException {
        ChemicalChunkerParser.apparatus_return retval = new ChemicalChunkerParser.apparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.preapparatus_return preapparatus334 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus335 = null;


        RewriteRuleSubtreeStream stream_preapparatus=new RewriteRuleSubtreeStream(adaptor,"rule preapparatus");
        RewriteRuleSubtreeStream stream_nnapparatus=new RewriteRuleSubtreeStream(adaptor,"rule nnapparatus");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:2: ( ( preapparatus )* ( nnapparatus )+ -> ^( NODE[\"APPARATUS\"] ( preapparatus )* ( nnapparatus )+ ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:4: ( preapparatus )* ( nnapparatus )+
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:4: ( preapparatus )*
            loop75:
            do {
                int alt75=2;
                switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 35:
                case 38:
                case 43:
                case 48:
                case 59:
                case 107:
                case 123:
                case 128:
                case 140:
                case 141:
                case 142:
                case 143:
                case 146:
                    {
                    alt75=1;
                    }
                    break;

                }

                switch (alt75) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: preapparatus
            	    {
            	    pushFollow(FOLLOW_preapparatus_in_apparatus1595);
            	    preapparatus334=preapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_preapparatus.add(preapparatus334.getTree());

            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:18: ( nnapparatus )+
            int cnt76=0;
            loop76:
            do {
                int alt76=2;
                switch ( input.LA(1) ) {
                case 69:
                    {
                    int LA76_2 = input.LA(2);

                    if ( (synpred264_ChemicalChunker()) ) {
                        alt76=1;
                    }


                    }
                    break;

                }

                switch (alt76) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nnapparatus
            	    {
            	    pushFollow(FOLLOW_nnapparatus_in_apparatus1598);
            	    nnapparatus335=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nnapparatus.add(nnapparatus335.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt76 >= 1 ) break loop76;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(76, input);
                        throw eee;
                }
                cnt76++;
            } while (true);



            // AST REWRITE
            // elements: nnapparatus, preapparatus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 135:30: -> ^( NODE[\"APPARATUS\"] ( preapparatus )* ( nnapparatus )+ )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:33: ^( NODE[\"APPARATUS\"] ( preapparatus )* ( nnapparatus )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "APPARATUS"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:55: ( preapparatus )*
                while ( stream_preapparatus.hasNext() ) {
                    adaptor.addChild(root_1, stream_preapparatus.nextTree());

                }
                stream_preapparatus.reset();
                if ( !(stream_nnapparatus.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nnapparatus.hasNext() ) {
                    adaptor.addChild(root_1, stream_nnapparatus.nextTree());

                }
                stream_nnapparatus.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "apparatus"

    public static class preapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preapparatus"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:137:1: preapparatus : ( ( dt )? quantity | nn | nnpressure | adj | nnadd | nnchementity | nnstate );
    public final ChemicalChunkerParser.preapparatus_return preapparatus() throws RecognitionException {
        ChemicalChunkerParser.preapparatus_return retval = new ChemicalChunkerParser.preapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt336 = null;

        ChemicalChunkerParser.quantity_return quantity337 = null;

        ChemicalChunkerParser.nn_return nn338 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure339 = null;

        ChemicalChunkerParser.adj_return adj340 = null;

        ChemicalChunkerParser.nnadd_return nnadd341 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity342 = null;

        ChemicalChunkerParser.nnstate_return nnstate343 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:2: ( ( dt )? quantity | nn | nnpressure | adj | nnadd | nnchementity | nnstate )
            int alt78=7;
            switch ( input.LA(1) ) {
            case 38:
            case 107:
            case 123:
            case 128:
                {
                alt78=1;
                }
                break;
            case 146:
                {
                alt78=2;
                }
                break;
            case 48:
                {
                alt78=3;
                }
                break;
            case 12:
            case 13:
            case 140:
            case 141:
            case 142:
            case 143:
                {
                alt78=4;
                }
                break;
            case 59:
                {
                alt78=5;
                }
                break;
            case 43:
                {
                alt78=6;
                }
                break;
            case 35:
                {
                alt78=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;
            }

            switch (alt78) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:5: ( dt )? quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:5: ( dt )?
                    int alt77=2;
                    switch ( input.LA(1) ) {
                        case 128:
                            {
                            alt77=1;
                            }
                            break;
                    }

                    switch (alt77) {
                        case 1 :
                            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                            {
                            pushFollow(FOLLOW_dt_in_preapparatus1624);
                            dt336=dt();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, dt336.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_quantity_in_preapparatus1628);
                    quantity337=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity337.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:19: nn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nn_in_preapparatus1630);
                    nn338=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn338.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:22: nnpressure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpressure_in_preapparatus1632);
                    nnpressure339=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure339.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:33: adj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adj_in_preapparatus1634);
                    adj340=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj340.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:37: nnadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnadd_in_preapparatus1636);
                    nnadd341=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd341.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:43: nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchementity_in_preapparatus1638);
                    nnchementity342=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity342.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:56: nnstate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnstate_in_preapparatus1640);
                    nnstate343=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate343.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "preapparatus"

    public static class measurements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurements"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:1: measurements : ( cd nn )? measurementtypes ( dt )? ;
    public final ChemicalChunkerParser.measurements_return measurements() throws RecognitionException {
        ChemicalChunkerParser.measurements_return retval = new ChemicalChunkerParser.measurements_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd344 = null;

        ChemicalChunkerParser.nn_return nn345 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes346 = null;

        ChemicalChunkerParser.dt_return dt347 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:140:2: ( ( cd nn )? measurementtypes ( dt )? )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:140:3: ( cd nn )? measurementtypes ( dt )?
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:140:3: ( cd nn )?
            int alt79=2;
            switch ( input.LA(1) ) {
                case 123:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 146:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 38:
                                                case 123:
                                                    {
                                                    alt79=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt79) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:140:4: cd nn
                    {
                    pushFollow(FOLLOW_cd_in_measurements1649);
                    cd344=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd344.getTree());
                    pushFollow(FOLLOW_nn_in_measurements1651);
                    nn345=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn345.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_measurementtypes_in_measurements1655);
            measurementtypes346=measurementtypes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurementtypes346.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:140:32: ( dt )?
            int alt80=2;
            switch ( input.LA(1) ) {
                case 128:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA80_3 = input.LA(3);

                            if ( (synpred273_ChemicalChunker()) ) {
                                alt80=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt80) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_measurements1660);
                    dt347=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt347.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "measurements"

    public static class measurementtypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurementtypes"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:1: measurementtypes : ( molar | amount | mass | percent | volume );
    public final ChemicalChunkerParser.measurementtypes_return measurementtypes() throws RecognitionException {
        ChemicalChunkerParser.measurementtypes_return retval = new ChemicalChunkerParser.measurementtypes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.molar_return molar348 = null;

        ChemicalChunkerParser.amount_return amount349 = null;

        ChemicalChunkerParser.mass_return mass350 = null;

        ChemicalChunkerParser.percent_return percent351 = null;

        ChemicalChunkerParser.volume_return volume352 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:2: ( molar | amount | mass | percent | volume )
            int alt81=5;
            switch ( input.LA(1) ) {
            case 123:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 104:
                    case 146:
                        {
                        alt81=4;
                        }
                        break;
                    case 42:
                        {
                        alt81=5;
                        }
                        break;
                    case 37:
                        {
                        alt81=3;
                        }
                        break;
                    case 39:
                        {
                        alt81=2;
                        }
                        break;
                    case 38:
                        {
                        alt81=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 81, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 81, 1, input);

                    throw nvae;
                }

                }
                break;
            case 38:
                {
                alt81=1;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;
            }

            switch (alt81) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:4: molar
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molar_in_measurementtypes1670);
                    molar348=molar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molar348.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:10: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_amount_in_measurementtypes1672);
                    amount349=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount349.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:17: mass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mass_in_measurementtypes1674);
                    mass350=mass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mass350.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:22: percent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_percent_in_measurementtypes1676);
                    percent351=percent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percent351.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:30: volume
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_volume_in_measurementtypes1678);
                    volume352=volume();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, volume352.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "measurementtypes"

    public static class oscarCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:1: oscarCompound : ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarCompound5 | oscarcm ) ;
    public final ChemicalChunkerParser.oscarCompound_return oscarCompound() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound_return retval = new ChemicalChunkerParser.oscarCompound_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarCompound1_return oscarCompound1353 = null;

        ChemicalChunkerParser.oscarCompound2_return oscarCompound2354 = null;

        ChemicalChunkerParser.oscarCompound3_return oscarCompound3355 = null;

        ChemicalChunkerParser.oscarCompound4_return oscarCompound4356 = null;

        ChemicalChunkerParser.oscarCompound5_return oscarCompound5357 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm358 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:15: ( ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarCompound5 | oscarcm ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:18: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarCompound5 | oscarcm )
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:18: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarCompound5 | oscarcm )
            int alt82=6;
            alt82 = dfa82.predict(input);
            switch (alt82) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:19: oscarCompound1
                    {
                    pushFollow(FOLLOW_oscarCompound1_in_oscarCompound1691);
                    oscarCompound1353=oscarCompound1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound1353.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:34: oscarCompound2
                    {
                    pushFollow(FOLLOW_oscarCompound2_in_oscarCompound1693);
                    oscarCompound2354=oscarCompound2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound2354.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:49: oscarCompound3
                    {
                    pushFollow(FOLLOW_oscarCompound3_in_oscarCompound1695);
                    oscarCompound3355=oscarCompound3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound3355.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:64: oscarCompound4
                    {
                    pushFollow(FOLLOW_oscarCompound4_in_oscarCompound1697);
                    oscarCompound4356=oscarCompound4();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound4356.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:79: oscarCompound5
                    {
                    pushFollow(FOLLOW_oscarCompound5_in_oscarCompound1699);
                    oscarCompound5357=oscarCompound5();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound5357.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:94: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_oscarCompound1701);
                    oscarcm358=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm358.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound"

    public static class oscarCompound5_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound5"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:1: oscarCompound5 : lrb oscarcm rrb -> ^( NODE[\"OSCARCM\"] lrb oscarcm rrb ) ;
    public final ChemicalChunkerParser.oscarCompound5_return oscarCompound5() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound5_return retval = new ChemicalChunkerParser.oscarCompound5_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb359 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm360 = null;

        ChemicalChunkerParser.rrb_return rrb361 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_lrb=new RewriteRuleSubtreeStream(adaptor,"rule lrb");
        RewriteRuleSubtreeStream stream_rrb=new RewriteRuleSubtreeStream(adaptor,"rule rrb");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:16: ( lrb oscarcm rrb -> ^( NODE[\"OSCARCM\"] lrb oscarcm rrb ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:18: lrb oscarcm rrb
            {
            pushFollow(FOLLOW_lrb_in_oscarCompound51711);
            lrb359=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lrb.add(lrb359.getTree());
            pushFollow(FOLLOW_oscarcm_in_oscarCompound51713);
            oscarcm360=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm360.getTree());
            pushFollow(FOLLOW_rrb_in_oscarCompound51715);
            rrb361=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rrb.add(rrb361.getTree());


            // AST REWRITE
            // elements: lrb, rrb, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 147:34: -> ^( NODE[\"OSCARCM\"] lrb oscarcm rrb )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:37: ^( NODE[\"OSCARCM\"] lrb oscarcm rrb )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_lrb.nextTree());
                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                adaptor.addChild(root_1, stream_rrb.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound5"

    public static class oscarCompound4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound4"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:148:1: oscarCompound4 : oscarcm ( dash | apost )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( dash )* ( apost )* ) ;
    public final ChemicalChunkerParser.oscarCompound4_return oscarCompound4() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound4_return retval = new ChemicalChunkerParser.oscarCompound4_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm362 = null;

        ChemicalChunkerParser.dash_return dash363 = null;

        ChemicalChunkerParser.apost_return apost364 = null;


        RewriteRuleSubtreeStream stream_dash=new RewriteRuleSubtreeStream(adaptor,"rule dash");
        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_apost=new RewriteRuleSubtreeStream(adaptor,"rule apost");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:148:16: ( oscarcm ( dash | apost )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( dash )* ( apost )* ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:148:18: oscarcm ( dash | apost )+
            {
            pushFollow(FOLLOW_oscarcm_in_oscarCompound41738);
            oscarcm362=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm362.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:148:26: ( dash | apost )+
            int cnt83=0;
            loop83:
            do {
                int alt83=3;
                switch ( input.LA(1) ) {
                case 102:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA83_4 = input.LA(3);

                        if ( (synpred283_ChemicalChunker()) ) {
                            alt83=1;
                        }


                        }
                        break;

                    }

                    }
                    break;
                case 100:
                    {
                    alt83=2;
                    }
                    break;

                }

                switch (alt83) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:148:27: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_oscarCompound41741);
            	    dash363=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dash.add(dash363.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:148:32: apost
            	    {
            	    pushFollow(FOLLOW_apost_in_oscarCompound41743);
            	    apost364=apost();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_apost.add(apost364.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt83 >= 1 ) break loop83;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(83, input);
                        throw eee;
                }
                cnt83++;
            } while (true);



            // AST REWRITE
            // elements: dash, apost, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 148:40: -> ^( NODE[\"OSCARCM\"] oscarcm ( dash )* ( apost )* )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:148:43: ^( NODE[\"OSCARCM\"] oscarcm ( dash )* ( apost )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:148:71: ( dash )*
                while ( stream_dash.hasNext() ) {
                    adaptor.addChild(root_1, stream_dash.nextTree());

                }
                stream_dash.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:148:77: ( apost )*
                while ( stream_apost.hasNext() ) {
                    adaptor.addChild(root_1, stream_apost.nextTree());

                }
                stream_apost.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound4"

    public static class oscarCompound3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound3"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:1: oscarCompound3 : oscarcm ( dash oscarcm )+ ( dash )? -> ^( NODE[\"OSCARCM\"] oscarcm ( dash oscarcm )+ ( dash )? ) ;
    public final ChemicalChunkerParser.oscarCompound3_return oscarCompound3() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound3_return retval = new ChemicalChunkerParser.oscarCompound3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm365 = null;

        ChemicalChunkerParser.dash_return dash366 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm367 = null;

        ChemicalChunkerParser.dash_return dash368 = null;


        RewriteRuleSubtreeStream stream_dash=new RewriteRuleSubtreeStream(adaptor,"rule dash");
        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:16: ( oscarcm ( dash oscarcm )+ ( dash )? -> ^( NODE[\"OSCARCM\"] oscarcm ( dash oscarcm )+ ( dash )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:18: oscarcm ( dash oscarcm )+ ( dash )?
            {
            pushFollow(FOLLOW_oscarcm_in_oscarCompound31770);
            oscarcm365=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm365.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:26: ( dash oscarcm )+
            int cnt84=0;
            loop84:
            do {
                int alt84=2;
                switch ( input.LA(1) ) {
                case 102:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 54:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA84_5 = input.LA(5);

                                if ( (synpred285_ChemicalChunker()) ) {
                                    alt84=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt84) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:27: dash oscarcm
            	    {
            	    pushFollow(FOLLOW_dash_in_oscarCompound31773);
            	    dash366=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dash.add(dash366.getTree());
            	    pushFollow(FOLLOW_oscarcm_in_oscarCompound31775);
            	    oscarcm367=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm367.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt84 >= 1 ) break loop84;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(84, input);
                        throw eee;
                }
                cnt84++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:42: ( dash )?
            int alt85=2;
            switch ( input.LA(1) ) {
                case 102:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA85_3 = input.LA(3);

                            if ( (synpred286_ChemicalChunker()) ) {
                                alt85=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt85) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dash
                    {
                    pushFollow(FOLLOW_dash_in_oscarCompound31779);
                    dash368=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dash.add(dash368.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: oscarcm, oscarcm, dash, dash
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 149:47: -> ^( NODE[\"OSCARCM\"] oscarcm ( dash oscarcm )+ ( dash )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:50: ^( NODE[\"OSCARCM\"] oscarcm ( dash oscarcm )+ ( dash )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                if ( !(stream_oscarcm.hasNext()||stream_dash.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_oscarcm.hasNext()||stream_dash.hasNext() ) {
                    adaptor.addChild(root_1, stream_dash.nextTree());
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_oscarcm.reset();
                stream_dash.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:93: ( dash )?
                if ( stream_dash.hasNext() ) {
                    adaptor.addChild(root_1, stream_dash.nextTree());

                }
                stream_dash.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound3"

    public static class oscarCompound2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:1: oscarCompound2 : oscarcm ( oscarcm )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ ) ;
    public final ChemicalChunkerParser.oscarCompound2_return oscarCompound2() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound2_return retval = new ChemicalChunkerParser.oscarCompound2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm369 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm370 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:16: ( oscarcm ( oscarcm )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:18: oscarcm ( oscarcm )+
            {
            pushFollow(FOLLOW_oscarcm_in_oscarCompound21807);
            oscarcm369=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm369.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:26: ( oscarcm )+
            int cnt86=0;
            loop86:
            do {
                int alt86=2;
                switch ( input.LA(1) ) {
                case 54:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA86_3 = input.LA(3);

                        if ( (synpred287_ChemicalChunker()) ) {
                            alt86=1;
                        }


                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt86) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: oscarcm
            	    {
            	    pushFollow(FOLLOW_oscarcm_in_oscarCompound21809);
            	    oscarcm370=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm370.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt86 >= 1 ) break loop86;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(86, input);
                        throw eee;
                }
                cnt86++;
            } while (true);



            // AST REWRITE
            // elements: oscarcm, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 150:35: -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:38: ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                if ( !(stream_oscarcm.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_oscarcm.hasNext() ) {
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_oscarcm.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound2"

    public static class oscarCompound1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:1: oscarCompound1 : oscarcm jj oscarcm -> ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm ) ;
    public final ChemicalChunkerParser.oscarCompound1_return oscarCompound1() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound1_return retval = new ChemicalChunkerParser.oscarCompound1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm371 = null;

        ChemicalChunkerParser.jj_return jj372 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm373 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_jj=new RewriteRuleSubtreeStream(adaptor,"rule jj");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:16: ( oscarcm jj oscarcm -> ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:18: oscarcm jj oscarcm
            {
            pushFollow(FOLLOW_oscarcm_in_oscarCompound11830);
            oscarcm371=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm371.getTree());
            pushFollow(FOLLOW_jj_in_oscarCompound11832);
            jj372=jj();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_jj.add(jj372.getTree());
            pushFollow(FOLLOW_oscarcm_in_oscarCompound11834);
            oscarcm373=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm373.getTree());


            // AST REWRITE
            // elements: oscarcm, oscarcm, jj
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 151:37: -> ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:40: ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                adaptor.addChild(root_1, stream_jj.nextTree());
                adaptor.addChild(root_1, stream_oscarcm.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound1"

    public static class moleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:154:1: moleculeamount1 : ( quantity | mixture )+ inof oscarCompound ;
    public final ChemicalChunkerParser.moleculeamount1_return moleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount1_return retval = new ChemicalChunkerParser.moleculeamount1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity374 = null;

        ChemicalChunkerParser.mixture_return mixture375 = null;

        ChemicalChunkerParser.inof_return inof376 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound377 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:2: ( ( quantity | mixture )+ inof oscarCompound )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:3: ( quantity | mixture )+ inof oscarCompound
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:3: ( quantity | mixture )+
            int cnt87=0;
            loop87:
            do {
                int alt87=3;
                switch ( input.LA(1) ) {
                case 107:
                    {
                    int LA87_2 = input.LA(2);

                    if ( (synpred288_ChemicalChunker()) ) {
                        alt87=1;
                    }
                    else if ( (synpred289_ChemicalChunker()) ) {
                        alt87=2;
                    }


                    }
                    break;
                case 38:
                case 123:
                    {
                    alt87=1;
                    }
                    break;
                case 99:
                    {
                    alt87=2;
                    }
                    break;

                }

                switch (alt87) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount11858);
            	    quantity374=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity374.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount11860);
            	    mixture375=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture375.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt87 >= 1 ) break loop87;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(87, input);
                        throw eee;
                }
                cnt87++;
            } while (true);

            pushFollow(FOLLOW_inof_in_moleculeamount11864);
            inof376=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof376.getTree());
            pushFollow(FOLLOW_oscarCompound_in_moleculeamount11866);
            oscarCompound377=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound377.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moleculeamount1"

    public static class moleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:1: moleculeamount2 : ( quantity | mixture )* ( oscarCompound )+ ( citation | quantity | mixture )* ;
    public final ChemicalChunkerParser.moleculeamount2_return moleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount2_return retval = new ChemicalChunkerParser.moleculeamount2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity378 = null;

        ChemicalChunkerParser.mixture_return mixture379 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound380 = null;

        ChemicalChunkerParser.citation_return citation381 = null;

        ChemicalChunkerParser.quantity_return quantity382 = null;

        ChemicalChunkerParser.mixture_return mixture383 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:2: ( ( quantity | mixture )* ( oscarCompound )+ ( citation | quantity | mixture )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:3: ( quantity | mixture )* ( oscarCompound )+ ( citation | quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:3: ( quantity | mixture )*
            loop88:
            do {
                int alt88=3;
                switch ( input.LA(1) ) {
                case 107:
                    {
                    int LA88_2 = input.LA(2);

                    if ( (synpred290_ChemicalChunker()) ) {
                        alt88=1;
                    }
                    else if ( (synpred291_ChemicalChunker()) ) {
                        alt88=2;
                    }


                    }
                    break;
                case 38:
                case 123:
                    {
                    alt88=1;
                    }
                    break;
                case 99:
                    {
                    alt88=2;
                    }
                    break;

                }

                switch (alt88) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount21876);
            	    quantity378=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity378.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount21878);
            	    mixture379=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture379.getTree());

            	    }
            	    break;

            	default :
            	    break loop88;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:23: ( oscarCompound )+
            int cnt89=0;
            loop89:
            do {
                int alt89=2;
                switch ( input.LA(1) ) {
                case 107:
                    {
                    int LA89_1 = input.LA(2);

                    if ( (synpred292_ChemicalChunker()) ) {
                        alt89=1;
                    }


                    }
                    break;
                case 54:
                    {
                    int LA89_3 = input.LA(2);

                    if ( (synpred292_ChemicalChunker()) ) {
                        alt89=1;
                    }


                    }
                    break;

                }

                switch (alt89) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_moleculeamount21882);
            	    oscarCompound380=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound380.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt89 >= 1 ) break loop89;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(89, input);
                        throw eee;
                }
                cnt89++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:39: ( citation | quantity | mixture )*
            loop90:
            do {
                int alt90=4;
                alt90 = dfa90.predict(input);
                switch (alt90) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:40: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_moleculeamount21887);
            	    citation381=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation381.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:49: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount21889);
            	    quantity382=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity382.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:58: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount21891);
            	    mixture383=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture383.getTree());

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moleculeamount2"

    public static class moleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:1: moleculeamount : ( moleculeamount1 | moleculeamount2 );
    public final ChemicalChunkerParser.moleculeamount_return moleculeamount() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount_return retval = new ChemicalChunkerParser.moleculeamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount1_return moleculeamount1384 = null;

        ChemicalChunkerParser.moleculeamount2_return moleculeamount2385 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:16: ( moleculeamount1 | moleculeamount2 )
            int alt91=2;
            switch ( input.LA(1) ) {
            case 107:
                {
                int LA91_1 = input.LA(2);

                if ( (synpred296_ChemicalChunker()) ) {
                    alt91=1;
                }
                else if ( (true) ) {
                    alt91=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 91, 1, input);

                    throw nvae;
                }
                }
                break;
            case 123:
                {
                int LA91_2 = input.LA(2);

                if ( (synpred296_ChemicalChunker()) ) {
                    alt91=1;
                }
                else if ( (true) ) {
                    alt91=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 91, 2, input);

                    throw nvae;
                }
                }
                break;
            case 38:
                {
                int LA91_3 = input.LA(2);

                if ( (synpred296_ChemicalChunker()) ) {
                    alt91=1;
                }
                else if ( (true) ) {
                    alt91=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 91, 3, input);

                    throw nvae;
                }
                }
                break;
            case 99:
                {
                int LA91_4 = input.LA(2);

                if ( (synpred296_ChemicalChunker()) ) {
                    alt91=1;
                }
                else if ( (true) ) {
                    alt91=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 91, 4, input);

                    throw nvae;
                }
                }
                break;
            case 54:
                {
                alt91=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;
            }

            switch (alt91) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:18: moleculeamount1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moleculeamount1_in_moleculeamount1902);
                    moleculeamount1384=moleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount1384.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:36: moleculeamount2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moleculeamount2_in_moleculeamount1906);
                    moleculeamount2385=moleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount2385.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moleculeamount"

    public static class molecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molecule"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:1: molecule : moleculeamount -> ^( NODE[\"MOLECULE\"] moleculeamount ) ;
    public final ChemicalChunkerParser.molecule_return molecule() throws RecognitionException {
        ChemicalChunkerParser.molecule_return retval = new ChemicalChunkerParser.molecule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount_return moleculeamount386 = null;


        RewriteRuleSubtreeStream stream_moleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule moleculeamount");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:2: ( moleculeamount -> ^( NODE[\"MOLECULE\"] moleculeamount ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:5: moleculeamount
            {
            pushFollow(FOLLOW_moleculeamount_in_molecule1927);
            moleculeamount386=moleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moleculeamount.add(moleculeamount386.getTree());


            // AST REWRITE
            // elements: moleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 161:19: -> ^( NODE[\"MOLECULE\"] moleculeamount )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:22: ^( NODE[\"MOLECULE\"] moleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MOLECULE"), root_1);

                adaptor.addChild(root_1, stream_moleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "molecule"

    public static class oscarcdType_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcdType"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:166:1: oscarcdType : lrb ( oscarcd | cd ) rrb ;
    public final ChemicalChunkerParser.oscarcdType_return oscarcdType() throws RecognitionException {
        ChemicalChunkerParser.oscarcdType_return retval = new ChemicalChunkerParser.oscarcdType_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb387 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd388 = null;

        ChemicalChunkerParser.cd_return cd389 = null;

        ChemicalChunkerParser.rrb_return rrb390 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:166:13: ( lrb ( oscarcd | cd ) rrb )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:166:16: lrb ( oscarcd | cd ) rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_oscarcdType1950);
            lrb387=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb387.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:166:20: ( oscarcd | cd )
            int alt92=2;
            switch ( input.LA(1) ) {
            case 11:
                {
                alt92=1;
                }
                break;
            case 123:
                {
                alt92=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;
            }

            switch (alt92) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:166:21: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_oscarcdType1953);
                    oscarcd388=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd388.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:166:29: cd
                    {
                    pushFollow(FOLLOW_cd_in_oscarcdType1955);
                    cd389=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd389.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_rrb_in_oscarcdType1958);
            rrb390=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb390.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcdType"

    public static class unnamedmoleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:167:1: unnamedmoleculeamount1 : quantity inof ( oscarcd | cd ) ;
    public final ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount1_return retval = new ChemicalChunkerParser.unnamedmoleculeamount1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity391 = null;

        ChemicalChunkerParser.inof_return inof392 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd393 = null;

        ChemicalChunkerParser.cd_return cd394 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:2: ( quantity inof ( oscarcd | cd ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:4: quantity inof ( oscarcd | cd )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount11967);
            quantity391=quantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity391.getTree());
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount11969);
            inof392=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof392.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:18: ( oscarcd | cd )
            int alt93=2;
            switch ( input.LA(1) ) {
            case 11:
                {
                alt93=1;
                }
                break;
            case 123:
                {
                alt93=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;
            }

            switch (alt93) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:19: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_unnamedmoleculeamount11972);
                    oscarcd393=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd393.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:27: cd
                    {
                    pushFollow(FOLLOW_cd_in_unnamedmoleculeamount11974);
                    cd394=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd394.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount1"

    public static class unnamedmoleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:169:1: unnamedmoleculeamount2 : ( oscarcd | oscarcdType ( citation | quantity | mixture )* );
    public final ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount2_return retval = new ChemicalChunkerParser.unnamedmoleculeamount2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd395 = null;

        ChemicalChunkerParser.oscarcdType_return oscarcdType396 = null;

        ChemicalChunkerParser.citation_return citation397 = null;

        ChemicalChunkerParser.quantity_return quantity398 = null;

        ChemicalChunkerParser.mixture_return mixture399 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:2: ( oscarcd | oscarcdType ( citation | quantity | mixture )* )
            int alt95=2;
            switch ( input.LA(1) ) {
            case 11:
                {
                alt95=1;
                }
                break;
            case 107:
                {
                alt95=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);

                throw nvae;
            }

            switch (alt95) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:3: oscarcd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcd_in_unnamedmoleculeamount21982);
                    oscarcd395=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd395.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:11: oscarcdType ( citation | quantity | mixture )*
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcdType_in_unnamedmoleculeamount21984);
                    oscarcdType396=oscarcdType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcdType396.getTree());
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:23: ( citation | quantity | mixture )*
                    loop94:
                    do {
                        int alt94=4;
                        alt94 = dfa94.predict(input);
                        switch (alt94) {
                    	case 1 :
                    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:24: citation
                    	    {
                    	    pushFollow(FOLLOW_citation_in_unnamedmoleculeamount21987);
                    	    citation397=citation();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation397.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:33: quantity
                    	    {
                    	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount21989);
                    	    quantity398=quantity();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity398.getTree());

                    	    }
                    	    break;
                    	case 3 :
                    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:42: mixture
                    	    {
                    	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount21991);
                    	    mixture399=mixture();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture399.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop94;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount2"

    public static class unnamedmoleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount3"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:175:1: unnamedmoleculeamount3 : quantity inof ( ( jj )? noun )+ ;
    public final ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount3_return retval = new ChemicalChunkerParser.unnamedmoleculeamount3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity400 = null;

        ChemicalChunkerParser.inof_return inof401 = null;

        ChemicalChunkerParser.jj_return jj402 = null;

        ChemicalChunkerParser.noun_return noun403 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:2: ( quantity inof ( ( jj )? noun )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:3: quantity inof ( ( jj )? noun )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount32007);
            quantity400=quantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity400.getTree());
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount32009);
            inof401=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof401.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:17: ( ( jj )? noun )+
            int cnt97=0;
            loop97:
            do {
                int alt97=2;
                alt97 = dfa97.predict(input);
                switch (alt97) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:18: ( jj )? noun
            	    {
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:18: ( jj )?
            	    int alt96=2;
            	    switch ( input.LA(1) ) {
            	        case 140:
            	            {
            	            switch ( input.LA(2) ) {
            	                case TOKEN:
            	                    {
            	                    int LA96_3 = input.LA(3);

            	                    if ( (synpred303_ChemicalChunker()) ) {
            	                        alt96=1;
            	                    }
            	                    }
            	                    break;
            	            }

            	            }
            	            break;
            	    }

            	    switch (alt96) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: jj
            	            {
            	            pushFollow(FOLLOW_jj_in_unnamedmoleculeamount32012);
            	            jj402=jj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, jj402.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_noun_in_unnamedmoleculeamount32015);
            	    noun403=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun403.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt97 >= 1 ) break loop97;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(97, input);
                        throw eee;
                }
                cnt97++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount3"

    public static class unnamedmoleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:1: unnamedmoleculeamount : ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 );
    public final ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount_return retval = new ChemicalChunkerParser.unnamedmoleculeamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1404 = null;

        ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2405 = null;

        ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3406 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:179:2: ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 )
            int alt98=3;
            switch ( input.LA(1) ) {
            case 107:
                {
                int LA98_1 = input.LA(2);

                if ( (synpred305_ChemicalChunker()) ) {
                    alt98=1;
                }
                else if ( (synpred306_ChemicalChunker()) ) {
                    alt98=2;
                }
                else if ( (true) ) {
                    alt98=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 98, 1, input);

                    throw nvae;
                }
                }
                break;
            case 123:
                {
                int LA98_2 = input.LA(2);

                if ( (synpred305_ChemicalChunker()) ) {
                    alt98=1;
                }
                else if ( (true) ) {
                    alt98=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 98, 2, input);

                    throw nvae;
                }
                }
                break;
            case 38:
                {
                int LA98_3 = input.LA(2);

                if ( (synpred305_ChemicalChunker()) ) {
                    alt98=1;
                }
                else if ( (true) ) {
                    alt98=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 98, 3, input);

                    throw nvae;
                }
                }
                break;
            case 11:
                {
                alt98=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;
            }

            switch (alt98) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:179:3: unnamedmoleculeamount1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount2026);
                    unnamedmoleculeamount1404=unnamedmoleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount1404.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:179:28: unnamedmoleculeamount2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount2030);
                    unnamedmoleculeamount2405=unnamedmoleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount2405.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:179:53: unnamedmoleculeamount3
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount2034);
                    unnamedmoleculeamount3406=unnamedmoleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount3406.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount"

    public static class unnamedmolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmolecule"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:182:1: unnamedmolecule : unnamedmoleculeamount -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount ) ;
    public final ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule() throws RecognitionException {
        ChemicalChunkerParser.unnamedmolecule_return retval = new ChemicalChunkerParser.unnamedmolecule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount407 = null;


        RewriteRuleSubtreeStream stream_unnamedmoleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule unnamedmoleculeamount");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:183:2: ( unnamedmoleculeamount -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:183:4: unnamedmoleculeamount
            {
            pushFollow(FOLLOW_unnamedmoleculeamount_in_unnamedmolecule2047);
            unnamedmoleculeamount407=unnamedmoleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unnamedmoleculeamount.add(unnamedmoleculeamount407.getTree());


            // AST REWRITE
            // elements: unnamedmoleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 183:26: -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:183:29: ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "UNNAMEDMOLECULE"), root_1);

                adaptor.addChild(root_1, stream_unnamedmoleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmolecule"

    public static class quantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:1: quantity : ( quantity1 | quantity2 ) -> ^( NODE[\"QUANTITY\"] ( quantity1 )? ( quantity2 )? ) ;
    public final ChemicalChunkerParser.quantity_return quantity() throws RecognitionException {
        ChemicalChunkerParser.quantity_return retval = new ChemicalChunkerParser.quantity_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity1_return quantity1408 = null;

        ChemicalChunkerParser.quantity2_return quantity2409 = null;


        RewriteRuleSubtreeStream stream_quantity1=new RewriteRuleSubtreeStream(adaptor,"rule quantity1");
        RewriteRuleSubtreeStream stream_quantity2=new RewriteRuleSubtreeStream(adaptor,"rule quantity2");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:11: ( ( quantity1 | quantity2 ) -> ^( NODE[\"QUANTITY\"] ( quantity1 )? ( quantity2 )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:14: ( quantity1 | quantity2 )
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:14: ( quantity1 | quantity2 )
            int alt99=2;
            switch ( input.LA(1) ) {
            case 107:
                {
                alt99=1;
                }
                break;
            case 38:
            case 123:
                {
                alt99=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);

                throw nvae;
            }

            switch (alt99) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:15: quantity1
                    {
                    pushFollow(FOLLOW_quantity1_in_quantity2070);
                    quantity1408=quantity1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quantity1.add(quantity1408.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:25: quantity2
                    {
                    pushFollow(FOLLOW_quantity2_in_quantity2072);
                    quantity2409=quantity2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quantity2.add(quantity2409.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: quantity1, quantity2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 185:36: -> ^( NODE[\"QUANTITY\"] ( quantity1 )? ( quantity2 )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:41: ^( NODE[\"QUANTITY\"] ( quantity1 )? ( quantity2 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "QUANTITY"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:61: ( quantity1 )?
                if ( stream_quantity1.hasNext() ) {
                    adaptor.addChild(root_1, stream_quantity1.nextTree());

                }
                stream_quantity1.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:72: ( quantity2 )?
                if ( stream_quantity2.hasNext() ) {
                    adaptor.addChild(root_1, stream_quantity2.nextTree());

                }
                stream_quantity2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quantity"

    public static class quantity1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:186:1: quantity1 : lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb ;
    public final ChemicalChunkerParser.quantity1_return quantity1() throws RecognitionException {
        ChemicalChunkerParser.quantity1_return retval = new ChemicalChunkerParser.quantity1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb410 = null;

        ChemicalChunkerParser.measurements_return measurements411 = null;

        ChemicalChunkerParser.comma_return comma412 = null;

        ChemicalChunkerParser.measurements_return measurements413 = null;

        ChemicalChunkerParser.comma_return comma414 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase415 = null;

        ChemicalChunkerParser.stop_return stop416 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase417 = null;

        ChemicalChunkerParser.rrb_return rrb418 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:2: ( lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:4: lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_quantity12097);
            lrb410=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb410.getTree());
            pushFollow(FOLLOW_measurements_in_quantity12099);
            measurements411=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements411.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:21: ( comma measurements )*
            loop100:
            do {
                int alt100=2;
                switch ( input.LA(1) ) {
                case 99:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 38:
                        case 123:
                            {
                            alt100=1;
                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt100) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:22: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12102);
            	    comma412=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma412.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity12105);
            	    measurements413=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements413.getTree());

            	    }
            	    break;

            	default :
            	    break loop100;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:44: ( comma preparationphrase )*
            loop101:
            do {
                int alt101=2;
                switch ( input.LA(1) ) {
                case 99:
                    {
                    alt101=1;
                    }
                    break;

                }

                switch (alt101) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:45: comma preparationphrase
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12110);
            	    comma414=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma414.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12112);
            	    preparationphrase415=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase415.getTree());

            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:71: ( stop preparationphrase )*
            loop102:
            do {
                int alt102=2;
                switch ( input.LA(1) ) {
                case 103:
                    {
                    alt102=1;
                    }
                    break;

                }

                switch (alt102) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:72: stop preparationphrase
            	    {
            	    pushFollow(FOLLOW_stop_in_quantity12117);
            	    stop416=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop416.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12119);
            	    preparationphrase417=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase417.getTree());

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);

            pushFollow(FOLLOW_rrb_in_quantity12124);
            rrb418=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb418.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quantity1"

    public static class quantity2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:188:1: quantity2 : measurements ( comma measurements )* ;
    public final ChemicalChunkerParser.quantity2_return quantity2() throws RecognitionException {
        ChemicalChunkerParser.quantity2_return retval = new ChemicalChunkerParser.quantity2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements419 = null;

        ChemicalChunkerParser.comma_return comma420 = null;

        ChemicalChunkerParser.measurements_return measurements421 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:2: ( measurements ( comma measurements )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:5: measurements ( comma measurements )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_measurements_in_quantity22135);
            measurements419=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements419.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:18: ( comma measurements )*
            loop103:
            do {
                int alt103=2;
                alt103 = dfa103.predict(input);
                switch (alt103) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:19: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity22138);
            	    comma420=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma420.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity22141);
            	    measurements421=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements421.getTree());

            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quantity2"

    public static class method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "method"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:191:1: method : ( nngeneral | nn )? nnmethod ( oscarcd | cd )? ;
    public final ChemicalChunkerParser.method_return method() throws RecognitionException {
        ChemicalChunkerParser.method_return retval = new ChemicalChunkerParser.method_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral422 = null;

        ChemicalChunkerParser.nn_return nn423 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod424 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd425 = null;

        ChemicalChunkerParser.cd_return cd426 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:191:7: ( ( nngeneral | nn )? nnmethod ( oscarcd | cd )? )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:5: ( nngeneral | nn )? nnmethod ( oscarcd | cd )?
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:5: ( nngeneral | nn )?
            int alt104=3;
            switch ( input.LA(1) ) {
                case 46:
                    {
                    alt104=1;
                    }
                    break;
                case 146:
                    {
                    alt104=2;
                    }
                    break;
            }

            switch (alt104) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:6: nngeneral
                    {
                    pushFollow(FOLLOW_nngeneral_in_method2157);
                    nngeneral422=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral422.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:16: nn
                    {
                    pushFollow(FOLLOW_nn_in_method2159);
                    nn423=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn423.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnmethod_in_method2163);
            nnmethod424=nnmethod();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod424.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:30: ( oscarcd | cd )?
            int alt105=3;
            switch ( input.LA(1) ) {
                case 11:
                    {
                    alt105=1;
                    }
                    break;
                case 123:
                    {
                    alt105=2;
                    }
                    break;
            }

            switch (alt105) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:31: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_method2166);
                    oscarcd425=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd425.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:192:39: cd
                    {
                    pushFollow(FOLLOW_cd_in_method2168);
                    cd426=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd426.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "method"

    public static class brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "brackets"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:193:5: brackets : ( lrb | rrb | lsqb | rsqb )+ ;
    public final ChemicalChunkerParser.brackets_return brackets() throws RecognitionException {
        ChemicalChunkerParser.brackets_return retval = new ChemicalChunkerParser.brackets_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb427 = null;

        ChemicalChunkerParser.rrb_return rrb428 = null;

        ChemicalChunkerParser.lsqb_return lsqb429 = null;

        ChemicalChunkerParser.rsqb_return rsqb430 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:6: ( ( lrb | rrb | lsqb | rsqb )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:8: ( lrb | rrb | lsqb | rsqb )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:8: ( lrb | rrb | lsqb | rsqb )+
            int cnt106=0;
            loop106:
            do {
                int alt106=5;
                alt106 = dfa106.predict(input);
                switch (alt106) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:9: lrb
            	    {
            	    pushFollow(FOLLOW_lrb_in_brackets2190);
            	    lrb427=lrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb427.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:13: rrb
            	    {
            	    pushFollow(FOLLOW_rrb_in_brackets2192);
            	    rrb428=rrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb428.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:17: lsqb
            	    {
            	    pushFollow(FOLLOW_lsqb_in_brackets2194);
            	    lsqb429=lsqb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb429.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:22: rsqb
            	    {
            	    pushFollow(FOLLOW_rsqb_in_brackets2196);
            	    rsqb430=rsqb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb430.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt106 >= 1 ) break loop106;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(106, input);
                        throw eee;
                }
                cnt106++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "brackets"

    public static class oscarcd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcd"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:1: oscarcd : 'OSCAR-CD' TOKEN ;
    public final ChemicalChunkerParser.oscarcd_return oscarcd() throws RecognitionException {
        ChemicalChunkerParser.oscarcd_return retval = new ChemicalChunkerParser.oscarcd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal431=null;
        Token TOKEN432=null;

        Object string_literal431_tree=null;
        Object TOKEN432_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:8: ( 'OSCAR-CD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:9: 'OSCAR-CD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal431=(Token)match(input,11,FOLLOW_11_in_oscarcd2204); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal431_tree = (Object)adaptor.create(string_literal431);
            adaptor.addChild(root_0, string_literal431_tree);
            }
            TOKEN432=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcd2206); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN432_tree = (Object)adaptor.create(TOKEN432);
            adaptor.addChild(root_0, TOKEN432_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcd"

    public static class oscarcj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcj"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:197:1: oscarcj : 'OSCAR-CJ' TOKEN ;
    public final ChemicalChunkerParser.oscarcj_return oscarcj() throws RecognitionException {
        ChemicalChunkerParser.oscarcj_return retval = new ChemicalChunkerParser.oscarcj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal433=null;
        Token TOKEN434=null;

        Object string_literal433_tree=null;
        Object TOKEN434_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:197:8: ( 'OSCAR-CJ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:197:9: 'OSCAR-CJ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal433=(Token)match(input,12,FOLLOW_12_in_oscarcj2211); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal433_tree = (Object)adaptor.create(string_literal433);
            adaptor.addChild(root_0, string_literal433_tree);
            }
            TOKEN434=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcj2213); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN434_tree = (Object)adaptor.create(TOKEN434);
            adaptor.addChild(root_0, TOKEN434_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcj"

    public static class oscarrn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarrn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:1: oscarrn : 'OSCAR-RN' TOKEN ;
    public final ChemicalChunkerParser.oscarrn_return oscarrn() throws RecognitionException {
        ChemicalChunkerParser.oscarrn_return retval = new ChemicalChunkerParser.oscarrn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal435=null;
        Token TOKEN436=null;

        Object string_literal435_tree=null;
        Object TOKEN436_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:8: ( 'OSCAR-RN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:9: 'OSCAR-RN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal435=(Token)match(input,13,FOLLOW_13_in_oscarrn2218); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal435_tree = (Object)adaptor.create(string_literal435);
            adaptor.addChild(root_0, string_literal435_tree);
            }
            TOKEN436=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarrn2220); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN436_tree = (Object)adaptor.create(TOKEN436);
            adaptor.addChild(root_0, TOKEN436_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarrn"

    public static class oscarcpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcpr"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:199:1: oscarcpr : 'OSCAR-CPR' TOKEN ;
    public final ChemicalChunkerParser.oscarcpr_return oscarcpr() throws RecognitionException {
        ChemicalChunkerParser.oscarcpr_return retval = new ChemicalChunkerParser.oscarcpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal437=null;
        Token TOKEN438=null;

        Object string_literal437_tree=null;
        Object TOKEN438_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:199:9: ( 'OSCAR-CPR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:199:10: 'OSCAR-CPR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal437=(Token)match(input,14,FOLLOW_14_in_oscarcpr2225); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal437_tree = (Object)adaptor.create(string_literal437);
            adaptor.addChild(root_0, string_literal437_tree);
            }
            TOKEN438=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcpr2227); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN438_tree = (Object)adaptor.create(TOKEN438);
            adaptor.addChild(root_0, TOKEN438_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcpr"

    public static class oscaront_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaront"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:200:1: oscaront : 'OSCAR-ONT' TOKEN ;
    public final ChemicalChunkerParser.oscaront_return oscaront() throws RecognitionException {
        ChemicalChunkerParser.oscaront_return retval = new ChemicalChunkerParser.oscaront_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal439=null;
        Token TOKEN440=null;

        Object string_literal439_tree=null;
        Object TOKEN440_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:200:9: ( 'OSCAR-ONT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:200:11: 'OSCAR-ONT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal439=(Token)match(input,15,FOLLOW_15_in_oscaront2233); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal439_tree = (Object)adaptor.create(string_literal439);
            adaptor.addChild(root_0, string_literal439_tree);
            }
            TOKEN440=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscaront2235); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN440_tree = (Object)adaptor.create(TOKEN440);
            adaptor.addChild(root_0, TOKEN440_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscaront"

    public static class tmunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tmunicode"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:201:1: tmunicode : 'TM-UNICODE' TOKEN ;
    public final ChemicalChunkerParser.tmunicode_return tmunicode() throws RecognitionException {
        ChemicalChunkerParser.tmunicode_return retval = new ChemicalChunkerParser.tmunicode_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal441=null;
        Token TOKEN442=null;

        Object string_literal441_tree=null;
        Object TOKEN442_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:201:10: ( 'TM-UNICODE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:201:11: 'TM-UNICODE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal441=(Token)match(input,16,FOLLOW_16_in_tmunicode2240); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal441_tree = (Object)adaptor.create(string_literal441);
            adaptor.addChild(root_0, string_literal441_tree);
            }
            TOKEN442=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_tmunicode2242); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN442_tree = (Object)adaptor.create(TOKEN442);
            adaptor.addChild(root_0, TOKEN442_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "tmunicode"

    public static class cdunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdunicode"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:202:1: cdunicode : 'CD-UNICODE' TOKEN ;
    public final ChemicalChunkerParser.cdunicode_return cdunicode() throws RecognitionException {
        ChemicalChunkerParser.cdunicode_return retval = new ChemicalChunkerParser.cdunicode_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal443=null;
        Token TOKEN444=null;

        Object string_literal443_tree=null;
        Object TOKEN444_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:202:10: ( 'CD-UNICODE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:202:11: 'CD-UNICODE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal443=(Token)match(input,17,FOLLOW_17_in_cdunicode2247); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal443_tree = (Object)adaptor.create(string_literal443);
            adaptor.addChild(root_0, string_literal443_tree);
            }
            TOKEN444=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdunicode2249); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN444_tree = (Object)adaptor.create(TOKEN444);
            adaptor.addChild(root_0, TOKEN444_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cdunicode"

    public static class inas_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inas"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:205:1: inas : 'IN-AS' TOKEN ;
    public final ChemicalChunkerParser.inas_return inas() throws RecognitionException {
        ChemicalChunkerParser.inas_return retval = new ChemicalChunkerParser.inas_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal445=null;
        Token TOKEN446=null;

        Object string_literal445_tree=null;
        Object TOKEN446_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:205:5: ( 'IN-AS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:205:6: 'IN-AS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal445=(Token)match(input,18,FOLLOW_18_in_inas2256); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal445_tree = (Object)adaptor.create(string_literal445);
            adaptor.addChild(root_0, string_literal445_tree);
            }
            TOKEN446=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inas2258); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN446_tree = (Object)adaptor.create(TOKEN446);
            adaptor.addChild(root_0, TOKEN446_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inas"

    public static class inbefore_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inbefore"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:206:1: inbefore : 'IN-BEFORE' TOKEN ;
    public final ChemicalChunkerParser.inbefore_return inbefore() throws RecognitionException {
        ChemicalChunkerParser.inbefore_return retval = new ChemicalChunkerParser.inbefore_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal447=null;
        Token TOKEN448=null;

        Object string_literal447_tree=null;
        Object TOKEN448_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:206:9: ( 'IN-BEFORE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:206:10: 'IN-BEFORE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal447=(Token)match(input,19,FOLLOW_19_in_inbefore2263); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal447_tree = (Object)adaptor.create(string_literal447);
            adaptor.addChild(root_0, string_literal447_tree);
            }
            TOKEN448=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inbefore2265); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN448_tree = (Object)adaptor.create(TOKEN448);
            adaptor.addChild(root_0, TOKEN448_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inbefore"

    public static class inafter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inafter"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:207:1: inafter : 'IN-AFTER' TOKEN ;
    public final ChemicalChunkerParser.inafter_return inafter() throws RecognitionException {
        ChemicalChunkerParser.inafter_return retval = new ChemicalChunkerParser.inafter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal449=null;
        Token TOKEN450=null;

        Object string_literal449_tree=null;
        Object TOKEN450_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:207:8: ( 'IN-AFTER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:207:9: 'IN-AFTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal449=(Token)match(input,20,FOLLOW_20_in_inafter2270); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal449_tree = (Object)adaptor.create(string_literal449);
            adaptor.addChild(root_0, string_literal449_tree);
            }
            TOKEN450=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inafter2272); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN450_tree = (Object)adaptor.create(TOKEN450);
            adaptor.addChild(root_0, TOKEN450_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inafter"

    public static class inin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inin"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:208:1: inin : 'IN-IN' TOKEN ;
    public final ChemicalChunkerParser.inin_return inin() throws RecognitionException {
        ChemicalChunkerParser.inin_return retval = new ChemicalChunkerParser.inin_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal451=null;
        Token TOKEN452=null;

        Object string_literal451_tree=null;
        Object TOKEN452_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:208:5: ( 'IN-IN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:208:6: 'IN-IN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal451=(Token)match(input,21,FOLLOW_21_in_inin2277); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal451_tree = (Object)adaptor.create(string_literal451);
            adaptor.addChild(root_0, string_literal451_tree);
            }
            TOKEN452=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inin2279); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN452_tree = (Object)adaptor.create(TOKEN452);
            adaptor.addChild(root_0, TOKEN452_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inin"

    public static class ininto_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ininto"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:209:1: ininto : 'IN-INTO' TOKEN ;
    public final ChemicalChunkerParser.ininto_return ininto() throws RecognitionException {
        ChemicalChunkerParser.ininto_return retval = new ChemicalChunkerParser.ininto_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal453=null;
        Token TOKEN454=null;

        Object string_literal453_tree=null;
        Object TOKEN454_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:209:7: ( 'IN-INTO' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:209:8: 'IN-INTO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal453=(Token)match(input,22,FOLLOW_22_in_ininto2284); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal453_tree = (Object)adaptor.create(string_literal453);
            adaptor.addChild(root_0, string_literal453_tree);
            }
            TOKEN454=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ininto2286); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN454_tree = (Object)adaptor.create(TOKEN454);
            adaptor.addChild(root_0, TOKEN454_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ininto"

    public static class inwith_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwith"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:1: inwith : 'IN-WITH' TOKEN ;
    public final ChemicalChunkerParser.inwith_return inwith() throws RecognitionException {
        ChemicalChunkerParser.inwith_return retval = new ChemicalChunkerParser.inwith_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal455=null;
        Token TOKEN456=null;

        Object string_literal455_tree=null;
        Object TOKEN456_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:7: ( 'IN-WITH' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:8: 'IN-WITH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal455=(Token)match(input,23,FOLLOW_23_in_inwith2291); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal455_tree = (Object)adaptor.create(string_literal455);
            adaptor.addChild(root_0, string_literal455_tree);
            }
            TOKEN456=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwith2293); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN456_tree = (Object)adaptor.create(TOKEN456);
            adaptor.addChild(root_0, TOKEN456_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inwith"

    public static class inwithout_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwithout"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:211:1: inwithout : 'IN-WITHOUT' TOKEN ;
    public final ChemicalChunkerParser.inwithout_return inwithout() throws RecognitionException {
        ChemicalChunkerParser.inwithout_return retval = new ChemicalChunkerParser.inwithout_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal457=null;
        Token TOKEN458=null;

        Object string_literal457_tree=null;
        Object TOKEN458_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:211:10: ( 'IN-WITHOUT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:211:11: 'IN-WITHOUT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal457=(Token)match(input,24,FOLLOW_24_in_inwithout2298); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal457_tree = (Object)adaptor.create(string_literal457);
            adaptor.addChild(root_0, string_literal457_tree);
            }
            TOKEN458=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwithout2300); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN458_tree = (Object)adaptor.create(TOKEN458);
            adaptor.addChild(root_0, TOKEN458_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inwithout"

    public static class inby_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inby"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:212:1: inby : 'IN-BY' TOKEN ;
    public final ChemicalChunkerParser.inby_return inby() throws RecognitionException {
        ChemicalChunkerParser.inby_return retval = new ChemicalChunkerParser.inby_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal459=null;
        Token TOKEN460=null;

        Object string_literal459_tree=null;
        Object TOKEN460_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:212:5: ( 'IN-BY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:212:6: 'IN-BY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal459=(Token)match(input,25,FOLLOW_25_in_inby2305); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal459_tree = (Object)adaptor.create(string_literal459);
            adaptor.addChild(root_0, string_literal459_tree);
            }
            TOKEN460=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inby2307); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN460_tree = (Object)adaptor.create(TOKEN460);
            adaptor.addChild(root_0, TOKEN460_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inby"

    public static class invia_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invia"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:213:1: invia : 'IN-VIA' TOKEN ;
    public final ChemicalChunkerParser.invia_return invia() throws RecognitionException {
        ChemicalChunkerParser.invia_return retval = new ChemicalChunkerParser.invia_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal461=null;
        Token TOKEN462=null;

        Object string_literal461_tree=null;
        Object TOKEN462_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:213:6: ( 'IN-VIA' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:213:7: 'IN-VIA' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal461=(Token)match(input,26,FOLLOW_26_in_invia2312); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal461_tree = (Object)adaptor.create(string_literal461);
            adaptor.addChild(root_0, string_literal461_tree);
            }
            TOKEN462=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_invia2314); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN462_tree = (Object)adaptor.create(TOKEN462);
            adaptor.addChild(root_0, TOKEN462_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "invia"

    public static class inof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inof"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:214:1: inof : 'IN-OF' TOKEN ;
    public final ChemicalChunkerParser.inof_return inof() throws RecognitionException {
        ChemicalChunkerParser.inof_return retval = new ChemicalChunkerParser.inof_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal463=null;
        Token TOKEN464=null;

        Object string_literal463_tree=null;
        Object TOKEN464_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:214:5: ( 'IN-OF' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:214:6: 'IN-OF' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal463=(Token)match(input,27,FOLLOW_27_in_inof2319); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal463_tree = (Object)adaptor.create(string_literal463);
            adaptor.addChild(root_0, string_literal463_tree);
            }
            TOKEN464=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inof2321); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN464_tree = (Object)adaptor.create(TOKEN464);
            adaptor.addChild(root_0, TOKEN464_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inof"

    public static class inon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inon"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:215:1: inon : 'IN-ON' TOKEN ;
    public final ChemicalChunkerParser.inon_return inon() throws RecognitionException {
        ChemicalChunkerParser.inon_return retval = new ChemicalChunkerParser.inon_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal465=null;
        Token TOKEN466=null;

        Object string_literal465_tree=null;
        Object TOKEN466_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:215:5: ( 'IN-ON' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:215:6: 'IN-ON' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal465=(Token)match(input,28,FOLLOW_28_in_inon2326); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal465_tree = (Object)adaptor.create(string_literal465);
            adaptor.addChild(root_0, string_literal465_tree);
            }
            TOKEN466=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inon2328); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN466_tree = (Object)adaptor.create(TOKEN466);
            adaptor.addChild(root_0, TOKEN466_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inon"

    public static class infor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infor"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:216:1: infor : 'IN-FOR' TOKEN ;
    public final ChemicalChunkerParser.infor_return infor() throws RecognitionException {
        ChemicalChunkerParser.infor_return retval = new ChemicalChunkerParser.infor_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal467=null;
        Token TOKEN468=null;

        Object string_literal467_tree=null;
        Object TOKEN468_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:216:6: ( 'IN-FOR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:216:7: 'IN-FOR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal467=(Token)match(input,29,FOLLOW_29_in_infor2333); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal467_tree = (Object)adaptor.create(string_literal467);
            adaptor.addChild(root_0, string_literal467_tree);
            }
            TOKEN468=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infor2335); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN468_tree = (Object)adaptor.create(TOKEN468);
            adaptor.addChild(root_0, TOKEN468_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "infor"

    public static class infrom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infrom"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:217:1: infrom : 'IN-FROM' TOKEN ;
    public final ChemicalChunkerParser.infrom_return infrom() throws RecognitionException {
        ChemicalChunkerParser.infrom_return retval = new ChemicalChunkerParser.infrom_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal469=null;
        Token TOKEN470=null;

        Object string_literal469_tree=null;
        Object TOKEN470_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:217:7: ( 'IN-FROM' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:217:8: 'IN-FROM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal469=(Token)match(input,30,FOLLOW_30_in_infrom2340); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal469_tree = (Object)adaptor.create(string_literal469);
            adaptor.addChild(root_0, string_literal469_tree);
            }
            TOKEN470=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infrom2342); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN470_tree = (Object)adaptor.create(TOKEN470);
            adaptor.addChild(root_0, TOKEN470_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "infrom"

    public static class inunder_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inunder"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:218:1: inunder : 'IN-UNDER' TOKEN ;
    public final ChemicalChunkerParser.inunder_return inunder() throws RecognitionException {
        ChemicalChunkerParser.inunder_return retval = new ChemicalChunkerParser.inunder_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal471=null;
        Token TOKEN472=null;

        Object string_literal471_tree=null;
        Object TOKEN472_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:218:8: ( 'IN-UNDER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:218:9: 'IN-UNDER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal471=(Token)match(input,31,FOLLOW_31_in_inunder2347); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal471_tree = (Object)adaptor.create(string_literal471);
            adaptor.addChild(root_0, string_literal471_tree);
            }
            TOKEN472=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inunder2349); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN472_tree = (Object)adaptor.create(TOKEN472);
            adaptor.addChild(root_0, TOKEN472_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inunder"

    public static class inover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inover"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:1: inover : 'IN-OVER' TOKEN ;
    public final ChemicalChunkerParser.inover_return inover() throws RecognitionException {
        ChemicalChunkerParser.inover_return retval = new ChemicalChunkerParser.inover_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal473=null;
        Token TOKEN474=null;

        Object string_literal473_tree=null;
        Object TOKEN474_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:7: ( 'IN-OVER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:8: 'IN-OVER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal473=(Token)match(input,32,FOLLOW_32_in_inover2354); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal473_tree = (Object)adaptor.create(string_literal473);
            adaptor.addChild(root_0, string_literal473_tree);
            }
            TOKEN474=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inover2356); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN474_tree = (Object)adaptor.create(TOKEN474);
            adaptor.addChild(root_0, TOKEN474_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inover"

    public static class inoff_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inoff"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:220:1: inoff : 'IN-OFF' TOKEN ;
    public final ChemicalChunkerParser.inoff_return inoff() throws RecognitionException {
        ChemicalChunkerParser.inoff_return retval = new ChemicalChunkerParser.inoff_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal475=null;
        Token TOKEN476=null;

        Object string_literal475_tree=null;
        Object TOKEN476_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:220:6: ( 'IN-OFF' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:220:7: 'IN-OFF' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal475=(Token)match(input,33,FOLLOW_33_in_inoff2361); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal475_tree = (Object)adaptor.create(string_literal475);
            adaptor.addChild(root_0, string_literal475_tree);
            }
            TOKEN476=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inoff2363); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN476_tree = (Object)adaptor.create(TOKEN476);
            adaptor.addChild(root_0, TOKEN476_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inoff"

    public static class nnexample_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnexample"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:223:1: nnexample : 'NN-EXAMPLE' TOKEN ;
    public final ChemicalChunkerParser.nnexample_return nnexample() throws RecognitionException {
        ChemicalChunkerParser.nnexample_return retval = new ChemicalChunkerParser.nnexample_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal477=null;
        Token TOKEN478=null;

        Object string_literal477_tree=null;
        Object TOKEN478_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:223:10: ( 'NN-EXAMPLE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:223:11: 'NN-EXAMPLE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal477=(Token)match(input,34,FOLLOW_34_in_nnexample2370); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal477_tree = (Object)adaptor.create(string_literal477);
            adaptor.addChild(root_0, string_literal477_tree);
            }
            TOKEN478=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnexample2372); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN478_tree = (Object)adaptor.create(TOKEN478);
            adaptor.addChild(root_0, TOKEN478_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnexample"

    public static class nnstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnstate"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:224:1: nnstate : 'NN-STATE' TOKEN ;
    public final ChemicalChunkerParser.nnstate_return nnstate() throws RecognitionException {
        ChemicalChunkerParser.nnstate_return retval = new ChemicalChunkerParser.nnstate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal479=null;
        Token TOKEN480=null;

        Object string_literal479_tree=null;
        Object TOKEN480_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:224:8: ( 'NN-STATE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:224:9: 'NN-STATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal479=(Token)match(input,35,FOLLOW_35_in_nnstate2377); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal479_tree = (Object)adaptor.create(string_literal479);
            adaptor.addChild(root_0, string_literal479_tree);
            }
            TOKEN480=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnstate2379); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN480_tree = (Object)adaptor.create(TOKEN480);
            adaptor.addChild(root_0, TOKEN480_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnstate"

    public static class nntime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntime"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:225:1: nntime : 'NN-TIME' TOKEN ;
    public final ChemicalChunkerParser.nntime_return nntime() throws RecognitionException {
        ChemicalChunkerParser.nntime_return retval = new ChemicalChunkerParser.nntime_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal481=null;
        Token TOKEN482=null;

        Object string_literal481_tree=null;
        Object TOKEN482_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:225:7: ( 'NN-TIME' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:225:8: 'NN-TIME' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal481=(Token)match(input,36,FOLLOW_36_in_nntime2384); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal481_tree = (Object)adaptor.create(string_literal481);
            adaptor.addChild(root_0, string_literal481_tree);
            }
            TOKEN482=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntime2386); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN482_tree = (Object)adaptor.create(TOKEN482);
            adaptor.addChild(root_0, TOKEN482_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nntime"

    public static class nnmass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmass"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:1: nnmass : 'NN-MASS' TOKEN ;
    public final ChemicalChunkerParser.nnmass_return nnmass() throws RecognitionException {
        ChemicalChunkerParser.nnmass_return retval = new ChemicalChunkerParser.nnmass_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal483=null;
        Token TOKEN484=null;

        Object string_literal483_tree=null;
        Object TOKEN484_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:7: ( 'NN-MASS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:8: 'NN-MASS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal483=(Token)match(input,37,FOLLOW_37_in_nnmass2391); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal483_tree = (Object)adaptor.create(string_literal483);
            adaptor.addChild(root_0, string_literal483_tree);
            }
            TOKEN484=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmass2393); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN484_tree = (Object)adaptor.create(TOKEN484);
            adaptor.addChild(root_0, TOKEN484_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmass"

    public static class nnmolar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmolar"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:227:1: nnmolar : 'NN-MOLAR' TOKEN ;
    public final ChemicalChunkerParser.nnmolar_return nnmolar() throws RecognitionException {
        ChemicalChunkerParser.nnmolar_return retval = new ChemicalChunkerParser.nnmolar_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal485=null;
        Token TOKEN486=null;

        Object string_literal485_tree=null;
        Object TOKEN486_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:227:8: ( 'NN-MOLAR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:227:10: 'NN-MOLAR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal485=(Token)match(input,38,FOLLOW_38_in_nnmolar2399); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal485_tree = (Object)adaptor.create(string_literal485);
            adaptor.addChild(root_0, string_literal485_tree);
            }
            TOKEN486=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmolar2402); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN486_tree = (Object)adaptor.create(TOKEN486);
            adaptor.addChild(root_0, TOKEN486_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmolar"

    public static class nnamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnamount"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:228:1: nnamount : 'NN-AMOUNT' TOKEN ;
    public final ChemicalChunkerParser.nnamount_return nnamount() throws RecognitionException {
        ChemicalChunkerParser.nnamount_return retval = new ChemicalChunkerParser.nnamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal487=null;
        Token TOKEN488=null;

        Object string_literal487_tree=null;
        Object TOKEN488_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:228:9: ( 'NN-AMOUNT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:228:10: 'NN-AMOUNT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal487=(Token)match(input,39,FOLLOW_39_in_nnamount2407); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal487_tree = (Object)adaptor.create(string_literal487);
            adaptor.addChild(root_0, string_literal487_tree);
            }
            TOKEN488=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnamount2409); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN488_tree = (Object)adaptor.create(TOKEN488);
            adaptor.addChild(root_0, TOKEN488_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnamount"

    public static class nnatmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnatmosphere"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:229:1: nnatmosphere : 'NN-ATMOSPHERE' TOKEN ;
    public final ChemicalChunkerParser.nnatmosphere_return nnatmosphere() throws RecognitionException {
        ChemicalChunkerParser.nnatmosphere_return retval = new ChemicalChunkerParser.nnatmosphere_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal489=null;
        Token TOKEN490=null;

        Object string_literal489_tree=null;
        Object TOKEN490_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:229:13: ( 'NN-ATMOSPHERE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:229:14: 'NN-ATMOSPHERE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal489=(Token)match(input,40,FOLLOW_40_in_nnatmosphere2414); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal489_tree = (Object)adaptor.create(string_literal489);
            adaptor.addChild(root_0, string_literal489_tree);
            }
            TOKEN490=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnatmosphere2416); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN490_tree = (Object)adaptor.create(TOKEN490);
            adaptor.addChild(root_0, TOKEN490_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnatmosphere"

    public static class nneq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nneq"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:230:1: nneq : 'NN-EQ' TOKEN ;
    public final ChemicalChunkerParser.nneq_return nneq() throws RecognitionException {
        ChemicalChunkerParser.nneq_return retval = new ChemicalChunkerParser.nneq_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal491=null;
        Token TOKEN492=null;

        Object string_literal491_tree=null;
        Object TOKEN492_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:230:5: ( 'NN-EQ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:230:6: 'NN-EQ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal491=(Token)match(input,41,FOLLOW_41_in_nneq2421); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal491_tree = (Object)adaptor.create(string_literal491);
            adaptor.addChild(root_0, string_literal491_tree);
            }
            TOKEN492=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nneq2423); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN492_tree = (Object)adaptor.create(TOKEN492);
            adaptor.addChild(root_0, TOKEN492_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nneq"

    public static class nnvol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvol"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:231:1: nnvol : 'NN-VOL' TOKEN ;
    public final ChemicalChunkerParser.nnvol_return nnvol() throws RecognitionException {
        ChemicalChunkerParser.nnvol_return retval = new ChemicalChunkerParser.nnvol_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal493=null;
        Token TOKEN494=null;

        Object string_literal493_tree=null;
        Object TOKEN494_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:231:6: ( 'NN-VOL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:231:7: 'NN-VOL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal493=(Token)match(input,42,FOLLOW_42_in_nnvol2428); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal493_tree = (Object)adaptor.create(string_literal493);
            adaptor.addChild(root_0, string_literal493_tree);
            }
            TOKEN494=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvol2430); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN494_tree = (Object)adaptor.create(TOKEN494);
            adaptor.addChild(root_0, TOKEN494_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnvol"

    public static class nnchementity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchementity"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:232:1: nnchementity : 'NN-CHEMENTITY' TOKEN ;
    public final ChemicalChunkerParser.nnchementity_return nnchementity() throws RecognitionException {
        ChemicalChunkerParser.nnchementity_return retval = new ChemicalChunkerParser.nnchementity_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal495=null;
        Token TOKEN496=null;

        Object string_literal495_tree=null;
        Object TOKEN496_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:232:13: ( 'NN-CHEMENTITY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:232:14: 'NN-CHEMENTITY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal495=(Token)match(input,43,FOLLOW_43_in_nnchementity2435); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal495_tree = (Object)adaptor.create(string_literal495);
            adaptor.addChild(root_0, string_literal495_tree);
            }
            TOKEN496=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchementity2437); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN496_tree = (Object)adaptor.create(TOKEN496);
            adaptor.addChild(root_0, TOKEN496_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnchementity"

    public static class nntemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntemp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:233:1: nntemp : 'NN-TEMP' TOKEN ;
    public final ChemicalChunkerParser.nntemp_return nntemp() throws RecognitionException {
        ChemicalChunkerParser.nntemp_return retval = new ChemicalChunkerParser.nntemp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal497=null;
        Token TOKEN498=null;

        Object string_literal497_tree=null;
        Object TOKEN498_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:233:7: ( 'NN-TEMP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:233:8: 'NN-TEMP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal497=(Token)match(input,44,FOLLOW_44_in_nntemp2442); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal497_tree = (Object)adaptor.create(string_literal497);
            adaptor.addChild(root_0, string_literal497_tree);
            }
            TOKEN498=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntemp2444); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN498_tree = (Object)adaptor.create(TOKEN498);
            adaptor.addChild(root_0, TOKEN498_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nntemp"

    public static class nnflash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnflash"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:234:1: nnflash : 'NN-FLASH' TOKEN ;
    public final ChemicalChunkerParser.nnflash_return nnflash() throws RecognitionException {
        ChemicalChunkerParser.nnflash_return retval = new ChemicalChunkerParser.nnflash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal499=null;
        Token TOKEN500=null;

        Object string_literal499_tree=null;
        Object TOKEN500_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:234:8: ( 'NN-FLASH' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:234:9: 'NN-FLASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal499=(Token)match(input,45,FOLLOW_45_in_nnflash2449); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal499_tree = (Object)adaptor.create(string_literal499);
            adaptor.addChild(root_0, string_literal499_tree);
            }
            TOKEN500=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnflash2451); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN500_tree = (Object)adaptor.create(TOKEN500);
            adaptor.addChild(root_0, TOKEN500_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnflash"

    public static class nngeneral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nngeneral"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:235:1: nngeneral : 'NN-GENERAL' TOKEN ;
    public final ChemicalChunkerParser.nngeneral_return nngeneral() throws RecognitionException {
        ChemicalChunkerParser.nngeneral_return retval = new ChemicalChunkerParser.nngeneral_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal501=null;
        Token TOKEN502=null;

        Object string_literal501_tree=null;
        Object TOKEN502_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:235:10: ( 'NN-GENERAL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:235:11: 'NN-GENERAL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal501=(Token)match(input,46,FOLLOW_46_in_nngeneral2456); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal501_tree = (Object)adaptor.create(string_literal501);
            adaptor.addChild(root_0, string_literal501_tree);
            }
            TOKEN502=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nngeneral2458); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN502_tree = (Object)adaptor.create(TOKEN502);
            adaptor.addChild(root_0, TOKEN502_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nngeneral"

    public static class nnmethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmethod"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:236:1: nnmethod : 'NN-METHOD' TOKEN ;
    public final ChemicalChunkerParser.nnmethod_return nnmethod() throws RecognitionException {
        ChemicalChunkerParser.nnmethod_return retval = new ChemicalChunkerParser.nnmethod_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal503=null;
        Token TOKEN504=null;

        Object string_literal503_tree=null;
        Object TOKEN504_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:236:9: ( 'NN-METHOD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:236:10: 'NN-METHOD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal503=(Token)match(input,47,FOLLOW_47_in_nnmethod2463); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal503_tree = (Object)adaptor.create(string_literal503);
            adaptor.addChild(root_0, string_literal503_tree);
            }
            TOKEN504=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmethod2465); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN504_tree = (Object)adaptor.create(TOKEN504);
            adaptor.addChild(root_0, TOKEN504_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmethod"

    public static class nnpressure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpressure"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:238:1: nnpressure : 'NN-PRESSURE' TOKEN ;
    public final ChemicalChunkerParser.nnpressure_return nnpressure() throws RecognitionException {
        ChemicalChunkerParser.nnpressure_return retval = new ChemicalChunkerParser.nnpressure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal505=null;
        Token TOKEN506=null;

        Object string_literal505_tree=null;
        Object TOKEN506_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:238:11: ( 'NN-PRESSURE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:238:12: 'NN-PRESSURE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal505=(Token)match(input,48,FOLLOW_48_in_nnpressure2471); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal505_tree = (Object)adaptor.create(string_literal505);
            adaptor.addChild(root_0, string_literal505_tree);
            }
            TOKEN506=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpressure2473); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN506_tree = (Object)adaptor.create(TOKEN506);
            adaptor.addChild(root_0, TOKEN506_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnpressure"

    public static class nncolumn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncolumn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:239:1: nncolumn : 'NN-COLUMN' TOKEN ;
    public final ChemicalChunkerParser.nncolumn_return nncolumn() throws RecognitionException {
        ChemicalChunkerParser.nncolumn_return retval = new ChemicalChunkerParser.nncolumn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal507=null;
        Token TOKEN508=null;

        Object string_literal507_tree=null;
        Object TOKEN508_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:239:9: ( 'NN-COLUMN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:239:10: 'NN-COLUMN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal507=(Token)match(input,49,FOLLOW_49_in_nncolumn2478); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal507_tree = (Object)adaptor.create(string_literal507);
            adaptor.addChild(root_0, string_literal507_tree);
            }
            TOKEN508=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncolumn2480); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN508_tree = (Object)adaptor.create(TOKEN508);
            adaptor.addChild(root_0, TOKEN508_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nncolumn"

    public static class nnchromatography_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchromatography"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:240:1: nnchromatography : 'NN-CHROMATOGRAPHY' TOKEN ;
    public final ChemicalChunkerParser.nnchromatography_return nnchromatography() throws RecognitionException {
        ChemicalChunkerParser.nnchromatography_return retval = new ChemicalChunkerParser.nnchromatography_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal509=null;
        Token TOKEN510=null;

        Object string_literal509_tree=null;
        Object TOKEN510_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:240:17: ( 'NN-CHROMATOGRAPHY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:240:18: 'NN-CHROMATOGRAPHY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal509=(Token)match(input,50,FOLLOW_50_in_nnchromatography2485); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal509_tree = (Object)adaptor.create(string_literal509);
            adaptor.addChild(root_0, string_literal509_tree);
            }
            TOKEN510=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchromatography2487); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN510_tree = (Object)adaptor.create(TOKEN510);
            adaptor.addChild(root_0, TOKEN510_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnchromatography"

    public static class nnvacuum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvacuum"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:241:1: nnvacuum : 'NN-VACUUM' TOKEN ;
    public final ChemicalChunkerParser.nnvacuum_return nnvacuum() throws RecognitionException {
        ChemicalChunkerParser.nnvacuum_return retval = new ChemicalChunkerParser.nnvacuum_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal511=null;
        Token TOKEN512=null;

        Object string_literal511_tree=null;
        Object TOKEN512_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:241:9: ( 'NN-VACUUM' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:241:10: 'NN-VACUUM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal511=(Token)match(input,51,FOLLOW_51_in_nnvacuum2492); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal511_tree = (Object)adaptor.create(string_literal511);
            adaptor.addChild(root_0, string_literal511_tree);
            }
            TOKEN512=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvacuum2494); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN512_tree = (Object)adaptor.create(TOKEN512);
            adaptor.addChild(root_0, TOKEN512_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnvacuum"

    public static class nncycle_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncycle"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:242:1: nncycle : 'NN-CYCLE' TOKEN ;
    public final ChemicalChunkerParser.nncycle_return nncycle() throws RecognitionException {
        ChemicalChunkerParser.nncycle_return retval = new ChemicalChunkerParser.nncycle_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal513=null;
        Token TOKEN514=null;

        Object string_literal513_tree=null;
        Object TOKEN514_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:242:8: ( 'NN-CYCLE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:242:9: 'NN-CYCLE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal513=(Token)match(input,52,FOLLOW_52_in_nncycle2499); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal513_tree = (Object)adaptor.create(string_literal513);
            adaptor.addChild(root_0, string_literal513_tree);
            }
            TOKEN514=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncycle2501); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN514_tree = (Object)adaptor.create(TOKEN514);
            adaptor.addChild(root_0, TOKEN514_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nncycle"

    public static class nntimes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntimes"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:243:1: nntimes : 'NN-TIMES' TOKEN ;
    public final ChemicalChunkerParser.nntimes_return nntimes() throws RecognitionException {
        ChemicalChunkerParser.nntimes_return retval = new ChemicalChunkerParser.nntimes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal515=null;
        Token TOKEN516=null;

        Object string_literal515_tree=null;
        Object TOKEN516_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:243:8: ( 'NN-TIMES' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:243:9: 'NN-TIMES' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal515=(Token)match(input,53,FOLLOW_53_in_nntimes2506); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal515_tree = (Object)adaptor.create(string_literal515);
            adaptor.addChild(root_0, string_literal515_tree);
            }
            TOKEN516=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntimes2508); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN516_tree = (Object)adaptor.create(TOKEN516);
            adaptor.addChild(root_0, TOKEN516_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nntimes"

    public static class oscarcm_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcm"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:246:1: oscarcm : 'OSCAR-CM' TOKEN ;
    public final ChemicalChunkerParser.oscarcm_return oscarcm() throws RecognitionException {
        ChemicalChunkerParser.oscarcm_return retval = new ChemicalChunkerParser.oscarcm_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal517=null;
        Token TOKEN518=null;

        Object string_literal517_tree=null;
        Object TOKEN518_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:246:8: ( 'OSCAR-CM' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:246:9: 'OSCAR-CM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal517=(Token)match(input,54,FOLLOW_54_in_oscarcm2515); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal517_tree = (Object)adaptor.create(string_literal517);
            adaptor.addChild(root_0, string_literal517_tree);
            }
            TOKEN518=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcm2517); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN518_tree = (Object)adaptor.create(TOKEN518);
            adaptor.addChild(root_0, TOKEN518_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcm"

    public static class vbuse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbuse"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:249:1: vbuse : 'VB-USE' TOKEN ;
    public final ChemicalChunkerParser.vbuse_return vbuse() throws RecognitionException {
        ChemicalChunkerParser.vbuse_return retval = new ChemicalChunkerParser.vbuse_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal519=null;
        Token TOKEN520=null;

        Object string_literal519_tree=null;
        Object TOKEN520_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:249:6: ( 'VB-USE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:249:7: 'VB-USE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal519=(Token)match(input,55,FOLLOW_55_in_vbuse2524); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal519_tree = (Object)adaptor.create(string_literal519);
            adaptor.addChild(root_0, string_literal519_tree);
            }
            TOKEN520=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbuse2526); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN520_tree = (Object)adaptor.create(TOKEN520);
            adaptor.addChild(root_0, TOKEN520_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbuse"

    public static class vbchange_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbchange"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:250:1: vbchange : 'VB-CHANGE' TOKEN ;
    public final ChemicalChunkerParser.vbchange_return vbchange() throws RecognitionException {
        ChemicalChunkerParser.vbchange_return retval = new ChemicalChunkerParser.vbchange_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal521=null;
        Token TOKEN522=null;

        Object string_literal521_tree=null;
        Object TOKEN522_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:250:9: ( 'VB-CHANGE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:250:10: 'VB-CHANGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal521=(Token)match(input,56,FOLLOW_56_in_vbchange2531); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal521_tree = (Object)adaptor.create(string_literal521);
            adaptor.addChild(root_0, string_literal521_tree);
            }
            TOKEN522=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbchange2533); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN522_tree = (Object)adaptor.create(TOKEN522);
            adaptor.addChild(root_0, TOKEN522_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbchange"

    public static class vbsubmerge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubmerge"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:251:1: vbsubmerge : 'VB-SUBMERGE' TOKEN ;
    public final ChemicalChunkerParser.vbsubmerge_return vbsubmerge() throws RecognitionException {
        ChemicalChunkerParser.vbsubmerge_return retval = new ChemicalChunkerParser.vbsubmerge_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal523=null;
        Token TOKEN524=null;

        Object string_literal523_tree=null;
        Object TOKEN524_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:251:11: ( 'VB-SUBMERGE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:251:12: 'VB-SUBMERGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal523=(Token)match(input,57,FOLLOW_57_in_vbsubmerge2538); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal523_tree = (Object)adaptor.create(string_literal523);
            adaptor.addChild(root_0, string_literal523_tree);
            }
            TOKEN524=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubmerge2540); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN524_tree = (Object)adaptor.create(TOKEN524);
            adaptor.addChild(root_0, TOKEN524_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsubmerge"

    public static class vbsubject_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubject"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:252:1: vbsubject : 'VB-SUBJECT' TOKEN ;
    public final ChemicalChunkerParser.vbsubject_return vbsubject() throws RecognitionException {
        ChemicalChunkerParser.vbsubject_return retval = new ChemicalChunkerParser.vbsubject_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal525=null;
        Token TOKEN526=null;

        Object string_literal525_tree=null;
        Object TOKEN526_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:252:10: ( 'VB-SUBJECT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:252:11: 'VB-SUBJECT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal525=(Token)match(input,58,FOLLOW_58_in_vbsubject2545); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal525_tree = (Object)adaptor.create(string_literal525);
            adaptor.addChild(root_0, string_literal525_tree);
            }
            TOKEN526=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubject2547); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN526_tree = (Object)adaptor.create(TOKEN526);
            adaptor.addChild(root_0, TOKEN526_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsubject"

    public static class nnadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnadd"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:255:1: nnadd : 'NN-ADD' TOKEN ;
    public final ChemicalChunkerParser.nnadd_return nnadd() throws RecognitionException {
        ChemicalChunkerParser.nnadd_return retval = new ChemicalChunkerParser.nnadd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal527=null;
        Token TOKEN528=null;

        Object string_literal527_tree=null;
        Object TOKEN528_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:255:6: ( 'NN-ADD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:255:7: 'NN-ADD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal527=(Token)match(input,59,FOLLOW_59_in_nnadd2554); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal527_tree = (Object)adaptor.create(string_literal527);
            adaptor.addChild(root_0, string_literal527_tree);
            }
            TOKEN528=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnadd2556); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN528_tree = (Object)adaptor.create(TOKEN528);
            adaptor.addChild(root_0, TOKEN528_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnadd"

    public static class nnmixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmixture"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:256:1: nnmixture : 'NN-MIXTURE' TOKEN ;
    public final ChemicalChunkerParser.nnmixture_return nnmixture() throws RecognitionException {
        ChemicalChunkerParser.nnmixture_return retval = new ChemicalChunkerParser.nnmixture_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal529=null;
        Token TOKEN530=null;

        Object string_literal529_tree=null;
        Object TOKEN530_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:256:10: ( 'NN-MIXTURE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:256:11: 'NN-MIXTURE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal529=(Token)match(input,60,FOLLOW_60_in_nnmixture2561); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal529_tree = (Object)adaptor.create(string_literal529);
            adaptor.addChild(root_0, string_literal529_tree);
            }
            TOKEN530=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmixture2563); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN530_tree = (Object)adaptor.create(TOKEN530);
            adaptor.addChild(root_0, TOKEN530_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmixture"

    public static class vbadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbadd"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:257:1: vbadd : 'VB-ADD' TOKEN ;
    public final ChemicalChunkerParser.vbadd_return vbadd() throws RecognitionException {
        ChemicalChunkerParser.vbadd_return retval = new ChemicalChunkerParser.vbadd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal531=null;
        Token TOKEN532=null;

        Object string_literal531_tree=null;
        Object TOKEN532_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:257:6: ( 'VB-ADD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:257:7: 'VB-ADD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal531=(Token)match(input,61,FOLLOW_61_in_vbadd2568); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal531_tree = (Object)adaptor.create(string_literal531);
            adaptor.addChild(root_0, string_literal531_tree);
            }
            TOKEN532=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbadd2570); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN532_tree = (Object)adaptor.create(TOKEN532);
            adaptor.addChild(root_0, TOKEN532_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbadd"

    public static class vbcharge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcharge"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:258:1: vbcharge : 'VB-CHARGE' TOKEN ;
    public final ChemicalChunkerParser.vbcharge_return vbcharge() throws RecognitionException {
        ChemicalChunkerParser.vbcharge_return retval = new ChemicalChunkerParser.vbcharge_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal533=null;
        Token TOKEN534=null;

        Object string_literal533_tree=null;
        Object TOKEN534_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:258:9: ( 'VB-CHARGE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:258:10: 'VB-CHARGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal533=(Token)match(input,62,FOLLOW_62_in_vbcharge2575); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal533_tree = (Object)adaptor.create(string_literal533);
            adaptor.addChild(root_0, string_literal533_tree);
            }
            TOKEN534=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcharge2577); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN534_tree = (Object)adaptor.create(TOKEN534);
            adaptor.addChild(root_0, TOKEN534_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbcharge"

    public static class vbcontain_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcontain"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:259:1: vbcontain : 'VB-CONTAIN' TOKEN ;
    public final ChemicalChunkerParser.vbcontain_return vbcontain() throws RecognitionException {
        ChemicalChunkerParser.vbcontain_return retval = new ChemicalChunkerParser.vbcontain_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal535=null;
        Token TOKEN536=null;

        Object string_literal535_tree=null;
        Object TOKEN536_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:259:10: ( 'VB-CONTAIN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:259:11: 'VB-CONTAIN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal535=(Token)match(input,63,FOLLOW_63_in_vbcontain2582); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal535_tree = (Object)adaptor.create(string_literal535);
            adaptor.addChild(root_0, string_literal535_tree);
            }
            TOKEN536=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcontain2584); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN536_tree = (Object)adaptor.create(TOKEN536);
            adaptor.addChild(root_0, TOKEN536_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbcontain"

    public static class vbdrop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdrop"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:260:1: vbdrop : 'VB-DROP' TOKEN ;
    public final ChemicalChunkerParser.vbdrop_return vbdrop() throws RecognitionException {
        ChemicalChunkerParser.vbdrop_return retval = new ChemicalChunkerParser.vbdrop_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal537=null;
        Token TOKEN538=null;

        Object string_literal537_tree=null;
        Object TOKEN538_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:260:7: ( 'VB-DROP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:260:8: 'VB-DROP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal537=(Token)match(input,64,FOLLOW_64_in_vbdrop2589); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal537_tree = (Object)adaptor.create(string_literal537);
            adaptor.addChild(root_0, string_literal537_tree);
            }
            TOKEN538=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdrop2591); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN538_tree = (Object)adaptor.create(TOKEN538);
            adaptor.addChild(root_0, TOKEN538_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdrop"

    public static class vbfill_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfill"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:261:1: vbfill : 'VB-FILL' TOKEN ;
    public final ChemicalChunkerParser.vbfill_return vbfill() throws RecognitionException {
        ChemicalChunkerParser.vbfill_return retval = new ChemicalChunkerParser.vbfill_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal539=null;
        Token TOKEN540=null;

        Object string_literal539_tree=null;
        Object TOKEN540_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:261:7: ( 'VB-FILL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:261:8: 'VB-FILL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal539=(Token)match(input,65,FOLLOW_65_in_vbfill2596); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal539_tree = (Object)adaptor.create(string_literal539);
            adaptor.addChild(root_0, string_literal539_tree);
            }
            TOKEN540=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfill2598); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN540_tree = (Object)adaptor.create(TOKEN540);
            adaptor.addChild(root_0, TOKEN540_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbfill"

    public static class vbsuspend_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsuspend"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:262:1: vbsuspend : 'VB-SUSPEND' TOKEN ;
    public final ChemicalChunkerParser.vbsuspend_return vbsuspend() throws RecognitionException {
        ChemicalChunkerParser.vbsuspend_return retval = new ChemicalChunkerParser.vbsuspend_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal541=null;
        Token TOKEN542=null;

        Object string_literal541_tree=null;
        Object TOKEN542_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:262:10: ( 'VB-SUSPEND' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:262:11: 'VB-SUSPEND' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal541=(Token)match(input,66,FOLLOW_66_in_vbsuspend2603); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal541_tree = (Object)adaptor.create(string_literal541);
            adaptor.addChild(root_0, string_literal541_tree);
            }
            TOKEN542=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsuspend2605); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN542_tree = (Object)adaptor.create(TOKEN542);
            adaptor.addChild(root_0, TOKEN542_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsuspend"

    public static class vbtreat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbtreat"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:263:1: vbtreat : 'VB-TREAT' TOKEN ;
    public final ChemicalChunkerParser.vbtreat_return vbtreat() throws RecognitionException {
        ChemicalChunkerParser.vbtreat_return retval = new ChemicalChunkerParser.vbtreat_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal543=null;
        Token TOKEN544=null;

        Object string_literal543_tree=null;
        Object TOKEN544_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:263:8: ( 'VB-TREAT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:263:9: 'VB-TREAT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal543=(Token)match(input,67,FOLLOW_67_in_vbtreat2610); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal543_tree = (Object)adaptor.create(string_literal543);
            adaptor.addChild(root_0, string_literal543_tree);
            }
            TOKEN544=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbtreat2612); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN544_tree = (Object)adaptor.create(TOKEN544);
            adaptor.addChild(root_0, TOKEN544_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbtreat"

    public static class vbapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbapparatus"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:266:1: vbapparatus : 'VB-APPARATUS' TOKEN ;
    public final ChemicalChunkerParser.vbapparatus_return vbapparatus() throws RecognitionException {
        ChemicalChunkerParser.vbapparatus_return retval = new ChemicalChunkerParser.vbapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal545=null;
        Token TOKEN546=null;

        Object string_literal545_tree=null;
        Object TOKEN546_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:266:12: ( 'VB-APPARATUS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:266:13: 'VB-APPARATUS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal545=(Token)match(input,68,FOLLOW_68_in_vbapparatus2619); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal545_tree = (Object)adaptor.create(string_literal545);
            adaptor.addChild(root_0, string_literal545_tree);
            }
            TOKEN546=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbapparatus2621); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN546_tree = (Object)adaptor.create(TOKEN546);
            adaptor.addChild(root_0, TOKEN546_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbapparatus"

    public static class nnapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnapparatus"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:267:1: nnapparatus : 'NN-APPARATUS' TOKEN ;
    public final ChemicalChunkerParser.nnapparatus_return nnapparatus() throws RecognitionException {
        ChemicalChunkerParser.nnapparatus_return retval = new ChemicalChunkerParser.nnapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal547=null;
        Token TOKEN548=null;

        Object string_literal547_tree=null;
        Object TOKEN548_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:267:12: ( 'NN-APPARATUS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:267:13: 'NN-APPARATUS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal547=(Token)match(input,69,FOLLOW_69_in_nnapparatus2626); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal547_tree = (Object)adaptor.create(string_literal547);
            adaptor.addChild(root_0, string_literal547_tree);
            }
            TOKEN548=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnapparatus2628); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN548_tree = (Object)adaptor.create(TOKEN548);
            adaptor.addChild(root_0, TOKEN548_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnapparatus"

    public static class vbconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbconcentrate"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:270:1: vbconcentrate : 'VB-CONCENTRATE' TOKEN ;
    public final ChemicalChunkerParser.vbconcentrate_return vbconcentrate() throws RecognitionException {
        ChemicalChunkerParser.vbconcentrate_return retval = new ChemicalChunkerParser.vbconcentrate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal549=null;
        Token TOKEN550=null;

        Object string_literal549_tree=null;
        Object TOKEN550_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:270:14: ( 'VB-CONCENTRATE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:270:15: 'VB-CONCENTRATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal549=(Token)match(input,70,FOLLOW_70_in_vbconcentrate2635); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal549_tree = (Object)adaptor.create(string_literal549);
            adaptor.addChild(root_0, string_literal549_tree);
            }
            TOKEN550=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbconcentrate2637); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN550_tree = (Object)adaptor.create(TOKEN550);
            adaptor.addChild(root_0, TOKEN550_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbconcentrate"

    public static class nnconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnconcentrate"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:271:1: nnconcentrate : 'NN-CONCENTRATE' TOKEN ;
    public final ChemicalChunkerParser.nnconcentrate_return nnconcentrate() throws RecognitionException {
        ChemicalChunkerParser.nnconcentrate_return retval = new ChemicalChunkerParser.nnconcentrate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal551=null;
        Token TOKEN552=null;

        Object string_literal551_tree=null;
        Object TOKEN552_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:271:14: ( 'NN-CONCENTRATE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:271:15: 'NN-CONCENTRATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal551=(Token)match(input,71,FOLLOW_71_in_nnconcentrate2642); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal551_tree = (Object)adaptor.create(string_literal551);
            adaptor.addChild(root_0, string_literal551_tree);
            }
            TOKEN552=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnconcentrate2644); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN552_tree = (Object)adaptor.create(TOKEN552);
            adaptor.addChild(root_0, TOKEN552_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnconcentrate"

    public static class vbcool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcool"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:274:1: vbcool : 'VB-COOL' TOKEN ;
    public final ChemicalChunkerParser.vbcool_return vbcool() throws RecognitionException {
        ChemicalChunkerParser.vbcool_return retval = new ChemicalChunkerParser.vbcool_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal553=null;
        Token TOKEN554=null;

        Object string_literal553_tree=null;
        Object TOKEN554_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:274:7: ( 'VB-COOL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:274:8: 'VB-COOL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal553=(Token)match(input,72,FOLLOW_72_in_vbcool2651); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal553_tree = (Object)adaptor.create(string_literal553);
            adaptor.addChild(root_0, string_literal553_tree);
            }
            TOKEN554=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcool2653); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN554_tree = (Object)adaptor.create(TOKEN554);
            adaptor.addChild(root_0, TOKEN554_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbcool"

    public static class vbdegass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdegass"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:277:1: vbdegass : 'VB-DEGASS' TOKEN ;
    public final ChemicalChunkerParser.vbdegass_return vbdegass() throws RecognitionException {
        ChemicalChunkerParser.vbdegass_return retval = new ChemicalChunkerParser.vbdegass_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal555=null;
        Token TOKEN556=null;

        Object string_literal555_tree=null;
        Object TOKEN556_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:277:9: ( 'VB-DEGASS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:277:10: 'VB-DEGASS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal555=(Token)match(input,73,FOLLOW_73_in_vbdegass2660); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal555_tree = (Object)adaptor.create(string_literal555);
            adaptor.addChild(root_0, string_literal555_tree);
            }
            TOKEN556=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdegass2662); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN556_tree = (Object)adaptor.create(TOKEN556);
            adaptor.addChild(root_0, TOKEN556_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdegass"

    public static class vbdissolve_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdissolve"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:280:1: vbdissolve : 'VB-DISSOLVE' TOKEN ;
    public final ChemicalChunkerParser.vbdissolve_return vbdissolve() throws RecognitionException {
        ChemicalChunkerParser.vbdissolve_return retval = new ChemicalChunkerParser.vbdissolve_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal557=null;
        Token TOKEN558=null;

        Object string_literal557_tree=null;
        Object TOKEN558_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:280:11: ( 'VB-DISSOLVE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:280:12: 'VB-DISSOLVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal557=(Token)match(input,74,FOLLOW_74_in_vbdissolve2669); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal557_tree = (Object)adaptor.create(string_literal557);
            adaptor.addChild(root_0, string_literal557_tree);
            }
            TOKEN558=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdissolve2671); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN558_tree = (Object)adaptor.create(TOKEN558);
            adaptor.addChild(root_0, TOKEN558_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdissolve"

    public static class vbdry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdry"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:283:1: vbdry : 'VB-DRY' TOKEN ;
    public final ChemicalChunkerParser.vbdry_return vbdry() throws RecognitionException {
        ChemicalChunkerParser.vbdry_return retval = new ChemicalChunkerParser.vbdry_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal559=null;
        Token TOKEN560=null;

        Object string_literal559_tree=null;
        Object TOKEN560_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:283:6: ( 'VB-DRY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:283:7: 'VB-DRY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal559=(Token)match(input,75,FOLLOW_75_in_vbdry2678); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal559_tree = (Object)adaptor.create(string_literal559);
            adaptor.addChild(root_0, string_literal559_tree);
            }
            TOKEN560=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdry2680); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN560_tree = (Object)adaptor.create(TOKEN560);
            adaptor.addChild(root_0, TOKEN560_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdry"

    public static class nndry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nndry"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:284:1: nndry : 'NN-DRY' TOKEN ;
    public final ChemicalChunkerParser.nndry_return nndry() throws RecognitionException {
        ChemicalChunkerParser.nndry_return retval = new ChemicalChunkerParser.nndry_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal561=null;
        Token TOKEN562=null;

        Object string_literal561_tree=null;
        Object TOKEN562_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:284:6: ( 'NN-DRY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:284:7: 'NN-DRY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal561=(Token)match(input,76,FOLLOW_76_in_nndry2685); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal561_tree = (Object)adaptor.create(string_literal561);
            adaptor.addChild(root_0, string_literal561_tree);
            }
            TOKEN562=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nndry2687); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN562_tree = (Object)adaptor.create(TOKEN562);
            adaptor.addChild(root_0, TOKEN562_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nndry"

    public static class vbextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbextract"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:287:1: vbextract : 'VB-EXTRACT' TOKEN ;
    public final ChemicalChunkerParser.vbextract_return vbextract() throws RecognitionException {
        ChemicalChunkerParser.vbextract_return retval = new ChemicalChunkerParser.vbextract_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal563=null;
        Token TOKEN564=null;

        Object string_literal563_tree=null;
        Object TOKEN564_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:287:10: ( 'VB-EXTRACT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:287:11: 'VB-EXTRACT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal563=(Token)match(input,77,FOLLOW_77_in_vbextract2694); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal563_tree = (Object)adaptor.create(string_literal563);
            adaptor.addChild(root_0, string_literal563_tree);
            }
            TOKEN564=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbextract2696); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN564_tree = (Object)adaptor.create(TOKEN564);
            adaptor.addChild(root_0, TOKEN564_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbextract"

    public static class nnextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnextract"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:288:1: nnextract : 'NN-EXTRACT' TOKEN ;
    public final ChemicalChunkerParser.nnextract_return nnextract() throws RecognitionException {
        ChemicalChunkerParser.nnextract_return retval = new ChemicalChunkerParser.nnextract_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal565=null;
        Token TOKEN566=null;

        Object string_literal565_tree=null;
        Object TOKEN566_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:288:10: ( 'NN-EXTRACT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:288:11: 'NN-EXTRACT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal565=(Token)match(input,78,FOLLOW_78_in_nnextract2701); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal565_tree = (Object)adaptor.create(string_literal565);
            adaptor.addChild(root_0, string_literal565_tree);
            }
            TOKEN566=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnextract2703); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN566_tree = (Object)adaptor.create(TOKEN566);
            adaptor.addChild(root_0, TOKEN566_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnextract"

    public static class vbfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfilter"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:291:1: vbfilter : 'VB-FILTER' TOKEN ;
    public final ChemicalChunkerParser.vbfilter_return vbfilter() throws RecognitionException {
        ChemicalChunkerParser.vbfilter_return retval = new ChemicalChunkerParser.vbfilter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal567=null;
        Token TOKEN568=null;

        Object string_literal567_tree=null;
        Object TOKEN568_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:291:9: ( 'VB-FILTER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:291:10: 'VB-FILTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal567=(Token)match(input,79,FOLLOW_79_in_vbfilter2710); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal567_tree = (Object)adaptor.create(string_literal567);
            adaptor.addChild(root_0, string_literal567_tree);
            }
            TOKEN568=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfilter2712); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN568_tree = (Object)adaptor.create(TOKEN568);
            adaptor.addChild(root_0, TOKEN568_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbfilter"

    public static class nnfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnfilter"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:292:1: nnfilter : 'NN-FILTER' TOKEN ;
    public final ChemicalChunkerParser.nnfilter_return nnfilter() throws RecognitionException {
        ChemicalChunkerParser.nnfilter_return retval = new ChemicalChunkerParser.nnfilter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal569=null;
        Token TOKEN570=null;

        Object string_literal569_tree=null;
        Object TOKEN570_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:292:9: ( 'NN-FILTER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:292:10: 'NN-FILTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal569=(Token)match(input,80,FOLLOW_80_in_nnfilter2717); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal569_tree = (Object)adaptor.create(string_literal569);
            adaptor.addChild(root_0, string_literal569_tree);
            }
            TOKEN570=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnfilter2719); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN570_tree = (Object)adaptor.create(TOKEN570);
            adaptor.addChild(root_0, TOKEN570_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnfilter"

    public static class vbheat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbheat"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:295:1: vbheat : 'VB-HEAT' TOKEN ;
    public final ChemicalChunkerParser.vbheat_return vbheat() throws RecognitionException {
        ChemicalChunkerParser.vbheat_return retval = new ChemicalChunkerParser.vbheat_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal571=null;
        Token TOKEN572=null;

        Object string_literal571_tree=null;
        Object TOKEN572_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:295:7: ( 'VB-HEAT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:295:8: 'VB-HEAT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal571=(Token)match(input,81,FOLLOW_81_in_vbheat2726); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal571_tree = (Object)adaptor.create(string_literal571);
            adaptor.addChild(root_0, string_literal571_tree);
            }
            TOKEN572=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbheat2728); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN572_tree = (Object)adaptor.create(TOKEN572);
            adaptor.addChild(root_0, TOKEN572_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbheat"

    public static class vbincrease_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbincrease"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:296:1: vbincrease : 'VB-INCREASE' TOKEN ;
    public final ChemicalChunkerParser.vbincrease_return vbincrease() throws RecognitionException {
        ChemicalChunkerParser.vbincrease_return retval = new ChemicalChunkerParser.vbincrease_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal573=null;
        Token TOKEN574=null;

        Object string_literal573_tree=null;
        Object TOKEN574_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:296:11: ( 'VB-INCREASE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:296:12: 'VB-INCREASE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal573=(Token)match(input,82,FOLLOW_82_in_vbincrease2733); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal573_tree = (Object)adaptor.create(string_literal573);
            adaptor.addChild(root_0, string_literal573_tree);
            }
            TOKEN574=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbincrease2735); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN574_tree = (Object)adaptor.create(TOKEN574);
            adaptor.addChild(root_0, TOKEN574_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbincrease"

    public static class vbpartition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpartition"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:299:1: vbpartition : 'VB-PARTITION' TOKEN ;
    public final ChemicalChunkerParser.vbpartition_return vbpartition() throws RecognitionException {
        ChemicalChunkerParser.vbpartition_return retval = new ChemicalChunkerParser.vbpartition_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal575=null;
        Token TOKEN576=null;

        Object string_literal575_tree=null;
        Object TOKEN576_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:299:12: ( 'VB-PARTITION' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:299:13: 'VB-PARTITION' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal575=(Token)match(input,83,FOLLOW_83_in_vbpartition2742); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal575_tree = (Object)adaptor.create(string_literal575);
            adaptor.addChild(root_0, string_literal575_tree);
            }
            TOKEN576=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpartition2744); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN576_tree = (Object)adaptor.create(TOKEN576);
            adaptor.addChild(root_0, TOKEN576_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbpartition"

    public static class vbprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbprecipitate"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:302:1: vbprecipitate : 'VB-PRECIPITATE' TOKEN ;
    public final ChemicalChunkerParser.vbprecipitate_return vbprecipitate() throws RecognitionException {
        ChemicalChunkerParser.vbprecipitate_return retval = new ChemicalChunkerParser.vbprecipitate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal577=null;
        Token TOKEN578=null;

        Object string_literal577_tree=null;
        Object TOKEN578_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:302:14: ( 'VB-PRECIPITATE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:302:15: 'VB-PRECIPITATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal577=(Token)match(input,84,FOLLOW_84_in_vbprecipitate2751); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal577_tree = (Object)adaptor.create(string_literal577);
            adaptor.addChild(root_0, string_literal577_tree);
            }
            TOKEN578=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbprecipitate2753); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN578_tree = (Object)adaptor.create(TOKEN578);
            adaptor.addChild(root_0, TOKEN578_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbprecipitate"

    public static class nnprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnprecipitate"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:303:1: nnprecipitate : 'NN-PRECIPITATE' TOKEN ;
    public final ChemicalChunkerParser.nnprecipitate_return nnprecipitate() throws RecognitionException {
        ChemicalChunkerParser.nnprecipitate_return retval = new ChemicalChunkerParser.nnprecipitate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal579=null;
        Token TOKEN580=null;

        Object string_literal579_tree=null;
        Object TOKEN580_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:303:14: ( 'NN-PRECIPITATE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:303:15: 'NN-PRECIPITATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal579=(Token)match(input,85,FOLLOW_85_in_nnprecipitate2758); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal579_tree = (Object)adaptor.create(string_literal579);
            adaptor.addChild(root_0, string_literal579_tree);
            }
            TOKEN580=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnprecipitate2760); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN580_tree = (Object)adaptor.create(TOKEN580);
            adaptor.addChild(root_0, TOKEN580_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnprecipitate"

    public static class vbpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpurify"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:306:1: vbpurify : 'VB-PURIFY' TOKEN ;
    public final ChemicalChunkerParser.vbpurify_return vbpurify() throws RecognitionException {
        ChemicalChunkerParser.vbpurify_return retval = new ChemicalChunkerParser.vbpurify_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal581=null;
        Token TOKEN582=null;

        Object string_literal581_tree=null;
        Object TOKEN582_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:306:9: ( 'VB-PURIFY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:306:10: 'VB-PURIFY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal581=(Token)match(input,86,FOLLOW_86_in_vbpurify2767); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal581_tree = (Object)adaptor.create(string_literal581);
            adaptor.addChild(root_0, string_literal581_tree);
            }
            TOKEN582=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpurify2769); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN582_tree = (Object)adaptor.create(TOKEN582);
            adaptor.addChild(root_0, TOKEN582_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbpurify"

    public static class nnpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpurify"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:307:1: nnpurify : 'NN-PURIFY' TOKEN ;
    public final ChemicalChunkerParser.nnpurify_return nnpurify() throws RecognitionException {
        ChemicalChunkerParser.nnpurify_return retval = new ChemicalChunkerParser.nnpurify_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal583=null;
        Token TOKEN584=null;

        Object string_literal583_tree=null;
        Object TOKEN584_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:307:9: ( 'NN-PURIFY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:307:10: 'NN-PURIFY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal583=(Token)match(input,87,FOLLOW_87_in_nnpurify2774); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal583_tree = (Object)adaptor.create(string_literal583);
            adaptor.addChild(root_0, string_literal583_tree);
            }
            TOKEN584=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpurify2776); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN584_tree = (Object)adaptor.create(TOKEN584);
            adaptor.addChild(root_0, TOKEN584_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnpurify"

    public static class vbquench_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbquench"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:310:1: vbquench : 'VB-QUENCH' TOKEN ;
    public final ChemicalChunkerParser.vbquench_return vbquench() throws RecognitionException {
        ChemicalChunkerParser.vbquench_return retval = new ChemicalChunkerParser.vbquench_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal585=null;
        Token TOKEN586=null;

        Object string_literal585_tree=null;
        Object TOKEN586_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:310:9: ( 'VB-QUENCH' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:310:10: 'VB-QUENCH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal585=(Token)match(input,88,FOLLOW_88_in_vbquench2783); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal585_tree = (Object)adaptor.create(string_literal585);
            adaptor.addChild(root_0, string_literal585_tree);
            }
            TOKEN586=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbquench2785); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN586_tree = (Object)adaptor.create(TOKEN586);
            adaptor.addChild(root_0, TOKEN586_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbquench"

    public static class vbrecover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbrecover"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:313:1: vbrecover : 'VB-RECOVER' TOKEN ;
    public final ChemicalChunkerParser.vbrecover_return vbrecover() throws RecognitionException {
        ChemicalChunkerParser.vbrecover_return retval = new ChemicalChunkerParser.vbrecover_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal587=null;
        Token TOKEN588=null;

        Object string_literal587_tree=null;
        Object TOKEN588_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:313:10: ( 'VB-RECOVER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:313:11: 'VB-RECOVER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal587=(Token)match(input,89,FOLLOW_89_in_vbrecover2792); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal587_tree = (Object)adaptor.create(string_literal587);
            adaptor.addChild(root_0, string_literal587_tree);
            }
            TOKEN588=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbrecover2794); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN588_tree = (Object)adaptor.create(TOKEN588);
            adaptor.addChild(root_0, TOKEN588_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbrecover"

    public static class vbremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbremove"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:316:1: vbremove : 'VB-REMOVE' TOKEN ;
    public final ChemicalChunkerParser.vbremove_return vbremove() throws RecognitionException {
        ChemicalChunkerParser.vbremove_return retval = new ChemicalChunkerParser.vbremove_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal589=null;
        Token TOKEN590=null;

        Object string_literal589_tree=null;
        Object TOKEN590_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:316:9: ( 'VB-REMOVE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:316:10: 'VB-REMOVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal589=(Token)match(input,90,FOLLOW_90_in_vbremove2801); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal589_tree = (Object)adaptor.create(string_literal589);
            adaptor.addChild(root_0, string_literal589_tree);
            }
            TOKEN590=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbremove2803); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN590_tree = (Object)adaptor.create(TOKEN590);
            adaptor.addChild(root_0, TOKEN590_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbremove"

    public static class nnremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnremove"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:317:1: nnremove : 'NN-REMOVE' TOKEN ;
    public final ChemicalChunkerParser.nnremove_return nnremove() throws RecognitionException {
        ChemicalChunkerParser.nnremove_return retval = new ChemicalChunkerParser.nnremove_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal591=null;
        Token TOKEN592=null;

        Object string_literal591_tree=null;
        Object TOKEN592_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:317:9: ( 'NN-REMOVE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:317:10: 'NN-REMOVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal591=(Token)match(input,91,FOLLOW_91_in_nnremove2808); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal591_tree = (Object)adaptor.create(string_literal591);
            adaptor.addChild(root_0, string_literal591_tree);
            }
            TOKEN592=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnremove2810); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN592_tree = (Object)adaptor.create(TOKEN592);
            adaptor.addChild(root_0, TOKEN592_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnremove"

    public static class vbstir_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbstir"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:320:1: vbstir : 'VB-STIR' TOKEN ;
    public final ChemicalChunkerParser.vbstir_return vbstir() throws RecognitionException {
        ChemicalChunkerParser.vbstir_return retval = new ChemicalChunkerParser.vbstir_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal593=null;
        Token TOKEN594=null;

        Object string_literal593_tree=null;
        Object TOKEN594_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:320:7: ( 'VB-STIR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:320:8: 'VB-STIR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal593=(Token)match(input,92,FOLLOW_92_in_vbstir2817); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal593_tree = (Object)adaptor.create(string_literal593);
            adaptor.addChild(root_0, string_literal593_tree);
            }
            TOKEN594=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbstir2819); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN594_tree = (Object)adaptor.create(TOKEN594);
            adaptor.addChild(root_0, TOKEN594_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbstir"

    public static class vbsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsynthesize"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:323:1: vbsynthesize : 'VB-SYNTHESIZE' TOKEN ;
    public final ChemicalChunkerParser.vbsynthesize_return vbsynthesize() throws RecognitionException {
        ChemicalChunkerParser.vbsynthesize_return retval = new ChemicalChunkerParser.vbsynthesize_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal595=null;
        Token TOKEN596=null;

        Object string_literal595_tree=null;
        Object TOKEN596_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:323:13: ( 'VB-SYNTHESIZE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:323:14: 'VB-SYNTHESIZE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal595=(Token)match(input,93,FOLLOW_93_in_vbsynthesize2826); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal595_tree = (Object)adaptor.create(string_literal595);
            adaptor.addChild(root_0, string_literal595_tree);
            }
            TOKEN596=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsynthesize2828); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN596_tree = (Object)adaptor.create(TOKEN596);
            adaptor.addChild(root_0, TOKEN596_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsynthesize"

    public static class nnsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnsynthesize"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:324:1: nnsynthesize : 'NN-SYNTHESIZE' TOKEN ;
    public final ChemicalChunkerParser.nnsynthesize_return nnsynthesize() throws RecognitionException {
        ChemicalChunkerParser.nnsynthesize_return retval = new ChemicalChunkerParser.nnsynthesize_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal597=null;
        Token TOKEN598=null;

        Object string_literal597_tree=null;
        Object TOKEN598_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:324:13: ( 'NN-SYNTHESIZE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:324:14: 'NN-SYNTHESIZE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal597=(Token)match(input,94,FOLLOW_94_in_nnsynthesize2833); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal597_tree = (Object)adaptor.create(string_literal597);
            adaptor.addChild(root_0, string_literal597_tree);
            }
            TOKEN598=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnsynthesize2835); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN598_tree = (Object)adaptor.create(TOKEN598);
            adaptor.addChild(root_0, TOKEN598_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnsynthesize"

    public static class vbwait_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwait"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:327:1: vbwait : 'VB-WAIT' TOKEN ;
    public final ChemicalChunkerParser.vbwait_return vbwait() throws RecognitionException {
        ChemicalChunkerParser.vbwait_return retval = new ChemicalChunkerParser.vbwait_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal599=null;
        Token TOKEN600=null;

        Object string_literal599_tree=null;
        Object TOKEN600_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:327:7: ( 'VB-WAIT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:327:8: 'VB-WAIT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal599=(Token)match(input,95,FOLLOW_95_in_vbwait2842); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal599_tree = (Object)adaptor.create(string_literal599);
            adaptor.addChild(root_0, string_literal599_tree);
            }
            TOKEN600=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwait2844); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN600_tree = (Object)adaptor.create(TOKEN600);
            adaptor.addChild(root_0, TOKEN600_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbwait"

    public static class vbwash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwash"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:330:1: vbwash : 'VB-WASH' TOKEN ;
    public final ChemicalChunkerParser.vbwash_return vbwash() throws RecognitionException {
        ChemicalChunkerParser.vbwash_return retval = new ChemicalChunkerParser.vbwash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal601=null;
        Token TOKEN602=null;

        Object string_literal601_tree=null;
        Object TOKEN602_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:330:7: ( 'VB-WASH' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:330:8: 'VB-WASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal601=(Token)match(input,96,FOLLOW_96_in_vbwash2851); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal601_tree = (Object)adaptor.create(string_literal601);
            adaptor.addChild(root_0, string_literal601_tree);
            }
            TOKEN602=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwash2853); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN602_tree = (Object)adaptor.create(TOKEN602);
            adaptor.addChild(root_0, TOKEN602_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbwash"

    public static class vbyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbyield"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:333:1: vbyield : 'VB-YIELD' TOKEN ;
    public final ChemicalChunkerParser.vbyield_return vbyield() throws RecognitionException {
        ChemicalChunkerParser.vbyield_return retval = new ChemicalChunkerParser.vbyield_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal603=null;
        Token TOKEN604=null;

        Object string_literal603_tree=null;
        Object TOKEN604_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:333:8: ( 'VB-YIELD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:333:9: 'VB-YIELD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal603=(Token)match(input,97,FOLLOW_97_in_vbyield2860); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal603_tree = (Object)adaptor.create(string_literal603);
            adaptor.addChild(root_0, string_literal603_tree);
            }
            TOKEN604=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbyield2862); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN604_tree = (Object)adaptor.create(TOKEN604);
            adaptor.addChild(root_0, TOKEN604_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbyield"

    public static class colon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "colon"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:336:1: colon : 'COLON' TOKEN ;
    public final ChemicalChunkerParser.colon_return colon() throws RecognitionException {
        ChemicalChunkerParser.colon_return retval = new ChemicalChunkerParser.colon_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal605=null;
        Token TOKEN606=null;

        Object string_literal605_tree=null;
        Object TOKEN606_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:336:6: ( 'COLON' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:336:7: 'COLON' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal605=(Token)match(input,98,FOLLOW_98_in_colon2869); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal605_tree = (Object)adaptor.create(string_literal605);
            adaptor.addChild(root_0, string_literal605_tree);
            }
            TOKEN606=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_colon2871); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN606_tree = (Object)adaptor.create(TOKEN606);
            adaptor.addChild(root_0, TOKEN606_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "colon"

    public static class comma_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comma"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:337:1: comma : 'COMMA' TOKEN ;
    public final ChemicalChunkerParser.comma_return comma() throws RecognitionException {
        ChemicalChunkerParser.comma_return retval = new ChemicalChunkerParser.comma_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal607=null;
        Token TOKEN608=null;

        Object string_literal607_tree=null;
        Object TOKEN608_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:337:6: ( 'COMMA' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:337:7: 'COMMA' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal607=(Token)match(input,99,FOLLOW_99_in_comma2876); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal607_tree = (Object)adaptor.create(string_literal607);
            adaptor.addChild(root_0, string_literal607_tree);
            }
            TOKEN608=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_comma2878); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN608_tree = (Object)adaptor.create(TOKEN608);
            adaptor.addChild(root_0, TOKEN608_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "comma"

    public static class apost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apost"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:338:1: apost : 'APOST' TOKEN ;
    public final ChemicalChunkerParser.apost_return apost() throws RecognitionException {
        ChemicalChunkerParser.apost_return retval = new ChemicalChunkerParser.apost_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal609=null;
        Token TOKEN610=null;

        Object string_literal609_tree=null;
        Object TOKEN610_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:338:6: ( 'APOST' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:338:7: 'APOST' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal609=(Token)match(input,100,FOLLOW_100_in_apost2883); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal609_tree = (Object)adaptor.create(string_literal609);
            adaptor.addChild(root_0, string_literal609_tree);
            }
            TOKEN610=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_apost2885); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN610_tree = (Object)adaptor.create(TOKEN610);
            adaptor.addChild(root_0, TOKEN610_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "apost"

    public static class neg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neg"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:339:1: neg : 'NEG' TOKEN ;
    public final ChemicalChunkerParser.neg_return neg() throws RecognitionException {
        ChemicalChunkerParser.neg_return retval = new ChemicalChunkerParser.neg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal611=null;
        Token TOKEN612=null;

        Object string_literal611_tree=null;
        Object TOKEN612_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:339:4: ( 'NEG' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:339:5: 'NEG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal611=(Token)match(input,101,FOLLOW_101_in_neg2890); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal611_tree = (Object)adaptor.create(string_literal611);
            adaptor.addChild(root_0, string_literal611_tree);
            }
            TOKEN612=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_neg2892); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN612_tree = (Object)adaptor.create(TOKEN612);
            adaptor.addChild(root_0, TOKEN612_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "neg"

    public static class dash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dash"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:340:1: dash : 'DASH' TOKEN ;
    public final ChemicalChunkerParser.dash_return dash() throws RecognitionException {
        ChemicalChunkerParser.dash_return retval = new ChemicalChunkerParser.dash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal613=null;
        Token TOKEN614=null;

        Object string_literal613_tree=null;
        Object TOKEN614_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:340:5: ( 'DASH' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:340:6: 'DASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal613=(Token)match(input,102,FOLLOW_102_in_dash2897); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal613_tree = (Object)adaptor.create(string_literal613);
            adaptor.addChild(root_0, string_literal613_tree);
            }
            TOKEN614=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dash2899); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN614_tree = (Object)adaptor.create(TOKEN614);
            adaptor.addChild(root_0, TOKEN614_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dash"

    public static class stop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stop"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:341:1: stop : 'STOP' TOKEN ;
    public final ChemicalChunkerParser.stop_return stop() throws RecognitionException {
        ChemicalChunkerParser.stop_return retval = new ChemicalChunkerParser.stop_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal615=null;
        Token TOKEN616=null;

        Object string_literal615_tree=null;
        Object TOKEN616_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:341:5: ( 'STOP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:341:6: 'STOP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal615=(Token)match(input,103,FOLLOW_103_in_stop2904); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal615_tree = (Object)adaptor.create(string_literal615);
            adaptor.addChild(root_0, string_literal615_tree);
            }
            TOKEN616=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_stop2906); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN616_tree = (Object)adaptor.create(TOKEN616);
            adaptor.addChild(root_0, TOKEN616_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "stop"

    public static class nnpercent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpercent"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:342:1: nnpercent : 'NN-PERCENT' TOKEN ;
    public final ChemicalChunkerParser.nnpercent_return nnpercent() throws RecognitionException {
        ChemicalChunkerParser.nnpercent_return retval = new ChemicalChunkerParser.nnpercent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal617=null;
        Token TOKEN618=null;

        Object string_literal617_tree=null;
        Object TOKEN618_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:342:10: ( 'NN-PERCENT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:342:11: 'NN-PERCENT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal617=(Token)match(input,104,FOLLOW_104_in_nnpercent2911); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal617_tree = (Object)adaptor.create(string_literal617);
            adaptor.addChild(root_0, string_literal617_tree);
            }
            TOKEN618=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpercent2913); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN618_tree = (Object)adaptor.create(TOKEN618);
            adaptor.addChild(root_0, TOKEN618_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnpercent"

    public static class lsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lsqb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:343:1: lsqb : 'LSQB' TOKEN ;
    public final ChemicalChunkerParser.lsqb_return lsqb() throws RecognitionException {
        ChemicalChunkerParser.lsqb_return retval = new ChemicalChunkerParser.lsqb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal619=null;
        Token TOKEN620=null;

        Object string_literal619_tree=null;
        Object TOKEN620_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:343:5: ( 'LSQB' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:343:6: 'LSQB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal619=(Token)match(input,105,FOLLOW_105_in_lsqb2918); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal619_tree = (Object)adaptor.create(string_literal619);
            adaptor.addChild(root_0, string_literal619_tree);
            }
            TOKEN620=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lsqb2920); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN620_tree = (Object)adaptor.create(TOKEN620);
            adaptor.addChild(root_0, TOKEN620_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lsqb"

    public static class rsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rsqb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:344:1: rsqb : 'RSQB' TOKEN ;
    public final ChemicalChunkerParser.rsqb_return rsqb() throws RecognitionException {
        ChemicalChunkerParser.rsqb_return retval = new ChemicalChunkerParser.rsqb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal621=null;
        Token TOKEN622=null;

        Object string_literal621_tree=null;
        Object TOKEN622_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:344:5: ( 'RSQB' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:344:6: 'RSQB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal621=(Token)match(input,106,FOLLOW_106_in_rsqb2925); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal621_tree = (Object)adaptor.create(string_literal621);
            adaptor.addChild(root_0, string_literal621_tree);
            }
            TOKEN622=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rsqb2927); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN622_tree = (Object)adaptor.create(TOKEN622);
            adaptor.addChild(root_0, TOKEN622_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rsqb"

    public static class lrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lrb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:346:1: lrb : '-LRB-' TOKEN ;
    public final ChemicalChunkerParser.lrb_return lrb() throws RecognitionException {
        ChemicalChunkerParser.lrb_return retval = new ChemicalChunkerParser.lrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal623=null;
        Token TOKEN624=null;

        Object string_literal623_tree=null;
        Object TOKEN624_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:346:4: ( '-LRB-' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:346:5: '-LRB-' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal623=(Token)match(input,107,FOLLOW_107_in_lrb2933); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal623_tree = (Object)adaptor.create(string_literal623);
            adaptor.addChild(root_0, string_literal623_tree);
            }
            TOKEN624=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lrb2935); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN624_tree = (Object)adaptor.create(TOKEN624);
            adaptor.addChild(root_0, TOKEN624_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lrb"

    public static class rrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rrb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:347:1: rrb : '-RRB-' TOKEN ;
    public final ChemicalChunkerParser.rrb_return rrb() throws RecognitionException {
        ChemicalChunkerParser.rrb_return retval = new ChemicalChunkerParser.rrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal625=null;
        Token TOKEN626=null;

        Object string_literal625_tree=null;
        Object TOKEN626_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:347:4: ( '-RRB-' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:347:5: '-RRB-' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal625=(Token)match(input,108,FOLLOW_108_in_rrb2940); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal625_tree = (Object)adaptor.create(string_literal625);
            adaptor.addChild(root_0, string_literal625_tree);
            }
            TOKEN626=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rrb2942); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN626_tree = (Object)adaptor.create(TOKEN626);
            adaptor.addChild(root_0, TOKEN626_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rrb"

    public static class abl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abl"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:352:1: abl : 'ABL' TOKEN ;
    public final ChemicalChunkerParser.abl_return abl() throws RecognitionException {
        ChemicalChunkerParser.abl_return retval = new ChemicalChunkerParser.abl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal627=null;
        Token TOKEN628=null;

        Object string_literal627_tree=null;
        Object TOKEN628_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:352:4: ( 'ABL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:352:5: 'ABL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal627=(Token)match(input,109,FOLLOW_109_in_abl2951); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal627_tree = (Object)adaptor.create(string_literal627);
            adaptor.addChild(root_0, string_literal627_tree);
            }
            TOKEN628=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abl2953); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN628_tree = (Object)adaptor.create(TOKEN628);
            adaptor.addChild(root_0, TOKEN628_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abl"

    public static class abn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:355:1: abn : 'ABN' TOKEN ;
    public final ChemicalChunkerParser.abn_return abn() throws RecognitionException {
        ChemicalChunkerParser.abn_return retval = new ChemicalChunkerParser.abn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal629=null;
        Token TOKEN630=null;

        Object string_literal629_tree=null;
        Object TOKEN630_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:355:4: ( 'ABN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:355:5: 'ABN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal629=(Token)match(input,110,FOLLOW_110_in_abn2960); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal629_tree = (Object)adaptor.create(string_literal629);
            adaptor.addChild(root_0, string_literal629_tree);
            }
            TOKEN630=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abn2962); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN630_tree = (Object)adaptor.create(TOKEN630);
            adaptor.addChild(root_0, TOKEN630_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abn"

    public static class abx_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abx"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:358:1: abx : 'ABX' TOKEN ;
    public final ChemicalChunkerParser.abx_return abx() throws RecognitionException {
        ChemicalChunkerParser.abx_return retval = new ChemicalChunkerParser.abx_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal631=null;
        Token TOKEN632=null;

        Object string_literal631_tree=null;
        Object TOKEN632_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:358:4: ( 'ABX' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:358:5: 'ABX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal631=(Token)match(input,111,FOLLOW_111_in_abx2969); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal631_tree = (Object)adaptor.create(string_literal631);
            adaptor.addChild(root_0, string_literal631_tree);
            }
            TOKEN632=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abx2971); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN632_tree = (Object)adaptor.create(TOKEN632);
            adaptor.addChild(root_0, TOKEN632_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abx"

    public static class ap_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ap"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:361:1: ap : 'AP' TOKEN ;
    public final ChemicalChunkerParser.ap_return ap() throws RecognitionException {
        ChemicalChunkerParser.ap_return retval = new ChemicalChunkerParser.ap_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal633=null;
        Token TOKEN634=null;

        Object string_literal633_tree=null;
        Object TOKEN634_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:361:3: ( 'AP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:361:4: 'AP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal633=(Token)match(input,112,FOLLOW_112_in_ap2978); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal633_tree = (Object)adaptor.create(string_literal633);
            adaptor.addChild(root_0, string_literal633_tree);
            }
            TOKEN634=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ap2980); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN634_tree = (Object)adaptor.create(TOKEN634);
            adaptor.addChild(root_0, TOKEN634_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ap"

    public static class at_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "at"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:364:1: at : 'AT' TOKEN ;
    public final ChemicalChunkerParser.at_return at() throws RecognitionException {
        ChemicalChunkerParser.at_return retval = new ChemicalChunkerParser.at_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal635=null;
        Token TOKEN636=null;

        Object string_literal635_tree=null;
        Object TOKEN636_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:364:3: ( 'AT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:364:4: 'AT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal635=(Token)match(input,113,FOLLOW_113_in_at2987); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal635_tree = (Object)adaptor.create(string_literal635);
            adaptor.addChild(root_0, string_literal635_tree);
            }
            TOKEN636=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_at2989); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN636_tree = (Object)adaptor.create(TOKEN636);
            adaptor.addChild(root_0, TOKEN636_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "at"

    public static class be_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "be"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:367:1: be : 'BE' TOKEN ;
    public final ChemicalChunkerParser.be_return be() throws RecognitionException {
        ChemicalChunkerParser.be_return retval = new ChemicalChunkerParser.be_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal637=null;
        Token TOKEN638=null;

        Object string_literal637_tree=null;
        Object TOKEN638_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:367:3: ( 'BE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:367:4: 'BE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal637=(Token)match(input,114,FOLLOW_114_in_be2996); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal637_tree = (Object)adaptor.create(string_literal637);
            adaptor.addChild(root_0, string_literal637_tree);
            }
            TOKEN638=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_be2998); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN638_tree = (Object)adaptor.create(TOKEN638);
            adaptor.addChild(root_0, TOKEN638_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "be"

    public static class bed_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bed"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:370:1: bed : 'BED' TOKEN ;
    public final ChemicalChunkerParser.bed_return bed() throws RecognitionException {
        ChemicalChunkerParser.bed_return retval = new ChemicalChunkerParser.bed_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal639=null;
        Token TOKEN640=null;

        Object string_literal639_tree=null;
        Object TOKEN640_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:370:4: ( 'BED' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:370:5: 'BED' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal639=(Token)match(input,115,FOLLOW_115_in_bed3005); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal639_tree = (Object)adaptor.create(string_literal639);
            adaptor.addChild(root_0, string_literal639_tree);
            }
            TOKEN640=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bed3007); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN640_tree = (Object)adaptor.create(TOKEN640);
            adaptor.addChild(root_0, TOKEN640_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bed"

    public static class bedz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bedz"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:373:1: bedz : 'BEDZ' TOKEN ;
    public final ChemicalChunkerParser.bedz_return bedz() throws RecognitionException {
        ChemicalChunkerParser.bedz_return retval = new ChemicalChunkerParser.bedz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal641=null;
        Token TOKEN642=null;

        Object string_literal641_tree=null;
        Object TOKEN642_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:373:5: ( 'BEDZ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:373:6: 'BEDZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal641=(Token)match(input,116,FOLLOW_116_in_bedz3014); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal641_tree = (Object)adaptor.create(string_literal641);
            adaptor.addChild(root_0, string_literal641_tree);
            }
            TOKEN642=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bedz3016); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN642_tree = (Object)adaptor.create(TOKEN642);
            adaptor.addChild(root_0, TOKEN642_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bedz"

    public static class beg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "beg"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:376:1: beg : 'BEG' TOKEN ;
    public final ChemicalChunkerParser.beg_return beg() throws RecognitionException {
        ChemicalChunkerParser.beg_return retval = new ChemicalChunkerParser.beg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal643=null;
        Token TOKEN644=null;

        Object string_literal643_tree=null;
        Object TOKEN644_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:376:4: ( 'BEG' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:376:5: 'BEG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal643=(Token)match(input,117,FOLLOW_117_in_beg3023); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal643_tree = (Object)adaptor.create(string_literal643);
            adaptor.addChild(root_0, string_literal643_tree);
            }
            TOKEN644=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_beg3025); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN644_tree = (Object)adaptor.create(TOKEN644);
            adaptor.addChild(root_0, TOKEN644_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "beg"

    public static class bem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bem"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:379:1: bem : 'BEM' TOKEN ;
    public final ChemicalChunkerParser.bem_return bem() throws RecognitionException {
        ChemicalChunkerParser.bem_return retval = new ChemicalChunkerParser.bem_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal645=null;
        Token TOKEN646=null;

        Object string_literal645_tree=null;
        Object TOKEN646_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:379:4: ( 'BEM' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:379:5: 'BEM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal645=(Token)match(input,118,FOLLOW_118_in_bem3032); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal645_tree = (Object)adaptor.create(string_literal645);
            adaptor.addChild(root_0, string_literal645_tree);
            }
            TOKEN646=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bem3034); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN646_tree = (Object)adaptor.create(TOKEN646);
            adaptor.addChild(root_0, TOKEN646_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bem"

    public static class ben_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ben"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:382:1: ben : 'BEN' TOKEN ;
    public final ChemicalChunkerParser.ben_return ben() throws RecognitionException {
        ChemicalChunkerParser.ben_return retval = new ChemicalChunkerParser.ben_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal647=null;
        Token TOKEN648=null;

        Object string_literal647_tree=null;
        Object TOKEN648_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:382:4: ( 'BEN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:382:5: 'BEN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal647=(Token)match(input,119,FOLLOW_119_in_ben3041); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal647_tree = (Object)adaptor.create(string_literal647);
            adaptor.addChild(root_0, string_literal647_tree);
            }
            TOKEN648=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ben3043); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN648_tree = (Object)adaptor.create(TOKEN648);
            adaptor.addChild(root_0, TOKEN648_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ben"

    public static class ber_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ber"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:385:1: ber : 'BER' TOKEN ;
    public final ChemicalChunkerParser.ber_return ber() throws RecognitionException {
        ChemicalChunkerParser.ber_return retval = new ChemicalChunkerParser.ber_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal649=null;
        Token TOKEN650=null;

        Object string_literal649_tree=null;
        Object TOKEN650_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:385:4: ( 'BER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:385:5: 'BER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal649=(Token)match(input,120,FOLLOW_120_in_ber3050); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal649_tree = (Object)adaptor.create(string_literal649);
            adaptor.addChild(root_0, string_literal649_tree);
            }
            TOKEN650=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ber3052); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN650_tree = (Object)adaptor.create(TOKEN650);
            adaptor.addChild(root_0, TOKEN650_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ber"

    public static class bez_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bez"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:388:1: bez : 'BEZ' TOKEN ;
    public final ChemicalChunkerParser.bez_return bez() throws RecognitionException {
        ChemicalChunkerParser.bez_return retval = new ChemicalChunkerParser.bez_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal651=null;
        Token TOKEN652=null;

        Object string_literal651_tree=null;
        Object TOKEN652_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:388:4: ( 'BEZ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:388:5: 'BEZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal651=(Token)match(input,121,FOLLOW_121_in_bez3059); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal651_tree = (Object)adaptor.create(string_literal651);
            adaptor.addChild(root_0, string_literal651_tree);
            }
            TOKEN652=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bez3061); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN652_tree = (Object)adaptor.create(TOKEN652);
            adaptor.addChild(root_0, TOKEN652_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bez"

    public static class cc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cc"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:391:1: cc : 'CC' TOKEN ;
    public final ChemicalChunkerParser.cc_return cc() throws RecognitionException {
        ChemicalChunkerParser.cc_return retval = new ChemicalChunkerParser.cc_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal653=null;
        Token TOKEN654=null;

        Object string_literal653_tree=null;
        Object TOKEN654_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:391:3: ( 'CC' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:391:4: 'CC' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal653=(Token)match(input,122,FOLLOW_122_in_cc3068); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal653_tree = (Object)adaptor.create(string_literal653);
            adaptor.addChild(root_0, string_literal653_tree);
            }
            TOKEN654=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cc3070); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN654_tree = (Object)adaptor.create(TOKEN654);
            adaptor.addChild(root_0, TOKEN654_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cc"

    public static class cd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cd"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:394:1: cd : 'CD' TOKEN ;
    public final ChemicalChunkerParser.cd_return cd() throws RecognitionException {
        ChemicalChunkerParser.cd_return retval = new ChemicalChunkerParser.cd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal655=null;
        Token TOKEN656=null;

        Object string_literal655_tree=null;
        Object TOKEN656_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:394:3: ( 'CD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:394:4: 'CD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal655=(Token)match(input,123,FOLLOW_123_in_cd3077); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal655_tree = (Object)adaptor.create(string_literal655);
            adaptor.addChild(root_0, string_literal655_tree);
            }
            TOKEN656=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cd3079); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN656_tree = (Object)adaptor.create(TOKEN656);
            adaptor.addChild(root_0, TOKEN656_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cd"

    public static class cs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cs"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:397:1: cs : 'CS' TOKEN ;
    public final ChemicalChunkerParser.cs_return cs() throws RecognitionException {
        ChemicalChunkerParser.cs_return retval = new ChemicalChunkerParser.cs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal657=null;
        Token TOKEN658=null;

        Object string_literal657_tree=null;
        Object TOKEN658_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:397:3: ( 'CS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:397:4: 'CS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal657=(Token)match(input,124,FOLLOW_124_in_cs3086); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal657_tree = (Object)adaptor.create(string_literal657);
            adaptor.addChild(root_0, string_literal657_tree);
            }
            TOKEN658=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cs3088); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN658_tree = (Object)adaptor.create(TOKEN658);
            adaptor.addChild(root_0, TOKEN658_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cs"

    public static class dotok_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dotok"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:400:1: dotok : 'DO' TOKEN ;
    public final ChemicalChunkerParser.dotok_return dotok() throws RecognitionException {
        ChemicalChunkerParser.dotok_return retval = new ChemicalChunkerParser.dotok_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal659=null;
        Token TOKEN660=null;

        Object string_literal659_tree=null;
        Object TOKEN660_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:400:7: ( 'DO' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:400:8: 'DO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal659=(Token)match(input,125,FOLLOW_125_in_dotok3096); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal659_tree = (Object)adaptor.create(string_literal659);
            adaptor.addChild(root_0, string_literal659_tree);
            }
            TOKEN660=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dotok3098); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN660_tree = (Object)adaptor.create(TOKEN660);
            adaptor.addChild(root_0, TOKEN660_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dotok"

    public static class dod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dod"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:403:1: dod : 'DOD' TOKEN ;
    public final ChemicalChunkerParser.dod_return dod() throws RecognitionException {
        ChemicalChunkerParser.dod_return retval = new ChemicalChunkerParser.dod_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal661=null;
        Token TOKEN662=null;

        Object string_literal661_tree=null;
        Object TOKEN662_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:403:4: ( 'DOD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:403:5: 'DOD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal661=(Token)match(input,126,FOLLOW_126_in_dod3105); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal661_tree = (Object)adaptor.create(string_literal661);
            adaptor.addChild(root_0, string_literal661_tree);
            }
            TOKEN662=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dod3107); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN662_tree = (Object)adaptor.create(TOKEN662);
            adaptor.addChild(root_0, TOKEN662_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dod"

    public static class doz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "doz"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:406:1: doz : 'DOZ' TOKEN ;
    public final ChemicalChunkerParser.doz_return doz() throws RecognitionException {
        ChemicalChunkerParser.doz_return retval = new ChemicalChunkerParser.doz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal663=null;
        Token TOKEN664=null;

        Object string_literal663_tree=null;
        Object TOKEN664_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:406:4: ( 'DOZ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:406:5: 'DOZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal663=(Token)match(input,127,FOLLOW_127_in_doz3114); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal663_tree = (Object)adaptor.create(string_literal663);
            adaptor.addChild(root_0, string_literal663_tree);
            }
            TOKEN664=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_doz3116); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN664_tree = (Object)adaptor.create(TOKEN664);
            adaptor.addChild(root_0, TOKEN664_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "doz"

    public static class dt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dt"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:409:1: dt : 'DT' TOKEN ;
    public final ChemicalChunkerParser.dt_return dt() throws RecognitionException {
        ChemicalChunkerParser.dt_return retval = new ChemicalChunkerParser.dt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal665=null;
        Token TOKEN666=null;

        Object string_literal665_tree=null;
        Object TOKEN666_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:409:3: ( 'DT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:409:4: 'DT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal665=(Token)match(input,128,FOLLOW_128_in_dt3123); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal665_tree = (Object)adaptor.create(string_literal665);
            adaptor.addChild(root_0, string_literal665_tree);
            }
            TOKEN666=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dt3125); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN666_tree = (Object)adaptor.create(TOKEN666);
            adaptor.addChild(root_0, TOKEN666_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dt"

    public static class dti_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dti"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:412:1: dti : 'DTI' TOKEN ;
    public final ChemicalChunkerParser.dti_return dti() throws RecognitionException {
        ChemicalChunkerParser.dti_return retval = new ChemicalChunkerParser.dti_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal667=null;
        Token TOKEN668=null;

        Object string_literal667_tree=null;
        Object TOKEN668_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:412:4: ( 'DTI' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:412:5: 'DTI' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal667=(Token)match(input,129,FOLLOW_129_in_dti3132); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal667_tree = (Object)adaptor.create(string_literal667);
            adaptor.addChild(root_0, string_literal667_tree);
            }
            TOKEN668=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dti3134); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN668_tree = (Object)adaptor.create(TOKEN668);
            adaptor.addChild(root_0, TOKEN668_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dti"

    public static class dts_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dts"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:415:1: dts : 'DTS' TOKEN ;
    public final ChemicalChunkerParser.dts_return dts() throws RecognitionException {
        ChemicalChunkerParser.dts_return retval = new ChemicalChunkerParser.dts_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal669=null;
        Token TOKEN670=null;

        Object string_literal669_tree=null;
        Object TOKEN670_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:415:4: ( 'DTS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:415:5: 'DTS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal669=(Token)match(input,130,FOLLOW_130_in_dts3141); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal669_tree = (Object)adaptor.create(string_literal669);
            adaptor.addChild(root_0, string_literal669_tree);
            }
            TOKEN670=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dts3143); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN670_tree = (Object)adaptor.create(TOKEN670);
            adaptor.addChild(root_0, TOKEN670_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dts"

    public static class dtx_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dtx"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:418:1: dtx : 'DTX' TOKEN ;
    public final ChemicalChunkerParser.dtx_return dtx() throws RecognitionException {
        ChemicalChunkerParser.dtx_return retval = new ChemicalChunkerParser.dtx_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal671=null;
        Token TOKEN672=null;

        Object string_literal671_tree=null;
        Object TOKEN672_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:418:4: ( 'DTX' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:418:5: 'DTX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal671=(Token)match(input,131,FOLLOW_131_in_dtx3150); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal671_tree = (Object)adaptor.create(string_literal671);
            adaptor.addChild(root_0, string_literal671_tree);
            }
            TOKEN672=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dtx3152); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN672_tree = (Object)adaptor.create(TOKEN672);
            adaptor.addChild(root_0, TOKEN672_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dtx"

    public static class ex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ex"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:421:1: ex : 'EX' TOKEN ;
    public final ChemicalChunkerParser.ex_return ex() throws RecognitionException {
        ChemicalChunkerParser.ex_return retval = new ChemicalChunkerParser.ex_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal673=null;
        Token TOKEN674=null;

        Object string_literal673_tree=null;
        Object TOKEN674_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:421:3: ( 'EX' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:421:4: 'EX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal673=(Token)match(input,132,FOLLOW_132_in_ex3159); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal673_tree = (Object)adaptor.create(string_literal673);
            adaptor.addChild(root_0, string_literal673_tree);
            }
            TOKEN674=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ex3161); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN674_tree = (Object)adaptor.create(TOKEN674);
            adaptor.addChild(root_0, TOKEN674_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ex"

    public static class fw_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fw"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:424:1: fw : 'FW' TOKEN ;
    public final ChemicalChunkerParser.fw_return fw() throws RecognitionException {
        ChemicalChunkerParser.fw_return retval = new ChemicalChunkerParser.fw_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal675=null;
        Token TOKEN676=null;

        Object string_literal675_tree=null;
        Object TOKEN676_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:424:3: ( 'FW' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:424:4: 'FW' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal675=(Token)match(input,133,FOLLOW_133_in_fw3168); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal675_tree = (Object)adaptor.create(string_literal675);
            adaptor.addChild(root_0, string_literal675_tree);
            }
            TOKEN676=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fw3170); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN676_tree = (Object)adaptor.create(TOKEN676);
            adaptor.addChild(root_0, TOKEN676_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fw"

    public static class fwin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fwin"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:427:1: fwin : 'FW-IN' TOKEN ;
    public final ChemicalChunkerParser.fwin_return fwin() throws RecognitionException {
        ChemicalChunkerParser.fwin_return retval = new ChemicalChunkerParser.fwin_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal677=null;
        Token TOKEN678=null;

        Object string_literal677_tree=null;
        Object TOKEN678_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:427:5: ( 'FW-IN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:427:6: 'FW-IN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal677=(Token)match(input,134,FOLLOW_134_in_fwin3177); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal677_tree = (Object)adaptor.create(string_literal677);
            adaptor.addChild(root_0, string_literal677_tree);
            }
            TOKEN678=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fwin3179); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN678_tree = (Object)adaptor.create(TOKEN678);
            adaptor.addChild(root_0, TOKEN678_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fwin"

    public static class hv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hv"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:430:1: hv : 'HV' TOKEN ;
    public final ChemicalChunkerParser.hv_return hv() throws RecognitionException {
        ChemicalChunkerParser.hv_return retval = new ChemicalChunkerParser.hv_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal679=null;
        Token TOKEN680=null;

        Object string_literal679_tree=null;
        Object TOKEN680_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:430:3: ( 'HV' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:430:4: 'HV' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal679=(Token)match(input,135,FOLLOW_135_in_hv3186); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal679_tree = (Object)adaptor.create(string_literal679);
            adaptor.addChild(root_0, string_literal679_tree);
            }
            TOKEN680=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hv3188); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN680_tree = (Object)adaptor.create(TOKEN680);
            adaptor.addChild(root_0, TOKEN680_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hv"

    public static class hvd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvd"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:433:1: hvd : 'HVD' TOKEN ;
    public final ChemicalChunkerParser.hvd_return hvd() throws RecognitionException {
        ChemicalChunkerParser.hvd_return retval = new ChemicalChunkerParser.hvd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal681=null;
        Token TOKEN682=null;

        Object string_literal681_tree=null;
        Object TOKEN682_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:433:4: ( 'HVD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:433:5: 'HVD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal681=(Token)match(input,136,FOLLOW_136_in_hvd3195); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal681_tree = (Object)adaptor.create(string_literal681);
            adaptor.addChild(root_0, string_literal681_tree);
            }
            TOKEN682=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvd3197); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN682_tree = (Object)adaptor.create(TOKEN682);
            adaptor.addChild(root_0, TOKEN682_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hvd"

    public static class hvg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvg"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:436:1: hvg : 'HVG' TOKEN ;
    public final ChemicalChunkerParser.hvg_return hvg() throws RecognitionException {
        ChemicalChunkerParser.hvg_return retval = new ChemicalChunkerParser.hvg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal683=null;
        Token TOKEN684=null;

        Object string_literal683_tree=null;
        Object TOKEN684_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:436:4: ( 'HVG' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:436:5: 'HVG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal683=(Token)match(input,137,FOLLOW_137_in_hvg3204); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal683_tree = (Object)adaptor.create(string_literal683);
            adaptor.addChild(root_0, string_literal683_tree);
            }
            TOKEN684=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvg3206); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN684_tree = (Object)adaptor.create(TOKEN684);
            adaptor.addChild(root_0, TOKEN684_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hvg"

    public static class hvn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:439:1: hvn : 'HVN' TOKEN ;
    public final ChemicalChunkerParser.hvn_return hvn() throws RecognitionException {
        ChemicalChunkerParser.hvn_return retval = new ChemicalChunkerParser.hvn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal685=null;
        Token TOKEN686=null;

        Object string_literal685_tree=null;
        Object TOKEN686_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:439:4: ( 'HVN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:439:5: 'HVN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal685=(Token)match(input,138,FOLLOW_138_in_hvn3213); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal685_tree = (Object)adaptor.create(string_literal685);
            adaptor.addChild(root_0, string_literal685_tree);
            }
            TOKEN686=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvn3215); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN686_tree = (Object)adaptor.create(TOKEN686);
            adaptor.addChild(root_0, TOKEN686_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hvn"

    public static class in_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:442:1: in : 'IN' TOKEN ;
    public final ChemicalChunkerParser.in_return in() throws RecognitionException {
        ChemicalChunkerParser.in_return retval = new ChemicalChunkerParser.in_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal687=null;
        Token TOKEN688=null;

        Object string_literal687_tree=null;
        Object TOKEN688_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:442:3: ( 'IN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:442:4: 'IN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal687=(Token)match(input,139,FOLLOW_139_in_in3222); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal687_tree = (Object)adaptor.create(string_literal687);
            adaptor.addChild(root_0, string_literal687_tree);
            }
            TOKEN688=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_in3224); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN688_tree = (Object)adaptor.create(TOKEN688);
            adaptor.addChild(root_0, TOKEN688_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "in"

    public static class jj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jj"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:445:1: jj : 'JJ' TOKEN ;
    public final ChemicalChunkerParser.jj_return jj() throws RecognitionException {
        ChemicalChunkerParser.jj_return retval = new ChemicalChunkerParser.jj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal689=null;
        Token TOKEN690=null;

        Object string_literal689_tree=null;
        Object TOKEN690_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:445:3: ( 'JJ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:445:4: 'JJ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal689=(Token)match(input,140,FOLLOW_140_in_jj3231); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal689_tree = (Object)adaptor.create(string_literal689);
            adaptor.addChild(root_0, string_literal689_tree);
            }
            TOKEN690=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jj3233); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN690_tree = (Object)adaptor.create(TOKEN690);
            adaptor.addChild(root_0, TOKEN690_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jj"

    public static class jjr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjr"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:448:1: jjr : 'JJR' TOKEN ;
    public final ChemicalChunkerParser.jjr_return jjr() throws RecognitionException {
        ChemicalChunkerParser.jjr_return retval = new ChemicalChunkerParser.jjr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal691=null;
        Token TOKEN692=null;

        Object string_literal691_tree=null;
        Object TOKEN692_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:448:4: ( 'JJR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:448:5: 'JJR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal691=(Token)match(input,141,FOLLOW_141_in_jjr3240); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal691_tree = (Object)adaptor.create(string_literal691);
            adaptor.addChild(root_0, string_literal691_tree);
            }
            TOKEN692=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjr3242); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN692_tree = (Object)adaptor.create(TOKEN692);
            adaptor.addChild(root_0, TOKEN692_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jjr"

    public static class jjs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjs"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:451:1: jjs : 'JJS' TOKEN ;
    public final ChemicalChunkerParser.jjs_return jjs() throws RecognitionException {
        ChemicalChunkerParser.jjs_return retval = new ChemicalChunkerParser.jjs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal693=null;
        Token TOKEN694=null;

        Object string_literal693_tree=null;
        Object TOKEN694_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:451:4: ( 'JJS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:451:5: 'JJS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal693=(Token)match(input,142,FOLLOW_142_in_jjs3249); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal693_tree = (Object)adaptor.create(string_literal693);
            adaptor.addChild(root_0, string_literal693_tree);
            }
            TOKEN694=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjs3251); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN694_tree = (Object)adaptor.create(TOKEN694);
            adaptor.addChild(root_0, TOKEN694_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jjs"

    public static class jjt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjt"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:454:1: jjt : 'JJT' TOKEN ;
    public final ChemicalChunkerParser.jjt_return jjt() throws RecognitionException {
        ChemicalChunkerParser.jjt_return retval = new ChemicalChunkerParser.jjt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal695=null;
        Token TOKEN696=null;

        Object string_literal695_tree=null;
        Object TOKEN696_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:454:4: ( 'JJT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:454:5: 'JJT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal695=(Token)match(input,143,FOLLOW_143_in_jjt3258); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal695_tree = (Object)adaptor.create(string_literal695);
            adaptor.addChild(root_0, string_literal695_tree);
            }
            TOKEN696=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjt3260); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN696_tree = (Object)adaptor.create(TOKEN696);
            adaptor.addChild(root_0, TOKEN696_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jjt"

    public static class md_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "md"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:457:1: md : 'MD' TOKEN ;
    public final ChemicalChunkerParser.md_return md() throws RecognitionException {
        ChemicalChunkerParser.md_return retval = new ChemicalChunkerParser.md_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal697=null;
        Token TOKEN698=null;

        Object string_literal697_tree=null;
        Object TOKEN698_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:457:3: ( 'MD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:457:4: 'MD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal697=(Token)match(input,144,FOLLOW_144_in_md3267); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal697_tree = (Object)adaptor.create(string_literal697);
            adaptor.addChild(root_0, string_literal697_tree);
            }
            TOKEN698=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_md3269); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN698_tree = (Object)adaptor.create(TOKEN698);
            adaptor.addChild(root_0, TOKEN698_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "md"

    public static class nc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nc"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:460:1: nc : 'NC' TOKEN ;
    public final ChemicalChunkerParser.nc_return nc() throws RecognitionException {
        ChemicalChunkerParser.nc_return retval = new ChemicalChunkerParser.nc_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal699=null;
        Token TOKEN700=null;

        Object string_literal699_tree=null;
        Object TOKEN700_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:460:3: ( 'NC' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:460:4: 'NC' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal699=(Token)match(input,145,FOLLOW_145_in_nc3276); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal699_tree = (Object)adaptor.create(string_literal699);
            adaptor.addChild(root_0, string_literal699_tree);
            }
            TOKEN700=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nc3278); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN700_tree = (Object)adaptor.create(TOKEN700);
            adaptor.addChild(root_0, TOKEN700_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nc"

    public static class nn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:463:1: nn : 'NN' TOKEN ;
    public final ChemicalChunkerParser.nn_return nn() throws RecognitionException {
        ChemicalChunkerParser.nn_return retval = new ChemicalChunkerParser.nn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal701=null;
        Token TOKEN702=null;

        Object string_literal701_tree=null;
        Object TOKEN702_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:463:3: ( 'NN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:463:4: 'NN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal701=(Token)match(input,146,FOLLOW_146_in_nn3285); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal701_tree = (Object)adaptor.create(string_literal701);
            adaptor.addChild(root_0, string_literal701_tree);
            }
            TOKEN702=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn3287); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN702_tree = (Object)adaptor.create(TOKEN702);
            adaptor.addChild(root_0, TOKEN702_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nn"

    public static class nn_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:466:1: nn_poss : 'NN$' TOKEN ;
    public final ChemicalChunkerParser.nn_poss_return nn_poss() throws RecognitionException {
        ChemicalChunkerParser.nn_poss_return retval = new ChemicalChunkerParser.nn_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal703=null;
        Token TOKEN704=null;

        Object string_literal703_tree=null;
        Object TOKEN704_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:466:8: ( 'NN$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:466:9: 'NN$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal703=(Token)match(input,147,FOLLOW_147_in_nn_poss3294); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal703_tree = (Object)adaptor.create(string_literal703);
            adaptor.addChild(root_0, string_literal703_tree);
            }
            TOKEN704=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn_poss3296); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN704_tree = (Object)adaptor.create(TOKEN704);
            adaptor.addChild(root_0, TOKEN704_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nn_poss"

    public static class nns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:469:1: nns : 'NNS' TOKEN ;
    public final ChemicalChunkerParser.nns_return nns() throws RecognitionException {
        ChemicalChunkerParser.nns_return retval = new ChemicalChunkerParser.nns_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal705=null;
        Token TOKEN706=null;

        Object string_literal705_tree=null;
        Object TOKEN706_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:469:4: ( 'NNS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:469:5: 'NNS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal705=(Token)match(input,148,FOLLOW_148_in_nns3303); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal705_tree = (Object)adaptor.create(string_literal705);
            adaptor.addChild(root_0, string_literal705_tree);
            }
            TOKEN706=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns3305); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN706_tree = (Object)adaptor.create(TOKEN706);
            adaptor.addChild(root_0, TOKEN706_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nns"

    public static class nns_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:472:1: nns_poss : 'NNS$' TOKEN ;
    public final ChemicalChunkerParser.nns_poss_return nns_poss() throws RecognitionException {
        ChemicalChunkerParser.nns_poss_return retval = new ChemicalChunkerParser.nns_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal707=null;
        Token TOKEN708=null;

        Object string_literal707_tree=null;
        Object TOKEN708_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:472:9: ( 'NNS$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:472:10: 'NNS$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal707=(Token)match(input,149,FOLLOW_149_in_nns_poss3312); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal707_tree = (Object)adaptor.create(string_literal707);
            adaptor.addChild(root_0, string_literal707_tree);
            }
            TOKEN708=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns_poss3314); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN708_tree = (Object)adaptor.create(TOKEN708);
            adaptor.addChild(root_0, TOKEN708_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nns_poss"

    public static class np_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "np"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:475:1: np : 'NP' TOKEN ;
    public final ChemicalChunkerParser.np_return np() throws RecognitionException {
        ChemicalChunkerParser.np_return retval = new ChemicalChunkerParser.np_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal709=null;
        Token TOKEN710=null;

        Object string_literal709_tree=null;
        Object TOKEN710_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:475:3: ( 'NP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:475:4: 'NP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal709=(Token)match(input,150,FOLLOW_150_in_np3321); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal709_tree = (Object)adaptor.create(string_literal709);
            adaptor.addChild(root_0, string_literal709_tree);
            }
            TOKEN710=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_np3323); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN710_tree = (Object)adaptor.create(TOKEN710);
            adaptor.addChild(root_0, TOKEN710_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "np"

    public static class nnp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:479:1: nnp : 'NNP' TOKEN ;
    public final ChemicalChunkerParser.nnp_return nnp() throws RecognitionException {
        ChemicalChunkerParser.nnp_return retval = new ChemicalChunkerParser.nnp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal711=null;
        Token TOKEN712=null;

        Object string_literal711_tree=null;
        Object TOKEN712_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:479:4: ( 'NNP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:479:5: 'NNP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal711=(Token)match(input,151,FOLLOW_151_in_nnp3331); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal711_tree = (Object)adaptor.create(string_literal711);
            adaptor.addChild(root_0, string_literal711_tree);
            }
            TOKEN712=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnp3333); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN712_tree = (Object)adaptor.create(TOKEN712);
            adaptor.addChild(root_0, TOKEN712_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnp"

    public static class np_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "np_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:483:1: np_poss : 'NP$' TOKEN ;
    public final ChemicalChunkerParser.np_poss_return np_poss() throws RecognitionException {
        ChemicalChunkerParser.np_poss_return retval = new ChemicalChunkerParser.np_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal713=null;
        Token TOKEN714=null;

        Object string_literal713_tree=null;
        Object TOKEN714_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:483:8: ( 'NP$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:483:9: 'NP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal713=(Token)match(input,152,FOLLOW_152_in_np_poss3341); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal713_tree = (Object)adaptor.create(string_literal713);
            adaptor.addChild(root_0, string_literal713_tree);
            }
            TOKEN714=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_np_poss3343); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN714_tree = (Object)adaptor.create(TOKEN714);
            adaptor.addChild(root_0, TOKEN714_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "np_poss"

    public static class nps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nps"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:486:1: nps : 'NPS' TOKEN ;
    public final ChemicalChunkerParser.nps_return nps() throws RecognitionException {
        ChemicalChunkerParser.nps_return retval = new ChemicalChunkerParser.nps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal715=null;
        Token TOKEN716=null;

        Object string_literal715_tree=null;
        Object TOKEN716_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:486:4: ( 'NPS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:486:5: 'NPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal715=(Token)match(input,153,FOLLOW_153_in_nps3350); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal715_tree = (Object)adaptor.create(string_literal715);
            adaptor.addChild(root_0, string_literal715_tree);
            }
            TOKEN716=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nps3352); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN716_tree = (Object)adaptor.create(TOKEN716);
            adaptor.addChild(root_0, TOKEN716_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nps"

    public static class nps_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nps_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:489:1: nps_poss : 'NPS$' TOKEN ;
    public final ChemicalChunkerParser.nps_poss_return nps_poss() throws RecognitionException {
        ChemicalChunkerParser.nps_poss_return retval = new ChemicalChunkerParser.nps_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal717=null;
        Token TOKEN718=null;

        Object string_literal717_tree=null;
        Object TOKEN718_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:489:9: ( 'NPS$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:489:10: 'NPS$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal717=(Token)match(input,154,FOLLOW_154_in_nps_poss3359); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal717_tree = (Object)adaptor.create(string_literal717);
            adaptor.addChild(root_0, string_literal717_tree);
            }
            TOKEN718=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nps_poss3361); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN718_tree = (Object)adaptor.create(TOKEN718);
            adaptor.addChild(root_0, TOKEN718_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nps_poss"

    public static class nr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nr"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:492:1: nr : 'NR' TOKEN ;
    public final ChemicalChunkerParser.nr_return nr() throws RecognitionException {
        ChemicalChunkerParser.nr_return retval = new ChemicalChunkerParser.nr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal719=null;
        Token TOKEN720=null;

        Object string_literal719_tree=null;
        Object TOKEN720_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:492:3: ( 'NR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:492:4: 'NR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal719=(Token)match(input,155,FOLLOW_155_in_nr3368); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal719_tree = (Object)adaptor.create(string_literal719);
            adaptor.addChild(root_0, string_literal719_tree);
            }
            TOKEN720=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nr3370); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN720_tree = (Object)adaptor.create(TOKEN720);
            adaptor.addChild(root_0, TOKEN720_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nr"

    public static class od_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "od"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:495:1: od : 'OD' TOKEN ;
    public final ChemicalChunkerParser.od_return od() throws RecognitionException {
        ChemicalChunkerParser.od_return retval = new ChemicalChunkerParser.od_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal721=null;
        Token TOKEN722=null;

        Object string_literal721_tree=null;
        Object TOKEN722_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:495:3: ( 'OD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:495:4: 'OD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal721=(Token)match(input,156,FOLLOW_156_in_od3377); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal721_tree = (Object)adaptor.create(string_literal721);
            adaptor.addChild(root_0, string_literal721_tree);
            }
            TOKEN722=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_od3379); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN722_tree = (Object)adaptor.create(TOKEN722);
            adaptor.addChild(root_0, TOKEN722_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "od"

    public static class pn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:498:1: pn : 'PN' TOKEN ;
    public final ChemicalChunkerParser.pn_return pn() throws RecognitionException {
        ChemicalChunkerParser.pn_return retval = new ChemicalChunkerParser.pn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal723=null;
        Token TOKEN724=null;

        Object string_literal723_tree=null;
        Object TOKEN724_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:498:3: ( 'PN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:498:4: 'PN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal723=(Token)match(input,157,FOLLOW_157_in_pn3386); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal723_tree = (Object)adaptor.create(string_literal723);
            adaptor.addChild(root_0, string_literal723_tree);
            }
            TOKEN724=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pn3388); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN724_tree = (Object)adaptor.create(TOKEN724);
            adaptor.addChild(root_0, TOKEN724_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pn"

    public static class pn_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pn_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:501:1: pn_poss : 'PN$' TOKEN ;
    public final ChemicalChunkerParser.pn_poss_return pn_poss() throws RecognitionException {
        ChemicalChunkerParser.pn_poss_return retval = new ChemicalChunkerParser.pn_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal725=null;
        Token TOKEN726=null;

        Object string_literal725_tree=null;
        Object TOKEN726_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:501:8: ( 'PN$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:501:9: 'PN$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal725=(Token)match(input,158,FOLLOW_158_in_pn_poss3395); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal725_tree = (Object)adaptor.create(string_literal725);
            adaptor.addChild(root_0, string_literal725_tree);
            }
            TOKEN726=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pn_poss3397); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN726_tree = (Object)adaptor.create(TOKEN726);
            adaptor.addChild(root_0, TOKEN726_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pn_poss"

    public static class pp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pp_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:504:1: pp_poss : 'PP$' TOKEN ;
    public final ChemicalChunkerParser.pp_poss_return pp_poss() throws RecognitionException {
        ChemicalChunkerParser.pp_poss_return retval = new ChemicalChunkerParser.pp_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal727=null;
        Token TOKEN728=null;

        Object string_literal727_tree=null;
        Object TOKEN728_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:504:8: ( 'PP$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:504:9: 'PP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal727=(Token)match(input,159,FOLLOW_159_in_pp_poss3404); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal727_tree = (Object)adaptor.create(string_literal727);
            adaptor.addChild(root_0, string_literal727_tree);
            }
            TOKEN728=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pp_poss3406); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN728_tree = (Object)adaptor.create(TOKEN728);
            adaptor.addChild(root_0, TOKEN728_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pp_poss"

    public static class pp_poss_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pp_poss_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:507:1: pp_poss_poss : 'PP$$' TOKEN ;
    public final ChemicalChunkerParser.pp_poss_poss_return pp_poss_poss() throws RecognitionException {
        ChemicalChunkerParser.pp_poss_poss_return retval = new ChemicalChunkerParser.pp_poss_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal729=null;
        Token TOKEN730=null;

        Object string_literal729_tree=null;
        Object TOKEN730_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:507:13: ( 'PP$$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:507:14: 'PP$$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal729=(Token)match(input,160,FOLLOW_160_in_pp_poss_poss3413); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal729_tree = (Object)adaptor.create(string_literal729);
            adaptor.addChild(root_0, string_literal729_tree);
            }
            TOKEN730=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pp_poss_poss3415); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN730_tree = (Object)adaptor.create(TOKEN730);
            adaptor.addChild(root_0, TOKEN730_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pp_poss_poss"

    public static class ppl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppl"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:510:1: ppl : 'PPL' TOKEN ;
    public final ChemicalChunkerParser.ppl_return ppl() throws RecognitionException {
        ChemicalChunkerParser.ppl_return retval = new ChemicalChunkerParser.ppl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal731=null;
        Token TOKEN732=null;

        Object string_literal731_tree=null;
        Object TOKEN732_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:510:4: ( 'PPL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:510:5: 'PPL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal731=(Token)match(input,161,FOLLOW_161_in_ppl3422); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal731_tree = (Object)adaptor.create(string_literal731);
            adaptor.addChild(root_0, string_literal731_tree);
            }
            TOKEN732=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppl3424); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN732_tree = (Object)adaptor.create(TOKEN732);
            adaptor.addChild(root_0, TOKEN732_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppl"

    public static class ppls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppls"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:513:1: ppls : 'PPLS' TOKEN ;
    public final ChemicalChunkerParser.ppls_return ppls() throws RecognitionException {
        ChemicalChunkerParser.ppls_return retval = new ChemicalChunkerParser.ppls_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal733=null;
        Token TOKEN734=null;

        Object string_literal733_tree=null;
        Object TOKEN734_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:513:5: ( 'PPLS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:513:6: 'PPLS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal733=(Token)match(input,162,FOLLOW_162_in_ppls3431); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal733_tree = (Object)adaptor.create(string_literal733);
            adaptor.addChild(root_0, string_literal733_tree);
            }
            TOKEN734=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppls3433); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN734_tree = (Object)adaptor.create(TOKEN734);
            adaptor.addChild(root_0, TOKEN734_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppls"

    public static class prp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:515:1: prp : 'PRP' TOKEN ;
    public final ChemicalChunkerParser.prp_return prp() throws RecognitionException {
        ChemicalChunkerParser.prp_return retval = new ChemicalChunkerParser.prp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal735=null;
        Token TOKEN736=null;

        Object string_literal735_tree=null;
        Object TOKEN736_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:515:5: ( 'PRP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:515:7: 'PRP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal735=(Token)match(input,163,FOLLOW_163_in_prp3441); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal735_tree = (Object)adaptor.create(string_literal735);
            adaptor.addChild(root_0, string_literal735_tree);
            }
            TOKEN736=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp3444); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN736_tree = (Object)adaptor.create(TOKEN736);
            adaptor.addChild(root_0, TOKEN736_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prp"

    public static class ppo_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppo"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:518:1: ppo : 'PPO' TOKEN ;
    public final ChemicalChunkerParser.ppo_return ppo() throws RecognitionException {
        ChemicalChunkerParser.ppo_return retval = new ChemicalChunkerParser.ppo_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal737=null;
        Token TOKEN738=null;

        Object string_literal737_tree=null;
        Object TOKEN738_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:518:4: ( 'PPO' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:518:5: 'PPO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal737=(Token)match(input,164,FOLLOW_164_in_ppo3451); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal737_tree = (Object)adaptor.create(string_literal737);
            adaptor.addChild(root_0, string_literal737_tree);
            }
            TOKEN738=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppo3453); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN738_tree = (Object)adaptor.create(TOKEN738);
            adaptor.addChild(root_0, TOKEN738_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppo"

    public static class pps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pps"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:521:1: pps : 'PPS' TOKEN ;
    public final ChemicalChunkerParser.pps_return pps() throws RecognitionException {
        ChemicalChunkerParser.pps_return retval = new ChemicalChunkerParser.pps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal739=null;
        Token TOKEN740=null;

        Object string_literal739_tree=null;
        Object TOKEN740_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:521:4: ( 'PPS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:521:5: 'PPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal739=(Token)match(input,165,FOLLOW_165_in_pps3460); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal739_tree = (Object)adaptor.create(string_literal739);
            adaptor.addChild(root_0, string_literal739_tree);
            }
            TOKEN740=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pps3462); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN740_tree = (Object)adaptor.create(TOKEN740);
            adaptor.addChild(root_0, TOKEN740_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pps"

    public static class ppss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:524:1: ppss : 'PPSS' TOKEN ;
    public final ChemicalChunkerParser.ppss_return ppss() throws RecognitionException {
        ChemicalChunkerParser.ppss_return retval = new ChemicalChunkerParser.ppss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal741=null;
        Token TOKEN742=null;

        Object string_literal741_tree=null;
        Object TOKEN742_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:524:5: ( 'PPSS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:524:6: 'PPSS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal741=(Token)match(input,166,FOLLOW_166_in_ppss3469); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal741_tree = (Object)adaptor.create(string_literal741);
            adaptor.addChild(root_0, string_literal741_tree);
            }
            TOKEN742=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppss3471); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN742_tree = (Object)adaptor.create(TOKEN742);
            adaptor.addChild(root_0, TOKEN742_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppss"

    public static class ql_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ql"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:527:1: ql : 'QL' TOKEN ;
    public final ChemicalChunkerParser.ql_return ql() throws RecognitionException {
        ChemicalChunkerParser.ql_return retval = new ChemicalChunkerParser.ql_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal743=null;
        Token TOKEN744=null;

        Object string_literal743_tree=null;
        Object TOKEN744_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:527:3: ( 'QL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:527:4: 'QL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal743=(Token)match(input,167,FOLLOW_167_in_ql3478); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal743_tree = (Object)adaptor.create(string_literal743);
            adaptor.addChild(root_0, string_literal743_tree);
            }
            TOKEN744=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ql3480); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN744_tree = (Object)adaptor.create(TOKEN744);
            adaptor.addChild(root_0, TOKEN744_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ql"

    public static class qlp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qlp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:530:1: qlp : 'QLP' TOKEN ;
    public final ChemicalChunkerParser.qlp_return qlp() throws RecognitionException {
        ChemicalChunkerParser.qlp_return retval = new ChemicalChunkerParser.qlp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal745=null;
        Token TOKEN746=null;

        Object string_literal745_tree=null;
        Object TOKEN746_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:530:4: ( 'QLP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:530:5: 'QLP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal745=(Token)match(input,168,FOLLOW_168_in_qlp3487); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal745_tree = (Object)adaptor.create(string_literal745);
            adaptor.addChild(root_0, string_literal745_tree);
            }
            TOKEN746=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_qlp3489); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN746_tree = (Object)adaptor.create(TOKEN746);
            adaptor.addChild(root_0, TOKEN746_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qlp"

    public static class rb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:533:1: rb : 'RB' TOKEN ;
    public final ChemicalChunkerParser.rb_return rb() throws RecognitionException {
        ChemicalChunkerParser.rb_return retval = new ChemicalChunkerParser.rb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal747=null;
        Token TOKEN748=null;

        Object string_literal747_tree=null;
        Object TOKEN748_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:533:3: ( 'RB' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:533:4: 'RB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal747=(Token)match(input,169,FOLLOW_169_in_rb3496); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal747_tree = (Object)adaptor.create(string_literal747);
            adaptor.addChild(root_0, string_literal747_tree);
            }
            TOKEN748=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rb3498); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN748_tree = (Object)adaptor.create(TOKEN748);
            adaptor.addChild(root_0, TOKEN748_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rb"

    public static class rbr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbr"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:536:1: rbr : 'RBR' TOKEN ;
    public final ChemicalChunkerParser.rbr_return rbr() throws RecognitionException {
        ChemicalChunkerParser.rbr_return retval = new ChemicalChunkerParser.rbr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal749=null;
        Token TOKEN750=null;

        Object string_literal749_tree=null;
        Object TOKEN750_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:536:4: ( 'RBR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:536:5: 'RBR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal749=(Token)match(input,170,FOLLOW_170_in_rbr3505); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal749_tree = (Object)adaptor.create(string_literal749);
            adaptor.addChild(root_0, string_literal749_tree);
            }
            TOKEN750=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbr3507); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN750_tree = (Object)adaptor.create(TOKEN750);
            adaptor.addChild(root_0, TOKEN750_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbr"

    public static class rbconj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbconj"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:539:1: rbconj : 'RB-CONJ' TOKEN ;
    public final ChemicalChunkerParser.rbconj_return rbconj() throws RecognitionException {
        ChemicalChunkerParser.rbconj_return retval = new ChemicalChunkerParser.rbconj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal751=null;
        Token TOKEN752=null;

        Object string_literal751_tree=null;
        Object TOKEN752_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:539:8: ( 'RB-CONJ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:539:10: 'RB-CONJ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal751=(Token)match(input,171,FOLLOW_171_in_rbconj3516); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal751_tree = (Object)adaptor.create(string_literal751);
            adaptor.addChild(root_0, string_literal751_tree);
            }
            TOKEN752=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbconj3519); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN752_tree = (Object)adaptor.create(TOKEN752);
            adaptor.addChild(root_0, TOKEN752_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbconj"

    public static class rbt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbt"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:542:1: rbt : 'RBT' TOKEN ;
    public final ChemicalChunkerParser.rbt_return rbt() throws RecognitionException {
        ChemicalChunkerParser.rbt_return retval = new ChemicalChunkerParser.rbt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal753=null;
        Token TOKEN754=null;

        Object string_literal753_tree=null;
        Object TOKEN754_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:542:4: ( 'RBT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:542:5: 'RBT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal753=(Token)match(input,172,FOLLOW_172_in_rbt3527); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal753_tree = (Object)adaptor.create(string_literal753);
            adaptor.addChild(root_0, string_literal753_tree);
            }
            TOKEN754=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbt3529); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN754_tree = (Object)adaptor.create(TOKEN754);
            adaptor.addChild(root_0, TOKEN754_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbt"

    public static class rbs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbs"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:545:1: rbs : 'RBS' TOKEN ;
    public final ChemicalChunkerParser.rbs_return rbs() throws RecognitionException {
        ChemicalChunkerParser.rbs_return retval = new ChemicalChunkerParser.rbs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal755=null;
        Token TOKEN756=null;

        Object string_literal755_tree=null;
        Object TOKEN756_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:545:4: ( 'RBS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:545:5: 'RBS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal755=(Token)match(input,173,FOLLOW_173_in_rbs3536); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal755_tree = (Object)adaptor.create(string_literal755);
            adaptor.addChild(root_0, string_literal755_tree);
            }
            TOKEN756=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbs3538); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN756_tree = (Object)adaptor.create(TOKEN756);
            adaptor.addChild(root_0, TOKEN756_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbs"

    public static class rn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:549:1: rn : 'RN' TOKEN ;
    public final ChemicalChunkerParser.rn_return rn() throws RecognitionException {
        ChemicalChunkerParser.rn_return retval = new ChemicalChunkerParser.rn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal757=null;
        Token TOKEN758=null;

        Object string_literal757_tree=null;
        Object TOKEN758_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:549:3: ( 'RN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:549:4: 'RN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal757=(Token)match(input,174,FOLLOW_174_in_rn3546); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal757_tree = (Object)adaptor.create(string_literal757);
            adaptor.addChild(root_0, string_literal757_tree);
            }
            TOKEN758=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rn3548); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN758_tree = (Object)adaptor.create(TOKEN758);
            adaptor.addChild(root_0, TOKEN758_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rn"

    public static class rp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:552:1: rp : 'RP' TOKEN ;
    public final ChemicalChunkerParser.rp_return rp() throws RecognitionException {
        ChemicalChunkerParser.rp_return retval = new ChemicalChunkerParser.rp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal759=null;
        Token TOKEN760=null;

        Object string_literal759_tree=null;
        Object TOKEN760_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:552:3: ( 'RP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:552:4: 'RP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal759=(Token)match(input,175,FOLLOW_175_in_rp3555); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal759_tree = (Object)adaptor.create(string_literal759);
            adaptor.addChild(root_0, string_literal759_tree);
            }
            TOKEN760=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rp3557); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN760_tree = (Object)adaptor.create(TOKEN760);
            adaptor.addChild(root_0, TOKEN760_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rp"

    public static class sym_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sym"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:555:1: sym : 'SYM' TOKEN ;
    public final ChemicalChunkerParser.sym_return sym() throws RecognitionException {
        ChemicalChunkerParser.sym_return retval = new ChemicalChunkerParser.sym_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal761=null;
        Token TOKEN762=null;

        Object string_literal761_tree=null;
        Object TOKEN762_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:555:5: ( 'SYM' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:555:7: 'SYM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal761=(Token)match(input,176,FOLLOW_176_in_sym3566); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal761_tree = (Object)adaptor.create(string_literal761);
            adaptor.addChild(root_0, string_literal761_tree);
            }
            TOKEN762=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_sym3568); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN762_tree = (Object)adaptor.create(TOKEN762);
            adaptor.addChild(root_0, TOKEN762_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sym"

    public static class to_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:558:1: to : 'TO' TOKEN ;
    public final ChemicalChunkerParser.to_return to() throws RecognitionException {
        ChemicalChunkerParser.to_return retval = new ChemicalChunkerParser.to_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal763=null;
        Token TOKEN764=null;

        Object string_literal763_tree=null;
        Object TOKEN764_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:558:3: ( 'TO' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:558:4: 'TO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal763=(Token)match(input,177,FOLLOW_177_in_to3575); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal763_tree = (Object)adaptor.create(string_literal763);
            adaptor.addChild(root_0, string_literal763_tree);
            }
            TOKEN764=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_to3577); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN764_tree = (Object)adaptor.create(TOKEN764);
            adaptor.addChild(root_0, TOKEN764_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "to"

    public static class uh_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uh"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:561:1: uh : 'UH' TOKEN ;
    public final ChemicalChunkerParser.uh_return uh() throws RecognitionException {
        ChemicalChunkerParser.uh_return retval = new ChemicalChunkerParser.uh_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal765=null;
        Token TOKEN766=null;

        Object string_literal765_tree=null;
        Object TOKEN766_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:561:3: ( 'UH' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:561:4: 'UH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal765=(Token)match(input,178,FOLLOW_178_in_uh3584); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal765_tree = (Object)adaptor.create(string_literal765);
            adaptor.addChild(root_0, string_literal765_tree);
            }
            TOKEN766=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_uh3586); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN766_tree = (Object)adaptor.create(TOKEN766);
            adaptor.addChild(root_0, TOKEN766_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "uh"

    public static class vb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:564:1: vb : 'VB' TOKEN ;
    public final ChemicalChunkerParser.vb_return vb() throws RecognitionException {
        ChemicalChunkerParser.vb_return retval = new ChemicalChunkerParser.vb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal767=null;
        Token TOKEN768=null;

        Object string_literal767_tree=null;
        Object TOKEN768_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:564:3: ( 'VB' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:564:4: 'VB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal767=(Token)match(input,179,FOLLOW_179_in_vb3593); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal767_tree = (Object)adaptor.create(string_literal767);
            adaptor.addChild(root_0, string_literal767_tree);
            }
            TOKEN768=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vb3595); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN768_tree = (Object)adaptor.create(TOKEN768);
            adaptor.addChild(root_0, TOKEN768_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vb"

    public static class vbp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:566:1: vbp : 'VBP' TOKEN ;
    public final ChemicalChunkerParser.vbp_return vbp() throws RecognitionException {
        ChemicalChunkerParser.vbp_return retval = new ChemicalChunkerParser.vbp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal769=null;
        Token TOKEN770=null;

        Object string_literal769_tree=null;
        Object TOKEN770_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:566:5: ( 'VBP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:566:7: 'VBP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal769=(Token)match(input,180,FOLLOW_180_in_vbp3603); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal769_tree = (Object)adaptor.create(string_literal769);
            adaptor.addChild(root_0, string_literal769_tree);
            }
            TOKEN770=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbp3605); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN770_tree = (Object)adaptor.create(TOKEN770);
            adaptor.addChild(root_0, TOKEN770_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbp"

    public static class vbd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbd"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:570:1: vbd : 'VBD' TOKEN ;
    public final ChemicalChunkerParser.vbd_return vbd() throws RecognitionException {
        ChemicalChunkerParser.vbd_return retval = new ChemicalChunkerParser.vbd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal771=null;
        Token TOKEN772=null;

        Object string_literal771_tree=null;
        Object TOKEN772_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:570:4: ( 'VBD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:570:5: 'VBD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal771=(Token)match(input,181,FOLLOW_181_in_vbd3614); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal771_tree = (Object)adaptor.create(string_literal771);
            adaptor.addChild(root_0, string_literal771_tree);
            }
            TOKEN772=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbd3616); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN772_tree = (Object)adaptor.create(TOKEN772);
            adaptor.addChild(root_0, TOKEN772_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbd"

    public static class vbg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbg"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:573:1: vbg : 'VBG' TOKEN ;
    public final ChemicalChunkerParser.vbg_return vbg() throws RecognitionException {
        ChemicalChunkerParser.vbg_return retval = new ChemicalChunkerParser.vbg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal773=null;
        Token TOKEN774=null;

        Object string_literal773_tree=null;
        Object TOKEN774_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:573:4: ( 'VBG' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:573:5: 'VBG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal773=(Token)match(input,182,FOLLOW_182_in_vbg3623); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal773_tree = (Object)adaptor.create(string_literal773);
            adaptor.addChild(root_0, string_literal773_tree);
            }
            TOKEN774=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbg3625); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN774_tree = (Object)adaptor.create(TOKEN774);
            adaptor.addChild(root_0, TOKEN774_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbg"

    public static class vbn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:576:1: vbn : 'VBN' TOKEN ;
    public final ChemicalChunkerParser.vbn_return vbn() throws RecognitionException {
        ChemicalChunkerParser.vbn_return retval = new ChemicalChunkerParser.vbn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal775=null;
        Token TOKEN776=null;

        Object string_literal775_tree=null;
        Object TOKEN776_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:576:4: ( 'VBN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:576:5: 'VBN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal775=(Token)match(input,183,FOLLOW_183_in_vbn3632); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal775_tree = (Object)adaptor.create(string_literal775);
            adaptor.addChild(root_0, string_literal775_tree);
            }
            TOKEN776=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbn3634); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN776_tree = (Object)adaptor.create(TOKEN776);
            adaptor.addChild(root_0, TOKEN776_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbn"

    public static class vbz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbz"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:579:1: vbz : 'VBZ' TOKEN ;
    public final ChemicalChunkerParser.vbz_return vbz() throws RecognitionException {
        ChemicalChunkerParser.vbz_return retval = new ChemicalChunkerParser.vbz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal777=null;
        Token TOKEN778=null;

        Object string_literal777_tree=null;
        Object TOKEN778_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:579:4: ( 'VBZ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:579:5: 'VBZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal777=(Token)match(input,184,FOLLOW_184_in_vbz3641); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal777_tree = (Object)adaptor.create(string_literal777);
            adaptor.addChild(root_0, string_literal777_tree);
            }
            TOKEN778=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbz3643); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN778_tree = (Object)adaptor.create(TOKEN778);
            adaptor.addChild(root_0, TOKEN778_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbz"

    public static class wdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wdt"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:582:1: wdt : 'WDT' TOKEN ;
    public final ChemicalChunkerParser.wdt_return wdt() throws RecognitionException {
        ChemicalChunkerParser.wdt_return retval = new ChemicalChunkerParser.wdt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal779=null;
        Token TOKEN780=null;

        Object string_literal779_tree=null;
        Object TOKEN780_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:582:4: ( 'WDT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:582:5: 'WDT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal779=(Token)match(input,185,FOLLOW_185_in_wdt3650); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal779_tree = (Object)adaptor.create(string_literal779);
            adaptor.addChild(root_0, string_literal779_tree);
            }
            TOKEN780=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wdt3652); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN780_tree = (Object)adaptor.create(TOKEN780);
            adaptor.addChild(root_0, TOKEN780_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wdt"

    public static class wp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:585:1: wp_poss : 'WP$' TOKEN ;
    public final ChemicalChunkerParser.wp_poss_return wp_poss() throws RecognitionException {
        ChemicalChunkerParser.wp_poss_return retval = new ChemicalChunkerParser.wp_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal781=null;
        Token TOKEN782=null;

        Object string_literal781_tree=null;
        Object TOKEN782_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:585:8: ( 'WP$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:585:9: 'WP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal781=(Token)match(input,186,FOLLOW_186_in_wp_poss3659); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal781_tree = (Object)adaptor.create(string_literal781);
            adaptor.addChild(root_0, string_literal781_tree);
            }
            TOKEN782=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp_poss3661); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN782_tree = (Object)adaptor.create(TOKEN782);
            adaptor.addChild(root_0, TOKEN782_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wp_poss"

    public static class wpo_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wpo"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:589:1: wpo : 'WPO' TOKEN ;
    public final ChemicalChunkerParser.wpo_return wpo() throws RecognitionException {
        ChemicalChunkerParser.wpo_return retval = new ChemicalChunkerParser.wpo_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal783=null;
        Token TOKEN784=null;

        Object string_literal783_tree=null;
        Object TOKEN784_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:589:4: ( 'WPO' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:589:5: 'WPO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal783=(Token)match(input,187,FOLLOW_187_in_wpo3669); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal783_tree = (Object)adaptor.create(string_literal783);
            adaptor.addChild(root_0, string_literal783_tree);
            }
            TOKEN784=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wpo3671); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN784_tree = (Object)adaptor.create(TOKEN784);
            adaptor.addChild(root_0, TOKEN784_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wpo"

    public static class wps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wps"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:592:1: wps : 'WPS' TOKEN ;
    public final ChemicalChunkerParser.wps_return wps() throws RecognitionException {
        ChemicalChunkerParser.wps_return retval = new ChemicalChunkerParser.wps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal785=null;
        Token TOKEN786=null;

        Object string_literal785_tree=null;
        Object TOKEN786_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:592:4: ( 'WPS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:592:5: 'WPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal785=(Token)match(input,188,FOLLOW_188_in_wps3678); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal785_tree = (Object)adaptor.create(string_literal785);
            adaptor.addChild(root_0, string_literal785_tree);
            }
            TOKEN786=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wps3680); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN786_tree = (Object)adaptor.create(TOKEN786);
            adaptor.addChild(root_0, TOKEN786_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wps"

    public static class wql_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wql"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:596:1: wql : 'WQL' TOKEN ;
    public final ChemicalChunkerParser.wql_return wql() throws RecognitionException {
        ChemicalChunkerParser.wql_return retval = new ChemicalChunkerParser.wql_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal787=null;
        Token TOKEN788=null;

        Object string_literal787_tree=null;
        Object TOKEN788_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:596:4: ( 'WQL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:596:5: 'WQL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal787=(Token)match(input,189,FOLLOW_189_in_wql3688); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal787_tree = (Object)adaptor.create(string_literal787);
            adaptor.addChild(root_0, string_literal787_tree);
            }
            TOKEN788=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wql3690); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN788_tree = (Object)adaptor.create(TOKEN788);
            adaptor.addChild(root_0, TOKEN788_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wql"

    public static class wrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wrb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:599:1: wrb : 'WRB' TOKEN ;
    public final ChemicalChunkerParser.wrb_return wrb() throws RecognitionException {
        ChemicalChunkerParser.wrb_return retval = new ChemicalChunkerParser.wrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal789=null;
        Token TOKEN790=null;

        Object string_literal789_tree=null;
        Object TOKEN790_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:599:4: ( 'WRB' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:599:5: 'WRB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal789=(Token)match(input,190,FOLLOW_190_in_wrb3697); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal789_tree = (Object)adaptor.create(string_literal789);
            adaptor.addChild(root_0, string_literal789_tree);
            }
            TOKEN790=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wrb3699); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN790_tree = (Object)adaptor.create(TOKEN790);
            adaptor.addChild(root_0, TOKEN790_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wrb"

    public static class pdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pdt"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:601:1: pdt : 'PDT' TOKEN ;
    public final ChemicalChunkerParser.pdt_return pdt() throws RecognitionException {
        ChemicalChunkerParser.pdt_return retval = new ChemicalChunkerParser.pdt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal791=null;
        Token TOKEN792=null;

        Object string_literal791_tree=null;
        Object TOKEN792_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:601:6: ( 'PDT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:601:8: 'PDT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal791=(Token)match(input,191,FOLLOW_191_in_pdt3708); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal791_tree = (Object)adaptor.create(string_literal791);
            adaptor.addChild(root_0, string_literal791_tree);
            }
            TOKEN792=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pdt3710); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN792_tree = (Object)adaptor.create(TOKEN792);
            adaptor.addChild(root_0, TOKEN792_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pdt"

    // $ANTLR start synpred2_ChemicalChunker
    public final void synpred2_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:14: ( sentence )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:14: sentence
        {
        pushFollow(FOLLOW_sentence_in_synpred2_ChemicalChunker230);
        sentence();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_ChemicalChunker

    // $ANTLR start synpred3_ChemicalChunker
    public final void synpred3_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:23: ( unmatchedPhrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:23: unmatchedPhrase
        {
        pushFollow(FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker232);
        unmatchedPhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_ChemicalChunker

    // $ANTLR start synpred4_ChemicalChunker
    public final void synpred4_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:45: ( comma )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:45: comma
        {
        pushFollow(FOLLOW_comma_in_synpred4_ChemicalChunker240);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_ChemicalChunker

    // $ANTLR start synpred6_ChemicalChunker
    public final void synpred6_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:13: ( nounphrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:13: nounphrase
        {
        pushFollow(FOLLOW_nounphrase_in_synpred6_ChemicalChunker253);
        nounphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_ChemicalChunker

    // $ANTLR start synpred7_ChemicalChunker
    public final void synpred7_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:24: ( verbphrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:24: verbphrase
        {
        pushFollow(FOLLOW_verbphrase_in_synpred7_ChemicalChunker255);
        verbphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_ChemicalChunker

    // $ANTLR start synpred8_ChemicalChunker
    public final void synpred8_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:35: ( prepphrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:35: prepphrase
        {
        pushFollow(FOLLOW_prepphrase_in_synpred8_ChemicalChunker257);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_ChemicalChunker

    // $ANTLR start synpred9_ChemicalChunker
    public final void synpred9_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:49: ( advAdj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:49: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred9_ChemicalChunker262);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_ChemicalChunker

    // $ANTLR start synpred10_ChemicalChunker
    public final void synpred10_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:56: ( colon )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:56: colon
        {
        pushFollow(FOLLOW_colon_in_synpred10_ChemicalChunker264);
        colon();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_ChemicalChunker

    // $ANTLR start synpred11_ChemicalChunker
    public final void synpred11_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:65: ( conjunction )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:65: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred11_ChemicalChunker269);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_ChemicalChunker

    // $ANTLR start synpred12_ChemicalChunker
    public final void synpred12_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:5: ( fw )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:5: fw
        {
        pushFollow(FOLLOW_fw_in_synpred12_ChemicalChunker302);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_ChemicalChunker

    // $ANTLR start synpred13_ChemicalChunker
    public final void synpred13_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:8: ( noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:8: noun
        {
        pushFollow(FOLLOW_noun_in_synpred13_ChemicalChunker304);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_ChemicalChunker

    // $ANTLR start synpred14_ChemicalChunker
    public final void synpred14_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:13: ( verb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:13: verb
        {
        pushFollow(FOLLOW_verb_in_synpred14_ChemicalChunker306);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_ChemicalChunker

    // $ANTLR start synpred16_ChemicalChunker
    public final void synpred16_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:24: ( dt )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:24: dt
        {
        pushFollow(FOLLOW_dt_in_synpred16_ChemicalChunker310);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred16_ChemicalChunker

    // $ANTLR start synpred17_ChemicalChunker
    public final void synpred17_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:27: ( oscarcd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:27: oscarcd
        {
        pushFollow(FOLLOW_oscarcd_in_synpred17_ChemicalChunker312);
        oscarcd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred17_ChemicalChunker

    // $ANTLR start synpred18_ChemicalChunker
    public final void synpred18_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:35: ( oscarcm )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:35: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred18_ChemicalChunker314);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred18_ChemicalChunker

    // $ANTLR start synpred19_ChemicalChunker
    public final void synpred19_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:43: ( oscarrn )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:43: oscarrn
        {
        pushFollow(FOLLOW_oscarrn_in_synpred19_ChemicalChunker316);
        oscarrn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_ChemicalChunker

    // $ANTLR start synpred20_ChemicalChunker
    public final void synpred20_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:51: ( oscaront )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:51: oscaront
        {
        pushFollow(FOLLOW_oscaront_in_synpred20_ChemicalChunker318);
        oscaront();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred20_ChemicalChunker

    // $ANTLR start synpred21_ChemicalChunker
    public final void synpred21_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:60: ( brackets )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:60: brackets
        {
        pushFollow(FOLLOW_brackets_in_synpred21_ChemicalChunker320);
        brackets();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred21_ChemicalChunker

    // $ANTLR start synpred22_ChemicalChunker
    public final void synpred22_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:69: ( sym )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:69: sym
        {
        pushFollow(FOLLOW_sym_in_synpred22_ChemicalChunker322);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred22_ChemicalChunker

    // $ANTLR start synpred26_ChemicalChunker
    public final void synpred26_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:86: ( number )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:86: number
        {
        pushFollow(FOLLOW_number_in_synpred26_ChemicalChunker330);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred26_ChemicalChunker

    // $ANTLR start synpred27_ChemicalChunker
    public final void synpred27_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:93: ( comma )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:93: comma
        {
        pushFollow(FOLLOW_comma_in_synpred27_ChemicalChunker332);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred27_ChemicalChunker

    // $ANTLR start synpred28_ChemicalChunker
    public final void synpred28_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:23: ( dt )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:23: dt
        {
        pushFollow(FOLLOW_dt_in_synpred28_ChemicalChunker365);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred28_ChemicalChunker

    // $ANTLR start synpred29_ChemicalChunker
    public final void synpred29_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:28: ( apparatus )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:28: apparatus
        {
        pushFollow(FOLLOW_apparatus_in_synpred29_ChemicalChunker369);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred29_ChemicalChunker

    // $ANTLR start synpred30_ChemicalChunker
    public final void synpred30_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:38: ( advAdj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:38: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred30_ChemicalChunker371);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_ChemicalChunker

    // $ANTLR start synpred31_ChemicalChunker
    public final void synpred31_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:49: ( dissolvePhrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:49: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred31_ChemicalChunker377);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred31_ChemicalChunker

    // $ANTLR start synpred32_ChemicalChunker
    public final void synpred32_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:64: ( noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:64: noun
        {
        pushFollow(FOLLOW_noun_in_synpred32_ChemicalChunker379);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred32_ChemicalChunker

    // $ANTLR start synpred33_ChemicalChunker
    public final void synpred33_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:69: ( number )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:69: number
        {
        pushFollow(FOLLOW_number_in_synpred33_ChemicalChunker381);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred33_ChemicalChunker

    // $ANTLR start synpred34_ChemicalChunker
    public final void synpred34_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:76: ( ratio )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:76: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred34_ChemicalChunker383);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred34_ChemicalChunker

    // $ANTLR start synpred35_ChemicalChunker
    public final void synpred35_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:88: ( conjunction )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:88: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred35_ChemicalChunker391);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred35_ChemicalChunker

    // $ANTLR start synpred36_ChemicalChunker
    public final void synpred36_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:101: ( advAdj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:101: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred36_ChemicalChunker394);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred36_ChemicalChunker

    // $ANTLR start synpred37_ChemicalChunker
    public final void synpred37_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:88: ( ( conjunction )* ( advAdj )* noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:88: ( conjunction )* ( advAdj )* noun
        {
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:88: ( conjunction )*
        loop107:
        do {
            int alt107=2;
            alt107 = dfa107.predict(input);
            switch (alt107) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred37_ChemicalChunker391);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop107;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:101: ( advAdj )*
        loop108:
        do {
            int alt108=2;
            alt108 = dfa108.predict(input);
            switch (alt108) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
        	    {
        	    pushFollow(FOLLOW_advAdj_in_synpred37_ChemicalChunker394);
        	    advAdj();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop108;
            }
        } while (true);

        pushFollow(FOLLOW_noun_in_synpred37_ChemicalChunker398);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred37_ChemicalChunker

    // $ANTLR start synpred38_ChemicalChunker
    public final void synpred38_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:115: ( number )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:115: number
        {
        pushFollow(FOLLOW_number_in_synpred38_ChemicalChunker400);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred38_ChemicalChunker

    // $ANTLR start synpred39_ChemicalChunker
    public final void synpred39_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:122: ( ratio )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:122: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred39_ChemicalChunker402);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred39_ChemicalChunker

    // $ANTLR start synpred40_ChemicalChunker
    public final void synpred40_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:134: ( prepphraseOf )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:134: prepphraseOf
        {
        pushFollow(FOLLOW_prepphraseOf_in_synpred40_ChemicalChunker410);
        prepphraseOf();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred40_ChemicalChunker

    // $ANTLR start synpred41_ChemicalChunker
    public final void synpred41_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:161: ( dissolvePhrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:161: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred41_ChemicalChunker415);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred41_ChemicalChunker

    // $ANTLR start synpred42_ChemicalChunker
    public final void synpred42_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:148: ( prepphraseIN ( dissolvePhrase )? )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:148: prepphraseIN ( dissolvePhrase )?
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred42_ChemicalChunker413);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:161: ( dissolvePhrase )?
        int alt109=2;
        switch ( input.LA(1) ) {
            case 38:
            case 54:
            case 99:
            case 107:
            case 123:
                {
                alt109=1;
                }
                break;
        }

        switch (alt109) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dissolvePhrase
                {
                pushFollow(FOLLOW_dissolvePhrase_in_synpred42_ChemicalChunker415);
                dissolvePhrase();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred42_ChemicalChunker

    // $ANTLR start synpred43_ChemicalChunker
    public final void synpred43_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:5: ( dissolveStructure1 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:5: dissolveStructure1
        {
        pushFollow(FOLLOW_dissolveStructure1_in_synpred43_ChemicalChunker430);
        dissolveStructure1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred43_ChemicalChunker

    // $ANTLR start synpred45_ChemicalChunker
    public final void synpred45_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:14: ( inin molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:14: inin molecule
        {
        pushFollow(FOLLOW_inin_in_synpred45_ChemicalChunker479);
        inin();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_molecule_in_synpred45_ChemicalChunker481);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred45_ChemicalChunker

    // $ANTLR start synpred47_ChemicalChunker
    public final void synpred47_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:24: ( to )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:24: to
        {
        pushFollow(FOLLOW_to_in_synpred47_ChemicalChunker527);
        to();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred47_ChemicalChunker

    // $ANTLR start synpred48_ChemicalChunker
    public final void synpred48_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:28: ( inAll )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:28: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred48_ChemicalChunker530);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred48_ChemicalChunker

    // $ANTLR start synpred53_ChemicalChunker
    public final void synpred53_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:59: ( verb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:59: verb
        {
        pushFollow(FOLLOW_verb_in_synpred53_ChemicalChunker546);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred53_ChemicalChunker

    // $ANTLR start synpred54_ChemicalChunker
    public final void synpred54_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:65: ( md )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:65: md
        {
        pushFollow(FOLLOW_md_in_synpred54_ChemicalChunker549);
        md();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred54_ChemicalChunker

    // $ANTLR start synpred55_ChemicalChunker
    public final void synpred55_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:69: ( adv )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:69: adv
        {
        pushFollow(FOLLOW_adv_in_synpred55_ChemicalChunker552);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred55_ChemicalChunker

    // $ANTLR start synpred56_ChemicalChunker
    public final void synpred56_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:74: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:74: adj
        {
        pushFollow(FOLLOW_adj_in_synpred56_ChemicalChunker555);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred56_ChemicalChunker

    // $ANTLR start synpred57_ChemicalChunker
    public final void synpred57_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:79: ( neg )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:79: neg
        {
        pushFollow(FOLLOW_neg_in_synpred57_ChemicalChunker558);
        neg();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred57_ChemicalChunker

    // $ANTLR start synpred58_ChemicalChunker
    public final void synpred58_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:45: ( ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:45: ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
        {
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:45: ( md )*
        loop110:
        do {
            int alt110=2;
            switch ( input.LA(1) ) {
            case 144:
                {
                alt110=1;
                }
                break;

            }

            switch (alt110) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred58_ChemicalChunker537);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop110;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:49: ( adv )*
        loop111:
        do {
            int alt111=2;
            switch ( input.LA(1) ) {
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 175:
                {
                alt111=1;
                }
                break;

            }

            switch (alt111) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred58_ChemicalChunker540);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop111;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:54: ( adj )?
        int alt112=2;
        switch ( input.LA(1) ) {
            case 12:
            case 13:
            case 140:
            case 141:
            case 142:
            case 143:
                {
                alt112=1;
                }
                break;
        }

        switch (alt112) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred58_ChemicalChunker543);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:59: ( verb )+
        int cnt113=0;
        loop113:
        do {
            int alt113=2;
            switch ( input.LA(1) ) {
            case 55:
            case 56:
            case 57:
            case 58:
            case 61:
            case 62:
            case 63:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
            case 70:
            case 72:
            case 73:
            case 74:
            case 75:
            case 77:
            case 79:
            case 81:
            case 82:
            case 83:
            case 84:
            case 86:
            case 88:
            case 89:
            case 90:
            case 92:
            case 93:
            case 95:
            case 96:
            case 97:
            case 179:
            case 180:
            case 181:
            case 182:
            case 183:
            case 184:
                {
                alt113=1;
                }
                break;

            }

            switch (alt113) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: verb
        	    {
        	    pushFollow(FOLLOW_verb_in_synpred58_ChemicalChunker546);
        	    verb();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt113 >= 1 ) break loop113;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(113, input);
                    throw eee;
            }
            cnt113++;
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:65: ( md )*
        loop114:
        do {
            int alt114=2;
            switch ( input.LA(1) ) {
            case 144:
                {
                alt114=1;
                }
                break;

            }

            switch (alt114) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred58_ChemicalChunker549);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop114;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:69: ( adv )*
        loop115:
        do {
            int alt115=2;
            switch ( input.LA(1) ) {
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 175:
                {
                alt115=1;
                }
                break;

            }

            switch (alt115) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred58_ChemicalChunker552);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop115;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:74: ( adj )?
        int alt116=2;
        switch ( input.LA(1) ) {
            case 12:
            case 13:
            case 140:
            case 141:
            case 142:
            case 143:
                {
                alt116=1;
                }
                break;
        }

        switch (alt116) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred58_ChemicalChunker555);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:79: ( neg )?
        int alt117=2;
        switch ( input.LA(1) ) {
            case 101:
                {
                alt117=1;
                }
                break;
        }

        switch (alt117) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: neg
                {
                pushFollow(FOLLOW_neg_in_synpred58_ChemicalChunker558);
                neg();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred58_ChemicalChunker

    // $ANTLR start synpred59_ChemicalChunker
    public final void synpred59_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:87: ( inoff )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:87: inoff
        {
        pushFollow(FOLLOW_inoff_in_synpred59_ChemicalChunker564);
        inoff();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred59_ChemicalChunker

    // $ANTLR start synpred62_ChemicalChunker
    public final void synpred62_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:95: ( ( cc )? ( comma )? prepphrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:95: ( cc )? ( comma )? prepphrase
        {
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:95: ( cc )?
        int alt118=2;
        switch ( input.LA(1) ) {
            case 122:
                {
                alt118=1;
                }
                break;
        }

        switch (alt118) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
                {
                pushFollow(FOLLOW_cc_in_synpred62_ChemicalChunker568);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:99: ( comma )?
        int alt119=2;
        switch ( input.LA(1) ) {
            case 99:
                {
                alt119=1;
                }
                break;
        }

        switch (alt119) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: comma
                {
                pushFollow(FOLLOW_comma_in_synpred62_ChemicalChunker571);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_prepphrase_in_synpred62_ChemicalChunker574);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred62_ChemicalChunker

    // $ANTLR start synpred103_ChemicalChunker
    public final void synpred103_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:22: ( wpo )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:22: wpo
        {
        pushFollow(FOLLOW_wpo_in_synpred103_ChemicalChunker683);
        wpo();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred103_ChemicalChunker

    // $ANTLR start synpred104_ChemicalChunker
    public final void synpred104_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:26: ( wpo )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:26: wpo
        {
        pushFollow(FOLLOW_wpo_in_synpred104_ChemicalChunker685);
        wpo();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred104_ChemicalChunker

    // $ANTLR start synpred110_ChemicalChunker
    public final void synpred110_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:13: ( citation )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:13: citation
        {
        pushFollow(FOLLOW_citation_in_synpred110_ChemicalChunker705);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred110_ChemicalChunker

    // $ANTLR start synpred111_ChemicalChunker
    public final void synpred111_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:22: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:22: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred111_ChemicalChunker707);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred111_ChemicalChunker

    // $ANTLR start synpred112_ChemicalChunker
    public final void synpred112_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:31: ( apparatus )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:31: apparatus
        {
        pushFollow(FOLLOW_apparatus_in_synpred112_ChemicalChunker709);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred112_ChemicalChunker

    // $ANTLR start synpred113_ChemicalChunker
    public final void synpred113_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:41: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:41: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred113_ChemicalChunker711);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred113_ChemicalChunker

    // $ANTLR start synpred114_ChemicalChunker
    public final void synpred114_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:57: ( nnstate )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:57: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred114_ChemicalChunker713);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred114_ChemicalChunker

    // $ANTLR start synpred115_ChemicalChunker
    public final void synpred115_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:65: ( nn )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:65: nn
        {
        pushFollow(FOLLOW_nn_in_synpred115_ChemicalChunker715);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred115_ChemicalChunker

    // $ANTLR start synpred118_ChemicalChunker
    public final void synpred118_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:76: ( nnadd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:76: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred118_ChemicalChunker721);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred118_ChemicalChunker

    // $ANTLR start synpred122_ChemicalChunker
    public final void synpred122_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:119: ( range )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:119: range
        {
        pushFollow(FOLLOW_range_in_synpred122_ChemicalChunker729);
        range();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred122_ChemicalChunker

    // $ANTLR start synpred123_ChemicalChunker
    public final void synpred123_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:125: ( amount )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:125: amount
        {
        pushFollow(FOLLOW_amount_in_synpred123_ChemicalChunker731);
        amount();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred123_ChemicalChunker

    // $ANTLR start synpred124_ChemicalChunker
    public final void synpred124_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:132: ( mixture )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:132: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred124_ChemicalChunker733);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred124_ChemicalChunker

    // $ANTLR start synpred128_ChemicalChunker
    public final void synpred128_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:165: ( quantity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:165: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred128_ChemicalChunker741);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred128_ChemicalChunker

    // $ANTLR start synpred129_ChemicalChunker
    public final void synpred129_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:174: ( nnchementity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:174: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred129_ChemicalChunker743);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred129_ChemicalChunker

    // $ANTLR start synpred130_ChemicalChunker
    public final void synpred130_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:187: ( measurements )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:187: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred130_ChemicalChunker745);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred130_ChemicalChunker

    // $ANTLR start synpred136_ChemicalChunker
    public final void synpred136_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:243: ( nnpressure )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:243: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred136_ChemicalChunker757);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred136_ChemicalChunker

    // $ANTLR start synpred145_ChemicalChunker
    public final void synpred145_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:334: ( wdt )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:334: wdt
        {
        pushFollow(FOLLOW_wdt_in_synpred145_ChemicalChunker775);
        wdt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred145_ChemicalChunker

    // $ANTLR start synpred146_ChemicalChunker
    public final void synpred146_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:338: ( wp_poss )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:338: wp_poss
        {
        pushFollow(FOLLOW_wp_poss_in_synpred146_ChemicalChunker777);
        wp_poss();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred146_ChemicalChunker

    // $ANTLR start synpred147_ChemicalChunker
    public final void synpred147_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:346: ( wpo )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:346: wpo
        {
        pushFollow(FOLLOW_wpo_in_synpred147_ChemicalChunker779);
        wpo();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred147_ChemicalChunker

    // $ANTLR start synpred148_ChemicalChunker
    public final void synpred148_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:350: ( wps )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:350: wps
        {
        pushFollow(FOLLOW_wps_in_synpred148_ChemicalChunker781);
        wps();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred148_ChemicalChunker

    // $ANTLR start synpred152_ChemicalChunker
    public final void synpred152_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:386: ( number )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:386: number
        {
        pushFollow(FOLLOW_number_in_synpred152_ChemicalChunker789);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred152_ChemicalChunker

    // $ANTLR start synpred153_ChemicalChunker
    public final void synpred153_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:393: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:393: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred153_ChemicalChunker791);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred153_ChemicalChunker

    // $ANTLR start synpred161_ChemicalChunker
    public final void synpred161_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:10: ( numberratio )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:10: numberratio
        {
        pushFollow(FOLLOW_numberratio_in_synpred161_ChemicalChunker826);
        numberratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred161_ChemicalChunker

    // $ANTLR start synpred162_ChemicalChunker
    public final void synpred162_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:20: ( colon cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:20: colon cd
        {
        pushFollow(FOLLOW_colon_in_synpred162_ChemicalChunker855);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_cd_in_synpred162_ChemicalChunker857);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred162_ChemicalChunker

    // $ANTLR start synpred163_ChemicalChunker
    public final void synpred163_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:12: ( colon noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:12: colon noun
        {
        pushFollow(FOLLOW_colon_in_synpred163_ChemicalChunker874);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_noun_in_synpred163_ChemicalChunker876);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred163_ChemicalChunker

    // $ANTLR start synpred173_ChemicalChunker
    public final void synpred173_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:20: ( fw )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:20: fw
        {
        pushFollow(FOLLOW_fw_in_synpred173_ChemicalChunker1020);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred173_ChemicalChunker

    // $ANTLR start synpred174_ChemicalChunker
    public final void synpred174_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:23: ( verb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:23: verb
        {
        pushFollow(FOLLOW_verb_in_synpred174_ChemicalChunker1022);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred174_ChemicalChunker

    // $ANTLR start synpred175_ChemicalChunker
    public final void synpred175_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:28: ( measurements )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:28: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred175_ChemicalChunker1024);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred175_ChemicalChunker

    // $ANTLR start synpred177_ChemicalChunker
    public final void synpred177_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:44: ( stop )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:44: stop
        {
        pushFollow(FOLLOW_stop_in_synpred177_ChemicalChunker1028);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred177_ChemicalChunker

    // $ANTLR start synpred178_ChemicalChunker
    public final void synpred178_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:49: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:49: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred178_ChemicalChunker1030);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred178_ChemicalChunker

    // $ANTLR start synpred179_ChemicalChunker
    public final void synpred179_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:63: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:63: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred179_ChemicalChunker1032);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred179_ChemicalChunker

    // $ANTLR start synpred180_ChemicalChunker
    public final void synpred180_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:72: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:72: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred180_ChemicalChunker1034);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred180_ChemicalChunker

    // $ANTLR start synpred182_ChemicalChunker
    public final void synpred182_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:93: ( sym )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:93: sym
        {
        pushFollow(FOLLOW_sym_in_synpred182_ChemicalChunker1038);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred182_ChemicalChunker

    // $ANTLR start synpred183_ChemicalChunker
    public final void synpred183_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:97: ( cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:97: cd
        {
        pushFollow(FOLLOW_cd_in_synpred183_ChemicalChunker1040);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred183_ChemicalChunker

    // $ANTLR start synpred184_ChemicalChunker
    public final void synpred184_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:100: ( noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:100: noun
        {
        pushFollow(FOLLOW_noun_in_synpred184_ChemicalChunker1042);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred184_ChemicalChunker

    // $ANTLR start synpred185_ChemicalChunker
    public final void synpred185_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:105: ( inof )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:105: inof
        {
        pushFollow(FOLLOW_inof_in_synpred185_ChemicalChunker1044);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred185_ChemicalChunker

    // $ANTLR start synpred186_ChemicalChunker
    public final void synpred186_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:110: ( inAll )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:110: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred186_ChemicalChunker1046);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred186_ChemicalChunker

    // $ANTLR start synpred187_ChemicalChunker
    public final void synpred187_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:116: ( cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:116: cd
        {
        pushFollow(FOLLOW_cd_in_synpred187_ChemicalChunker1048);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred187_ChemicalChunker

    // $ANTLR start synpred188_ChemicalChunker
    public final void synpred188_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:119: ( comma )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:119: comma
        {
        pushFollow(FOLLOW_comma_in_synpred188_ChemicalChunker1050);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred188_ChemicalChunker

    // $ANTLR start synpred189_ChemicalChunker
    public final void synpred189_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:125: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:125: adj
        {
        pushFollow(FOLLOW_adj_in_synpred189_ChemicalChunker1052);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred189_ChemicalChunker

    // $ANTLR start synpred191_ChemicalChunker
    public final void synpred191_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:142: ( fw )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:142: fw
        {
        pushFollow(FOLLOW_fw_in_synpred191_ChemicalChunker1060);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred191_ChemicalChunker

    // $ANTLR start synpred192_ChemicalChunker
    public final void synpred192_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:145: ( verb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:145: verb
        {
        pushFollow(FOLLOW_verb_in_synpred192_ChemicalChunker1062);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred192_ChemicalChunker

    // $ANTLR start synpred193_ChemicalChunker
    public final void synpred193_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:150: ( measurements )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:150: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred193_ChemicalChunker1064);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred193_ChemicalChunker

    // $ANTLR start synpred195_ChemicalChunker
    public final void synpred195_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:166: ( stop )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:166: stop
        {
        pushFollow(FOLLOW_stop_in_synpred195_ChemicalChunker1068);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred195_ChemicalChunker

    // $ANTLR start synpred196_ChemicalChunker
    public final void synpred196_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:171: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:171: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred196_ChemicalChunker1070);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred196_ChemicalChunker

    // $ANTLR start synpred197_ChemicalChunker
    public final void synpred197_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:185: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:185: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred197_ChemicalChunker1072);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred197_ChemicalChunker

    // $ANTLR start synpred198_ChemicalChunker
    public final void synpred198_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:194: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:194: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred198_ChemicalChunker1074);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred198_ChemicalChunker

    // $ANTLR start synpred200_ChemicalChunker
    public final void synpred200_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:215: ( sym )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:215: sym
        {
        pushFollow(FOLLOW_sym_in_synpred200_ChemicalChunker1078);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred200_ChemicalChunker

    // $ANTLR start synpred201_ChemicalChunker
    public final void synpred201_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:219: ( cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:219: cd
        {
        pushFollow(FOLLOW_cd_in_synpred201_ChemicalChunker1080);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred201_ChemicalChunker

    // $ANTLR start synpred202_ChemicalChunker
    public final void synpred202_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:222: ( noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:222: noun
        {
        pushFollow(FOLLOW_noun_in_synpred202_ChemicalChunker1082);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred202_ChemicalChunker

    // $ANTLR start synpred203_ChemicalChunker
    public final void synpred203_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:227: ( inof )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:227: inof
        {
        pushFollow(FOLLOW_inof_in_synpred203_ChemicalChunker1084);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred203_ChemicalChunker

    // $ANTLR start synpred204_ChemicalChunker
    public final void synpred204_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:232: ( inAll )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:232: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred204_ChemicalChunker1086);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred204_ChemicalChunker

    // $ANTLR start synpred205_ChemicalChunker
    public final void synpred205_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:238: ( cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:238: cd
        {
        pushFollow(FOLLOW_cd_in_synpred205_ChemicalChunker1088);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred205_ChemicalChunker

    // $ANTLR start synpred206_ChemicalChunker
    public final void synpred206_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:241: ( comma )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:241: comma
        {
        pushFollow(FOLLOW_comma_in_synpred206_ChemicalChunker1090);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred206_ChemicalChunker

    // $ANTLR start synpred207_ChemicalChunker
    public final void synpred207_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:247: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:247: adj
        {
        pushFollow(FOLLOW_adj_in_synpred207_ChemicalChunker1092);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred207_ChemicalChunker

    // $ANTLR start synpred209_ChemicalChunker
    public final void synpred209_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:257: ( stop )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:257: stop
        {
        pushFollow(FOLLOW_stop_in_synpred209_ChemicalChunker1096);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred209_ChemicalChunker

    // $ANTLR start synpred221_ChemicalChunker
    public final void synpred221_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:11: ( prepphraseAtmosphere )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:11: prepphraseAtmosphere
        {
        pushFollow(FOLLOW_prepphraseAtmosphere_in_synpred221_ChemicalChunker1151);
        prepphraseAtmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred221_ChemicalChunker

    // $ANTLR start synpred222_ChemicalChunker
    public final void synpred222_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:32: ( prepphraseTime )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:32: prepphraseTime
        {
        pushFollow(FOLLOW_prepphraseTime_in_synpred222_ChemicalChunker1153);
        prepphraseTime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred222_ChemicalChunker

    // $ANTLR start synpred223_ChemicalChunker
    public final void synpred223_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:47: ( prepphraseTemp )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:47: prepphraseTemp
        {
        pushFollow(FOLLOW_prepphraseTemp_in_synpred223_ChemicalChunker1155);
        prepphraseTemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred223_ChemicalChunker

    // $ANTLR start synpred224_ChemicalChunker
    public final void synpred224_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:62: ( prepphraseIN )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:62: prepphraseIN
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred224_ChemicalChunker1157);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred224_ChemicalChunker

    // $ANTLR start synpred228_ChemicalChunker
    public final void synpred228_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:3: ( advAdj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:3: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred228_ChemicalChunker1261);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred228_ChemicalChunker

    // $ANTLR start synpred233_ChemicalChunker
    public final void synpred233_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:35: ( nntime )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:35: nntime
        {
        pushFollow(FOLLOW_nntime_in_synpred233_ChemicalChunker1277);
        nntime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred233_ChemicalChunker

    // $ANTLR start synpred236_ChemicalChunker
    public final void synpred236_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:33: ( nnatmosphere )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:33: nnatmosphere
        {
        pushFollow(FOLLOW_nnatmosphere_in_synpred236_ChemicalChunker1346);
        nnatmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred236_ChemicalChunker

    // $ANTLR start synpred254_ChemicalChunker
    public final void synpred254_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:5: ( advAdj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:5: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred254_ChemicalChunker1421);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred254_ChemicalChunker

    // $ANTLR start synpred259_ChemicalChunker
    public final void synpred259_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:36: ( nntemp )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:36: nntemp
        {
        pushFollow(FOLLOW_nntemp_in_synpred259_ChemicalChunker1436);
        nntemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred259_ChemicalChunker

    // $ANTLR start synpred264_ChemicalChunker
    public final void synpred264_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:18: ( nnapparatus )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:18: nnapparatus
        {
        pushFollow(FOLLOW_nnapparatus_in_synpred264_ChemicalChunker1598);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred264_ChemicalChunker

    // $ANTLR start synpred273_ChemicalChunker
    public final void synpred273_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:140:32: ( dt )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:140:32: dt
        {
        pushFollow(FOLLOW_dt_in_synpred273_ChemicalChunker1660);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred273_ChemicalChunker

    // $ANTLR start synpred278_ChemicalChunker
    public final void synpred278_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:19: ( oscarCompound1 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:19: oscarCompound1
        {
        pushFollow(FOLLOW_oscarCompound1_in_synpred278_ChemicalChunker1691);
        oscarCompound1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred278_ChemicalChunker

    // $ANTLR start synpred279_ChemicalChunker
    public final void synpred279_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:34: ( oscarCompound2 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:34: oscarCompound2
        {
        pushFollow(FOLLOW_oscarCompound2_in_synpred279_ChemicalChunker1693);
        oscarCompound2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred279_ChemicalChunker

    // $ANTLR start synpred281_ChemicalChunker
    public final void synpred281_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:64: ( oscarCompound4 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:145:64: oscarCompound4
        {
        pushFollow(FOLLOW_oscarCompound4_in_synpred281_ChemicalChunker1697);
        oscarCompound4();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred281_ChemicalChunker

    // $ANTLR start synpred283_ChemicalChunker
    public final void synpred283_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:148:27: ( dash )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:148:27: dash
        {
        pushFollow(FOLLOW_dash_in_synpred283_ChemicalChunker1741);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred283_ChemicalChunker

    // $ANTLR start synpred285_ChemicalChunker
    public final void synpred285_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:27: ( dash oscarcm )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:27: dash oscarcm
        {
        pushFollow(FOLLOW_dash_in_synpred285_ChemicalChunker1773);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_oscarcm_in_synpred285_ChemicalChunker1775);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred285_ChemicalChunker

    // $ANTLR start synpred286_ChemicalChunker
    public final void synpred286_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:42: ( dash )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:42: dash
        {
        pushFollow(FOLLOW_dash_in_synpred286_ChemicalChunker1779);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred286_ChemicalChunker

    // $ANTLR start synpred287_ChemicalChunker
    public final void synpred287_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:26: ( oscarcm )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:26: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred287_ChemicalChunker1809);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred287_ChemicalChunker

    // $ANTLR start synpred288_ChemicalChunker
    public final void synpred288_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:4: ( quantity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred288_ChemicalChunker1858);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred288_ChemicalChunker

    // $ANTLR start synpred289_ChemicalChunker
    public final void synpred289_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:13: ( mixture )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:155:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred289_ChemicalChunker1860);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred289_ChemicalChunker

    // $ANTLR start synpred290_ChemicalChunker
    public final void synpred290_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:4: ( quantity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred290_ChemicalChunker1876);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred290_ChemicalChunker

    // $ANTLR start synpred291_ChemicalChunker
    public final void synpred291_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:13: ( mixture )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred291_ChemicalChunker1878);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred291_ChemicalChunker

    // $ANTLR start synpred292_ChemicalChunker
    public final void synpred292_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:23: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:23: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred292_ChemicalChunker1882);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred292_ChemicalChunker

    // $ANTLR start synpred293_ChemicalChunker
    public final void synpred293_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:40: ( citation )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:40: citation
        {
        pushFollow(FOLLOW_citation_in_synpred293_ChemicalChunker1887);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred293_ChemicalChunker

    // $ANTLR start synpred294_ChemicalChunker
    public final void synpred294_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:49: ( quantity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:49: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred294_ChemicalChunker1889);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred294_ChemicalChunker

    // $ANTLR start synpred295_ChemicalChunker
    public final void synpred295_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:58: ( mixture )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:158:58: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred295_ChemicalChunker1891);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred295_ChemicalChunker

    // $ANTLR start synpred296_ChemicalChunker
    public final void synpred296_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:18: ( moleculeamount1 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:18: moleculeamount1
        {
        pushFollow(FOLLOW_moleculeamount1_in_synpred296_ChemicalChunker1902);
        moleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred296_ChemicalChunker

    // $ANTLR start synpred300_ChemicalChunker
    public final void synpred300_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:24: ( citation )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:24: citation
        {
        pushFollow(FOLLOW_citation_in_synpred300_ChemicalChunker1987);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred300_ChemicalChunker

    // $ANTLR start synpred301_ChemicalChunker
    public final void synpred301_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:33: ( quantity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:33: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred301_ChemicalChunker1989);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred301_ChemicalChunker

    // $ANTLR start synpred302_ChemicalChunker
    public final void synpred302_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:42: ( mixture )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:42: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred302_ChemicalChunker1991);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred302_ChemicalChunker

    // $ANTLR start synpred303_ChemicalChunker
    public final void synpred303_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:18: ( jj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:18: jj
        {
        pushFollow(FOLLOW_jj_in_synpred303_ChemicalChunker2012);
        jj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred303_ChemicalChunker

    // $ANTLR start synpred304_ChemicalChunker
    public final void synpred304_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:18: ( ( jj )? noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:18: ( jj )? noun
        {
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:176:18: ( jj )?
        int alt121=2;
        switch ( input.LA(1) ) {
            case 140:
                {
                switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA121_3 = input.LA(3);

                        if ( (synpred303_ChemicalChunker()) ) {
                            alt121=1;
                        }
                        }
                        break;
                }

                }
                break;
        }

        switch (alt121) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: jj
                {
                pushFollow(FOLLOW_jj_in_synpred304_ChemicalChunker2012);
                jj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_noun_in_synpred304_ChemicalChunker2015);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred304_ChemicalChunker

    // $ANTLR start synpred305_ChemicalChunker
    public final void synpred305_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:179:3: ( unnamedmoleculeamount1 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:179:3: unnamedmoleculeamount1
        {
        pushFollow(FOLLOW_unnamedmoleculeamount1_in_synpred305_ChemicalChunker2026);
        unnamedmoleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred305_ChemicalChunker

    // $ANTLR start synpred306_ChemicalChunker
    public final void synpred306_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:179:28: ( unnamedmoleculeamount2 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:179:28: unnamedmoleculeamount2
        {
        pushFollow(FOLLOW_unnamedmoleculeamount2_in_synpred306_ChemicalChunker2030);
        unnamedmoleculeamount2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred306_ChemicalChunker

    // $ANTLR start synpred311_ChemicalChunker
    public final void synpred311_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:19: ( comma measurements )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:19: comma measurements
        {
        pushFollow(FOLLOW_comma_in_synpred311_ChemicalChunker2138);
        comma();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_measurements_in_synpred311_ChemicalChunker2141);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred311_ChemicalChunker

    // $ANTLR start synpred316_ChemicalChunker
    public final void synpred316_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:9: ( lrb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:9: lrb
        {
        pushFollow(FOLLOW_lrb_in_synpred316_ChemicalChunker2190);
        lrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred316_ChemicalChunker

    // $ANTLR start synpred317_ChemicalChunker
    public final void synpred317_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:13: ( rrb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:13: rrb
        {
        pushFollow(FOLLOW_rrb_in_synpred317_ChemicalChunker2192);
        rrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred317_ChemicalChunker

    // $ANTLR start synpred318_ChemicalChunker
    public final void synpred318_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:17: ( lsqb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:17: lsqb
        {
        pushFollow(FOLLOW_lsqb_in_synpred318_ChemicalChunker2194);
        lsqb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred318_ChemicalChunker

    // $ANTLR start synpred319_ChemicalChunker
    public final void synpred319_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:22: ( rsqb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:22: rsqb
        {
        pushFollow(FOLLOW_rsqb_in_synpred319_ChemicalChunker2196);
        rsqb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred319_ChemicalChunker

    // Delegated rules

    public final boolean synpred292_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred222_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred222_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred147_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred147_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred306_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred115_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred115_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred185_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred146_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred146_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred56_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred56_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred162_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred162_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred311_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred311_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred202_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred202_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred136_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred136_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred148_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred148_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred161_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred161_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred305_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred305_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred203_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred203_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred129_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred129_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred130_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred130_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred175_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred175_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred197_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred197_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred291_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred291_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred318_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred318_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred118_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred118_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred186_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred186_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred198_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred198_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred184_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred184_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred188_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred188_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred153_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred153_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred304_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred304_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred286_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred286_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred290_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred290_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred195_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred195_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred145_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred145_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred301_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred301_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred296_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred296_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred316_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred316_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred264_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred152_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred152_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred114_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred283_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred283_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred223_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred300_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred300_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred293_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred293_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred113_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred113_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred273_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred112_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred112_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred204_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred204_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred302_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred302_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred295_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred295_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred200_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred200_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred287_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred206_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred206_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred303_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred303_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred281_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred281_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred201_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred201_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred285_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred285_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred224_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred224_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred53_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred53_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred317_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred317_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred205_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred205_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred319_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred319_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred163_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred163_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA7 dfa7 = new DFA7(this);
    protected DFA9 dfa9 = new DFA9(this);
    protected DFA10 dfa10 = new DFA10(this);
    protected DFA13 dfa13 = new DFA13(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA12 dfa12 = new DFA12(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA18 dfa18 = new DFA18(this);
    protected DFA31 dfa31 = new DFA31(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA28 dfa28 = new DFA28(this);
    protected DFA29 dfa29 = new DFA29(this);
    protected DFA35 dfa35 = new DFA35(this);
    protected DFA38 dfa38 = new DFA38(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA47 dfa47 = new DFA47(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA52 dfa52 = new DFA52(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA66 dfa66 = new DFA66(this);
    protected DFA82 dfa82 = new DFA82(this);
    protected DFA90 dfa90 = new DFA90(this);
    protected DFA94 dfa94 = new DFA94(this);
    protected DFA97 dfa97 = new DFA97(this);
    protected DFA103 dfa103 = new DFA103(this);
    protected DFA106 dfa106 = new DFA106(this);
    protected DFA107 dfa107 = new DFA107(this);
    protected DFA108 dfa108 = new DFA108(this);
    static final String DFA2_eotS =
        "\u0082\uffff";
    static final String DFA2_eofS =
        "\1\2\u0081\uffff";
    static final String DFA2_minS =
        "\1\13\1\0\1\uffff\175\0\2\uffff";
    static final String DFA2_maxS =
        "\1\u00bf\1\0\1\uffff\175\0\2\uffff";
    static final String DFA2_acceptS =
        "\2\uffff\1\3\175\uffff\1\1\1\2";
    static final String DFA2_specialS =
        "\1\uffff\1\51\1\uffff\1\156\1\145\1\45\1\150\1\43\1\167\1\10\1\115"+
        "\1\34\1\135\1\41\1\137\1\120\1\106\1\104\1\23\1\55\1\27\1\35\1\57"+
        "\1\25\1\116\1\33\1\101\1\15\1\122\1\40\1\124\1\2\1\6\1\70\1\64\1"+
        "\37\1\1\1\175\1\117\1\136\1\72\1\66\1\3\1\22\1\154\1\172\1\54\1"+
        "\16\1\13\1\75\1\31\1\133\1\125\1\173\1\14\1\74\1\0\1\50\1\170\1"+
        "\110\1\132\1\65\1\7\1\127\1\102\1\126\1\164\1\71\1\63\1\123\1\155"+
        "\1\21\1\61\1\44\1\60\1\157\1\76\1\171\1\111\1\107\1\161\1\163\1"+
        "\46\1\140\1\26\1\121\1\42\1\141\1\162\1\147\1\114\1\103\1\112\1"+
        "\134\1\130\1\56\1\4\1\32\1\20\1\142\1\151\1\166\1\77\1\131\1\47"+
        "\1\62\1\67\1\5\1\24\1\113\1\165\1\160\1\143\1\30\1\11\1\53\1\52"+
        "\1\36\1\105\1\144\1\153\1\17\1\100\1\73\1\174\1\152\1\146\1\12\2"+
        "\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\33\1\15\1\16\1\40\1\67\2\uffff\1\106\1\107\1\105\1\113\1"+
            "\114\1\123\1\124\1\110\1\122\1\115\1\117\1\111\1\112\1\121\1"+
            "\120\1\116\1\37\1\21\1\41\1\uffff\1\6\1\50\1\42\1\43\1\57\1"+
            "\20\1\44\1\45\1\46\1\47\1\10\1\51\1\52\1\53\1\54\1\55\1\31\1"+
            "\134\1\172\1\135\1\136\1\17\1\66\1\137\1\140\1\141\1\142\1\143"+
            "\1\144\1\145\1\146\1\22\1\147\1\56\1\150\1\151\1\152\1\153\1"+
            "\uffff\1\154\1\70\1\155\1\71\1\156\1\157\1\160\1\161\1\72\1"+
            "\162\1\60\1\163\1\164\1\165\1\73\1\166\1\36\1\65\1\167\1\170"+
            "\1\171\1\177\1\1\1\uffff\1\173\1\uffff\1\2\1\uffff\1\175\1\176"+
            "\1\4\1\174\16\uffff\1\5\4\uffff\1\3\3\uffff\1\101\1\74\1\75"+
            "\4\uffff\1\104\1\11\1\12\1\13\1\14\1\125\1\uffff\1\7\1\uffff"+
            "\1\34\2\uffff\1\35\13\uffff\1\32\5\uffff\1\23\1\24\1\30\1\25"+
            "\1\27\1\uffff\1\26\1\76\1\103\1\uffff\1\126\1\127\1\131\1\130"+
            "\1\133\1\132\1\61\1\62\1\63\1\64\1\77\1\100\1\102",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "()+ loopback of 36:13: ( sentence | unmatchedPhrase )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA2_56 = input.LA(1);

                         
                        int index2_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_56);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA2_36 = input.LA(1);

                         
                        int index2_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_36);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA2_31 = input.LA(1);

                         
                        int index2_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_31);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA2_42 = input.LA(1);

                         
                        int index2_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_42);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA2_96 = input.LA(1);

                         
                        int index2_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_96);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA2_107 = input.LA(1);

                         
                        int index2_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_107);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA2_32 = input.LA(1);

                         
                        int index2_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_32);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA2_62 = input.LA(1);

                         
                        int index2_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_62);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA2_9 = input.LA(1);

                         
                        int index2_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA2_114 = input.LA(1);

                         
                        int index2_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_114);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA2_127 = input.LA(1);

                         
                        int index2_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_127);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA2_48 = input.LA(1);

                         
                        int index2_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_48);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA2_54 = input.LA(1);

                         
                        int index2_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_54);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA2_27 = input.LA(1);

                         
                        int index2_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_27);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA2_47 = input.LA(1);

                         
                        int index2_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_47);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA2_121 = input.LA(1);

                         
                        int index2_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_121);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA2_98 = input.LA(1);

                         
                        int index2_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_98);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA2_71 = input.LA(1);

                         
                        int index2_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_71);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA2_43 = input.LA(1);

                         
                        int index2_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_43);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA2_18 = input.LA(1);

                         
                        int index2_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_18);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA2_108 = input.LA(1);

                         
                        int index2_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_108);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA2_23 = input.LA(1);

                         
                        int index2_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA2_84 = input.LA(1);

                         
                        int index2_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_84);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA2_20 = input.LA(1);

                         
                        int index2_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_20);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA2_113 = input.LA(1);

                         
                        int index2_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_113);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA2_50 = input.LA(1);

                         
                        int index2_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_50);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA2_97 = input.LA(1);

                         
                        int index2_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_97);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA2_25 = input.LA(1);

                         
                        int index2_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_25);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA2_11 = input.LA(1);

                         
                        int index2_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_11);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA2_21 = input.LA(1);

                         
                        int index2_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_21);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA2_117 = input.LA(1);

                         
                        int index2_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_117);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA2_35 = input.LA(1);

                         
                        int index2_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_35);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA2_29 = input.LA(1);

                         
                        int index2_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_29);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA2_13 = input.LA(1);

                         
                        int index2_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_13);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA2_86 = input.LA(1);

                         
                        int index2_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_86);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA2_7 = input.LA(1);

                         
                        int index2_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_7);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA2_73 = input.LA(1);

                         
                        int index2_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_73);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA2_5 = input.LA(1);

                         
                        int index2_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_5);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA2_82 = input.LA(1);

                         
                        int index2_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_82);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA2_104 = input.LA(1);

                         
                        int index2_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_104);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA2_57 = input.LA(1);

                         
                        int index2_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_57);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA2_1 = input.LA(1);

                         
                        int index2_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_1);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA2_116 = input.LA(1);

                         
                        int index2_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_116);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA2_115 = input.LA(1);

                         
                        int index2_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_115);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA2_46 = input.LA(1);

                         
                        int index2_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_46);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA2_19 = input.LA(1);

                         
                        int index2_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_19);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA2_95 = input.LA(1);

                         
                        int index2_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_95);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA2_22 = input.LA(1);

                         
                        int index2_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_22);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA2_74 = input.LA(1);

                         
                        int index2_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_74);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA2_72 = input.LA(1);

                         
                        int index2_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_72);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA2_105 = input.LA(1);

                         
                        int index2_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_105);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA2_68 = input.LA(1);

                         
                        int index2_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_68);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA2_34 = input.LA(1);

                         
                        int index2_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_34);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA2_61 = input.LA(1);

                         
                        int index2_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_61);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA2_41 = input.LA(1);

                         
                        int index2_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_41);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA2_106 = input.LA(1);

                         
                        int index2_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_106);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA2_33 = input.LA(1);

                         
                        int index2_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_33);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA2_67 = input.LA(1);

                         
                        int index2_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_67);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA2_40 = input.LA(1);

                         
                        int index2_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_40);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA2_123 = input.LA(1);

                         
                        int index2_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_123);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA2_55 = input.LA(1);

                         
                        int index2_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_55);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA2_49 = input.LA(1);

                         
                        int index2_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_49);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA2_76 = input.LA(1);

                         
                        int index2_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_76);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA2_102 = input.LA(1);

                         
                        int index2_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_102);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA2_122 = input.LA(1);

                         
                        int index2_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_122);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA2_26 = input.LA(1);

                         
                        int index2_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_26);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA2_64 = input.LA(1);

                         
                        int index2_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_64);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA2_91 = input.LA(1);

                         
                        int index2_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_91);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA2_17 = input.LA(1);

                         
                        int index2_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_17);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA2_118 = input.LA(1);

                         
                        int index2_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_118);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA2_16 = input.LA(1);

                         
                        int index2_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_16);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA2_79 = input.LA(1);

                         
                        int index2_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_79);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA2_59 = input.LA(1);

                         
                        int index2_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_59);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA2_78 = input.LA(1);

                         
                        int index2_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_78);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA2_92 = input.LA(1);

                         
                        int index2_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_92);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA2_109 = input.LA(1);

                         
                        int index2_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_109);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA2_90 = input.LA(1);

                         
                        int index2_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_90);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA2_10 = input.LA(1);

                         
                        int index2_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_10);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA2_24 = input.LA(1);

                         
                        int index2_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_24);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA2_38 = input.LA(1);

                         
                        int index2_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_38);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA2_15 = input.LA(1);

                         
                        int index2_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_15);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA2_85 = input.LA(1);

                         
                        int index2_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_85);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA2_28 = input.LA(1);

                         
                        int index2_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_28);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA2_69 = input.LA(1);

                         
                        int index2_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_69);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA2_30 = input.LA(1);

                         
                        int index2_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_30);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA2_52 = input.LA(1);

                         
                        int index2_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_52);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA2_65 = input.LA(1);

                         
                        int index2_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_65);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA2_63 = input.LA(1);

                         
                        int index2_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_63);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA2_94 = input.LA(1);

                         
                        int index2_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_94);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA2_103 = input.LA(1);

                         
                        int index2_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_103);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA2_60 = input.LA(1);

                         
                        int index2_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_60);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA2_51 = input.LA(1);

                         
                        int index2_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_51);
                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA2_93 = input.LA(1);

                         
                        int index2_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_93);
                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA2_12 = input.LA(1);

                         
                        int index2_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_12);
                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA2_39 = input.LA(1);

                         
                        int index2_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_39);
                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA2_14 = input.LA(1);

                         
                        int index2_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_14);
                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA2_83 = input.LA(1);

                         
                        int index2_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_83);
                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA2_87 = input.LA(1);

                         
                        int index2_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_87);
                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA2_99 = input.LA(1);

                         
                        int index2_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_99);
                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA2_112 = input.LA(1);

                         
                        int index2_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_112);
                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA2_119 = input.LA(1);

                         
                        int index2_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_119);
                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA2_4 = input.LA(1);

                         
                        int index2_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_4);
                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA2_126 = input.LA(1);

                         
                        int index2_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_126);
                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA2_89 = input.LA(1);

                         
                        int index2_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_89);
                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA2_6 = input.LA(1);

                         
                        int index2_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_6);
                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA2_100 = input.LA(1);

                         
                        int index2_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_100);
                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA2_125 = input.LA(1);

                         
                        int index2_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_125);
                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA2_120 = input.LA(1);

                         
                        int index2_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_120);
                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA2_44 = input.LA(1);

                         
                        int index2_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_44);
                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA2_70 = input.LA(1);

                         
                        int index2_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_70);
                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA2_3 = input.LA(1);

                         
                        int index2_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_3);
                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA2_75 = input.LA(1);

                         
                        int index2_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_75);
                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA2_111 = input.LA(1);

                         
                        int index2_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_111);
                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA2_80 = input.LA(1);

                         
                        int index2_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_80);
                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA2_88 = input.LA(1);

                         
                        int index2_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_88);
                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA2_81 = input.LA(1);

                         
                        int index2_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_81);
                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA2_66 = input.LA(1);

                         
                        int index2_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_66);
                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA2_110 = input.LA(1);

                         
                        int index2_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_110);
                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA2_101 = input.LA(1);

                         
                        int index2_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_101);
                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA2_8 = input.LA(1);

                         
                        int index2_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_8);
                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA2_58 = input.LA(1);

                         
                        int index2_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_58);
                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA2_77 = input.LA(1);

                         
                        int index2_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_77);
                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA2_45 = input.LA(1);

                         
                        int index2_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_45);
                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA2_53 = input.LA(1);

                         
                        int index2_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_53);
                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA2_124 = input.LA(1);

                         
                        int index2_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_124);
                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA2_37 = input.LA(1);

                         
                        int index2_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_37);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA4_eotS =
        "\177\uffff";
    static final String DFA4_eofS =
        "\1\15\176\uffff";
    static final String DFA4_minS =
        "\1\13\14\0\1\uffff\156\0\3\uffff";
    static final String DFA4_maxS =
        "\1\u00bf\14\0\1\uffff\156\0\3\uffff";
    static final String DFA4_acceptS =
        "\15\uffff\1\4\156\uffff\1\1\1\2\1\3";
    static final String DFA4_specialS =
        "\1\uffff\1\11\1\74\1\1\1\77\1\70\1\60\1\146\1\61\1\107\1\171\1\123"+
        "\1\65\1\uffff\1\130\1\76\1\136\1\106\1\115\1\111\1\32\1\15\1\52"+
        "\1\67\1\34\1\40\1\33\1\110\1\24\1\135\1\167\1\126\1\12\1\150\1\163"+
        "\1\112\1\4\1\30\1\162\1\117\1\144\1\35\1\17\1\27\1\134\1\105\1\104"+
        "\1\37\1\154\1\113\1\5\1\155\1\133\1\170\1\156\1\46\1\44\1\0\1\50"+
        "\1\63\1\125\1\153\1\114\1\166\1\20\1\103\1\43\1\64\1\2\1\13\1\41"+
        "\1\131\1\57\1\7\1\165\1\55\1\45\1\101\1\22\1\47\1\54\1\116\1\145"+
        "\1\100\1\141\1\31\1\10\1\164\1\143\1\151\1\75\1\122\1\142\1\3\1"+
        "\21\1\53\1\71\1\124\1\127\1\147\1\152\1\26\1\23\1\62\1\132\1\121"+
        "\1\73\1\161\1\140\1\6\1\36\1\51\1\137\1\66\1\160\1\42\1\56\1\14"+
        "\1\25\1\102\1\72\1\120\1\157\1\16\3\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\33\1\13\1\14\1\40\1\67\2\uffff\1\106\1\107\1\105\1\113\1"+
            "\114\1\123\1\124\1\110\1\122\1\115\1\117\1\111\1\112\1\121\1"+
            "\120\1\116\1\37\1\27\1\41\1\uffff\1\22\1\50\1\42\1\43\1\57\1"+
            "\26\1\44\1\45\1\46\1\47\1\24\1\51\1\52\1\53\1\54\1\55\1\31\1"+
            "\134\1\172\1\135\1\136\1\25\1\66\1\137\1\140\1\141\1\142\1\143"+
            "\1\144\1\145\1\146\1\30\1\147\1\56\1\150\1\151\1\152\1\153\1"+
            "\uffff\1\154\1\70\1\155\1\71\1\156\1\157\1\160\1\161\1\72\1"+
            "\162\1\60\1\163\1\164\1\165\1\73\1\166\1\36\1\65\1\167\1\170"+
            "\1\171\1\15\1\16\1\uffff\1\173\1\uffff\1\15\1\uffff\2\15\1\20"+
            "\1\15\15\uffff\1\15\1\21\4\uffff\1\17\3\uffff\1\101\1\74\1\75"+
            "\4\uffff\1\104\1\7\1\10\1\11\1\12\1\125\1\uffff\1\23\1\uffff"+
            "\1\34\2\uffff\1\35\13\uffff\1\32\5\uffff\1\1\1\2\1\6\1\3\1\5"+
            "\1\uffff\1\4\1\76\1\103\1\uffff\1\126\1\127\1\131\1\130\1\133"+
            "\1\132\1\61\1\62\1\63\1\64\1\77\1\100\1\102",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "()+ loopback of 38:12: ( nounphrase | verbphrase | prepphrase )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_57 = input.LA(1);

                         
                        int index4_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_57);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA4_3 = input.LA(1);

                         
                        int index4_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA4_68 = input.LA(1);

                         
                        int index4_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_68);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA4_93 = input.LA(1);

                         
                        int index4_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_93);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA4_36 = input.LA(1);

                         
                        int index4_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_36);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA4_50 = input.LA(1);

                         
                        int index4_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_50);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA4_109 = input.LA(1);

                         
                        int index4_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_109);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA4_73 = input.LA(1);

                         
                        int index4_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_73);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA4_86 = input.LA(1);

                         
                        int index4_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_86);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA4_1 = input.LA(1);

                         
                        int index4_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_1);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA4_32 = input.LA(1);

                         
                        int index4_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_32);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA4_69 = input.LA(1);

                         
                        int index4_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_69);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA4_117 = input.LA(1);

                         
                        int index4_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_117);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA4_21 = input.LA(1);

                         
                        int index4_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_21);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA4_123 = input.LA(1);

                         
                        int index4_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_123);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA4_42 = input.LA(1);

                         
                        int index4_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_42);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA4_64 = input.LA(1);

                         
                        int index4_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_64);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA4_94 = input.LA(1);

                         
                        int index4_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_94);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA4_78 = input.LA(1);

                         
                        int index4_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_78);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA4_102 = input.LA(1);

                         
                        int index4_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_102);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA4_28 = input.LA(1);

                         
                        int index4_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_28);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA4_118 = input.LA(1);

                         
                        int index4_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_118);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA4_101 = input.LA(1);

                         
                        int index4_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_101);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA4_43 = input.LA(1);

                         
                        int index4_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_43);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA4_37 = input.LA(1);

                         
                        int index4_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_37);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA4_85 = input.LA(1);

                         
                        int index4_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_85);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA4_20 = input.LA(1);

                         
                        int index4_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_20);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA4_26 = input.LA(1);

                         
                        int index4_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_26);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA4_24 = input.LA(1);

                         
                        int index4_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_24);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA4_41 = input.LA(1);

                         
                        int index4_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_41);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA4_110 = input.LA(1);

                         
                        int index4_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_110);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA4_47 = input.LA(1);

                         
                        int index4_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_47);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA4_25 = input.LA(1);

                         
                        int index4_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_25);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA4_70 = input.LA(1);

                         
                        int index4_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_70);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA4_115 = input.LA(1);

                         
                        int index4_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_115);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA4_66 = input.LA(1);

                         
                        int index4_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_66);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA4_56 = input.LA(1);

                         
                        int index4_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_56);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA4_76 = input.LA(1);

                         
                        int index4_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_76);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA4_55 = input.LA(1);

                         
                        int index4_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_55);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA4_79 = input.LA(1);

                         
                        int index4_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_79);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA4_58 = input.LA(1);

                         
                        int index4_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_58);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA4_111 = input.LA(1);

                         
                        int index4_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_111);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA4_22 = input.LA(1);

                         
                        int index4_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_22);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA4_95 = input.LA(1);

                         
                        int index4_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_95);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA4_80 = input.LA(1);

                         
                        int index4_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_80);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA4_75 = input.LA(1);

                         
                        int index4_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_75);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA4_116 = input.LA(1);

                         
                        int index4_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_116);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA4_72 = input.LA(1);

                         
                        int index4_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_72);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA4_6 = input.LA(1);

                         
                        int index4_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_6);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA4_8 = input.LA(1);

                         
                        int index4_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_8);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA4_103 = input.LA(1);

                         
                        int index4_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_103);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA4_59 = input.LA(1);

                         
                        int index4_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_59);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA4_67 = input.LA(1);

                         
                        int index4_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_67);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA4_12 = input.LA(1);

                         
                        int index4_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_12);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA4_113 = input.LA(1);

                         
                        int index4_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_113);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA4_23 = input.LA(1);

                         
                        int index4_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_23);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA4_5 = input.LA(1);

                         
                        int index4_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_5);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA4_96 = input.LA(1);

                         
                        int index4_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_96);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA4_120 = input.LA(1);

                         
                        int index4_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_120);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA4_106 = input.LA(1);

                         
                        int index4_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_106);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA4_2 = input.LA(1);

                         
                        int index4_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_2);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA4_90 = input.LA(1);

                         
                        int index4_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_90);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA4_15 = input.LA(1);

                         
                        int index4_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_15);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA4_4 = input.LA(1);

                         
                        int index4_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_4);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA4_83 = input.LA(1);

                         
                        int index4_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_83);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA4_77 = input.LA(1);

                         
                        int index4_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_77);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA4_119 = input.LA(1);

                         
                        int index4_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_119);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA4_65 = input.LA(1);

                         
                        int index4_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_65);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA4_46 = input.LA(1);

                         
                        int index4_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_46);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA4_45 = input.LA(1);

                         
                        int index4_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_45);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA4_17 = input.LA(1);

                         
                        int index4_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_17);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA4_9 = input.LA(1);

                         
                        int index4_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_9);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA4_27 = input.LA(1);

                         
                        int index4_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_27);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA4_19 = input.LA(1);

                         
                        int index4_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_19);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA4_35 = input.LA(1);

                         
                        int index4_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_35);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA4_49 = input.LA(1);

                         
                        int index4_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_49);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA4_62 = input.LA(1);

                         
                        int index4_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_62);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA4_18 = input.LA(1);

                         
                        int index4_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_18);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA4_81 = input.LA(1);

                         
                        int index4_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_81);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA4_39 = input.LA(1);

                         
                        int index4_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_39);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA4_121 = input.LA(1);

                         
                        int index4_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_121);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA4_105 = input.LA(1);

                         
                        int index4_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_105);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA4_91 = input.LA(1);

                         
                        int index4_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_91);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA4_11 = input.LA(1);

                         
                        int index4_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_11);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA4_97 = input.LA(1);

                         
                        int index4_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_97);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA4_60 = input.LA(1);

                         
                        int index4_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_60);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA4_31 = input.LA(1);

                         
                        int index4_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_31);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA4_98 = input.LA(1);

                         
                        int index4_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_98);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA4_14 = input.LA(1);

                         
                        int index4_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_14);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA4_71 = input.LA(1);

                         
                        int index4_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_71);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA4_104 = input.LA(1);

                         
                        int index4_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_104);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA4_52 = input.LA(1);

                         
                        int index4_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_52);
                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA4_44 = input.LA(1);

                         
                        int index4_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_44);
                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA4_29 = input.LA(1);

                         
                        int index4_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_29);
                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA4_16 = input.LA(1);

                         
                        int index4_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_16);
                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA4_112 = input.LA(1);

                         
                        int index4_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_112);
                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA4_108 = input.LA(1);

                         
                        int index4_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_108);
                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA4_84 = input.LA(1);

                         
                        int index4_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_84);
                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA4_92 = input.LA(1);

                         
                        int index4_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_92);
                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA4_88 = input.LA(1);

                         
                        int index4_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_88);
                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA4_40 = input.LA(1);

                         
                        int index4_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_40);
                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA4_82 = input.LA(1);

                         
                        int index4_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_82);
                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA4_7 = input.LA(1);

                         
                        int index4_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_7);
                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA4_99 = input.LA(1);

                         
                        int index4_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_99);
                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA4_33 = input.LA(1);

                         
                        int index4_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_33);
                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA4_89 = input.LA(1);

                         
                        int index4_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_89);
                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA4_100 = input.LA(1);

                         
                        int index4_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_100);
                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA4_61 = input.LA(1);

                         
                        int index4_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_61);
                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA4_48 = input.LA(1);

                         
                        int index4_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_48);
                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA4_51 = input.LA(1);

                         
                        int index4_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_51);
                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA4_54 = input.LA(1);

                         
                        int index4_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_54);
                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA4_122 = input.LA(1);

                         
                        int index4_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_122);
                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA4_114 = input.LA(1);

                         
                        int index4_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_114);
                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA4_107 = input.LA(1);

                         
                        int index4_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_107);
                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA4_38 = input.LA(1);

                         
                        int index4_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_38);
                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA4_34 = input.LA(1);

                         
                        int index4_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_34);
                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA4_87 = input.LA(1);

                         
                        int index4_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_87);
                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA4_74 = input.LA(1);

                         
                        int index4_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_74);
                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA4_63 = input.LA(1);

                         
                        int index4_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_63);
                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA4_30 = input.LA(1);

                         
                        int index4_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_30);
                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA4_53 = input.LA(1);

                         
                        int index4_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_53);
                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA4_10 = input.LA(1);

                         
                        int index4_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA5_eotS =
        "\36\uffff";
    static final String DFA5_eofS =
        "\1\1\35\uffff";
    static final String DFA5_minS =
        "\1\13\1\uffff\15\12\15\0\2\uffff";
    static final String DFA5_maxS =
        "\1\u00bf\1\uffff\15\12\15\0\2\uffff";
    static final String DFA5_acceptS =
        "\1\uffff\1\3\32\uffff\1\1\1\2";
    static final String DFA5_specialS =
        "\17\uffff\1\7\1\10\1\1\1\2\1\6\1\11\1\3\1\13\1\4\1\12\1\5\1\0\1"+
        "\14\2\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\1\1\6\1\7\2\1\2\uffff\23\1\1\uffff\46\1\1\uffff\25\1\1\16"+
            "\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\4\1\15\uffff\2\1\4\uffff"+
            "\1\1\3\uffff\3\1\4\uffff\1\1\1\2\1\3\1\4\1\5\1\1\1\uffff\1\1"+
            "\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff\1\10\1\11\1\15"+
            "\1\12\1\14\1\uffff\1\13\2\1\1\uffff\15\1",
            "",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "()* loopback of 38:48: ( advAdj | colon )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA5_26 = input.LA(1);

                         
                        int index5_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_26);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA5_17 = input.LA(1);

                         
                        int index5_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA5_18 = input.LA(1);

                         
                        int index5_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_18);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA5_21 = input.LA(1);

                         
                        int index5_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_21);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA5_23 = input.LA(1);

                         
                        int index5_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_23);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA5_25 = input.LA(1);

                         
                        int index5_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_25);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA5_19 = input.LA(1);

                         
                        int index5_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_19);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA5_15 = input.LA(1);

                         
                        int index5_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_15);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA5_16 = input.LA(1);

                         
                        int index5_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_16);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA5_20 = input.LA(1);

                         
                        int index5_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_20);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA5_24 = input.LA(1);

                         
                        int index5_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_24);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA5_22 = input.LA(1);

                         
                        int index5_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_22);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA5_27 = input.LA(1);

                         
                        int index5_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 29;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_27);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA7_eotS =
        "\u0088\uffff";
    static final String DFA7_eofS =
        "\u0088\uffff";
    static final String DFA7_minS =
        "\1\13\1\0\1\uffff\3\0\1\uffff\2\0\2\uffff\6\0\4\uffff\1\0\2\uffff"+
        "\1\0\30\uffff\1\0\5\uffff\1\0\120\uffff";
    static final String DFA7_maxS =
        "\1\u00bf\1\0\1\uffff\3\0\1\uffff\2\0\2\uffff\6\0\4\uffff\1\0\2\uffff"+
        "\1\0\30\uffff\1\0\5\uffff\1\0\120\uffff";
    static final String DFA7_acceptS =
        "\2\uffff\1\2\71\uffff\1\3\44\uffff\1\4\21\uffff\1\12\2\uffff\1\14"+
        "\1\15\1\16\1\21\5\uffff\1\1\1\20\1\17\1\7\1\5\1\10\1\6\1\11\1\13";
    static final String DFA7_specialS =
        "\1\uffff\1\0\1\uffff\1\1\1\2\1\3\1\uffff\1\4\1\5\2\uffff\1\6\1\7"+
        "\1\10\1\11\1\12\1\13\4\uffff\1\14\2\uffff\1\15\30\uffff\1\16\5\uffff"+
        "\1\17\120\uffff}>";
    static final String[] DFA7_transitionS = {
            "\1\25\1\17\1\20\1\2\1\61\2\uffff\20\141\3\2\1\uffff\20\2\1\7"+
            "\4\74\2\2\10\74\1\2\1\74\1\2\4\74\1\uffff\1\74\1\2\1\74\1\2"+
            "\4\74\1\2\1\74\1\2\3\74\1\2\1\74\1\30\1\2\3\74\1\166\1\4\1\uffff"+
            "\1\170\3\uffff\2\163\1\3\1\163\16\uffff\1\5\4\uffff\1\10\3\uffff"+
            "\1\2\1\1\1\2\4\uffff\1\141\1\13\1\14\1\15\1\16\1\167\1\uffff"+
            "\1\2\1\uffff\1\2\2\uffff\1\2\13\uffff\1\2\5\uffff\5\171\1\uffff"+
            "\1\171\1\67\1\141\1\uffff\6\74\7\2",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA7_eot = DFA.unpackEncodedString(DFA7_eotS);
    static final short[] DFA7_eof = DFA.unpackEncodedString(DFA7_eofS);
    static final char[] DFA7_min = DFA.unpackEncodedStringToUnsignedChars(DFA7_minS);
    static final char[] DFA7_max = DFA.unpackEncodedStringToUnsignedChars(DFA7_maxS);
    static final short[] DFA7_accept = DFA.unpackEncodedString(DFA7_acceptS);
    static final short[] DFA7_special = DFA.unpackEncodedString(DFA7_specialS);
    static final short[][] DFA7_transition;

    static {
        int numStates = DFA7_transitionS.length;
        DFA7_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA7_transition[i] = DFA.unpackEncodedString(DFA7_transitionS[i]);
        }
    }

    class DFA7 extends DFA {

        public DFA7(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = DFA7_eot;
            this.eof = DFA7_eof;
            this.min = DFA7_min;
            this.max = DFA7_max;
            this.accept = DFA7_accept;
            this.special = DFA7_special;
            this.transition = DFA7_transition;
        }
        public String getDescription() {
            return "45:4: ( fw | noun | verb | inAll | dt | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA7_1 = input.LA(1);

                         
                        int index7_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                         
                        input.seek(index7_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA7_3 = input.LA(1);

                         
                        int index7_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred21_ChemicalChunker()) ) {s = 115;}

                         
                        input.seek(index7_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA7_4 = input.LA(1);

                         
                        int index7_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred27_ChemicalChunker()) ) {s = 128;}

                         
                        input.seek(index7_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA7_5 = input.LA(1);

                         
                        int index7_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred26_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index7_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA7_7 = input.LA(1);

                         
                        int index7_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred18_ChemicalChunker()) ) {s = 130;}

                         
                        input.seek(index7_7);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA7_8 = input.LA(1);

                         
                        int index7_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred16_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index7_8);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA7_11 = input.LA(1);

                         
                        int index7_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (true) ) {s = 121;}

                         
                        input.seek(index7_11);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA7_12 = input.LA(1);

                         
                        int index7_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (true) ) {s = 121;}

                         
                        input.seek(index7_12);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA7_13 = input.LA(1);

                         
                        int index7_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (true) ) {s = 121;}

                         
                        input.seek(index7_13);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA7_14 = input.LA(1);

                         
                        int index7_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (true) ) {s = 121;}

                         
                        input.seek(index7_14);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA7_15 = input.LA(1);

                         
                        int index7_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (true) ) {s = 121;}

                         
                        input.seek(index7_15);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA7_16 = input.LA(1);

                         
                        int index7_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred19_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 121;}

                         
                        input.seek(index7_16);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA7_21 = input.LA(1);

                         
                        int index7_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred17_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred26_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index7_21);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA7_24 = input.LA(1);

                         
                        int index7_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred14_ChemicalChunker()) ) {s = 60;}

                         
                        input.seek(index7_24);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA7_49 = input.LA(1);

                         
                        int index7_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred20_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index7_49);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA7_55 = input.LA(1);

                         
                        int index7_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred22_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index7_55);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 7, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA9_eotS =
        "\103\uffff";
    static final String DFA9_eofS =
        "\103\uffff";
    static final String DFA9_minS =
        "\1\13\3\0\3\uffff\15\0\57\uffff";
    static final String DFA9_maxS =
        "\1\u00bf\3\0\3\uffff\15\0\57\uffff";
    static final String DFA9_acceptS =
        "\4\uffff\1\3\67\uffff\1\2\5\uffff\1\1";
    static final String DFA9_specialS =
        "\1\uffff\1\0\1\1\1\2\3\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\57\uffff}>";
    static final String[] DFA9_transitionS = {
            "\1\4\1\16\1\17\2\4\22\uffff\1\4\1\22\1\4\1\uffff\1\3\4\4\1\21"+
            "\4\4\1\11\6\4\4\uffff\1\20\1\4\10\uffff\1\23\1\uffff\1\4\6\uffff"+
            "\1\4\1\uffff\1\4\4\uffff\1\4\1\uffff\1\4\3\uffff\1\4\1\uffff"+
            "\2\4\4\uffff\1\4\7\uffff\1\1\17\uffff\1\2\4\uffff\1\7\3\uffff"+
            "\3\4\5\uffff\1\12\1\13\1\14\1\15\2\uffff\1\10\1\uffff\1\4\2"+
            "\uffff\1\4\13\uffff\1\4\5\uffff\5\74\1\uffff\1\74\1\4\10\uffff"+
            "\7\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA9_eot = DFA.unpackEncodedString(DFA9_eotS);
    static final short[] DFA9_eof = DFA.unpackEncodedString(DFA9_eofS);
    static final char[] DFA9_min = DFA.unpackEncodedStringToUnsignedChars(DFA9_minS);
    static final char[] DFA9_max = DFA.unpackEncodedStringToUnsignedChars(DFA9_maxS);
    static final short[] DFA9_accept = DFA.unpackEncodedString(DFA9_acceptS);
    static final short[] DFA9_special = DFA.unpackEncodedString(DFA9_specialS);
    static final short[][] DFA9_transition;

    static {
        int numStates = DFA9_transitionS.length;
        DFA9_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA9_transition[i] = DFA.unpackEncodedString(DFA9_transitionS[i]);
        }
    }

    class DFA9 extends DFA {

        public DFA9(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 9;
            this.eot = DFA9_eot;
            this.eof = DFA9_eof;
            this.min = DFA9_min;
            this.max = DFA9_max;
            this.accept = DFA9_accept;
            this.special = DFA9_special;
            this.transition = DFA9_transition;
        }
        public String getDescription() {
            return "()* loopback of 50:27: ( apparatus | advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA9_1 = input.LA(1);

                         
                        int index9_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index9_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA9_2 = input.LA(1);

                         
                        int index9_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index9_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA9_3 = input.LA(1);

                         
                        int index9_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index9_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA9_7 = input.LA(1);

                         
                        int index9_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index9_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA9_8 = input.LA(1);

                         
                        int index9_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index9_8);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA9_9 = input.LA(1);

                         
                        int index9_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index9_9);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA9_10 = input.LA(1);

                         
                        int index9_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred30_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index9_10);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA9_11 = input.LA(1);

                         
                        int index9_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred30_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index9_11);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA9_12 = input.LA(1);

                         
                        int index9_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred30_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index9_12);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA9_13 = input.LA(1);

                         
                        int index9_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred30_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index9_13);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA9_14 = input.LA(1);

                         
                        int index9_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred30_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index9_14);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA9_15 = input.LA(1);

                         
                        int index9_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred30_ChemicalChunker()) ) {s = 60;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index9_15);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA9_16 = input.LA(1);

                         
                        int index9_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index9_16);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA9_17 = input.LA(1);

                         
                        int index9_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index9_17);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA9_18 = input.LA(1);

                         
                        int index9_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index9_18);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA9_19 = input.LA(1);

                         
                        int index9_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index9_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 9, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA10_eotS =
        "\101\uffff";
    static final String DFA10_eofS =
        "\1\1\100\uffff";
    static final String DFA10_minS =
        "\1\13\1\uffff\73\0\4\uffff";
    static final String DFA10_maxS =
        "\1\u00bf\1\uffff\73\0\4\uffff";
    static final String DFA10_acceptS =
        "\1\uffff\1\5\73\uffff\1\1\1\2\1\4\1\3";
    static final String DFA10_specialS =
        "\2\uffff\1\17\1\1\1\4\1\10\1\15\1\21\1\30\1\36\1\7\1\64\1\62\1\57"+
        "\1\55\1\50\1\24\1\54\1\65\1\13\1\5\1\47\1\33\1\32\1\41\1\72\1\22"+
        "\1\56\1\71\1\40\1\63\1\23\1\70\1\0\1\20\1\67\1\16\1\46\1\53\1\51"+
        "\1\11\1\2\1\66\1\37\1\6\1\61\1\34\1\60\1\42\1\26\1\25\1\12\1\44"+
        "\1\43\1\27\1\45\1\35\1\3\1\52\1\31\1\14\4\uffff}>";
    static final String[] DFA10_transitionS = {
            "\1\25\1\7\1\10\1\32\1\61\2\uffff\20\1\1\31\1\23\1\33\1\uffff"+
            "\1\14\1\42\1\34\1\35\1\51\1\22\1\36\1\37\1\40\1\41\1\20\1\43"+
            "\1\44\1\45\1\46\1\47\1\15\4\1\1\21\1\60\10\1\1\24\1\1\1\50\4"+
            "\1\1\uffff\1\1\1\62\1\1\1\63\4\1\1\64\1\1\1\52\3\1\1\65\1\1"+
            "\1\30\1\57\4\1\1\2\1\uffff\3\1\1\uffff\2\1\1\12\1\1\15\uffff"+
            "\1\1\1\13\4\uffff\1\16\3\uffff\1\73\1\66\1\67\4\uffff\1\1\1"+
            "\3\1\4\1\5\1\6\1\1\1\uffff\1\17\1\uffff\1\26\2\uffff\1\27\13"+
            "\uffff\1\11\5\uffff\5\1\1\uffff\1\1\1\70\1\1\1\uffff\6\1\1\53"+
            "\1\54\1\55\1\56\1\71\1\72\1\74",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA10_eot = DFA.unpackEncodedString(DFA10_eotS);
    static final short[] DFA10_eof = DFA.unpackEncodedString(DFA10_eofS);
    static final char[] DFA10_min = DFA.unpackEncodedStringToUnsignedChars(DFA10_minS);
    static final char[] DFA10_max = DFA.unpackEncodedStringToUnsignedChars(DFA10_maxS);
    static final short[] DFA10_accept = DFA.unpackEncodedString(DFA10_acceptS);
    static final short[] DFA10_special = DFA.unpackEncodedString(DFA10_specialS);
    static final short[][] DFA10_transition;

    static {
        int numStates = DFA10_transitionS.length;
        DFA10_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA10_transition[i] = DFA.unpackEncodedString(DFA10_transitionS[i]);
        }
    }

    class DFA10 extends DFA {

        public DFA10(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 10;
            this.eot = DFA10_eot;
            this.eof = DFA10_eof;
            this.min = DFA10_min;
            this.max = DFA10_max;
            this.accept = DFA10_accept;
            this.special = DFA10_special;
            this.transition = DFA10_transition;
        }
        public String getDescription() {
            return "()+ loopback of 50:48: ( dissolvePhrase | noun | number | ratio )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA10_33 = input.LA(1);

                         
                        int index10_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_33);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA10_3 = input.LA(1);

                         
                        int index10_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA10_41 = input.LA(1);

                         
                        int index10_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_41);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA10_57 = input.LA(1);

                         
                        int index10_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_57);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA10_4 = input.LA(1);

                         
                        int index10_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA10_20 = input.LA(1);

                         
                        int index10_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_20);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA10_44 = input.LA(1);

                         
                        int index10_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_44);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA10_10 = input.LA(1);

                         
                        int index10_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_10);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA10_5 = input.LA(1);

                         
                        int index10_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_5);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA10_40 = input.LA(1);

                         
                        int index10_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_40);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA10_51 = input.LA(1);

                         
                        int index10_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_51);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA10_19 = input.LA(1);

                         
                        int index10_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_19);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA10_60 = input.LA(1);

                         
                        int index10_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_60);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA10_6 = input.LA(1);

                         
                        int index10_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_6);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA10_36 = input.LA(1);

                         
                        int index10_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_36);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA10_2 = input.LA(1);

                         
                        int index10_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_2);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA10_34 = input.LA(1);

                         
                        int index10_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_34);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA10_7 = input.LA(1);

                         
                        int index10_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_7);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA10_26 = input.LA(1);

                         
                        int index10_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_26);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA10_31 = input.LA(1);

                         
                        int index10_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_31);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA10_16 = input.LA(1);

                         
                        int index10_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_16);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA10_50 = input.LA(1);

                         
                        int index10_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_50);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA10_49 = input.LA(1);

                         
                        int index10_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_49);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA10_54 = input.LA(1);

                         
                        int index10_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_54);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA10_8 = input.LA(1);

                         
                        int index10_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_8);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA10_59 = input.LA(1);

                         
                        int index10_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_59);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA10_23 = input.LA(1);

                         
                        int index10_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_23);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA10_22 = input.LA(1);

                         
                        int index10_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_22);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA10_46 = input.LA(1);

                         
                        int index10_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_46);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA10_56 = input.LA(1);

                         
                        int index10_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_56);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA10_9 = input.LA(1);

                         
                        int index10_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_9);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA10_43 = input.LA(1);

                         
                        int index10_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_43);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA10_29 = input.LA(1);

                         
                        int index10_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_29);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA10_24 = input.LA(1);

                         
                        int index10_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_24);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA10_48 = input.LA(1);

                         
                        int index10_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_48);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA10_53 = input.LA(1);

                         
                        int index10_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_53);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA10_52 = input.LA(1);

                         
                        int index10_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_52);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA10_55 = input.LA(1);

                         
                        int index10_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_55);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA10_37 = input.LA(1);

                         
                        int index10_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_37);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA10_21 = input.LA(1);

                         
                        int index10_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_21);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA10_15 = input.LA(1);

                         
                        int index10_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_15);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA10_39 = input.LA(1);

                         
                        int index10_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_39);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA10_58 = input.LA(1);

                         
                        int index10_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_58);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA10_38 = input.LA(1);

                         
                        int index10_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_38);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA10_17 = input.LA(1);

                         
                        int index10_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_17);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA10_14 = input.LA(1);

                         
                        int index10_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_14);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA10_27 = input.LA(1);

                         
                        int index10_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_27);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA10_13 = input.LA(1);

                         
                        int index10_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_13);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA10_47 = input.LA(1);

                         
                        int index10_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_47);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA10_45 = input.LA(1);

                         
                        int index10_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_45);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA10_12 = input.LA(1);

                         
                        int index10_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_12);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA10_30 = input.LA(1);

                         
                        int index10_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_30);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA10_11 = input.LA(1);

                         
                        int index10_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_11);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA10_18 = input.LA(1);

                         
                        int index10_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_18);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA10_42 = input.LA(1);

                         
                        int index10_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_42);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA10_35 = input.LA(1);

                         
                        int index10_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_35);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA10_32 = input.LA(1);

                         
                        int index10_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_32);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA10_28 = input.LA(1);

                         
                        int index10_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_28);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA10_25 = input.LA(1);

                         
                        int index10_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred34_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 10, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA13_eotS =
        "\107\uffff";
    static final String DFA13_eofS =
        "\1\1\106\uffff";
    static final String DFA13_minS =
        "\1\13\1\uffff\102\0\3\uffff";
    static final String DFA13_maxS =
        "\1\u00bf\1\uffff\102\0\3\uffff";
    static final String DFA13_acceptS =
        "\1\uffff\1\4\102\uffff\1\1\1\3\1\2";
    static final String DFA13_specialS =
        "\2\uffff\1\3\1\65\1\14\1\24\1\11\1\50\1\66\1\40\1\17\1\6\1\20\1"+
        "\23\1\2\1\51\1\42\1\77\1\45\1\47\1\36\1\55\1\1\1\10\1\35\1\0\1\76"+
        "\1\75\1\71\1\54\1\74\1\61\1\72\1\41\1\57\1\70\1\30\1\46\1\63\1\67"+
        "\1\34\1\13\1\5\1\33\1\60\1\73\1\15\1\26\1\12\1\44\1\22\1\31\1\37"+
        "\1\64\1\100\1\56\1\52\1\16\1\4\1\27\1\101\1\21\1\43\1\32\1\62\1"+
        "\53\1\25\1\7\3\uffff}>";
    static final String[] DFA13_transitionS = {
            "\1\34\1\14\1\15\1\41\1\70\2\uffff\20\1\1\40\1\30\1\42\1\uffff"+
            "\1\23\1\51\1\43\1\44\1\60\1\27\1\45\1\46\1\47\1\50\1\25\1\52"+
            "\1\53\1\54\1\55\1\56\1\32\4\1\1\26\1\67\10\1\1\31\1\1\1\57\4"+
            "\1\1\uffff\1\1\1\71\1\1\1\72\4\1\1\73\1\1\1\61\3\1\1\74\1\1"+
            "\1\37\1\66\4\1\1\17\1\uffff\3\1\1\uffff\2\1\1\21\1\1\15\uffff"+
            "\1\16\1\22\4\uffff\1\20\3\uffff\1\102\1\75\1\76\4\uffff\1\1"+
            "\1\10\1\11\1\12\1\13\1\1\1\uffff\1\24\1\uffff\1\35\2\uffff\1"+
            "\36\13\uffff\1\33\5\uffff\1\2\1\3\1\7\1\4\1\6\1\uffff\1\5\1"+
            "\77\1\1\1\uffff\6\1\1\62\1\63\1\64\1\65\1\100\1\101\1\103",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA13_eot = DFA.unpackEncodedString(DFA13_eotS);
    static final short[] DFA13_eof = DFA.unpackEncodedString(DFA13_eofS);
    static final char[] DFA13_min = DFA.unpackEncodedStringToUnsignedChars(DFA13_minS);
    static final char[] DFA13_max = DFA.unpackEncodedStringToUnsignedChars(DFA13_maxS);
    static final short[] DFA13_accept = DFA.unpackEncodedString(DFA13_acceptS);
    static final short[] DFA13_special = DFA.unpackEncodedString(DFA13_specialS);
    static final short[][] DFA13_transition;

    static {
        int numStates = DFA13_transitionS.length;
        DFA13_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA13_transition[i] = DFA.unpackEncodedString(DFA13_transitionS[i]);
        }
    }

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = DFA13_eot;
            this.eof = DFA13_eof;
            this.min = DFA13_min;
            this.max = DFA13_max;
            this.accept = DFA13_accept;
            this.special = DFA13_special;
            this.transition = DFA13_transition;
        }
        public String getDescription() {
            return "()* loopback of 50:87: ( ( conjunction )* ( advAdj )* noun | number | ratio )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA13_25 = input.LA(1);

                         
                        int index13_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_25);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA13_22 = input.LA(1);

                         
                        int index13_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_22);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA13_14 = input.LA(1);

                         
                        int index13_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_14);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA13_2 = input.LA(1);

                         
                        int index13_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_2);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA13_58 = input.LA(1);

                         
                        int index13_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_58);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA13_42 = input.LA(1);

                         
                        int index13_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_42);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA13_11 = input.LA(1);

                         
                        int index13_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_11);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA13_67 = input.LA(1);

                         
                        int index13_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_67);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA13_23 = input.LA(1);

                         
                        int index13_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_23);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA13_6 = input.LA(1);

                         
                        int index13_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_6);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA13_48 = input.LA(1);

                         
                        int index13_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_48);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA13_41 = input.LA(1);

                         
                        int index13_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_41);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA13_4 = input.LA(1);

                         
                        int index13_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_4);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA13_46 = input.LA(1);

                         
                        int index13_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_46);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA13_57 = input.LA(1);

                         
                        int index13_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_57);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA13_10 = input.LA(1);

                         
                        int index13_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_10);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA13_12 = input.LA(1);

                         
                        int index13_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_12);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA13_61 = input.LA(1);

                         
                        int index13_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_61);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA13_50 = input.LA(1);

                         
                        int index13_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_50);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA13_13 = input.LA(1);

                         
                        int index13_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_13);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA13_5 = input.LA(1);

                         
                        int index13_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_5);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA13_66 = input.LA(1);

                         
                        int index13_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_66);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA13_47 = input.LA(1);

                         
                        int index13_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_47);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA13_59 = input.LA(1);

                         
                        int index13_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_59);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA13_36 = input.LA(1);

                         
                        int index13_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_36);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA13_51 = input.LA(1);

                         
                        int index13_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_51);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA13_63 = input.LA(1);

                         
                        int index13_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_63);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA13_43 = input.LA(1);

                         
                        int index13_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_43);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA13_40 = input.LA(1);

                         
                        int index13_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_40);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA13_24 = input.LA(1);

                         
                        int index13_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_24);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA13_20 = input.LA(1);

                         
                        int index13_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_20);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA13_52 = input.LA(1);

                         
                        int index13_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_52);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA13_9 = input.LA(1);

                         
                        int index13_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_9);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA13_33 = input.LA(1);

                         
                        int index13_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA13_16 = input.LA(1);

                         
                        int index13_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_16);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA13_62 = input.LA(1);

                         
                        int index13_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_62);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA13_49 = input.LA(1);

                         
                        int index13_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_49);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA13_18 = input.LA(1);

                         
                        int index13_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_18);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA13_37 = input.LA(1);

                         
                        int index13_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_37);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA13_19 = input.LA(1);

                         
                        int index13_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_19);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA13_7 = input.LA(1);

                         
                        int index13_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_7);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA13_15 = input.LA(1);

                         
                        int index13_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_15);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA13_56 = input.LA(1);

                         
                        int index13_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_56);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA13_65 = input.LA(1);

                         
                        int index13_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_65);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA13_29 = input.LA(1);

                         
                        int index13_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_29);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA13_21 = input.LA(1);

                         
                        int index13_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_21);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA13_55 = input.LA(1);

                         
                        int index13_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_55);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA13_34 = input.LA(1);

                         
                        int index13_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_34);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA13_44 = input.LA(1);

                         
                        int index13_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_44);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA13_31 = input.LA(1);

                         
                        int index13_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_31);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA13_64 = input.LA(1);

                         
                        int index13_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_64);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA13_38 = input.LA(1);

                         
                        int index13_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_38);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA13_53 = input.LA(1);

                         
                        int index13_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA13_3 = input.LA(1);

                         
                        int index13_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_3);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA13_8 = input.LA(1);

                         
                        int index13_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_8);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA13_39 = input.LA(1);

                         
                        int index13_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_39);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA13_35 = input.LA(1);

                         
                        int index13_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_35);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA13_28 = input.LA(1);

                         
                        int index13_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_28);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA13_32 = input.LA(1);

                         
                        int index13_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_32);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA13_45 = input.LA(1);

                         
                        int index13_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_45);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA13_30 = input.LA(1);

                         
                        int index13_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_30);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA13_27 = input.LA(1);

                         
                        int index13_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_27);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA13_26 = input.LA(1);

                         
                        int index13_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_26);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA13_17 = input.LA(1);

                         
                        int index13_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_17);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA13_54 = input.LA(1);

                         
                        int index13_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_54);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA13_60 = input.LA(1);

                         
                        int index13_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_60);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 13, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA11_eotS =
        "\103\uffff";
    static final String DFA11_eofS =
        "\103\uffff";
    static final String DFA11_minS =
        "\1\13\16\uffff\1\0\63\uffff";
    static final String DFA11_maxS =
        "\1\u00bf\16\uffff\1\0\63\uffff";
    static final String DFA11_acceptS =
        "\1\uffff\1\2\100\uffff\1\1";
    static final String DFA11_specialS =
        "\17\uffff\1\0\63\uffff}>";
    static final String[] DFA11_transitionS = {
            "\5\1\22\uffff\3\1\1\uffff\21\1\4\uffff\2\1\10\uffff\1\1\1\uffff"+
            "\1\1\6\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\1\uffff\2\1\4\uffff\1\17\7\uffff\1\1\16\uffff\1\102\1\1"+
            "\4\uffff\1\1\3\uffff\3\1\5\uffff\4\1\2\uffff\1\1\1\uffff\1\1"+
            "\2\uffff\1\1\13\uffff\1\1\5\uffff\5\1\1\uffff\2\1\10\uffff\7"+
            "\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "()* loopback of 50:88: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA11_15 = input.LA(1);

                         
                        int index11_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 11, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA12_eotS =
        "\17\uffff";
    static final String DFA12_eofS =
        "\17\uffff";
    static final String DFA12_minS =
        "\1\13\1\uffff\6\12\1\uffff\6\0";
    static final String DFA12_maxS =
        "\1\u00bf\1\uffff\6\12\1\uffff\6\0";
    static final String DFA12_acceptS =
        "\1\uffff\1\2\6\uffff\1\1\6\uffff";
    static final String DFA12_specialS =
        "\11\uffff\1\1\1\3\1\5\1\2\1\0\1\4}>";
    static final String[] DFA12_transitionS = {
            "\1\1\1\6\1\7\2\1\22\uffff\3\1\1\uffff\21\1\4\uffff\2\1\10\uffff"+
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff"+
            "\1\1\3\uffff\1\1\1\uffff\2\1\4\uffff\1\1\7\uffff\1\1\17\uffff"+
            "\1\1\4\uffff\1\1\3\uffff\3\1\5\uffff\1\2\1\3\1\4\1\5\2\uffff"+
            "\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff\5\10\1\uffff"+
            "\1\10\1\1\10\uffff\7\1",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA12_eot = DFA.unpackEncodedString(DFA12_eotS);
    static final short[] DFA12_eof = DFA.unpackEncodedString(DFA12_eofS);
    static final char[] DFA12_min = DFA.unpackEncodedStringToUnsignedChars(DFA12_minS);
    static final char[] DFA12_max = DFA.unpackEncodedStringToUnsignedChars(DFA12_maxS);
    static final short[] DFA12_accept = DFA.unpackEncodedString(DFA12_acceptS);
    static final short[] DFA12_special = DFA.unpackEncodedString(DFA12_specialS);
    static final short[][] DFA12_transition;

    static {
        int numStates = DFA12_transitionS.length;
        DFA12_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA12_transition[i] = DFA.unpackEncodedString(DFA12_transitionS[i]);
        }
    }

    class DFA12 extends DFA {

        public DFA12(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 12;
            this.eot = DFA12_eot;
            this.eof = DFA12_eof;
            this.min = DFA12_min;
            this.max = DFA12_max;
            this.accept = DFA12_accept;
            this.special = DFA12_special;
            this.transition = DFA12_transition;
        }
        public String getDescription() {
            return "()* loopback of 50:101: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA12_13 = input.LA(1);

                         
                        int index12_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_13);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA12_9 = input.LA(1);

                         
                        int index12_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA12_12 = input.LA(1);

                         
                        int index12_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_12);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA12_10 = input.LA(1);

                         
                        int index12_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_10);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA12_14 = input.LA(1);

                         
                        int index12_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_14);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA12_11 = input.LA(1);

                         
                        int index12_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 12, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA14_eotS =
        "\u0084\uffff";
    static final String DFA14_eofS =
        "\1\6\u0083\uffff";
    static final String DFA14_minS =
        "\1\13\5\0\176\uffff";
    static final String DFA14_maxS =
        "\1\u00bf\5\0\176\uffff";
    static final String DFA14_acceptS =
        "\6\uffff\1\2\174\uffff\1\1";
    static final String DFA14_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\176\uffff}>";
    static final String[] DFA14_transitionS = {
            "\5\6\2\uffff\23\6\1\uffff\1\3\17\6\1\5\25\6\1\uffff\26\6\1\4"+
            "\1\uffff\3\6\1\uffff\2\6\1\1\1\6\15\uffff\1\6\1\2\4\uffff\1"+
            "\6\3\uffff\3\6\4\uffff\6\6\1\uffff\1\6\1\uffff\1\6\2\uffff\1"+
            "\6\13\uffff\1\6\5\uffff\5\6\1\uffff\3\6\1\uffff\15\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA14_eot = DFA.unpackEncodedString(DFA14_eotS);
    static final short[] DFA14_eof = DFA.unpackEncodedString(DFA14_eofS);
    static final char[] DFA14_min = DFA.unpackEncodedStringToUnsignedChars(DFA14_minS);
    static final char[] DFA14_max = DFA.unpackEncodedStringToUnsignedChars(DFA14_maxS);
    static final short[] DFA14_accept = DFA.unpackEncodedString(DFA14_acceptS);
    static final short[] DFA14_special = DFA.unpackEncodedString(DFA14_specialS);
    static final short[][] DFA14_transition;

    static {
        int numStates = DFA14_transitionS.length;
        DFA14_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA14_transition[i] = DFA.unpackEncodedString(DFA14_transitionS[i]);
        }
    }

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = DFA14_eot;
            this.eof = DFA14_eof;
            this.min = DFA14_min;
            this.max = DFA14_max;
            this.accept = DFA14_accept;
            this.special = DFA14_special;
            this.transition = DFA14_transition;
        }
        public String getDescription() {
            return "50:161: ( dissolvePhrase )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA14_1 = input.LA(1);

                         
                        int index14_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index14_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA14_2 = input.LA(1);

                         
                        int index14_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index14_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA14_3 = input.LA(1);

                         
                        int index14_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index14_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA14_4 = input.LA(1);

                         
                        int index14_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index14_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA14_5 = input.LA(1);

                         
                        int index14_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index14_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 14, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA18_eotS =
        "\u0084\uffff";
    static final String DFA18_eofS =
        "\1\1\u0083\uffff";
    static final String DFA18_minS =
        "\1\13\103\uffff\1\0\77\uffff";
    static final String DFA18_maxS =
        "\1\u00bf\103\uffff\1\0\77\uffff";
    static final String DFA18_acceptS =
        "\1\uffff\1\2\u0081\uffff\1\1";
    static final String DFA18_specialS =
        "\104\uffff\1\0\77\uffff}>";
    static final String[] DFA18_transitionS = {
            "\5\1\2\uffff\3\1\1\104\17\1\1\uffff\46\1\1\uffff\27\1\1\uffff"+
            "\3\1\1\uffff\4\1\15\uffff\2\1\4\uffff\1\1\3\uffff\3\1\4\uffff"+
            "\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\5\1\1\uffff\3\1\1\uffff\15\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA18_eot = DFA.unpackEncodedString(DFA18_eotS);
    static final short[] DFA18_eof = DFA.unpackEncodedString(DFA18_eofS);
    static final char[] DFA18_min = DFA.unpackEncodedStringToUnsignedChars(DFA18_minS);
    static final char[] DFA18_max = DFA.unpackEncodedStringToUnsignedChars(DFA18_maxS);
    static final short[] DFA18_accept = DFA.unpackEncodedString(DFA18_acceptS);
    static final short[] DFA18_special = DFA.unpackEncodedString(DFA18_specialS);
    static final short[][] DFA18_transition;

    static {
        int numStates = DFA18_transitionS.length;
        DFA18_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA18_transition[i] = DFA.unpackEncodedString(DFA18_transitionS[i]);
        }
    }

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = DFA18_eot;
            this.eof = DFA18_eof;
            this.min = DFA18_min;
            this.max = DFA18_max;
            this.accept = DFA18_accept;
            this.special = DFA18_special;
            this.transition = DFA18_transition;
        }
        public String getDescription() {
            return "()+ loopback of 57:13: ( inin molecule )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA18_68 = input.LA(1);

                         
                        int index18_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_68);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA31_eotS =
        "\66\uffff";
    static final String DFA31_eofS =
        "\1\1\65\uffff";
    static final String DFA31_minS =
        "\1\13\1\uffff\63\0\1\uffff";
    static final String DFA31_maxS =
        "\1\u00bf\1\uffff\63\0\1\uffff";
    static final String DFA31_acceptS =
        "\1\uffff\1\2\63\uffff\1\1";
    static final String DFA31_specialS =
        "\2\uffff\1\14\1\20\1\11\1\55\1\35\1\24\1\21\1\50\1\6\1\16\1\36\1"+
        "\27\1\3\1\10\1\54\1\22\1\51\1\5\1\37\1\52\1\0\1\34\1\47\1\17\1\4"+
        "\1\60\1\45\1\26\1\12\1\61\1\46\1\2\1\62\1\43\1\25\1\13\1\42\1\30"+
        "\1\56\1\7\1\32\1\41\1\1\1\33\1\44\1\57\1\31\1\53\1\40\1\23\1\15"+
        "\1\uffff}>";
    static final String[] DFA31_transitionS = {
            "\1\1\1\14\1\15\2\1\2\uffff\23\1\1\uffff\21\1\1\26\1\64\1\27"+
            "\1\30\2\1\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\1\1\41\1"+
            "\1\1\42\1\43\1\44\1\45\1\uffff\1\46\1\1\1\47\1\1\1\50\1\51\1"+
            "\52\1\53\1\1\1\54\1\1\1\55\1\56\1\57\1\1\1\60\1\16\1\1\1\61"+
            "\1\62\1\63\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\4\1\15\uffff"+
            "\2\1\4\uffff\1\1\3\uffff\3\1\4\uffff\1\1\1\10\1\11\1\12\1\13"+
            "\1\17\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\1\2\1\3\1\7\1\4\1\6\1\uffff\1\5\2\1\1\uffff\1\20\1\21\1\23"+
            "\1\22\1\25\1\24\7\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA31_eot = DFA.unpackEncodedString(DFA31_eotS);
    static final short[] DFA31_eof = DFA.unpackEncodedString(DFA31_eofS);
    static final char[] DFA31_min = DFA.unpackEncodedStringToUnsignedChars(DFA31_minS);
    static final char[] DFA31_max = DFA.unpackEncodedStringToUnsignedChars(DFA31_maxS);
    static final short[] DFA31_accept = DFA.unpackEncodedString(DFA31_acceptS);
    static final short[] DFA31_special = DFA.unpackEncodedString(DFA31_specialS);
    static final short[][] DFA31_transition;

    static {
        int numStates = DFA31_transitionS.length;
        DFA31_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA31_transition[i] = DFA.unpackEncodedString(DFA31_transitionS[i]);
        }
    }

    class DFA31 extends DFA {

        public DFA31(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 31;
            this.eot = DFA31_eot;
            this.eof = DFA31_eof;
            this.min = DFA31_min;
            this.max = DFA31_max;
            this.accept = DFA31_accept;
            this.special = DFA31_special;
            this.transition = DFA31_transition;
        }
        public String getDescription() {
            return "()+ loopback of 66:44: ( ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA31_22 = input.LA(1);

                         
                        int index31_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_22);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA31_44 = input.LA(1);

                         
                        int index31_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_44);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA31_33 = input.LA(1);

                         
                        int index31_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_33);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA31_14 = input.LA(1);

                         
                        int index31_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_14);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA31_26 = input.LA(1);

                         
                        int index31_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_26);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA31_19 = input.LA(1);

                         
                        int index31_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_19);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA31_10 = input.LA(1);

                         
                        int index31_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_10);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA31_41 = input.LA(1);

                         
                        int index31_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_41);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA31_15 = input.LA(1);

                         
                        int index31_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_15);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA31_4 = input.LA(1);

                         
                        int index31_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_4);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA31_30 = input.LA(1);

                         
                        int index31_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_30);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA31_37 = input.LA(1);

                         
                        int index31_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_37);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA31_2 = input.LA(1);

                         
                        int index31_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_2);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA31_52 = input.LA(1);

                         
                        int index31_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_52);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA31_11 = input.LA(1);

                         
                        int index31_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_11);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA31_25 = input.LA(1);

                         
                        int index31_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_25);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA31_3 = input.LA(1);

                         
                        int index31_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_3);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA31_8 = input.LA(1);

                         
                        int index31_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_8);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA31_17 = input.LA(1);

                         
                        int index31_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_17);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA31_51 = input.LA(1);

                         
                        int index31_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_51);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA31_7 = input.LA(1);

                         
                        int index31_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_7);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA31_36 = input.LA(1);

                         
                        int index31_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_36);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA31_29 = input.LA(1);

                         
                        int index31_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_29);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA31_13 = input.LA(1);

                         
                        int index31_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_13);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA31_39 = input.LA(1);

                         
                        int index31_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_39);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA31_48 = input.LA(1);

                         
                        int index31_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_48);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA31_42 = input.LA(1);

                         
                        int index31_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_42);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA31_45 = input.LA(1);

                         
                        int index31_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_45);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA31_23 = input.LA(1);

                         
                        int index31_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_23);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA31_6 = input.LA(1);

                         
                        int index31_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_6);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA31_12 = input.LA(1);

                         
                        int index31_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_12);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA31_20 = input.LA(1);

                         
                        int index31_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_20);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA31_50 = input.LA(1);

                         
                        int index31_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_50);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA31_43 = input.LA(1);

                         
                        int index31_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_43);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA31_38 = input.LA(1);

                         
                        int index31_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_38);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA31_35 = input.LA(1);

                         
                        int index31_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA31_46 = input.LA(1);

                         
                        int index31_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_46);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA31_28 = input.LA(1);

                         
                        int index31_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_28);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA31_32 = input.LA(1);

                         
                        int index31_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_32);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA31_24 = input.LA(1);

                         
                        int index31_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_24);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA31_9 = input.LA(1);

                         
                        int index31_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_9);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA31_18 = input.LA(1);

                         
                        int index31_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_18);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA31_21 = input.LA(1);

                         
                        int index31_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_21);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA31_49 = input.LA(1);

                         
                        int index31_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_49);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA31_16 = input.LA(1);

                         
                        int index31_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_16);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA31_5 = input.LA(1);

                         
                        int index31_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_5);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA31_40 = input.LA(1);

                         
                        int index31_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_40);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA31_47 = input.LA(1);

                         
                        int index31_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA31_27 = input.LA(1);

                         
                        int index31_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_27);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA31_31 = input.LA(1);

                         
                        int index31_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_31);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA31_34 = input.LA(1);

                         
                        int index31_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_34);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 31, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA26_eotS =
        "\51\uffff";
    static final String DFA26_eofS =
        "\1\1\50\uffff";
    static final String DFA26_minS =
        "\1\13\1\uffff\46\0\1\uffff";
    static final String DFA26_maxS =
        "\1\u00bf\1\uffff\46\0\1\uffff";
    static final String DFA26_acceptS =
        "\1\uffff\1\2\46\uffff\1\1";
    static final String DFA26_specialS =
        "\2\uffff\1\12\1\26\1\22\1\16\1\36\1\4\1\34\1\43\1\21\1\41\1\25\1"+
        "\2\1\45\1\14\1\35\1\13\1\24\1\5\1\11\1\15\1\37\1\17\1\40\1\27\1"+
        "\33\1\44\1\32\1\10\1\30\1\20\1\7\1\31\1\0\1\3\1\1\1\23\1\6\1\42"+
        "\1\uffff}>";
    static final String[] DFA26_transitionS = {
            "\5\1\2\uffff\23\1\1\uffff\21\1\1\11\1\47\1\12\1\13\2\1\1\14"+
            "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\1\1\24\1\1\1\25\1\26\1"+
            "\27\1\30\1\uffff\1\31\1\1\1\32\1\1\1\33\1\34\1\35\1\36\1\1\1"+
            "\37\1\1\1\40\1\41\1\42\1\1\1\43\1\2\1\1\1\44\1\45\1\46\2\1\1"+
            "\uffff\1\1\1\uffff\1\1\1\uffff\4\1\15\uffff\2\1\4\uffff\1\1"+
            "\3\uffff\3\1\4\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1"+
            "\13\uffff\1\1\5\uffff\5\1\1\uffff\3\1\1\uffff\1\3\1\4\1\6\1"+
            "\5\1\10\1\7\7\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
    static final short[][] DFA26_transition;

    static {
        int numStates = DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }
        public String getDescription() {
            return "()+ loopback of 66:59: ( verb )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA26_34 = input.LA(1);

                         
                        int index26_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_34);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA26_36 = input.LA(1);

                         
                        int index26_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_36);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA26_13 = input.LA(1);

                         
                        int index26_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_13);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA26_35 = input.LA(1);

                         
                        int index26_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_35);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA26_7 = input.LA(1);

                         
                        int index26_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_7);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA26_19 = input.LA(1);

                         
                        int index26_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_19);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA26_38 = input.LA(1);

                         
                        int index26_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_38);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA26_32 = input.LA(1);

                         
                        int index26_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_32);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA26_29 = input.LA(1);

                         
                        int index26_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_29);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA26_20 = input.LA(1);

                         
                        int index26_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_20);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA26_2 = input.LA(1);

                         
                        int index26_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_2);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA26_17 = input.LA(1);

                         
                        int index26_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_17);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA26_15 = input.LA(1);

                         
                        int index26_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_15);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA26_21 = input.LA(1);

                         
                        int index26_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_21);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA26_5 = input.LA(1);

                         
                        int index26_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_5);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA26_23 = input.LA(1);

                         
                        int index26_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_23);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA26_31 = input.LA(1);

                         
                        int index26_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_31);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA26_10 = input.LA(1);

                         
                        int index26_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_10);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA26_4 = input.LA(1);

                         
                        int index26_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_4);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA26_37 = input.LA(1);

                         
                        int index26_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_37);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA26_18 = input.LA(1);

                         
                        int index26_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_18);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA26_12 = input.LA(1);

                         
                        int index26_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_12);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA26_3 = input.LA(1);

                         
                        int index26_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_3);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA26_25 = input.LA(1);

                         
                        int index26_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA26_30 = input.LA(1);

                         
                        int index26_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_30);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA26_33 = input.LA(1);

                         
                        int index26_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_33);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA26_28 = input.LA(1);

                         
                        int index26_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA26_26 = input.LA(1);

                         
                        int index26_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_26);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA26_8 = input.LA(1);

                         
                        int index26_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_8);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA26_16 = input.LA(1);

                         
                        int index26_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_16);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA26_6 = input.LA(1);

                         
                        int index26_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_6);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA26_22 = input.LA(1);

                         
                        int index26_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_22);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA26_24 = input.LA(1);

                         
                        int index26_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_24);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA26_11 = input.LA(1);

                         
                        int index26_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_11);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA26_39 = input.LA(1);

                         
                        int index26_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_39);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA26_9 = input.LA(1);

                         
                        int index26_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_9);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA26_27 = input.LA(1);

                         
                        int index26_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_27);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA26_14 = input.LA(1);

                         
                        int index26_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA28_eotS =
        "\17\uffff";
    static final String DFA28_eofS =
        "\1\1\16\uffff";
    static final String DFA28_minS =
        "\1\13\1\uffff\6\12\6\0\1\uffff";
    static final String DFA28_maxS =
        "\1\u00bf\1\uffff\6\12\6\0\1\uffff";
    static final String DFA28_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA28_specialS =
        "\10\uffff\1\3\1\0\1\2\1\4\1\5\1\1\1\uffff}>";
    static final String[] DFA28_transitionS = {
            "\5\1\2\uffff\23\1\1\uffff\46\1\1\uffff\27\1\1\uffff\1\1\1\uffff"+
            "\1\1\1\uffff\4\1\15\uffff\2\1\4\uffff\1\1\3\uffff\3\1\4\uffff"+
            "\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\1\2\1\3\1\7\1\4\1\6\1\uffff\1\5\2\1\1\uffff\15\1",
            "",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA28_eot = DFA.unpackEncodedString(DFA28_eotS);
    static final short[] DFA28_eof = DFA.unpackEncodedString(DFA28_eofS);
    static final char[] DFA28_min = DFA.unpackEncodedStringToUnsignedChars(DFA28_minS);
    static final char[] DFA28_max = DFA.unpackEncodedStringToUnsignedChars(DFA28_maxS);
    static final short[] DFA28_accept = DFA.unpackEncodedString(DFA28_acceptS);
    static final short[] DFA28_special = DFA.unpackEncodedString(DFA28_specialS);
    static final short[][] DFA28_transition;

    static {
        int numStates = DFA28_transitionS.length;
        DFA28_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA28_transition[i] = DFA.unpackEncodedString(DFA28_transitionS[i]);
        }
    }

    class DFA28 extends DFA {

        public DFA28(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 28;
            this.eot = DFA28_eot;
            this.eof = DFA28_eof;
            this.min = DFA28_min;
            this.max = DFA28_max;
            this.accept = DFA28_accept;
            this.special = DFA28_special;
            this.transition = DFA28_transition;
        }
        public String getDescription() {
            return "()* loopback of 66:69: ( adv )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA28_9 = input.LA(1);

                         
                        int index28_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index28_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA28_13 = input.LA(1);

                         
                        int index28_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index28_13);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA28_10 = input.LA(1);

                         
                        int index28_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index28_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA28_8 = input.LA(1);

                         
                        int index28_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index28_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA28_11 = input.LA(1);

                         
                        int index28_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index28_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA28_12 = input.LA(1);

                         
                        int index28_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index28_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 28, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA29_eotS =
        "\17\uffff";
    static final String DFA29_eofS =
        "\1\7\16\uffff";
    static final String DFA29_minS =
        "\1\13\6\12\1\uffff\6\0\1\uffff";
    static final String DFA29_maxS =
        "\1\u00bf\6\12\1\uffff\6\0\1\uffff";
    static final String DFA29_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA29_specialS =
        "\10\uffff\1\5\1\2\1\1\1\0\1\4\1\3\1\uffff}>";
    static final String[] DFA29_transitionS = {
            "\1\7\1\5\1\6\2\7\2\uffff\23\7\1\uffff\46\7\1\uffff\27\7\1\uffff"+
            "\1\7\1\uffff\1\7\1\uffff\4\7\15\uffff\2\7\4\uffff\1\7\3\uffff"+
            "\3\7\4\uffff\1\7\1\1\1\2\1\3\1\4\1\7\1\uffff\1\7\1\uffff\1\7"+
            "\2\uffff\1\7\13\uffff\1\7\5\uffff\5\7\1\uffff\3\7\1\uffff\15"+
            "\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA29_eot = DFA.unpackEncodedString(DFA29_eotS);
    static final short[] DFA29_eof = DFA.unpackEncodedString(DFA29_eofS);
    static final char[] DFA29_min = DFA.unpackEncodedStringToUnsignedChars(DFA29_minS);
    static final char[] DFA29_max = DFA.unpackEncodedStringToUnsignedChars(DFA29_maxS);
    static final short[] DFA29_accept = DFA.unpackEncodedString(DFA29_acceptS);
    static final short[] DFA29_special = DFA.unpackEncodedString(DFA29_specialS);
    static final short[][] DFA29_transition;

    static {
        int numStates = DFA29_transitionS.length;
        DFA29_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA29_transition[i] = DFA.unpackEncodedString(DFA29_transitionS[i]);
        }
    }

    class DFA29 extends DFA {

        public DFA29(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = DFA29_eot;
            this.eof = DFA29_eof;
            this.min = DFA29_min;
            this.max = DFA29_max;
            this.accept = DFA29_accept;
            this.special = DFA29_special;
            this.transition = DFA29_transition;
        }
        public String getDescription() {
            return "66:74: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA29_11 = input.LA(1);

                         
                        int index29_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_11);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA29_10 = input.LA(1);

                         
                        int index29_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA29_9 = input.LA(1);

                         
                        int index29_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_9);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA29_13 = input.LA(1);

                         
                        int index29_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_13);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA29_12 = input.LA(1);

                         
                        int index29_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA29_8 = input.LA(1);

                         
                        int index29_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 29, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA35_eotS =
        "\u0083\uffff";
    static final String DFA35_eofS =
        "\1\15\u0082\uffff";
    static final String DFA35_minS =
        "\1\13\14\0\1\uffff\2\0\2\uffff\1\0\1\uffff\1\0\17\uffff\1\0\2\uffff"+
        "\1\0\36\uffff\22\0\46\uffff\1\0\4\uffff";
    static final String DFA35_maxS =
        "\1\u00bf\14\0\1\uffff\2\0\2\uffff\1\0\1\uffff\1\0\17\uffff\1\0\2"+
        "\uffff\1\0\36\uffff\22\0\46\uffff\1\0\4\uffff";
    static final String DFA35_acceptS =
        "\15\uffff\1\2\164\uffff\1\1";
    static final String DFA35_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff"+
        "\1\14\1\15\2\uffff\1\16\1\uffff\1\17\17\uffff\1\20\2\uffff\1\21"+
        "\36\uffff\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
        "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\46\uffff\1\44\4\uffff}>";
    static final String[] DFA35_transitionS = {
            "\1\15\1\13\1\14\2\15\2\uffff\1\111\1\112\1\110\1\116\1\117\1"+
            "\126\1\127\1\113\1\125\1\120\1\122\1\114\1\115\1\124\1\123\1"+
            "\121\2\15\1\44\1\uffff\6\15\1\47\37\15\1\uffff\26\15\1\17\1"+
            "\uffff\1\176\1\uffff\1\15\1\uffff\4\15\15\uffff\1\16\1\24\4"+
            "\uffff\1\22\3\uffff\3\15\4\uffff\1\107\1\7\1\10\1\11\1\12\1"+
            "\15\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\13\uffff\1\15\5\uffff"+
            "\1\1\1\2\1\6\1\3\1\5\1\uffff\1\4\1\15\1\106\1\uffff\15\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA35_eot = DFA.unpackEncodedString(DFA35_eotS);
    static final short[] DFA35_eof = DFA.unpackEncodedString(DFA35_eofS);
    static final char[] DFA35_min = DFA.unpackEncodedStringToUnsignedChars(DFA35_minS);
    static final char[] DFA35_max = DFA.unpackEncodedStringToUnsignedChars(DFA35_maxS);
    static final short[] DFA35_accept = DFA.unpackEncodedString(DFA35_acceptS);
    static final short[] DFA35_special = DFA.unpackEncodedString(DFA35_specialS);
    static final short[][] DFA35_transition;

    static {
        int numStates = DFA35_transitionS.length;
        DFA35_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA35_transition[i] = DFA.unpackEncodedString(DFA35_transitionS[i]);
        }
    }

    class DFA35 extends DFA {

        public DFA35(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 35;
            this.eot = DFA35_eot;
            this.eof = DFA35_eof;
            this.min = DFA35_min;
            this.max = DFA35_max;
            this.accept = DFA35_accept;
            this.special = DFA35_special;
            this.transition = DFA35_transition;
        }
        public String getDescription() {
            return "()* loopback of 66:94: ( ( cc )? ( comma )? prepphrase )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA35_1 = input.LA(1);

                         
                        int index35_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA35_2 = input.LA(1);

                         
                        int index35_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA35_3 = input.LA(1);

                         
                        int index35_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA35_4 = input.LA(1);

                         
                        int index35_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA35_5 = input.LA(1);

                         
                        int index35_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA35_6 = input.LA(1);

                         
                        int index35_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA35_7 = input.LA(1);

                         
                        int index35_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA35_8 = input.LA(1);

                         
                        int index35_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA35_9 = input.LA(1);

                         
                        int index35_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA35_10 = input.LA(1);

                         
                        int index35_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA35_11 = input.LA(1);

                         
                        int index35_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA35_12 = input.LA(1);

                         
                        int index35_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA35_14 = input.LA(1);

                         
                        int index35_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA35_15 = input.LA(1);

                         
                        int index35_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA35_18 = input.LA(1);

                         
                        int index35_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_18);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA35_20 = input.LA(1);

                         
                        int index35_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_20);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA35_36 = input.LA(1);

                         
                        int index35_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_36);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA35_39 = input.LA(1);

                         
                        int index35_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_39);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA35_70 = input.LA(1);

                         
                        int index35_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_70);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA35_71 = input.LA(1);

                         
                        int index35_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_71);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA35_72 = input.LA(1);

                         
                        int index35_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_72);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA35_73 = input.LA(1);

                         
                        int index35_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_73);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA35_74 = input.LA(1);

                         
                        int index35_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_74);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA35_75 = input.LA(1);

                         
                        int index35_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_75);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA35_76 = input.LA(1);

                         
                        int index35_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_76);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA35_77 = input.LA(1);

                         
                        int index35_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_77);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA35_78 = input.LA(1);

                         
                        int index35_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_78);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA35_79 = input.LA(1);

                         
                        int index35_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_79);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA35_80 = input.LA(1);

                         
                        int index35_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_80);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA35_81 = input.LA(1);

                         
                        int index35_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_81);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA35_82 = input.LA(1);

                         
                        int index35_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_82);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA35_83 = input.LA(1);

                         
                        int index35_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_83);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA35_84 = input.LA(1);

                         
                        int index35_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_84);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA35_85 = input.LA(1);

                         
                        int index35_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_85);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA35_86 = input.LA(1);

                         
                        int index35_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_86);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA35_87 = input.LA(1);

                         
                        int index35_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_87);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA35_126 = input.LA(1);

                         
                        int index35_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_126);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 35, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA38_eotS =
        "\14\uffff";
    static final String DFA38_eofS =
        "\14\uffff";
    static final String DFA38_minS =
        "\1\u0084\2\uffff\1\12\5\uffff\1\0\2\uffff";
    static final String DFA38_maxS =
        "\1\u00bf\2\uffff\1\12\5\uffff\1\0\2\uffff";
    static final String DFA38_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\5\1\6\1\7\1\10\1\11\1\uffff\1\3\1\4";
    static final String DFA38_specialS =
        "\11\uffff\1\0\2\uffff}>";
    static final String[] DFA38_transitionS = {
            "\1\7\64\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\10",
            "",
            "",
            "\1\11",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA38_eot = DFA.unpackEncodedString(DFA38_eotS);
    static final short[] DFA38_eof = DFA.unpackEncodedString(DFA38_eofS);
    static final char[] DFA38_min = DFA.unpackEncodedStringToUnsignedChars(DFA38_minS);
    static final char[] DFA38_max = DFA.unpackEncodedStringToUnsignedChars(DFA38_maxS);
    static final short[] DFA38_accept = DFA.unpackEncodedString(DFA38_acceptS);
    static final short[] DFA38_special = DFA.unpackEncodedString(DFA38_specialS);
    static final short[][] DFA38_transition;

    static {
        int numStates = DFA38_transitionS.length;
        DFA38_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA38_transition[i] = DFA.unpackEncodedString(DFA38_transitionS[i]);
        }
    }

    class DFA38 extends DFA {

        public DFA38(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 38;
            this.eot = DFA38_eot;
            this.eof = DFA38_eof;
            this.min = DFA38_min;
            this.max = DFA38_max;
            this.accept = DFA38_accept;
            this.special = DFA38_special;
            this.transition = DFA38_transition;
        }
        public String getDescription() {
            return "70:1: clause : ( wdt | wp_poss | wpo | wpo | wps | wql | wrb | ex | pdt );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA38_9 = input.LA(1);

                         
                        int index38_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred104_ChemicalChunker()) ) {s = 11;}

                         
                        input.seek(index38_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 38, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA39_eotS =
        "\117\uffff";
    static final String DFA39_eofS =
        "\117\uffff";
    static final String DFA39_minS =
        "\1\13\1\uffff\5\0\1\uffff\2\0\6\uffff\3\0\1\uffff\1\0\25\uffff\4"+
        "\0\41\uffff";
    static final String DFA39_maxS =
        "\1\u00bf\1\uffff\5\0\1\uffff\2\0\6\uffff\3\0\1\uffff\1\0\25\uffff"+
        "\4\0\41\uffff";
    static final String DFA39_acceptS =
        "\1\uffff\1\1\5\uffff\1\4\15\uffff\1\10\1\11\1\13\1\14\1\15\1\21"+
        "\1\22\1\23\1\27\1\30\1\31\1\32\1\33\1\35\1\36\1\37\1\40\1\41\1\42"+
        "\1\43\1\44\4\uffff\1\51\1\52\1\53\1\56\1\57\1\60\1\61\1\62\1\63"+
        "\1\64\1\65\3\uffff\1\2\1\3\1\5\1\20\1\24\1\55\1\16\1\17\1\26\1\54"+
        "\1\7\1\34\1\12\1\25\1\6\1\45\1\46\1\47\1\50";
    static final String DFA39_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\uffff\1\5\1\6\6\uffff\1\7\1\10\1"+
        "\11\1\uffff\1\12\25\uffff\1\13\1\14\1\15\1\16\41\uffff}>";
    static final String[] DFA39_transitionS = {
            "\1\24\2\7\1\31\1\60\22\uffff\1\30\1\22\1\32\1\uffff\1\5\1\41"+
            "\1\33\1\34\1\50\1\21\1\35\1\36\1\37\1\40\1\11\1\42\1\43\1\44"+
            "\1\45\1\46\1\6\4\uffff\1\20\1\57\10\uffff\1\7\1\uffff\1\47\6"+
            "\uffff\1\61\1\uffff\1\62\4\uffff\1\63\1\uffff\1\51\3\uffff\1"+
            "\64\1\uffff\1\27\1\56\4\uffff\1\3\7\uffff\1\2\17\uffff\1\4\4"+
            "\uffff\1\7\3\uffff\1\70\1\65\1\66\5\uffff\4\7\2\uffff\1\10\1"+
            "\uffff\1\25\2\uffff\1\26\13\uffff\1\1\14\uffff\1\67\10\uffff"+
            "\1\52\1\53\1\54\1\55\3\70",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA39_eot = DFA.unpackEncodedString(DFA39_eotS);
    static final short[] DFA39_eof = DFA.unpackEncodedString(DFA39_eofS);
    static final char[] DFA39_min = DFA.unpackEncodedStringToUnsignedChars(DFA39_minS);
    static final char[] DFA39_max = DFA.unpackEncodedStringToUnsignedChars(DFA39_maxS);
    static final short[] DFA39_accept = DFA.unpackEncodedString(DFA39_acceptS);
    static final short[] DFA39_special = DFA.unpackEncodedString(DFA39_specialS);
    static final short[][] DFA39_transition;

    static {
        int numStates = DFA39_transitionS.length;
        DFA39_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA39_transition[i] = DFA.unpackEncodedString(DFA39_transitionS[i]);
        }
    }

    class DFA39 extends DFA {

        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = DFA39_eot;
            this.eof = DFA39_eof;
            this.min = DFA39_min;
            this.max = DFA39_max;
            this.accept = DFA39_accept;
            this.special = DFA39_special;
            this.transition = DFA39_transition;
        }
        public String getDescription() {
            return "71:1: noun : ( prp | citation | molecule | apparatus | unnamedmolecule | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | oscarcpr | range | amount | mixture | nntime | nnatmosphere | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | oscaront | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | fwin | sym | clause );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA39_2 = input.LA(1);

                         
                        int index39_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_ChemicalChunker()) ) {s = 60;}

                        else if ( (synpred111_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred112_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred113_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred124_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred128_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred153_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index39_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA39_3 = input.LA(1);

                         
                        int index39_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_ChemicalChunker()) ) {s = 60;}

                        else if ( (synpred111_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred124_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index39_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA39_4 = input.LA(1);

                         
                        int index39_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred112_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred113_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred122_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred123_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred128_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred152_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index39_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA39_5 = input.LA(1);

                         
                        int index39_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred112_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred113_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred128_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index39_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA39_6 = input.LA(1);

                         
                        int index39_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred153_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index39_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA39_8 = input.LA(1);

                         
                        int index39_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred115_ChemicalChunker()) ) {s = 70;}

                         
                        input.seek(index39_8);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA39_9 = input.LA(1);

                         
                        int index39_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred136_ChemicalChunker()) ) {s = 71;}

                         
                        input.seek(index39_9);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA39_16 = input.LA(1);

                         
                        int index39_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred118_ChemicalChunker()) ) {s = 72;}

                         
                        input.seek(index39_16);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA39_17 = input.LA(1);

                         
                        int index39_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred129_ChemicalChunker()) ) {s = 73;}

                         
                        input.seek(index39_17);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA39_18 = input.LA(1);

                         
                        int index39_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred114_ChemicalChunker()) ) {s = 74;}

                         
                        input.seek(index39_18);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA39_20 = input.LA(1);

                         
                        int index39_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred152_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index39_20);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA39_42 = input.LA(1);

                         
                        int index39_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 56;}

                         
                        input.seek(index39_42);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA39_43 = input.LA(1);

                         
                        int index39_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_ChemicalChunker()) ) {s = 76;}

                        else if ( (true) ) {s = 56;}

                         
                        input.seek(index39_43);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA39_44 = input.LA(1);

                         
                        int index39_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_ChemicalChunker()) ) {s = 77;}

                        else if ( (true) ) {s = 56;}

                         
                        input.seek(index39_44);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA39_45 = input.LA(1);

                         
                        int index39_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred148_ChemicalChunker()) ) {s = 78;}

                        else if ( (true) ) {s = 56;}

                         
                        input.seek(index39_45);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 39, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA47_eotS =
        "\u0084\uffff";
    static final String DFA47_eofS =
        "\u0084\uffff";
    static final String DFA47_minS =
        "\1\13\1\0\41\uffff\1\0\4\uffff\2\0\1\uffff\5\0\1\uffff\1\0\4\uffff"+
        "\6\0\50\uffff\1\0\37\uffff";
    static final String DFA47_maxS =
        "\1\u00bf\1\0\41\uffff\1\0\4\uffff\2\0\1\uffff\5\0\1\uffff\1\0\4"+
        "\uffff\6\0\50\uffff\1\0\37\uffff";
    static final String DFA47_acceptS =
        "\2\uffff\1\2\47\uffff\1\4\5\uffff\1\11\1\uffff\1\14\62\uffff\1\16"+
        "\20\uffff\1\22\1\1\1\3\1\7\1\10\1\13\1\17\1\5\1\23\1\6\1\20\1\12"+
        "\1\21\1\15";
    static final String DFA47_specialS =
        "\1\uffff\1\0\41\uffff\1\1\4\uffff\1\2\1\3\1\uffff\1\4\1\5\1\6\1"+
        "\7\1\10\1\uffff\1\11\4\uffff\1\12\1\13\1\14\1\15\1\16\1\17\50\uffff"+
        "\1\20\37\uffff}>";
    static final String[] DFA47_transitionS = {
            "\1\57\1\72\1\73\2\62\2\uffff\11\145\1\144\6\145\3\62\1\uffff"+
            "\1\51\17\62\1\54\4\2\2\62\10\2\1\62\1\2\1\62\4\2\1\uffff\1\2"+
            "\1\62\1\2\1\62\4\2\1\62\1\2\1\62\3\2\1\62\1\2\1\43\1\62\3\2"+
            "\1\166\1\56\2\uffff\1\60\1\53\3\uffff\1\55\17\uffff\1\50\4\uffff"+
            "\1\62\3\uffff\1\62\1\1\1\62\4\uffff\1\145\1\66\1\67\1\70\1\71"+
            "\1\52\1\uffff\1\62\1\uffff\1\62\2\uffff\1\62\13\uffff\1\62\14"+
            "\uffff\1\61\1\145\1\uffff\6\2\7\62",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA47_eot = DFA.unpackEncodedString(DFA47_eotS);
    static final short[] DFA47_eof = DFA.unpackEncodedString(DFA47_eofS);
    static final char[] DFA47_min = DFA.unpackEncodedStringToUnsignedChars(DFA47_minS);
    static final char[] DFA47_max = DFA.unpackEncodedStringToUnsignedChars(DFA47_maxS);
    static final short[] DFA47_accept = DFA.unpackEncodedString(DFA47_acceptS);
    static final short[] DFA47_special = DFA.unpackEncodedString(DFA47_specialS);
    static final short[][] DFA47_transition;

    static {
        int numStates = DFA47_transitionS.length;
        DFA47_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA47_transition[i] = DFA.unpackEncodedString(DFA47_transitionS[i]);
        }
    }

    class DFA47 extends DFA {

        public DFA47(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 47;
            this.eot = DFA47_eot;
            this.eof = DFA47_eof;
            this.min = DFA47_min;
            this.max = DFA47_max;
            this.accept = DFA47_accept;
            this.special = DFA47_special;
            this.transition = DFA47_transition;
        }
        public String getDescription() {
            return "89:19: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA47_1 = input.LA(1);

                         
                        int index47_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_ChemicalChunker()) ) {s = 119;}

                        else if ( (synpred184_ChemicalChunker()) ) {s = 50;}

                         
                        input.seek(index47_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA47_35 = input.LA(1);

                         
                        int index47_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred184_ChemicalChunker()) ) {s = 50;}

                         
                        input.seek(index47_35);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA47_40 = input.LA(1);

                         
                        int index47_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_ChemicalChunker()) ) {s = 120;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 121;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred183_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred184_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred187_ChemicalChunker()) ) {s = 124;}

                         
                        input.seek(index47_40);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA47_41 = input.LA(1);

                         
                        int index47_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_ChemicalChunker()) ) {s = 120;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 121;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred184_ChemicalChunker()) ) {s = 50;}

                         
                        input.seek(index47_41);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA47_43 = input.LA(1);

                         
                        int index47_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 126;}

                         
                        input.seek(index47_43);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA47_44 = input.LA(1);

                         
                        int index47_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 121;}

                        else if ( (synpred184_ChemicalChunker()) ) {s = 50;}

                         
                        input.seek(index47_44);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA47_45 = input.LA(1);

                         
                        int index47_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 121;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred184_ChemicalChunker()) ) {s = 50;}

                         
                        input.seek(index47_45);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA47_46 = input.LA(1);

                         
                        int index47_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 121;}

                        else if ( (synpred184_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred188_ChemicalChunker()) ) {s = 128;}

                         
                        input.seek(index47_46);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA47_47 = input.LA(1);

                         
                        int index47_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred184_ChemicalChunker()) ) {s = 50;}

                         
                        input.seek(index47_47);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA47_49 = input.LA(1);

                         
                        int index47_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred184_ChemicalChunker()) ) {s = 50;}

                         
                        input.seek(index47_49);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA47_54 = input.LA(1);

                         
                        int index47_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred184_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred189_ChemicalChunker()) ) {s = 130;}

                         
                        input.seek(index47_54);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA47_55 = input.LA(1);

                         
                        int index47_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred184_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred189_ChemicalChunker()) ) {s = 130;}

                         
                        input.seek(index47_55);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA47_56 = input.LA(1);

                         
                        int index47_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred184_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred189_ChemicalChunker()) ) {s = 130;}

                         
                        input.seek(index47_56);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA47_57 = input.LA(1);

                         
                        int index47_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred184_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred189_ChemicalChunker()) ) {s = 130;}

                         
                        input.seek(index47_57);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA47_58 = input.LA(1);

                         
                        int index47_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred184_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred189_ChemicalChunker()) ) {s = 130;}

                         
                        input.seek(index47_58);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA47_59 = input.LA(1);

                         
                        int index47_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred184_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred189_ChemicalChunker()) ) {s = 130;}

                         
                        input.seek(index47_59);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA47_100 = input.LA(1);

                         
                        int index47_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred185_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred186_ChemicalChunker()) ) {s = 101;}

                         
                        input.seek(index47_100);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 47, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA48_eotS =
        "\u0085\uffff";
    static final String DFA48_eofS =
        "\u0085\uffff";
    static final String DFA48_minS =
        "\1\13\1\uffff\1\0\41\uffff\1\0\4\uffff\2\0\1\uffff\5\0\1\uffff\1"+
        "\0\4\uffff\6\0\50\uffff\1\0\37\uffff";
    static final String DFA48_maxS =
        "\1\u00bf\1\uffff\1\0\41\uffff\1\0\4\uffff\2\0\1\uffff\5\0\1\uffff"+
        "\1\0\4\uffff\6\0\50\uffff\1\0\37\uffff";
    static final String DFA48_acceptS =
        "\1\uffff\1\24\1\uffff\1\2\47\uffff\1\4\5\uffff\1\11\1\uffff\1\14"+
        "\62\uffff\1\16\20\uffff\1\22\1\1\1\3\1\7\1\10\1\13\1\17\1\5\1\23"+
        "\1\6\1\20\1\12\1\21\1\15";
    static final String DFA48_specialS =
        "\2\uffff\1\0\41\uffff\1\1\4\uffff\1\2\1\3\1\uffff\1\4\1\5\1\6\1"+
        "\7\1\10\1\uffff\1\11\4\uffff\1\12\1\13\1\14\1\15\1\16\1\17\50\uffff"+
        "\1\20\37\uffff}>";
    static final String[] DFA48_transitionS = {
            "\1\60\1\73\1\74\2\63\2\uffff\11\146\1\145\6\146\3\63\1\uffff"+
            "\1\52\17\63\1\55\4\3\2\63\10\3\1\63\1\3\1\63\4\3\1\uffff\1\3"+
            "\1\63\1\3\1\63\4\3\1\63\1\3\1\63\3\3\1\63\1\3\1\44\1\63\3\3"+
            "\1\167\1\57\2\uffff\1\61\1\54\3\uffff\1\56\1\1\16\uffff\1\51"+
            "\4\uffff\1\63\3\uffff\1\63\1\2\1\63\4\uffff\1\146\1\67\1\70"+
            "\1\71\1\72\1\53\1\uffff\1\63\1\uffff\1\63\2\uffff\1\63\13\uffff"+
            "\1\63\14\uffff\1\62\1\146\1\uffff\6\3\7\63",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_eotS);
    static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_eofS);
    static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS);
    static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS);
    static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS);
    static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_specialS);
    static final short[][] DFA48_transition;

    static {
        int numStates = DFA48_transitionS.length;
        DFA48_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA48_transition[i] = DFA.unpackEncodedString(DFA48_transitionS[i]);
        }
    }

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;
        }
        public String getDescription() {
            return "()+ loopback of 89:141: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA48_2 = input.LA(1);

                         
                        int index48_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_ChemicalChunker()) ) {s = 120;}

                        else if ( (synpred202_ChemicalChunker()) ) {s = 51;}

                         
                        input.seek(index48_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA48_36 = input.LA(1);

                         
                        int index48_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred192_ChemicalChunker()) ) {s = 3;}

                        else if ( (synpred202_ChemicalChunker()) ) {s = 51;}

                         
                        input.seek(index48_36);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA48_41 = input.LA(1);

                         
                        int index48_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 121;}

                        else if ( (synpred197_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred198_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred201_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred202_ChemicalChunker()) ) {s = 51;}

                        else if ( (synpred205_ChemicalChunker()) ) {s = 125;}

                         
                        input.seek(index48_41);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA48_42 = input.LA(1);

                         
                        int index48_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_ChemicalChunker()) ) {s = 121;}

                        else if ( (synpred197_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred198_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred202_ChemicalChunker()) ) {s = 51;}

                         
                        input.seek(index48_42);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA48_44 = input.LA(1);

                         
                        int index48_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred209_ChemicalChunker()) ) {s = 127;}

                         
                        input.seek(index48_44);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA48_45 = input.LA(1);

                         
                        int index48_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred196_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred197_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred202_ChemicalChunker()) ) {s = 51;}

                         
                        input.seek(index48_45);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA48_46 = input.LA(1);

                         
                        int index48_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred196_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred197_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred198_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred202_ChemicalChunker()) ) {s = 51;}

                         
                        input.seek(index48_46);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA48_47 = input.LA(1);

                         
                        int index48_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred197_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred202_ChemicalChunker()) ) {s = 51;}

                        else if ( (synpred206_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index48_47);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA48_48 = input.LA(1);

                         
                        int index48_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred202_ChemicalChunker()) ) {s = 51;}

                         
                        input.seek(index48_48);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA48_50 = input.LA(1);

                         
                        int index48_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred200_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred202_ChemicalChunker()) ) {s = 51;}

                         
                        input.seek(index48_50);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA48_55 = input.LA(1);

                         
                        int index48_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_ChemicalChunker()) ) {s = 51;}

                        else if ( (synpred207_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index48_55);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA48_56 = input.LA(1);

                         
                        int index48_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_ChemicalChunker()) ) {s = 51;}

                        else if ( (synpred207_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index48_56);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA48_57 = input.LA(1);

                         
                        int index48_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_ChemicalChunker()) ) {s = 51;}

                        else if ( (synpred207_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index48_57);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA48_58 = input.LA(1);

                         
                        int index48_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_ChemicalChunker()) ) {s = 51;}

                        else if ( (synpred207_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index48_58);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA48_59 = input.LA(1);

                         
                        int index48_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_ChemicalChunker()) ) {s = 51;}

                        else if ( (synpred207_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index48_59);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA48_60 = input.LA(1);

                         
                        int index48_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_ChemicalChunker()) ) {s = 51;}

                        else if ( (synpred207_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index48_60);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA48_101 = input.LA(1);

                         
                        int index48_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred203_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred204_ChemicalChunker()) ) {s = 102;}

                         
                        input.seek(index48_101);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 48, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA52_eotS =
        "\46\uffff";
    static final String DFA52_eofS =
        "\46\uffff";
    static final String DFA52_minS =
        "\1\14\40\0\5\uffff";
    static final String DFA52_maxS =
        "\1\u00b1\40\0\5\uffff";
    static final String DFA52_acceptS =
        "\41\uffff\1\2\1\3\1\1\1\5\1\4";
    static final String DFA52_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\5\uffff}>";
    static final String[] DFA52_transitionS = {
            "\1\14\1\15\4\uffff\1\20\1\21\1\17\1\25\1\26\1\34\1\35\1\22\1"+
            "\33\1\27\1\31\1\23\1\24\1\1\1\32\1\30\2\uffff\1\41\7\uffff\1"+
            "\42\116\uffff\1\40\4\uffff\1\37\12\uffff\1\16\1\10\1\11\1\12"+
            "\1\13\31\uffff\1\2\1\3\1\7\1\4\1\6\1\uffff\1\5\1\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA52_eot = DFA.unpackEncodedString(DFA52_eotS);
    static final short[] DFA52_eof = DFA.unpackEncodedString(DFA52_eofS);
    static final char[] DFA52_min = DFA.unpackEncodedStringToUnsignedChars(DFA52_minS);
    static final char[] DFA52_max = DFA.unpackEncodedStringToUnsignedChars(DFA52_maxS);
    static final short[] DFA52_accept = DFA.unpackEncodedString(DFA52_acceptS);
    static final short[] DFA52_special = DFA.unpackEncodedString(DFA52_specialS);
    static final short[][] DFA52_transition;

    static {
        int numStates = DFA52_transitionS.length;
        DFA52_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA52_transition[i] = DFA.unpackEncodedString(DFA52_transitionS[i]);
        }
    }

    class DFA52 extends DFA {

        public DFA52(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 52;
            this.eot = DFA52_eot;
            this.eof = DFA52_eof;
            this.min = DFA52_min;
            this.max = DFA52_max;
            this.accept = DFA52_accept;
            this.special = DFA52_special;
            this.transition = DFA52_transition;
        }
        public String getDescription() {
            return "97:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseOther )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA52_1 = input.LA(1);

                         
                        int index52_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 35;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA52_2 = input.LA(1);

                         
                        int index52_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA52_3 = input.LA(1);

                         
                        int index52_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA52_4 = input.LA(1);

                         
                        int index52_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA52_5 = input.LA(1);

                         
                        int index52_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA52_6 = input.LA(1);

                         
                        int index52_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA52_7 = input.LA(1);

                         
                        int index52_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA52_8 = input.LA(1);

                         
                        int index52_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA52_9 = input.LA(1);

                         
                        int index52_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA52_10 = input.LA(1);

                         
                        int index52_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA52_11 = input.LA(1);

                         
                        int index52_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA52_12 = input.LA(1);

                         
                        int index52_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA52_13 = input.LA(1);

                         
                        int index52_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA52_14 = input.LA(1);

                         
                        int index52_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA52_15 = input.LA(1);

                         
                        int index52_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA52_16 = input.LA(1);

                         
                        int index52_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA52_17 = input.LA(1);

                         
                        int index52_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA52_18 = input.LA(1);

                         
                        int index52_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA52_19 = input.LA(1);

                         
                        int index52_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA52_20 = input.LA(1);

                         
                        int index52_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA52_21 = input.LA(1);

                         
                        int index52_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                        else if ( (synpred224_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA52_22 = input.LA(1);

                         
                        int index52_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA52_23 = input.LA(1);

                         
                        int index52_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA52_24 = input.LA(1);

                         
                        int index52_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA52_25 = input.LA(1);

                         
                        int index52_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA52_26 = input.LA(1);

                         
                        int index52_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA52_27 = input.LA(1);

                         
                        int index52_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA52_28 = input.LA(1);

                         
                        int index52_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA52_29 = input.LA(1);

                         
                        int index52_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA52_30 = input.LA(1);

                         
                        int index52_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA52_31 = input.LA(1);

                         
                        int index52_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                         
                        input.seek(index52_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA52_32 = input.LA(1);

                         
                        int index52_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 34;}

                         
                        input.seek(index52_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 52, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA56_eotS =
        "\33\uffff";
    static final String DFA56_eofS =
        "\33\uffff";
    static final String DFA56_minS =
        "\1\14\1\uffff\14\12\14\0\1\uffff";
    static final String DFA56_maxS =
        "\1\u00b1\1\uffff\14\12\14\0\1\uffff";
    static final String DFA56_acceptS =
        "\1\uffff\1\2\30\uffff\1\1";
    static final String DFA56_specialS =
        "\16\uffff\1\10\1\4\1\7\1\12\1\1\1\11\1\5\1\0\1\3\1\13\1\2\1\6\1"+
        "\uffff}>";
    static final String[] DFA56_transitionS = {
            "\1\14\1\15\4\uffff\20\1\2\uffff\1\1\126\uffff\1\1\4\uffff\1"+
            "\1\12\uffff\1\1\1\10\1\11\1\12\1\13\31\uffff\1\2\1\3\1\7\1\4"+
            "\1\6\1\uffff\1\5\1\uffff\1\1",
            "",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "()* loopback of 109:3: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA56_21 = input.LA(1);

                         
                        int index56_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_21);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA56_18 = input.LA(1);

                         
                        int index56_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_18);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA56_24 = input.LA(1);

                         
                        int index56_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_24);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA56_22 = input.LA(1);

                         
                        int index56_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_22);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA56_15 = input.LA(1);

                         
                        int index56_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_15);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA56_20 = input.LA(1);

                         
                        int index56_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_20);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA56_25 = input.LA(1);

                         
                        int index56_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_25);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA56_16 = input.LA(1);

                         
                        int index56_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_16);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA56_14 = input.LA(1);

                         
                        int index56_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_14);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA56_19 = input.LA(1);

                         
                        int index56_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_19);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA56_17 = input.LA(1);

                         
                        int index56_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_17);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA56_23 = input.LA(1);

                         
                        int index56_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 56, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA66_eotS =
        "\33\uffff";
    static final String DFA66_eofS =
        "\33\uffff";
    static final String DFA66_minS =
        "\1\14\14\12\1\uffff\14\0\1\uffff";
    static final String DFA66_maxS =
        "\1\u00b1\14\12\1\uffff\14\0\1\uffff";
    static final String DFA66_acceptS =
        "\15\uffff\1\2\14\uffff\1\1";
    static final String DFA66_specialS =
        "\16\uffff\1\6\1\2\1\10\1\12\1\0\1\7\1\1\1\13\1\5\1\3\1\11\1\4\1"+
        "\uffff}>";
    static final String[] DFA66_transitionS = {
            "\1\13\1\14\4\uffff\20\15\12\uffff\1\15\116\uffff\1\15\4\uffff"+
            "\1\15\12\uffff\1\15\1\7\1\10\1\11\1\12\31\uffff\1\1\1\2\1\6"+
            "\1\3\1\5\1\uffff\1\4\1\uffff\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA66_eot = DFA.unpackEncodedString(DFA66_eotS);
    static final short[] DFA66_eof = DFA.unpackEncodedString(DFA66_eofS);
    static final char[] DFA66_min = DFA.unpackEncodedStringToUnsignedChars(DFA66_minS);
    static final char[] DFA66_max = DFA.unpackEncodedStringToUnsignedChars(DFA66_maxS);
    static final short[] DFA66_accept = DFA.unpackEncodedString(DFA66_acceptS);
    static final short[] DFA66_special = DFA.unpackEncodedString(DFA66_specialS);
    static final short[][] DFA66_transition;

    static {
        int numStates = DFA66_transitionS.length;
        DFA66_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA66_transition[i] = DFA.unpackEncodedString(DFA66_transitionS[i]);
        }
    }

    class DFA66 extends DFA {

        public DFA66(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 66;
            this.eot = DFA66_eot;
            this.eof = DFA66_eof;
            this.min = DFA66_min;
            this.max = DFA66_max;
            this.accept = DFA66_accept;
            this.special = DFA66_special;
            this.transition = DFA66_transition;
        }
        public String getDescription() {
            return "124:5: ( advAdj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA66_18 = input.LA(1);

                         
                        int index66_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index66_18);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA66_20 = input.LA(1);

                         
                        int index66_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index66_20);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA66_15 = input.LA(1);

                         
                        int index66_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index66_15);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA66_23 = input.LA(1);

                         
                        int index66_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index66_23);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA66_25 = input.LA(1);

                         
                        int index66_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index66_25);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA66_22 = input.LA(1);

                         
                        int index66_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index66_22);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA66_14 = input.LA(1);

                         
                        int index66_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index66_14);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA66_19 = input.LA(1);

                         
                        int index66_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index66_19);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA66_16 = input.LA(1);

                         
                        int index66_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index66_16);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA66_24 = input.LA(1);

                         
                        int index66_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index66_24);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA66_17 = input.LA(1);

                         
                        int index66_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index66_17);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA66_21 = input.LA(1);

                         
                        int index66_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index66_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 66, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA82_eotS =
        "\21\uffff";
    static final String DFA82_eofS =
        "\3\uffff\1\4\5\uffff\1\4\7\uffff";
    static final String DFA82_minS =
        "\1\66\1\12\1\uffff\1\13\1\uffff\3\12\1\uffff\1\13\1\0\1\66\1\12"+
        "\2\uffff\1\0\1\uffff";
    static final String DFA82_maxS =
        "\1\153\1\12\1\uffff\1\u00bf\1\uffff\3\12\1\uffff\1\u00bf\1\0\1\66"+
        "\1\12\2\uffff\1\0\1\uffff";
    static final String DFA82_acceptS =
        "\2\uffff\1\5\1\uffff\1\6\3\uffff\1\4\4\uffff\1\2\1\3\1\uffff\1\1";
    static final String DFA82_specialS =
        "\12\uffff\1\0\1\2\3\uffff\1\1\1\uffff}>";
    static final String[] DFA82_transitionS = {
            "\1\1\64\uffff\1\2",
            "\1\3",
            "",
            "\5\4\2\uffff\23\4\1\uffff\20\4\1\6\25\4\1\uffff\27\4\1\10\1"+
            "\4\1\7\1\4\1\uffff\4\4\15\uffff\2\4\4\uffff\1\4\3\uffff\3\4"+
            "\4\uffff\1\4\1\5\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\13"+
            "\uffff\1\4\5\uffff\5\4\1\uffff\3\4\1\uffff\15\4",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "",
            "\5\4\2\uffff\23\4\1\uffff\20\4\1\14\25\4\1\uffff\27\4\1\uffff"+
            "\3\4\1\uffff\4\4\15\uffff\2\4\4\uffff\1\4\3\uffff\3\4\4\uffff"+
            "\6\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\13\uffff\1\4\5\uffff"+
            "\5\4\1\uffff\3\4\1\uffff\15\4",
            "\1\uffff",
            "\1\16",
            "\1\17",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA82_eot = DFA.unpackEncodedString(DFA82_eotS);
    static final short[] DFA82_eof = DFA.unpackEncodedString(DFA82_eofS);
    static final char[] DFA82_min = DFA.unpackEncodedStringToUnsignedChars(DFA82_minS);
    static final char[] DFA82_max = DFA.unpackEncodedStringToUnsignedChars(DFA82_maxS);
    static final short[] DFA82_accept = DFA.unpackEncodedString(DFA82_acceptS);
    static final short[] DFA82_special = DFA.unpackEncodedString(DFA82_specialS);
    static final short[][] DFA82_transition;

    static {
        int numStates = DFA82_transitionS.length;
        DFA82_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA82_transition[i] = DFA.unpackEncodedString(DFA82_transitionS[i]);
        }
    }

    class DFA82 extends DFA {

        public DFA82(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = DFA82_eot;
            this.eof = DFA82_eof;
            this.min = DFA82_min;
            this.max = DFA82_max;
            this.accept = DFA82_accept;
            this.special = DFA82_special;
            this.transition = DFA82_transition;
        }
        public String getDescription() {
            return "145:18: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarCompound5 | oscarcm )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA82_10 = input.LA(1);

                         
                        int index82_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index82_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA82_15 = input.LA(1);

                         
                        int index82_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index82_15);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA82_11 = input.LA(1);

                         
                        int index82_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA82_11==54) ) {s = 14;}

                        else if ( (synpred281_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index82_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 82, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA90_eotS =
        "\u0086\uffff";
    static final String DFA90_eofS =
        "\1\1\u0085\uffff";
    static final String DFA90_minS =
        "\1\13\3\uffff\1\0\15\uffff\3\0\161\uffff";
    static final String DFA90_maxS =
        "\1\u00bf\3\uffff\1\0\15\uffff\3\0\161\uffff";
    static final String DFA90_acceptS =
        "\1\uffff\1\4\u0081\uffff\1\1\1\3\1\2";
    static final String DFA90_specialS =
        "\4\uffff\1\0\15\uffff\1\1\1\2\1\3\161\uffff}>";
    static final String[] DFA90_transitionS = {
            "\5\1\2\uffff\23\1\1\uffff\1\24\45\1\1\uffff\26\1\1\4\1\uffff"+
            "\3\1\1\uffff\2\1\1\22\1\1\15\uffff\1\1\1\23\4\uffff\1\1\3\uffff"+
            "\3\1\4\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff"+
            "\1\1\5\uffff\5\1\1\uffff\3\1\1\uffff\15\1",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA90_eot = DFA.unpackEncodedString(DFA90_eotS);
    static final short[] DFA90_eof = DFA.unpackEncodedString(DFA90_eofS);
    static final char[] DFA90_min = DFA.unpackEncodedStringToUnsignedChars(DFA90_minS);
    static final char[] DFA90_max = DFA.unpackEncodedStringToUnsignedChars(DFA90_maxS);
    static final short[] DFA90_accept = DFA.unpackEncodedString(DFA90_acceptS);
    static final short[] DFA90_special = DFA.unpackEncodedString(DFA90_specialS);
    static final short[][] DFA90_transition;

    static {
        int numStates = DFA90_transitionS.length;
        DFA90_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA90_transition[i] = DFA.unpackEncodedString(DFA90_transitionS[i]);
        }
    }

    class DFA90 extends DFA {

        public DFA90(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 90;
            this.eot = DFA90_eot;
            this.eof = DFA90_eof;
            this.min = DFA90_min;
            this.max = DFA90_max;
            this.accept = DFA90_accept;
            this.special = DFA90_special;
            this.transition = DFA90_transition;
        }
        public String getDescription() {
            return "()* loopback of 158:39: ( citation | quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA90_4 = input.LA(1);

                         
                        int index90_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred293_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred295_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index90_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA90_18 = input.LA(1);

                         
                        int index90_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred293_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred294_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred295_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index90_18);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA90_19 = input.LA(1);

                         
                        int index90_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index90_19);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA90_20 = input.LA(1);

                         
                        int index90_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index90_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 90, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA94_eotS =
        "\u0086\uffff";
    static final String DFA94_eofS =
        "\1\2\u0085\uffff";
    static final String DFA94_minS =
        "\1\13\1\0\3\uffff\3\0\176\uffff";
    static final String DFA94_maxS =
        "\1\u00bf\1\0\3\uffff\3\0\176\uffff";
    static final String DFA94_acceptS =
        "\2\uffff\1\4\u0080\uffff\1\1\1\3\1\2";
    static final String DFA94_specialS =
        "\1\uffff\1\0\3\uffff\1\1\1\2\1\3\176\uffff}>";
    static final String[] DFA94_transitionS = {
            "\5\2\2\uffff\23\2\1\uffff\1\7\45\2\1\uffff\26\2\1\1\1\uffff"+
            "\3\2\1\uffff\2\2\1\5\1\2\15\uffff\1\2\1\6\4\uffff\1\2\3\uffff"+
            "\3\2\4\uffff\6\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\13\uffff"+
            "\1\2\5\uffff\5\2\1\uffff\3\2\1\uffff\15\2",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA94_eot = DFA.unpackEncodedString(DFA94_eotS);
    static final short[] DFA94_eof = DFA.unpackEncodedString(DFA94_eofS);
    static final char[] DFA94_min = DFA.unpackEncodedStringToUnsignedChars(DFA94_minS);
    static final char[] DFA94_max = DFA.unpackEncodedStringToUnsignedChars(DFA94_maxS);
    static final short[] DFA94_accept = DFA.unpackEncodedString(DFA94_acceptS);
    static final short[] DFA94_special = DFA.unpackEncodedString(DFA94_specialS);
    static final short[][] DFA94_transition;

    static {
        int numStates = DFA94_transitionS.length;
        DFA94_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA94_transition[i] = DFA.unpackEncodedString(DFA94_transitionS[i]);
        }
    }

    class DFA94 extends DFA {

        public DFA94(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 94;
            this.eot = DFA94_eot;
            this.eof = DFA94_eof;
            this.min = DFA94_min;
            this.max = DFA94_max;
            this.accept = DFA94_accept;
            this.special = DFA94_special;
            this.transition = DFA94_transition;
        }
        public String getDescription() {
            return "()* loopback of 170:23: ( citation | quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA94_1 = input.LA(1);

                         
                        int index94_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred302_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index94_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA94_5 = input.LA(1);

                         
                        int index94_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred301_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred302_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index94_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA94_6 = input.LA(1);

                         
                        int index94_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred301_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index94_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA94_7 = input.LA(1);

                         
                        int index94_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred301_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index94_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 94, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA97_eotS =
        "\76\uffff";
    static final String DFA97_eofS =
        "\1\2\75\uffff";
    static final String DFA97_minS =
        "\1\13\1\0\1\uffff\72\0\1\uffff";
    static final String DFA97_maxS =
        "\1\u00bf\1\0\1\uffff\72\0\1\uffff";
    static final String DFA97_acceptS =
        "\2\uffff\1\2\72\uffff\1\1";
    static final String DFA97_specialS =
        "\1\uffff\1\54\1\uffff\1\11\1\43\1\50\1\53\1\7\1\63\1\22\1\60\1\10"+
        "\1\4\1\1\1\36\1\42\1\66\1\23\1\32\1\17\1\41\1\25\1\2\1\0\1\57\1"+
        "\21\1\12\1\67\1\44\1\3\1\16\1\51\1\5\1\24\1\34\1\13\1\45\1\61\1"+
        "\20\1\72\1\52\1\62\1\30\1\31\1\14\1\47\1\40\1\37\1\56\1\27\1\65"+
        "\1\6\1\33\1\70\1\35\1\55\1\46\1\26\1\64\1\15\1\71\1\uffff}>";
    static final String[] DFA97_transitionS = {
            "\1\25\1\15\1\16\1\32\1\61\2\uffff\20\2\1\31\1\21\1\33\1\uffff"+
            "\1\6\1\42\1\34\1\35\1\51\1\20\1\36\1\37\1\40\1\41\1\10\1\43"+
            "\1\44\1\45\1\46\1\47\1\23\4\2\1\17\1\60\10\2\1\22\1\2\1\50\4"+
            "\2\1\uffff\1\2\1\62\1\2\1\63\4\2\1\64\1\2\1\52\3\2\1\65\1\2"+
            "\1\30\1\57\4\2\1\1\1\uffff\3\2\1\uffff\2\2\1\4\1\2\15\uffff"+
            "\1\2\1\5\4\uffff\1\3\3\uffff\1\73\1\66\1\67\4\uffff\1\2\1\11"+
            "\1\12\1\13\1\14\1\2\1\uffff\1\7\1\uffff\1\26\2\uffff\1\27\13"+
            "\uffff\1\24\5\uffff\5\2\1\uffff\1\2\1\70\1\2\1\uffff\6\2\1\53"+
            "\1\54\1\55\1\56\1\71\1\72\1\74",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA97_eot = DFA.unpackEncodedString(DFA97_eotS);
    static final short[] DFA97_eof = DFA.unpackEncodedString(DFA97_eofS);
    static final char[] DFA97_min = DFA.unpackEncodedStringToUnsignedChars(DFA97_minS);
    static final char[] DFA97_max = DFA.unpackEncodedStringToUnsignedChars(DFA97_maxS);
    static final short[] DFA97_accept = DFA.unpackEncodedString(DFA97_acceptS);
    static final short[] DFA97_special = DFA.unpackEncodedString(DFA97_specialS);
    static final short[][] DFA97_transition;

    static {
        int numStates = DFA97_transitionS.length;
        DFA97_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA97_transition[i] = DFA.unpackEncodedString(DFA97_transitionS[i]);
        }
    }

    class DFA97 extends DFA {

        public DFA97(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 97;
            this.eot = DFA97_eot;
            this.eof = DFA97_eof;
            this.min = DFA97_min;
            this.max = DFA97_max;
            this.accept = DFA97_accept;
            this.special = DFA97_special;
            this.transition = DFA97_transition;
        }
        public String getDescription() {
            return "()+ loopback of 176:17: ( ( jj )? noun )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA97_23 = input.LA(1);

                         
                        int index97_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_23);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA97_13 = input.LA(1);

                         
                        int index97_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_13);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA97_22 = input.LA(1);

                         
                        int index97_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_22);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA97_29 = input.LA(1);

                         
                        int index97_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_29);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA97_12 = input.LA(1);

                         
                        int index97_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA97_32 = input.LA(1);

                         
                        int index97_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_32);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA97_51 = input.LA(1);

                         
                        int index97_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_51);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA97_7 = input.LA(1);

                         
                        int index97_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA97_11 = input.LA(1);

                         
                        int index97_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_11);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA97_3 = input.LA(1);

                         
                        int index97_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_3);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA97_26 = input.LA(1);

                         
                        int index97_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_26);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA97_35 = input.LA(1);

                         
                        int index97_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_35);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA97_44 = input.LA(1);

                         
                        int index97_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_44);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA97_59 = input.LA(1);

                         
                        int index97_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_59);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA97_30 = input.LA(1);

                         
                        int index97_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_30);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA97_19 = input.LA(1);

                         
                        int index97_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_19);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA97_38 = input.LA(1);

                         
                        int index97_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_38);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA97_25 = input.LA(1);

                         
                        int index97_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_25);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA97_9 = input.LA(1);

                         
                        int index97_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_9);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA97_17 = input.LA(1);

                         
                        int index97_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_17);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA97_33 = input.LA(1);

                         
                        int index97_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_33);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA97_21 = input.LA(1);

                         
                        int index97_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA97_57 = input.LA(1);

                         
                        int index97_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_57);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA97_49 = input.LA(1);

                         
                        int index97_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_49);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA97_42 = input.LA(1);

                         
                        int index97_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_42);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA97_43 = input.LA(1);

                         
                        int index97_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_43);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA97_18 = input.LA(1);

                         
                        int index97_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_18);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA97_52 = input.LA(1);

                         
                        int index97_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_52);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA97_34 = input.LA(1);

                         
                        int index97_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_34);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA97_54 = input.LA(1);

                         
                        int index97_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_54);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA97_14 = input.LA(1);

                         
                        int index97_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_14);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA97_47 = input.LA(1);

                         
                        int index97_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_47);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA97_46 = input.LA(1);

                         
                        int index97_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_46);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA97_20 = input.LA(1);

                         
                        int index97_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_20);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA97_15 = input.LA(1);

                         
                        int index97_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_15);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA97_4 = input.LA(1);

                         
                        int index97_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_4);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA97_28 = input.LA(1);

                         
                        int index97_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_28);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA97_36 = input.LA(1);

                         
                        int index97_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_36);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA97_56 = input.LA(1);

                         
                        int index97_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_56);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA97_45 = input.LA(1);

                         
                        int index97_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_45);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA97_5 = input.LA(1);

                         
                        int index97_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_5);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA97_31 = input.LA(1);

                         
                        int index97_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_31);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA97_40 = input.LA(1);

                         
                        int index97_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_40);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA97_6 = input.LA(1);

                         
                        int index97_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_6);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA97_1 = input.LA(1);

                         
                        int index97_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_1);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA97_55 = input.LA(1);

                         
                        int index97_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_55);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA97_48 = input.LA(1);

                         
                        int index97_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_48);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA97_24 = input.LA(1);

                         
                        int index97_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_24);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA97_10 = input.LA(1);

                         
                        int index97_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_10);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA97_37 = input.LA(1);

                         
                        int index97_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_37);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA97_41 = input.LA(1);

                         
                        int index97_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_41);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA97_8 = input.LA(1);

                         
                        int index97_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_8);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA97_58 = input.LA(1);

                         
                        int index97_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_58);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA97_50 = input.LA(1);

                         
                        int index97_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_50);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA97_16 = input.LA(1);

                         
                        int index97_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_16);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA97_27 = input.LA(1);

                         
                        int index97_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_27);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA97_53 = input.LA(1);

                         
                        int index97_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_53);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA97_60 = input.LA(1);

                         
                        int index97_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_60);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA97_39 = input.LA(1);

                         
                        int index97_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_39);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 97, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA103_eotS =
        "\43\uffff";
    static final String DFA103_eofS =
        "\1\2\2\uffff\1\2\2\uffff\1\2\10\uffff\1\2\7\uffff\1\2\6\uffff\1"+
        "\2\4\uffff";
    static final String DFA103_minS =
        "\1\13\1\12\1\uffff\1\13\2\12\1\13\1\0\6\12\1\uffff\1\13\5\0\2\12"+
        "\1\13\1\0\5\12\1\13\4\0";
    static final String DFA103_maxS =
        "\1\u00bf\1\12\1\uffff\1\u00bf\2\12\1\u00bf\1\0\6\12\1\uffff\1\u00bf"+
        "\5\0\2\12\1\u00bf\1\0\5\12\1\u00bf\4\0";
    static final String DFA103_acceptS =
        "\2\uffff\1\2\13\uffff\1\1\24\uffff";
    static final String DFA103_specialS =
        "\7\uffff\1\11\10\uffff\1\7\1\0\1\12\1\2\1\1\3\uffff\1\5\6\uffff"+
        "\1\4\1\6\1\3\1\10}>";
    static final String[] DFA103_transitionS = {
            "\5\2\2\uffff\23\2\1\uffff\46\2\1\uffff\26\2\1\1\1\uffff\3\2"+
            "\1\uffff\4\2\15\uffff\2\2\4\uffff\1\2\3\uffff\3\2\4\uffff\6"+
            "\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\13\uffff\1\2\5\uffff"+
            "\5\2\1\uffff\3\2\1\uffff\15\2",
            "\1\3",
            "",
            "\5\2\2\uffff\23\2\1\uffff\1\5\45\2\1\uffff\27\2\1\uffff\3\2"+
            "\1\uffff\4\2\15\uffff\1\2\1\4\4\uffff\1\2\3\uffff\3\2\4\uffff"+
            "\6\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\13\uffff\1\2\5\uffff"+
            "\5\2\1\uffff\3\2\1\uffff\15\2",
            "\1\6",
            "\1\7",
            "\5\2\2\uffff\23\2\1\15\1\11\1\12\2\2\1\13\41\2\1\uffff\27\2"+
            "\1\uffff\3\2\1\14\4\2\15\uffff\2\2\4\uffff\1\2\3\uffff\3\2\4"+
            "\uffff\6\2\1\uffff\1\10\1\uffff\1\2\2\uffff\1\2\13\uffff\1\2"+
            "\5\uffff\5\2\1\uffff\3\2\1\uffff\15\2",
            "\1\uffff",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "",
            "\5\2\2\uffff\23\2\1\uffff\1\26\45\2\1\uffff\27\2\1\uffff\3"+
            "\2\1\14\4\2\15\uffff\1\2\1\25\4\uffff\1\2\3\uffff\3\2\4\uffff"+
            "\6\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\13\uffff\1\2\5\uffff"+
            "\5\2\1\uffff\3\2\1\uffff\15\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\27",
            "\1\30",
            "\5\2\2\uffff\23\2\1\33\1\26\1\35\2\2\1\34\41\2\1\uffff\27\2"+
            "\1\uffff\3\2\1\32\4\2\15\uffff\2\2\4\uffff\1\2\3\uffff\3\2\4"+
            "\uffff\6\2\1\uffff\1\31\1\uffff\1\2\2\uffff\1\2\13\uffff\1\2"+
            "\5\uffff\5\2\1\uffff\3\2\1\uffff\15\2",
            "\1\uffff",
            "\1\36",
            "\1\37",
            "\1\40",
            "\1\41",
            "\1\42",
            "\5\2\2\uffff\23\2\1\uffff\46\2\1\uffff\27\2\1\uffff\3\2\1\32"+
            "\4\2\15\uffff\2\2\4\uffff\1\2\3\uffff\3\2\4\uffff\6\2\1\uffff"+
            "\1\2\1\uffff\1\2\2\uffff\1\2\13\uffff\1\2\5\uffff\5\2\1\uffff"+
            "\3\2\1\uffff\15\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA103_eot = DFA.unpackEncodedString(DFA103_eotS);
    static final short[] DFA103_eof = DFA.unpackEncodedString(DFA103_eofS);
    static final char[] DFA103_min = DFA.unpackEncodedStringToUnsignedChars(DFA103_minS);
    static final char[] DFA103_max = DFA.unpackEncodedStringToUnsignedChars(DFA103_maxS);
    static final short[] DFA103_accept = DFA.unpackEncodedString(DFA103_acceptS);
    static final short[] DFA103_special = DFA.unpackEncodedString(DFA103_specialS);
    static final short[][] DFA103_transition;

    static {
        int numStates = DFA103_transitionS.length;
        DFA103_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA103_transition[i] = DFA.unpackEncodedString(DFA103_transitionS[i]);
        }
    }

    class DFA103 extends DFA {

        public DFA103(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 103;
            this.eot = DFA103_eot;
            this.eof = DFA103_eof;
            this.min = DFA103_min;
            this.max = DFA103_max;
            this.accept = DFA103_accept;
            this.special = DFA103_special;
            this.transition = DFA103_transition;
        }
        public String getDescription() {
            return "()* loopback of 189:18: ( comma measurements )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA103_17 = input.LA(1);

                         
                        int index103_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index103_17);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA103_20 = input.LA(1);

                         
                        int index103_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index103_20);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA103_19 = input.LA(1);

                         
                        int index103_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index103_19);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA103_33 = input.LA(1);

                         
                        int index103_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index103_33);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA103_31 = input.LA(1);

                         
                        int index103_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index103_31);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA103_24 = input.LA(1);

                         
                        int index103_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index103_24);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA103_32 = input.LA(1);

                         
                        int index103_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index103_32);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA103_16 = input.LA(1);

                         
                        int index103_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index103_16);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA103_34 = input.LA(1);

                         
                        int index103_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index103_34);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA103_7 = input.LA(1);

                         
                        int index103_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index103_7);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA103_18 = input.LA(1);

                         
                        int index103_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index103_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 103, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA106_eotS =
        "\12\uffff";
    static final String DFA106_eofS =
        "\1\1\11\uffff";
    static final String DFA106_minS =
        "\1\13\1\uffff\4\0\4\uffff";
    static final String DFA106_maxS =
        "\1\u00bf\1\uffff\4\0\4\uffff";
    static final String DFA106_acceptS =
        "\1\uffff\1\5\4\uffff\1\1\1\2\1\3\1\4";
    static final String DFA106_specialS =
        "\2\uffff\1\3\1\2\1\0\1\1\4\uffff}>";
    static final String[] DFA106_transitionS = {
            "\5\1\2\uffff\23\1\1\uffff\46\1\1\uffff\27\1\1\uffff\1\1\1\uffff"+
            "\1\1\1\uffff\1\4\1\5\1\2\1\3\16\uffff\1\1\4\uffff\1\1\3\uffff"+
            "\3\1\4\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff"+
            "\1\1\5\uffff\5\1\1\uffff\3\1\1\uffff\15\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA106_eot = DFA.unpackEncodedString(DFA106_eotS);
    static final short[] DFA106_eof = DFA.unpackEncodedString(DFA106_eofS);
    static final char[] DFA106_min = DFA.unpackEncodedStringToUnsignedChars(DFA106_minS);
    static final char[] DFA106_max = DFA.unpackEncodedStringToUnsignedChars(DFA106_maxS);
    static final short[] DFA106_accept = DFA.unpackEncodedString(DFA106_acceptS);
    static final short[] DFA106_special = DFA.unpackEncodedString(DFA106_specialS);
    static final short[][] DFA106_transition;

    static {
        int numStates = DFA106_transitionS.length;
        DFA106_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA106_transition[i] = DFA.unpackEncodedString(DFA106_transitionS[i]);
        }
    }

    class DFA106 extends DFA {

        public DFA106(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 106;
            this.eot = DFA106_eot;
            this.eof = DFA106_eof;
            this.min = DFA106_min;
            this.max = DFA106_max;
            this.accept = DFA106_accept;
            this.special = DFA106_special;
            this.transition = DFA106_transition;
        }
        public String getDescription() {
            return "()+ loopback of 194:8: ( lrb | rrb | lsqb | rsqb )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA106_4 = input.LA(1);

                         
                        int index106_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA106_5 = input.LA(1);

                         
                        int index106_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA106_3 = input.LA(1);

                         
                        int index106_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA106_2 = input.LA(1);

                         
                        int index106_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred316_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 106, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA107_eotS =
        "\103\uffff";
    static final String DFA107_eofS =
        "\103\uffff";
    static final String DFA107_minS =
        "\1\13\16\uffff\1\0\63\uffff";
    static final String DFA107_maxS =
        "\1\u00bf\16\uffff\1\0\63\uffff";
    static final String DFA107_acceptS =
        "\1\uffff\1\2\100\uffff\1\1";
    static final String DFA107_specialS =
        "\17\uffff\1\0\63\uffff}>";
    static final String[] DFA107_transitionS = {
            "\5\1\22\uffff\3\1\1\uffff\21\1\4\uffff\2\1\10\uffff\1\1\1\uffff"+
            "\1\1\6\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\1\uffff\2\1\4\uffff\1\17\7\uffff\1\1\16\uffff\1\102\1\1"+
            "\4\uffff\1\1\3\uffff\3\1\5\uffff\4\1\2\uffff\1\1\1\uffff\1\1"+
            "\2\uffff\1\1\13\uffff\1\1\5\uffff\5\1\1\uffff\2\1\10\uffff\7"+
            "\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA107_eot = DFA.unpackEncodedString(DFA107_eotS);
    static final short[] DFA107_eof = DFA.unpackEncodedString(DFA107_eofS);
    static final char[] DFA107_min = DFA.unpackEncodedStringToUnsignedChars(DFA107_minS);
    static final char[] DFA107_max = DFA.unpackEncodedStringToUnsignedChars(DFA107_maxS);
    static final short[] DFA107_accept = DFA.unpackEncodedString(DFA107_acceptS);
    static final short[] DFA107_special = DFA.unpackEncodedString(DFA107_specialS);
    static final short[][] DFA107_transition;

    static {
        int numStates = DFA107_transitionS.length;
        DFA107_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA107_transition[i] = DFA.unpackEncodedString(DFA107_transitionS[i]);
        }
    }

    class DFA107 extends DFA {

        public DFA107(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 107;
            this.eot = DFA107_eot;
            this.eof = DFA107_eof;
            this.min = DFA107_min;
            this.max = DFA107_max;
            this.accept = DFA107_accept;
            this.special = DFA107_special;
            this.transition = DFA107_transition;
        }
        public String getDescription() {
            return "()* loopback of 50:88: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA107_15 = input.LA(1);

                         
                        int index107_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index107_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 107, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA108_eotS =
        "\17\uffff";
    static final String DFA108_eofS =
        "\17\uffff";
    static final String DFA108_minS =
        "\1\13\1\uffff\6\12\1\uffff\6\0";
    static final String DFA108_maxS =
        "\1\u00bf\1\uffff\6\12\1\uffff\6\0";
    static final String DFA108_acceptS =
        "\1\uffff\1\2\6\uffff\1\1\6\uffff";
    static final String DFA108_specialS =
        "\11\uffff\1\1\1\4\1\0\1\2\1\3\1\5}>";
    static final String[] DFA108_transitionS = {
            "\1\1\1\6\1\7\2\1\22\uffff\3\1\1\uffff\21\1\4\uffff\2\1\10\uffff"+
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff"+
            "\1\1\3\uffff\1\1\1\uffff\2\1\4\uffff\1\1\7\uffff\1\1\17\uffff"+
            "\1\1\4\uffff\1\1\3\uffff\3\1\5\uffff\1\2\1\3\1\4\1\5\2\uffff"+
            "\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff\5\10\1\uffff"+
            "\1\10\1\1\10\uffff\7\1",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA108_eot = DFA.unpackEncodedString(DFA108_eotS);
    static final short[] DFA108_eof = DFA.unpackEncodedString(DFA108_eofS);
    static final char[] DFA108_min = DFA.unpackEncodedStringToUnsignedChars(DFA108_minS);
    static final char[] DFA108_max = DFA.unpackEncodedStringToUnsignedChars(DFA108_maxS);
    static final short[] DFA108_accept = DFA.unpackEncodedString(DFA108_acceptS);
    static final short[] DFA108_special = DFA.unpackEncodedString(DFA108_specialS);
    static final short[][] DFA108_transition;

    static {
        int numStates = DFA108_transitionS.length;
        DFA108_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA108_transition[i] = DFA.unpackEncodedString(DFA108_transitionS[i]);
        }
    }

    class DFA108 extends DFA {

        public DFA108(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 108;
            this.eot = DFA108_eot;
            this.eof = DFA108_eof;
            this.min = DFA108_min;
            this.max = DFA108_max;
            this.accept = DFA108_accept;
            this.special = DFA108_special;
            this.transition = DFA108_transition;
        }
        public String getDescription() {
            return "()* loopback of 50:101: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA108_11 = input.LA(1);

                         
                        int index108_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index108_11);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA108_9 = input.LA(1);

                         
                        int index108_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index108_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA108_12 = input.LA(1);

                         
                        int index108_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index108_12);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA108_13 = input.LA(1);

                         
                        int index108_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index108_13);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA108_10 = input.LA(1);

                         
                        int index108_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index108_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA108_14 = input.LA(1);

                         
                        int index108_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index108_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 108, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_sentences_in_document208 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x08001E2FFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_sentence_in_sentences230 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x08001EAFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_unmatchedPhrase_in_sentences232 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x08001EAFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_comma_in_sentences240 = new BitSet(new long[]{0x0000000000000002L,0x0000008800000000L});
    public static final BitSet FOLLOW_stop_in_sentences242 = new BitSet(new long[]{0x0000000000000002L,0x0000008800000000L});
    public static final BitSet FOLLOW_nounphrase_in_sentence253 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x0C00082FFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_verbphrase_in_sentence255 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x0C00082FFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_prepphrase_in_sentence257 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x0C00082FFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_advAdj_in_sentence262 = new BitSet(new long[]{0x0801084800003002L,0x0C00080C00000020L,0x0000BE000004F001L});
    public static final BitSet FOLLOW_colon_in_sentence264 = new BitSet(new long[]{0x0801084800003002L,0x0C00080C00000020L,0x0000BE000004F001L});
    public static final BitSet FOLLOW_conjunction_in_sentence269 = new BitSet(new long[]{0x0000000000000002L,0x0400000800000000L});
    public static final BitSet FOLLOW_unmatchedTokens_in_unmatchedPhrase281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_unmatchedTokens302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_unmatchedTokens304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_unmatchedTokens306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_unmatchedTokens308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_unmatchedTokens310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_unmatchedTokens312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_unmatchedTokens314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_unmatchedTokens316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_unmatchedTokens318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackets_in_unmatchedTokens320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_unmatchedTokens322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_unmatchedTokens324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_unmatchedTokens326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neg_in_unmatchedTokens328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_unmatchedTokens330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_unmatchedTokens332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_unmatchedTokens334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphraseStructure_in_nounphrase346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_nounphraseStructure365 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_apparatus_in_nounphraseStructure369 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_advAdj_in_nounphraseStructure371 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure377 = new BitSet(new long[]{0x187FFFDC0820F802L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_noun_in_nounphraseStructure379 = new BitSet(new long[]{0x187FFFDC0820F802L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_number_in_nounphraseStructure381 = new BitSet(new long[]{0x187FFFDC0820F802L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_ratio_in_nounphraseStructure383 = new BitSet(new long[]{0x187FFFDC0820F802L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_conjunction_in_nounphraseStructure391 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_advAdj_in_nounphraseStructure394 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_noun_in_nounphraseStructure398 = new BitSet(new long[]{0x187FFFDC0820F802L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_number_in_nounphraseStructure400 = new BitSet(new long[]{0x187FFFDC0820F802L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_ratio_in_nounphraseStructure402 = new BitSet(new long[]{0x187FFFDC0820F802L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_prepphraseOf_in_nounphraseStructure410 = new BitSet(new long[]{0x0000000008200002L});
    public static final BitSet FOLLOW_prepphraseIN_in_nounphraseStructure413 = new BitSet(new long[]{0x0040004008200002L,0x0800080800000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure415 = new BitSet(new long[]{0x0000000008200002L});
    public static final BitSet FOLLOW_dissolveStructure1_in_dissolvePhrase430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolveStructure2_in_dissolvePhrase432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_dissolveStructure1456 = new BitSet(new long[]{0x0040004000000000L,0x0800080800000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure1458 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_inin_in_dissolveStructure1461 = new BitSet(new long[]{0x0040004000000000L,0x0800080800000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure1463 = new BitSet(new long[]{0x0000000000200000L,0x0000100000000000L});
    public static final BitSet FOLLOW_rrb_in_dissolveStructure1467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure2476 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_inin_in_dissolveStructure2479 = new BitSet(new long[]{0x0040004000000000L,0x0800080800000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure2481 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_cc_in_conjunction496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_conjunction498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbphraseStructure_in_verbphrase508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_in_verbphraseStructure527 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_inAll_in_verbphraseStructure530 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_inafter_in_verbphraseStructure533 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_md_in_verbphraseStructure537 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_adv_in_verbphraseStructure540 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_adj_in_verbphraseStructure543 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_verb_in_verbphraseStructure546 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x0C00082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_md_in_verbphraseStructure549 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x0C00082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_adv_in_verbphraseStructure552 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x0C00082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_adj_in_verbphraseStructure555 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x0C00082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_neg_in_verbphraseStructure558 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x0C00082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_inoff_in_verbphraseStructure564 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x0C00082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_cc_in_verbphraseStructure568 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x0800082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_comma_in_verbphraseStructure571 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x0800082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_prepphrase_in_verbphraseStructure574 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x0C00082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_vb_in_verb586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbp_in_verb588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbg_in_verb590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbd_in_verb592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbz_in_verb594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbn_in_verb596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbuse_in_verb598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsubmerge_in_verb600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsubject_in_verb602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbadd_in_verb604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcharge_in_verb606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcontain_in_verb608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdrop_in_verb610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbfill_in_verb612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsuspend_in_verb614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbtreat_in_verb616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbapparatus_in_verb618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbconcentrate_in_verb620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcool_in_verb622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdegass_in_verb624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdissolve_in_verb626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdry_in_verb628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbextract_in_verb630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbfilter_in_verb632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbheat_in_verb635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbincrease_in_verb637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbpartition_in_verb639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbprecipitate_in_verb641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbpurify_in_verb643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbquench_in_verb645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbrecover_in_verb647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbremove_in_verb649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbstir_in_verb651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsynthesize_in_verb653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbwait_in_verb655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbwash_in_verb657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbyield_in_verb659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbchange_in_verb661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_number669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_number671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wdt_in_clause679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wp_poss_in_clause681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_clause683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_clause685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wps_in_clause687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wql_in_clause689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wrb_in_clause691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ex_in_clause693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pdt_in_clause695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prp_in_noun703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citation_in_noun705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_noun707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_apparatus_in_noun709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_noun711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnstate_in_noun713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_noun715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nns_in_noun717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnp_in_noun719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnadd_in_noun721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_preparationphrase_in_noun723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnexample_in_noun725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcpr_in_noun727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_range_in_noun729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_noun731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_noun733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntime_in_noun735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnatmosphere_in_noun737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nneq_in_noun739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_noun741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchementity_in_noun743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_noun745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntemp_in_noun747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnflash_in_noun749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nngeneral_in_noun751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnmethod_in_noun753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnamount_in_noun755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpressure_in_noun757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nncolumn_in_noun759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchromatography_in_noun761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnvacuum_in_noun763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nncycle_in_noun765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntimes_in_noun767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnconcentrate_in_noun769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnvol_in_noun771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpurify_in_noun773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wdt_in_noun775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wp_poss_in_noun777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_noun779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wps_in_noun781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnsynthesize_in_noun783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnmixture_in_noun785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_noun787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_noun789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_noun791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnextract_in_noun793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnfilter_in_noun795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnprecipitate_in_noun797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnremove_in_noun799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_noun801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fwin_in_noun803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_noun805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clause_in_noun807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_range813 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_dash_in_range815 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_cd_in_range817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberratio_in_ratio826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounratio_in_ratio828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_numberratio852 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_colon_in_numberratio855 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_cd_in_numberratio857 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_noun_in_nounratio870 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_colon_in_nounratio874 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE0100080094F071L});
    public static final BitSet FOLLOW_noun_in_nounratio876 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_citationStructure1_in_citation889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citationStructure2_in_citation891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_citationStructure1914 = new BitSet(new long[]{0x0000000000000000L,0x0C00000800000000L,0x0000000000800020L});
    public static final BitSet FOLLOW_citationContent_in_citationStructure1916 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_rrb_in_citationStructure1918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_citationStructure2924 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_lrb_in_citationStructure2926 = new BitSet(new long[]{0x0000000000000000L,0x0C00000800000000L,0x0000000000800020L});
    public static final BitSet FOLLOW_citationContent_in_citationStructure2928 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_rrb_in_citationStructure2930 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_comma_in_citationStructure2932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnp_in_citationContent941 = new BitSet(new long[]{0x0000000000000000L,0x0C00000800000000L,0x0000000000800020L});
    public static final BitSet FOLLOW_fw_in_citationContent943 = new BitSet(new long[]{0x0000000000000000L,0x0C00000800000000L,0x0000000000800020L});
    public static final BitSet FOLLOW_cd_in_citationContent945 = new BitSet(new long[]{0x0000000000000000L,0x0C00000800000000L,0x0000000000800020L});
    public static final BitSet FOLLOW_conjunction_in_citationContent947 = new BitSet(new long[]{0x0000000000000000L,0x0C00000800000000L,0x0000000000800020L});
    public static final BitSet FOLLOW_nnp_in_citationContent951 = new BitSet(new long[]{0x0000000000000002L,0x0C00000800000000L,0x0000000000800020L});
    public static final BitSet FOLLOW_fw_in_citationContent953 = new BitSet(new long[]{0x0000000000000002L,0x0C00000800000000L,0x0000000000800020L});
    public static final BitSet FOLLOW_cd_in_citationContent955 = new BitSet(new long[]{0x0000000000000002L,0x0C00000800000000L,0x0000000000800020L});
    public static final BitSet FOLLOW_conjunction_in_citationContent957 = new BitSet(new long[]{0x0000000000000002L,0x0C00000800000000L,0x0000000000800020L});
    public static final BitSet FOLLOW_mixtureStructure2_in_mixture969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixtureStructure1_in_mixture971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_mixtureStructure2992 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_lrb_in_mixtureStructure2994 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure2996 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_rrb_in_mixtureStructure2998 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_comma_in_mixtureStructure21000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_mixtureStructure11007 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure11009 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_rrb_in_mixtureStructure11011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_mixtureContent1020 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_verb_in_mixtureContent1022 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_measurements_in_mixtureContent1024 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_md_in_mixtureContent1026 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_stop_in_mixtureContent1028 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent1030 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_molecule_in_mixtureContent1032 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent1034 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_dash_in_mixtureContent1036 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_sym_in_mixtureContent1038 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_cd_in_mixtureContent1040 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_noun_in_mixtureContent1042 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_inof_in_mixtureContent1044 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_inAll_in_mixtureContent1046 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_cd_in_mixtureContent1048 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_comma_in_mixtureContent1050 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_adj_in_mixtureContent1052 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_colon_in_mixtureContent1054 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_stop_in_mixtureContent1056 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_fw_in_mixtureContent1060 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_verb_in_mixtureContent1062 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_measurements_in_mixtureContent1064 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_md_in_mixtureContent1066 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_stop_in_mixtureContent1068 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent1070 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_molecule_in_mixtureContent1072 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent1074 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_dash_in_mixtureContent1076 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_sym_in_mixtureContent1078 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_cd_in_mixtureContent1080 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_noun_in_mixtureContent1082 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_inof_in_mixtureContent1084 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_inAll_in_mixtureContent1086 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_cd_in_mixtureContent1088 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_comma_in_mixtureContent1090 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_adj_in_mixtureContent1092 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_colon_in_mixtureContent1094 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_stop_in_mixtureContent1096 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_jj_in_adj1107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjr_in_adj1109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjs_in_adj1111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjt_in_adj1113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcj_in_adj1115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_adj1117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rb_in_adv1124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbr_in_adv1126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbt_in_adv1128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rp_in_adv1130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbs_in_adv1132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbconj_in_adv1134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neg_in_prepphrase1147 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x0800082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_prepphrase1151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTime_in_prepphrase1153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTemp_in_prepphrase1155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseIN_in_prepphrase1157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseOther_in_prepphrase1159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_advAdj1173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_advAdj1175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_prepphraseOther1184 = new BitSet(new long[]{0x0801084BFFFC3000L,0x0800080000000020L,0x0002BE000004F801L});
    public static final BitSet FOLLOW_inAll_in_prepphraseOther1187 = new BitSet(new long[]{0x187FFFDFFFFCF800L,0x0800080868A140A0L,0xFE03BE080094F871L});
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOther1191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_prepphraseOf1218 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOf1221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1261 = new BitSet(new long[]{0x0801085BFFFC3000L,0x0800080000000020L,0x0002BE000004F801L});
    public static final BitSet FOLLOW_inAll_in_prepPhraseTimeStructure1264 = new BitSet(new long[]{0x0801085800003000L,0x0800080000000020L,0x0000BE000004F001L});
    public static final BitSet FOLLOW_dt_in_prepPhraseTimeStructure1268 = new BitSet(new long[]{0x0801085800003000L,0x0800080000000020L,0x0000BE000004F001L});
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1271 = new BitSet(new long[]{0x0801085800003000L,0x0800080000000020L,0x0000BE000004F001L});
    public static final BitSet FOLLOW_cd_in_prepPhraseTimeStructure1274 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_nntime_in_prepPhraseTimeStructure1277 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_inin_in_prepphraseIN1289 = new BitSet(new long[]{0x0040004000000000L,0x0800080800000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_molecule_in_prepphraseIN1291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inunder_in_prepphraseAtmosphereContent1335 = new BitSet(new long[]{0x0841084800003000L,0x0800080800000020L,0x0000BE000004F001L});
    public static final BitSet FOLLOW_dt_in_prepphraseAtmosphereContent1338 = new BitSet(new long[]{0x0841084800003000L,0x0800080800000020L,0x0000BE000004F001L});
    public static final BitSet FOLLOW_advAdj_in_prepphraseAtmosphereContent1341 = new BitSet(new long[]{0x0841084800003000L,0x0800080800000020L,0x0000BE000004F001L});
    public static final BitSet FOLLOW_molecule_in_prepphraseAtmosphereContent1344 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_in_inAll1358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inafter_in_inAll1360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inas_in_inAll1362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inbefore_in_inAll1364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inby_in_inAll1366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infor_in_inAll1368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infrom_in_inAll1370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inin_in_inAll1372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ininto_in_inAll1374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_inAll1376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inoff_in_inAll1378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inon_in_inAll1380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inover_in_inAll1382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inunder_in_inAll1384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_invia_in_inAll1386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inwith_in_inAll1388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inwithout_in_inAll1390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_in_inAll1392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTempContent_in_prepphraseTemp1399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1421 = new BitSet(new long[]{0x0801184BFFFC3000L,0x0800080000000020L,0x0002BE000004F801L});
    public static final BitSet FOLLOW_inAll_in_prepphraseTempContent1424 = new BitSet(new long[]{0x0801184800003000L,0x0800080000000020L,0x0000BE000004F001L});
    public static final BitSet FOLLOW_dt_in_prepphraseTempContent1427 = new BitSet(new long[]{0x0801184800003000L,0x0800080000000020L,0x0000BE000004F001L});
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1430 = new BitSet(new long[]{0x0000100000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_cd_in_prepphraseTempContent1433 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_nntemp_in_prepphraseTempContent1436 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_cd_in_amount1451 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_nnamount_in_amount1453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_mass1474 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_nnmass_in_mass1476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_percent1497 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_nn_in_percent1499 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_nnpercent_in_percent1502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_volume1526 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_nnvol_in_volume1528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_molar1549 = new BitSet(new long[]{0x0000004000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_nnmolar_in_molar1552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsynthesize_in_preparationphrase1575 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_inas_in_preparationphrase1577 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x0800082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_nnexample_in_preparationphrase1580 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_cd_in_preparationphrase1582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphrase_in_preparationphrase1585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_preapparatus_in_apparatus1595 = new BitSet(new long[]{0x0801084800003000L,0x0800080000000020L,0x000000000004F001L});
    public static final BitSet FOLLOW_nnapparatus_in_apparatus1598 = new BitSet(new long[]{0x0801084800003002L,0x0800080000000020L,0x000000000004F001L});
    public static final BitSet FOLLOW_dt_in_preapparatus1624 = new BitSet(new long[]{0x0000004000000000L,0x0800080000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_quantity_in_preapparatus1628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_preapparatus1630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpressure_in_preapparatus1632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_preapparatus1634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnadd_in_preapparatus1636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchementity_in_preapparatus1638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnstate_in_preapparatus1640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_measurements1649 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_nn_in_measurements1651 = new BitSet(new long[]{0x0000004000000000L,0x0800080000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_measurementtypes_in_measurements1655 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_dt_in_measurements1660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molar_in_measurementtypes1670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_measurementtypes1672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mass_in_measurementtypes1674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_percent_in_measurementtypes1676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_volume_in_measurementtypes1678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound1_in_oscarCompound1691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound2_in_oscarCompound1693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound3_in_oscarCompound1695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound4_in_oscarCompound1697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound5_in_oscarCompound1699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound1701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_oscarCompound51711 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound51713 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_rrb_in_oscarCompound51715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound41738 = new BitSet(new long[]{0x0000000000000000L,0x0000005000000000L});
    public static final BitSet FOLLOW_dash_in_oscarCompound41741 = new BitSet(new long[]{0x0000000000000002L,0x0000005000000000L});
    public static final BitSet FOLLOW_apost_in_oscarCompound41743 = new BitSet(new long[]{0x0000000000000002L,0x0000005000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound31770 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_dash_in_oscarCompound31773 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound31775 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_dash_in_oscarCompound31779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound21807 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound21809 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound11830 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_jj_in_oscarCompound11832 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound11834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_moleculeamount11858 = new BitSet(new long[]{0x0000004008000000L,0x0800080800000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_mixture_in_moleculeamount11860 = new BitSet(new long[]{0x0000004008000000L,0x0800080800000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_inof_in_moleculeamount11864 = new BitSet(new long[]{0x0040004000000000L,0x0800080800000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount11866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_moleculeamount21876 = new BitSet(new long[]{0x0040004000000000L,0x0800080800000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_mixture_in_moleculeamount21878 = new BitSet(new long[]{0x0040004000000000L,0x0800080800000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount21882 = new BitSet(new long[]{0x0040004000000002L,0x0800080800000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_citation_in_moleculeamount21887 = new BitSet(new long[]{0x0000004000000002L,0x0800080800000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_quantity_in_moleculeamount21889 = new BitSet(new long[]{0x0000004000000002L,0x0800080800000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_mixture_in_moleculeamount21891 = new BitSet(new long[]{0x0000004000000002L,0x0800080800000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_moleculeamount1_in_moleculeamount1902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount2_in_moleculeamount1906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount_in_molecule1927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_oscarcdType1950 = new BitSet(new long[]{0x0000000000000800L,0x0800000000000000L});
    public static final BitSet FOLLOW_oscarcd_in_oscarcdType1953 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_cd_in_oscarcdType1955 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_rrb_in_oscarcdType1958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount11967 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount11969 = new BitSet(new long[]{0x0000000000000800L,0x0800000000000000L});
    public static final BitSet FOLLOW_oscarcd_in_unnamedmoleculeamount11972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_unnamedmoleculeamount11974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_unnamedmoleculeamount21982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcdType_in_unnamedmoleculeamount21984 = new BitSet(new long[]{0x0000004000000002L,0x0800080800000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_citation_in_unnamedmoleculeamount21987 = new BitSet(new long[]{0x0000004000000002L,0x0800080800000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount21989 = new BitSet(new long[]{0x0000004000000002L,0x0800080800000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount21991 = new BitSet(new long[]{0x0000004000000002L,0x0800080800000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount32007 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount32009 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE0100080094F071L});
    public static final BitSet FOLLOW_jj_in_unnamedmoleculeamount32012 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE0100080094F071L});
    public static final BitSet FOLLOW_noun_in_unnamedmoleculeamount32015 = new BitSet(new long[]{0x187FFFDC0000F802L,0x0800080868A140A0L,0xFE0100080094F071L});
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount2026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount2030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount2034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount_in_unnamedmolecule2047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity1_in_quantity2070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity2_in_quantity2072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_quantity12097 = new BitSet(new long[]{0x0000004000000000L,0x0800080000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_measurements_in_quantity12099 = new BitSet(new long[]{0x0000000000000000L,0x0000108800000000L});
    public static final BitSet FOLLOW_comma_in_quantity12102 = new BitSet(new long[]{0x0000004000000000L,0x0800080000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_measurements_in_quantity12105 = new BitSet(new long[]{0x0000000000000000L,0x0000108800000000L});
    public static final BitSet FOLLOW_comma_in_quantity12110 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_preparationphrase_in_quantity12112 = new BitSet(new long[]{0x0000000000000000L,0x0000108800000000L});
    public static final BitSet FOLLOW_stop_in_quantity12117 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_preparationphrase_in_quantity12119 = new BitSet(new long[]{0x0000000000000000L,0x0000108800000000L});
    public static final BitSet FOLLOW_rrb_in_quantity12124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_quantity22135 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_comma_in_quantity22138 = new BitSet(new long[]{0x0000004000000000L,0x0800080000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_measurements_in_quantity22141 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_nngeneral_in_method2157 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_nn_in_method2159 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_nnmethod_in_method2163 = new BitSet(new long[]{0x0000000000000802L,0x0800000000000000L});
    public static final BitSet FOLLOW_oscarcd_in_method2166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_method2168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_brackets2190 = new BitSet(new long[]{0x0000000000000002L,0x00001E0000000000L});
    public static final BitSet FOLLOW_rrb_in_brackets2192 = new BitSet(new long[]{0x0000000000000002L,0x00001E0000000000L});
    public static final BitSet FOLLOW_lsqb_in_brackets2194 = new BitSet(new long[]{0x0000000000000002L,0x00001E0000000000L});
    public static final BitSet FOLLOW_rsqb_in_brackets2196 = new BitSet(new long[]{0x0000000000000002L,0x00001E0000000000L});
    public static final BitSet FOLLOW_11_in_oscarcd2204 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcd2206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_12_in_oscarcj2211 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcj2213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_13_in_oscarrn2218 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarrn2220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_14_in_oscarcpr2225 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcpr2227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_15_in_oscaront2233 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscaront2235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_16_in_tmunicode2240 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_tmunicode2242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_17_in_cdunicode2247 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cdunicode2249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_18_in_inas2256 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inas2258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_19_in_inbefore2263 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inbefore2265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_20_in_inafter2270 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inafter2272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_21_in_inin2277 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inin2279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_22_in_ininto2284 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ininto2286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_23_in_inwith2291 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inwith2293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_24_in_inwithout2298 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inwithout2300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_inby2305 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inby2307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_invia2312 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_invia2314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_27_in_inof2319 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inof2321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_inon2326 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inon2328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_infor2333 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_infor2335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_30_in_infrom2340 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_infrom2342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_31_in_inunder2347 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inunder2349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_32_in_inover2354 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inover2356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_inoff2361 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inoff2363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_nnexample2370 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnexample2372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_nnstate2377 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnstate2379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_nntime2384 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nntime2386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_nnmass2391 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmass2393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_38_in_nnmolar2399 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmolar2402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_39_in_nnamount2407 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnamount2409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_nnatmosphere2414 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnatmosphere2416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_nneq2421 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nneq2423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_nnvol2428 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnvol2430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_43_in_nnchementity2435 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnchementity2437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_nntemp2442 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nntemp2444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_45_in_nnflash2449 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnflash2451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_46_in_nngeneral2456 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nngeneral2458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_nnmethod2463 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmethod2465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_nnpressure2471 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnpressure2473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_49_in_nncolumn2478 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nncolumn2480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_50_in_nnchromatography2485 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnchromatography2487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_nnvacuum2492 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnvacuum2494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_52_in_nncycle2499 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nncycle2501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_nntimes2506 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nntimes2508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_oscarcm2515 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcm2517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_vbuse2524 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbuse2526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_56_in_vbchange2531 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbchange2533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_57_in_vbsubmerge2538 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsubmerge2540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_vbsubject2545 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsubject2547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_59_in_nnadd2554 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnadd2556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_60_in_nnmixture2561 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmixture2563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_61_in_vbadd2568 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbadd2570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_vbcharge2575 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbcharge2577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_vbcontain2582 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbcontain2584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_vbdrop2589 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdrop2591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_vbfill2596 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbfill2598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_vbsuspend2603 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsuspend2605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_67_in_vbtreat2610 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbtreat2612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_68_in_vbapparatus2619 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbapparatus2621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_69_in_nnapparatus2626 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnapparatus2628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_vbconcentrate2635 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbconcentrate2637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_nnconcentrate2642 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnconcentrate2644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_72_in_vbcool2651 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbcool2653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_vbdegass2660 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdegass2662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_74_in_vbdissolve2669 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdissolve2671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_75_in_vbdry2678 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdry2680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_nndry2685 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nndry2687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_vbextract2694 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbextract2696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_nnextract2701 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnextract2703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_vbfilter2710 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbfilter2712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_nnfilter2717 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnfilter2719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_vbheat2726 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbheat2728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_vbincrease2733 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbincrease2735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_vbpartition2742 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbpartition2744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_vbprecipitate2751 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbprecipitate2753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_85_in_nnprecipitate2758 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnprecipitate2760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_86_in_vbpurify2767 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbpurify2769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_87_in_nnpurify2774 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnpurify2776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_vbquench2783 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbquench2785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_vbrecover2792 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbrecover2794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_vbremove2801 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbremove2803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_nnremove2808 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnremove2810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_vbstir2817 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbstir2819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_93_in_vbsynthesize2826 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsynthesize2828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_nnsynthesize2833 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnsynthesize2835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_95_in_vbwait2842 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbwait2844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_vbwash2851 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbwash2853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_vbyield2860 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbyield2862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_98_in_colon2869 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_colon2871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_99_in_comma2876 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_comma2878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_100_in_apost2883 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_apost2885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_101_in_neg2890 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_neg2892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_102_in_dash2897 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dash2899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_103_in_stop2904 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_stop2906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_104_in_nnpercent2911 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnpercent2913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_105_in_lsqb2918 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_lsqb2920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_106_in_rsqb2925 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rsqb2927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_107_in_lrb2933 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_lrb2935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_rrb2940 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rrb2942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_109_in_abl2951 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_abl2953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_abn2960 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_abn2962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_111_in_abx2969 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_abx2971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_ap2978 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ap2980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_113_in_at2987 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_at2989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_be2996 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_be2998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_115_in_bed3005 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bed3007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_bedz3014 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bedz3016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_beg3023 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_beg3025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_bem3032 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bem3034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_ben3041 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ben3043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_ber3050 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ber3052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_bez3059 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bez3061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_cc3068 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cc3070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_cd3077 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cd3079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_cs3086 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cs3088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_dotok3096 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dotok3098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_dod3105 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dod3107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_doz3114 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_doz3116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_dt3123 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dt3125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_dti3132 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dti3134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_dts3141 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dts3143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_dtx3150 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dtx3152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_ex3159 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ex3161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_fw3168 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_fw3170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_fwin3177 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_fwin3179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_hv3186 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hv3188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_hvd3195 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hvd3197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_hvg3204 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hvg3206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_hvn3213 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hvn3215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_139_in_in3222 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_in3224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_jj3231 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jj3233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_jjr3240 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jjr3242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_jjs3249 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jjs3251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_jjt3258 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jjt3260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_md3267 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_md3269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_nc3276 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nc3278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_nn3285 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nn3287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_nn_poss3294 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nn_poss3296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_nns3303 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nns3305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_nns_poss3312 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nns_poss3314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_np3321 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_np3323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_nnp3331 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnp3333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_np_poss3341 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_np_poss3343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_nps3350 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nps3352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_nps_poss3359 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nps_poss3361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_nr3368 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nr3370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_od3377 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_od3379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_pn3386 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pn3388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_pn_poss3395 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pn_poss3397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_pp_poss3404 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pp_poss3406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_pp_poss_poss3413 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pp_poss_poss3415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_ppl3422 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppl3424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_ppls3431 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppls3433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_prp3441 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_prp3444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_ppo3451 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppo3453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_pps3460 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pps3462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_ppss3469 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppss3471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_ql3478 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ql3480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_qlp3487 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_qlp3489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_rb3496 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rb3498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_rbr3505 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbr3507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_rbconj3516 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbconj3519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_rbt3527 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbt3529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_rbs3536 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbs3538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_rn3546 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rn3548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_rp3555 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rp3557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_sym3566 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_sym3568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_to3575 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_to3577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_uh3584 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_uh3586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_vb3593 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vb3595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_vbp3603 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbp3605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_vbd3614 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbd3616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_vbg3623 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbg3625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_vbn3632 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbn3634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_vbz3641 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbz3643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_wdt3650 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wdt3652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_wp_poss3659 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wp_poss3661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_wpo3669 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wpo3671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_wps3678 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wps3680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_wql3688 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wql3690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_wrb3697 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wrb3699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_pdt3708 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pdt3710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sentence_in_synpred2_ChemicalChunker230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred4_ChemicalChunker240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphrase_in_synpred6_ChemicalChunker253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbphrase_in_synpred7_ChemicalChunker255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphrase_in_synpred8_ChemicalChunker257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred9_ChemicalChunker262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_synpred10_ChemicalChunker264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred11_ChemicalChunker269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred12_ChemicalChunker302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred13_ChemicalChunker304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred14_ChemicalChunker306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_synpred16_ChemicalChunker310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_synpred17_ChemicalChunker312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_synpred18_ChemicalChunker314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_synpred19_ChemicalChunker316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_synpred20_ChemicalChunker318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackets_in_synpred21_ChemicalChunker320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred22_ChemicalChunker322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred26_ChemicalChunker330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred27_ChemicalChunker332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_synpred28_ChemicalChunker365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_apparatus_in_synpred29_ChemicalChunker369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred30_ChemicalChunker371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred31_ChemicalChunker377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred32_ChemicalChunker379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred33_ChemicalChunker381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ratio_in_synpred34_ChemicalChunker383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred35_ChemicalChunker391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred36_ChemicalChunker394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred37_ChemicalChunker391 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_advAdj_in_synpred37_ChemicalChunker394 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_noun_in_synpred37_ChemicalChunker398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred38_ChemicalChunker400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ratio_in_synpred39_ChemicalChunker402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseOf_in_synpred40_ChemicalChunker410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred41_ChemicalChunker415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseIN_in_synpred42_ChemicalChunker413 = new BitSet(new long[]{0x0040004000000002L,0x0800080800000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred42_ChemicalChunker415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolveStructure1_in_synpred43_ChemicalChunker430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inin_in_synpred45_ChemicalChunker479 = new BitSet(new long[]{0x0040004000000000L,0x0800080800000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_molecule_in_synpred45_ChemicalChunker481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_in_synpred47_ChemicalChunker527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred48_ChemicalChunker530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred53_ChemicalChunker546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_synpred54_ChemicalChunker549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred55_ChemicalChunker552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred56_ChemicalChunker555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neg_in_synpred57_ChemicalChunker558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_synpred58_ChemicalChunker537 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_adv_in_synpred58_ChemicalChunker540 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_adj_in_synpred58_ChemicalChunker543 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_verb_in_synpred58_ChemicalChunker546 = new BitSet(new long[]{0xE7800003FFFC3002L,0x00000023B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_md_in_synpred58_ChemicalChunker549 = new BitSet(new long[]{0x0000000000003002L,0x0000002000000000L,0x0000BE000001F000L});
    public static final BitSet FOLLOW_adv_in_synpred58_ChemicalChunker552 = new BitSet(new long[]{0x0000000000003002L,0x0000002000000000L,0x0000BE000000F000L});
    public static final BitSet FOLLOW_adj_in_synpred58_ChemicalChunker555 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_neg_in_synpred58_ChemicalChunker558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inoff_in_synpred59_ChemicalChunker564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cc_in_synpred62_ChemicalChunker568 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x0800082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_comma_in_synpred62_ChemicalChunker571 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x0800082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_prepphrase_in_synpred62_ChemicalChunker574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_synpred103_ChemicalChunker683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_synpred104_ChemicalChunker685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citation_in_synpred110_ChemicalChunker705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred111_ChemicalChunker707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_apparatus_in_synpred112_ChemicalChunker709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred113_ChemicalChunker711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnstate_in_synpred114_ChemicalChunker713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_synpred115_ChemicalChunker715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnadd_in_synpred118_ChemicalChunker721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_range_in_synpred122_ChemicalChunker729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_synpred123_ChemicalChunker731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred124_ChemicalChunker733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred128_ChemicalChunker741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchementity_in_synpred129_ChemicalChunker743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred130_ChemicalChunker745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpressure_in_synpred136_ChemicalChunker757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wdt_in_synpred145_ChemicalChunker775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wp_poss_in_synpred146_ChemicalChunker777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_synpred147_ChemicalChunker779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wps_in_synpred148_ChemicalChunker781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred152_ChemicalChunker789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred153_ChemicalChunker791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberratio_in_synpred161_ChemicalChunker826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_synpred162_ChemicalChunker855 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_cd_in_synpred162_ChemicalChunker857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_synpred163_ChemicalChunker874 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE0100080094F071L});
    public static final BitSet FOLLOW_noun_in_synpred163_ChemicalChunker876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred173_ChemicalChunker1020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred174_ChemicalChunker1022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred175_ChemicalChunker1024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred177_ChemicalChunker1028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred178_ChemicalChunker1030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred179_ChemicalChunker1032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred180_ChemicalChunker1034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred182_ChemicalChunker1038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred183_ChemicalChunker1040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred184_ChemicalChunker1042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_synpred185_ChemicalChunker1044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred186_ChemicalChunker1046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred187_ChemicalChunker1048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred188_ChemicalChunker1050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred189_ChemicalChunker1052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred191_ChemicalChunker1060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred192_ChemicalChunker1062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred193_ChemicalChunker1064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred195_ChemicalChunker1068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred196_ChemicalChunker1070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred197_ChemicalChunker1072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred198_ChemicalChunker1074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred200_ChemicalChunker1078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred201_ChemicalChunker1080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred202_ChemicalChunker1082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_synpred203_ChemicalChunker1084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred204_ChemicalChunker1086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred205_ChemicalChunker1088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred206_ChemicalChunker1090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred207_ChemicalChunker1092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred209_ChemicalChunker1096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_synpred221_ChemicalChunker1151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTime_in_synpred222_ChemicalChunker1153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTemp_in_synpred223_ChemicalChunker1155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseIN_in_synpred224_ChemicalChunker1157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred228_ChemicalChunker1261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntime_in_synpred233_ChemicalChunker1277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnatmosphere_in_synpred236_ChemicalChunker1346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred254_ChemicalChunker1421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntemp_in_synpred259_ChemicalChunker1436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnapparatus_in_synpred264_ChemicalChunker1598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_synpred273_ChemicalChunker1660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound1_in_synpred278_ChemicalChunker1691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound2_in_synpred279_ChemicalChunker1693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound4_in_synpred281_ChemicalChunker1697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred283_ChemicalChunker1741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred285_ChemicalChunker1773 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_synpred285_ChemicalChunker1775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred286_ChemicalChunker1779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_synpred287_ChemicalChunker1809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred288_ChemicalChunker1858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred289_ChemicalChunker1860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred290_ChemicalChunker1876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred291_ChemicalChunker1878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred292_ChemicalChunker1882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citation_in_synpred293_ChemicalChunker1887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred294_ChemicalChunker1889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred295_ChemicalChunker1891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount1_in_synpred296_ChemicalChunker1902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citation_in_synpred300_ChemicalChunker1987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred301_ChemicalChunker1989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred302_ChemicalChunker1991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_synpred303_ChemicalChunker2012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_synpred304_ChemicalChunker2012 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE0100080094F071L});
    public static final BitSet FOLLOW_noun_in_synpred304_ChemicalChunker2015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_synpred305_ChemicalChunker2026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_synpred306_ChemicalChunker2030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred311_ChemicalChunker2138 = new BitSet(new long[]{0x0000004000000000L,0x0800080000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_measurements_in_synpred311_ChemicalChunker2141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_synpred316_ChemicalChunker2190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rrb_in_synpred317_ChemicalChunker2192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lsqb_in_synpred318_ChemicalChunker2194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rsqb_in_synpred319_ChemicalChunker2196 = new BitSet(new long[]{0x0000000000000002L});

}