// $ANTLR 3.2 Sep 23, 2009 14:05:07 uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g 2012-07-16 10:53:10

    package uk.ac.cam.ch.wwmm.pregenerated;
 

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class ChemicalChunkerParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Sentence", "Unmatched", "NounPhrase", "MultipleApparatus", "DissolvePhrase", "VerbPhrase", "CYCLES", "RATIO", "CITATION", "MIXTURE", "PrepPhrase", "TimePhrase", "RolePrepPhrase", "AtmospherePhrase", "TempPhrase", "AMOUNT", "MASS", "PERCENT", "VOLUME", "MOLAR", "PH", "EQUIVALENT", "YIELD", "APPARATUS", "MULTIPLE", "OSCARCM", "MOLECULE", "UNNAMEDMOLECULE", "QUANTITY", "PROCEDURE", "REFERENCETOCOMPOUND", "CaptionLabel", "WS", "TOKEN", "'NNP-LABEL'", "'CD-ALPHANUM'", "'OSCAR-CJ'", "'OSCAR-RN'", "'OSCAR-ASE'", "'TM-UNICODE'", "'CD-UNICODE'", "'JJ-CHEM'", "'JJ-COMPOUND'", "'IN-AS'", "'IN-BEFORE'", "'IN-AFTER'", "'IN-IN'", "'IN-INTO'", "'IN-WITH'", "'IN-WITHOUT'", "'IN-BY'", "'IN-VIA'", "'IN-OF'", "'IN-ON'", "'IN-FOR'", "'IN-FROM'", "'IN-UNDER'", "'IN-OVER'", "'IN-OFF'", "'NN-STATE'", "'NN-TIME'", "'NN-MASS'", "'NN-AMOUNT'", "'NN-MOLAR'", "'NN-ATMOSPHERE'", "'NN-EQ'", "'NN-VOL'", "'NN-CHEMENTITY'", "'NN-TEMP'", "'NN-PH'", "'NN-FLASH'", "'NN-GENERAL'", "'NN-METHOD'", "'NN-PRESSURE'", "'NN-COLUMN'", "'NN-CHROMATOGRAPHY'", "'NN-VACUUM'", "'NN-CYCLE'", "'NN-TIMES'", "'NN-EXAMPLE'", "'OSCAR-CM'", "'VB-USE'", "'VB-CHANGE'", "'VB-SUBMERGE'", "'VB-SUBJECT'", "'NN-ADD'", "'NN-MIXTURE'", "'VB-DILUTE'", "'VB-ADD'", "'VB-CHARGE'", "'VB-CONTAIN'", "'VB-DROP'", "'VB-FILL'", "'VB-SUSPEND'", "'VB-TREAT'", "'VB-APPARATUS'", "'NN-APPARATUS'", "'VB-CONCENTRATE'", "'NN-CONCENTRATE'", "'VB-COOL'", "'VB-DEGASS'", "'VB-DISSOLVE'", "'VB-DRY'", "'NN-DRY'", "'VB-EXTRACT'", "'NN-EXTRACT'", "'VB-FILTER'", "'NN-FILTER'", "'VB-HEAT'", "'VB-INCREASE'", "'VB-IMMERSE'", "'VB-PARTITION'", "'VB-PRECIPITATE'", "'NN-PRECIPITATE'", "'VB-PURIFY'", "'NN-PURIFY'", "'VB-QUENCH'", "'VB-RECOVER'", "'VB-REMOVE'", "'NN-REMOVE'", "'VB-STIR'", "'VB-SYNTHESIZE'", "'NN-SYNTHESIZE'", "'VB-WAIT'", "'VB-WASH'", "'VB-YIELD'", "'NN-YIELD'", "'RB-CONJ'", "'COLON'", "'COMMA'", "'APOST'", "'NEG'", "'DASH'", "'STOP'", "'NN-PERCENT'", "'LSQB'", "'RSQB'", "'NN-IDENTIFIER'", "'DT-THE'", "'-LRB-'", "'-RRB-'", "'CC'", "'CD'", "'DT'", "'EX'", "'FW'", "'IN'", "'JJ'", "'JJR'", "'JJS'", "'LS'", "'MD'", "'NN'", "'NNS'", "'NNP'", "'NNPS'", "'PDT'", "'POS'", "'PRP'", "'PRP$'", "'RB'", "'RBR'", "'RBS'", "'RP'", "'SYM'", "'TO'", "'UH'", "'VB'", "'VBD'", "'VBG'", "'VBN'", "'VBP'", "'VBZ'", "'WDT'", "'WP'", "'WP$'", "'WRB'"
    };
    public static final int DissolvePhrase=8;
    public static final int T__159=159;
    public static final int T__158=158;
    public static final int T__160=160;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int EOF=-1;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int QUANTITY=32;
    public static final int T__161=161;
    public static final int TOKEN=37;
    public static final int T__162=162;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int CYCLES=10;
    public static final int T__92=92;
    public static final int T__148=148;
    public static final int T__147=147;
    public static final int T__90=90;
    public static final int T__149=149;
    public static final int AMOUNT=19;
    public static final int T__154=154;
    public static final int CaptionLabel=35;
    public static final int CITATION=12;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__99=99;
    public static final int T__150=150;
    public static final int T__98=98;
    public static final int T__151=151;
    public static final int T__97=97;
    public static final int T__152=152;
    public static final int T__96=96;
    public static final int T__153=153;
    public static final int T__95=95;
    public static final int T__139=139;
    public static final int T__138=138;
    public static final int T__137=137;
    public static final int T__136=136;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int MultipleApparatus=7;
    public static final int APPARATUS=27;
    public static final int T__141=141;
    public static final int T__85=85;
    public static final int T__142=142;
    public static final int T__84=84;
    public static final int T__87=87;
    public static final int T__140=140;
    public static final int T__86=86;
    public static final int T__145=145;
    public static final int T__89=89;
    public static final int MOLAR=23;
    public static final int TimePhrase=15;
    public static final int T__146=146;
    public static final int T__88=88;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int PrepPhrase=14;
    public static final int T__126=126;
    public static final int T__125=125;
    public static final int T__128=128;
    public static final int T__127=127;
    public static final int WS=36;
    public static final int T__71=71;
    public static final int T__129=129;
    public static final int T__72=72;
    public static final int RATIO=11;
    public static final int T__70=70;
    public static final int PH=24;
    public static final int T__76=76;
    public static final int T__75=75;
    public static final int AtmospherePhrase=17;
    public static final int T__130=130;
    public static final int T__74=74;
    public static final int T__131=131;
    public static final int T__73=73;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__79=79;
    public static final int T__134=134;
    public static final int T__78=78;
    public static final int T__135=135;
    public static final int T__77=77;
    public static final int T__68=68;
    public static final int NounPhrase=6;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int TempPhrase=18;
    public static final int T__65=65;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int VerbPhrase=9;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int T__123=123;
    public static final int T__122=122;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int UNNAMEDMOLECULE=31;
    public static final int REFERENCETOCOMPOUND=34;
    public static final int T__61=61;
    public static final int T__60=60;
    public static final int MULTIPLE=28;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int MOLECULE=30;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__59=59;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int YIELD=26;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int T__112=112;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int Unmatched=5;
    public static final int T__43=43;
    public static final int RolePrepPhrase=16;
    public static final int T__40=40;
    public static final int T__41=41;
    public static final int T__46=46;
    public static final int T__47=47;
    public static final int PERCENT=21;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__180=180;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int EQUIVALENT=25;
    public static final int PROCEDURE=33;
    public static final int T__175=175;
    public static final int MIXTURE=13;
    public static final int T__174=174;
    public static final int T__173=173;
    public static final int T__172=172;
    public static final int T__179=179;
    public static final int T__178=178;
    public static final int T__177=177;
    public static final int T__176=176;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int VOLUME=22;
    public static final int T__171=171;
    public static final int T__170=170;
    public static final int Sentence=4;
    public static final int T__169=169;
    public static final int OSCARCM=29;
    public static final int MASS=20;

    // delegates
    // delegators


        public ChemicalChunkerParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public ChemicalChunkerParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[808+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return ChemicalChunkerParser.tokenNames; }
    public String getGrammarFileName() { return "uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g"; }


    public boolean isAtTokenPositionZero(TokenStream stream){
    	return stream.index()==0;
    }

    public boolean followedByVBDorVBZthenVBYIELDed(TokenStream stream){
    	String nextTokenTypeStr = stream.LT(1).getText();
    	if ("VBD".equals(nextTokenTypeStr) || "VBZ".equals(nextTokenTypeStr)){
    		String twoAheadTypeStr = stream.LT(3).getText();
    		if ("VB-YIELD".equals(twoAheadTypeStr)){
    			String twoAheadTokenText = stream.LT(4).getText();
    			if (twoAheadTokenText !=null && twoAheadTokenText.toLowerCase().endsWith("ed")){
    				return true;
    			}
    		}
    	}
    	return false;
    }

    public boolean cdHasRoleOtherThanIdentifier(TokenStream stream){
    	String nextTokenTypeStr = stream.LT(1).getText();
    	if (isQuantityUnit(nextTokenTypeStr)){
    		return true;//quantity
    	}
    	if ("NN-TIMES".equals(nextTokenTypeStr)){
    		return true;//e.g. washed with the compound 3 times
    	}
    	if ("COLON".equals(nextTokenTypeStr)){
    		String twoAheadTypeStr = stream.LT(3).getText();
    		if ("CD".equals(twoAheadTypeStr)){
    			String threeAheadTypeStr = stream.LT(5).getText();
    			if (!isQuantityUnit(threeAheadTypeStr)){
    				return true;//ratio
    			}
    		}
    	}
    	return false;
    }

    public boolean followedByQuantityUnits(TokenStream stream){
    	String nextTokenTypeStr = stream.LT(1).getText();
    	return isQuantityUnit(nextTokenTypeStr);
    }

    public boolean isQuantityUnit(String tokenType){
    	return ("NN-MOLAR".equals(tokenType) || "NN-AMOUNT".equals(tokenType) ||
    			"NN-MASS".equals(tokenType) || "NN-VOL".equals(tokenType) ||
    			"NN-EQ".equals(tokenType) || "NN-PERCENT".equals(tokenType));
    }

    public boolean precededByProduct(TokenStream stream){
    	Token previousToken = stream.LT(-1);
    	if (previousToken !=null && previousToken.getText().equalsIgnoreCase("product")){
    		return true;
    	}
    	return false;
    }

    public boolean suitableVbYieldOrSynthesizeForReference(TokenStream stream){
    	Token nextTokenType = stream.LT(1);
    	if ("VB-YIELD".equals(nextTokenType.getText()) || "VB-SYNTHESIZE".equals(nextTokenType.getText())){
    		String nextTokenText = stream.LT(2).getText();
    		if (nextTokenText !=null && nextTokenText.toLowerCase().endsWith("ed")){
    			return true;
    		}
    	}
    	return false;
    }

    public boolean nextIsSemiColon(TokenStream stream){
    	Token nextTokenType = stream.LT(1);
    	if ("STOP".equals(nextTokenType.getText())){
    		String nextTokenText = stream.LT(2).getText();
    		if (nextTokenText !=null && nextTokenText.equals(";")){
    			return true;
    		}
    	}
    	return false;
    }

    public boolean notFollowedByBracketedYear(TokenStream stream){
    	Token nextTokenType = stream.LT(1);
    	if ("-LRB-".equals(nextTokenType.getText())){
    		Token nextNextTokenType = stream.LT(3);
    		if ("CD".equals(nextNextTokenType.getText())){
    			String nextNextTokenText = stream.LT(4).getText();
    			if (nextNextTokenText !=null){
    				try{
    					int i = Integer.parseInt(nextNextTokenText);
    					if (i >1000){
    						return false;
    					}
    				}
    				catch (NumberFormatException e) {
    				}
    			}
    		}
    	}
    	return true;
    }


    public static class document_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "document"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:158:1: document : ( sentence )+ -> ( ^( Sentence sentence ) )+ ;
    public final ChemicalChunkerParser.document_return document() throws RecognitionException {
        ChemicalChunkerParser.document_return retval = new ChemicalChunkerParser.document_return();
        retval.start = input.LT(1);
        int document_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.sentence_return sentence1 = null;


        RewriteRuleSubtreeStream stream_sentence=new RewriteRuleSubtreeStream(adaptor,"rule sentence");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:158:9: ( ( sentence )+ -> ( ^( Sentence sentence ) )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:158:11: ( sentence )+
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:158:11: ( sentence )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                switch ( input.LA(1) ) {
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 117:
                case 118:
                case 119:
                case 120:
                case 121:
                case 122:
                case 123:
                case 124:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 130:
                case 131:
                case 132:
                case 133:
                case 134:
                case 135:
                case 136:
                case 138:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 158:
                case 159:
                case 160:
                case 161:
                case 162:
                case 163:
                case 164:
                case 165:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 180:
                    {
                    alt1=1;
                    }
                    break;

                }

                switch (alt1) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: sentence
            	    {
            	    pushFollow(FOLLOW_sentence_in_document202_static.FOLLOW_sentence_in_document202);
            	    sentence1=sentence();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sentence.add(sentence1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);



            // AST REWRITE
            // elements: sentence
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 158:20: -> ( ^( Sentence sentence ) )+
            {
                if ( !(stream_sentence.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_sentence.hasNext() ) {
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:158:23: ^( Sentence sentence )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Sentence, "Sentence"), root_1);

                    adaptor.addChild(root_1, stream_sentence.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_sentence.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, document_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "document"

    public static class sentence_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentence"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:160:1: sentence : ( procedureNounPhrase | ( sentenceStructure | unmatchedPhrase )+ ) ( stop )* ;
    public final ChemicalChunkerParser.sentence_return sentence() throws RecognitionException {
        ChemicalChunkerParser.sentence_return retval = new ChemicalChunkerParser.sentence_return();
        retval.start = input.LT(1);
        int sentence_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.procedureNounPhrase_return procedureNounPhrase2 = null;

        ChemicalChunkerParser.sentenceStructure_return sentenceStructure3 = null;

        ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase4 = null;

        ChemicalChunkerParser.stop_return stop5 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:160:9: ( ( procedureNounPhrase | ( sentenceStructure | unmatchedPhrase )+ ) ( stop )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:160:11: ( procedureNounPhrase | ( sentenceStructure | unmatchedPhrase )+ ) ( stop )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:160:11: ( procedureNounPhrase | ( sentenceStructure | unmatchedPhrase )+ )
            int alt3=2;
            alt3 = dfa3.predict(input);
            switch (alt3) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:160:12: procedureNounPhrase
                    {
                    pushFollow(FOLLOW_procedureNounPhrase_in_sentence222_static.FOLLOW_procedureNounPhrase_in_sentence222);
                    procedureNounPhrase2=procedureNounPhrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureNounPhrase2.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:160:34: ( sentenceStructure | unmatchedPhrase )+
                    {
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:160:34: ( sentenceStructure | unmatchedPhrase )+
                    int cnt2=0;
                    loop2:
                    do {
                        int alt2=3;
                        alt2 = dfa2.predict(input);
                        switch (alt2) {
                    	case 1 :
                    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:160:35: sentenceStructure
                    	    {
                    	    pushFollow(FOLLOW_sentenceStructure_in_sentence227_static.FOLLOW_sentenceStructure_in_sentence227);
                    	    sentenceStructure3=sentenceStructure();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentenceStructure3.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:160:53: unmatchedPhrase
                    	    {
                    	    pushFollow(FOLLOW_unmatchedPhrase_in_sentence229_static.FOLLOW_unmatchedPhrase_in_sentence229);
                    	    unmatchedPhrase4=unmatchedPhrase();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unmatchedPhrase4.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt2 >= 1 ) break loop2;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(2, input);
                                throw eee;
                        }
                        cnt2++;
                    } while (true);


                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:160:72: ( stop )*
            loop4:
            do {
                int alt4=2;
                switch ( input.LA(1) ) {
                case 137:
                    {
                    alt4=1;
                    }
                    break;

                }

                switch (alt4) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_sentence234_static.FOLLOW_stop_in_sentence234);
            	    stop5=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop5.getTree());

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, sentence_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sentence"

    public static class sentenceStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentenceStructure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:1: sentenceStructure : ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )* ;
    public final ChemicalChunkerParser.sentenceStructure_return sentenceStructure() throws RecognitionException {
        ChemicalChunkerParser.sentenceStructure_return retval = new ChemicalChunkerParser.sentenceStructure_return();
        retval.start = input.LT(1);
        int sentenceStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase6 = null;

        ChemicalChunkerParser.verbphrase_return verbphrase7 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase8 = null;

        ChemicalChunkerParser.prepphraseAfter_return prepphraseAfter9 = null;

        ChemicalChunkerParser.advAdj_return advAdj10 = null;

        ChemicalChunkerParser.colon_return colon11 = null;

        ChemicalChunkerParser.conjunction_return conjunction12 = null;

        ChemicalChunkerParser.rbconj_return rbconj13 = null;

        ChemicalChunkerParser.comma_return comma14 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:18: ( ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+
            int cnt5=0;
            loop5:
            do {
                int alt5=5;
                alt5 = dfa5.predict(input);
                switch (alt5) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:22: nounphrase
            	    {
            	    pushFollow(FOLLOW_nounphrase_in_sentenceStructure244_static.FOLLOW_nounphrase_in_sentenceStructure244);
            	    nounphrase6=nounphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphrase6.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:33: verbphrase
            	    {
            	    pushFollow(FOLLOW_verbphrase_in_sentenceStructure246_static.FOLLOW_verbphrase_in_sentenceStructure246);
            	    verbphrase7=verbphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verbphrase7.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:44: prepphrase
            	    {
            	    pushFollow(FOLLOW_prepphrase_in_sentenceStructure248_static.FOLLOW_prepphrase_in_sentenceStructure248);
            	    prepphrase8=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase8.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:55: prepphraseAfter
            	    {
            	    pushFollow(FOLLOW_prepphraseAfter_in_sentenceStructure250_static.FOLLOW_prepphraseAfter_in_sentenceStructure250);
            	    prepphraseAfter9=prepphraseAfter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAfter9.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt5 >= 1 ) break loop5;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(5, input);
                        throw eee;
                }
                cnt5++;
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:73: ( advAdj | colon )*
            loop6:
            do {
                int alt6=3;
                alt6 = dfa6.predict(input);
                switch (alt6) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:74: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_sentenceStructure255_static.FOLLOW_advAdj_in_sentenceStructure255);
            	    advAdj10=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj10.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:81: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_sentenceStructure257_static.FOLLOW_colon_in_sentenceStructure257);
            	    colon11=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon11.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:89: ( conjunction | rbconj | comma )*
            loop7:
            do {
                int alt7=4;
                alt7 = dfa7.predict(input);
                switch (alt7) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:90: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_sentenceStructure262_static.FOLLOW_conjunction_in_sentenceStructure262);
            	    conjunction12=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction12.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:102: rbconj
            	    {
            	    pushFollow(FOLLOW_rbconj_in_sentenceStructure264_static.FOLLOW_rbconj_in_sentenceStructure264);
            	    rbconj13=rbconj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj13.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:109: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_sentenceStructure266_static.FOLLOW_comma_in_sentenceStructure266);
            	    comma14=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma14.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, sentenceStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sentenceStructure"

    public static class unmatchedPhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedPhrase"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:164:1: unmatchedPhrase : unmatchedToken -> ^( Unmatched unmatchedToken ) ;
    public final ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase() throws RecognitionException {
        ChemicalChunkerParser.unmatchedPhrase_return retval = new ChemicalChunkerParser.unmatchedPhrase_return();
        retval.start = input.LT(1);
        int unmatchedPhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unmatchedToken_return unmatchedToken15 = null;


        RewriteRuleSubtreeStream stream_unmatchedToken=new RewriteRuleSubtreeStream(adaptor,"rule unmatchedToken");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:165:2: ( unmatchedToken -> ^( Unmatched unmatchedToken ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:165:5: unmatchedToken
            {
            pushFollow(FOLLOW_unmatchedToken_in_unmatchedPhrase278_static.FOLLOW_unmatchedToken_in_unmatchedPhrase278);
            unmatchedToken15=unmatchedToken();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unmatchedToken.add(unmatchedToken15.getTree());


            // AST REWRITE
            // elements: unmatchedToken
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 165:20: -> ^( Unmatched unmatchedToken )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:165:23: ^( Unmatched unmatchedToken )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Unmatched, "Unmatched"), root_1);

                adaptor.addChild(root_1, stream_unmatchedToken.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, unmatchedPhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unmatchedPhrase"

    public static class unmatchedToken_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedToken"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:167:1: unmatchedToken : ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | percentsign | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier ) ;
    public final ChemicalChunkerParser.unmatchedToken_return unmatchedToken() throws RecognitionException {
        ChemicalChunkerParser.unmatchedToken_return retval = new ChemicalChunkerParser.unmatchedToken_return();
        retval.start = input.LT(1);
        int unmatchedToken_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric16 = null;

        ChemicalChunkerParser.advAdj_return advAdj17 = null;

        ChemicalChunkerParser.tmunicode_return tmunicode18 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode19 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp20 = null;

        ChemicalChunkerParser.inAll_return inAll21 = null;

        ChemicalChunkerParser.nnexample_return nnexample22 = null;

        ChemicalChunkerParser.nnstate_return nnstate23 = null;

        ChemicalChunkerParser.nntime_return nntime24 = null;

        ChemicalChunkerParser.nnmass_return nnmass25 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar26 = null;

        ChemicalChunkerParser.nnamount_return nnamount27 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere28 = null;

        ChemicalChunkerParser.nneq_return nneq29 = null;

        ChemicalChunkerParser.nnvol_return nnvol30 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity31 = null;

        ChemicalChunkerParser.nntemp_return nntemp32 = null;

        ChemicalChunkerParser.nnph_return nnph33 = null;

        ChemicalChunkerParser.nnflash_return nnflash34 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral35 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod36 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure37 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn38 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography39 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum40 = null;

        ChemicalChunkerParser.nncycle_return nncycle41 = null;

        ChemicalChunkerParser.nntimes_return nntimes42 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm43 = null;

        ChemicalChunkerParser.oscarase_return oscarase44 = null;

        ChemicalChunkerParser.verb_return verb45 = null;

        ChemicalChunkerParser.nnadd_return nnadd46 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture47 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus48 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate49 = null;

        ChemicalChunkerParser.nndry_return nndry50 = null;

        ChemicalChunkerParser.nnextract_return nnextract51 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter52 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate53 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify54 = null;

        ChemicalChunkerParser.nnremove_return nnremove55 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize56 = null;

        ChemicalChunkerParser.nnyield_return nnyield57 = null;

        ChemicalChunkerParser.colon_return colon58 = null;

        ChemicalChunkerParser.apost_return apost59 = null;

        ChemicalChunkerParser.neg_return neg60 = null;

        ChemicalChunkerParser.dash_return dash61 = null;

        ChemicalChunkerParser.percentsign_return percentsign62 = null;

        ChemicalChunkerParser.lsqb_return lsqb63 = null;

        ChemicalChunkerParser.rsqb_return rsqb64 = null;

        ChemicalChunkerParser.lrb_return lrb65 = null;

        ChemicalChunkerParser.rrb_return rrb66 = null;

        ChemicalChunkerParser.cc_return cc67 = null;

        ChemicalChunkerParser.dt_return dt68 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE69 = null;

        ChemicalChunkerParser.fw_return fw70 = null;

        ChemicalChunkerParser.md_return md71 = null;

        ChemicalChunkerParser.nn_return nn72 = null;

        ChemicalChunkerParser.nns_return nns73 = null;

        ChemicalChunkerParser.nnp_return nnp74 = null;

        ChemicalChunkerParser.prp_return prp75 = null;

        ChemicalChunkerParser.prp_poss_return prp_poss76 = null;

        ChemicalChunkerParser.rbconj_return rbconj77 = null;

        ChemicalChunkerParser.sym_return sym78 = null;

        ChemicalChunkerParser.uh_return uh79 = null;

        ChemicalChunkerParser.clause_return clause80 = null;

        ChemicalChunkerParser.comma_return comma81 = null;

        ChemicalChunkerParser.ls_return ls82 = null;

        ChemicalChunkerParser.nnps_return nnps83 = null;

        ChemicalChunkerParser.pos_return pos84 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier85 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:168:2: ( ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | percentsign | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:168:4: ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | percentsign | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier )
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:168:4: ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | percentsign | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier )
            int alt8=70;
            switch ( input.LA(1) ) {
            case 39:
            case 146:
                {
                alt8=1;
                }
                break;
            case 40:
            case 41:
            case 45:
            case 151:
            case 152:
            case 153:
            case 164:
            case 165:
            case 166:
            case 167:
                {
                alt8=2;
                }
                break;
            case 43:
                {
                alt8=3;
                }
                break;
            case 44:
                {
                alt8=4;
                }
                break;
            case 46:
                {
                alt8=5;
                }
                break;
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 150:
            case 169:
                {
                alt8=6;
                }
                break;
            case 83:
                {
                alt8=7;
                }
                break;
            case 63:
                {
                alt8=8;
                }
                break;
            case 64:
                {
                alt8=9;
                }
                break;
            case 65:
                {
                alt8=10;
                }
                break;
            case 67:
                {
                alt8=11;
                }
                break;
            case 66:
                {
                alt8=12;
                }
                break;
            case 68:
                {
                alt8=13;
                }
                break;
            case 69:
                {
                alt8=14;
                }
                break;
            case 70:
                {
                alt8=15;
                }
                break;
            case 71:
                {
                alt8=16;
                }
                break;
            case 72:
                {
                alt8=17;
                }
                break;
            case 73:
                {
                alt8=18;
                }
                break;
            case 74:
                {
                alt8=19;
                }
                break;
            case 75:
                {
                alt8=20;
                }
                break;
            case 76:
                {
                alt8=21;
                }
                break;
            case 77:
                {
                alt8=22;
                }
                break;
            case 78:
                {
                alt8=23;
                }
                break;
            case 79:
                {
                alt8=24;
                }
                break;
            case 80:
                {
                alt8=25;
                }
                break;
            case 81:
                {
                alt8=26;
                }
                break;
            case 82:
                {
                alt8=27;
                }
                break;
            case 84:
                {
                alt8=28;
                }
                break;
            case 42:
                {
                alt8=29;
                }
                break;
            case 85:
            case 86:
            case 87:
            case 88:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 110:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 118:
            case 120:
            case 121:
            case 122:
            case 124:
            case 125:
            case 127:
            case 128:
            case 129:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
                {
                alt8=30;
                }
                break;
            case 89:
                {
                alt8=31;
                }
                break;
            case 90:
                {
                alt8=32;
                }
                break;
            case 100:
                {
                alt8=33;
                }
                break;
            case 102:
                {
                alt8=34;
                }
                break;
            case 107:
                {
                alt8=35;
                }
                break;
            case 109:
                {
                alt8=36;
                }
                break;
            case 111:
                {
                alt8=37;
                }
                break;
            case 117:
                {
                alt8=38;
                }
                break;
            case 119:
                {
                alt8=39;
                }
                break;
            case 123:
                {
                alt8=40;
                }
                break;
            case 126:
                {
                alt8=41;
                }
                break;
            case 130:
                {
                alt8=42;
                }
                break;
            case 132:
                {
                alt8=43;
                }
                break;
            case 134:
                {
                alt8=44;
                }
                break;
            case 135:
                {
                alt8=45;
                }
                break;
            case 136:
                {
                alt8=46;
                }
                break;
            case 138:
                {
                alt8=47;
                }
                break;
            case 139:
                {
                alt8=48;
                }
                break;
            case 140:
                {
                alt8=49;
                }
                break;
            case 143:
                {
                alt8=50;
                }
                break;
            case 144:
                {
                alt8=51;
                }
                break;
            case 145:
                {
                alt8=52;
                }
                break;
            case 147:
                {
                alt8=53;
                }
                break;
            case 142:
                {
                alt8=54;
                }
                break;
            case 149:
                {
                alt8=55;
                }
                break;
            case 155:
                {
                alt8=56;
                }
                break;
            case 156:
                {
                alt8=57;
                }
                break;
            case 157:
                {
                alt8=58;
                }
                break;
            case 158:
                {
                alt8=59;
                }
                break;
            case 162:
                {
                alt8=60;
                }
                break;
            case 163:
                {
                alt8=61;
                }
                break;
            case 131:
                {
                alt8=62;
                }
                break;
            case 168:
                {
                alt8=63;
                }
                break;
            case 170:
                {
                alt8=64;
                }
                break;
            case 148:
            case 160:
            case 177:
            case 178:
            case 179:
            case 180:
                {
                alt8=65;
                }
                break;
            case 133:
                {
                alt8=66;
                }
                break;
            case 154:
                {
                alt8=67;
                }
                break;
            case 159:
                {
                alt8=68;
                }
                break;
            case 161:
                {
                alt8=69;
                }
                break;
            case 141:
                {
                alt8=70;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;
            }

            switch (alt8) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:168:5: numeric
                    {
                    pushFollow(FOLLOW_numeric_in_unmatchedToken297_static.FOLLOW_numeric_in_unmatchedToken297);
                    numeric16=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric16.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:168:13: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_unmatchedToken299_static.FOLLOW_advAdj_in_unmatchedToken299);
                    advAdj17=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj17.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:168:20: tmunicode
                    {
                    pushFollow(FOLLOW_tmunicode_in_unmatchedToken301_static.FOLLOW_tmunicode_in_unmatchedToken301);
                    tmunicode18=tmunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tmunicode18.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:168:30: cdunicode
                    {
                    pushFollow(FOLLOW_cdunicode_in_unmatchedToken303_static.FOLLOW_cdunicode_in_unmatchedToken303);
                    cdunicode19=cdunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdunicode19.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:168:40: jjcomp
                    {
                    pushFollow(FOLLOW_jjcomp_in_unmatchedToken305_static.FOLLOW_jjcomp_in_unmatchedToken305);
                    jjcomp20=jjcomp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp20.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:168:47: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_unmatchedToken307_static.FOLLOW_inAll_in_unmatchedToken307);
                    inAll21=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll21.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:169:2: nnexample
                    {
                    pushFollow(FOLLOW_nnexample_in_unmatchedToken311_static.FOLLOW_nnexample_in_unmatchedToken311);
                    nnexample22=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample22.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:169:12: nnstate
                    {
                    pushFollow(FOLLOW_nnstate_in_unmatchedToken313_static.FOLLOW_nnstate_in_unmatchedToken313);
                    nnstate23=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate23.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:169:20: nntime
                    {
                    pushFollow(FOLLOW_nntime_in_unmatchedToken315_static.FOLLOW_nntime_in_unmatchedToken315);
                    nntime24=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime24.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:169:27: nnmass
                    {
                    pushFollow(FOLLOW_nnmass_in_unmatchedToken317_static.FOLLOW_nnmass_in_unmatchedToken317);
                    nnmass25=nnmass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmass25.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:169:34: nnmolar
                    {
                    pushFollow(FOLLOW_nnmolar_in_unmatchedToken319_static.FOLLOW_nnmolar_in_unmatchedToken319);
                    nnmolar26=nnmolar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmolar26.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:169:42: nnamount
                    {
                    pushFollow(FOLLOW_nnamount_in_unmatchedToken321_static.FOLLOW_nnamount_in_unmatchedToken321);
                    nnamount27=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount27.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:169:51: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_unmatchedToken323_static.FOLLOW_nnatmosphere_in_unmatchedToken323);
                    nnatmosphere28=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere28.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:169:64: nneq
                    {
                    pushFollow(FOLLOW_nneq_in_unmatchedToken325_static.FOLLOW_nneq_in_unmatchedToken325);
                    nneq29=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq29.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:169:69: nnvol
                    {
                    pushFollow(FOLLOW_nnvol_in_unmatchedToken327_static.FOLLOW_nnvol_in_unmatchedToken327);
                    nnvol30=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol30.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:169:75: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_unmatchedToken329_static.FOLLOW_nnchementity_in_unmatchedToken329);
                    nnchementity31=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity31.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:169:88: nntemp
                    {
                    pushFollow(FOLLOW_nntemp_in_unmatchedToken331_static.FOLLOW_nntemp_in_unmatchedToken331);
                    nntemp32=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp32.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:169:95: nnph
                    {
                    pushFollow(FOLLOW_nnph_in_unmatchedToken333_static.FOLLOW_nnph_in_unmatchedToken333);
                    nnph33=nnph();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnph33.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:169:100: nnflash
                    {
                    pushFollow(FOLLOW_nnflash_in_unmatchedToken335_static.FOLLOW_nnflash_in_unmatchedToken335);
                    nnflash34=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash34.getTree());

                    }
                    break;
                case 20 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:169:108: nngeneral
                    {
                    pushFollow(FOLLOW_nngeneral_in_unmatchedToken337_static.FOLLOW_nngeneral_in_unmatchedToken337);
                    nngeneral35=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral35.getTree());

                    }
                    break;
                case 21 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:169:118: nnmethod
                    {
                    pushFollow(FOLLOW_nnmethod_in_unmatchedToken339_static.FOLLOW_nnmethod_in_unmatchedToken339);
                    nnmethod36=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod36.getTree());

                    }
                    break;
                case 22 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:169:127: nnpressure
                    {
                    pushFollow(FOLLOW_nnpressure_in_unmatchedToken341_static.FOLLOW_nnpressure_in_unmatchedToken341);
                    nnpressure37=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure37.getTree());

                    }
                    break;
                case 23 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:169:138: nncolumn
                    {
                    pushFollow(FOLLOW_nncolumn_in_unmatchedToken343_static.FOLLOW_nncolumn_in_unmatchedToken343);
                    nncolumn38=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn38.getTree());

                    }
                    break;
                case 24 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:169:147: nnchromatography
                    {
                    pushFollow(FOLLOW_nnchromatography_in_unmatchedToken345_static.FOLLOW_nnchromatography_in_unmatchedToken345);
                    nnchromatography39=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography39.getTree());

                    }
                    break;
                case 25 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:169:164: nnvacuum
                    {
                    pushFollow(FOLLOW_nnvacuum_in_unmatchedToken347_static.FOLLOW_nnvacuum_in_unmatchedToken347);
                    nnvacuum40=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum40.getTree());

                    }
                    break;
                case 26 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:169:173: nncycle
                    {
                    pushFollow(FOLLOW_nncycle_in_unmatchedToken349_static.FOLLOW_nncycle_in_unmatchedToken349);
                    nncycle41=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle41.getTree());

                    }
                    break;
                case 27 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:169:181: nntimes
                    {
                    pushFollow(FOLLOW_nntimes_in_unmatchedToken351_static.FOLLOW_nntimes_in_unmatchedToken351);
                    nntimes42=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes42.getTree());

                    }
                    break;
                case 28 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:170:2: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_unmatchedToken355_static.FOLLOW_oscarcm_in_unmatchedToken355);
                    oscarcm43=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm43.getTree());

                    }
                    break;
                case 29 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:170:10: oscarase
                    {
                    pushFollow(FOLLOW_oscarase_in_unmatchedToken357_static.FOLLOW_oscarase_in_unmatchedToken357);
                    oscarase44=oscarase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase44.getTree());

                    }
                    break;
                case 30 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:170:19: verb
                    {
                    pushFollow(FOLLOW_verb_in_unmatchedToken359_static.FOLLOW_verb_in_unmatchedToken359);
                    verb45=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb45.getTree());

                    }
                    break;
                case 31 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:170:24: nnadd
                    {
                    pushFollow(FOLLOW_nnadd_in_unmatchedToken361_static.FOLLOW_nnadd_in_unmatchedToken361);
                    nnadd46=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd46.getTree());

                    }
                    break;
                case 32 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:170:30: nnmixture
                    {
                    pushFollow(FOLLOW_nnmixture_in_unmatchedToken363_static.FOLLOW_nnmixture_in_unmatchedToken363);
                    nnmixture47=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture47.getTree());

                    }
                    break;
                case 33 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:170:40: nnapparatus
                    {
                    pushFollow(FOLLOW_nnapparatus_in_unmatchedToken365_static.FOLLOW_nnapparatus_in_unmatchedToken365);
                    nnapparatus48=nnapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus48.getTree());

                    }
                    break;
                case 34 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:170:52: nnconcentrate
                    {
                    pushFollow(FOLLOW_nnconcentrate_in_unmatchedToken367_static.FOLLOW_nnconcentrate_in_unmatchedToken367);
                    nnconcentrate49=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate49.getTree());

                    }
                    break;
                case 35 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:170:66: nndry
                    {
                    pushFollow(FOLLOW_nndry_in_unmatchedToken369_static.FOLLOW_nndry_in_unmatchedToken369);
                    nndry50=nndry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nndry50.getTree());

                    }
                    break;
                case 36 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:170:72: nnextract
                    {
                    pushFollow(FOLLOW_nnextract_in_unmatchedToken371_static.FOLLOW_nnextract_in_unmatchedToken371);
                    nnextract51=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract51.getTree());

                    }
                    break;
                case 37 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:170:82: nnfilter
                    {
                    pushFollow(FOLLOW_nnfilter_in_unmatchedToken373_static.FOLLOW_nnfilter_in_unmatchedToken373);
                    nnfilter52=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter52.getTree());

                    }
                    break;
                case 38 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:170:91: nnprecipitate
                    {
                    pushFollow(FOLLOW_nnprecipitate_in_unmatchedToken375_static.FOLLOW_nnprecipitate_in_unmatchedToken375);
                    nnprecipitate53=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate53.getTree());

                    }
                    break;
                case 39 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:170:105: nnpurify
                    {
                    pushFollow(FOLLOW_nnpurify_in_unmatchedToken377_static.FOLLOW_nnpurify_in_unmatchedToken377);
                    nnpurify54=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify54.getTree());

                    }
                    break;
                case 40 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:170:114: nnremove
                    {
                    pushFollow(FOLLOW_nnremove_in_unmatchedToken379_static.FOLLOW_nnremove_in_unmatchedToken379);
                    nnremove55=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove55.getTree());

                    }
                    break;
                case 41 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:170:123: nnsynthesize
                    {
                    pushFollow(FOLLOW_nnsynthesize_in_unmatchedToken381_static.FOLLOW_nnsynthesize_in_unmatchedToken381);
                    nnsynthesize56=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize56.getTree());

                    }
                    break;
                case 42 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:170:136: nnyield
                    {
                    pushFollow(FOLLOW_nnyield_in_unmatchedToken383_static.FOLLOW_nnyield_in_unmatchedToken383);
                    nnyield57=nnyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield57.getTree());

                    }
                    break;
                case 43 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:170:144: colon
                    {
                    pushFollow(FOLLOW_colon_in_unmatchedToken385_static.FOLLOW_colon_in_unmatchedToken385);
                    colon58=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon58.getTree());

                    }
                    break;
                case 44 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:170:150: apost
                    {
                    pushFollow(FOLLOW_apost_in_unmatchedToken387_static.FOLLOW_apost_in_unmatchedToken387);
                    apost59=apost();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apost59.getTree());

                    }
                    break;
                case 45 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:170:156: neg
                    {
                    pushFollow(FOLLOW_neg_in_unmatchedToken389_static.FOLLOW_neg_in_unmatchedToken389);
                    neg60=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg60.getTree());

                    }
                    break;
                case 46 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:170:160: dash
                    {
                    pushFollow(FOLLOW_dash_in_unmatchedToken391_static.FOLLOW_dash_in_unmatchedToken391);
                    dash61=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash61.getTree());

                    }
                    break;
                case 47 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:170:165: percentsign
                    {
                    pushFollow(FOLLOW_percentsign_in_unmatchedToken393_static.FOLLOW_percentsign_in_unmatchedToken393);
                    percentsign62=percentsign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percentsign62.getTree());

                    }
                    break;
                case 48 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:170:177: lsqb
                    {
                    pushFollow(FOLLOW_lsqb_in_unmatchedToken395_static.FOLLOW_lsqb_in_unmatchedToken395);
                    lsqb63=lsqb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb63.getTree());

                    }
                    break;
                case 49 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:170:182: rsqb
                    {
                    pushFollow(FOLLOW_rsqb_in_unmatchedToken397_static.FOLLOW_rsqb_in_unmatchedToken397);
                    rsqb64=rsqb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb64.getTree());

                    }
                    break;
                case 50 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:170:187: lrb
                    {
                    pushFollow(FOLLOW_lrb_in_unmatchedToken399_static.FOLLOW_lrb_in_unmatchedToken399);
                    lrb65=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb65.getTree());

                    }
                    break;
                case 51 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:170:191: rrb
                    {
                    pushFollow(FOLLOW_rrb_in_unmatchedToken401_static.FOLLOW_rrb_in_unmatchedToken401);
                    rrb66=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb66.getTree());

                    }
                    break;
                case 52 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:2: cc
                    {
                    pushFollow(FOLLOW_cc_in_unmatchedToken405_static.FOLLOW_cc_in_unmatchedToken405);
                    cc67=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc67.getTree());

                    }
                    break;
                case 53 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:5: dt
                    {
                    pushFollow(FOLLOW_dt_in_unmatchedToken407_static.FOLLOW_dt_in_unmatchedToken407);
                    dt68=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt68.getTree());

                    }
                    break;
                case 54 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:8: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_unmatchedToken409_static.FOLLOW_dtTHE_in_unmatchedToken409);
                    dtTHE69=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE69.getTree());

                    }
                    break;
                case 55 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:14: fw
                    {
                    pushFollow(FOLLOW_fw_in_unmatchedToken411_static.FOLLOW_fw_in_unmatchedToken411);
                    fw70=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw70.getTree());

                    }
                    break;
                case 56 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:17: md
                    {
                    pushFollow(FOLLOW_md_in_unmatchedToken413_static.FOLLOW_md_in_unmatchedToken413);
                    md71=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md71.getTree());

                    }
                    break;
                case 57 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:20: nn
                    {
                    pushFollow(FOLLOW_nn_in_unmatchedToken415_static.FOLLOW_nn_in_unmatchedToken415);
                    nn72=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn72.getTree());

                    }
                    break;
                case 58 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:23: nns
                    {
                    pushFollow(FOLLOW_nns_in_unmatchedToken417_static.FOLLOW_nns_in_unmatchedToken417);
                    nns73=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns73.getTree());

                    }
                    break;
                case 59 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:27: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_unmatchedToken419_static.FOLLOW_nnp_in_unmatchedToken419);
                    nnp74=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp74.getTree());

                    }
                    break;
                case 60 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:31: prp
                    {
                    pushFollow(FOLLOW_prp_in_unmatchedToken421_static.FOLLOW_prp_in_unmatchedToken421);
                    prp75=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp75.getTree());

                    }
                    break;
                case 61 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:35: prp_poss
                    {
                    pushFollow(FOLLOW_prp_poss_in_unmatchedToken423_static.FOLLOW_prp_poss_in_unmatchedToken423);
                    prp_poss76=prp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp_poss76.getTree());

                    }
                    break;
                case 62 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:44: rbconj
                    {
                    pushFollow(FOLLOW_rbconj_in_unmatchedToken425_static.FOLLOW_rbconj_in_unmatchedToken425);
                    rbconj77=rbconj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj77.getTree());

                    }
                    break;
                case 63 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:51: sym
                    {
                    pushFollow(FOLLOW_sym_in_unmatchedToken427_static.FOLLOW_sym_in_unmatchedToken427);
                    sym78=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym78.getTree());

                    }
                    break;
                case 64 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:55: uh
                    {
                    pushFollow(FOLLOW_uh_in_unmatchedToken429_static.FOLLOW_uh_in_unmatchedToken429);
                    uh79=uh();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, uh79.getTree());

                    }
                    break;
                case 65 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:58: clause
                    {
                    pushFollow(FOLLOW_clause_in_unmatchedToken431_static.FOLLOW_clause_in_unmatchedToken431);
                    clause80=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause80.getTree());

                    }
                    break;
                case 66 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:65: comma
                    {
                    pushFollow(FOLLOW_comma_in_unmatchedToken433_static.FOLLOW_comma_in_unmatchedToken433);
                    comma81=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma81.getTree());

                    }
                    break;
                case 67 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:71: ls
                    {
                    pushFollow(FOLLOW_ls_in_unmatchedToken435_static.FOLLOW_ls_in_unmatchedToken435);
                    ls82=ls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ls82.getTree());

                    }
                    break;
                case 68 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:74: nnps
                    {
                    pushFollow(FOLLOW_nnps_in_unmatchedToken437_static.FOLLOW_nnps_in_unmatchedToken437);
                    nnps83=nnps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnps83.getTree());

                    }
                    break;
                case 69 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:79: pos
                    {
                    pushFollow(FOLLOW_pos_in_unmatchedToken439_static.FOLLOW_pos_in_unmatchedToken439);
                    pos84=pos();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pos84.getTree());

                    }
                    break;
                case 70 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:83: nnidentifier
                    {
                    pushFollow(FOLLOW_nnidentifier_in_unmatchedToken441_static.FOLLOW_nnidentifier_in_unmatchedToken441);
                    nnidentifier85=nnidentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnidentifier85.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, unmatchedToken_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unmatchedToken"

    public static class procedureNounPhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedureNounPhrase"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:1: procedureNounPhrase : {...}? headingProcedure -> ^( NounPhrase headingProcedure ) ;
    public final ChemicalChunkerParser.procedureNounPhrase_return procedureNounPhrase() throws RecognitionException {
        ChemicalChunkerParser.procedureNounPhrase_return retval = new ChemicalChunkerParser.procedureNounPhrase_return();
        retval.start = input.LT(1);
        int procedureNounPhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.headingProcedure_return headingProcedure86 = null;


        RewriteRuleSubtreeStream stream_headingProcedure=new RewriteRuleSubtreeStream(adaptor,"rule headingProcedure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:174:2: ({...}? headingProcedure -> ^( NounPhrase headingProcedure ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:174:4: {...}? headingProcedure
            {
            if ( !((isAtTokenPositionZero(input))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "procedureNounPhrase", "isAtTokenPositionZero(input)");
            }
            pushFollow(FOLLOW_headingProcedure_in_procedureNounPhrase454_static.FOLLOW_headingProcedure_in_procedureNounPhrase454);
            headingProcedure86=headingProcedure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_headingProcedure.add(headingProcedure86.getTree());


            // AST REWRITE
            // elements: headingProcedure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 174:54: -> ^( NounPhrase headingProcedure )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:174:57: ^( NounPhrase headingProcedure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NounPhrase, "NounPhrase"), root_1);

                adaptor.addChild(root_1, stream_headingProcedure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, procedureNounPhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedureNounPhrase"

    public static class headingProcedure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "headingProcedure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:176:1: headingProcedure : ( headingProcedureRequiringTerminator headingProcedureTerminators | bracketedHeadingProcedure ( headingProcedureTerminators )? );
    public final ChemicalChunkerParser.headingProcedure_return headingProcedure() throws RecognitionException {
        ChemicalChunkerParser.headingProcedure_return retval = new ChemicalChunkerParser.headingProcedure_return();
        retval.start = input.LT(1);
        int headingProcedure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.headingProcedureRequiringTerminator_return headingProcedureRequiringTerminator87 = null;

        ChemicalChunkerParser.headingProcedureTerminators_return headingProcedureTerminators88 = null;

        ChemicalChunkerParser.bracketedHeadingProcedure_return bracketedHeadingProcedure89 = null;

        ChemicalChunkerParser.headingProcedureTerminators_return headingProcedureTerminators90 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:177:2: ( headingProcedureRequiringTerminator headingProcedureTerminators | bracketedHeadingProcedure ( headingProcedureTerminators )? )
            int alt10=2;
            switch ( input.LA(1) ) {
            case 39:
            case 141:
            case 146:
                {
                alt10=1;
                }
                break;
            case 139:
            case 143:
                {
                alt10=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }

            switch (alt10) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:177:4: headingProcedureRequiringTerminator headingProcedureTerminators
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_headingProcedureRequiringTerminator_in_headingProcedure473_static.FOLLOW_headingProcedureRequiringTerminator_in_headingProcedure473);
                    headingProcedureRequiringTerminator87=headingProcedureRequiringTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, headingProcedureRequiringTerminator87.getTree());
                    pushFollow(FOLLOW_headingProcedureTerminators_in_headingProcedure475_static.FOLLOW_headingProcedureTerminators_in_headingProcedure475);
                    headingProcedureTerminators88=headingProcedureTerminators();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, headingProcedureTerminators88.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:177:70: bracketedHeadingProcedure ( headingProcedureTerminators )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_bracketedHeadingProcedure_in_headingProcedure479_static.FOLLOW_bracketedHeadingProcedure_in_headingProcedure479);
                    bracketedHeadingProcedure89=bracketedHeadingProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedHeadingProcedure89.getTree());
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:177:96: ( headingProcedureTerminators )?
                    int alt9=2;
                    switch ( input.LA(1) ) {
                        case 144:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA9_5 = input.LA(3);

                                    if ( (synpred85_ChemicalChunker()) ) {
                                        alt9=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                        case 137:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA9_6 = input.LA(3);

                                    if ( (synpred85_ChemicalChunker()) ) {
                                        alt9=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                        case 132:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA9_7 = input.LA(3);

                                    if ( (synpred85_ChemicalChunker()) ) {
                                        alt9=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt9) {
                        case 1 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: headingProcedureTerminators
                            {
                            pushFollow(FOLLOW_headingProcedureTerminators_in_headingProcedure481_static.FOLLOW_headingProcedureTerminators_in_headingProcedure481);
                            headingProcedureTerminators90=headingProcedureTerminators();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, headingProcedureTerminators90.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, headingProcedure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "headingProcedure"

    public static class headingProcedureRequiringTerminator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "headingProcedureRequiringTerminator"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:179:1: headingProcedureRequiringTerminator : ( nnidentifier | numeric ) -> ^( PROCEDURE ( nnidentifier )? ( numeric )? ) ;
    public final ChemicalChunkerParser.headingProcedureRequiringTerminator_return headingProcedureRequiringTerminator() throws RecognitionException {
        ChemicalChunkerParser.headingProcedureRequiringTerminator_return retval = new ChemicalChunkerParser.headingProcedureRequiringTerminator_return();
        retval.start = input.LT(1);
        int headingProcedureRequiringTerminator_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier91 = null;

        ChemicalChunkerParser.numeric_return numeric92 = null;


        RewriteRuleSubtreeStream stream_nnidentifier=new RewriteRuleSubtreeStream(adaptor,"rule nnidentifier");
        RewriteRuleSubtreeStream stream_numeric=new RewriteRuleSubtreeStream(adaptor,"rule numeric");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:180:2: ( ( nnidentifier | numeric ) -> ^( PROCEDURE ( nnidentifier )? ( numeric )? ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:180:4: ( nnidentifier | numeric )
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:180:4: ( nnidentifier | numeric )
            int alt11=2;
            switch ( input.LA(1) ) {
            case 141:
                {
                alt11=1;
                }
                break;
            case 39:
            case 146:
                {
                alt11=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }

            switch (alt11) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:180:5: nnidentifier
                    {
                    pushFollow(FOLLOW_nnidentifier_in_headingProcedureRequiringTerminator492_static.FOLLOW_nnidentifier_in_headingProcedureRequiringTerminator492);
                    nnidentifier91=nnidentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nnidentifier.add(nnidentifier91.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:180:18: numeric
                    {
                    pushFollow(FOLLOW_numeric_in_headingProcedureRequiringTerminator494_static.FOLLOW_numeric_in_headingProcedureRequiringTerminator494);
                    numeric92=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numeric.add(numeric92.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: numeric, nnidentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 180:27: -> ^( PROCEDURE ( nnidentifier )? ( numeric )? )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:180:30: ^( PROCEDURE ( nnidentifier )? ( numeric )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PROCEDURE, "PROCEDURE"), root_1);

                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:180:42: ( nnidentifier )?
                if ( stream_nnidentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_nnidentifier.nextTree());

                }
                stream_nnidentifier.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:180:56: ( numeric )?
                if ( stream_numeric.hasNext() ) {
                    adaptor.addChild(root_1, stream_numeric.nextTree());

                }
                stream_numeric.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, headingProcedureRequiringTerminator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "headingProcedureRequiringTerminator"

    public static class bracketedHeadingProcedure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedHeadingProcedure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:182:1: bracketedHeadingProcedure : ( bracketedIdentifier | bracketedNumeric | squareBracketedReference ) -> ^( PROCEDURE ( bracketedIdentifier )? ( bracketedNumeric )? ( squareBracketedReference )? ) ;
    public final ChemicalChunkerParser.bracketedHeadingProcedure_return bracketedHeadingProcedure() throws RecognitionException {
        ChemicalChunkerParser.bracketedHeadingProcedure_return retval = new ChemicalChunkerParser.bracketedHeadingProcedure_return();
        retval.start = input.LT(1);
        int bracketedHeadingProcedure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.bracketedIdentifier_return bracketedIdentifier93 = null;

        ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric94 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference95 = null;


        RewriteRuleSubtreeStream stream_bracketedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule bracketedIdentifier");
        RewriteRuleSubtreeStream stream_squareBracketedReference=new RewriteRuleSubtreeStream(adaptor,"rule squareBracketedReference");
        RewriteRuleSubtreeStream stream_bracketedNumeric=new RewriteRuleSubtreeStream(adaptor,"rule bracketedNumeric");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:183:2: ( ( bracketedIdentifier | bracketedNumeric | squareBracketedReference ) -> ^( PROCEDURE ( bracketedIdentifier )? ( bracketedNumeric )? ( squareBracketedReference )? ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:183:4: ( bracketedIdentifier | bracketedNumeric | squareBracketedReference )
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:183:4: ( bracketedIdentifier | bracketedNumeric | squareBracketedReference )
            int alt12=3;
            switch ( input.LA(1) ) {
            case 143:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 146:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 144:
                                {
                                alt12=2;
                                }
                                break;
                            case 141:
                                {
                                alt12=1;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 12, 7, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 12, 4, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 141:
                        {
                        alt12=1;
                        }
                        break;
                    case 39:
                        {
                        alt12=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 12, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 12, 1, input);

                    throw nvae;
                }

                }
                break;
            case 139:
                {
                alt12=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }

            switch (alt12) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:183:5: bracketedIdentifier
                    {
                    pushFollow(FOLLOW_bracketedIdentifier_in_bracketedHeadingProcedure517_static.FOLLOW_bracketedIdentifier_in_bracketedHeadingProcedure517);
                    bracketedIdentifier93=bracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedIdentifier.add(bracketedIdentifier93.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:183:27: bracketedNumeric
                    {
                    pushFollow(FOLLOW_bracketedNumeric_in_bracketedHeadingProcedure521_static.FOLLOW_bracketedNumeric_in_bracketedHeadingProcedure521);
                    bracketedNumeric94=bracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedNumeric.add(bracketedNumeric94.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:183:46: squareBracketedReference
                    {
                    pushFollow(FOLLOW_squareBracketedReference_in_bracketedHeadingProcedure525_static.FOLLOW_squareBracketedReference_in_bracketedHeadingProcedure525);
                    squareBracketedReference95=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_squareBracketedReference.add(squareBracketedReference95.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: squareBracketedReference, bracketedIdentifier, bracketedNumeric
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 183:72: -> ^( PROCEDURE ( bracketedIdentifier )? ( bracketedNumeric )? ( squareBracketedReference )? )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:183:75: ^( PROCEDURE ( bracketedIdentifier )? ( bracketedNumeric )? ( squareBracketedReference )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PROCEDURE, "PROCEDURE"), root_1);

                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:183:87: ( bracketedIdentifier )?
                if ( stream_bracketedIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedIdentifier.nextTree());

                }
                stream_bracketedIdentifier.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:183:108: ( bracketedNumeric )?
                if ( stream_bracketedNumeric.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedNumeric.nextTree());

                }
                stream_bracketedNumeric.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:183:126: ( squareBracketedReference )?
                if ( stream_squareBracketedReference.hasNext() ) {
                    adaptor.addChild(root_1, stream_squareBracketedReference.nextTree());

                }
                stream_squareBracketedReference.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, bracketedHeadingProcedure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedHeadingProcedure"

    public static class headingProcedureTerminators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "headingProcedureTerminators"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:187:1: headingProcedureTerminators : ( rrb | stop | colon );
    public final ChemicalChunkerParser.headingProcedureTerminators_return headingProcedureTerminators() throws RecognitionException {
        ChemicalChunkerParser.headingProcedureTerminators_return retval = new ChemicalChunkerParser.headingProcedureTerminators_return();
        retval.start = input.LT(1);
        int headingProcedureTerminators_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.rrb_return rrb96 = null;

        ChemicalChunkerParser.stop_return stop97 = null;

        ChemicalChunkerParser.colon_return colon98 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:188:2: ( rrb | stop | colon )
            int alt13=3;
            switch ( input.LA(1) ) {
            case 144:
                {
                alt13=1;
                }
                break;
            case 137:
                {
                alt13=2;
                }
                break;
            case 132:
                {
                alt13=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }

            switch (alt13) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:188:4: rrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rrb_in_headingProcedureTerminators554_static.FOLLOW_rrb_in_headingProcedureTerminators554);
                    rrb96=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb96.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:188:8: stop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_stop_in_headingProcedureTerminators556_static.FOLLOW_stop_in_headingProcedureTerminators556);
                    stop97=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop97.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:188:13: colon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_colon_in_headingProcedureTerminators558_static.FOLLOW_colon_in_headingProcedureTerminators558);
                    colon98=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon98.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, headingProcedureTerminators_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "headingProcedureTerminators"

    public static class nounphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphrase"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:190:1: nounphrase : nounphraseStructure -> ^( NounPhrase nounphraseStructure ) ;
    public final ChemicalChunkerParser.nounphrase_return nounphrase() throws RecognitionException {
        ChemicalChunkerParser.nounphrase_return retval = new ChemicalChunkerParser.nounphrase_return();
        retval.start = input.LT(1);
        int nounphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure99 = null;


        RewriteRuleSubtreeStream stream_nounphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule nounphraseStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:191:2: ( nounphraseStructure -> ^( NounPhrase nounphraseStructure ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:191:4: nounphraseStructure
            {
            pushFollow(FOLLOW_nounphraseStructure_in_nounphrase567_static.FOLLOW_nounphraseStructure_in_nounphrase567);
            nounphraseStructure99=nounphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphraseStructure.add(nounphraseStructure99.getTree());


            // AST REWRITE
            // elements: nounphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 191:24: -> ^( NounPhrase nounphraseStructure )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:191:28: ^( NounPhrase nounphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NounPhrase, "NounPhrase"), root_1);

                adaptor.addChild(root_1, stream_nounphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, nounphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphrase"

    public static class nounphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:193:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );
    public final ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure_return retval = new ChemicalChunkerParser.nounphraseStructure_return();
        retval.start = input.LT(1);
        int nounphraseStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure1100 = null;

        ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure2101 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:194:2: ( nounphraseStructure1 | nounphraseStructure2 )
            int alt14=2;
            alt14 = dfa14.predict(input);
            switch (alt14) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:194:4: nounphraseStructure1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure1_in_nounphraseStructure586_static.FOLLOW_nounphraseStructure1_in_nounphraseStructure586);
                    nounphraseStructure1100=nounphraseStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure1100.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:194:25: nounphraseStructure2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure2_in_nounphraseStructure588_static.FOLLOW_nounphraseStructure2_in_nounphraseStructure588);
                    nounphraseStructure2101=nounphraseStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure2101.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, nounphraseStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure"

    public static class nounphraseStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure1"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:195:1: nounphraseStructure1 : multiApparatus -> ^( MultipleApparatus multiApparatus ) ;
    public final ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure1() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure1_return retval = new ChemicalChunkerParser.nounphraseStructure1_return();
        retval.start = input.LT(1);
        int nounphraseStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.multiApparatus_return multiApparatus102 = null;


        RewriteRuleSubtreeStream stream_multiApparatus=new RewriteRuleSubtreeStream(adaptor,"rule multiApparatus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:196:2: ( multiApparatus -> ^( MultipleApparatus multiApparatus ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:196:5: multiApparatus
            {
            pushFollow(FOLLOW_multiApparatus_in_nounphraseStructure1597_static.FOLLOW_multiApparatus_in_nounphraseStructure1597);
            multiApparatus102=multiApparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_multiApparatus.add(multiApparatus102.getTree());


            // AST REWRITE
            // elements: multiApparatus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 196:20: -> ^( MultipleApparatus multiApparatus )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:196:24: ^( MultipleApparatus multiApparatus )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MultipleApparatus, "MultipleApparatus"), root_1);

                adaptor.addChild(root_1, stream_multiApparatus.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, nounphraseStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure1"

    public static class nounphraseStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure2"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:197:1: nounphraseStructure2 : ( dtTHE )? ( dt )? nounphraseContent ( ( conjunction )* nounphraseContent {...}?)* ( prepphraseOf | prepphraseIN )? ;
    public final ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure2() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure2_return retval = new ChemicalChunkerParser.nounphraseStructure2_return();
        retval.start = input.LT(1);
        int nounphraseStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE103 = null;

        ChemicalChunkerParser.dt_return dt104 = null;

        ChemicalChunkerParser.nounphraseContent_return nounphraseContent105 = null;

        ChemicalChunkerParser.conjunction_return conjunction106 = null;

        ChemicalChunkerParser.nounphraseContent_return nounphraseContent107 = null;

        ChemicalChunkerParser.prepphraseOf_return prepphraseOf108 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN109 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:198:2: ( ( dtTHE )? ( dt )? nounphraseContent ( ( conjunction )* nounphraseContent {...}?)* ( prepphraseOf | prepphraseIN )? )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:198:4: ( dtTHE )? ( dt )? nounphraseContent ( ( conjunction )* nounphraseContent {...}?)* ( prepphraseOf | prepphraseIN )?
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:198:4: ( dtTHE )?
            int alt15=2;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt15=1;
                    }
                    break;
            }

            switch (alt15) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_nounphraseStructure2614_static.FOLLOW_dtTHE_in_nounphraseStructure2614);
                    dtTHE103=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE103.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:198:11: ( dt )?
            int alt16=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA16_3 = input.LA(3);

                            if ( (synpred93_ChemicalChunker()) ) {
                                alt16=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt16) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_nounphraseStructure2617_static.FOLLOW_dt_in_nounphraseStructure2617);
                    dt104=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt104.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nounphraseContent_in_nounphraseStructure2620_static.FOLLOW_nounphraseContent_in_nounphraseStructure2620);
            nounphraseContent105=nounphraseContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseContent105.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:198:34: ( ( conjunction )* nounphraseContent {...}?)*
            loop18:
            do {
                int alt18=2;
                alt18 = dfa18.predict(input);
                switch (alt18) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:198:35: ( conjunction )* nounphraseContent {...}?
            	    {
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:198:35: ( conjunction )*
            	    loop17:
            	    do {
            	        int alt17=2;
            	        alt17 = dfa17.predict(input);
            	        switch (alt17) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_nounphraseStructure2624_static.FOLLOW_conjunction_in_nounphraseStructure2624);
            	    	    conjunction106=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction106.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop17;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_nounphraseContent_in_nounphraseStructure2627_static.FOLLOW_nounphraseContent_in_nounphraseStructure2627);
            	    nounphraseContent107=nounphraseContent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseContent107.getTree());
            	    if ( !((!followedByVBDorVBZthenVBYIELDed(input))) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "nounphraseStructure2", "!followedByVBDorVBZthenVBYIELDed(input)");
            	    }

            	    }
            	    break;

            	default :
            	    break loop18;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:198:111: ( prepphraseOf | prepphraseIN )?
            int alt19=3;
            switch ( input.LA(1) ) {
                case 56:
                    {
                    int LA19_1 = input.LA(2);

                    if ( (synpred96_ChemicalChunker()) ) {
                        alt19=1;
                    }
                    }
                    break;
                case 50:
                    {
                    int LA19_2 = input.LA(2);

                    if ( (synpred97_ChemicalChunker()) ) {
                        alt19=2;
                    }
                    }
                    break;
            }

            switch (alt19) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:198:112: prepphraseOf
                    {
                    pushFollow(FOLLOW_prepphraseOf_in_nounphraseStructure2634_static.FOLLOW_prepphraseOf_in_nounphraseStructure2634);
                    prepphraseOf108=prepphraseOf();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOf108.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:198:126: prepphraseIN
                    {
                    pushFollow(FOLLOW_prepphraseIN_in_nounphraseStructure2637_static.FOLLOW_prepphraseIN_in_nounphraseStructure2637);
                    prepphraseIN109=prepphraseIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN109.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, nounphraseStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure2"

    public static class nounphraseContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseContent"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:200:1: nounphraseContent : ( advAdj )* ( dissolvePhrase | ratioOrBracketedRatio | noun | numeric | bracketedContent )+ ;
    public final ChemicalChunkerParser.nounphraseContent_return nounphraseContent() throws RecognitionException {
        ChemicalChunkerParser.nounphraseContent_return retval = new ChemicalChunkerParser.nounphraseContent_return();
        retval.start = input.LT(1);
        int nounphraseContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj110 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase111 = null;

        ChemicalChunkerParser.ratioOrBracketedRatio_return ratioOrBracketedRatio112 = null;

        ChemicalChunkerParser.noun_return noun113 = null;

        ChemicalChunkerParser.numeric_return numeric114 = null;

        ChemicalChunkerParser.bracketedContent_return bracketedContent115 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:201:2: ( ( advAdj )* ( dissolvePhrase | ratioOrBracketedRatio | noun | numeric | bracketedContent )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:201:4: ( advAdj )* ( dissolvePhrase | ratioOrBracketedRatio | noun | numeric | bracketedContent )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:201:4: ( advAdj )*
            loop20:
            do {
                int alt20=2;
                alt20 = dfa20.predict(input);
                switch (alt20) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_nounphraseContent649_static.FOLLOW_advAdj_in_nounphraseContent649);
            	    advAdj110=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj110.getTree());

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:201:13: ( dissolvePhrase | ratioOrBracketedRatio | noun | numeric | bracketedContent )+
            int cnt21=0;
            loop21:
            do {
                int alt21=6;
                alt21 = dfa21.predict(input);
                switch (alt21) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:201:14: dissolvePhrase
            	    {
            	    pushFollow(FOLLOW_dissolvePhrase_in_nounphraseContent654_static.FOLLOW_dissolvePhrase_in_nounphraseContent654);
            	    dissolvePhrase111=dissolvePhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase111.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:201:29: ratioOrBracketedRatio
            	    {
            	    pushFollow(FOLLOW_ratioOrBracketedRatio_in_nounphraseContent656_static.FOLLOW_ratioOrBracketedRatio_in_nounphraseContent656);
            	    ratioOrBracketedRatio112=ratioOrBracketedRatio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratioOrBracketedRatio112.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:201:51: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_nounphraseContent658_static.FOLLOW_noun_in_nounphraseContent658);
            	    noun113=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun113.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:201:56: numeric
            	    {
            	    pushFollow(FOLLOW_numeric_in_nounphraseContent660_static.FOLLOW_numeric_in_nounphraseContent660);
            	    numeric114=numeric();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric114.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:201:64: bracketedContent
            	    {
            	    pushFollow(FOLLOW_bracketedContent_in_nounphraseContent662_static.FOLLOW_bracketedContent_in_nounphraseContent662);
            	    bracketedContent115=bracketedContent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContent115.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt21 >= 1 ) break loop21;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(21, input);
                        throw eee;
                }
                cnt21++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, nounphraseContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseContent"

    public static class dissolvePhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolvePhrase"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:203:1: dissolvePhrase : ( dissolveStructure | lrb dissolveStructure rrb ) -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? ) ;
    public final ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase() throws RecognitionException {
        ChemicalChunkerParser.dissolvePhrase_return retval = new ChemicalChunkerParser.dissolvePhrase_return();
        retval.start = input.LT(1);
        int dissolvePhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dissolveStructure_return dissolveStructure116 = null;

        ChemicalChunkerParser.lrb_return lrb117 = null;

        ChemicalChunkerParser.dissolveStructure_return dissolveStructure118 = null;

        ChemicalChunkerParser.rrb_return rrb119 = null;


        RewriteRuleSubtreeStream stream_dissolveStructure=new RewriteRuleSubtreeStream(adaptor,"rule dissolveStructure");
        RewriteRuleSubtreeStream stream_lrb=new RewriteRuleSubtreeStream(adaptor,"rule lrb");
        RewriteRuleSubtreeStream stream_rrb=new RewriteRuleSubtreeStream(adaptor,"rule rrb");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:2: ( ( dissolveStructure | lrb dissolveStructure rrb ) -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:4: ( dissolveStructure | lrb dissolveStructure rrb )
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:4: ( dissolveStructure | lrb dissolveStructure rrb )
            int alt22=2;
            alt22 = dfa22.predict(input);
            switch (alt22) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:5: dissolveStructure
                    {
                    pushFollow(FOLLOW_dissolveStructure_in_dissolvePhrase674_static.FOLLOW_dissolveStructure_in_dissolvePhrase674);
                    dissolveStructure116=dissolveStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure.add(dissolveStructure116.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:23: lrb dissolveStructure rrb
                    {
                    pushFollow(FOLLOW_lrb_in_dissolvePhrase676_static.FOLLOW_lrb_in_dissolvePhrase676);
                    lrb117=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lrb.add(lrb117.getTree());
                    pushFollow(FOLLOW_dissolveStructure_in_dissolvePhrase678_static.FOLLOW_dissolveStructure_in_dissolvePhrase678);
                    dissolveStructure118=dissolveStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure.add(dissolveStructure118.getTree());
                    pushFollow(FOLLOW_rrb_in_dissolvePhrase680_static.FOLLOW_rrb_in_dissolvePhrase680);
                    rrb119=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rrb.add(rrb119.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: dissolveStructure, rrb, lrb
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 204:50: -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:54: ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DissolvePhrase, "DissolvePhrase"), root_1);

                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:71: ( lrb )?
                if ( stream_lrb.hasNext() ) {
                    adaptor.addChild(root_1, stream_lrb.nextTree());

                }
                stream_lrb.reset();
                adaptor.addChild(root_1, stream_dissolveStructure.nextTree());
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:94: ( rrb )?
                if ( stream_rrb.hasNext() ) {
                    adaptor.addChild(root_1, stream_rrb.nextTree());

                }
                stream_rrb.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, dissolvePhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dissolvePhrase"

    public static class dissolveStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolveStructure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:206:1: dissolveStructure : ( adj )? ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) ) inMolecule ( conjunction molecule )* ;
    public final ChemicalChunkerParser.dissolveStructure_return dissolveStructure() throws RecognitionException {
        ChemicalChunkerParser.dissolveStructure_return retval = new ChemicalChunkerParser.dissolveStructure_return();
        retval.start = input.LT(1);
        int dissolveStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj120 = null;

        ChemicalChunkerParser.nnp_return nnp121 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity122 = null;

        ChemicalChunkerParser.nnp_return nnp123 = null;

        ChemicalChunkerParser.molecule_return molecule124 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule125 = null;

        ChemicalChunkerParser.inMolecule_return inMolecule126 = null;

        ChemicalChunkerParser.conjunction_return conjunction127 = null;

        ChemicalChunkerParser.molecule_return molecule128 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:207:2: ( ( adj )? ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) ) inMolecule ( conjunction molecule )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:207:4: ( adj )? ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) ) inMolecule ( conjunction molecule )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:207:4: ( adj )?
            int alt23=2;
            alt23 = dfa23.predict(input);
            switch (alt23) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_dissolveStructure705_static.FOLLOW_adj_in_dissolveStructure705);
                    adj120=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj120.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:207:9: ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) )
            int alt26=2;
            switch ( input.LA(1) ) {
            case 158:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 71:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 39:
                            case 47:
                            case 56:
                            case 59:
                            case 73:
                            case 125:
                            case 129:
                            case 130:
                            case 133:
                            case 139:
                            case 141:
                            case 143:
                            case 146:
                                {
                                alt26=2;
                                }
                                break;
                            case 50:
                                {
                                alt26=1;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 26, 5, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 26, 4, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 45:
                    case 46:
                    case 63:
                    case 68:
                    case 73:
                    case 83:
                    case 84:
                    case 90:
                    case 130:
                    case 133:
                    case 139:
                    case 141:
                    case 143:
                    case 146:
                    case 151:
                    case 152:
                    case 153:
                        {
                        alt26=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 26, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 26, 1, input);

                    throw nvae;
                }

                }
                break;
            case 39:
            case 40:
            case 41:
            case 42:
            case 45:
            case 46:
            case 63:
            case 68:
            case 71:
            case 73:
            case 83:
            case 84:
            case 90:
            case 130:
            case 133:
            case 139:
            case 141:
            case 143:
            case 146:
            case 151:
            case 152:
            case 153:
                {
                alt26=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;
            }

            switch (alt26) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:207:10: nnp nnchementity
                    {
                    pushFollow(FOLLOW_nnp_in_dissolveStructure709_static.FOLLOW_nnp_in_dissolveStructure709);
                    nnp121=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp121.getTree());
                    pushFollow(FOLLOW_nnchementity_in_dissolveStructure711_static.FOLLOW_nnchementity_in_dissolveStructure711);
                    nnchementity122=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity122.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:207:28: ( nnp )? ( molecule | unnamedmolecule )
                    {
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:207:28: ( nnp )?
                    int alt24=2;
                    switch ( input.LA(1) ) {
                        case 158:
                            {
                            alt24=1;
                            }
                            break;
                    }

                    switch (alt24) {
                        case 1 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nnp
                            {
                            pushFollow(FOLLOW_nnp_in_dissolveStructure714_static.FOLLOW_nnp_in_dissolveStructure714);
                            nnp123=nnp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp123.getTree());

                            }
                            break;

                    }

                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:207:32: ( molecule | unnamedmolecule )
                    int alt25=2;
                    alt25 = dfa25.predict(input);
                    switch (alt25) {
                        case 1 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:207:33: molecule
                            {
                            pushFollow(FOLLOW_molecule_in_dissolveStructure717_static.FOLLOW_molecule_in_dissolveStructure717);
                            molecule124=molecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule124.getTree());

                            }
                            break;
                        case 2 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:207:42: unnamedmolecule
                            {
                            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure719_static.FOLLOW_unnamedmolecule_in_dissolveStructure719);
                            unnamedmolecule125=unnamedmolecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule125.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_inMolecule_in_dissolveStructure723_static.FOLLOW_inMolecule_in_dissolveStructure723);
            inMolecule126=inMolecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inMolecule126.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:207:71: ( conjunction molecule )*
            loop27:
            do {
                int alt27=2;
                alt27 = dfa27.predict(input);
                switch (alt27) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:207:72: conjunction molecule
            	    {
            	    pushFollow(FOLLOW_conjunction_in_dissolveStructure726_static.FOLLOW_conjunction_in_dissolveStructure726);
            	    conjunction127=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction127.getTree());
            	    pushFollow(FOLLOW_molecule_in_dissolveStructure728_static.FOLLOW_molecule_in_dissolveStructure728);
            	    molecule128=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule128.getTree());

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, dissolveStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dissolveStructure"

    public static class inMolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inMolecule"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:209:1: inMolecule : inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ;
    public final ChemicalChunkerParser.inMolecule_return inMolecule() throws RecognitionException {
        ChemicalChunkerParser.inMolecule_return retval = new ChemicalChunkerParser.inMolecule_return();
        retval.start = input.LT(1);
        int inMolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin129 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE130 = null;

        ChemicalChunkerParser.adj_return adj131 = null;

        ChemicalChunkerParser.nnp_return nnp132 = null;

        ChemicalChunkerParser.molecule_return molecule133 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule134 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:210:2: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:210:4: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inin_in_inMolecule740_static.FOLLOW_inin_in_inMolecule740);
            inin129=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inin129.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:210:9: ( dtTHE )?
            int alt28=2;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt28=1;
                    }
                    break;
            }

            switch (alt28) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_inMolecule742_static.FOLLOW_dtTHE_in_inMolecule742);
                    dtTHE130=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE130.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:210:16: ( adj )?
            int alt29=2;
            alt29 = dfa29.predict(input);
            switch (alt29) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_inMolecule745_static.FOLLOW_adj_in_inMolecule745);
                    adj131=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj131.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:210:21: ( nnp )?
            int alt30=2;
            switch ( input.LA(1) ) {
                case 158:
                    {
                    alt30=1;
                    }
                    break;
            }

            switch (alt30) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_inMolecule748_static.FOLLOW_nnp_in_inMolecule748);
                    nnp132=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp132.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:210:26: ( molecule | unnamedmolecule )
            int alt31=2;
            alt31 = dfa31.predict(input);
            switch (alt31) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:210:27: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_inMolecule752_static.FOLLOW_molecule_in_inMolecule752);
                    molecule133=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule133.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:210:36: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_inMolecule754_static.FOLLOW_unnamedmolecule_in_inMolecule754);
                    unnamedmolecule134=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule134.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, inMolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inMolecule"

    public static class verbphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphrase"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:212:1: verbphrase : verbphraseStructure -> ^( VerbPhrase verbphraseStructure ) ;
    public final ChemicalChunkerParser.verbphrase_return verbphrase() throws RecognitionException {
        ChemicalChunkerParser.verbphrase_return retval = new ChemicalChunkerParser.verbphrase_return();
        retval.start = input.LT(1);
        int verbphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure135 = null;


        RewriteRuleSubtreeStream stream_verbphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule verbphraseStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:213:2: ( verbphraseStructure -> ^( VerbPhrase verbphraseStructure ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:213:4: verbphraseStructure
            {
            pushFollow(FOLLOW_verbphraseStructure_in_verbphrase764_static.FOLLOW_verbphraseStructure_in_verbphrase764);
            verbphraseStructure135=verbphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_verbphraseStructure.add(verbphraseStructure135.getTree());


            // AST REWRITE
            // elements: verbphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 213:24: -> ^( VerbPhrase verbphraseStructure )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:213:28: ^( VerbPhrase verbphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VerbPhrase, "VerbPhrase"), root_1);

                adaptor.addChild(root_1, stream_verbphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, verbphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verbphrase"

    public static class verbphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphraseStructure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:1: verbphraseStructure : ( dt )? ( to )? ( inAll )? ( inafter )? ( md )* ( rbconj )? ( adv )* ( adj )? ( actionVerb ( md )* ( adv )* ( adj )? ( neg )? | otherVerb ( md )* ( adv )* ( adj )? ( neg )? ( otherVerbStructure )* ( actionVerbStructure )? ) ( inoff )? ( ( cc )? ( comma )? prepphrase )* ;
    public final ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.verbphraseStructure_return retval = new ChemicalChunkerParser.verbphraseStructure_return();
        retval.start = input.LT(1);
        int verbphraseStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt136 = null;

        ChemicalChunkerParser.to_return to137 = null;

        ChemicalChunkerParser.inAll_return inAll138 = null;

        ChemicalChunkerParser.inafter_return inafter139 = null;

        ChemicalChunkerParser.md_return md140 = null;

        ChemicalChunkerParser.rbconj_return rbconj141 = null;

        ChemicalChunkerParser.adv_return adv142 = null;

        ChemicalChunkerParser.adj_return adj143 = null;

        ChemicalChunkerParser.actionVerb_return actionVerb144 = null;

        ChemicalChunkerParser.md_return md145 = null;

        ChemicalChunkerParser.adv_return adv146 = null;

        ChemicalChunkerParser.adj_return adj147 = null;

        ChemicalChunkerParser.neg_return neg148 = null;

        ChemicalChunkerParser.otherVerb_return otherVerb149 = null;

        ChemicalChunkerParser.md_return md150 = null;

        ChemicalChunkerParser.adv_return adv151 = null;

        ChemicalChunkerParser.adj_return adj152 = null;

        ChemicalChunkerParser.neg_return neg153 = null;

        ChemicalChunkerParser.otherVerbStructure_return otherVerbStructure154 = null;

        ChemicalChunkerParser.actionVerbStructure_return actionVerbStructure155 = null;

        ChemicalChunkerParser.inoff_return inoff156 = null;

        ChemicalChunkerParser.cc_return cc157 = null;

        ChemicalChunkerParser.comma_return comma158 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase159 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:21: ( ( dt )? ( to )? ( inAll )? ( inafter )? ( md )* ( rbconj )? ( adv )* ( adj )? ( actionVerb ( md )* ( adv )* ( adj )? ( neg )? | otherVerb ( md )* ( adv )* ( adj )? ( neg )? ( otherVerbStructure )* ( actionVerbStructure )? ) ( inoff )? ( ( cc )? ( comma )? prepphrase )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:24: ( dt )? ( to )? ( inAll )? ( inafter )? ( md )* ( rbconj )? ( adv )* ( adj )? ( actionVerb ( md )* ( adv )* ( adj )? ( neg )? | otherVerb ( md )* ( adv )* ( adj )? ( neg )? ( otherVerbStructure )* ( actionVerbStructure )? ) ( inoff )? ( ( cc )? ( comma )? prepphrase )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:24: ( dt )?
            int alt32=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt32=1;
                    }
                    break;
            }

            switch (alt32) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_verbphraseStructure783_static.FOLLOW_dt_in_verbphraseStructure783);
                    dt136=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt136.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:28: ( to )?
            int alt33=2;
            switch ( input.LA(1) ) {
                case 169:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA33_3 = input.LA(3);

                            if ( (synpred115_ChemicalChunker()) ) {
                                alt33=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt33) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: to
                    {
                    pushFollow(FOLLOW_to_in_verbphraseStructure786_static.FOLLOW_to_in_verbphraseStructure786);
                    to137=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to137.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:32: ( inAll )?
            int alt34=2;
            switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 150:
                case 169:
                    {
                    alt34=1;
                    }
                    break;
                case 49:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA34_4 = input.LA(3);

                            if ( (synpred116_ChemicalChunker()) ) {
                                alt34=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt34) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_verbphraseStructure789_static.FOLLOW_inAll_in_verbphraseStructure789);
                    inAll138=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll138.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:39: ( inafter )?
            int alt35=2;
            switch ( input.LA(1) ) {
                case 49:
                    {
                    alt35=1;
                    }
                    break;
            }

            switch (alt35) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: inafter
                    {
                    pushFollow(FOLLOW_inafter_in_verbphraseStructure792_static.FOLLOW_inafter_in_verbphraseStructure792);
                    inafter139=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter139.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:48: ( md )*
            loop36:
            do {
                int alt36=2;
                switch ( input.LA(1) ) {
                case 155:
                    {
                    alt36=1;
                    }
                    break;

                }

                switch (alt36) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: md
            	    {
            	    pushFollow(FOLLOW_md_in_verbphraseStructure795_static.FOLLOW_md_in_verbphraseStructure795);
            	    md140=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md140.getTree());

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:52: ( rbconj )?
            int alt37=2;
            switch ( input.LA(1) ) {
                case 131:
                    {
                    alt37=1;
                    }
                    break;
            }

            switch (alt37) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: rbconj
                    {
                    pushFollow(FOLLOW_rbconj_in_verbphraseStructure798_static.FOLLOW_rbconj_in_verbphraseStructure798);
                    rbconj141=rbconj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj141.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:60: ( adv )*
            loop38:
            do {
                int alt38=2;
                switch ( input.LA(1) ) {
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt38=1;
                    }
                    break;

                }

                switch (alt38) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adv
            	    {
            	    pushFollow(FOLLOW_adv_in_verbphraseStructure801_static.FOLLOW_adv_in_verbphraseStructure801);
            	    adv142=adv();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv142.getTree());

            	    }
            	    break;

            	default :
            	    break loop38;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:65: ( adj )?
            int alt39=2;
            switch ( input.LA(1) ) {
                case 40:
                case 41:
                case 45:
                case 151:
                case 152:
                case 153:
                    {
                    alt39=1;
                    }
                    break;
            }

            switch (alt39) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_verbphraseStructure804_static.FOLLOW_adj_in_verbphraseStructure804);
                    adj143=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj143.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:70: ( actionVerb ( md )* ( adv )* ( adj )? ( neg )? | otherVerb ( md )* ( adv )* ( adj )? ( neg )? ( otherVerbStructure )* ( actionVerbStructure )? )
            int alt50=2;
            switch ( input.LA(1) ) {
            case 87:
            case 88:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 98:
            case 99:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 110:
            case 112:
            case 113:
            case 115:
            case 116:
            case 118:
            case 120:
            case 121:
            case 122:
            case 124:
            case 125:
            case 127:
            case 128:
            case 129:
                {
                alt50=1;
                }
                break;
            case 85:
            case 86:
            case 97:
            case 114:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
                {
                alt50=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                throw nvae;
            }

            switch (alt50) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:71: actionVerb ( md )* ( adv )* ( adj )? ( neg )?
                    {
                    pushFollow(FOLLOW_actionVerb_in_verbphraseStructure808_static.FOLLOW_actionVerb_in_verbphraseStructure808);
                    actionVerb144=actionVerb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, actionVerb144.getTree());
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:82: ( md )*
                    loop40:
                    do {
                        int alt40=2;
                        switch ( input.LA(1) ) {
                        case 155:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                int LA40_3 = input.LA(3);

                                if ( (synpred122_ChemicalChunker()) ) {
                                    alt40=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt40) {
                    	case 1 :
                    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: md
                    	    {
                    	    pushFollow(FOLLOW_md_in_verbphraseStructure810_static.FOLLOW_md_in_verbphraseStructure810);
                    	    md145=md();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md145.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop40;
                        }
                    } while (true);

                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:86: ( adv )*
                    loop41:
                    do {
                        int alt41=2;
                        alt41 = dfa41.predict(input);
                        switch (alt41) {
                    	case 1 :
                    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adv
                    	    {
                    	    pushFollow(FOLLOW_adv_in_verbphraseStructure813_static.FOLLOW_adv_in_verbphraseStructure813);
                    	    adv146=adv();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv146.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop41;
                        }
                    } while (true);

                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:91: ( adj )?
                    int alt42=2;
                    alt42 = dfa42.predict(input);
                    switch (alt42) {
                        case 1 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
                            {
                            pushFollow(FOLLOW_adj_in_verbphraseStructure816_static.FOLLOW_adj_in_verbphraseStructure816);
                            adj147=adj();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj147.getTree());

                            }
                            break;

                    }

                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:96: ( neg )?
                    int alt43=2;
                    switch ( input.LA(1) ) {
                        case 135:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA43_3 = input.LA(3);

                                    if ( (synpred125_ChemicalChunker()) ) {
                                        alt43=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt43) {
                        case 1 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: neg
                            {
                            pushFollow(FOLLOW_neg_in_verbphraseStructure819_static.FOLLOW_neg_in_verbphraseStructure819);
                            neg148=neg();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, neg148.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:104: otherVerb ( md )* ( adv )* ( adj )? ( neg )? ( otherVerbStructure )* ( actionVerbStructure )?
                    {
                    pushFollow(FOLLOW_otherVerb_in_verbphraseStructure825_static.FOLLOW_otherVerb_in_verbphraseStructure825);
                    otherVerb149=otherVerb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, otherVerb149.getTree());
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:114: ( md )*
                    loop44:
                    do {
                        int alt44=2;
                        switch ( input.LA(1) ) {
                        case 155:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                int LA44_3 = input.LA(3);

                                if ( (synpred127_ChemicalChunker()) ) {
                                    alt44=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt44) {
                    	case 1 :
                    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: md
                    	    {
                    	    pushFollow(FOLLOW_md_in_verbphraseStructure827_static.FOLLOW_md_in_verbphraseStructure827);
                    	    md150=md();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md150.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop44;
                        }
                    } while (true);

                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:118: ( adv )*
                    loop45:
                    do {
                        int alt45=2;
                        alt45 = dfa45.predict(input);
                        switch (alt45) {
                    	case 1 :
                    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adv
                    	    {
                    	    pushFollow(FOLLOW_adv_in_verbphraseStructure830_static.FOLLOW_adv_in_verbphraseStructure830);
                    	    adv151=adv();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv151.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop45;
                        }
                    } while (true);

                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:123: ( adj )?
                    int alt46=2;
                    alt46 = dfa46.predict(input);
                    switch (alt46) {
                        case 1 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
                            {
                            pushFollow(FOLLOW_adj_in_verbphraseStructure833_static.FOLLOW_adj_in_verbphraseStructure833);
                            adj152=adj();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj152.getTree());

                            }
                            break;

                    }

                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:128: ( neg )?
                    int alt47=2;
                    switch ( input.LA(1) ) {
                        case 135:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA47_3 = input.LA(3);

                                    if ( (synpred130_ChemicalChunker()) ) {
                                        alt47=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt47) {
                        case 1 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: neg
                            {
                            pushFollow(FOLLOW_neg_in_verbphraseStructure836_static.FOLLOW_neg_in_verbphraseStructure836);
                            neg153=neg();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, neg153.getTree());

                            }
                            break;

                    }

                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:133: ( otherVerbStructure )*
                    loop48:
                    do {
                        int alt48=2;
                        alt48 = dfa48.predict(input);
                        switch (alt48) {
                    	case 1 :
                    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: otherVerbStructure
                    	    {
                    	    pushFollow(FOLLOW_otherVerbStructure_in_verbphraseStructure839_static.FOLLOW_otherVerbStructure_in_verbphraseStructure839);
                    	    otherVerbStructure154=otherVerbStructure();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, otherVerbStructure154.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop48;
                        }
                    } while (true);

                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:153: ( actionVerbStructure )?
                    int alt49=2;
                    alt49 = dfa49.predict(input);
                    switch (alt49) {
                        case 1 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: actionVerbStructure
                            {
                            pushFollow(FOLLOW_actionVerbStructure_in_verbphraseStructure842_static.FOLLOW_actionVerbStructure_in_verbphraseStructure842);
                            actionVerbStructure155=actionVerbStructure();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, actionVerbStructure155.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:175: ( inoff )?
            int alt51=2;
            switch ( input.LA(1) ) {
                case 62:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA51_3 = input.LA(3);

                            if ( (synpred133_ChemicalChunker()) ) {
                                alt51=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt51) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: inoff
                    {
                    pushFollow(FOLLOW_inoff_in_verbphraseStructure846_static.FOLLOW_inoff_in_verbphraseStructure846);
                    inoff156=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff156.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:182: ( ( cc )? ( comma )? prepphrase )*
            loop54:
            do {
                int alt54=2;
                alt54 = dfa54.predict(input);
                switch (alt54) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:183: ( cc )? ( comma )? prepphrase
            	    {
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:183: ( cc )?
            	    int alt52=2;
            	    switch ( input.LA(1) ) {
            	        case 145:
            	            {
            	            alt52=1;
            	            }
            	            break;
            	    }

            	    switch (alt52) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: cc
            	            {
            	            pushFollow(FOLLOW_cc_in_verbphraseStructure850_static.FOLLOW_cc_in_verbphraseStructure850);
            	            cc157=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc157.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:187: ( comma )?
            	    int alt53=2;
            	    switch ( input.LA(1) ) {
            	        case 133:
            	            {
            	            alt53=1;
            	            }
            	            break;
            	    }

            	    switch (alt53) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: comma
            	            {
            	            pushFollow(FOLLOW_comma_in_verbphraseStructure853_static.FOLLOW_comma_in_verbphraseStructure853);
            	            comma158=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma158.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_prepphrase_in_verbphraseStructure856_static.FOLLOW_prepphrase_in_verbphraseStructure856);
            	    prepphrase159=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase159.getTree());

            	    }
            	    break;

            	default :
            	    break loop54;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, verbphraseStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verbphraseStructure"

    public static class actionVerbStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "actionVerbStructure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:217:1: actionVerbStructure : ( md )* ( rbconj )? ( adv )* ( adj )? actionVerb ( md )* ( adv )* ( adj )? ( neg )? ;
    public final ChemicalChunkerParser.actionVerbStructure_return actionVerbStructure() throws RecognitionException {
        ChemicalChunkerParser.actionVerbStructure_return retval = new ChemicalChunkerParser.actionVerbStructure_return();
        retval.start = input.LT(1);
        int actionVerbStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.md_return md160 = null;

        ChemicalChunkerParser.rbconj_return rbconj161 = null;

        ChemicalChunkerParser.adv_return adv162 = null;

        ChemicalChunkerParser.adj_return adj163 = null;

        ChemicalChunkerParser.actionVerb_return actionVerb164 = null;

        ChemicalChunkerParser.md_return md165 = null;

        ChemicalChunkerParser.adv_return adv166 = null;

        ChemicalChunkerParser.adj_return adj167 = null;

        ChemicalChunkerParser.neg_return neg168 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:217:20: ( ( md )* ( rbconj )? ( adv )* ( adj )? actionVerb ( md )* ( adv )* ( adj )? ( neg )? )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:217:22: ( md )* ( rbconj )? ( adv )* ( adj )? actionVerb ( md )* ( adv )* ( adj )? ( neg )?
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:217:22: ( md )*
            loop55:
            do {
                int alt55=2;
                switch ( input.LA(1) ) {
                case 155:
                    {
                    alt55=1;
                    }
                    break;

                }

                switch (alt55) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: md
            	    {
            	    pushFollow(FOLLOW_md_in_actionVerbStructure866_static.FOLLOW_md_in_actionVerbStructure866);
            	    md160=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md160.getTree());

            	    }
            	    break;

            	default :
            	    break loop55;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:217:26: ( rbconj )?
            int alt56=2;
            switch ( input.LA(1) ) {
                case 131:
                    {
                    alt56=1;
                    }
                    break;
            }

            switch (alt56) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: rbconj
                    {
                    pushFollow(FOLLOW_rbconj_in_actionVerbStructure869_static.FOLLOW_rbconj_in_actionVerbStructure869);
                    rbconj161=rbconj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj161.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:217:34: ( adv )*
            loop57:
            do {
                int alt57=2;
                switch ( input.LA(1) ) {
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt57=1;
                    }
                    break;

                }

                switch (alt57) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adv
            	    {
            	    pushFollow(FOLLOW_adv_in_actionVerbStructure872_static.FOLLOW_adv_in_actionVerbStructure872);
            	    adv162=adv();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv162.getTree());

            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:217:39: ( adj )?
            int alt58=2;
            switch ( input.LA(1) ) {
                case 40:
                case 41:
                case 45:
                case 151:
                case 152:
                case 153:
                    {
                    alt58=1;
                    }
                    break;
            }

            switch (alt58) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_actionVerbStructure875_static.FOLLOW_adj_in_actionVerbStructure875);
                    adj163=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj163.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_actionVerb_in_actionVerbStructure878_static.FOLLOW_actionVerb_in_actionVerbStructure878);
            actionVerb164=actionVerb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, actionVerb164.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:217:55: ( md )*
            loop59:
            do {
                int alt59=2;
                switch ( input.LA(1) ) {
                case 155:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA59_3 = input.LA(3);

                        if ( (synpred141_ChemicalChunker()) ) {
                            alt59=1;
                        }


                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt59) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: md
            	    {
            	    pushFollow(FOLLOW_md_in_actionVerbStructure880_static.FOLLOW_md_in_actionVerbStructure880);
            	    md165=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md165.getTree());

            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:217:59: ( adv )*
            loop60:
            do {
                int alt60=2;
                alt60 = dfa60.predict(input);
                switch (alt60) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adv
            	    {
            	    pushFollow(FOLLOW_adv_in_actionVerbStructure883_static.FOLLOW_adv_in_actionVerbStructure883);
            	    adv166=adv();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv166.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:217:64: ( adj )?
            int alt61=2;
            alt61 = dfa61.predict(input);
            switch (alt61) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_actionVerbStructure886_static.FOLLOW_adj_in_actionVerbStructure886);
                    adj167=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj167.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:217:69: ( neg )?
            int alt62=2;
            switch ( input.LA(1) ) {
                case 135:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA62_3 = input.LA(3);

                            if ( (synpred144_ChemicalChunker()) ) {
                                alt62=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt62) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: neg
                    {
                    pushFollow(FOLLOW_neg_in_actionVerbStructure889_static.FOLLOW_neg_in_actionVerbStructure889);
                    neg168=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg168.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, actionVerbStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "actionVerbStructure"

    public static class otherVerbStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "otherVerbStructure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:218:1: otherVerbStructure : ( md )* ( rbconj )? ( adv )* ( adj )? otherVerb ( md )* ( adv )* ( adj )? ( neg )? ;
    public final ChemicalChunkerParser.otherVerbStructure_return otherVerbStructure() throws RecognitionException {
        ChemicalChunkerParser.otherVerbStructure_return retval = new ChemicalChunkerParser.otherVerbStructure_return();
        retval.start = input.LT(1);
        int otherVerbStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.md_return md169 = null;

        ChemicalChunkerParser.rbconj_return rbconj170 = null;

        ChemicalChunkerParser.adv_return adv171 = null;

        ChemicalChunkerParser.adj_return adj172 = null;

        ChemicalChunkerParser.otherVerb_return otherVerb173 = null;

        ChemicalChunkerParser.md_return md174 = null;

        ChemicalChunkerParser.adv_return adv175 = null;

        ChemicalChunkerParser.adj_return adj176 = null;

        ChemicalChunkerParser.neg_return neg177 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:218:19: ( ( md )* ( rbconj )? ( adv )* ( adj )? otherVerb ( md )* ( adv )* ( adj )? ( neg )? )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:218:21: ( md )* ( rbconj )? ( adv )* ( adj )? otherVerb ( md )* ( adv )* ( adj )? ( neg )?
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:218:21: ( md )*
            loop63:
            do {
                int alt63=2;
                switch ( input.LA(1) ) {
                case 155:
                    {
                    alt63=1;
                    }
                    break;

                }

                switch (alt63) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: md
            	    {
            	    pushFollow(FOLLOW_md_in_otherVerbStructure897_static.FOLLOW_md_in_otherVerbStructure897);
            	    md169=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md169.getTree());

            	    }
            	    break;

            	default :
            	    break loop63;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:218:25: ( rbconj )?
            int alt64=2;
            switch ( input.LA(1) ) {
                case 131:
                    {
                    alt64=1;
                    }
                    break;
            }

            switch (alt64) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: rbconj
                    {
                    pushFollow(FOLLOW_rbconj_in_otherVerbStructure900_static.FOLLOW_rbconj_in_otherVerbStructure900);
                    rbconj170=rbconj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj170.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:218:33: ( adv )*
            loop65:
            do {
                int alt65=2;
                switch ( input.LA(1) ) {
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt65=1;
                    }
                    break;

                }

                switch (alt65) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adv
            	    {
            	    pushFollow(FOLLOW_adv_in_otherVerbStructure903_static.FOLLOW_adv_in_otherVerbStructure903);
            	    adv171=adv();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv171.getTree());

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:218:38: ( adj )?
            int alt66=2;
            switch ( input.LA(1) ) {
                case 40:
                case 41:
                case 45:
                case 151:
                case 152:
                case 153:
                    {
                    alt66=1;
                    }
                    break;
            }

            switch (alt66) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_otherVerbStructure906_static.FOLLOW_adj_in_otherVerbStructure906);
                    adj172=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj172.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_otherVerb_in_otherVerbStructure909_static.FOLLOW_otherVerb_in_otherVerbStructure909);
            otherVerb173=otherVerb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, otherVerb173.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:218:53: ( md )*
            loop67:
            do {
                int alt67=2;
                switch ( input.LA(1) ) {
                case 155:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA67_3 = input.LA(3);

                        if ( (synpred149_ChemicalChunker()) ) {
                            alt67=1;
                        }


                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt67) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: md
            	    {
            	    pushFollow(FOLLOW_md_in_otherVerbStructure911_static.FOLLOW_md_in_otherVerbStructure911);
            	    md174=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md174.getTree());

            	    }
            	    break;

            	default :
            	    break loop67;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:218:57: ( adv )*
            loop68:
            do {
                int alt68=2;
                alt68 = dfa68.predict(input);
                switch (alt68) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adv
            	    {
            	    pushFollow(FOLLOW_adv_in_otherVerbStructure914_static.FOLLOW_adv_in_otherVerbStructure914);
            	    adv175=adv();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv175.getTree());

            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:218:62: ( adj )?
            int alt69=2;
            alt69 = dfa69.predict(input);
            switch (alt69) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_otherVerbStructure917_static.FOLLOW_adj_in_otherVerbStructure917);
                    adj176=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj176.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:218:67: ( neg )?
            int alt70=2;
            switch ( input.LA(1) ) {
                case 135:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA70_3 = input.LA(3);

                            if ( (synpred152_ChemicalChunker()) ) {
                                alt70=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt70) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: neg
                    {
                    pushFollow(FOLLOW_neg_in_otherVerbStructure920_static.FOLLOW_neg_in_otherVerbStructure920);
                    neg177=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg177.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, otherVerbStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "otherVerbStructure"

    public static class verb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verb"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:220:1: verb : ( actionVerb | otherVerb );
    public final ChemicalChunkerParser.verb_return verb() throws RecognitionException {
        ChemicalChunkerParser.verb_return retval = new ChemicalChunkerParser.verb_return();
        retval.start = input.LT(1);
        int verb_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.actionVerb_return actionVerb178 = null;

        ChemicalChunkerParser.otherVerb_return otherVerb179 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:220:5: ( actionVerb | otherVerb )
            int alt71=2;
            switch ( input.LA(1) ) {
            case 87:
            case 88:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 98:
            case 99:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 110:
            case 112:
            case 113:
            case 115:
            case 116:
            case 118:
            case 120:
            case 121:
            case 122:
            case 124:
            case 125:
            case 127:
            case 128:
            case 129:
                {
                alt71=1;
                }
                break;
            case 85:
            case 86:
            case 97:
            case 114:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
                {
                alt71=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 71, 0, input);

                throw nvae;
            }

            switch (alt71) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:220:7: actionVerb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_actionVerb_in_verb929_static.FOLLOW_actionVerb_in_verb929);
                    actionVerb178=actionVerb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, actionVerb178.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:220:20: otherVerb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_otherVerb_in_verb933_static.FOLLOW_otherVerb_in_verb933);
                    otherVerb179=otherVerb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, otherVerb179.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, verb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verb"

    public static class actionVerb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "actionVerb"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:1: actionVerb : ( vbadd | vbcharge | vbcontain | vbdilute | vbdrop | vbfill | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | degassMultiVerb | vbsubject | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbsubmerge | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield );
    public final ChemicalChunkerParser.actionVerb_return actionVerb() throws RecognitionException {
        ChemicalChunkerParser.actionVerb_return retval = new ChemicalChunkerParser.actionVerb_return();
        retval.start = input.LT(1);
        int actionVerb_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vbadd_return vbadd180 = null;

        ChemicalChunkerParser.vbcharge_return vbcharge181 = null;

        ChemicalChunkerParser.vbcontain_return vbcontain182 = null;

        ChemicalChunkerParser.vbdilute_return vbdilute183 = null;

        ChemicalChunkerParser.vbdrop_return vbdrop184 = null;

        ChemicalChunkerParser.vbfill_return vbfill185 = null;

        ChemicalChunkerParser.vbtreat_return vbtreat186 = null;

        ChemicalChunkerParser.vbapparatus_return vbapparatus187 = null;

        ChemicalChunkerParser.vbconcentrate_return vbconcentrate188 = null;

        ChemicalChunkerParser.vbcool_return vbcool189 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass190 = null;

        ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb191 = null;

        ChemicalChunkerParser.vbsubject_return vbsubject192 = null;

        ChemicalChunkerParser.vbdissolve_return vbdissolve193 = null;

        ChemicalChunkerParser.vbdry_return vbdry194 = null;

        ChemicalChunkerParser.vbextract_return vbextract195 = null;

        ChemicalChunkerParser.vbfilter_return vbfilter196 = null;

        ChemicalChunkerParser.vbheat_return vbheat197 = null;

        ChemicalChunkerParser.vbincrease_return vbincrease198 = null;

        ChemicalChunkerParser.vbsubmerge_return vbsubmerge199 = null;

        ChemicalChunkerParser.vbpartition_return vbpartition200 = null;

        ChemicalChunkerParser.vbprecipitate_return vbprecipitate201 = null;

        ChemicalChunkerParser.vbpurify_return vbpurify202 = null;

        ChemicalChunkerParser.vbquench_return vbquench203 = null;

        ChemicalChunkerParser.vbrecover_return vbrecover204 = null;

        ChemicalChunkerParser.vbremove_return vbremove205 = null;

        ChemicalChunkerParser.vbstir_return vbstir206 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize207 = null;

        ChemicalChunkerParser.vbwait_return vbwait208 = null;

        ChemicalChunkerParser.vbwash_return vbwash209 = null;

        ChemicalChunkerParser.vbyield_return vbyield210 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:12: ( vbadd | vbcharge | vbcontain | vbdilute | vbdrop | vbfill | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | degassMultiVerb | vbsubject | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbsubmerge | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield )
            int alt72=31;
            alt72 = dfa72.predict(input);
            switch (alt72) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:14: vbadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbadd_in_actionVerb940_static.FOLLOW_vbadd_in_actionVerb940);
                    vbadd180=vbadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbadd180.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:20: vbcharge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcharge_in_actionVerb942_static.FOLLOW_vbcharge_in_actionVerb942);
                    vbcharge181=vbcharge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcharge181.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:29: vbcontain
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcontain_in_actionVerb944_static.FOLLOW_vbcontain_in_actionVerb944);
                    vbcontain182=vbcontain();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcontain182.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:39: vbdilute
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdilute_in_actionVerb946_static.FOLLOW_vbdilute_in_actionVerb946);
                    vbdilute183=vbdilute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdilute183.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:48: vbdrop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdrop_in_actionVerb948_static.FOLLOW_vbdrop_in_actionVerb948);
                    vbdrop184=vbdrop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdrop184.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:55: vbfill
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfill_in_actionVerb950_static.FOLLOW_vbfill_in_actionVerb950);
                    vbfill185=vbfill();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill185.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:62: vbtreat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbtreat_in_actionVerb952_static.FOLLOW_vbtreat_in_actionVerb952);
                    vbtreat186=vbtreat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbtreat186.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:70: vbapparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbapparatus_in_actionVerb954_static.FOLLOW_vbapparatus_in_actionVerb954);
                    vbapparatus187=vbapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbapparatus187.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:82: vbconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbconcentrate_in_actionVerb956_static.FOLLOW_vbconcentrate_in_actionVerb956);
                    vbconcentrate188=vbconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbconcentrate188.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:96: vbcool
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcool_in_actionVerb958_static.FOLLOW_vbcool_in_actionVerb958);
                    vbcool189=vbcool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcool189.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:103: vbdegass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdegass_in_actionVerb960_static.FOLLOW_vbdegass_in_actionVerb960);
                    vbdegass190=vbdegass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass190.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:112: degassMultiVerb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_degassMultiVerb_in_actionVerb962_static.FOLLOW_degassMultiVerb_in_actionVerb962);
                    degassMultiVerb191=degassMultiVerb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, degassMultiVerb191.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:128: vbsubject
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubject_in_actionVerb964_static.FOLLOW_vbsubject_in_actionVerb964);
                    vbsubject192=vbsubject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubject192.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:138: vbdissolve
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdissolve_in_actionVerb966_static.FOLLOW_vbdissolve_in_actionVerb966);
                    vbdissolve193=vbdissolve();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdissolve193.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:149: vbdry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdry_in_actionVerb968_static.FOLLOW_vbdry_in_actionVerb968);
                    vbdry194=vbdry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdry194.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:155: vbextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbextract_in_actionVerb970_static.FOLLOW_vbextract_in_actionVerb970);
                    vbextract195=vbextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbextract195.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:165: vbfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfilter_in_actionVerb972_static.FOLLOW_vbfilter_in_actionVerb972);
                    vbfilter196=vbfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfilter196.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:174: vbheat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbheat_in_actionVerb974_static.FOLLOW_vbheat_in_actionVerb974);
                    vbheat197=vbheat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbheat197.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:181: vbincrease
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbincrease_in_actionVerb976_static.FOLLOW_vbincrease_in_actionVerb976);
                    vbincrease198=vbincrease();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbincrease198.getTree());

                    }
                    break;
                case 20 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:192: vbsubmerge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubmerge_in_actionVerb978_static.FOLLOW_vbsubmerge_in_actionVerb978);
                    vbsubmerge199=vbsubmerge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubmerge199.getTree());

                    }
                    break;
                case 21 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:203: vbpartition
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpartition_in_actionVerb980_static.FOLLOW_vbpartition_in_actionVerb980);
                    vbpartition200=vbpartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpartition200.getTree());

                    }
                    break;
                case 22 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:215: vbprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbprecipitate_in_actionVerb982_static.FOLLOW_vbprecipitate_in_actionVerb982);
                    vbprecipitate201=vbprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbprecipitate201.getTree());

                    }
                    break;
                case 23 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:229: vbpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpurify_in_actionVerb984_static.FOLLOW_vbpurify_in_actionVerb984);
                    vbpurify202=vbpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpurify202.getTree());

                    }
                    break;
                case 24 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:238: vbquench
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbquench_in_actionVerb986_static.FOLLOW_vbquench_in_actionVerb986);
                    vbquench203=vbquench();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbquench203.getTree());

                    }
                    break;
                case 25 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:247: vbrecover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbrecover_in_actionVerb988_static.FOLLOW_vbrecover_in_actionVerb988);
                    vbrecover204=vbrecover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbrecover204.getTree());

                    }
                    break;
                case 26 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:257: vbremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbremove_in_actionVerb990_static.FOLLOW_vbremove_in_actionVerb990);
                    vbremove205=vbremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbremove205.getTree());

                    }
                    break;
                case 27 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:266: vbstir
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbstir_in_actionVerb992_static.FOLLOW_vbstir_in_actionVerb992);
                    vbstir206=vbstir();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbstir206.getTree());

                    }
                    break;
                case 28 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:273: vbsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsynthesize_in_actionVerb994_static.FOLLOW_vbsynthesize_in_actionVerb994);
                    vbsynthesize207=vbsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize207.getTree());

                    }
                    break;
                case 29 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:286: vbwait
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwait_in_actionVerb996_static.FOLLOW_vbwait_in_actionVerb996);
                    vbwait208=vbwait();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwait208.getTree());

                    }
                    break;
                case 30 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:293: vbwash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwash_in_actionVerb998_static.FOLLOW_vbwash_in_actionVerb998);
                    vbwash209=vbwash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwash209.getTree());

                    }
                    break;
                case 31 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:300: vbyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbyield_in_actionVerb1000_static.FOLLOW_vbyield_in_actionVerb1000);
                    vbyield210=vbyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield210.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, actionVerb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "actionVerb"

    public static class otherVerb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "otherVerb"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:222:1: otherVerb : ( vb | vbd | vbg | vbn | vbp | vbz | vbchange | vbimmerse | vbsuspend | vbuse );
    public final ChemicalChunkerParser.otherVerb_return otherVerb() throws RecognitionException {
        ChemicalChunkerParser.otherVerb_return retval = new ChemicalChunkerParser.otherVerb_return();
        retval.start = input.LT(1);
        int otherVerb_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vb_return vb211 = null;

        ChemicalChunkerParser.vbd_return vbd212 = null;

        ChemicalChunkerParser.vbg_return vbg213 = null;

        ChemicalChunkerParser.vbn_return vbn214 = null;

        ChemicalChunkerParser.vbp_return vbp215 = null;

        ChemicalChunkerParser.vbz_return vbz216 = null;

        ChemicalChunkerParser.vbchange_return vbchange217 = null;

        ChemicalChunkerParser.vbimmerse_return vbimmerse218 = null;

        ChemicalChunkerParser.vbsuspend_return vbsuspend219 = null;

        ChemicalChunkerParser.vbuse_return vbuse220 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:222:11: ( vb | vbd | vbg | vbn | vbp | vbz | vbchange | vbimmerse | vbsuspend | vbuse )
            int alt73=10;
            switch ( input.LA(1) ) {
            case 171:
                {
                alt73=1;
                }
                break;
            case 172:
                {
                alt73=2;
                }
                break;
            case 173:
                {
                alt73=3;
                }
                break;
            case 174:
                {
                alt73=4;
                }
                break;
            case 175:
                {
                alt73=5;
                }
                break;
            case 176:
                {
                alt73=6;
                }
                break;
            case 86:
                {
                alt73=7;
                }
                break;
            case 114:
                {
                alt73=8;
                }
                break;
            case 97:
                {
                alt73=9;
                }
                break;
            case 85:
                {
                alt73=10;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;
            }

            switch (alt73) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:222:13: vb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vb_in_otherVerb1007_static.FOLLOW_vb_in_otherVerb1007);
                    vb211=vb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vb211.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:222:16: vbd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbd_in_otherVerb1009_static.FOLLOW_vbd_in_otherVerb1009);
                    vbd212=vbd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbd212.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:222:20: vbg
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbg_in_otherVerb1011_static.FOLLOW_vbg_in_otherVerb1011);
                    vbg213=vbg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbg213.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:222:24: vbn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbn_in_otherVerb1013_static.FOLLOW_vbn_in_otherVerb1013);
                    vbn214=vbn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbn214.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:222:28: vbp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbp_in_otherVerb1015_static.FOLLOW_vbp_in_otherVerb1015);
                    vbp215=vbp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbp215.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:222:32: vbz
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbz_in_otherVerb1017_static.FOLLOW_vbz_in_otherVerb1017);
                    vbz216=vbz();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbz216.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:222:36: vbchange
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbchange_in_otherVerb1019_static.FOLLOW_vbchange_in_otherVerb1019);
                    vbchange217=vbchange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbchange217.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:222:45: vbimmerse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbimmerse_in_otherVerb1021_static.FOLLOW_vbimmerse_in_otherVerb1021);
                    vbimmerse218=vbimmerse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbimmerse218.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:222:55: vbsuspend
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsuspend_in_otherVerb1023_static.FOLLOW_vbsuspend_in_otherVerb1023);
                    vbsuspend219=vbsuspend();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsuspend219.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:222:65: vbuse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbuse_in_otherVerb1025_static.FOLLOW_vbuse_in_otherVerb1025);
                    vbuse220=vbuse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbuse220.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, otherVerb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "otherVerb"

    public static class degassMultiVerb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "degassMultiVerb"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:224:1: degassMultiVerb : vbdegass cc vbfill ;
    public final ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb() throws RecognitionException {
        ChemicalChunkerParser.degassMultiVerb_return retval = new ChemicalChunkerParser.degassMultiVerb_return();
        retval.start = input.LT(1);
        int degassMultiVerb_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass221 = null;

        ChemicalChunkerParser.cc_return cc222 = null;

        ChemicalChunkerParser.vbfill_return vbfill223 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:225:2: ( vbdegass cc vbfill )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:225:4: vbdegass cc vbfill
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbdegass_in_degassMultiVerb1034_static.FOLLOW_vbdegass_in_degassMultiVerb1034);
            vbdegass221=vbdegass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass221.getTree());
            pushFollow(FOLLOW_cc_in_degassMultiVerb1036_static.FOLLOW_cc_in_degassMultiVerb1036);
            cc222=cc();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc222.getTree());
            pushFollow(FOLLOW_vbfill_in_degassMultiVerb1038_static.FOLLOW_vbfill_in_degassMultiVerb1038);
            vbfill223=vbfill();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill223.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, degassMultiVerb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "degassMultiVerb"

    public static class noun_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "noun"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:227:1: noun : nounStructure ( dash nounStructure )* ;
    public final ChemicalChunkerParser.noun_return noun() throws RecognitionException {
        ChemicalChunkerParser.noun_return retval = new ChemicalChunkerParser.noun_return();
        retval.start = input.LT(1);
        int noun_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure224 = null;

        ChemicalChunkerParser.dash_return dash225 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure226 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:227:7: ( nounStructure ( dash nounStructure )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:227:9: nounStructure ( dash nounStructure )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nounStructure_in_noun1047_static.FOLLOW_nounStructure_in_noun1047);
            nounStructure224=nounStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure224.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:227:23: ( dash nounStructure )*
            loop74:
            do {
                int alt74=2;
                switch ( input.LA(1) ) {
                case 136:
                    {
                    int LA74_2 = input.LA(2);

                    if ( (synpred193_ChemicalChunker()) ) {
                        alt74=1;
                    }


                    }
                    break;

                }

                switch (alt74) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:227:24: dash nounStructure
            	    {
            	    pushFollow(FOLLOW_dash_in_noun1050_static.FOLLOW_dash_in_noun1050);
            	    dash225=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash225.getTree());
            	    pushFollow(FOLLOW_nounStructure_in_noun1052_static.FOLLOW_nounStructure_in_noun1052);
            	    nounStructure226=nounStructure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure226.getTree());

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, noun_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "noun"

    public static class nounStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounStructure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:1: nounStructure : ( prp | prp_poss | captionLabel | nnplabel | citation | cycles | molecule | apparatus | unnamedmolecule | nnstate | procedureNode | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | nntime | nnatmosphere | tmunicode | quantity | nnchementity | nntemp | nnph | nnflash | nngeneral | nnamount | nneq | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | squareBracketedReference | nndry | nnextract | nnfilter | nnprecipitate | nnremove | nnyield | fw | sym | clause | ls | nnps | pos | oscarase );
    public final ChemicalChunkerParser.nounStructure_return nounStructure() throws RecognitionException {
        ChemicalChunkerParser.nounStructure_return retval = new ChemicalChunkerParser.nounStructure_return();
        retval.start = input.LT(1);
        int nounStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prp_return prp227 = null;

        ChemicalChunkerParser.prp_poss_return prp_poss228 = null;

        ChemicalChunkerParser.captionLabel_return captionLabel229 = null;

        ChemicalChunkerParser.nnplabel_return nnplabel230 = null;

        ChemicalChunkerParser.citation_return citation231 = null;

        ChemicalChunkerParser.cycles_return cycles232 = null;

        ChemicalChunkerParser.molecule_return molecule233 = null;

        ChemicalChunkerParser.apparatus_return apparatus234 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule235 = null;

        ChemicalChunkerParser.nnstate_return nnstate236 = null;

        ChemicalChunkerParser.procedureNode_return procedureNode237 = null;

        ChemicalChunkerParser.nn_return nn238 = null;

        ChemicalChunkerParser.nns_return nns239 = null;

        ChemicalChunkerParser.nnp_return nnp240 = null;

        ChemicalChunkerParser.nnadd_return nnadd241 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase242 = null;

        ChemicalChunkerParser.nnexample_return nnexample243 = null;

        ChemicalChunkerParser.range_return range244 = null;

        ChemicalChunkerParser.nntime_return nntime245 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere246 = null;

        ChemicalChunkerParser.tmunicode_return tmunicode247 = null;

        ChemicalChunkerParser.quantity_return quantity248 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity249 = null;

        ChemicalChunkerParser.nntemp_return nntemp250 = null;

        ChemicalChunkerParser.nnph_return nnph251 = null;

        ChemicalChunkerParser.nnflash_return nnflash252 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral253 = null;

        ChemicalChunkerParser.nnamount_return nnamount254 = null;

        ChemicalChunkerParser.nneq_return nneq255 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure256 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn257 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography258 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum259 = null;

        ChemicalChunkerParser.nncycle_return nncycle260 = null;

        ChemicalChunkerParser.nntimes_return nntimes261 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate262 = null;

        ChemicalChunkerParser.nnvol_return nnvol263 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify264 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize265 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture266 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference267 = null;

        ChemicalChunkerParser.nndry_return nndry268 = null;

        ChemicalChunkerParser.nnextract_return nnextract269 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter270 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate271 = null;

        ChemicalChunkerParser.nnremove_return nnremove272 = null;

        ChemicalChunkerParser.nnyield_return nnyield273 = null;

        ChemicalChunkerParser.fw_return fw274 = null;

        ChemicalChunkerParser.sym_return sym275 = null;

        ChemicalChunkerParser.clause_return clause276 = null;

        ChemicalChunkerParser.ls_return ls277 = null;

        ChemicalChunkerParser.nnps_return nnps278 = null;

        ChemicalChunkerParser.pos_return pos279 = null;

        ChemicalChunkerParser.oscarase_return oscarase280 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:15: ( prp | prp_poss | captionLabel | nnplabel | citation | cycles | molecule | apparatus | unnamedmolecule | nnstate | procedureNode | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | nntime | nnatmosphere | tmunicode | quantity | nnchementity | nntemp | nnph | nnflash | nngeneral | nnamount | nneq | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | squareBracketedReference | nndry | nnextract | nnfilter | nnprecipitate | nnremove | nnyield | fw | sym | clause | ls | nnps | pos | oscarase )
            int alt75=54;
            alt75 = dfa75.predict(input);
            switch (alt75) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:18: prp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_in_nounStructure1063_static.FOLLOW_prp_in_nounStructure1063);
                    prp227=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp227.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:22: prp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_poss_in_nounStructure1065_static.FOLLOW_prp_poss_in_nounStructure1065);
                    prp_poss228=prp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp_poss228.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:31: captionLabel
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_captionLabel_in_nounStructure1067_static.FOLLOW_captionLabel_in_nounStructure1067);
                    captionLabel229=captionLabel();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, captionLabel229.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:44: nnplabel
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnplabel_in_nounStructure1069_static.FOLLOW_nnplabel_in_nounStructure1069);
                    nnplabel230=nnplabel();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnplabel230.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:53: citation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_citation_in_nounStructure1071_static.FOLLOW_citation_in_nounStructure1071);
                    citation231=citation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation231.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:62: cycles
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cycles_in_nounStructure1073_static.FOLLOW_cycles_in_nounStructure1073);
                    cycles232=cycles();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cycles232.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:69: molecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molecule_in_nounStructure1075_static.FOLLOW_molecule_in_nounStructure1075);
                    molecule233=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule233.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:78: apparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_apparatus_in_nounStructure1077_static.FOLLOW_apparatus_in_nounStructure1077);
                    apparatus234=apparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus234.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:88: unnamedmolecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmolecule_in_nounStructure1079_static.FOLLOW_unnamedmolecule_in_nounStructure1079);
                    unnamedmolecule235=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule235.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:104: nnstate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnstate_in_nounStructure1081_static.FOLLOW_nnstate_in_nounStructure1081);
                    nnstate236=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate236.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:112: procedureNode
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_procedureNode_in_nounStructure1083_static.FOLLOW_procedureNode_in_nounStructure1083);
                    procedureNode237=procedureNode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureNode237.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:126: nn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nn_in_nounStructure1085_static.FOLLOW_nn_in_nounStructure1085);
                    nn238=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn238.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:129: nns
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nns_in_nounStructure1087_static.FOLLOW_nns_in_nounStructure1087);
                    nns239=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns239.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:133: nnp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnp_in_nounStructure1089_static.FOLLOW_nnp_in_nounStructure1089);
                    nnp240=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp240.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:137: nnadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnadd_in_nounStructure1091_static.FOLLOW_nnadd_in_nounStructure1091);
                    nnadd241=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd241.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:143: preparationphrase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_preparationphrase_in_nounStructure1093_static.FOLLOW_preparationphrase_in_nounStructure1093);
                    preparationphrase242=preparationphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase242.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:161: nnexample
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnexample_in_nounStructure1095_static.FOLLOW_nnexample_in_nounStructure1095);
                    nnexample243=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample243.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:171: range
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_range_in_nounStructure1097_static.FOLLOW_range_in_nounStructure1097);
                    range244=range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, range244.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:177: nntime
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntime_in_nounStructure1099_static.FOLLOW_nntime_in_nounStructure1099);
                    nntime245=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime245.getTree());

                    }
                    break;
                case 20 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:184: nnatmosphere
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnatmosphere_in_nounStructure1101_static.FOLLOW_nnatmosphere_in_nounStructure1101);
                    nnatmosphere246=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere246.getTree());

                    }
                    break;
                case 21 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:197: tmunicode
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_tmunicode_in_nounStructure1103_static.FOLLOW_tmunicode_in_nounStructure1103);
                    tmunicode247=tmunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tmunicode247.getTree());

                    }
                    break;
                case 22 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:207: quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantity_in_nounStructure1105_static.FOLLOW_quantity_in_nounStructure1105);
                    quantity248=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity248.getTree());

                    }
                    break;
                case 23 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:216: nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchementity_in_nounStructure1107_static.FOLLOW_nnchementity_in_nounStructure1107);
                    nnchementity249=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity249.getTree());

                    }
                    break;
                case 24 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:229: nntemp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntemp_in_nounStructure1109_static.FOLLOW_nntemp_in_nounStructure1109);
                    nntemp250=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp250.getTree());

                    }
                    break;
                case 25 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:236: nnph
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnph_in_nounStructure1111_static.FOLLOW_nnph_in_nounStructure1111);
                    nnph251=nnph();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnph251.getTree());

                    }
                    break;
                case 26 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:241: nnflash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnflash_in_nounStructure1113_static.FOLLOW_nnflash_in_nounStructure1113);
                    nnflash252=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash252.getTree());

                    }
                    break;
                case 27 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:249: nngeneral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nngeneral_in_nounStructure1115_static.FOLLOW_nngeneral_in_nounStructure1115);
                    nngeneral253=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral253.getTree());

                    }
                    break;
                case 28 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:259: nnamount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnamount_in_nounStructure1117_static.FOLLOW_nnamount_in_nounStructure1117);
                    nnamount254=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount254.getTree());

                    }
                    break;
                case 29 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:268: nneq
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nneq_in_nounStructure1119_static.FOLLOW_nneq_in_nounStructure1119);
                    nneq255=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq255.getTree());

                    }
                    break;
                case 30 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:273: nnpressure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpressure_in_nounStructure1121_static.FOLLOW_nnpressure_in_nounStructure1121);
                    nnpressure256=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure256.getTree());

                    }
                    break;
                case 31 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:284: nncolumn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncolumn_in_nounStructure1123_static.FOLLOW_nncolumn_in_nounStructure1123);
                    nncolumn257=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn257.getTree());

                    }
                    break;
                case 32 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:293: nnchromatography
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchromatography_in_nounStructure1125_static.FOLLOW_nnchromatography_in_nounStructure1125);
                    nnchromatography258=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography258.getTree());

                    }
                    break;
                case 33 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:310: nnvacuum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvacuum_in_nounStructure1127_static.FOLLOW_nnvacuum_in_nounStructure1127);
                    nnvacuum259=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum259.getTree());

                    }
                    break;
                case 34 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:319: nncycle
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncycle_in_nounStructure1129_static.FOLLOW_nncycle_in_nounStructure1129);
                    nncycle260=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle260.getTree());

                    }
                    break;
                case 35 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:327: nntimes
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntimes_in_nounStructure1131_static.FOLLOW_nntimes_in_nounStructure1131);
                    nntimes261=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes261.getTree());

                    }
                    break;
                case 36 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:335: nnconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnconcentrate_in_nounStructure1133_static.FOLLOW_nnconcentrate_in_nounStructure1133);
                    nnconcentrate262=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate262.getTree());

                    }
                    break;
                case 37 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:349: nnvol
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvol_in_nounStructure1135_static.FOLLOW_nnvol_in_nounStructure1135);
                    nnvol263=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol263.getTree());

                    }
                    break;
                case 38 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:355: nnpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpurify_in_nounStructure1137_static.FOLLOW_nnpurify_in_nounStructure1137);
                    nnpurify264=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify264.getTree());

                    }
                    break;
                case 39 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:364: nnsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnsynthesize_in_nounStructure1139_static.FOLLOW_nnsynthesize_in_nounStructure1139);
                    nnsynthesize265=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize265.getTree());

                    }
                    break;
                case 40 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:377: nnmixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnmixture_in_nounStructure1141_static.FOLLOW_nnmixture_in_nounStructure1141);
                    nnmixture266=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture266.getTree());

                    }
                    break;
                case 41 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:387: squareBracketedReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_squareBracketedReference_in_nounStructure1143_static.FOLLOW_squareBracketedReference_in_nounStructure1143);
                    squareBracketedReference267=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, squareBracketedReference267.getTree());

                    }
                    break;
                case 42 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:412: nndry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nndry_in_nounStructure1145_static.FOLLOW_nndry_in_nounStructure1145);
                    nndry268=nndry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nndry268.getTree());

                    }
                    break;
                case 43 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:418: nnextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnextract_in_nounStructure1147_static.FOLLOW_nnextract_in_nounStructure1147);
                    nnextract269=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract269.getTree());

                    }
                    break;
                case 44 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:428: nnfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnfilter_in_nounStructure1149_static.FOLLOW_nnfilter_in_nounStructure1149);
                    nnfilter270=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter270.getTree());

                    }
                    break;
                case 45 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:437: nnprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnprecipitate_in_nounStructure1151_static.FOLLOW_nnprecipitate_in_nounStructure1151);
                    nnprecipitate271=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate271.getTree());

                    }
                    break;
                case 46 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:451: nnremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnremove_in_nounStructure1153_static.FOLLOW_nnremove_in_nounStructure1153);
                    nnremove272=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove272.getTree());

                    }
                    break;
                case 47 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:460: nnyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnyield_in_nounStructure1155_static.FOLLOW_nnyield_in_nounStructure1155);
                    nnyield273=nnyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield273.getTree());

                    }
                    break;
                case 48 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:468: fw
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fw_in_nounStructure1157_static.FOLLOW_fw_in_nounStructure1157);
                    fw274=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw274.getTree());

                    }
                    break;
                case 49 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:471: sym
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sym_in_nounStructure1159_static.FOLLOW_sym_in_nounStructure1159);
                    sym275=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym275.getTree());

                    }
                    break;
                case 50 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:475: clause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_clause_in_nounStructure1161_static.FOLLOW_clause_in_nounStructure1161);
                    clause276=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause276.getTree());

                    }
                    break;
                case 51 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:482: ls
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ls_in_nounStructure1163_static.FOLLOW_ls_in_nounStructure1163);
                    ls277=ls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ls277.getTree());

                    }
                    break;
                case 52 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:485: nnps
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnps_in_nounStructure1165_static.FOLLOW_nnps_in_nounStructure1165);
                    nnps278=nnps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnps278.getTree());

                    }
                    break;
                case 53 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:490: pos
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pos_in_nounStructure1167_static.FOLLOW_pos_in_nounStructure1167);
                    pos279=pos();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pos279.getTree());

                    }
                    break;
                case 54 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:494: oscarase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarase_in_nounStructure1169_static.FOLLOW_oscarase_in_nounStructure1169);
                    oscarase280=oscarase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase280.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, nounStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounStructure"

    public static class prepphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphrase"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:233:1: prepphrase : ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther ) ;
    public final ChemicalChunkerParser.prepphrase_return prepphrase() throws RecognitionException {
        ChemicalChunkerParser.prepphrase_return retval = new ChemicalChunkerParser.prepphrase_return();
        retval.start = input.LT(1);
        int prepphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.neg_return neg281 = null;

        ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere282 = null;

        ChemicalChunkerParser.prepphraseTime_return prepphraseTime283 = null;

        ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp284 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN285 = null;

        ChemicalChunkerParser.prepphraseRole_return prepphraseRole286 = null;

        ChemicalChunkerParser.prepphraseOther_return prepphraseOther287 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:234:2: ( ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:234:5: ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:234:5: ( neg )?
            int alt76=2;
            switch ( input.LA(1) ) {
                case 135:
                    {
                    alt76=1;
                    }
                    break;
            }

            switch (alt76) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: neg
                    {
                    pushFollow(FOLLOW_neg_in_prepphrase1181_static.FOLLOW_neg_in_prepphrase1181);
                    neg281=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg281.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:234:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )
            int alt77=6;
            alt77 = dfa77.predict(input);
            switch (alt77) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:234:11: prepphraseAtmosphere
                    {
                    pushFollow(FOLLOW_prepphraseAtmosphere_in_prepphrase1185_static.FOLLOW_prepphraseAtmosphere_in_prepphrase1185);
                    prepphraseAtmosphere282=prepphraseAtmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAtmosphere282.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:234:32: prepphraseTime
                    {
                    pushFollow(FOLLOW_prepphraseTime_in_prepphrase1187_static.FOLLOW_prepphraseTime_in_prepphrase1187);
                    prepphraseTime283=prepphraseTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTime283.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:234:47: prepphraseTemp
                    {
                    pushFollow(FOLLOW_prepphraseTemp_in_prepphrase1189_static.FOLLOW_prepphraseTemp_in_prepphrase1189);
                    prepphraseTemp284=prepphraseTemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTemp284.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:234:62: prepphraseIN
                    {
                    pushFollow(FOLLOW_prepphraseIN_in_prepphrase1191_static.FOLLOW_prepphraseIN_in_prepphrase1191);
                    prepphraseIN285=prepphraseIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN285.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:234:75: prepphraseRole
                    {
                    pushFollow(FOLLOW_prepphraseRole_in_prepphrase1193_static.FOLLOW_prepphraseRole_in_prepphrase1193);
                    prepphraseRole286=prepphraseRole();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseRole286.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:234:90: prepphraseOther
                    {
                    pushFollow(FOLLOW_prepphraseOther_in_prepphrase1195_static.FOLLOW_prepphraseOther_in_prepphrase1195);
                    prepphraseOther287=prepphraseOther();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOther287.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, prepphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphrase"

    public static class prepphraseAtmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphere"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:236:1: prepphraseAtmosphere : prepphraseAtmosphereContent -> ^( AtmospherePhrase prepphraseAtmosphereContent ) ;
    public final ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphere_return retval = new ChemicalChunkerParser.prepphraseAtmosphere_return();
        retval.start = input.LT(1);
        int prepphraseAtmosphere_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent288 = null;


        RewriteRuleSubtreeStream stream_prepphraseAtmosphereContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseAtmosphereContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:237:2: ( prepphraseAtmosphereContent -> ^( AtmospherePhrase prepphraseAtmosphereContent ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:237:4: prepphraseAtmosphereContent
            {
            pushFollow(FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1207_static.FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1207);
            prepphraseAtmosphereContent288=prepphraseAtmosphereContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseAtmosphereContent.add(prepphraseAtmosphereContent288.getTree());


            // AST REWRITE
            // elements: prepphraseAtmosphereContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 237:32: -> ^( AtmospherePhrase prepphraseAtmosphereContent )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:237:36: ^( AtmospherePhrase prepphraseAtmosphereContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AtmospherePhrase, "AtmospherePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseAtmosphereContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, prepphraseAtmosphere_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphere"

    public static class prepphraseAtmosphereContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphereContent"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:239:1: prepphraseAtmosphereContent : inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? ;
    public final ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphereContent_return retval = new ChemicalChunkerParser.prepphraseAtmosphereContent_return();
        retval.start = input.LT(1);
        int prepphraseAtmosphereContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inunder_return inunder289 = null;

        ChemicalChunkerParser.dt_return dt290 = null;

        ChemicalChunkerParser.advAdj_return advAdj291 = null;

        ChemicalChunkerParser.molecule_return molecule292 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere293 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:240:2: ( inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:240:3: inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inunder_in_prepphraseAtmosphereContent1227_static.FOLLOW_inunder_in_prepphraseAtmosphereContent1227);
            inunder289=inunder();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder289.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:240:12: ( dt )?
            int alt78=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt78=1;
                    }
                    break;
            }

            switch (alt78) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseAtmosphereContent1230_static.FOLLOW_dt_in_prepphraseAtmosphereContent1230);
                    dt290=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt290.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:240:16: ( advAdj )*
            loop79:
            do {
                int alt79=2;
                alt79 = dfa79.predict(input);
                switch (alt79) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseAtmosphereContent1233_static.FOLLOW_advAdj_in_prepphraseAtmosphereContent1233);
            	    advAdj291=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj291.getTree());

            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);

            pushFollow(FOLLOW_molecule_in_prepphraseAtmosphereContent1236_static.FOLLOW_molecule_in_prepphraseAtmosphereContent1236);
            molecule292=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule292.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:240:33: ( nnatmosphere )?
            int alt80=2;
            switch ( input.LA(1) ) {
                case 68:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA80_3 = input.LA(3);

                            if ( (synpred255_ChemicalChunker()) ) {
                                alt80=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt80) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1238_static.FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1238);
                    nnatmosphere293=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere293.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, prepphraseAtmosphereContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphereContent"

    public static class prepphraseTime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTime"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:242:1: prepphraseTime : prepPhraseTimeStructure -> ^( TimePhrase prepPhraseTimeStructure ) ;
    public final ChemicalChunkerParser.prepphraseTime_return prepphraseTime() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTime_return retval = new ChemicalChunkerParser.prepphraseTime_return();
        retval.start = input.LT(1);
        int prepphraseTime_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure294 = null;


        RewriteRuleSubtreeStream stream_prepPhraseTimeStructure=new RewriteRuleSubtreeStream(adaptor,"rule prepPhraseTimeStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:243:2: ( prepPhraseTimeStructure -> ^( TimePhrase prepPhraseTimeStructure ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:243:3: prepPhraseTimeStructure
            {
            pushFollow(FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1248_static.FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1248);
            prepPhraseTimeStructure294=prepPhraseTimeStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepPhraseTimeStructure.add(prepPhraseTimeStructure294.getTree());


            // AST REWRITE
            // elements: prepPhraseTimeStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 243:27: -> ^( TimePhrase prepPhraseTimeStructure )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:243:31: ^( TimePhrase prepPhraseTimeStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TimePhrase, "TimePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepPhraseTimeStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, prepphraseTime_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTime"

    public static class prepPhraseTimeStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepPhraseTimeStructure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:245:1: prepPhraseTimeStructure : ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ ;
    public final ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure() throws RecognitionException {
        ChemicalChunkerParser.prepPhraseTimeStructure_return retval = new ChemicalChunkerParser.prepPhraseTimeStructure_return();
        retval.start = input.LT(1);
        int prepPhraseTimeStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj295 = null;

        ChemicalChunkerParser.inAll_return inAll296 = null;

        ChemicalChunkerParser.dt_return dt297 = null;

        ChemicalChunkerParser.advAdj_return advAdj298 = null;

        ChemicalChunkerParser.cd_return cd299 = null;

        ChemicalChunkerParser.nntime_return nntime300 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:246:2: ( ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:246:3: ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:246:3: ( advAdj )*
            loop81:
            do {
                int alt81=2;
                alt81 = dfa81.predict(input);
                switch (alt81) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1266_static.FOLLOW_advAdj_in_prepPhraseTimeStructure1266);
            	    advAdj295=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj295.getTree());

            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:246:11: ( inAll )?
            int alt82=2;
            switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 150:
                case 169:
                    {
                    alt82=1;
                    }
                    break;
            }

            switch (alt82) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepPhraseTimeStructure1269_static.FOLLOW_inAll_in_prepPhraseTimeStructure1269);
                    inAll296=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll296.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:246:19: ( dt )?
            int alt83=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt83=1;
                    }
                    break;
            }

            switch (alt83) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepPhraseTimeStructure1273_static.FOLLOW_dt_in_prepPhraseTimeStructure1273);
                    dt297=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt297.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:246:23: ( advAdj )*
            loop84:
            do {
                int alt84=2;
                switch ( input.LA(1) ) {
                case 40:
                case 41:
                case 45:
                case 151:
                case 152:
                case 153:
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt84=1;
                    }
                    break;

                }

                switch (alt84) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1276_static.FOLLOW_advAdj_in_prepPhraseTimeStructure1276);
            	    advAdj298=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj298.getTree());

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:246:31: ( cd )?
            int alt85=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt85=1;
                    }
                    break;
            }

            switch (alt85) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepPhraseTimeStructure1279_static.FOLLOW_cd_in_prepPhraseTimeStructure1279);
                    cd299=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd299.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:246:35: ( nntime )+
            int cnt86=0;
            loop86:
            do {
                int alt86=2;
                switch ( input.LA(1) ) {
                case 64:
                    {
                    int LA86_2 = input.LA(2);

                    if ( (synpred261_ChemicalChunker()) ) {
                        alt86=1;
                    }


                    }
                    break;

                }

                switch (alt86) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nntime
            	    {
            	    pushFollow(FOLLOW_nntime_in_prepPhraseTimeStructure1282_static.FOLLOW_nntime_in_prepPhraseTimeStructure1282);
            	    nntime300=nntime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime300.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt86 >= 1 ) break loop86;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(86, input);
                        throw eee;
                }
                cnt86++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, prepPhraseTimeStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepPhraseTimeStructure"

    public static class prepphraseTemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTemp"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:248:1: prepphraseTemp : prepphraseTempContent -> ^( TempPhrase prepphraseTempContent ) ;
    public final ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTemp_return retval = new ChemicalChunkerParser.prepphraseTemp_return();
        retval.start = input.LT(1);
        int prepphraseTemp_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent301 = null;


        RewriteRuleSubtreeStream stream_prepphraseTempContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseTempContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:248:15: ( prepphraseTempContent -> ^( TempPhrase prepphraseTempContent ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:248:18: prepphraseTempContent
            {
            pushFollow(FOLLOW_prepphraseTempContent_in_prepphraseTemp1292_static.FOLLOW_prepphraseTempContent_in_prepphraseTemp1292);
            prepphraseTempContent301=prepphraseTempContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseTempContent.add(prepphraseTempContent301.getTree());


            // AST REWRITE
            // elements: prepphraseTempContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 248:40: -> ^( TempPhrase prepphraseTempContent )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:248:44: ^( TempPhrase prepphraseTempContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TempPhrase, "TempPhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseTempContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, prepphraseTemp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTemp"

    public static class prepphraseTempContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTempContent"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:250:1: prepphraseTempContent : ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ ;
    public final ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTempContent_return retval = new ChemicalChunkerParser.prepphraseTempContent_return();
        retval.start = input.LT(1);
        int prepphraseTempContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj302 = null;

        ChemicalChunkerParser.inAll_return inAll303 = null;

        ChemicalChunkerParser.dt_return dt304 = null;

        ChemicalChunkerParser.advAdj_return advAdj305 = null;

        ChemicalChunkerParser.cd_return cd306 = null;

        ChemicalChunkerParser.nntemp_return nntemp307 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:251:2: ( ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:251:5: ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:251:5: ( advAdj )?
            int alt87=2;
            alt87 = dfa87.predict(input);
            switch (alt87) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1313_static.FOLLOW_advAdj_in_prepphraseTempContent1313);
                    advAdj302=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj302.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:251:13: ( inAll )?
            int alt88=2;
            switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 150:
                case 169:
                    {
                    alt88=1;
                    }
                    break;
            }

            switch (alt88) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepphraseTempContent1316_static.FOLLOW_inAll_in_prepphraseTempContent1316);
                    inAll303=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll303.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:251:20: ( dt )?
            int alt89=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt89=1;
                    }
                    break;
            }

            switch (alt89) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseTempContent1319_static.FOLLOW_dt_in_prepphraseTempContent1319);
                    dt304=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt304.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:251:24: ( advAdj )?
            int alt90=2;
            switch ( input.LA(1) ) {
                case 40:
                case 41:
                case 45:
                case 151:
                case 152:
                case 153:
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt90=1;
                    }
                    break;
            }

            switch (alt90) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1322_static.FOLLOW_advAdj_in_prepphraseTempContent1322);
                    advAdj305=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj305.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:251:32: ( cd )?
            int alt91=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt91=1;
                    }
                    break;
            }

            switch (alt91) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepphraseTempContent1325_static.FOLLOW_cd_in_prepphraseTempContent1325);
                    cd306=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd306.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:251:36: ( nntemp )+
            int cnt92=0;
            loop92:
            do {
                int alt92=2;
                switch ( input.LA(1) ) {
                case 72:
                    {
                    int LA92_2 = input.LA(2);

                    if ( (synpred267_ChemicalChunker()) ) {
                        alt92=1;
                    }


                    }
                    break;

                }

                switch (alt92) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nntemp
            	    {
            	    pushFollow(FOLLOW_nntemp_in_prepphraseTempContent1328_static.FOLLOW_nntemp_in_prepphraseTempContent1328);
            	    nntemp307=nntemp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp307.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt92 >= 1 ) break loop92;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(92, input);
                        throw eee;
                }
                cnt92++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, prepphraseTempContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTempContent"

    public static class prepphraseIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseIN"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:253:1: prepphraseIN : inin molecule -> ^( PrepPhrase inin molecule ) ;
    public final ChemicalChunkerParser.prepphraseIN_return prepphraseIN() throws RecognitionException {
        ChemicalChunkerParser.prepphraseIN_return retval = new ChemicalChunkerParser.prepphraseIN_return();
        retval.start = input.LT(1);
        int prepphraseIN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin308 = null;

        ChemicalChunkerParser.molecule_return molecule309 = null;


        RewriteRuleSubtreeStream stream_inin=new RewriteRuleSubtreeStream(adaptor,"rule inin");
        RewriteRuleSubtreeStream stream_molecule=new RewriteRuleSubtreeStream(adaptor,"rule molecule");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:254:2: ( inin molecule -> ^( PrepPhrase inin molecule ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:254:3: inin molecule
            {
            pushFollow(FOLLOW_inin_in_prepphraseIN1337_static.FOLLOW_inin_in_prepphraseIN1337);
            inin308=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inin.add(inin308.getTree());
            pushFollow(FOLLOW_molecule_in_prepphraseIN1339_static.FOLLOW_molecule_in_prepphraseIN1339);
            molecule309=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_molecule.add(molecule309.getTree());


            // AST REWRITE
            // elements: molecule, inin
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 254:17: -> ^( PrepPhrase inin molecule )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:254:21: ^( PrepPhrase inin molecule )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inin.nextTree());
                adaptor.addChild(root_1, stream_molecule.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, prepphraseIN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseIN"

    public static class prepphraseRole_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseRole"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:256:1: prepphraseRole : inas ( dt )? nnchementity -> ^( RolePrepPhrase inas ( dt )? nnchementity ) ;
    public final ChemicalChunkerParser.prepphraseRole_return prepphraseRole() throws RecognitionException {
        ChemicalChunkerParser.prepphraseRole_return retval = new ChemicalChunkerParser.prepphraseRole_return();
        retval.start = input.LT(1);
        int prepphraseRole_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inas_return inas310 = null;

        ChemicalChunkerParser.dt_return dt311 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity312 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_inas=new RewriteRuleSubtreeStream(adaptor,"rule inas");
        RewriteRuleSubtreeStream stream_nnchementity=new RewriteRuleSubtreeStream(adaptor,"rule nnchementity");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:257:2: ( inas ( dt )? nnchementity -> ^( RolePrepPhrase inas ( dt )? nnchementity ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:257:3: inas ( dt )? nnchementity
            {
            pushFollow(FOLLOW_inas_in_prepphraseRole1360_static.FOLLOW_inas_in_prepphraseRole1360);
            inas310=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inas.add(inas310.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:257:8: ( dt )?
            int alt93=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt93=1;
                    }
                    break;
            }

            switch (alt93) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseRole1362_static.FOLLOW_dt_in_prepphraseRole1362);
                    dt311=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt311.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnchementity_in_prepphraseRole1365_static.FOLLOW_nnchementity_in_prepphraseRole1365);
            nnchementity312=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnchementity.add(nnchementity312.getTree());


            // AST REWRITE
            // elements: inas, nnchementity, dt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 257:25: -> ^( RolePrepPhrase inas ( dt )? nnchementity )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:257:28: ^( RolePrepPhrase inas ( dt )? nnchementity )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RolePrepPhrase, "RolePrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inas.nextTree());
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:257:51: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                adaptor.addChild(root_1, stream_nnchementity.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, prepphraseRole_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseRole"

    public static class prepphraseOther_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOther"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:259:1: prepphraseOther : ( advAdj )* ( inMost )+ nounphrase -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOther_return prepphraseOther() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOther_return retval = new ChemicalChunkerParser.prepphraseOther_return();
        retval.start = input.LT(1);
        int prepphraseOther_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj313 = null;

        ChemicalChunkerParser.inMost_return inMost314 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase315 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inMost=new RewriteRuleSubtreeStream(adaptor,"rule inMost");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:260:2: ( ( advAdj )* ( inMost )+ nounphrase -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:260:4: ( advAdj )* ( inMost )+ nounphrase
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:260:4: ( advAdj )*
            loop94:
            do {
                int alt94=2;
                switch ( input.LA(1) ) {
                case 40:
                case 41:
                case 45:
                case 151:
                case 152:
                case 153:
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt94=1;
                    }
                    break;

                }

                switch (alt94) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseOther1388_static.FOLLOW_advAdj_in_prepphraseOther1388);
            	    advAdj313=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_advAdj.add(advAdj313.getTree());

            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:260:12: ( inMost )+
            int cnt95=0;
            loop95:
            do {
                int alt95=2;
                switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 150:
                case 169:
                    {
                    alt95=1;
                    }
                    break;

                }

                switch (alt95) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: inMost
            	    {
            	    pushFollow(FOLLOW_inMost_in_prepphraseOther1391_static.FOLLOW_inMost_in_prepphraseOther1391);
            	    inMost314=inMost();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_inMost.add(inMost314.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt95 >= 1 ) break loop95;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(95, input);
                        throw eee;
                }
                cnt95++;
            } while (true);

            pushFollow(FOLLOW_nounphrase_in_prepphraseOther1395_static.FOLLOW_nounphrase_in_prepphraseOther1395);
            nounphrase315=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase315.getTree());


            // AST REWRITE
            // elements: inMost, nounphrase, advAdj
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 260:32: -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:260:36: ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:260:50: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                if ( !(stream_inMost.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_inMost.hasNext() ) {
                    adaptor.addChild(root_1, stream_inMost.nextTree());

                }
                stream_inMost.reset();
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, prepphraseOther_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseOther"

    public static class prepphraseOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOf"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:262:1: prepphraseOf : inof nounphrase -> ^( PrepPhrase inof nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOf_return prepphraseOf() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOf_return retval = new ChemicalChunkerParser.prepphraseOf_return();
        retval.start = input.LT(1);
        int prepphraseOf_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inof_return inof316 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase317 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inof=new RewriteRuleSubtreeStream(adaptor,"rule inof");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:263:2: ( inof nounphrase -> ^( PrepPhrase inof nounphrase ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:263:4: inof nounphrase
            {
            pushFollow(FOLLOW_inof_in_prepphraseOf1421_static.FOLLOW_inof_in_prepphraseOf1421);
            inof316=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inof.add(inof316.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseOf1424_static.FOLLOW_nounphrase_in_prepphraseOf1424);
            nounphrase317=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase317.getTree());


            // AST REWRITE
            // elements: inof, nounphrase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 263:20: -> ^( PrepPhrase inof nounphrase )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:263:24: ^( PrepPhrase inof nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inof.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, prepphraseOf_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseOf"

    public static class prepphraseAfter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAfter"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:265:1: prepphraseAfter : ( advAdj )? inafter nounphrase -> ^( PrepPhrase ( advAdj )* inafter nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseAfter_return prepphraseAfter() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAfter_return retval = new ChemicalChunkerParser.prepphraseAfter_return();
        retval.start = input.LT(1);
        int prepphraseAfter_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj318 = null;

        ChemicalChunkerParser.inafter_return inafter319 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase320 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inafter=new RewriteRuleSubtreeStream(adaptor,"rule inafter");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:266:2: ( ( advAdj )? inafter nounphrase -> ^( PrepPhrase ( advAdj )* inafter nounphrase ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:266:5: ( advAdj )? inafter nounphrase
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:266:5: ( advAdj )?
            int alt96=2;
            switch ( input.LA(1) ) {
                case 40:
                case 41:
                case 45:
                case 151:
                case 152:
                case 153:
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt96=1;
                    }
                    break;
            }

            switch (alt96) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseAfter1446_static.FOLLOW_advAdj_in_prepphraseAfter1446);
                    advAdj318=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_advAdj.add(advAdj318.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_inafter_in_prepphraseAfter1449_static.FOLLOW_inafter_in_prepphraseAfter1449);
            inafter319=inafter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inafter.add(inafter319.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseAfter1452_static.FOLLOW_nounphrase_in_prepphraseAfter1452);
            nounphrase320=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase320.getTree());


            // AST REWRITE
            // elements: inafter, nounphrase, advAdj
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 266:33: -> ^( PrepPhrase ( advAdj )* inafter nounphrase )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:266:37: ^( PrepPhrase ( advAdj )* inafter nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:266:51: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                adaptor.addChild(root_1, stream_inafter.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, prepphraseAfter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAfter"

    public static class preparationphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preparationphrase"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:268:1: preparationphrase : vbsynthesize inas ( nnexample cd | prepphrase ) ;
    public final ChemicalChunkerParser.preparationphrase_return preparationphrase() throws RecognitionException {
        ChemicalChunkerParser.preparationphrase_return retval = new ChemicalChunkerParser.preparationphrase_return();
        retval.start = input.LT(1);
        int preparationphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize321 = null;

        ChemicalChunkerParser.inas_return inas322 = null;

        ChemicalChunkerParser.nnexample_return nnexample323 = null;

        ChemicalChunkerParser.cd_return cd324 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase325 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:269:2: ( vbsynthesize inas ( nnexample cd | prepphrase ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:269:4: vbsynthesize inas ( nnexample cd | prepphrase )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbsynthesize_in_preparationphrase1477_static.FOLLOW_vbsynthesize_in_preparationphrase1477);
            vbsynthesize321=vbsynthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize321.getTree());
            pushFollow(FOLLOW_inas_in_preparationphrase1479_static.FOLLOW_inas_in_preparationphrase1479);
            inas322=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inas322.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:269:22: ( nnexample cd | prepphrase )
            int alt97=2;
            switch ( input.LA(1) ) {
            case 83:
                {
                alt97=1;
                }
                break;
            case 40:
            case 41:
            case 45:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 64:
            case 72:
            case 135:
            case 146:
            case 147:
            case 150:
            case 151:
            case 152:
            case 153:
            case 164:
            case 165:
            case 166:
            case 167:
            case 169:
                {
                alt97=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;
            }

            switch (alt97) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:269:23: nnexample cd
                    {
                    pushFollow(FOLLOW_nnexample_in_preparationphrase1482_static.FOLLOW_nnexample_in_preparationphrase1482);
                    nnexample323=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample323.getTree());
                    pushFollow(FOLLOW_cd_in_preparationphrase1484_static.FOLLOW_cd_in_preparationphrase1484);
                    cd324=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd324.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:269:37: prepphrase
                    {
                    pushFollow(FOLLOW_prepphrase_in_preparationphrase1487_static.FOLLOW_prepphrase_in_preparationphrase1487);
                    prepphrase325=prepphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase325.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, preparationphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "preparationphrase"

    public static class multiApparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiApparatus"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:271:1: multiApparatus : apparatus ( ( conjunction )* apparatus )* ;
    public final ChemicalChunkerParser.multiApparatus_return multiApparatus() throws RecognitionException {
        ChemicalChunkerParser.multiApparatus_return retval = new ChemicalChunkerParser.multiApparatus_return();
        retval.start = input.LT(1);
        int multiApparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.apparatus_return apparatus326 = null;

        ChemicalChunkerParser.conjunction_return conjunction327 = null;

        ChemicalChunkerParser.apparatus_return apparatus328 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:272:2: ( apparatus ( ( conjunction )* apparatus )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:272:4: apparatus ( ( conjunction )* apparatus )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_apparatus_in_multiApparatus1498_static.FOLLOW_apparatus_in_multiApparatus1498);
            apparatus326=apparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus326.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:272:14: ( ( conjunction )* apparatus )*
            loop99:
            do {
                int alt99=2;
                alt99 = dfa99.predict(input);
                switch (alt99) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:272:15: ( conjunction )* apparatus
            	    {
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:272:15: ( conjunction )*
            	    loop98:
            	    do {
            	        int alt98=2;
            	        alt98 = dfa98.predict(input);
            	        switch (alt98) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_multiApparatus1501_static.FOLLOW_conjunction_in_multiApparatus1501);
            	    	    conjunction327=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction327.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop98;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_apparatus_in_multiApparatus1504_static.FOLLOW_apparatus_in_multiApparatus1504);
            	    apparatus328=apparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus328.getTree());

            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, multiApparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiApparatus"

    public static class apparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apparatus"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:273:1: apparatus : ( dt )? ( preapparatus )* ( nnApp )+ -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ ) ;
    public final ChemicalChunkerParser.apparatus_return apparatus() throws RecognitionException {
        ChemicalChunkerParser.apparatus_return retval = new ChemicalChunkerParser.apparatus_return();
        retval.start = input.LT(1);
        int apparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt329 = null;

        ChemicalChunkerParser.preapparatus_return preapparatus330 = null;

        ChemicalChunkerParser.nnApp_return nnApp331 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_nnApp=new RewriteRuleSubtreeStream(adaptor,"rule nnApp");
        RewriteRuleSubtreeStream stream_preapparatus=new RewriteRuleSubtreeStream(adaptor,"rule preapparatus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:274:2: ( ( dt )? ( preapparatus )* ( nnApp )+ -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:274:4: ( dt )? ( preapparatus )* ( nnApp )+
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:274:4: ( dt )?
            int alt100=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt100=1;
                    }
                    break;
            }

            switch (alt100) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_apparatus1515_static.FOLLOW_dt_in_apparatus1515);
                    dt329=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt329.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:274:8: ( preapparatus )*
            loop101:
            do {
                int alt101=2;
                switch ( input.LA(1) ) {
                case 40:
                case 41:
                case 45:
                case 46:
                case 63:
                case 71:
                case 73:
                case 77:
                case 84:
                case 89:
                case 130:
                case 133:
                case 139:
                case 143:
                case 146:
                case 151:
                case 152:
                case 153:
                case 156:
                    {
                    alt101=1;
                    }
                    break;

                }

                switch (alt101) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: preapparatus
            	    {
            	    pushFollow(FOLLOW_preapparatus_in_apparatus1518_static.FOLLOW_preapparatus_in_apparatus1518);
            	    preapparatus330=preapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_preapparatus.add(preapparatus330.getTree());

            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:274:22: ( nnApp )+
            int cnt102=0;
            loop102:
            do {
                int alt102=2;
                switch ( input.LA(1) ) {
                case 100:
                    {
                    int LA102_2 = input.LA(2);

                    if ( (synpred277_ChemicalChunker()) ) {
                        alt102=1;
                    }


                    }
                    break;

                }

                switch (alt102) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nnApp
            	    {
            	    pushFollow(FOLLOW_nnApp_in_apparatus1521_static.FOLLOW_nnApp_in_apparatus1521);
            	    nnApp331=nnApp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nnApp.add(nnApp331.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt102 >= 1 ) break loop102;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(102, input);
                        throw eee;
                }
                cnt102++;
            } while (true);



            // AST REWRITE
            // elements: dt, preapparatus, nnApp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 274:28: -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:274:31: ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(APPARATUS, "APPARATUS"), root_1);

                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:274:45: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:274:49: ( preapparatus )*
                while ( stream_preapparatus.hasNext() ) {
                    adaptor.addChild(root_1, stream_preapparatus.nextTree());

                }
                stream_preapparatus.reset();
                if ( !(stream_nnApp.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nnApp.hasNext() ) {
                    adaptor.addChild(root_1, stream_nnApp.nextTree());

                }
                stream_nnApp.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, apparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "apparatus"

    public static class nnApp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnApp"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:276:1: nnApp : ( nnapparatus )+ ( dash nnapparatus )* ;
    public final ChemicalChunkerParser.nnApp_return nnApp() throws RecognitionException {
        ChemicalChunkerParser.nnApp_return retval = new ChemicalChunkerParser.nnApp_return();
        retval.start = input.LT(1);
        int nnApp_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus332 = null;

        ChemicalChunkerParser.dash_return dash333 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus334 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:277:2: ( ( nnapparatus )+ ( dash nnapparatus )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:277:4: ( nnapparatus )+ ( dash nnapparatus )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:277:4: ( nnapparatus )+
            int cnt103=0;
            loop103:
            do {
                int alt103=2;
                switch ( input.LA(1) ) {
                case 100:
                    {
                    int LA103_2 = input.LA(2);

                    if ( (synpred278_ChemicalChunker()) ) {
                        alt103=1;
                    }


                    }
                    break;

                }

                switch (alt103) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nnapparatus
            	    {
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp1548_static.FOLLOW_nnapparatus_in_nnApp1548);
            	    nnapparatus332=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus332.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt103 >= 1 ) break loop103;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(103, input);
                        throw eee;
                }
                cnt103++;
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:277:17: ( dash nnapparatus )*
            loop104:
            do {
                int alt104=2;
                switch ( input.LA(1) ) {
                case 136:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 100:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA104_5 = input.LA(5);

                                if ( (synpred279_ChemicalChunker()) ) {
                                    alt104=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt104) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:277:18: dash nnapparatus
            	    {
            	    pushFollow(FOLLOW_dash_in_nnApp1552_static.FOLLOW_dash_in_nnApp1552);
            	    dash333=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash333.getTree());
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp1554_static.FOLLOW_nnapparatus_in_nnApp1554);
            	    nnapparatus334=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus334.getTree());

            	    }
            	    break;

            	default :
            	    break loop104;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, nnApp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnApp"

    public static class preapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preapparatus"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:278:1: preapparatus : ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ ;
    public final ChemicalChunkerParser.preapparatus_return preapparatus() throws RecognitionException {
        ChemicalChunkerParser.preapparatus_return retval = new ChemicalChunkerParser.preapparatus_return();
        retval.start = input.LT(1);
        int preapparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity335 = null;

        ChemicalChunkerParser.adj_return adj336 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure337 = null;

        ChemicalChunkerParser.nnadd_return nnadd338 = null;

        ChemicalChunkerParser.molecule_return molecule339 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity340 = null;

        ChemicalChunkerParser.nnstate_return nnstate341 = null;

        ChemicalChunkerParser.nn_return nn342 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:279:2: ( ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:279:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:279:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            int cnt105=0;
            loop105:
            do {
                int alt105=9;
                alt105 = dfa105.predict(input);
                switch (alt105) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:279:8: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_preapparatus1568_static.FOLLOW_quantity_in_preapparatus1568);
            	    quantity335=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity335.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:279:17: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_preapparatus1570_static.FOLLOW_adj_in_preapparatus1570);
            	    adj336=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj336.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:279:21: nnpressure
            	    {
            	    pushFollow(FOLLOW_nnpressure_in_preapparatus1572_static.FOLLOW_nnpressure_in_preapparatus1572);
            	    nnpressure337=nnpressure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure337.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:279:32: nnadd
            	    {
            	    pushFollow(FOLLOW_nnadd_in_preapparatus1574_static.FOLLOW_nnadd_in_preapparatus1574);
            	    nnadd338=nnadd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd338.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:279:38: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_preapparatus1576_static.FOLLOW_molecule_in_preapparatus1576);
            	    molecule339=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule339.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:279:47: nnchementity
            	    {
            	    pushFollow(FOLLOW_nnchementity_in_preapparatus1578_static.FOLLOW_nnchementity_in_preapparatus1578);
            	    nnchementity340=nnchementity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity340.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:279:60: nnstate
            	    {
            	    pushFollow(FOLLOW_nnstate_in_preapparatus1580_static.FOLLOW_nnstate_in_preapparatus1580);
            	    nnstate341=nnstate();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate341.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:279:68: nn
            	    {
            	    pushFollow(FOLLOW_nn_in_preapparatus1582_static.FOLLOW_nn_in_preapparatus1582);
            	    nn342=nn();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn342.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt105 >= 1 ) break loop105;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(105, input);
                        throw eee;
                }
                cnt105++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, preapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "preapparatus"

    public static class oscarCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:281:1: oscarCompound : ( jjcomp | adj )* oscarCompoundStructure ( adj )? ( nnstate )? ( numericReferenceOrQuantity | nnchementity )? ( quantity )* ( fromProcedure )? ;
    public final ChemicalChunkerParser.oscarCompound_return oscarCompound() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound_return retval = new ChemicalChunkerParser.oscarCompound_return();
        retval.start = input.LT(1);
        int oscarCompound_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp343 = null;

        ChemicalChunkerParser.adj_return adj344 = null;

        ChemicalChunkerParser.oscarCompoundStructure_return oscarCompoundStructure345 = null;

        ChemicalChunkerParser.adj_return adj346 = null;

        ChemicalChunkerParser.nnstate_return nnstate347 = null;

        ChemicalChunkerParser.numericReferenceOrQuantity_return numericReferenceOrQuantity348 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity349 = null;

        ChemicalChunkerParser.quantity_return quantity350 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure351 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:281:15: ( ( jjcomp | adj )* oscarCompoundStructure ( adj )? ( nnstate )? ( numericReferenceOrQuantity | nnchementity )? ( quantity )* ( fromProcedure )? )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:281:18: ( jjcomp | adj )* oscarCompoundStructure ( adj )? ( nnstate )? ( numericReferenceOrQuantity | nnchementity )? ( quantity )* ( fromProcedure )?
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:281:18: ( jjcomp | adj )*
            loop106:
            do {
                int alt106=3;
                switch ( input.LA(1) ) {
                case 46:
                    {
                    alt106=1;
                    }
                    break;
                case 40:
                case 41:
                case 45:
                case 151:
                case 152:
                case 153:
                    {
                    alt106=2;
                    }
                    break;

                }

                switch (alt106) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:281:19: jjcomp
            	    {
            	    pushFollow(FOLLOW_jjcomp_in_oscarCompound1595_static.FOLLOW_jjcomp_in_oscarCompound1595);
            	    jjcomp343=jjcomp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp343.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:281:26: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_oscarCompound1597_static.FOLLOW_adj_in_oscarCompound1597);
            	    adj344=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj344.getTree());

            	    }
            	    break;

            	default :
            	    break loop106;
                }
            } while (true);

            pushFollow(FOLLOW_oscarCompoundStructure_in_oscarCompound1601_static.FOLLOW_oscarCompoundStructure_in_oscarCompound1601);
            oscarCompoundStructure345=oscarCompoundStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompoundStructure345.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:281:55: ( adj )?
            int alt107=2;
            alt107 = dfa107.predict(input);
            switch (alt107) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_oscarCompound1603_static.FOLLOW_adj_in_oscarCompound1603);
                    adj346=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj346.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:281:60: ( nnstate )?
            int alt108=2;
            switch ( input.LA(1) ) {
                case 63:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA108_3 = input.LA(3);

                            if ( (synpred291_ChemicalChunker()) ) {
                                alt108=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt108) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nnstate
                    {
                    pushFollow(FOLLOW_nnstate_in_oscarCompound1606_static.FOLLOW_nnstate_in_oscarCompound1606);
                    nnstate347=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate347.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:281:69: ( numericReferenceOrQuantity | nnchementity )?
            int alt109=3;
            alt109 = dfa109.predict(input);
            switch (alt109) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:281:70: numericReferenceOrQuantity
                    {
                    pushFollow(FOLLOW_numericReferenceOrQuantity_in_oscarCompound1610_static.FOLLOW_numericReferenceOrQuantity_in_oscarCompound1610);
                    numericReferenceOrQuantity348=numericReferenceOrQuantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericReferenceOrQuantity348.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:281:99: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_oscarCompound1614_static.FOLLOW_nnchementity_in_oscarCompound1614);
                    nnchementity349=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity349.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:281:115: ( quantity )*
            loop110:
            do {
                int alt110=2;
                alt110 = dfa110.predict(input);
                switch (alt110) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_oscarCompound1619_static.FOLLOW_quantity_in_oscarCompound1619);
            	    quantity350=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity350.getTree());

            	    }
            	    break;

            	default :
            	    break loop110;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:281:125: ( fromProcedure )?
            int alt111=2;
            alt111 = dfa111.predict(input);
            switch (alt111) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: fromProcedure
                    {
                    pushFollow(FOLLOW_fromProcedure_in_oscarCompound1622_static.FOLLOW_fromProcedure_in_oscarCompound1622);
                    fromProcedure351=fromProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure351.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, oscarCompound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound"

    public static class oscarCompoundStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompoundStructure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:283:1: oscarCompoundStructure : ( ( oscarcm )+ ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure ) -> ^( OSCARCM ( oscarcm )* ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? ) ;
    public final ChemicalChunkerParser.oscarCompoundStructure_return oscarCompoundStructure() throws RecognitionException {
        ChemicalChunkerParser.oscarCompoundStructure_return retval = new ChemicalChunkerParser.oscarCompoundStructure_return();
        retval.start = input.LT(1);
        int oscarCompoundStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm352 = null;

        ChemicalChunkerParser.afterOscarCompoundStructure_return afterOscarCompoundStructure353 = null;

        ChemicalChunkerParser.bracketedOscarCompoundStructure_return bracketedOscarCompoundStructure354 = null;


        RewriteRuleSubtreeStream stream_bracketedOscarCompoundStructure=new RewriteRuleSubtreeStream(adaptor,"rule bracketedOscarCompoundStructure");
        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_afterOscarCompoundStructure=new RewriteRuleSubtreeStream(adaptor,"rule afterOscarCompoundStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:283:23: ( ( ( oscarcm )+ ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure ) -> ^( OSCARCM ( oscarcm )* ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:283:25: ( ( oscarcm )+ ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure )
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:283:25: ( ( oscarcm )+ ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure )
            int alt114=2;
            switch ( input.LA(1) ) {
            case 84:
                {
                alt114=1;
                }
                break;
            case 143:
                {
                alt114=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;
            }

            switch (alt114) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:283:26: ( oscarcm )+ ( afterOscarCompoundStructure )?
                    {
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:283:26: ( oscarcm )+
                    int cnt112=0;
                    loop112:
                    do {
                        int alt112=2;
                        switch ( input.LA(1) ) {
                        case 84:
                            {
                            int LA112_2 = input.LA(2);

                            if ( (synpred296_ChemicalChunker()) ) {
                                alt112=1;
                            }


                            }
                            break;

                        }

                        switch (alt112) {
                    	case 1 :
                    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: oscarcm
                    	    {
                    	    pushFollow(FOLLOW_oscarcm_in_oscarCompoundStructure1631_static.FOLLOW_oscarcm_in_oscarCompoundStructure1631);
                    	    oscarcm352=oscarcm();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm352.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt112 >= 1 ) break loop112;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(112, input);
                                throw eee;
                        }
                        cnt112++;
                    } while (true);

                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:283:35: ( afterOscarCompoundStructure )?
                    int alt113=2;
                    alt113 = dfa113.predict(input);
                    switch (alt113) {
                        case 1 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: afterOscarCompoundStructure
                            {
                            pushFollow(FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1634_static.FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1634);
                            afterOscarCompoundStructure353=afterOscarCompoundStructure();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_afterOscarCompoundStructure.add(afterOscarCompoundStructure353.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:283:66: bracketedOscarCompoundStructure
                    {
                    pushFollow(FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1639_static.FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1639);
                    bracketedOscarCompoundStructure354=bracketedOscarCompoundStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedOscarCompoundStructure.add(bracketedOscarCompoundStructure354.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: bracketedOscarCompoundStructure, oscarcm, afterOscarCompoundStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 283:99: -> ^( OSCARCM ( oscarcm )* ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:283:102: ^( OSCARCM ( oscarcm )* ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARCM, "OSCARCM"), root_1);

                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:283:112: ( oscarcm )*
                while ( stream_oscarcm.hasNext() ) {
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_oscarcm.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:283:121: ( afterOscarCompoundStructure )?
                if ( stream_afterOscarCompoundStructure.hasNext() ) {
                    adaptor.addChild(root_1, stream_afterOscarCompoundStructure.nextTree());

                }
                stream_afterOscarCompoundStructure.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:283:150: ( bracketedOscarCompoundStructure )?
                if ( stream_bracketedOscarCompoundStructure.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedOscarCompoundStructure.nextTree());

                }
                stream_bracketedOscarCompoundStructure.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, oscarCompoundStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompoundStructure"

    public static class afterOscarCompoundStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "afterOscarCompoundStructure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:1: afterOscarCompoundStructure : ( ( dash ( oscarcm )+ )+ ( dash )? | ( ( colon ( oscarcm )+ )+ ( lrb )? ratio )=> ( colon ( oscarcm )+ )+ | ( dash | apost )+ );
    public final ChemicalChunkerParser.afterOscarCompoundStructure_return afterOscarCompoundStructure() throws RecognitionException {
        ChemicalChunkerParser.afterOscarCompoundStructure_return retval = new ChemicalChunkerParser.afterOscarCompoundStructure_return();
        retval.start = input.LT(1);
        int afterOscarCompoundStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dash_return dash355 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm356 = null;

        ChemicalChunkerParser.dash_return dash357 = null;

        ChemicalChunkerParser.colon_return colon358 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm359 = null;

        ChemicalChunkerParser.dash_return dash360 = null;

        ChemicalChunkerParser.apost_return apost361 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:28: ( ( dash ( oscarcm )+ )+ ( dash )? | ( ( colon ( oscarcm )+ )+ ( lrb )? ratio )=> ( colon ( oscarcm )+ )+ | ( dash | apost )+ )
            int alt121=3;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==136) ) {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 84:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            int LA121_6 = input.LA(5);

                            if ( (synpred302_ChemicalChunker()) ) {
                                alt121=1;
                            }
                            else if ( (true) ) {
                                alt121=3;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 121, 6, input);

                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 121, 5, input);

                            throw nvae;
                        }

                        }
                        break;
                    case EOF:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 68:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 82:
                    case 83:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 120:
                    case 121:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 130:
                    case 131:
                    case 132:
                    case 133:
                    case 134:
                    case 135:
                    case 136:
                    case 137:
                    case 138:
                    case 139:
                    case 140:
                    case 141:
                    case 142:
                    case 143:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 163:
                    case 164:
                    case 165:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 178:
                    case 179:
                    case 180:
                        {
                        alt121=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 121, 4, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 121, 1, input);

                    throw nvae;
                }

            }
            else if ( (LA121_0==132) && (synpred306_ChemicalChunker())) {
                alt121=2;
            }
            else if ( (LA121_0==134) ) {
                alt121=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                throw nvae;
            }
            switch (alt121) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:30: ( dash ( oscarcm )+ )+ ( dash )?
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:30: ( dash ( oscarcm )+ )+
                    int cnt116=0;
                    loop116:
                    do {
                        int alt116=2;
                        switch ( input.LA(1) ) {
                        case 136:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                switch ( input.LA(3) ) {
                                case 84:
                                    {
                                    switch ( input.LA(4) ) {
                                    case TOKEN:
                                        {
                                        int LA116_5 = input.LA(5);

                                        if ( (synpred300_ChemicalChunker()) ) {
                                            alt116=1;
                                        }


                                        }
                                        break;

                                    }

                                    }
                                    break;

                                }

                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt116) {
                    	case 1 :
                    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:31: dash ( oscarcm )+
                    	    {
                    	    pushFollow(FOLLOW_dash_in_afterOscarCompoundStructure1662_static.FOLLOW_dash_in_afterOscarCompoundStructure1662);
                    	    dash355=dash();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash355.getTree());
                    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:36: ( oscarcm )+
                    	    int cnt115=0;
                    	    loop115:
                    	    do {
                    	        int alt115=2;
                    	        switch ( input.LA(1) ) {
                    	        case 84:
                    	            {
                    	            switch ( input.LA(2) ) {
                    	            case TOKEN:
                    	                {
                    	                int LA115_3 = input.LA(3);

                    	                if ( (synpred299_ChemicalChunker()) ) {
                    	                    alt115=1;
                    	                }


                    	                }
                    	                break;

                    	            }

                    	            }
                    	            break;

                    	        }

                    	        switch (alt115) {
                    	    	case 1 :
                    	    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: oscarcm
                    	    	    {
                    	    	    pushFollow(FOLLOW_oscarcm_in_afterOscarCompoundStructure1664_static.FOLLOW_oscarcm_in_afterOscarCompoundStructure1664);
                    	    	    oscarcm356=oscarcm();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm356.getTree());

                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    if ( cnt115 >= 1 ) break loop115;
                    	    	    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                EarlyExitException eee =
                    	                    new EarlyExitException(115, input);
                    	                throw eee;
                    	        }
                    	        cnt115++;
                    	    } while (true);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt116 >= 1 ) break loop116;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(116, input);
                                throw eee;
                        }
                        cnt116++;
                    } while (true);

                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:47: ( dash )?
                    int alt117=2;
                    switch ( input.LA(1) ) {
                        case 136:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA117_3 = input.LA(3);

                                    if ( (synpred301_ChemicalChunker()) ) {
                                        alt117=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt117) {
                        case 1 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dash
                            {
                            pushFollow(FOLLOW_dash_in_afterOscarCompoundStructure1669_static.FOLLOW_dash_in_afterOscarCompoundStructure1669);
                            dash357=dash();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash357.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:53: ( ( colon ( oscarcm )+ )+ ( lrb )? ratio )=> ( colon ( oscarcm )+ )+
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:85: ( colon ( oscarcm )+ )+
                    int cnt119=0;
                    loop119:
                    do {
                        int alt119=2;
                        switch ( input.LA(1) ) {
                        case 132:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                switch ( input.LA(3) ) {
                                case 84:
                                    {
                                    switch ( input.LA(4) ) {
                                    case TOKEN:
                                        {
                                        int LA119_5 = input.LA(5);

                                        if ( (synpred308_ChemicalChunker()) ) {
                                            alt119=1;
                                        }


                                        }
                                        break;

                                    }

                                    }
                                    break;

                                }

                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt119) {
                    	case 1 :
                    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:86: colon ( oscarcm )+
                    	    {
                    	    pushFollow(FOLLOW_colon_in_afterOscarCompoundStructure1688_static.FOLLOW_colon_in_afterOscarCompoundStructure1688);
                    	    colon358=colon();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon358.getTree());
                    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:92: ( oscarcm )+
                    	    int cnt118=0;
                    	    loop118:
                    	    do {
                    	        int alt118=2;
                    	        switch ( input.LA(1) ) {
                    	        case 84:
                    	            {
                    	            switch ( input.LA(2) ) {
                    	            case TOKEN:
                    	                {
                    	                int LA118_3 = input.LA(3);

                    	                if ( (synpred307_ChemicalChunker()) ) {
                    	                    alt118=1;
                    	                }


                    	                }
                    	                break;

                    	            }

                    	            }
                    	            break;

                    	        }

                    	        switch (alt118) {
                    	    	case 1 :
                    	    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: oscarcm
                    	    	    {
                    	    	    pushFollow(FOLLOW_oscarcm_in_afterOscarCompoundStructure1690_static.FOLLOW_oscarcm_in_afterOscarCompoundStructure1690);
                    	    	    oscarcm359=oscarcm();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm359.getTree());

                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    if ( cnt118 >= 1 ) break loop118;
                    	    	    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                EarlyExitException eee =
                    	                    new EarlyExitException(118, input);
                    	                throw eee;
                    	        }
                    	        cnt118++;
                    	    } while (true);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt119 >= 1 ) break loop119;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(119, input);
                                throw eee;
                        }
                        cnt119++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:103: ( dash | apost )+
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:103: ( dash | apost )+
                    int cnt120=0;
                    loop120:
                    do {
                        int alt120=3;
                        switch ( input.LA(1) ) {
                        case 134:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                int LA120_4 = input.LA(3);

                                if ( (synpred310_ChemicalChunker()) ) {
                                    alt120=2;
                                }


                                }
                                break;

                            }

                            }
                            break;
                        case 136:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                int LA120_5 = input.LA(3);

                                if ( (synpred309_ChemicalChunker()) ) {
                                    alt120=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt120) {
                    	case 1 :
                    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:104: dash
                    	    {
                    	    pushFollow(FOLLOW_dash_in_afterOscarCompoundStructure1696_static.FOLLOW_dash_in_afterOscarCompoundStructure1696);
                    	    dash360=dash();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash360.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:109: apost
                    	    {
                    	    pushFollow(FOLLOW_apost_in_afterOscarCompoundStructure1698_static.FOLLOW_apost_in_afterOscarCompoundStructure1698);
                    	    apost361=apost();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apost361.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt120 >= 1 ) break loop120;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(120, input);
                                throw eee;
                        }
                        cnt120++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, afterOscarCompoundStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "afterOscarCompoundStructure"

    public static class bracketedOscarCompoundStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedOscarCompoundStructure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:285:1: bracketedOscarCompoundStructure : lrb ( oscarcm )+ rrb ;
    public final ChemicalChunkerParser.bracketedOscarCompoundStructure_return bracketedOscarCompoundStructure() throws RecognitionException {
        ChemicalChunkerParser.bracketedOscarCompoundStructure_return retval = new ChemicalChunkerParser.bracketedOscarCompoundStructure_return();
        retval.start = input.LT(1);
        int bracketedOscarCompoundStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb362 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm363 = null;

        ChemicalChunkerParser.rrb_return rrb364 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:285:33: ( lrb ( oscarcm )+ rrb )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:285:35: lrb ( oscarcm )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedOscarCompoundStructure1707_static.FOLLOW_lrb_in_bracketedOscarCompoundStructure1707);
            lrb362=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb362.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:285:40: ( oscarcm )+
            int cnt122=0;
            loop122:
            do {
                int alt122=2;
                switch ( input.LA(1) ) {
                case 84:
                    {
                    alt122=1;
                    }
                    break;

                }

                switch (alt122) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: oscarcm
            	    {
            	    pushFollow(FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1710_static.FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1710);
            	    oscarcm363=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm363.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt122 >= 1 ) break loop122;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(122, input);
                        throw eee;
                }
                cnt122++;
            } while (true);

            pushFollow(FOLLOW_rrb_in_bracketedOscarCompoundStructure1713_static.FOLLOW_rrb_in_bracketedOscarCompoundStructure1713);
            rrb364=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb364.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, bracketedOscarCompoundStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedOscarCompoundStructure"

    public static class molecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molecule"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:287:1: molecule : moleculeamount -> ^( MOLECULE moleculeamount ) ;
    public final ChemicalChunkerParser.molecule_return molecule() throws RecognitionException {
        ChemicalChunkerParser.molecule_return retval = new ChemicalChunkerParser.molecule_return();
        retval.start = input.LT(1);
        int molecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount_return moleculeamount365 = null;


        RewriteRuleSubtreeStream stream_moleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule moleculeamount");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:288:2: ( moleculeamount -> ^( MOLECULE moleculeamount ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:288:5: moleculeamount
            {
            pushFollow(FOLLOW_moleculeamount_in_molecule1723_static.FOLLOW_moleculeamount_in_molecule1723);
            moleculeamount365=moleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moleculeamount.add(moleculeamount365.getTree());


            // AST REWRITE
            // elements: moleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 288:19: -> ^( MOLECULE moleculeamount )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:288:22: ^( MOLECULE moleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MOLECULE, "MOLECULE"), root_1);

                adaptor.addChild(root_1, stream_moleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, molecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "molecule"

    public static class moleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:290:1: moleculeamount : ( moleculeamount3 | moleculeamount1 | moleculeamount2 ) ( asAstate )? ;
    public final ChemicalChunkerParser.moleculeamount_return moleculeamount() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount_return retval = new ChemicalChunkerParser.moleculeamount_return();
        retval.start = input.LT(1);
        int moleculeamount_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount3_return moleculeamount3366 = null;

        ChemicalChunkerParser.moleculeamount1_return moleculeamount1367 = null;

        ChemicalChunkerParser.moleculeamount2_return moleculeamount2368 = null;

        ChemicalChunkerParser.asAstate_return asAstate369 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:290:16: ( ( moleculeamount3 | moleculeamount1 | moleculeamount2 ) ( asAstate )? )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:290:18: ( moleculeamount3 | moleculeamount1 | moleculeamount2 ) ( asAstate )?
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:290:18: ( moleculeamount3 | moleculeamount1 | moleculeamount2 )
            int alt123=3;
            alt123 = dfa123.predict(input);
            switch (alt123) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:290:19: moleculeamount3
                    {
                    pushFollow(FOLLOW_moleculeamount3_in_moleculeamount1741_static.FOLLOW_moleculeamount3_in_moleculeamount1741);
                    moleculeamount3366=moleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount3366.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:290:36: moleculeamount1
                    {
                    pushFollow(FOLLOW_moleculeamount1_in_moleculeamount1744_static.FOLLOW_moleculeamount1_in_moleculeamount1744);
                    moleculeamount1367=moleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount1367.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:290:54: moleculeamount2
                    {
                    pushFollow(FOLLOW_moleculeamount2_in_moleculeamount1748_static.FOLLOW_moleculeamount2_in_moleculeamount1748);
                    moleculeamount2368=moleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount2368.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:290:71: ( asAstate )?
            int alt124=2;
            alt124 = dfa124.predict(input);
            switch (alt124) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_moleculeamount1751_static.FOLLOW_asAstate_in_moleculeamount1751);
                    asAstate369=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate369.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, moleculeamount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount"

    public static class moleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount3"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:292:1: moleculeamount3 : ( quantity | bracketedContentInMol )+ inof ( dtTHE | dt )? ratioOrBracketedRatio ( bracketedContentInMol )? oscarCompound ;
    public final ChemicalChunkerParser.moleculeamount3_return moleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount3_return retval = new ChemicalChunkerParser.moleculeamount3_return();
        retval.start = input.LT(1);
        int moleculeamount3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity370 = null;

        ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol371 = null;

        ChemicalChunkerParser.inof_return inof372 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE373 = null;

        ChemicalChunkerParser.dt_return dt374 = null;

        ChemicalChunkerParser.ratioOrBracketedRatio_return ratioOrBracketedRatio375 = null;

        ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol376 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound377 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:293:2: ( ( quantity | bracketedContentInMol )+ inof ( dtTHE | dt )? ratioOrBracketedRatio ( bracketedContentInMol )? oscarCompound )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:293:3: ( quantity | bracketedContentInMol )+ inof ( dtTHE | dt )? ratioOrBracketedRatio ( bracketedContentInMol )? oscarCompound
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:293:3: ( quantity | bracketedContentInMol )+
            int cnt125=0;
            loop125:
            do {
                int alt125=3;
                switch ( input.LA(1) ) {
                case 143:
                    {
                    int LA125_2 = input.LA(2);

                    if ( (synpred315_ChemicalChunker()) ) {
                        alt125=1;
                    }
                    else if ( (synpred316_ChemicalChunker()) ) {
                        alt125=2;
                    }


                    }
                    break;
                case 146:
                    {
                    int LA125_3 = input.LA(2);

                    if ( (synpred315_ChemicalChunker()) ) {
                        alt125=1;
                    }
                    else if ( (synpred316_ChemicalChunker()) ) {
                        alt125=2;
                    }


                    }
                    break;
                case 73:
                case 130:
                    {
                    alt125=1;
                    }
                    break;
                case 133:
                case 139:
                    {
                    alt125=2;
                    }
                    break;

                }

                switch (alt125) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:293:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount31762_static.FOLLOW_quantity_in_moleculeamount31762);
            	    quantity370=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity370.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:293:13: bracketedContentInMol
            	    {
            	    pushFollow(FOLLOW_bracketedContentInMol_in_moleculeamount31764_static.FOLLOW_bracketedContentInMol_in_moleculeamount31764);
            	    bracketedContentInMol371=bracketedContentInMol();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMol371.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt125 >= 1 ) break loop125;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(125, input);
                        throw eee;
                }
                cnt125++;
            } while (true);

            pushFollow(FOLLOW_inof_in_moleculeamount31768_static.FOLLOW_inof_in_moleculeamount31768);
            inof372=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof372.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:293:42: ( dtTHE | dt )?
            int alt126=3;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt126=1;
                    }
                    break;
                case 147:
                    {
                    alt126=2;
                    }
                    break;
            }

            switch (alt126) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:293:43: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_moleculeamount31771_static.FOLLOW_dtTHE_in_moleculeamount31771);
                    dtTHE373=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE373.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:293:51: dt
                    {
                    pushFollow(FOLLOW_dt_in_moleculeamount31775_static.FOLLOW_dt_in_moleculeamount31775);
                    dt374=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt374.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_ratioOrBracketedRatio_in_moleculeamount31779_static.FOLLOW_ratioOrBracketedRatio_in_moleculeamount31779);
            ratioOrBracketedRatio375=ratioOrBracketedRatio();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ratioOrBracketedRatio375.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:293:78: ( bracketedContentInMol )?
            int alt127=2;
            alt127 = dfa127.predict(input);
            switch (alt127) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: bracketedContentInMol
                    {
                    pushFollow(FOLLOW_bracketedContentInMol_in_moleculeamount31781_static.FOLLOW_bracketedContentInMol_in_moleculeamount31781);
                    bracketedContentInMol376=bracketedContentInMol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMol376.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_oscarCompound_in_moleculeamount31784_static.FOLLOW_oscarCompound_in_moleculeamount31784);
            oscarCompound377=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound377.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, moleculeamount3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount3"

    public static class moleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount1"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:295:1: moleculeamount1 : ( nnchementity | nnstate )? ( quantity | bracketedContentInMol )+ inof ( quantity ( inof )? )? ( dtTHE | dt )? ( oscarCompound )+ afterCompoundCitationOrQuantity ;
    public final ChemicalChunkerParser.moleculeamount1_return moleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount1_return retval = new ChemicalChunkerParser.moleculeamount1_return();
        retval.start = input.LT(1);
        int moleculeamount1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity378 = null;

        ChemicalChunkerParser.nnstate_return nnstate379 = null;

        ChemicalChunkerParser.quantity_return quantity380 = null;

        ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol381 = null;

        ChemicalChunkerParser.inof_return inof382 = null;

        ChemicalChunkerParser.quantity_return quantity383 = null;

        ChemicalChunkerParser.inof_return inof384 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE385 = null;

        ChemicalChunkerParser.dt_return dt386 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound387 = null;

        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity388 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:296:2: ( ( nnchementity | nnstate )? ( quantity | bracketedContentInMol )+ inof ( quantity ( inof )? )? ( dtTHE | dt )? ( oscarCompound )+ afterCompoundCitationOrQuantity )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:296:3: ( nnchementity | nnstate )? ( quantity | bracketedContentInMol )+ inof ( quantity ( inof )? )? ( dtTHE | dt )? ( oscarCompound )+ afterCompoundCitationOrQuantity
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:296:3: ( nnchementity | nnstate )?
            int alt128=3;
            switch ( input.LA(1) ) {
                case 71:
                    {
                    alt128=1;
                    }
                    break;
                case 63:
                    {
                    alt128=2;
                    }
                    break;
            }

            switch (alt128) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:296:4: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_moleculeamount11794_static.FOLLOW_nnchementity_in_moleculeamount11794);
                    nnchementity378=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity378.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:296:19: nnstate
                    {
                    pushFollow(FOLLOW_nnstate_in_moleculeamount11798_static.FOLLOW_nnstate_in_moleculeamount11798);
                    nnstate379=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate379.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:296:29: ( quantity | bracketedContentInMol )+
            int cnt129=0;
            loop129:
            do {
                int alt129=3;
                switch ( input.LA(1) ) {
                case 143:
                    {
                    int LA129_2 = input.LA(2);

                    if ( (synpred322_ChemicalChunker()) ) {
                        alt129=1;
                    }
                    else if ( (synpred323_ChemicalChunker()) ) {
                        alt129=2;
                    }


                    }
                    break;
                case 146:
                    {
                    int LA129_3 = input.LA(2);

                    if ( (synpred322_ChemicalChunker()) ) {
                        alt129=1;
                    }
                    else if ( (synpred323_ChemicalChunker()) ) {
                        alt129=2;
                    }


                    }
                    break;
                case 73:
                case 130:
                    {
                    alt129=1;
                    }
                    break;
                case 133:
                case 139:
                    {
                    alt129=2;
                    }
                    break;

                }

                switch (alt129) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:296:30: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount11803_static.FOLLOW_quantity_in_moleculeamount11803);
            	    quantity380=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity380.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:296:39: bracketedContentInMol
            	    {
            	    pushFollow(FOLLOW_bracketedContentInMol_in_moleculeamount11805_static.FOLLOW_bracketedContentInMol_in_moleculeamount11805);
            	    bracketedContentInMol381=bracketedContentInMol();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMol381.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt129 >= 1 ) break loop129;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(129, input);
                        throw eee;
                }
                cnt129++;
            } while (true);

            pushFollow(FOLLOW_inof_in_moleculeamount11809_static.FOLLOW_inof_in_moleculeamount11809);
            inof382=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof382.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:296:68: ( quantity ( inof )? )?
            int alt131=2;
            switch ( input.LA(1) ) {
                case 143:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 73:
                                case 130:
                                case 146:
                                    {
                                    alt131=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
                case 73:
                case 130:
                case 146:
                    {
                    alt131=1;
                    }
                    break;
            }

            switch (alt131) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:296:69: quantity ( inof )?
                    {
                    pushFollow(FOLLOW_quantity_in_moleculeamount11812_static.FOLLOW_quantity_in_moleculeamount11812);
                    quantity383=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity383.getTree());
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:296:78: ( inof )?
                    int alt130=2;
                    switch ( input.LA(1) ) {
                        case 56:
                            {
                            alt130=1;
                            }
                            break;
                    }

                    switch (alt130) {
                        case 1 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: inof
                            {
                            pushFollow(FOLLOW_inof_in_moleculeamount11814_static.FOLLOW_inof_in_moleculeamount11814);
                            inof384=inof();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof384.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:296:86: ( dtTHE | dt )?
            int alt132=3;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt132=1;
                    }
                    break;
                case 147:
                    {
                    alt132=2;
                    }
                    break;
            }

            switch (alt132) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:296:87: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_moleculeamount11820_static.FOLLOW_dtTHE_in_moleculeamount11820);
                    dtTHE385=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE385.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:296:95: dt
                    {
                    pushFollow(FOLLOW_dt_in_moleculeamount11824_static.FOLLOW_dt_in_moleculeamount11824);
                    dt386=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt386.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:296:100: ( oscarCompound )+
            int cnt133=0;
            loop133:
            do {
                int alt133=2;
                alt133 = dfa133.predict(input);
                switch (alt133) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_moleculeamount11828_static.FOLLOW_oscarCompound_in_moleculeamount11828);
            	    oscarCompound387=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound387.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt133 >= 1 ) break loop133;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(133, input);
                        throw eee;
                }
                cnt133++;
            } while (true);

            pushFollow(FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11831_static.FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11831);
            afterCompoundCitationOrQuantity388=afterCompoundCitationOrQuantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, afterCompoundCitationOrQuantity388.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, moleculeamount1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount1"

    public static class moleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount2"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:298:1: moleculeamount2 : ( quantity | bracketedContentInMol )* ( oscarCompound )+ afterCompoundCitationOrQuantity ;
    public final ChemicalChunkerParser.moleculeamount2_return moleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount2_return retval = new ChemicalChunkerParser.moleculeamount2_return();
        retval.start = input.LT(1);
        int moleculeamount2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity389 = null;

        ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol390 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound391 = null;

        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity392 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:299:2: ( ( quantity | bracketedContentInMol )* ( oscarCompound )+ afterCompoundCitationOrQuantity )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:299:3: ( quantity | bracketedContentInMol )* ( oscarCompound )+ afterCompoundCitationOrQuantity
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:299:3: ( quantity | bracketedContentInMol )*
            loop134:
            do {
                int alt134=3;
                alt134 = dfa134.predict(input);
                switch (alt134) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:299:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount21840_static.FOLLOW_quantity_in_moleculeamount21840);
            	    quantity389=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity389.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:299:13: bracketedContentInMol
            	    {
            	    pushFollow(FOLLOW_bracketedContentInMol_in_moleculeamount21842_static.FOLLOW_bracketedContentInMol_in_moleculeamount21842);
            	    bracketedContentInMol390=bracketedContentInMol();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMol390.getTree());

            	    }
            	    break;

            	default :
            	    break loop134;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:299:37: ( oscarCompound )+
            int cnt135=0;
            loop135:
            do {
                int alt135=2;
                alt135 = dfa135.predict(input);
                switch (alt135) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_moleculeamount21846_static.FOLLOW_oscarCompound_in_moleculeamount21846);
            	    oscarCompound391=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound391.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt135 >= 1 ) break loop135;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(135, input);
                        throw eee;
                }
                cnt135++;
            } while (true);

            pushFollow(FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21849_static.FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21849);
            afterCompoundCitationOrQuantity392=afterCompoundCitationOrQuantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, afterCompoundCitationOrQuantity392.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, moleculeamount2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount2"

    public static class afterCompoundCitationOrQuantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "afterCompoundCitationOrQuantity"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:301:1: afterCompoundCitationOrQuantity : ( citation | quantity | comma ( quantity1Node | citationStructure ) | bracketedContentInMol )* ;
    public final ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity() throws RecognitionException {
        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return retval = new ChemicalChunkerParser.afterCompoundCitationOrQuantity_return();
        retval.start = input.LT(1);
        int afterCompoundCitationOrQuantity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citation_return citation393 = null;

        ChemicalChunkerParser.quantity_return quantity394 = null;

        ChemicalChunkerParser.comma_return comma395 = null;

        ChemicalChunkerParser.quantity1Node_return quantity1Node396 = null;

        ChemicalChunkerParser.citationStructure_return citationStructure397 = null;

        ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol398 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:301:32: ( ( citation | quantity | comma ( quantity1Node | citationStructure ) | bracketedContentInMol )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:301:34: ( citation | quantity | comma ( quantity1Node | citationStructure ) | bracketedContentInMol )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:301:34: ( citation | quantity | comma ( quantity1Node | citationStructure ) | bracketedContentInMol )*
            loop137:
            do {
                int alt137=5;
                alt137 = dfa137.predict(input);
                switch (alt137) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:301:35: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_afterCompoundCitationOrQuantity1857_static.FOLLOW_citation_in_afterCompoundCitationOrQuantity1857);
            	    citation393=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation393.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:301:44: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_afterCompoundCitationOrQuantity1859_static.FOLLOW_quantity_in_afterCompoundCitationOrQuantity1859);
            	    quantity394=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity394.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:301:53: comma ( quantity1Node | citationStructure )
            	    {
            	    pushFollow(FOLLOW_comma_in_afterCompoundCitationOrQuantity1861_static.FOLLOW_comma_in_afterCompoundCitationOrQuantity1861);
            	    comma395=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma395.getTree());
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:301:59: ( quantity1Node | citationStructure )
            	    int alt136=2;
            	    switch ( input.LA(1) ) {
            	    case 143:
            	        {
            	        switch ( input.LA(2) ) {
            	        case TOKEN:
            	            {
            	            switch ( input.LA(3) ) {
            	            case 133:
            	            case 145:
            	            case 149:
            	            case 158:
            	                {
            	                alt136=2;
            	                }
            	                break;
            	            case 146:
            	                {
            	                switch ( input.LA(4) ) {
            	                case TOKEN:
            	                    {
            	                    switch ( input.LA(5) ) {
            	                    case 44:
            	                    case 65:
            	                    case 66:
            	                    case 67:
            	                    case 69:
            	                    case 70:
            	                    case 138:
            	                    case 156:
            	                        {
            	                        alt136=1;
            	                        }
            	                        break;
            	                    case 133:
            	                    case 145:
            	                    case 146:
            	                    case 149:
            	                    case 158:
            	                        {
            	                        alt136=2;
            	                        }
            	                        break;
            	                    default:
            	                        if (state.backtracking>0) {state.failed=true; return retval;}
            	                        NoViableAltException nvae =
            	                            new NoViableAltException("", 136, 6, input);

            	                        throw nvae;
            	                    }

            	                    }
            	                    break;
            	                default:
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 136, 4, input);

            	                    throw nvae;
            	                }

            	                }
            	                break;
            	            case 73:
            	            case 130:
            	                {
            	                alt136=1;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 136, 2, input);

            	                throw nvae;
            	            }

            	            }
            	            break;
            	        default:
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 136, 1, input);

            	            throw nvae;
            	        }

            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 136, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt136) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:301:60: quantity1Node
            	            {
            	            pushFollow(FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1864_static.FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1864);
            	            quantity1Node396=quantity1Node();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity1Node396.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:301:74: citationStructure
            	            {
            	            pushFollow(FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1866_static.FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1866);
            	            citationStructure397=citationStructure();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, citationStructure397.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:301:93: bracketedContentInMol
            	    {
            	    pushFollow(FOLLOW_bracketedContentInMol_in_afterCompoundCitationOrQuantity1869_static.FOLLOW_bracketedContentInMol_in_afterCompoundCitationOrQuantity1869);
            	    bracketedContentInMol398=bracketedContentInMol();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMol398.getTree());

            	    }
            	    break;

            	default :
            	    break loop137;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, afterCompoundCitationOrQuantity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "afterCompoundCitationOrQuantity"

    public static class unnamedmolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmolecule"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:303:1: unnamedmolecule : unnamedmoleculeDescription -> ^( UNNAMEDMOLECULE unnamedmoleculeDescription ) ;
    public final ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule() throws RecognitionException {
        ChemicalChunkerParser.unnamedmolecule_return retval = new ChemicalChunkerParser.unnamedmolecule_return();
        retval.start = input.LT(1);
        int unnamedmolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeDescription_return unnamedmoleculeDescription399 = null;


        RewriteRuleSubtreeStream stream_unnamedmoleculeDescription=new RewriteRuleSubtreeStream(adaptor,"rule unnamedmoleculeDescription");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:304:2: ( unnamedmoleculeDescription -> ^( UNNAMEDMOLECULE unnamedmoleculeDescription ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:304:4: unnamedmoleculeDescription
            {
            pushFollow(FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1880_static.FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1880);
            unnamedmoleculeDescription399=unnamedmoleculeDescription();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unnamedmoleculeDescription.add(unnamedmoleculeDescription399.getTree());


            // AST REWRITE
            // elements: unnamedmoleculeDescription
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 304:31: -> ^( UNNAMEDMOLECULE unnamedmoleculeDescription )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:304:34: ^( UNNAMEDMOLECULE unnamedmoleculeDescription )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(UNNAMEDMOLECULE, "UNNAMEDMOLECULE"), root_1);

                adaptor.addChild(root_1, stream_unnamedmoleculeDescription.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, unnamedmolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmolecule"

    public static class unnamedmoleculeDescription_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeDescription"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:306:1: unnamedmoleculeDescription : unnamedmoleculeDescriptionStart afterCompoundCitationOrQuantity ( asAstate )? ;
    public final ChemicalChunkerParser.unnamedmoleculeDescription_return unnamedmoleculeDescription() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeDescription_return retval = new ChemicalChunkerParser.unnamedmoleculeDescription_return();
        retval.start = input.LT(1);
        int unnamedmoleculeDescription_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeDescriptionStart_return unnamedmoleculeDescriptionStart400 = null;

        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity401 = null;

        ChemicalChunkerParser.asAstate_return asAstate402 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:307:2: ( unnamedmoleculeDescriptionStart afterCompoundCitationOrQuantity ( asAstate )? )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:307:4: unnamedmoleculeDescriptionStart afterCompoundCitationOrQuantity ( asAstate )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_unnamedmoleculeDescriptionStart_in_unnamedmoleculeDescription1897_static.FOLLOW_unnamedmoleculeDescriptionStart_in_unnamedmoleculeDescription1897);
            unnamedmoleculeDescriptionStart400=unnamedmoleculeDescriptionStart();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeDescriptionStart400.getTree());
            pushFollow(FOLLOW_afterCompoundCitationOrQuantity_in_unnamedmoleculeDescription1899_static.FOLLOW_afterCompoundCitationOrQuantity_in_unnamedmoleculeDescription1899);
            afterCompoundCitationOrQuantity401=afterCompoundCitationOrQuantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, afterCompoundCitationOrQuantity401.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:307:68: ( asAstate )?
            int alt138=2;
            alt138 = dfa138.predict(input);
            switch (alt138) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_unnamedmoleculeDescription1901_static.FOLLOW_asAstate_in_unnamedmoleculeDescription1901);
                    asAstate402=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate402.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, unnamedmoleculeDescription_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeDescription"

    public static class unnamedmoleculeDescriptionStart_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeDescriptionStart"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:309:1: unnamedmoleculeDescriptionStart : ( quantityOf ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule ) | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule );
    public final ChemicalChunkerParser.unnamedmoleculeDescriptionStart_return unnamedmoleculeDescriptionStart() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeDescriptionStart_return retval = new ChemicalChunkerParser.unnamedmoleculeDescriptionStart_return();
        retval.start = input.LT(1);
        int unnamedmoleculeDescriptionStart_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantityOf_return quantityOf403 = null;

        ChemicalChunkerParser.potentialUnnamedMoleculeAmount1_return potentialUnnamedMoleculeAmount1404 = null;

        ChemicalChunkerParser.potentialUnnamedMoleculeAmount2_return potentialUnnamedMoleculeAmount2405 = null;

        ChemicalChunkerParser.definiteUnnamedMolecule_return definiteUnnamedMolecule406 = null;

        ChemicalChunkerParser.potentialUnnamedMoleculeAmount2_return potentialUnnamedMoleculeAmount2407 = null;

        ChemicalChunkerParser.definiteUnnamedMolecule_return definiteUnnamedMolecule408 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:310:2: ( quantityOf ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule ) | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule )
            int alt140=3;
            alt140 = dfa140.predict(input);
            switch (alt140) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:310:4: quantityOf ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule )
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantityOf_in_unnamedmoleculeDescriptionStart1911_static.FOLLOW_quantityOf_in_unnamedmoleculeDescriptionStart1911);
                    quantityOf403=quantityOf();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantityOf403.getTree());
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:310:15: ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule )
                    int alt139=3;
                    alt139 = dfa139.predict(input);
                    switch (alt139) {
                        case 1 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:310:16: potentialUnnamedMoleculeAmount1
                            {
                            pushFollow(FOLLOW_potentialUnnamedMoleculeAmount1_in_unnamedmoleculeDescriptionStart1914_static.FOLLOW_potentialUnnamedMoleculeAmount1_in_unnamedmoleculeDescriptionStart1914);
                            potentialUnnamedMoleculeAmount1404=potentialUnnamedMoleculeAmount1();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMoleculeAmount1404.getTree());

                            }
                            break;
                        case 2 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:310:50: potentialUnnamedMoleculeAmount2
                            {
                            pushFollow(FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1918_static.FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1918);
                            potentialUnnamedMoleculeAmount2405=potentialUnnamedMoleculeAmount2();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMoleculeAmount2405.getTree());

                            }
                            break;
                        case 3 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:310:84: definiteUnnamedMolecule
                            {
                            pushFollow(FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1922_static.FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1922);
                            definiteUnnamedMolecule406=definiteUnnamedMolecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, definiteUnnamedMolecule406.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:310:112: potentialUnnamedMoleculeAmount2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1928_static.FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1928);
                    potentialUnnamedMoleculeAmount2407=potentialUnnamedMoleculeAmount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMoleculeAmount2407.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:310:146: definiteUnnamedMolecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1932_static.FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1932);
                    definiteUnnamedMolecule408=definiteUnnamedMolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, definiteUnnamedMolecule408.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, unnamedmoleculeDescriptionStart_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeDescriptionStart"

    public static class quantityOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantityOf"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:312:1: quantityOf : ( quantity )+ ( inof )? ( dtTHE | dt )? ;
    public final ChemicalChunkerParser.quantityOf_return quantityOf() throws RecognitionException {
        ChemicalChunkerParser.quantityOf_return retval = new ChemicalChunkerParser.quantityOf_return();
        retval.start = input.LT(1);
        int quantityOf_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity409 = null;

        ChemicalChunkerParser.inof_return inof410 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE411 = null;

        ChemicalChunkerParser.dt_return dt412 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:313:2: ( ( quantity )+ ( inof )? ( dtTHE | dt )? )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:313:4: ( quantity )+ ( inof )? ( dtTHE | dt )?
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:313:4: ( quantity )+
            int cnt141=0;
            loop141:
            do {
                int alt141=2;
                alt141 = dfa141.predict(input);
                switch (alt141) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_quantityOf1941_static.FOLLOW_quantity_in_quantityOf1941);
            	    quantity409=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity409.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt141 >= 1 ) break loop141;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(141, input);
                        throw eee;
                }
                cnt141++;
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:313:14: ( inof )?
            int alt142=2;
            switch ( input.LA(1) ) {
                case 56:
                    {
                    alt142=1;
                    }
                    break;
            }

            switch (alt142) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: inof
                    {
                    pushFollow(FOLLOW_inof_in_quantityOf1944_static.FOLLOW_inof_in_quantityOf1944);
                    inof410=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof410.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:313:20: ( dtTHE | dt )?
            int alt143=3;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt143=1;
                    }
                    break;
                case 147:
                    {
                    alt143=2;
                    }
                    break;
            }

            switch (alt143) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:313:21: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_quantityOf1948_static.FOLLOW_dtTHE_in_quantityOf1948);
                    dtTHE411=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE411.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:313:29: dt
                    {
                    pushFollow(FOLLOW_dt_in_quantityOf1952_static.FOLLOW_dt_in_quantityOf1952);
                    dt412=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt412.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, quantityOf_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantityOf"

    public static class potentialUnnamedMoleculeAmount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "potentialUnnamedMoleculeAmount1"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:315:1: potentialUnnamedMoleculeAmount1 : potentialUnnamedMolecule ( quantity )* ( asAstate )? ( fromProcedure )? ;
    public final ChemicalChunkerParser.potentialUnnamedMoleculeAmount1_return potentialUnnamedMoleculeAmount1() throws RecognitionException {
        ChemicalChunkerParser.potentialUnnamedMoleculeAmount1_return retval = new ChemicalChunkerParser.potentialUnnamedMoleculeAmount1_return();
        retval.start = input.LT(1);
        int potentialUnnamedMoleculeAmount1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.potentialUnnamedMolecule_return potentialUnnamedMolecule413 = null;

        ChemicalChunkerParser.quantity_return quantity414 = null;

        ChemicalChunkerParser.asAstate_return asAstate415 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure416 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:316:2: ( potentialUnnamedMolecule ( quantity )* ( asAstate )? ( fromProcedure )? )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:316:4: potentialUnnamedMolecule ( quantity )* ( asAstate )? ( fromProcedure )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_potentialUnnamedMolecule_in_potentialUnnamedMoleculeAmount11963_static.FOLLOW_potentialUnnamedMolecule_in_potentialUnnamedMoleculeAmount11963);
            potentialUnnamedMolecule413=potentialUnnamedMolecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMolecule413.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:316:29: ( quantity )*
            loop144:
            do {
                int alt144=2;
                alt144 = dfa144.predict(input);
                switch (alt144) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_potentialUnnamedMoleculeAmount11965_static.FOLLOW_quantity_in_potentialUnnamedMoleculeAmount11965);
            	    quantity414=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity414.getTree());

            	    }
            	    break;

            	default :
            	    break loop144;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:316:39: ( asAstate )?
            int alt145=2;
            alt145 = dfa145.predict(input);
            switch (alt145) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount11968_static.FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount11968);
                    asAstate415=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate415.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:316:49: ( fromProcedure )?
            int alt146=2;
            alt146 = dfa146.predict(input);
            switch (alt146) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: fromProcedure
                    {
                    pushFollow(FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount11971_static.FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount11971);
                    fromProcedure416=fromProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure416.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, potentialUnnamedMoleculeAmount1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "potentialUnnamedMoleculeAmount1"

    public static class potentialUnnamedMoleculeAmount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "potentialUnnamedMoleculeAmount2"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:318:1: potentialUnnamedMoleculeAmount2 : ( numberCompoundReference ( quantity | asAstate ) | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity | asAstate | fromProcedure ) ) ( quantity )* ( asAstate )? ( fromProcedure )? ;
    public final ChemicalChunkerParser.potentialUnnamedMoleculeAmount2_return potentialUnnamedMoleculeAmount2() throws RecognitionException {
        ChemicalChunkerParser.potentialUnnamedMoleculeAmount2_return retval = new ChemicalChunkerParser.potentialUnnamedMoleculeAmount2_return();
        retval.start = input.LT(1);
        int potentialUnnamedMoleculeAmount2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference417 = null;

        ChemicalChunkerParser.quantity_return quantity418 = null;

        ChemicalChunkerParser.asAstate_return asAstate419 = null;

        ChemicalChunkerParser.potentialUnnamedMoleculeStructureNN_return potentialUnnamedMoleculeStructureNN420 = null;

        ChemicalChunkerParser.numericReferenceOrQuantity_return numericReferenceOrQuantity421 = null;

        ChemicalChunkerParser.asAstate_return asAstate422 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure423 = null;

        ChemicalChunkerParser.quantity_return quantity424 = null;

        ChemicalChunkerParser.asAstate_return asAstate425 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure426 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:319:2: ( ( numberCompoundReference ( quantity | asAstate ) | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity | asAstate | fromProcedure ) ) ( quantity )* ( asAstate )? ( fromProcedure )? )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:319:4: ( numberCompoundReference ( quantity | asAstate ) | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity | asAstate | fromProcedure ) ) ( quantity )* ( asAstate )? ( fromProcedure )?
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:319:4: ( numberCompoundReference ( quantity | asAstate ) | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity | asAstate | fromProcedure ) )
            int alt149=2;
            switch ( input.LA(1) ) {
            case 146:
                {
                alt149=1;
                }
                break;
            case 40:
            case 42:
            case 45:
            case 46:
            case 63:
            case 68:
            case 71:
            case 83:
            case 90:
            case 151:
                {
                alt149=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);

                throw nvae;
            }

            switch (alt149) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:319:5: numberCompoundReference ( quantity | asAstate )
                    {
                    pushFollow(FOLLOW_numberCompoundReference_in_potentialUnnamedMoleculeAmount21982_static.FOLLOW_numberCompoundReference_in_potentialUnnamedMoleculeAmount21982);
                    numberCompoundReference417=numberCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberCompoundReference417.getTree());
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:319:29: ( quantity | asAstate )
                    int alt147=2;
                    switch ( input.LA(1) ) {
                    case 73:
                    case 130:
                    case 143:
                    case 146:
                        {
                        alt147=1;
                        }
                        break;
                    case 47:
                        {
                        alt147=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 147, 0, input);

                        throw nvae;
                    }

                    switch (alt147) {
                        case 1 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:319:30: quantity
                            {
                            pushFollow(FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21985_static.FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21985);
                            quantity418=quantity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity418.getTree());

                            }
                            break;
                        case 2 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:319:41: asAstate
                            {
                            pushFollow(FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21989_static.FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21989);
                            asAstate419=asAstate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate419.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:319:54: potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity | asAstate | fromProcedure )
                    {
                    pushFollow(FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMoleculeAmount21995_static.FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMoleculeAmount21995);
                    potentialUnnamedMoleculeStructureNN420=potentialUnnamedMoleculeStructureNN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMoleculeStructureNN420.getTree());
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:319:90: ( numericReferenceOrQuantity | asAstate | fromProcedure )
                    int alt148=3;
                    switch ( input.LA(1) ) {
                    case 39:
                    case 73:
                    case 130:
                    case 139:
                    case 141:
                    case 143:
                    case 146:
                        {
                        alt148=1;
                        }
                        break;
                    case 47:
                        {
                        alt148=2;
                        }
                        break;
                    case 56:
                    case 59:
                    case 125:
                    case 129:
                        {
                        alt148=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 148, 0, input);

                        throw nvae;
                    }

                    switch (alt148) {
                        case 1 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:319:91: numericReferenceOrQuantity
                            {
                            pushFollow(FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMoleculeAmount21998_static.FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMoleculeAmount21998);
                            numericReferenceOrQuantity421=numericReferenceOrQuantity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numericReferenceOrQuantity421.getTree());

                            }
                            break;
                        case 2 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:319:120: asAstate
                            {
                            pushFollow(FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount22002_static.FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount22002);
                            asAstate422=asAstate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate422.getTree());

                            }
                            break;
                        case 3 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:319:131: fromProcedure
                            {
                            pushFollow(FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount22006_static.FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount22006);
                            fromProcedure423=fromProcedure();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure423.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:319:148: ( quantity )*
            loop150:
            do {
                int alt150=2;
                alt150 = dfa150.predict(input);
                switch (alt150) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_potentialUnnamedMoleculeAmount22011_static.FOLLOW_quantity_in_potentialUnnamedMoleculeAmount22011);
            	    quantity424=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity424.getTree());

            	    }
            	    break;

            	default :
            	    break loop150;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:319:158: ( asAstate )?
            int alt151=2;
            alt151 = dfa151.predict(input);
            switch (alt151) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount22014_static.FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount22014);
                    asAstate425=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate425.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:319:168: ( fromProcedure )?
            int alt152=2;
            alt152 = dfa152.predict(input);
            switch (alt152) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: fromProcedure
                    {
                    pushFollow(FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount22017_static.FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount22017);
                    fromProcedure426=fromProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure426.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, potentialUnnamedMoleculeAmount2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "potentialUnnamedMoleculeAmount2"

    public static class definiteUnnamedMolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "definiteUnnamedMolecule"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:321:1: definiteUnnamedMolecule : definiteUnnamedMoleculeStructure ( quantity )* ( asAstate )? ( fromProcedure )? ;
    public final ChemicalChunkerParser.definiteUnnamedMolecule_return definiteUnnamedMolecule() throws RecognitionException {
        ChemicalChunkerParser.definiteUnnamedMolecule_return retval = new ChemicalChunkerParser.definiteUnnamedMolecule_return();
        retval.start = input.LT(1);
        int definiteUnnamedMolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.definiteUnnamedMoleculeStructure_return definiteUnnamedMoleculeStructure427 = null;

        ChemicalChunkerParser.quantity_return quantity428 = null;

        ChemicalChunkerParser.asAstate_return asAstate429 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure430 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:322:2: ( definiteUnnamedMoleculeStructure ( quantity )* ( asAstate )? ( fromProcedure )? )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:322:4: definiteUnnamedMoleculeStructure ( quantity )* ( asAstate )? ( fromProcedure )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_definiteUnnamedMoleculeStructure_in_definiteUnnamedMolecule2027_static.FOLLOW_definiteUnnamedMoleculeStructure_in_definiteUnnamedMolecule2027);
            definiteUnnamedMoleculeStructure427=definiteUnnamedMoleculeStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, definiteUnnamedMoleculeStructure427.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:322:37: ( quantity )*
            loop153:
            do {
                int alt153=2;
                alt153 = dfa153.predict(input);
                switch (alt153) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_definiteUnnamedMolecule2029_static.FOLLOW_quantity_in_definiteUnnamedMolecule2029);
            	    quantity428=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity428.getTree());

            	    }
            	    break;

            	default :
            	    break loop153;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:322:47: ( asAstate )?
            int alt154=2;
            alt154 = dfa154.predict(input);
            switch (alt154) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_definiteUnnamedMolecule2032_static.FOLLOW_asAstate_in_definiteUnnamedMolecule2032);
                    asAstate429=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate429.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:322:57: ( fromProcedure )?
            int alt155=2;
            alt155 = dfa155.predict(input);
            switch (alt155) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: fromProcedure
                    {
                    pushFollow(FOLLOW_fromProcedure_in_definiteUnnamedMolecule2035_static.FOLLOW_fromProcedure_in_definiteUnnamedMolecule2035);
                    fromProcedure430=fromProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure430.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, definiteUnnamedMolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "definiteUnnamedMolecule"

    public static class definiteUnnamedMoleculeStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "definiteUnnamedMoleculeStructure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:324:1: definiteUnnamedMoleculeStructure : ( ( adj )* ( nnchementity numericOrIdentifierCompoundReference | jjcomp nnchementity ( numericReferenceOrQuantity )? ) | alphanumericOrIdentifierCompoundReference );
    public final ChemicalChunkerParser.definiteUnnamedMoleculeStructure_return definiteUnnamedMoleculeStructure() throws RecognitionException {
        ChemicalChunkerParser.definiteUnnamedMoleculeStructure_return retval = new ChemicalChunkerParser.definiteUnnamedMoleculeStructure_return();
        retval.start = input.LT(1);
        int definiteUnnamedMoleculeStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj431 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity432 = null;

        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference433 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp434 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity435 = null;

        ChemicalChunkerParser.numericReferenceOrQuantity_return numericReferenceOrQuantity436 = null;

        ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return alphanumericOrIdentifierCompoundReference437 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:325:2: ( ( adj )* ( nnchementity numericOrIdentifierCompoundReference | jjcomp nnchementity ( numericReferenceOrQuantity )? ) | alphanumericOrIdentifierCompoundReference )
            int alt159=2;
            switch ( input.LA(1) ) {
            case 40:
            case 41:
            case 45:
            case 46:
            case 71:
            case 151:
            case 152:
            case 153:
                {
                alt159=1;
                }
                break;
            case 39:
            case 139:
            case 141:
            case 143:
            case 146:
                {
                alt159=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;
            }

            switch (alt159) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:325:4: ( adj )* ( nnchementity numericOrIdentifierCompoundReference | jjcomp nnchementity ( numericReferenceOrQuantity )? )
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:325:4: ( adj )*
                    loop156:
                    do {
                        int alt156=2;
                        switch ( input.LA(1) ) {
                        case 40:
                        case 41:
                        case 45:
                        case 151:
                        case 152:
                        case 153:
                            {
                            alt156=1;
                            }
                            break;

                        }

                        switch (alt156) {
                    	case 1 :
                    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
                    	    {
                    	    pushFollow(FOLLOW_adj_in_definiteUnnamedMoleculeStructure2045_static.FOLLOW_adj_in_definiteUnnamedMoleculeStructure2045);
                    	    adj431=adj();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj431.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop156;
                        }
                    } while (true);

                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:325:9: ( nnchementity numericOrIdentifierCompoundReference | jjcomp nnchementity ( numericReferenceOrQuantity )? )
                    int alt158=2;
                    switch ( input.LA(1) ) {
                    case 71:
                        {
                        alt158=1;
                        }
                        break;
                    case 46:
                        {
                        alt158=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 158, 0, input);

                        throw nvae;
                    }

                    switch (alt158) {
                        case 1 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:325:10: nnchementity numericOrIdentifierCompoundReference
                            {
                            pushFollow(FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure2049_static.FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure2049);
                            nnchementity432=nnchementity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity432.getTree());
                            pushFollow(FOLLOW_numericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure2051_static.FOLLOW_numericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure2051);
                            numericOrIdentifierCompoundReference433=numericOrIdentifierCompoundReference();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numericOrIdentifierCompoundReference433.getTree());

                            }
                            break;
                        case 2 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:325:62: jjcomp nnchementity ( numericReferenceOrQuantity )?
                            {
                            pushFollow(FOLLOW_jjcomp_in_definiteUnnamedMoleculeStructure2055_static.FOLLOW_jjcomp_in_definiteUnnamedMoleculeStructure2055);
                            jjcomp434=jjcomp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp434.getTree());
                            pushFollow(FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure2057_static.FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure2057);
                            nnchementity435=nnchementity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity435.getTree());
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:325:82: ( numericReferenceOrQuantity )?
                            int alt157=2;
                            alt157 = dfa157.predict(input);
                            switch (alt157) {
                                case 1 :
                                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: numericReferenceOrQuantity
                                    {
                                    pushFollow(FOLLOW_numericReferenceOrQuantity_in_definiteUnnamedMoleculeStructure2059_static.FOLLOW_numericReferenceOrQuantity_in_definiteUnnamedMoleculeStructure2059);
                                    numericReferenceOrQuantity436=numericReferenceOrQuantity();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericReferenceOrQuantity436.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:325:113: alphanumericOrIdentifierCompoundReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_alphanumericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure2065_static.FOLLOW_alphanumericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure2065);
                    alphanumericOrIdentifierCompoundReference437=alphanumericOrIdentifierCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alphanumericOrIdentifierCompoundReference437.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, definiteUnnamedMoleculeStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "definiteUnnamedMoleculeStructure"

    public static class potentialUnnamedMolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "potentialUnnamedMolecule"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:327:1: potentialUnnamedMolecule : ( numberCompoundReference | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity )? );
    public final ChemicalChunkerParser.potentialUnnamedMolecule_return potentialUnnamedMolecule() throws RecognitionException {
        ChemicalChunkerParser.potentialUnnamedMolecule_return retval = new ChemicalChunkerParser.potentialUnnamedMolecule_return();
        retval.start = input.LT(1);
        int potentialUnnamedMolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference438 = null;

        ChemicalChunkerParser.potentialUnnamedMoleculeStructureNN_return potentialUnnamedMoleculeStructureNN439 = null;

        ChemicalChunkerParser.numericReferenceOrQuantity_return numericReferenceOrQuantity440 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:328:2: ( numberCompoundReference | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity )? )
            int alt161=2;
            switch ( input.LA(1) ) {
            case 146:
                {
                alt161=1;
                }
                break;
            case 40:
            case 42:
            case 45:
            case 46:
            case 63:
            case 68:
            case 71:
            case 83:
            case 90:
            case 151:
                {
                alt161=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 161, 0, input);

                throw nvae;
            }

            switch (alt161) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:328:4: numberCompoundReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_numberCompoundReference_in_potentialUnnamedMolecule2074_static.FOLLOW_numberCompoundReference_in_potentialUnnamedMolecule2074);
                    numberCompoundReference438=numberCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberCompoundReference438.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:328:30: potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMolecule2078_static.FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMolecule2078);
                    potentialUnnamedMoleculeStructureNN439=potentialUnnamedMoleculeStructureNN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMoleculeStructureNN439.getTree());
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:328:66: ( numericReferenceOrQuantity )?
                    int alt160=2;
                    alt160 = dfa160.predict(input);
                    switch (alt160) {
                        case 1 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: numericReferenceOrQuantity
                            {
                            pushFollow(FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMolecule2080_static.FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMolecule2080);
                            numericReferenceOrQuantity440=numericReferenceOrQuantity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numericReferenceOrQuantity440.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, potentialUnnamedMolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "potentialUnnamedMolecule"

    public static class potentialUnnamedMoleculeStructureNN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "potentialUnnamedMoleculeStructureNN"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:330:1: potentialUnnamedMoleculeStructureNN : ( ( jj | jjchem | oscarcj | jjcomp )* ( nnstate | referenceToExampleCompound | nnatmosphere | nnmixture | oscarase ) | ( jj | jjchem | oscarcj )* nnchementity );
    public final ChemicalChunkerParser.potentialUnnamedMoleculeStructureNN_return potentialUnnamedMoleculeStructureNN() throws RecognitionException {
        ChemicalChunkerParser.potentialUnnamedMoleculeStructureNN_return retval = new ChemicalChunkerParser.potentialUnnamedMoleculeStructureNN_return();
        retval.start = input.LT(1);
        int potentialUnnamedMoleculeStructureNN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj441 = null;

        ChemicalChunkerParser.jjchem_return jjchem442 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj443 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp444 = null;

        ChemicalChunkerParser.nnstate_return nnstate445 = null;

        ChemicalChunkerParser.referenceToExampleCompound_return referenceToExampleCompound446 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere447 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture448 = null;

        ChemicalChunkerParser.oscarase_return oscarase449 = null;

        ChemicalChunkerParser.jj_return jj450 = null;

        ChemicalChunkerParser.jjchem_return jjchem451 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj452 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity453 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:331:2: ( ( jj | jjchem | oscarcj | jjcomp )* ( nnstate | referenceToExampleCompound | nnatmosphere | nnmixture | oscarase ) | ( jj | jjchem | oscarcj )* nnchementity )
            int alt165=2;
            alt165 = dfa165.predict(input);
            switch (alt165) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:331:4: ( jj | jjchem | oscarcj | jjcomp )* ( nnstate | referenceToExampleCompound | nnatmosphere | nnmixture | oscarase )
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:331:4: ( jj | jjchem | oscarcj | jjcomp )*
                    loop162:
                    do {
                        int alt162=5;
                        switch ( input.LA(1) ) {
                        case 151:
                            {
                            alt162=1;
                            }
                            break;
                        case 45:
                            {
                            alt162=2;
                            }
                            break;
                        case 40:
                            {
                            alt162=3;
                            }
                            break;
                        case 46:
                            {
                            alt162=4;
                            }
                            break;

                        }

                        switch (alt162) {
                    	case 1 :
                    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:331:5: jj
                    	    {
                    	    pushFollow(FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2093_static.FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2093);
                    	    jj441=jj();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj441.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:331:8: jjchem
                    	    {
                    	    pushFollow(FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2095_static.FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2095);
                    	    jjchem442=jjchem();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem442.getTree());

                    	    }
                    	    break;
                    	case 3 :
                    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:331:15: oscarcj
                    	    {
                    	    pushFollow(FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN2097_static.FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN2097);
                    	    oscarcj443=oscarcj();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj443.getTree());

                    	    }
                    	    break;
                    	case 4 :
                    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:331:23: jjcomp
                    	    {
                    	    pushFollow(FOLLOW_jjcomp_in_potentialUnnamedMoleculeStructureNN2099_static.FOLLOW_jjcomp_in_potentialUnnamedMoleculeStructureNN2099);
                    	    jjcomp444=jjcomp();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp444.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop162;
                        }
                    } while (true);

                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:331:32: ( nnstate | referenceToExampleCompound | nnatmosphere | nnmixture | oscarase )
                    int alt163=5;
                    switch ( input.LA(1) ) {
                    case 63:
                        {
                        alt163=1;
                        }
                        break;
                    case 83:
                        {
                        alt163=2;
                        }
                        break;
                    case 68:
                        {
                        alt163=3;
                        }
                        break;
                    case 90:
                        {
                        alt163=4;
                        }
                        break;
                    case 42:
                        {
                        alt163=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 163, 0, input);

                        throw nvae;
                    }

                    switch (alt163) {
                        case 1 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:331:33: nnstate
                            {
                            pushFollow(FOLLOW_nnstate_in_potentialUnnamedMoleculeStructureNN2104_static.FOLLOW_nnstate_in_potentialUnnamedMoleculeStructureNN2104);
                            nnstate445=nnstate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate445.getTree());

                            }
                            break;
                        case 2 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:331:41: referenceToExampleCompound
                            {
                            pushFollow(FOLLOW_referenceToExampleCompound_in_potentialUnnamedMoleculeStructureNN2106_static.FOLLOW_referenceToExampleCompound_in_potentialUnnamedMoleculeStructureNN2106);
                            referenceToExampleCompound446=referenceToExampleCompound();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, referenceToExampleCompound446.getTree());

                            }
                            break;
                        case 3 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:331:68: nnatmosphere
                            {
                            pushFollow(FOLLOW_nnatmosphere_in_potentialUnnamedMoleculeStructureNN2108_static.FOLLOW_nnatmosphere_in_potentialUnnamedMoleculeStructureNN2108);
                            nnatmosphere447=nnatmosphere();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere447.getTree());

                            }
                            break;
                        case 4 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:331:81: nnmixture
                            {
                            pushFollow(FOLLOW_nnmixture_in_potentialUnnamedMoleculeStructureNN2110_static.FOLLOW_nnmixture_in_potentialUnnamedMoleculeStructureNN2110);
                            nnmixture448=nnmixture();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture448.getTree());

                            }
                            break;
                        case 5 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:331:91: oscarase
                            {
                            pushFollow(FOLLOW_oscarase_in_potentialUnnamedMoleculeStructureNN2112_static.FOLLOW_oscarase_in_potentialUnnamedMoleculeStructureNN2112);
                            oscarase449=oscarase();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase449.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:331:103: ( jj | jjchem | oscarcj )* nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:331:103: ( jj | jjchem | oscarcj )*
                    loop164:
                    do {
                        int alt164=4;
                        switch ( input.LA(1) ) {
                        case 151:
                            {
                            alt164=1;
                            }
                            break;
                        case 45:
                            {
                            alt164=2;
                            }
                            break;
                        case 40:
                            {
                            alt164=3;
                            }
                            break;

                        }

                        switch (alt164) {
                    	case 1 :
                    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:331:104: jj
                    	    {
                    	    pushFollow(FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2118_static.FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2118);
                    	    jj450=jj();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj450.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:331:107: jjchem
                    	    {
                    	    pushFollow(FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2120_static.FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2120);
                    	    jjchem451=jjchem();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem451.getTree());

                    	    }
                    	    break;
                    	case 3 :
                    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:331:114: oscarcj
                    	    {
                    	    pushFollow(FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN2122_static.FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN2122);
                    	    oscarcj452=oscarcj();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj452.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop164;
                        }
                    } while (true);

                    pushFollow(FOLLOW_nnchementity_in_potentialUnnamedMoleculeStructureNN2126_static.FOLLOW_nnchementity_in_potentialUnnamedMoleculeStructureNN2126);
                    nnchementity453=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity453.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, potentialUnnamedMoleculeStructureNN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "potentialUnnamedMoleculeStructureNN"

    public static class numericReferenceOrQuantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericReferenceOrQuantity"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:334:1: numericReferenceOrQuantity : ( quantity | numericOrIdentifierCompoundReference );
    public final ChemicalChunkerParser.numericReferenceOrQuantity_return numericReferenceOrQuantity() throws RecognitionException {
        ChemicalChunkerParser.numericReferenceOrQuantity_return retval = new ChemicalChunkerParser.numericReferenceOrQuantity_return();
        retval.start = input.LT(1);
        int numericReferenceOrQuantity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity454 = null;

        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference455 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:335:2: ( quantity | numericOrIdentifierCompoundReference )
            int alt166=2;
            alt166 = dfa166.predict(input);
            switch (alt166) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:335:4: quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantity_in_numericReferenceOrQuantity2136_static.FOLLOW_quantity_in_numericReferenceOrQuantity2136);
                    quantity454=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity454.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:335:15: numericOrIdentifierCompoundReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_numericOrIdentifierCompoundReference_in_numericReferenceOrQuantity2140_static.FOLLOW_numericOrIdentifierCompoundReference_in_numericReferenceOrQuantity2140);
                    numericOrIdentifierCompoundReference455=numericOrIdentifierCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericOrIdentifierCompoundReference455.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, numericReferenceOrQuantity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numericReferenceOrQuantity"

    public static class asAstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "asAstate"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:337:1: asAstate : inas ( dt )? ( jj | jjchem | oscarcj )* nnstate ( quantity )* ;
    public final ChemicalChunkerParser.asAstate_return asAstate() throws RecognitionException {
        ChemicalChunkerParser.asAstate_return retval = new ChemicalChunkerParser.asAstate_return();
        retval.start = input.LT(1);
        int asAstate_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inas_return inas456 = null;

        ChemicalChunkerParser.dt_return dt457 = null;

        ChemicalChunkerParser.jj_return jj458 = null;

        ChemicalChunkerParser.jjchem_return jjchem459 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj460 = null;

        ChemicalChunkerParser.nnstate_return nnstate461 = null;

        ChemicalChunkerParser.quantity_return quantity462 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:338:2: ( inas ( dt )? ( jj | jjchem | oscarcj )* nnstate ( quantity )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:338:4: inas ( dt )? ( jj | jjchem | oscarcj )* nnstate ( quantity )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inas_in_asAstate2149_static.FOLLOW_inas_in_asAstate2149);
            inas456=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inas456.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:338:9: ( dt )?
            int alt167=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt167=1;
                    }
                    break;
            }

            switch (alt167) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_asAstate2151_static.FOLLOW_dt_in_asAstate2151);
                    dt457=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt457.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:338:13: ( jj | jjchem | oscarcj )*
            loop168:
            do {
                int alt168=4;
                switch ( input.LA(1) ) {
                case 151:
                    {
                    alt168=1;
                    }
                    break;
                case 45:
                    {
                    alt168=2;
                    }
                    break;
                case 40:
                    {
                    alt168=3;
                    }
                    break;

                }

                switch (alt168) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:338:14: jj
            	    {
            	    pushFollow(FOLLOW_jj_in_asAstate2155_static.FOLLOW_jj_in_asAstate2155);
            	    jj458=jj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj458.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:338:17: jjchem
            	    {
            	    pushFollow(FOLLOW_jjchem_in_asAstate2157_static.FOLLOW_jjchem_in_asAstate2157);
            	    jjchem459=jjchem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem459.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:338:24: oscarcj
            	    {
            	    pushFollow(FOLLOW_oscarcj_in_asAstate2159_static.FOLLOW_oscarcj_in_asAstate2159);
            	    oscarcj460=oscarcj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj460.getTree());

            	    }
            	    break;

            	default :
            	    break loop168;
                }
            } while (true);

            pushFollow(FOLLOW_nnstate_in_asAstate2163_static.FOLLOW_nnstate_in_asAstate2163);
            nnstate461=nnstate();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate461.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:338:42: ( quantity )*
            loop169:
            do {
                int alt169=2;
                alt169 = dfa169.predict(input);
                switch (alt169) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_asAstate2165_static.FOLLOW_quantity_in_asAstate2165);
            	    quantity462=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity462.getTree());

            	    }
            	    break;

            	default :
            	    break loop169;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, asAstate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "asAstate"

    public static class alphanumericOrIdentifierCompoundReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "alphanumericOrIdentifierCompoundReference"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:340:1: alphanumericOrIdentifierCompoundReference : allIdentifierTypesOtherThanCD -> ^( REFERENCETOCOMPOUND allIdentifierTypesOtherThanCD ) ;
    public final ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return alphanumericOrIdentifierCompoundReference() throws RecognitionException {
        ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return retval = new ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return();
        retval.start = input.LT(1);
        int alphanumericOrIdentifierCompoundReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.allIdentifierTypesOtherThanCD_return allIdentifierTypesOtherThanCD463 = null;


        RewriteRuleSubtreeStream stream_allIdentifierTypesOtherThanCD=new RewriteRuleSubtreeStream(adaptor,"rule allIdentifierTypesOtherThanCD");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:341:3: ( allIdentifierTypesOtherThanCD -> ^( REFERENCETOCOMPOUND allIdentifierTypesOtherThanCD ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:341:5: allIdentifierTypesOtherThanCD
            {
            pushFollow(FOLLOW_allIdentifierTypesOtherThanCD_in_alphanumericOrIdentifierCompoundReference2176_static.FOLLOW_allIdentifierTypesOtherThanCD_in_alphanumericOrIdentifierCompoundReference2176);
            allIdentifierTypesOtherThanCD463=allIdentifierTypesOtherThanCD();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_allIdentifierTypesOtherThanCD.add(allIdentifierTypesOtherThanCD463.getTree());


            // AST REWRITE
            // elements: allIdentifierTypesOtherThanCD
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 341:35: -> ^( REFERENCETOCOMPOUND allIdentifierTypesOtherThanCD )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:341:38: ^( REFERENCETOCOMPOUND allIdentifierTypesOtherThanCD )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                adaptor.addChild(root_1, stream_allIdentifierTypesOtherThanCD.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, alphanumericOrIdentifierCompoundReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "alphanumericOrIdentifierCompoundReference"

    public static class numberCompoundReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberCompoundReference"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:343:1: numberCompoundReference : ( cd {...}?) -> ^( REFERENCETOCOMPOUND cd ) ;
    public final ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference() throws RecognitionException {
        ChemicalChunkerParser.numberCompoundReference_return retval = new ChemicalChunkerParser.numberCompoundReference_return();
        retval.start = input.LT(1);
        int numberCompoundReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd464 = null;


        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:344:3: ( ( cd {...}?) -> ^( REFERENCETOCOMPOUND cd ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:344:5: ( cd {...}?)
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:344:5: ( cd {...}?)
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:344:6: cd {...}?
            {
            pushFollow(FOLLOW_cd_in_numberCompoundReference2195_static.FOLLOW_cd_in_numberCompoundReference2195);
            cd464=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd464.getTree());
            if ( !((!cdHasRoleOtherThanIdentifier(input))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "numberCompoundReference", "!cdHasRoleOtherThanIdentifier(input)");
            }

            }



            // AST REWRITE
            // elements: cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 344:50: -> ^( REFERENCETOCOMPOUND cd )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:344:53: ^( REFERENCETOCOMPOUND cd )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, numberCompoundReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numberCompoundReference"

    public static class numericOrIdentifierCompoundReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericOrIdentifierCompoundReference"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:346:1: numericOrIdentifierCompoundReference : allIdentifierTypes -> ^( REFERENCETOCOMPOUND allIdentifierTypes ) ;
    public final ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference() throws RecognitionException {
        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return retval = new ChemicalChunkerParser.numericOrIdentifierCompoundReference_return();
        retval.start = input.LT(1);
        int numericOrIdentifierCompoundReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.allIdentifierTypes_return allIdentifierTypes465 = null;


        RewriteRuleSubtreeStream stream_allIdentifierTypes=new RewriteRuleSubtreeStream(adaptor,"rule allIdentifierTypes");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:347:3: ( allIdentifierTypes -> ^( REFERENCETOCOMPOUND allIdentifierTypes ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:347:5: allIdentifierTypes
            {
            pushFollow(FOLLOW_allIdentifierTypes_in_numericOrIdentifierCompoundReference2216_static.FOLLOW_allIdentifierTypes_in_numericOrIdentifierCompoundReference2216);
            allIdentifierTypes465=allIdentifierTypes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_allIdentifierTypes.add(allIdentifierTypes465.getTree());


            // AST REWRITE
            // elements: allIdentifierTypes
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 347:24: -> ^( REFERENCETOCOMPOUND allIdentifierTypes )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:347:27: ^( REFERENCETOCOMPOUND allIdentifierTypes )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                adaptor.addChild(root_1, stream_allIdentifierTypes.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, numericOrIdentifierCompoundReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numericOrIdentifierCompoundReference"

    public static class captionLabel_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "captionLabel"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:349:1: captionLabel : ( captionLabelContent )+ -> ^( CaptionLabel ( captionLabelContent )+ ) ;
    public final ChemicalChunkerParser.captionLabel_return captionLabel() throws RecognitionException {
        ChemicalChunkerParser.captionLabel_return retval = new ChemicalChunkerParser.captionLabel_return();
        retval.start = input.LT(1);
        int captionLabel_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.captionLabelContent_return captionLabelContent466 = null;


        RewriteRuleSubtreeStream stream_captionLabelContent=new RewriteRuleSubtreeStream(adaptor,"rule captionLabelContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:350:4: ( ( captionLabelContent )+ -> ^( CaptionLabel ( captionLabelContent )+ ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:350:6: ( captionLabelContent )+
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:350:6: ( captionLabelContent )+
            int cnt170=0;
            loop170:
            do {
                int alt170=2;
                switch ( input.LA(1) ) {
                case 38:
                    {
                    int LA170_2 = input.LA(2);

                    if ( (synpred383_ChemicalChunker()) ) {
                        alt170=1;
                    }


                    }
                    break;

                }

                switch (alt170) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: captionLabelContent
            	    {
            	    pushFollow(FOLLOW_captionLabelContent_in_captionLabel2236_static.FOLLOW_captionLabelContent_in_captionLabel2236);
            	    captionLabelContent466=captionLabelContent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_captionLabelContent.add(captionLabelContent466.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt170 >= 1 ) break loop170;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(170, input);
                        throw eee;
                }
                cnt170++;
            } while (true);



            // AST REWRITE
            // elements: captionLabelContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 350:27: -> ^( CaptionLabel ( captionLabelContent )+ )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:350:30: ^( CaptionLabel ( captionLabelContent )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CaptionLabel, "CaptionLabel"), root_1);

                if ( !(stream_captionLabelContent.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_captionLabelContent.hasNext() ) {
                    adaptor.addChild(root_1, stream_captionLabelContent.nextTree());

                }
                stream_captionLabelContent.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, captionLabel_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "captionLabel"

    public static class captionLabelContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "captionLabelContent"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:351:1: captionLabelContent : ( nnplabel allIdentifierTypes ( conjunction allIdentifierTypes )* ) ;
    public final ChemicalChunkerParser.captionLabelContent_return captionLabelContent() throws RecognitionException {
        ChemicalChunkerParser.captionLabelContent_return retval = new ChemicalChunkerParser.captionLabelContent_return();
        retval.start = input.LT(1);
        int captionLabelContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnplabel_return nnplabel467 = null;

        ChemicalChunkerParser.allIdentifierTypes_return allIdentifierTypes468 = null;

        ChemicalChunkerParser.conjunction_return conjunction469 = null;

        ChemicalChunkerParser.allIdentifierTypes_return allIdentifierTypes470 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:352:4: ( ( nnplabel allIdentifierTypes ( conjunction allIdentifierTypes )* ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:352:6: ( nnplabel allIdentifierTypes ( conjunction allIdentifierTypes )* )
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:352:6: ( nnplabel allIdentifierTypes ( conjunction allIdentifierTypes )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:352:7: nnplabel allIdentifierTypes ( conjunction allIdentifierTypes )*
            {
            pushFollow(FOLLOW_nnplabel_in_captionLabelContent2257_static.FOLLOW_nnplabel_in_captionLabelContent2257);
            nnplabel467=nnplabel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnplabel467.getTree());
            pushFollow(FOLLOW_allIdentifierTypes_in_captionLabelContent2259_static.FOLLOW_allIdentifierTypes_in_captionLabelContent2259);
            allIdentifierTypes468=allIdentifierTypes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, allIdentifierTypes468.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:352:35: ( conjunction allIdentifierTypes )*
            loop171:
            do {
                int alt171=2;
                alt171 = dfa171.predict(input);
                switch (alt171) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:352:36: conjunction allIdentifierTypes
            	    {
            	    pushFollow(FOLLOW_conjunction_in_captionLabelContent2262_static.FOLLOW_conjunction_in_captionLabelContent2262);
            	    conjunction469=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction469.getTree());
            	    pushFollow(FOLLOW_allIdentifierTypes_in_captionLabelContent2264_static.FOLLOW_allIdentifierTypes_in_captionLabelContent2264);
            	    allIdentifierTypes470=allIdentifierTypes();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, allIdentifierTypes470.getTree());

            	    }
            	    break;

            	default :
            	    break loop171;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, captionLabelContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "captionLabelContent"

    public static class quantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:354:1: quantity : ( quantity1Node | quantity2Node ) ;
    public final ChemicalChunkerParser.quantity_return quantity() throws RecognitionException {
        ChemicalChunkerParser.quantity_return retval = new ChemicalChunkerParser.quantity_return();
        retval.start = input.LT(1);
        int quantity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity1Node_return quantity1Node471 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node472 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:354:11: ( ( quantity1Node | quantity2Node ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:354:14: ( quantity1Node | quantity2Node )
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:354:14: ( quantity1Node | quantity2Node )
            int alt172=2;
            switch ( input.LA(1) ) {
            case 143:
                {
                alt172=1;
                }
                break;
            case 73:
            case 130:
            case 146:
                {
                alt172=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 172, 0, input);

                throw nvae;
            }

            switch (alt172) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:354:15: quantity1Node
                    {
                    pushFollow(FOLLOW_quantity1Node_in_quantity2278_static.FOLLOW_quantity1Node_in_quantity2278);
                    quantity1Node471=quantity1Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity1Node471.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:354:29: quantity2Node
                    {
                    pushFollow(FOLLOW_quantity2Node_in_quantity2280_static.FOLLOW_quantity2Node_in_quantity2280);
                    quantity2Node472=quantity2Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node472.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, quantity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity"

    public static class quantity1Node_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1Node"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:356:1: quantity1Node : quantity1 -> ^( QUANTITY quantity1 ) ;
    public final ChemicalChunkerParser.quantity1Node_return quantity1Node() throws RecognitionException {
        ChemicalChunkerParser.quantity1Node_return retval = new ChemicalChunkerParser.quantity1Node_return();
        retval.start = input.LT(1);
        int quantity1Node_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity1_return quantity1473 = null;


        RewriteRuleSubtreeStream stream_quantity1=new RewriteRuleSubtreeStream(adaptor,"rule quantity1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:356:15: ( quantity1 -> ^( QUANTITY quantity1 ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:356:17: quantity1
            {
            pushFollow(FOLLOW_quantity1_in_quantity1Node2289_static.FOLLOW_quantity1_in_quantity1Node2289);
            quantity1473=quantity1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_quantity1.add(quantity1473.getTree());


            // AST REWRITE
            // elements: quantity1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 356:27: -> ^( QUANTITY quantity1 )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:356:32: ^( QUANTITY quantity1 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(QUANTITY, "QUANTITY"), root_1);

                adaptor.addChild(root_1, stream_quantity1.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, quantity1Node_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity1Node"

    public static class quantity1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:358:1: quantity1 : lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb ;
    public final ChemicalChunkerParser.quantity1_return quantity1() throws RecognitionException {
        ChemicalChunkerParser.quantity1_return retval = new ChemicalChunkerParser.quantity1_return();
        retval.start = input.LT(1);
        int quantity1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb474 = null;

        ChemicalChunkerParser.measurements_return measurements475 = null;

        ChemicalChunkerParser.comma_return comma476 = null;

        ChemicalChunkerParser.measurements_return measurements477 = null;

        ChemicalChunkerParser.comma_return comma478 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase479 = null;

        ChemicalChunkerParser.stop_return stop480 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase481 = null;

        ChemicalChunkerParser.rrb_return rrb482 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:359:2: ( lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:359:4: lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_quantity12309_static.FOLLOW_lrb_in_quantity12309);
            lrb474=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb474.getTree());
            pushFollow(FOLLOW_measurements_in_quantity12311_static.FOLLOW_measurements_in_quantity12311);
            measurements475=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements475.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:359:21: ( comma measurements )*
            loop173:
            do {
                int alt173=2;
                switch ( input.LA(1) ) {
                case 133:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 73:
                        case 130:
                        case 146:
                            {
                            alt173=1;
                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt173) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:359:22: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12314_static.FOLLOW_comma_in_quantity12314);
            	    comma476=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma476.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity12317_static.FOLLOW_measurements_in_quantity12317);
            	    measurements477=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements477.getTree());

            	    }
            	    break;

            	default :
            	    break loop173;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:359:44: ( comma preparationphrase )*
            loop174:
            do {
                int alt174=2;
                switch ( input.LA(1) ) {
                case 133:
                    {
                    alt174=1;
                    }
                    break;

                }

                switch (alt174) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:359:45: comma preparationphrase
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12322_static.FOLLOW_comma_in_quantity12322);
            	    comma478=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma478.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12324_static.FOLLOW_preparationphrase_in_quantity12324);
            	    preparationphrase479=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase479.getTree());

            	    }
            	    break;

            	default :
            	    break loop174;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:359:71: ( stop preparationphrase )*
            loop175:
            do {
                int alt175=2;
                switch ( input.LA(1) ) {
                case 137:
                    {
                    alt175=1;
                    }
                    break;

                }

                switch (alt175) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:359:72: stop preparationphrase
            	    {
            	    pushFollow(FOLLOW_stop_in_quantity12329_static.FOLLOW_stop_in_quantity12329);
            	    stop480=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop480.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12331_static.FOLLOW_preparationphrase_in_quantity12331);
            	    preparationphrase481=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase481.getTree());

            	    }
            	    break;

            	default :
            	    break loop175;
                }
            } while (true);

            pushFollow(FOLLOW_rrb_in_quantity12336_static.FOLLOW_rrb_in_quantity12336);
            rrb482=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb482.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, quantity1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity1"

    public static class quantity2Node_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2Node"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:361:1: quantity2Node : quantity2 -> ^( QUANTITY quantity2 ) ;
    public final ChemicalChunkerParser.quantity2Node_return quantity2Node() throws RecognitionException {
        ChemicalChunkerParser.quantity2Node_return retval = new ChemicalChunkerParser.quantity2Node_return();
        retval.start = input.LT(1);
        int quantity2Node_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity2_return quantity2483 = null;


        RewriteRuleSubtreeStream stream_quantity2=new RewriteRuleSubtreeStream(adaptor,"rule quantity2");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:361:15: ( quantity2 -> ^( QUANTITY quantity2 ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:361:17: quantity2
            {
            pushFollow(FOLLOW_quantity2_in_quantity2Node2344_static.FOLLOW_quantity2_in_quantity2Node2344);
            quantity2483=quantity2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_quantity2.add(quantity2483.getTree());


            // AST REWRITE
            // elements: quantity2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 361:27: -> ^( QUANTITY quantity2 )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:361:32: ^( QUANTITY quantity2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(QUANTITY, "QUANTITY"), root_1);

                adaptor.addChild(root_1, stream_quantity2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, quantity2Node_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity2Node"

    public static class quantity2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:363:1: quantity2 : measurements ( comma measurements )* ;
    public final ChemicalChunkerParser.quantity2_return quantity2() throws RecognitionException {
        ChemicalChunkerParser.quantity2_return retval = new ChemicalChunkerParser.quantity2_return();
        retval.start = input.LT(1);
        int quantity2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements484 = null;

        ChemicalChunkerParser.comma_return comma485 = null;

        ChemicalChunkerParser.measurements_return measurements486 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:364:2: ( measurements ( comma measurements )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:364:5: measurements ( comma measurements )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_measurements_in_quantity22365_static.FOLLOW_measurements_in_quantity22365);
            measurements484=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements484.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:364:18: ( comma measurements )*
            loop176:
            do {
                int alt176=2;
                alt176 = dfa176.predict(input);
                switch (alt176) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:364:19: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity22368_static.FOLLOW_comma_in_quantity22368);
            	    comma485=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma485.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity22371_static.FOLLOW_measurements_in_quantity22371);
            	    measurements486=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements486.getTree());

            	    }
            	    break;

            	default :
            	    break loop176;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, quantity2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity2"

    public static class measurements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurements"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:366:1: measurements : ( cd nn )? ( multiple | measurementtypes ) ( dt )? ;
    public final ChemicalChunkerParser.measurements_return measurements() throws RecognitionException {
        ChemicalChunkerParser.measurements_return retval = new ChemicalChunkerParser.measurements_return();
        retval.start = input.LT(1);
        int measurements_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd487 = null;

        ChemicalChunkerParser.nn_return nn488 = null;

        ChemicalChunkerParser.multiple_return multiple489 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes490 = null;

        ChemicalChunkerParser.dt_return dt491 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:367:2: ( ( cd nn )? ( multiple | measurementtypes ) ( dt )? )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:367:3: ( cd nn )? ( multiple | measurementtypes ) ( dt )?
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:367:3: ( cd nn )?
            int alt177=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 156:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 73:
                                                case 130:
                                                case 146:
                                                    {
                                                    alt177=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt177) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:367:4: cd nn
                    {
                    pushFollow(FOLLOW_cd_in_measurements2384_static.FOLLOW_cd_in_measurements2384);
                    cd487=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd487.getTree());
                    pushFollow(FOLLOW_nn_in_measurements2386_static.FOLLOW_nn_in_measurements2386);
                    nn488=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn488.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:367:12: ( multiple | measurementtypes )
            int alt178=2;
            switch ( input.LA(1) ) {
            case 146:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 65:
                    case 66:
                    case 67:
                    case 69:
                    case 70:
                    case 138:
                    case 156:
                        {
                        alt178=2;
                        }
                        break;
                    case 44:
                        {
                        alt178=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 178, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 178, 1, input);

                    throw nvae;
                }

                }
                break;
            case 73:
            case 130:
                {
                alt178=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 178, 0, input);

                throw nvae;
            }

            switch (alt178) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:367:13: multiple
                    {
                    pushFollow(FOLLOW_multiple_in_measurements2391_static.FOLLOW_multiple_in_measurements2391);
                    multiple489=multiple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiple489.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:367:22: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_measurements2393_static.FOLLOW_measurementtypes_in_measurements2393);
                    measurementtypes490=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurementtypes490.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:367:40: ( dt )?
            int alt179=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA179_3 = input.LA(3);

                            if ( (synpred392_ChemicalChunker()) ) {
                                alt179=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt179) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_measurements2396_static.FOLLOW_dt_in_measurements2396);
                    dt491=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt491.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, measurements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "measurements"

    public static class multiple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiple"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:368:1: multiple : cd cdunicode ( measurementtypes )? -> ^( MULTIPLE cd cdunicode ( measurementtypes )? ) ;
    public final ChemicalChunkerParser.multiple_return multiple() throws RecognitionException {
        ChemicalChunkerParser.multiple_return retval = new ChemicalChunkerParser.multiple_return();
        retval.start = input.LT(1);
        int multiple_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd492 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode493 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes494 = null;


        RewriteRuleSubtreeStream stream_cdunicode=new RewriteRuleSubtreeStream(adaptor,"rule cdunicode");
        RewriteRuleSubtreeStream stream_measurementtypes=new RewriteRuleSubtreeStream(adaptor,"rule measurementtypes");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:368:10: ( cd cdunicode ( measurementtypes )? -> ^( MULTIPLE cd cdunicode ( measurementtypes )? ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:368:12: cd cdunicode ( measurementtypes )?
            {
            pushFollow(FOLLOW_cd_in_multiple2404_static.FOLLOW_cd_in_multiple2404);
            cd492=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd492.getTree());
            pushFollow(FOLLOW_cdunicode_in_multiple2406_static.FOLLOW_cdunicode_in_multiple2406);
            cdunicode493=cdunicode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cdunicode.add(cdunicode493.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:368:25: ( measurementtypes )?
            int alt180=2;
            alt180 = dfa180.predict(input);
            switch (alt180) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_multiple2408_static.FOLLOW_measurementtypes_in_multiple2408);
                    measurementtypes494=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_measurementtypes.add(measurementtypes494.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: cd, cdunicode, measurementtypes
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 368:43: -> ^( MULTIPLE cd cdunicode ( measurementtypes )? )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:368:46: ^( MULTIPLE cd cdunicode ( measurementtypes )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MULTIPLE, "MULTIPLE"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_cdunicode.nextTree());
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:368:72: ( measurementtypes )?
                if ( stream_measurementtypes.hasNext() ) {
                    adaptor.addChild(root_1, stream_measurementtypes.nextTree());

                }
                stream_measurementtypes.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, multiple_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiple"

    public static class measurementtypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurementtypes"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:369:1: measurementtypes : ( molar | amount | mass | volume | logHydrogenActivity | equivalent | yield | percent );
    public final ChemicalChunkerParser.measurementtypes_return measurementtypes() throws RecognitionException {
        ChemicalChunkerParser.measurementtypes_return retval = new ChemicalChunkerParser.measurementtypes_return();
        retval.start = input.LT(1);
        int measurementtypes_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.molar_return molar495 = null;

        ChemicalChunkerParser.amount_return amount496 = null;

        ChemicalChunkerParser.mass_return mass497 = null;

        ChemicalChunkerParser.volume_return volume498 = null;

        ChemicalChunkerParser.logHydrogenActivity_return logHydrogenActivity499 = null;

        ChemicalChunkerParser.equivalent_return equivalent500 = null;

        ChemicalChunkerParser.yield_return yield501 = null;

        ChemicalChunkerParser.percent_return percent502 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:370:2: ( molar | amount | mass | volume | logHydrogenActivity | equivalent | yield | percent )
            int alt181=8;
            alt181 = dfa181.predict(input);
            switch (alt181) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:370:4: molar
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molar_in_measurementtypes2433_static.FOLLOW_molar_in_measurementtypes2433);
                    molar495=molar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molar495.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:370:10: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_amount_in_measurementtypes2435_static.FOLLOW_amount_in_measurementtypes2435);
                    amount496=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount496.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:370:17: mass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mass_in_measurementtypes2437_static.FOLLOW_mass_in_measurementtypes2437);
                    mass497=mass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mass497.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:370:22: volume
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_volume_in_measurementtypes2439_static.FOLLOW_volume_in_measurementtypes2439);
                    volume498=volume();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, volume498.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:370:29: logHydrogenActivity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_logHydrogenActivity_in_measurementtypes2441_static.FOLLOW_logHydrogenActivity_in_measurementtypes2441);
                    logHydrogenActivity499=logHydrogenActivity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, logHydrogenActivity499.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:370:49: equivalent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_equivalent_in_measurementtypes2443_static.FOLLOW_equivalent_in_measurementtypes2443);
                    equivalent500=equivalent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, equivalent500.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:370:60: yield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_yield_in_measurementtypes2445_static.FOLLOW_yield_in_measurementtypes2445);
                    yield501=yield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, yield501.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:370:66: percent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_percent_in_measurementtypes2447_static.FOLLOW_percent_in_measurementtypes2447);
                    percent502=percent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percent502.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, measurementtypes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "measurementtypes"

    public static class molar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molar"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:372:1: molar : cd nnmolar -> ^( MOLAR cd nnmolar ) ;
    public final ChemicalChunkerParser.molar_return molar() throws RecognitionException {
        ChemicalChunkerParser.molar_return retval = new ChemicalChunkerParser.molar_return();
        retval.start = input.LT(1);
        int molar_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd503 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar504 = null;


        RewriteRuleSubtreeStream stream_nnmolar=new RewriteRuleSubtreeStream(adaptor,"rule nnmolar");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:372:7: ( cd nnmolar -> ^( MOLAR cd nnmolar ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:372:9: cd nnmolar
            {
            pushFollow(FOLLOW_cd_in_molar2455_static.FOLLOW_cd_in_molar2455);
            cd503=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd503.getTree());
            pushFollow(FOLLOW_nnmolar_in_molar2457_static.FOLLOW_nnmolar_in_molar2457);
            nnmolar504=nnmolar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmolar.add(nnmolar504.getTree());


            // AST REWRITE
            // elements: cd, nnmolar
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 372:20: -> ^( MOLAR cd nnmolar )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:372:23: ^( MOLAR cd nnmolar )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MOLAR, "MOLAR"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnmolar.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, molar_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "molar"

    public static class amount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "amount"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:373:1: amount : cd nnamount -> ^( AMOUNT cd nnamount ) ;
    public final ChemicalChunkerParser.amount_return amount() throws RecognitionException {
        ChemicalChunkerParser.amount_return retval = new ChemicalChunkerParser.amount_return();
        retval.start = input.LT(1);
        int amount_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd505 = null;

        ChemicalChunkerParser.nnamount_return nnamount506 = null;


        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        RewriteRuleSubtreeStream stream_nnamount=new RewriteRuleSubtreeStream(adaptor,"rule nnamount");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:373:8: ( cd nnamount -> ^( AMOUNT cd nnamount ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:373:10: cd nnamount
            {
            pushFollow(FOLLOW_cd_in_amount2477_static.FOLLOW_cd_in_amount2477);
            cd505=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd505.getTree());
            pushFollow(FOLLOW_nnamount_in_amount2479_static.FOLLOW_nnamount_in_amount2479);
            nnamount506=nnamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnamount.add(nnamount506.getTree());


            // AST REWRITE
            // elements: nnamount, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 373:22: -> ^( AMOUNT cd nnamount )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:373:25: ^( AMOUNT cd nnamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AMOUNT, "AMOUNT"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, amount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "amount"

    public static class mass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mass"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:374:1: mass : cd nnmass -> ^( MASS cd nnmass ) ;
    public final ChemicalChunkerParser.mass_return mass() throws RecognitionException {
        ChemicalChunkerParser.mass_return retval = new ChemicalChunkerParser.mass_return();
        retval.start = input.LT(1);
        int mass_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd507 = null;

        ChemicalChunkerParser.nnmass_return nnmass508 = null;


        RewriteRuleSubtreeStream stream_nnmass=new RewriteRuleSubtreeStream(adaptor,"rule nnmass");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:374:6: ( cd nnmass -> ^( MASS cd nnmass ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:374:8: cd nnmass
            {
            pushFollow(FOLLOW_cd_in_mass2499_static.FOLLOW_cd_in_mass2499);
            cd507=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd507.getTree());
            pushFollow(FOLLOW_nnmass_in_mass2501_static.FOLLOW_nnmass_in_mass2501);
            nnmass508=nnmass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmass.add(nnmass508.getTree());


            // AST REWRITE
            // elements: nnmass, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 374:17: -> ^( MASS cd nnmass )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:374:20: ^( MASS cd nnmass )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MASS, "MASS"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnmass.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, mass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mass"

    public static class volume_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "volume"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:375:1: volume : cd nnvol -> ^( VOLUME cd nnvol ) ;
    public final ChemicalChunkerParser.volume_return volume() throws RecognitionException {
        ChemicalChunkerParser.volume_return retval = new ChemicalChunkerParser.volume_return();
        retval.start = input.LT(1);
        int volume_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd509 = null;

        ChemicalChunkerParser.nnvol_return nnvol510 = null;


        RewriteRuleSubtreeStream stream_nnvol=new RewriteRuleSubtreeStream(adaptor,"rule nnvol");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:375:8: ( cd nnvol -> ^( VOLUME cd nnvol ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:375:10: cd nnvol
            {
            pushFollow(FOLLOW_cd_in_volume2520_static.FOLLOW_cd_in_volume2520);
            cd509=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd509.getTree());
            pushFollow(FOLLOW_nnvol_in_volume2522_static.FOLLOW_nnvol_in_volume2522);
            nnvol510=nnvol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnvol.add(nnvol510.getTree());


            // AST REWRITE
            // elements: cd, nnvol
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 375:19: -> ^( VOLUME cd nnvol )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:375:22: ^( VOLUME cd nnvol )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VOLUME, "VOLUME"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnvol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, volume_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "volume"

    public static class logHydrogenActivity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logHydrogenActivity"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:376:1: logHydrogenActivity : nnph ( sym )? cd -> ^( PH nnph ( sym )? cd ) ;
    public final ChemicalChunkerParser.logHydrogenActivity_return logHydrogenActivity() throws RecognitionException {
        ChemicalChunkerParser.logHydrogenActivity_return retval = new ChemicalChunkerParser.logHydrogenActivity_return();
        retval.start = input.LT(1);
        int logHydrogenActivity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnph_return nnph511 = null;

        ChemicalChunkerParser.sym_return sym512 = null;

        ChemicalChunkerParser.cd_return cd513 = null;


        RewriteRuleSubtreeStream stream_nnph=new RewriteRuleSubtreeStream(adaptor,"rule nnph");
        RewriteRuleSubtreeStream stream_sym=new RewriteRuleSubtreeStream(adaptor,"rule sym");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:376:21: ( nnph ( sym )? cd -> ^( PH nnph ( sym )? cd ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:376:23: nnph ( sym )? cd
            {
            pushFollow(FOLLOW_nnph_in_logHydrogenActivity2542_static.FOLLOW_nnph_in_logHydrogenActivity2542);
            nnph511=nnph();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnph.add(nnph511.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:376:28: ( sym )?
            int alt182=2;
            switch ( input.LA(1) ) {
                case 168:
                    {
                    alt182=1;
                    }
                    break;
            }

            switch (alt182) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: sym
                    {
                    pushFollow(FOLLOW_sym_in_logHydrogenActivity2544_static.FOLLOW_sym_in_logHydrogenActivity2544);
                    sym512=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_sym.add(sym512.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_cd_in_logHydrogenActivity2547_static.FOLLOW_cd_in_logHydrogenActivity2547);
            cd513=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd513.getTree());


            // AST REWRITE
            // elements: sym, cd, nnph
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 376:36: -> ^( PH nnph ( sym )? cd )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:376:39: ^( PH nnph ( sym )? cd )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PH, "PH"), root_1);

                adaptor.addChild(root_1, stream_nnph.nextTree());
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:376:49: ( sym )?
                if ( stream_sym.hasNext() ) {
                    adaptor.addChild(root_1, stream_sym.nextTree());

                }
                stream_sym.reset();
                adaptor.addChild(root_1, stream_cd.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, logHydrogenActivity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logHydrogenActivity"

    public static class equivalent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equivalent"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:377:1: equivalent : cd nneq -> ^( EQUIVALENT cd nneq ) ;
    public final ChemicalChunkerParser.equivalent_return equivalent() throws RecognitionException {
        ChemicalChunkerParser.equivalent_return retval = new ChemicalChunkerParser.equivalent_return();
        retval.start = input.LT(1);
        int equivalent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd514 = null;

        ChemicalChunkerParser.nneq_return nneq515 = null;


        RewriteRuleSubtreeStream stream_nneq=new RewriteRuleSubtreeStream(adaptor,"rule nneq");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:377:11: ( cd nneq -> ^( EQUIVALENT cd nneq ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:377:13: cd nneq
            {
            pushFollow(FOLLOW_cd_in_equivalent2567_static.FOLLOW_cd_in_equivalent2567);
            cd514=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd514.getTree());
            pushFollow(FOLLOW_nneq_in_equivalent2569_static.FOLLOW_nneq_in_equivalent2569);
            nneq515=nneq();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nneq.add(nneq515.getTree());


            // AST REWRITE
            // elements: nneq, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 377:21: -> ^( EQUIVALENT cd nneq )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:377:24: ^( EQUIVALENT cd nneq )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EQUIVALENT, "EQUIVALENT"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nneq.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, equivalent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equivalent"

    public static class yield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yield"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:378:1: yield : ( yield1 -> ^( YIELD yield1 ) | yield2 -> ^( YIELD yield2 ) );
    public final ChemicalChunkerParser.yield_return yield() throws RecognitionException {
        ChemicalChunkerParser.yield_return retval = new ChemicalChunkerParser.yield_return();
        retval.start = input.LT(1);
        int yield_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.yield1_return yield1516 = null;

        ChemicalChunkerParser.yield2_return yield2517 = null;


        RewriteRuleSubtreeStream stream_yield2=new RewriteRuleSubtreeStream(adaptor,"rule yield2");
        RewriteRuleSubtreeStream stream_yield1=new RewriteRuleSubtreeStream(adaptor,"rule yield1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:378:6: ( yield1 -> ^( YIELD yield1 ) | yield2 -> ^( YIELD yield2 ) )
            int alt183=2;
            switch ( input.LA(1) ) {
            case 130:
                {
                alt183=1;
                }
                break;
            case 146:
                {
                alt183=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 183, 0, input);

                throw nvae;
            }

            switch (alt183) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:378:8: yield1
                    {
                    pushFollow(FOLLOW_yield1_in_yield2586_static.FOLLOW_yield1_in_yield2586);
                    yield1516=yield1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_yield1.add(yield1516.getTree());


                    // AST REWRITE
                    // elements: yield1
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 378:15: -> ^( YIELD yield1 )
                    {
                        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:378:18: ^( YIELD yield1 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(YIELD, "YIELD"), root_1);

                        adaptor.addChild(root_1, stream_yield1.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:378:35: yield2
                    {
                    pushFollow(FOLLOW_yield2_in_yield2597_static.FOLLOW_yield2_in_yield2597);
                    yield2517=yield2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_yield2.add(yield2517.getTree());


                    // AST REWRITE
                    // elements: yield2
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 378:42: -> ^( YIELD yield2 )
                    {
                        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:378:45: ^( YIELD yield2 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(YIELD, "YIELD"), root_1);

                        adaptor.addChild(root_1, stream_yield2.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, yield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "yield"

    public static class yield1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yield1"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:379:1: yield1 : nnyield ( inof | colon ) percent ;
    public final ChemicalChunkerParser.yield1_return yield1() throws RecognitionException {
        ChemicalChunkerParser.yield1_return retval = new ChemicalChunkerParser.yield1_return();
        retval.start = input.LT(1);
        int yield1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnyield_return nnyield518 = null;

        ChemicalChunkerParser.inof_return inof519 = null;

        ChemicalChunkerParser.colon_return colon520 = null;

        ChemicalChunkerParser.percent_return percent521 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:379:7: ( nnyield ( inof | colon ) percent )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:379:9: nnyield ( inof | colon ) percent
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nnyield_in_yield12611_static.FOLLOW_nnyield_in_yield12611);
            nnyield518=nnyield();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield518.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:379:17: ( inof | colon )
            int alt184=2;
            switch ( input.LA(1) ) {
            case 56:
                {
                alt184=1;
                }
                break;
            case 132:
                {
                alt184=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 184, 0, input);

                throw nvae;
            }

            switch (alt184) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:379:18: inof
                    {
                    pushFollow(FOLLOW_inof_in_yield12614_static.FOLLOW_inof_in_yield12614);
                    inof519=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof519.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:379:23: colon
                    {
                    pushFollow(FOLLOW_colon_in_yield12616_static.FOLLOW_colon_in_yield12616);
                    colon520=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon520.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_percent_in_yield12619_static.FOLLOW_percent_in_yield12619);
            percent521=percent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, percent521.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, yield1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "yield1"

    public static class yield2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yield2"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:380:1: yield2 : percent nnyield ;
    public final ChemicalChunkerParser.yield2_return yield2() throws RecognitionException {
        ChemicalChunkerParser.yield2_return retval = new ChemicalChunkerParser.yield2_return();
        retval.start = input.LT(1);
        int yield2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.percent_return percent522 = null;

        ChemicalChunkerParser.nnyield_return nnyield523 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:380:7: ( percent nnyield )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:380:9: percent nnyield
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_percent_in_yield22625_static.FOLLOW_percent_in_yield22625);
            percent522=percent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, percent522.getTree());
            pushFollow(FOLLOW_nnyield_in_yield22627_static.FOLLOW_nnyield_in_yield22627);
            nnyield523=nnyield();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield523.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, yield2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "yield2"

    public static class percent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:381:1: percent : cd ( nn )? percentsign ( dash cd percentsign )? -> ^( PERCENT cd ( nn )? percentsign ( dash )? ( cd )? ( percentsign )? ) ;
    public final ChemicalChunkerParser.percent_return percent() throws RecognitionException {
        ChemicalChunkerParser.percent_return retval = new ChemicalChunkerParser.percent_return();
        retval.start = input.LT(1);
        int percent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd524 = null;

        ChemicalChunkerParser.nn_return nn525 = null;

        ChemicalChunkerParser.percentsign_return percentsign526 = null;

        ChemicalChunkerParser.dash_return dash527 = null;

        ChemicalChunkerParser.cd_return cd528 = null;

        ChemicalChunkerParser.percentsign_return percentsign529 = null;


        RewriteRuleSubtreeStream stream_dash=new RewriteRuleSubtreeStream(adaptor,"rule dash");
        RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn");
        RewriteRuleSubtreeStream stream_percentsign=new RewriteRuleSubtreeStream(adaptor,"rule percentsign");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:381:9: ( cd ( nn )? percentsign ( dash cd percentsign )? -> ^( PERCENT cd ( nn )? percentsign ( dash )? ( cd )? ( percentsign )? ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:381:11: cd ( nn )? percentsign ( dash cd percentsign )?
            {
            pushFollow(FOLLOW_cd_in_percent2635_static.FOLLOW_cd_in_percent2635);
            cd524=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd524.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:381:14: ( nn )?
            int alt185=2;
            switch ( input.LA(1) ) {
                case 156:
                    {
                    alt185=1;
                    }
                    break;
            }

            switch (alt185) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nn
                    {
                    pushFollow(FOLLOW_nn_in_percent2637_static.FOLLOW_nn_in_percent2637);
                    nn525=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nn.add(nn525.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_percentsign_in_percent2640_static.FOLLOW_percentsign_in_percent2640);
            percentsign526=percentsign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_percentsign.add(percentsign526.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:381:30: ( dash cd percentsign )?
            int alt186=2;
            switch ( input.LA(1) ) {
                case 136:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 146:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 138:
                                                    {
                                                    switch ( input.LA(6) ) {
                                                        case TOKEN:
                                                            {
                                                            int LA186_7 = input.LA(7);

                                                            if ( (synpred405_ChemicalChunker()) ) {
                                                                alt186=1;
                                                            }
                                                            }
                                                            break;
                                                    }

                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt186) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:381:32: dash cd percentsign
                    {
                    pushFollow(FOLLOW_dash_in_percent2644_static.FOLLOW_dash_in_percent2644);
                    dash527=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dash.add(dash527.getTree());
                    pushFollow(FOLLOW_cd_in_percent2646_static.FOLLOW_cd_in_percent2646);
                    cd528=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cd.add(cd528.getTree());
                    pushFollow(FOLLOW_percentsign_in_percent2648_static.FOLLOW_percentsign_in_percent2648);
                    percentsign529=percentsign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_percentsign.add(percentsign529.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: cd, percentsign, percentsign, cd, dash, nn
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 381:54: -> ^( PERCENT cd ( nn )? percentsign ( dash )? ( cd )? ( percentsign )? )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:381:57: ^( PERCENT cd ( nn )? percentsign ( dash )? ( cd )? ( percentsign )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PERCENT, "PERCENT"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:381:72: ( nn )?
                if ( stream_nn.hasNext() ) {
                    adaptor.addChild(root_1, stream_nn.nextTree());

                }
                stream_nn.reset();
                adaptor.addChild(root_1, stream_percentsign.nextTree());
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:381:88: ( dash )?
                if ( stream_dash.hasNext() ) {
                    adaptor.addChild(root_1, stream_dash.nextTree());

                }
                stream_dash.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:381:94: ( cd )?
                if ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:381:98: ( percentsign )?
                if ( stream_percentsign.hasNext() ) {
                    adaptor.addChild(root_1, stream_percentsign.nextTree());

                }
                stream_percentsign.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, percent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "percent"

    public static class bracketedContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContent"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:384:1: bracketedContent : ( ratio )? ( bracketedContent1 | bracketedContent2 | bracketedContent3 ) -> ^( MIXTURE ( ratio )? ( bracketedContent1 )? ( bracketedContent2 )? ( bracketedContent3 )? ) ;
    public final ChemicalChunkerParser.bracketedContent_return bracketedContent() throws RecognitionException {
        ChemicalChunkerParser.bracketedContent_return retval = new ChemicalChunkerParser.bracketedContent_return();
        retval.start = input.LT(1);
        int bracketedContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.ratio_return ratio530 = null;

        ChemicalChunkerParser.bracketedContent1_return bracketedContent1531 = null;

        ChemicalChunkerParser.bracketedContent2_return bracketedContent2532 = null;

        ChemicalChunkerParser.bracketedContent3_return bracketedContent3533 = null;


        RewriteRuleSubtreeStream stream_bracketedContent3=new RewriteRuleSubtreeStream(adaptor,"rule bracketedContent3");
        RewriteRuleSubtreeStream stream_ratio=new RewriteRuleSubtreeStream(adaptor,"rule ratio");
        RewriteRuleSubtreeStream stream_bracketedContent2=new RewriteRuleSubtreeStream(adaptor,"rule bracketedContent2");
        RewriteRuleSubtreeStream stream_bracketedContent1=new RewriteRuleSubtreeStream(adaptor,"rule bracketedContent1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:384:17: ( ( ratio )? ( bracketedContent1 | bracketedContent2 | bracketedContent3 ) -> ^( MIXTURE ( ratio )? ( bracketedContent1 )? ( bracketedContent2 )? ( bracketedContent3 )? ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:384:19: ( ratio )? ( bracketedContent1 | bracketedContent2 | bracketedContent3 )
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:384:19: ( ratio )?
            int alt187=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt187=1;
                    }
                    break;
            }

            switch (alt187) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: ratio
                    {
                    pushFollow(FOLLOW_ratio_in_bracketedContent2682_static.FOLLOW_ratio_in_bracketedContent2682);
                    ratio530=ratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ratio.add(ratio530.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:384:27: ( bracketedContent1 | bracketedContent2 | bracketedContent3 )
            int alt188=3;
            switch ( input.LA(1) ) {
            case 133:
                {
                alt188=1;
                }
                break;
            case 143:
                {
                alt188=2;
                }
                break;
            case 139:
                {
                alt188=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 188, 0, input);

                throw nvae;
            }

            switch (alt188) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:384:28: bracketedContent1
                    {
                    pushFollow(FOLLOW_bracketedContent1_in_bracketedContent2687_static.FOLLOW_bracketedContent1_in_bracketedContent2687);
                    bracketedContent1531=bracketedContent1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedContent1.add(bracketedContent1531.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:384:46: bracketedContent2
                    {
                    pushFollow(FOLLOW_bracketedContent2_in_bracketedContent2689_static.FOLLOW_bracketedContent2_in_bracketedContent2689);
                    bracketedContent2532=bracketedContent2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedContent2.add(bracketedContent2532.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:384:64: bracketedContent3
                    {
                    pushFollow(FOLLOW_bracketedContent3_in_bracketedContent2691_static.FOLLOW_bracketedContent3_in_bracketedContent2691);
                    bracketedContent3533=bracketedContent3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedContent3.add(bracketedContent3533.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: bracketedContent3, bracketedContent1, bracketedContent2, ratio
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 384:83: -> ^( MIXTURE ( ratio )? ( bracketedContent1 )? ( bracketedContent2 )? ( bracketedContent3 )? )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:384:86: ^( MIXTURE ( ratio )? ( bracketedContent1 )? ( bracketedContent2 )? ( bracketedContent3 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MIXTURE, "MIXTURE"), root_1);

                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:384:96: ( ratio )?
                if ( stream_ratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_ratio.nextTree());

                }
                stream_ratio.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:384:103: ( bracketedContent1 )?
                if ( stream_bracketedContent1.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedContent1.nextTree());

                }
                stream_bracketedContent1.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:384:122: ( bracketedContent2 )?
                if ( stream_bracketedContent2.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedContent2.nextTree());

                }
                stream_bracketedContent2.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:384:141: ( bracketedContent3 )?
                if ( stream_bracketedContent3.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedContent3.nextTree());

                }
                stream_bracketedContent3.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, bracketedContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContent"

    public static class bracketedContent1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContent1"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:385:1: bracketedContent1 : comma lrb bracketedContentContents rrb comma ;
    public final ChemicalChunkerParser.bracketedContent1_return bracketedContent1() throws RecognitionException {
        ChemicalChunkerParser.bracketedContent1_return retval = new ChemicalChunkerParser.bracketedContent1_return();
        retval.start = input.LT(1);
        int bracketedContent1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma534 = null;

        ChemicalChunkerParser.lrb_return lrb535 = null;

        ChemicalChunkerParser.bracketedContentContents_return bracketedContentContents536 = null;

        ChemicalChunkerParser.rrb_return rrb537 = null;

        ChemicalChunkerParser.comma_return comma538 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:385:18: ( comma lrb bracketedContentContents rrb comma )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:385:20: comma lrb bracketedContentContents rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_bracketedContent12716_static.FOLLOW_comma_in_bracketedContent12716);
            comma534=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma534.getTree());
            pushFollow(FOLLOW_lrb_in_bracketedContent12718_static.FOLLOW_lrb_in_bracketedContent12718);
            lrb535=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb535.getTree());
            pushFollow(FOLLOW_bracketedContentContents_in_bracketedContent12720_static.FOLLOW_bracketedContentContents_in_bracketedContent12720);
            bracketedContentContents536=bracketedContentContents();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentContents536.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedContent12722_static.FOLLOW_rrb_in_bracketedContent12722);
            rrb537=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb537.getTree());
            pushFollow(FOLLOW_comma_in_bracketedContent12724_static.FOLLOW_comma_in_bracketedContent12724);
            comma538=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma538.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, bracketedContent1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContent1"

    public static class bracketedContent2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContent2"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:386:1: bracketedContent2 : lrb bracketedContentContents rrb ;
    public final ChemicalChunkerParser.bracketedContent2_return bracketedContent2() throws RecognitionException {
        ChemicalChunkerParser.bracketedContent2_return retval = new ChemicalChunkerParser.bracketedContent2_return();
        retval.start = input.LT(1);
        int bracketedContent2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb539 = null;

        ChemicalChunkerParser.bracketedContentContents_return bracketedContentContents540 = null;

        ChemicalChunkerParser.rrb_return rrb541 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:386:18: ( lrb bracketedContentContents rrb )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:386:20: lrb bracketedContentContents rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedContent22730_static.FOLLOW_lrb_in_bracketedContent22730);
            lrb539=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb539.getTree());
            pushFollow(FOLLOW_bracketedContentContents_in_bracketedContent22732_static.FOLLOW_bracketedContentContents_in_bracketedContent22732);
            bracketedContentContents540=bracketedContentContents();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentContents540.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedContent22734_static.FOLLOW_rrb_in_bracketedContent22734);
            rrb541=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb541.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, bracketedContent2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContent2"

    public static class bracketedContent3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContent3"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:387:1: bracketedContent3 : lsqb bracketedContentContents rsqb ;
    public final ChemicalChunkerParser.bracketedContent3_return bracketedContent3() throws RecognitionException {
        ChemicalChunkerParser.bracketedContent3_return retval = new ChemicalChunkerParser.bracketedContent3_return();
        retval.start = input.LT(1);
        int bracketedContent3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lsqb_return lsqb542 = null;

        ChemicalChunkerParser.bracketedContentContents_return bracketedContentContents543 = null;

        ChemicalChunkerParser.rsqb_return rsqb544 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:387:18: ( lsqb bracketedContentContents rsqb )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:387:20: lsqb bracketedContentContents rsqb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lsqb_in_bracketedContent32740_static.FOLLOW_lsqb_in_bracketedContent32740);
            lsqb542=lsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb542.getTree());
            pushFollow(FOLLOW_bracketedContentContents_in_bracketedContent32742_static.FOLLOW_bracketedContentContents_in_bracketedContent32742);
            bracketedContentContents543=bracketedContentContents();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentContents543.getTree());
            pushFollow(FOLLOW_rsqb_in_bracketedContent32744_static.FOLLOW_rsqb_in_bracketedContent32744);
            rsqb544=rsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb544.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, bracketedContent3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContent3"

    public static class bracketedContentContents_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContentContents"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:1: bracketedContentContents : ( verb | noun | bracketedContent | md | percentsign | dash | inAll | ratio | conjunction | adj | colon | stop | numeric )+ ;
    public final ChemicalChunkerParser.bracketedContentContents_return bracketedContentContents() throws RecognitionException {
        ChemicalChunkerParser.bracketedContentContents_return retval = new ChemicalChunkerParser.bracketedContentContents_return();
        retval.start = input.LT(1);
        int bracketedContentContents_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.verb_return verb545 = null;

        ChemicalChunkerParser.noun_return noun546 = null;

        ChemicalChunkerParser.bracketedContent_return bracketedContent547 = null;

        ChemicalChunkerParser.md_return md548 = null;

        ChemicalChunkerParser.percentsign_return percentsign549 = null;

        ChemicalChunkerParser.dash_return dash550 = null;

        ChemicalChunkerParser.inAll_return inAll551 = null;

        ChemicalChunkerParser.ratio_return ratio552 = null;

        ChemicalChunkerParser.conjunction_return conjunction553 = null;

        ChemicalChunkerParser.adj_return adj554 = null;

        ChemicalChunkerParser.colon_return colon555 = null;

        ChemicalChunkerParser.stop_return stop556 = null;

        ChemicalChunkerParser.numeric_return numeric557 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:25: ( ( verb | noun | bracketedContent | md | percentsign | dash | inAll | ratio | conjunction | adj | colon | stop | numeric )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:27: ( verb | noun | bracketedContent | md | percentsign | dash | inAll | ratio | conjunction | adj | colon | stop | numeric )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:27: ( verb | noun | bracketedContent | md | percentsign | dash | inAll | ratio | conjunction | adj | colon | stop | numeric )+
            int cnt189=0;
            loop189:
            do {
                int alt189=14;
                alt189 = dfa189.predict(input);
                switch (alt189) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:28: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_bracketedContentContents2751_static.FOLLOW_verb_in_bracketedContentContents2751);
            	    verb545=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb545.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:33: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_bracketedContentContents2753_static.FOLLOW_noun_in_bracketedContentContents2753);
            	    noun546=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun546.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:38: bracketedContent
            	    {
            	    pushFollow(FOLLOW_bracketedContent_in_bracketedContentContents2755_static.FOLLOW_bracketedContent_in_bracketedContentContents2755);
            	    bracketedContent547=bracketedContent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContent547.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:55: md
            	    {
            	    pushFollow(FOLLOW_md_in_bracketedContentContents2757_static.FOLLOW_md_in_bracketedContentContents2757);
            	    md548=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md548.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:58: percentsign
            	    {
            	    pushFollow(FOLLOW_percentsign_in_bracketedContentContents2759_static.FOLLOW_percentsign_in_bracketedContentContents2759);
            	    percentsign549=percentsign();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, percentsign549.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:70: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_bracketedContentContents2761_static.FOLLOW_dash_in_bracketedContentContents2761);
            	    dash550=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash550.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:75: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_bracketedContentContents2763_static.FOLLOW_inAll_in_bracketedContentContents2763);
            	    inAll551=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll551.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:81: ratio
            	    {
            	    pushFollow(FOLLOW_ratio_in_bracketedContentContents2765_static.FOLLOW_ratio_in_bracketedContentContents2765);
            	    ratio552=ratio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio552.getTree());

            	    }
            	    break;
            	case 9 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:87: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_bracketedContentContents2767_static.FOLLOW_conjunction_in_bracketedContentContents2767);
            	    conjunction553=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction553.getTree());

            	    }
            	    break;
            	case 10 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:99: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_bracketedContentContents2769_static.FOLLOW_adj_in_bracketedContentContents2769);
            	    adj554=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj554.getTree());

            	    }
            	    break;
            	case 11 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:103: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_bracketedContentContents2771_static.FOLLOW_colon_in_bracketedContentContents2771);
            	    colon555=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon555.getTree());

            	    }
            	    break;
            	case 12 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:109: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_bracketedContentContents2773_static.FOLLOW_stop_in_bracketedContentContents2773);
            	    stop556=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop556.getTree());

            	    }
            	    break;
            	case 13 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:114: numeric
            	    {
            	    pushFollow(FOLLOW_numeric_in_bracketedContentContents2775_static.FOLLOW_numeric_in_bracketedContentContents2775);
            	    numeric557=numeric();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric557.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt189 >= 1 ) break loop189;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(189, input);
                        throw eee;
                }
                cnt189++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, bracketedContentContents_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContentContents"

    public static class bracketedContentInMol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContentInMol"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:390:1: bracketedContentInMol : ( ratio )? ( bracketedContentInMolStructure1 | bracketedContentInMolStructure2 ) -> ^( MIXTURE ( ratio )? ( bracketedContentInMolStructure1 )? ( bracketedContentInMolStructure2 )? ) ;
    public final ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol() throws RecognitionException {
        ChemicalChunkerParser.bracketedContentInMol_return retval = new ChemicalChunkerParser.bracketedContentInMol_return();
        retval.start = input.LT(1);
        int bracketedContentInMol_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.ratio_return ratio558 = null;

        ChemicalChunkerParser.bracketedContentInMolStructure1_return bracketedContentInMolStructure1559 = null;

        ChemicalChunkerParser.bracketedContentInMolStructure2_return bracketedContentInMolStructure2560 = null;


        RewriteRuleSubtreeStream stream_ratio=new RewriteRuleSubtreeStream(adaptor,"rule ratio");
        RewriteRuleSubtreeStream stream_bracketedContentInMolStructure1=new RewriteRuleSubtreeStream(adaptor,"rule bracketedContentInMolStructure1");
        RewriteRuleSubtreeStream stream_bracketedContentInMolStructure2=new RewriteRuleSubtreeStream(adaptor,"rule bracketedContentInMolStructure2");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:390:22: ( ( ratio )? ( bracketedContentInMolStructure1 | bracketedContentInMolStructure2 ) -> ^( MIXTURE ( ratio )? ( bracketedContentInMolStructure1 )? ( bracketedContentInMolStructure2 )? ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:390:24: ( ratio )? ( bracketedContentInMolStructure1 | bracketedContentInMolStructure2 )
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:390:24: ( ratio )?
            int alt190=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt190=1;
                    }
                    break;
            }

            switch (alt190) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: ratio
                    {
                    pushFollow(FOLLOW_ratio_in_bracketedContentInMol2784_static.FOLLOW_ratio_in_bracketedContentInMol2784);
                    ratio558=ratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ratio.add(ratio558.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:390:32: ( bracketedContentInMolStructure1 | bracketedContentInMolStructure2 )
            int alt191=2;
            switch ( input.LA(1) ) {
            case 133:
                {
                alt191=1;
                }
                break;
            case 139:
            case 143:
                {
                alt191=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 191, 0, input);

                throw nvae;
            }

            switch (alt191) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:390:33: bracketedContentInMolStructure1
                    {
                    pushFollow(FOLLOW_bracketedContentInMolStructure1_in_bracketedContentInMol2789_static.FOLLOW_bracketedContentInMolStructure1_in_bracketedContentInMol2789);
                    bracketedContentInMolStructure1559=bracketedContentInMolStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedContentInMolStructure1.add(bracketedContentInMolStructure1559.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:390:65: bracketedContentInMolStructure2
                    {
                    pushFollow(FOLLOW_bracketedContentInMolStructure2_in_bracketedContentInMol2791_static.FOLLOW_bracketedContentInMolStructure2_in_bracketedContentInMol2791);
                    bracketedContentInMolStructure2560=bracketedContentInMolStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedContentInMolStructure2.add(bracketedContentInMolStructure2560.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: bracketedContentInMolStructure2, ratio, bracketedContentInMolStructure1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 390:98: -> ^( MIXTURE ( ratio )? ( bracketedContentInMolStructure1 )? ( bracketedContentInMolStructure2 )? )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:390:101: ^( MIXTURE ( ratio )? ( bracketedContentInMolStructure1 )? ( bracketedContentInMolStructure2 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MIXTURE, "MIXTURE"), root_1);

                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:390:111: ( ratio )?
                if ( stream_ratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_ratio.nextTree());

                }
                stream_ratio.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:390:118: ( bracketedContentInMolStructure1 )?
                if ( stream_bracketedContentInMolStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedContentInMolStructure1.nextTree());

                }
                stream_bracketedContentInMolStructure1.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:390:151: ( bracketedContentInMolStructure2 )?
                if ( stream_bracketedContentInMolStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedContentInMolStructure2.nextTree());

                }
                stream_bracketedContentInMolStructure2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, bracketedContentInMol_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContentInMol"

    public static class bracketedContentInMolStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContentInMolStructure1"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:391:1: bracketedContentInMolStructure1 : comma bracketedContentInMolStructure2 comma ;
    public final ChemicalChunkerParser.bracketedContentInMolStructure1_return bracketedContentInMolStructure1() throws RecognitionException {
        ChemicalChunkerParser.bracketedContentInMolStructure1_return retval = new ChemicalChunkerParser.bracketedContentInMolStructure1_return();
        retval.start = input.LT(1);
        int bracketedContentInMolStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma561 = null;

        ChemicalChunkerParser.bracketedContentInMolStructure2_return bracketedContentInMolStructure2562 = null;

        ChemicalChunkerParser.comma_return comma563 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:391:32: ( comma bracketedContentInMolStructure2 comma )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:391:34: comma bracketedContentInMolStructure2 comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_bracketedContentInMolStructure12813_static.FOLLOW_comma_in_bracketedContentInMolStructure12813);
            comma561=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma561.getTree());
            pushFollow(FOLLOW_bracketedContentInMolStructure2_in_bracketedContentInMolStructure12815_static.FOLLOW_bracketedContentInMolStructure2_in_bracketedContentInMolStructure12815);
            bracketedContentInMolStructure2562=bracketedContentInMolStructure2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMolStructure2562.getTree());
            pushFollow(FOLLOW_comma_in_bracketedContentInMolStructure12817_static.FOLLOW_comma_in_bracketedContentInMolStructure12817);
            comma563=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma563.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, bracketedContentInMolStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContentInMolStructure1"

    public static class bracketedContentInMolStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContentInMolStructure2"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:392:1: bracketedContentInMolStructure2 : ( lrb bracketedContentInMolContents1 ( bracketedContentInMolContents2 )* rrb | lsqb bracketedContentInMolContents1 ( bracketedContentInMolContents2 )* rsqb );
    public final ChemicalChunkerParser.bracketedContentInMolStructure2_return bracketedContentInMolStructure2() throws RecognitionException {
        ChemicalChunkerParser.bracketedContentInMolStructure2_return retval = new ChemicalChunkerParser.bracketedContentInMolStructure2_return();
        retval.start = input.LT(1);
        int bracketedContentInMolStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb564 = null;

        ChemicalChunkerParser.bracketedContentInMolContents1_return bracketedContentInMolContents1565 = null;

        ChemicalChunkerParser.bracketedContentInMolContents2_return bracketedContentInMolContents2566 = null;

        ChemicalChunkerParser.rrb_return rrb567 = null;

        ChemicalChunkerParser.lsqb_return lsqb568 = null;

        ChemicalChunkerParser.bracketedContentInMolContents1_return bracketedContentInMolContents1569 = null;

        ChemicalChunkerParser.bracketedContentInMolContents2_return bracketedContentInMolContents2570 = null;

        ChemicalChunkerParser.rsqb_return rsqb571 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:392:32: ( lrb bracketedContentInMolContents1 ( bracketedContentInMolContents2 )* rrb | lsqb bracketedContentInMolContents1 ( bracketedContentInMolContents2 )* rsqb )
            int alt194=2;
            switch ( input.LA(1) ) {
            case 143:
                {
                alt194=1;
                }
                break;
            case 139:
                {
                alt194=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 194, 0, input);

                throw nvae;
            }

            switch (alt194) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:392:34: lrb bracketedContentInMolContents1 ( bracketedContentInMolContents2 )* rrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_lrb_in_bracketedContentInMolStructure22823_static.FOLLOW_lrb_in_bracketedContentInMolStructure22823);
                    lrb564=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb564.getTree());
                    pushFollow(FOLLOW_bracketedContentInMolContents1_in_bracketedContentInMolStructure22825_static.FOLLOW_bracketedContentInMolContents1_in_bracketedContentInMolStructure22825);
                    bracketedContentInMolContents1565=bracketedContentInMolContents1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMolContents1565.getTree());
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:392:69: ( bracketedContentInMolContents2 )*
                    loop192:
                    do {
                        int alt192=2;
                        switch ( input.LA(1) ) {
                        case 38:
                        case 39:
                        case 40:
                        case 41:
                        case 42:
                        case 43:
                        case 45:
                        case 46:
                        case 47:
                        case 48:
                        case 49:
                        case 50:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 55:
                        case 56:
                        case 57:
                        case 58:
                        case 59:
                        case 60:
                        case 61:
                        case 62:
                        case 63:
                        case 64:
                        case 66:
                        case 68:
                        case 69:
                        case 70:
                        case 71:
                        case 72:
                        case 73:
                        case 74:
                        case 75:
                        case 76:
                        case 77:
                        case 78:
                        case 79:
                        case 80:
                        case 81:
                        case 82:
                        case 83:
                        case 84:
                        case 85:
                        case 86:
                        case 87:
                        case 88:
                        case 89:
                        case 90:
                        case 91:
                        case 92:
                        case 93:
                        case 94:
                        case 95:
                        case 96:
                        case 97:
                        case 98:
                        case 99:
                        case 100:
                        case 101:
                        case 102:
                        case 103:
                        case 104:
                        case 105:
                        case 106:
                        case 107:
                        case 108:
                        case 109:
                        case 110:
                        case 111:
                        case 112:
                        case 113:
                        case 114:
                        case 115:
                        case 116:
                        case 117:
                        case 118:
                        case 119:
                        case 120:
                        case 121:
                        case 122:
                        case 123:
                        case 124:
                        case 125:
                        case 126:
                        case 127:
                        case 128:
                        case 129:
                        case 130:
                        case 132:
                        case 133:
                        case 136:
                        case 137:
                        case 138:
                        case 139:
                        case 141:
                        case 143:
                        case 145:
                        case 146:
                        case 147:
                        case 148:
                        case 149:
                        case 150:
                        case 151:
                        case 152:
                        case 153:
                        case 154:
                        case 155:
                        case 156:
                        case 157:
                        case 158:
                        case 159:
                        case 160:
                        case 161:
                        case 162:
                        case 163:
                        case 168:
                        case 169:
                        case 171:
                        case 172:
                        case 173:
                        case 174:
                        case 175:
                        case 176:
                        case 177:
                        case 178:
                        case 179:
                        case 180:
                            {
                            alt192=1;
                            }
                            break;

                        }

                        switch (alt192) {
                    	case 1 :
                    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: bracketedContentInMolContents2
                    	    {
                    	    pushFollow(FOLLOW_bracketedContentInMolContents2_in_bracketedContentInMolStructure22827_static.FOLLOW_bracketedContentInMolContents2_in_bracketedContentInMolStructure22827);
                    	    bracketedContentInMolContents2566=bracketedContentInMolContents2();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMolContents2566.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop192;
                        }
                    } while (true);

                    pushFollow(FOLLOW_rrb_in_bracketedContentInMolStructure22830_static.FOLLOW_rrb_in_bracketedContentInMolStructure22830);
                    rrb567=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb567.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:392:105: lsqb bracketedContentInMolContents1 ( bracketedContentInMolContents2 )* rsqb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_lsqb_in_bracketedContentInMolStructure22832_static.FOLLOW_lsqb_in_bracketedContentInMolStructure22832);
                    lsqb568=lsqb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb568.getTree());
                    pushFollow(FOLLOW_bracketedContentInMolContents1_in_bracketedContentInMolStructure22834_static.FOLLOW_bracketedContentInMolContents1_in_bracketedContentInMolStructure22834);
                    bracketedContentInMolContents1569=bracketedContentInMolContents1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMolContents1569.getTree());
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:392:141: ( bracketedContentInMolContents2 )*
                    loop193:
                    do {
                        int alt193=2;
                        switch ( input.LA(1) ) {
                        case 38:
                        case 39:
                        case 40:
                        case 41:
                        case 42:
                        case 43:
                        case 45:
                        case 46:
                        case 47:
                        case 48:
                        case 49:
                        case 50:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 55:
                        case 56:
                        case 57:
                        case 58:
                        case 59:
                        case 60:
                        case 61:
                        case 62:
                        case 63:
                        case 64:
                        case 66:
                        case 68:
                        case 69:
                        case 70:
                        case 71:
                        case 72:
                        case 73:
                        case 74:
                        case 75:
                        case 76:
                        case 77:
                        case 78:
                        case 79:
                        case 80:
                        case 81:
                        case 82:
                        case 83:
                        case 84:
                        case 85:
                        case 86:
                        case 87:
                        case 88:
                        case 89:
                        case 90:
                        case 91:
                        case 92:
                        case 93:
                        case 94:
                        case 95:
                        case 96:
                        case 97:
                        case 98:
                        case 99:
                        case 100:
                        case 101:
                        case 102:
                        case 103:
                        case 104:
                        case 105:
                        case 106:
                        case 107:
                        case 108:
                        case 109:
                        case 110:
                        case 111:
                        case 112:
                        case 113:
                        case 114:
                        case 115:
                        case 116:
                        case 117:
                        case 118:
                        case 119:
                        case 120:
                        case 121:
                        case 122:
                        case 123:
                        case 124:
                        case 125:
                        case 126:
                        case 127:
                        case 128:
                        case 129:
                        case 130:
                        case 132:
                        case 133:
                        case 136:
                        case 137:
                        case 138:
                        case 139:
                        case 141:
                        case 143:
                        case 145:
                        case 146:
                        case 147:
                        case 148:
                        case 149:
                        case 150:
                        case 151:
                        case 152:
                        case 153:
                        case 154:
                        case 155:
                        case 156:
                        case 157:
                        case 158:
                        case 159:
                        case 160:
                        case 161:
                        case 162:
                        case 163:
                        case 168:
                        case 169:
                        case 171:
                        case 172:
                        case 173:
                        case 174:
                        case 175:
                        case 176:
                        case 177:
                        case 178:
                        case 179:
                        case 180:
                            {
                            alt193=1;
                            }
                            break;

                        }

                        switch (alt193) {
                    	case 1 :
                    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: bracketedContentInMolContents2
                    	    {
                    	    pushFollow(FOLLOW_bracketedContentInMolContents2_in_bracketedContentInMolStructure22836_static.FOLLOW_bracketedContentInMolContents2_in_bracketedContentInMolStructure22836);
                    	    bracketedContentInMolContents2570=bracketedContentInMolContents2();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMolContents2570.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop193;
                        }
                    } while (true);

                    pushFollow(FOLLOW_rsqb_in_bracketedContentInMolStructure22839_static.FOLLOW_rsqb_in_bracketedContentInMolStructure22839);
                    rsqb571=rsqb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb571.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, bracketedContentInMolStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContentInMolStructure2"

    public static class bracketedContentInMolContents1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContentInMolContents1"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:393:1: bracketedContentInMolContents1 : ( numberCompoundReference ( comma | colon | {...}? stop ) | bracketedContentInMolContentsAlwaysAllowed );
    public final ChemicalChunkerParser.bracketedContentInMolContents1_return bracketedContentInMolContents1() throws RecognitionException {
        ChemicalChunkerParser.bracketedContentInMolContents1_return retval = new ChemicalChunkerParser.bracketedContentInMolContents1_return();
        retval.start = input.LT(1);
        int bracketedContentInMolContents1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference572 = null;

        ChemicalChunkerParser.comma_return comma573 = null;

        ChemicalChunkerParser.colon_return colon574 = null;

        ChemicalChunkerParser.stop_return stop575 = null;

        ChemicalChunkerParser.bracketedContentInMolContentsAlwaysAllowed_return bracketedContentInMolContentsAlwaysAllowed576 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:393:31: ( numberCompoundReference ( comma | colon | {...}? stop ) | bracketedContentInMolContentsAlwaysAllowed )
            int alt196=2;
            alt196 = dfa196.predict(input);
            switch (alt196) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:393:33: numberCompoundReference ( comma | colon | {...}? stop )
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_numberCompoundReference_in_bracketedContentInMolContents12845_static.FOLLOW_numberCompoundReference_in_bracketedContentInMolContents12845);
                    numberCompoundReference572=numberCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberCompoundReference572.getTree());
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:393:57: ( comma | colon | {...}? stop )
                    int alt195=3;
                    switch ( input.LA(1) ) {
                    case 133:
                        {
                        alt195=1;
                        }
                        break;
                    case 132:
                        {
                        alt195=2;
                        }
                        break;
                    case 137:
                        {
                        alt195=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 195, 0, input);

                        throw nvae;
                    }

                    switch (alt195) {
                        case 1 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:393:58: comma
                            {
                            pushFollow(FOLLOW_comma_in_bracketedContentInMolContents12848_static.FOLLOW_comma_in_bracketedContentInMolContents12848);
                            comma573=comma();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma573.getTree());

                            }
                            break;
                        case 2 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:393:66: colon
                            {
                            pushFollow(FOLLOW_colon_in_bracketedContentInMolContents12852_static.FOLLOW_colon_in_bracketedContentInMolContents12852);
                            colon574=colon();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, colon574.getTree());

                            }
                            break;
                        case 3 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:393:74: {...}? stop
                            {
                            if ( !((nextIsSemiColon(input))) ) {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                throw new FailedPredicateException(input, "bracketedContentInMolContents1", "nextIsSemiColon(input)");
                            }
                            pushFollow(FOLLOW_stop_in_bracketedContentInMolContents12858_static.FOLLOW_stop_in_bracketedContentInMolContents12858);
                            stop575=stop();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, stop575.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:393:106: bracketedContentInMolContentsAlwaysAllowed
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_bracketedContentInMolContentsAlwaysAllowed_in_bracketedContentInMolContents12861_static.FOLLOW_bracketedContentInMolContentsAlwaysAllowed_in_bracketedContentInMolContents12861);
                    bracketedContentInMolContentsAlwaysAllowed576=bracketedContentInMolContentsAlwaysAllowed();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMolContentsAlwaysAllowed576.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, bracketedContentInMolContents1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContentInMolContents1"

    public static class bracketedContentInMolContents2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContentInMolContents2"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:394:1: bracketedContentInMolContents2 : ( cc | bracketedContentInMolContentsAlwaysAllowed );
    public final ChemicalChunkerParser.bracketedContentInMolContents2_return bracketedContentInMolContents2() throws RecognitionException {
        ChemicalChunkerParser.bracketedContentInMolContents2_return retval = new ChemicalChunkerParser.bracketedContentInMolContents2_return();
        retval.start = input.LT(1);
        int bracketedContentInMolContents2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cc_return cc577 = null;

        ChemicalChunkerParser.bracketedContentInMolContentsAlwaysAllowed_return bracketedContentInMolContentsAlwaysAllowed578 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:394:31: ( cc | bracketedContentInMolContentsAlwaysAllowed )
            int alt197=2;
            switch ( input.LA(1) ) {
            case 145:
                {
                alt197=1;
                }
                break;
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
            case 64:
            case 66:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 127:
            case 128:
            case 129:
            case 130:
            case 132:
            case 133:
            case 136:
            case 137:
            case 138:
            case 139:
            case 141:
            case 143:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 159:
            case 160:
            case 161:
            case 162:
            case 163:
            case 168:
            case 169:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 178:
            case 179:
            case 180:
                {
                alt197=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 197, 0, input);

                throw nvae;
            }

            switch (alt197) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:394:33: cc
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cc_in_bracketedContentInMolContents22867_static.FOLLOW_cc_in_bracketedContentInMolContents22867);
                    cc577=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc577.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:394:38: bracketedContentInMolContentsAlwaysAllowed
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_bracketedContentInMolContentsAlwaysAllowed_in_bracketedContentInMolContents22871_static.FOLLOW_bracketedContentInMolContentsAlwaysAllowed_in_bracketedContentInMolContents22871);
                    bracketedContentInMolContentsAlwaysAllowed578=bracketedContentInMolContentsAlwaysAllowed();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMolContentsAlwaysAllowed578.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, bracketedContentInMolContents2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContentInMolContents2"

    public static class bracketedContentInMolContentsAlwaysAllowed_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedContentInMolContentsAlwaysAllowed"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:1: bracketedContentInMolContentsAlwaysAllowed : ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | cd | md | percentsign | dash | inAll | comma | adj | colon | stop | noun | bracketedContentInMol );
    public final ChemicalChunkerParser.bracketedContentInMolContentsAlwaysAllowed_return bracketedContentInMolContentsAlwaysAllowed() throws RecognitionException {
        ChemicalChunkerParser.bracketedContentInMolContentsAlwaysAllowed_return retval = new ChemicalChunkerParser.bracketedContentInMolContentsAlwaysAllowed_return();
        retval.start = input.LT(1);
        int bracketedContentInMolContentsAlwaysAllowed_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.verb_return verb579 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node580 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound581 = null;

        ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return alphanumericOrIdentifierCompoundReference582 = null;

        ChemicalChunkerParser.ratio_return ratio583 = null;

        ChemicalChunkerParser.cd_return cd584 = null;

        ChemicalChunkerParser.md_return md585 = null;

        ChemicalChunkerParser.percentsign_return percentsign586 = null;

        ChemicalChunkerParser.dash_return dash587 = null;

        ChemicalChunkerParser.inAll_return inAll588 = null;

        ChemicalChunkerParser.comma_return comma589 = null;

        ChemicalChunkerParser.adj_return adj590 = null;

        ChemicalChunkerParser.colon_return colon591 = null;

        ChemicalChunkerParser.stop_return stop592 = null;

        ChemicalChunkerParser.noun_return noun593 = null;

        ChemicalChunkerParser.bracketedContentInMol_return bracketedContentInMol594 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:43: ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | cd | md | percentsign | dash | inAll | comma | adj | colon | stop | noun | bracketedContentInMol )
            int alt198=16;
            alt198 = dfa198.predict(input);
            switch (alt198) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:45: verb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_verb_in_bracketedContentInMolContentsAlwaysAllowed2878_static.FOLLOW_verb_in_bracketedContentInMolContentsAlwaysAllowed2878);
                    verb579=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb579.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:50: quantity2Node
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantity2Node_in_bracketedContentInMolContentsAlwaysAllowed2880_static.FOLLOW_quantity2Node_in_bracketedContentInMolContentsAlwaysAllowed2880);
                    quantity2Node580=quantity2Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node580.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:64: oscarCompound
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarCompound_in_bracketedContentInMolContentsAlwaysAllowed2882_static.FOLLOW_oscarCompound_in_bracketedContentInMolContentsAlwaysAllowed2882);
                    oscarCompound581=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound581.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:78: alphanumericOrIdentifierCompoundReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_alphanumericOrIdentifierCompoundReference_in_bracketedContentInMolContentsAlwaysAllowed2884_static.FOLLOW_alphanumericOrIdentifierCompoundReference_in_bracketedContentInMolContentsAlwaysAllowed2884);
                    alphanumericOrIdentifierCompoundReference582=alphanumericOrIdentifierCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alphanumericOrIdentifierCompoundReference582.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:120: ratio
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ratio_in_bracketedContentInMolContentsAlwaysAllowed2886_static.FOLLOW_ratio_in_bracketedContentInMolContentsAlwaysAllowed2886);
                    ratio583=ratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio583.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:126: cd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cd_in_bracketedContentInMolContentsAlwaysAllowed2888_static.FOLLOW_cd_in_bracketedContentInMolContentsAlwaysAllowed2888);
                    cd584=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd584.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:129: md
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_md_in_bracketedContentInMolContentsAlwaysAllowed2890_static.FOLLOW_md_in_bracketedContentInMolContentsAlwaysAllowed2890);
                    md585=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md585.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:132: percentsign
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_percentsign_in_bracketedContentInMolContentsAlwaysAllowed2892_static.FOLLOW_percentsign_in_bracketedContentInMolContentsAlwaysAllowed2892);
                    percentsign586=percentsign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percentsign586.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:144: dash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_dash_in_bracketedContentInMolContentsAlwaysAllowed2894_static.FOLLOW_dash_in_bracketedContentInMolContentsAlwaysAllowed2894);
                    dash587=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash587.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:149: inAll
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inAll_in_bracketedContentInMolContentsAlwaysAllowed2896_static.FOLLOW_inAll_in_bracketedContentInMolContentsAlwaysAllowed2896);
                    inAll588=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll588.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:155: comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_bracketedContentInMolContentsAlwaysAllowed2898_static.FOLLOW_comma_in_bracketedContentInMolContentsAlwaysAllowed2898);
                    comma589=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma589.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:161: adj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adj_in_bracketedContentInMolContentsAlwaysAllowed2900_static.FOLLOW_adj_in_bracketedContentInMolContentsAlwaysAllowed2900);
                    adj590=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj590.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:165: colon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_colon_in_bracketedContentInMolContentsAlwaysAllowed2902_static.FOLLOW_colon_in_bracketedContentInMolContentsAlwaysAllowed2902);
                    colon591=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon591.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:171: stop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_stop_in_bracketedContentInMolContentsAlwaysAllowed2904_static.FOLLOW_stop_in_bracketedContentInMolContentsAlwaysAllowed2904);
                    stop592=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop592.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:176: noun
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_noun_in_bracketedContentInMolContentsAlwaysAllowed2906_static.FOLLOW_noun_in_bracketedContentInMolContentsAlwaysAllowed2906);
                    noun593=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun593.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:181: bracketedContentInMol
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_bracketedContentInMol_in_bracketedContentInMolContentsAlwaysAllowed2908_static.FOLLOW_bracketedContentInMol_in_bracketedContentInMolContentsAlwaysAllowed2908);
                    bracketedContentInMol594=bracketedContentInMol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedContentInMol594.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, bracketedContentInMolContentsAlwaysAllowed_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedContentInMolContentsAlwaysAllowed"

    public static class fromProcedure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fromProcedure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:397:1: fromProcedure : ( infrom | {...}? inof | {...}? ( vbyield | vbsynthesize ) ( inin | inby | infrom ) ) procedureNode ;
    public final ChemicalChunkerParser.fromProcedure_return fromProcedure() throws RecognitionException {
        ChemicalChunkerParser.fromProcedure_return retval = new ChemicalChunkerParser.fromProcedure_return();
        retval.start = input.LT(1);
        int fromProcedure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.infrom_return infrom595 = null;

        ChemicalChunkerParser.inof_return inof596 = null;

        ChemicalChunkerParser.vbyield_return vbyield597 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize598 = null;

        ChemicalChunkerParser.inin_return inin599 = null;

        ChemicalChunkerParser.inby_return inby600 = null;

        ChemicalChunkerParser.infrom_return infrom601 = null;

        ChemicalChunkerParser.procedureNode_return procedureNode602 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:397:14: ( ( infrom | {...}? inof | {...}? ( vbyield | vbsynthesize ) ( inin | inby | infrom ) ) procedureNode )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:397:16: ( infrom | {...}? inof | {...}? ( vbyield | vbsynthesize ) ( inin | inby | infrom ) ) procedureNode
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:397:16: ( infrom | {...}? inof | {...}? ( vbyield | vbsynthesize ) ( inin | inby | infrom ) )
            int alt201=3;
            switch ( input.LA(1) ) {
            case 59:
                {
                alt201=1;
                }
                break;
            case 56:
                {
                alt201=2;
                }
                break;
            case 125:
            case 129:
                {
                alt201=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 201, 0, input);

                throw nvae;
            }

            switch (alt201) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:397:17: infrom
                    {
                    pushFollow(FOLLOW_infrom_in_fromProcedure2916_static.FOLLOW_infrom_in_fromProcedure2916);
                    infrom595=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom595.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:397:26: {...}? inof
                    {
                    if ( !((precededByProduct(input))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "fromProcedure", "precededByProduct(input)");
                    }
                    pushFollow(FOLLOW_inof_in_fromProcedure2922_static.FOLLOW_inof_in_fromProcedure2922);
                    inof596=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof596.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:397:61: {...}? ( vbyield | vbsynthesize ) ( inin | inby | infrom )
                    {
                    if ( !((suitableVbYieldOrSynthesizeForReference(input))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "fromProcedure", "suitableVbYieldOrSynthesizeForReference(input)");
                    }
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:397:111: ( vbyield | vbsynthesize )
                    int alt199=2;
                    switch ( input.LA(1) ) {
                    case 129:
                        {
                        alt199=1;
                        }
                        break;
                    case 125:
                        {
                        alt199=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 199, 0, input);

                        throw nvae;
                    }

                    switch (alt199) {
                        case 1 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:397:112: vbyield
                            {
                            pushFollow(FOLLOW_vbyield_in_fromProcedure2929_static.FOLLOW_vbyield_in_fromProcedure2929);
                            vbyield597=vbyield();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield597.getTree());

                            }
                            break;
                        case 2 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:397:120: vbsynthesize
                            {
                            pushFollow(FOLLOW_vbsynthesize_in_fromProcedure2931_static.FOLLOW_vbsynthesize_in_fromProcedure2931);
                            vbsynthesize598=vbsynthesize();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize598.getTree());

                            }
                            break;

                    }

                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:397:134: ( inin | inby | infrom )
                    int alt200=3;
                    switch ( input.LA(1) ) {
                    case 50:
                        {
                        alt200=1;
                        }
                        break;
                    case 54:
                        {
                        alt200=2;
                        }
                        break;
                    case 59:
                        {
                        alt200=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 200, 0, input);

                        throw nvae;
                    }

                    switch (alt200) {
                        case 1 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:397:135: inin
                            {
                            pushFollow(FOLLOW_inin_in_fromProcedure2935_static.FOLLOW_inin_in_fromProcedure2935);
                            inin599=inin();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, inin599.getTree());

                            }
                            break;
                        case 2 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:397:140: inby
                            {
                            pushFollow(FOLLOW_inby_in_fromProcedure2937_static.FOLLOW_inby_in_fromProcedure2937);
                            inby600=inby();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, inby600.getTree());

                            }
                            break;
                        case 3 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:397:145: infrom
                            {
                            pushFollow(FOLLOW_infrom_in_fromProcedure2939_static.FOLLOW_infrom_in_fromProcedure2939);
                            infrom601=infrom();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom601.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_procedureNode_in_fromProcedure2943_static.FOLLOW_procedureNode_in_fromProcedure2943);
            procedureNode602=procedureNode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureNode602.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, fromProcedure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fromProcedure"

    public static class procedureNode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedureNode"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:399:1: procedureNode : method -> ^( PROCEDURE method ) ;
    public final ChemicalChunkerParser.procedureNode_return procedureNode() throws RecognitionException {
        ChemicalChunkerParser.procedureNode_return retval = new ChemicalChunkerParser.procedureNode_return();
        retval.start = input.LT(1);
        int procedureNode_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.method_return method603 = null;


        RewriteRuleSubtreeStream stream_method=new RewriteRuleSubtreeStream(adaptor,"rule method");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:399:14: ( method -> ^( PROCEDURE method ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:399:16: method
            {
            pushFollow(FOLLOW_method_in_procedureNode2950_static.FOLLOW_method_in_procedureNode2950);
            method603=method();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method.add(method603.getTree());


            // AST REWRITE
            // elements: method
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 399:23: -> ^( PROCEDURE method )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:399:26: ^( PROCEDURE method )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PROCEDURE, "PROCEDURE"), root_1);

                adaptor.addChild(root_1, stream_method.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, procedureNode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedureNode"

    public static class method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "method"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:401:1: method : ( ( nngeneral | nn )? nnmethod ( allIdentifierTypes )? | nnexample allIdentifierTypes ) ( ( comma | colon | inof | infrom )? submethod | lrb submethod rrb )* ;
    public final ChemicalChunkerParser.method_return method() throws RecognitionException {
        ChemicalChunkerParser.method_return retval = new ChemicalChunkerParser.method_return();
        retval.start = input.LT(1);
        int method_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral604 = null;

        ChemicalChunkerParser.nn_return nn605 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod606 = null;

        ChemicalChunkerParser.allIdentifierTypes_return allIdentifierTypes607 = null;

        ChemicalChunkerParser.nnexample_return nnexample608 = null;

        ChemicalChunkerParser.allIdentifierTypes_return allIdentifierTypes609 = null;

        ChemicalChunkerParser.comma_return comma610 = null;

        ChemicalChunkerParser.colon_return colon611 = null;

        ChemicalChunkerParser.inof_return inof612 = null;

        ChemicalChunkerParser.infrom_return infrom613 = null;

        ChemicalChunkerParser.submethod_return submethod614 = null;

        ChemicalChunkerParser.lrb_return lrb615 = null;

        ChemicalChunkerParser.submethod_return submethod616 = null;

        ChemicalChunkerParser.rrb_return rrb617 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:401:7: ( ( ( nngeneral | nn )? nnmethod ( allIdentifierTypes )? | nnexample allIdentifierTypes ) ( ( comma | colon | inof | infrom )? submethod | lrb submethod rrb )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:402:5: ( ( nngeneral | nn )? nnmethod ( allIdentifierTypes )? | nnexample allIdentifierTypes ) ( ( comma | colon | inof | infrom )? submethod | lrb submethod rrb )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:402:5: ( ( nngeneral | nn )? nnmethod ( allIdentifierTypes )? | nnexample allIdentifierTypes )
            int alt204=2;
            switch ( input.LA(1) ) {
            case 75:
            case 76:
            case 156:
                {
                alt204=1;
                }
                break;
            case 83:
                {
                alt204=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 204, 0, input);

                throw nvae;
            }

            switch (alt204) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:402:6: ( nngeneral | nn )? nnmethod ( allIdentifierTypes )?
                    {
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:402:6: ( nngeneral | nn )?
                    int alt202=3;
                    switch ( input.LA(1) ) {
                        case 75:
                            {
                            alt202=1;
                            }
                            break;
                        case 156:
                            {
                            alt202=2;
                            }
                            break;
                    }

                    switch (alt202) {
                        case 1 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:402:7: nngeneral
                            {
                            pushFollow(FOLLOW_nngeneral_in_method2971_static.FOLLOW_nngeneral_in_method2971);
                            nngeneral604=nngeneral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral604.getTree());

                            }
                            break;
                        case 2 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:402:17: nn
                            {
                            pushFollow(FOLLOW_nn_in_method2973_static.FOLLOW_nn_in_method2973);
                            nn605=nn();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nn605.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_nnmethod_in_method2977_static.FOLLOW_nnmethod_in_method2977);
                    nnmethod606=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod606.getTree());
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:402:31: ( allIdentifierTypes )?
                    int alt203=2;
                    alt203 = dfa203.predict(input);
                    switch (alt203) {
                        case 1 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: allIdentifierTypes
                            {
                            pushFollow(FOLLOW_allIdentifierTypes_in_method2979_static.FOLLOW_allIdentifierTypes_in_method2979);
                            allIdentifierTypes607=allIdentifierTypes();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, allIdentifierTypes607.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:402:53: nnexample allIdentifierTypes
                    {
                    pushFollow(FOLLOW_nnexample_in_method2984_static.FOLLOW_nnexample_in_method2984);
                    nnexample608=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample608.getTree());
                    pushFollow(FOLLOW_allIdentifierTypes_in_method2986_static.FOLLOW_allIdentifierTypes_in_method2986);
                    allIdentifierTypes609=allIdentifierTypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, allIdentifierTypes609.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:402:83: ( ( comma | colon | inof | infrom )? submethod | lrb submethod rrb )*
            loop206:
            do {
                int alt206=3;
                alt206 = dfa206.predict(input);
                switch (alt206) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:402:85: ( comma | colon | inof | infrom )? submethod
            	    {
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:402:85: ( comma | colon | inof | infrom )?
            	    int alt205=5;
            	    switch ( input.LA(1) ) {
            	        case 133:
            	            {
            	            alt205=1;
            	            }
            	            break;
            	        case 132:
            	            {
            	            alt205=2;
            	            }
            	            break;
            	        case 56:
            	            {
            	            alt205=3;
            	            }
            	            break;
            	        case 59:
            	            {
            	            alt205=4;
            	            }
            	            break;
            	    }

            	    switch (alt205) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:402:86: comma
            	            {
            	            pushFollow(FOLLOW_comma_in_method2992_static.FOLLOW_comma_in_method2992);
            	            comma610=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma610.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:402:93: colon
            	            {
            	            pushFollow(FOLLOW_colon_in_method2995_static.FOLLOW_colon_in_method2995);
            	            colon611=colon();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, colon611.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:402:100: inof
            	            {
            	            pushFollow(FOLLOW_inof_in_method2998_static.FOLLOW_inof_in_method2998);
            	            inof612=inof();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof612.getTree());

            	            }
            	            break;
            	        case 4 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:402:107: infrom
            	            {
            	            pushFollow(FOLLOW_infrom_in_method3002_static.FOLLOW_infrom_in_method3002);
            	            infrom613=infrom();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom613.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_submethod_in_method3006_static.FOLLOW_submethod_in_method3006);
            	    submethod614=submethod();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, submethod614.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:402:128: lrb submethod rrb
            	    {
            	    pushFollow(FOLLOW_lrb_in_method3010_static.FOLLOW_lrb_in_method3010);
            	    lrb615=lrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb615.getTree());
            	    pushFollow(FOLLOW_submethod_in_method3012_static.FOLLOW_submethod_in_method3012);
            	    submethod616=submethod();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, submethod616.getTree());
            	    pushFollow(FOLLOW_rrb_in_method3014_static.FOLLOW_rrb_in_method3014);
            	    rrb617=rrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb617.getTree());

            	    }
            	    break;

            	default :
            	    break loop206;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, method_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "method"

    public static class submethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "submethod"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:404:1: submethod : ( nnmethod | nnexample ) allIdentifierTypes ;
    public final ChemicalChunkerParser.submethod_return submethod() throws RecognitionException {
        ChemicalChunkerParser.submethod_return retval = new ChemicalChunkerParser.submethod_return();
        retval.start = input.LT(1);
        int submethod_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod618 = null;

        ChemicalChunkerParser.nnexample_return nnexample619 = null;

        ChemicalChunkerParser.allIdentifierTypes_return allIdentifierTypes620 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:404:11: ( ( nnmethod | nnexample ) allIdentifierTypes )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:404:13: ( nnmethod | nnexample ) allIdentifierTypes
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:404:13: ( nnmethod | nnexample )
            int alt207=2;
            switch ( input.LA(1) ) {
            case 76:
                {
                alt207=1;
                }
                break;
            case 83:
                {
                alt207=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 207, 0, input);

                throw nvae;
            }

            switch (alt207) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:404:14: nnmethod
                    {
                    pushFollow(FOLLOW_nnmethod_in_submethod3025_static.FOLLOW_nnmethod_in_submethod3025);
                    nnmethod618=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod618.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:404:23: nnexample
                    {
                    pushFollow(FOLLOW_nnexample_in_submethod3027_static.FOLLOW_nnexample_in_submethod3027);
                    nnexample619=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample619.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_allIdentifierTypes_in_submethod3030_static.FOLLOW_allIdentifierTypes_in_submethod3030);
            allIdentifierTypes620=allIdentifierTypes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, allIdentifierTypes620.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, submethod_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "submethod"

    public static class referenceToExampleCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "referenceToExampleCompound"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:406:1: referenceToExampleCompound : nnexample allIdentifierTypes -> ^( REFERENCETOCOMPOUND nnexample allIdentifierTypes ) ;
    public final ChemicalChunkerParser.referenceToExampleCompound_return referenceToExampleCompound() throws RecognitionException {
        ChemicalChunkerParser.referenceToExampleCompound_return retval = new ChemicalChunkerParser.referenceToExampleCompound_return();
        retval.start = input.LT(1);
        int referenceToExampleCompound_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnexample_return nnexample621 = null;

        ChemicalChunkerParser.allIdentifierTypes_return allIdentifierTypes622 = null;


        RewriteRuleSubtreeStream stream_allIdentifierTypes=new RewriteRuleSubtreeStream(adaptor,"rule allIdentifierTypes");
        RewriteRuleSubtreeStream stream_nnexample=new RewriteRuleSubtreeStream(adaptor,"rule nnexample");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:406:28: ( nnexample allIdentifierTypes -> ^( REFERENCETOCOMPOUND nnexample allIdentifierTypes ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:407:2: nnexample allIdentifierTypes
            {
            pushFollow(FOLLOW_nnexample_in_referenceToExampleCompound3039_static.FOLLOW_nnexample_in_referenceToExampleCompound3039);
            nnexample621=nnexample();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnexample.add(nnexample621.getTree());
            pushFollow(FOLLOW_allIdentifierTypes_in_referenceToExampleCompound3041_static.FOLLOW_allIdentifierTypes_in_referenceToExampleCompound3041);
            allIdentifierTypes622=allIdentifierTypes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_allIdentifierTypes.add(allIdentifierTypes622.getTree());


            // AST REWRITE
            // elements: nnexample, allIdentifierTypes
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 407:31: -> ^( REFERENCETOCOMPOUND nnexample allIdentifierTypes )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:407:34: ^( REFERENCETOCOMPOUND nnexample allIdentifierTypes )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                adaptor.addChild(root_1, stream_nnexample.nextTree());
                adaptor.addChild(root_1, stream_allIdentifierTypes.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, referenceToExampleCompound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "referenceToExampleCompound"

    public static class advAdj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "advAdj"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:409:1: advAdj : ( adv | adj );
    public final ChemicalChunkerParser.advAdj_return advAdj() throws RecognitionException {
        ChemicalChunkerParser.advAdj_return retval = new ChemicalChunkerParser.advAdj_return();
        retval.start = input.LT(1);
        int advAdj_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv623 = null;

        ChemicalChunkerParser.adj_return adj624 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:410:2: ( adv | adj )
            int alt208=2;
            switch ( input.LA(1) ) {
            case 164:
            case 165:
            case 166:
            case 167:
                {
                alt208=1;
                }
                break;
            case 40:
            case 41:
            case 45:
            case 151:
            case 152:
            case 153:
                {
                alt208=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 208, 0, input);

                throw nvae;
            }

            switch (alt208) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:410:3: adv
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adv_in_advAdj3059_static.FOLLOW_adv_in_advAdj3059);
                    adv623=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv623.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:410:7: adj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adj_in_advAdj3061_static.FOLLOW_adj_in_advAdj3061);
                    adj624=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj624.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, advAdj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "advAdj"

    public static class range_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "range"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:412:1: range : numeric dash numeric ;
    public final ChemicalChunkerParser.range_return range() throws RecognitionException {
        ChemicalChunkerParser.range_return retval = new ChemicalChunkerParser.range_return();
        retval.start = input.LT(1);
        int range_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric625 = null;

        ChemicalChunkerParser.dash_return dash626 = null;

        ChemicalChunkerParser.numeric_return numeric627 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:412:6: ( numeric dash numeric )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:412:8: numeric dash numeric
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_numeric_in_range3068_static.FOLLOW_numeric_in_range3068);
            numeric625=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric625.getTree());
            pushFollow(FOLLOW_dash_in_range3070_static.FOLLOW_dash_in_range3070);
            dash626=dash();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash626.getTree());
            pushFollow(FOLLOW_numeric_in_range3072_static.FOLLOW_numeric_in_range3072);
            numeric627=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric627.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, range_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "range"

    public static class cycles_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycles"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:413:1: cycles : cycleStructure -> ^( CYCLES cycleStructure ) ;
    public final ChemicalChunkerParser.cycles_return cycles() throws RecognitionException {
        ChemicalChunkerParser.cycles_return retval = new ChemicalChunkerParser.cycles_return();
        retval.start = input.LT(1);
        int cycles_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cycleStructure_return cycleStructure628 = null;


        RewriteRuleSubtreeStream stream_cycleStructure=new RewriteRuleSubtreeStream(adaptor,"rule cycleStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:413:8: ( cycleStructure -> ^( CYCLES cycleStructure ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:413:10: cycleStructure
            {
            pushFollow(FOLLOW_cycleStructure_in_cycles3079_static.FOLLOW_cycleStructure_in_cycles3079);
            cycleStructure628=cycleStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cycleStructure.add(cycleStructure628.getTree());


            // AST REWRITE
            // elements: cycleStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 413:25: -> ^( CYCLES cycleStructure )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:413:28: ^( CYCLES cycleStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CYCLES, "CYCLES"), root_1);

                adaptor.addChild(root_1, stream_cycleStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, cycles_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cycles"

    public static class cycleStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycleStructure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:414:1: cycleStructure : cd ( dashNN )? nncycle ;
    public final ChemicalChunkerParser.cycleStructure_return cycleStructure() throws RecognitionException {
        ChemicalChunkerParser.cycleStructure_return retval = new ChemicalChunkerParser.cycleStructure_return();
        retval.start = input.LT(1);
        int cycleStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd629 = null;

        ChemicalChunkerParser.dashNN_return dashNN630 = null;

        ChemicalChunkerParser.nncycle_return nncycle631 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:414:16: ( cd ( dashNN )? nncycle )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:414:18: cd ( dashNN )? nncycle
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_cycleStructure3096_static.FOLLOW_cd_in_cycleStructure3096);
            cd629=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd629.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:414:21: ( dashNN )?
            int alt209=2;
            switch ( input.LA(1) ) {
                case 40:
                case 41:
                case 45:
                case 146:
                case 151:
                case 152:
                case 153:
                case 156:
                    {
                    alt209=1;
                    }
                    break;
            }

            switch (alt209) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dashNN
                    {
                    pushFollow(FOLLOW_dashNN_in_cycleStructure3098_static.FOLLOW_dashNN_in_cycleStructure3098);
                    dashNN630=dashNN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dashNN630.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nncycle_in_cycleStructure3101_static.FOLLOW_nncycle_in_cycleStructure3101);
            nncycle631=nncycle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle631.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, cycleStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cycleStructure"

    public static class dashNN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dashNN"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:415:1: dashNN : ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* ;
    public final ChemicalChunkerParser.dashNN_return dashNN() throws RecognitionException {
        ChemicalChunkerParser.dashNN_return retval = new ChemicalChunkerParser.dashNN_return();
        retval.start = input.LT(1);
        int dashNN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj632 = null;

        ChemicalChunkerParser.nn_return nn633 = null;

        ChemicalChunkerParser.cd_return cd634 = null;

        ChemicalChunkerParser.dash_return dash635 = null;

        ChemicalChunkerParser.adj_return adj636 = null;

        ChemicalChunkerParser.nn_return nn637 = null;

        ChemicalChunkerParser.cd_return cd638 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:415:8: ( ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:415:10: ( adj | nn | cd ) ( dash ( adj | nn | cd ) )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:415:10: ( adj | nn | cd )
            int alt210=3;
            switch ( input.LA(1) ) {
            case 40:
            case 41:
            case 45:
            case 151:
            case 152:
            case 153:
                {
                alt210=1;
                }
                break;
            case 156:
                {
                alt210=2;
                }
                break;
            case 146:
                {
                alt210=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 210, 0, input);

                throw nvae;
            }

            switch (alt210) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:415:11: adj
                    {
                    pushFollow(FOLLOW_adj_in_dashNN3109_static.FOLLOW_adj_in_dashNN3109);
                    adj632=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj632.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:415:15: nn
                    {
                    pushFollow(FOLLOW_nn_in_dashNN3111_static.FOLLOW_nn_in_dashNN3111);
                    nn633=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn633.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:415:18: cd
                    {
                    pushFollow(FOLLOW_cd_in_dashNN3113_static.FOLLOW_cd_in_dashNN3113);
                    cd634=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd634.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:415:22: ( dash ( adj | nn | cd ) )*
            loop212:
            do {
                int alt212=2;
                switch ( input.LA(1) ) {
                case 136:
                    {
                    alt212=1;
                    }
                    break;

                }

                switch (alt212) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:415:23: dash ( adj | nn | cd )
            	    {
            	    pushFollow(FOLLOW_dash_in_dashNN3117_static.FOLLOW_dash_in_dashNN3117);
            	    dash635=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash635.getTree());
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:415:28: ( adj | nn | cd )
            	    int alt211=3;
            	    switch ( input.LA(1) ) {
            	    case 40:
            	    case 41:
            	    case 45:
            	    case 151:
            	    case 152:
            	    case 153:
            	        {
            	        alt211=1;
            	        }
            	        break;
            	    case 156:
            	        {
            	        alt211=2;
            	        }
            	        break;
            	    case 146:
            	        {
            	        alt211=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 211, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt211) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:415:29: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dashNN3120_static.FOLLOW_adj_in_dashNN3120);
            	            adj636=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj636.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:415:33: nn
            	            {
            	            pushFollow(FOLLOW_nn_in_dashNN3122_static.FOLLOW_nn_in_dashNN3122);
            	            nn637=nn();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nn637.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:415:36: cd
            	            {
            	            pushFollow(FOLLOW_cd_in_dashNN3124_static.FOLLOW_cd_in_dashNN3124);
            	            cd638=cd();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd638.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop212;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, dashNN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dashNN"

    public static class ratioOrBracketedRatio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ratioOrBracketedRatio"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:417:1: ratioOrBracketedRatio : ( lrb ratio rrb | ratio );
    public final ChemicalChunkerParser.ratioOrBracketedRatio_return ratioOrBracketedRatio() throws RecognitionException {
        ChemicalChunkerParser.ratioOrBracketedRatio_return retval = new ChemicalChunkerParser.ratioOrBracketedRatio_return();
        retval.start = input.LT(1);
        int ratioOrBracketedRatio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb639 = null;

        ChemicalChunkerParser.ratio_return ratio640 = null;

        ChemicalChunkerParser.rrb_return rrb641 = null;

        ChemicalChunkerParser.ratio_return ratio642 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:417:23: ( lrb ratio rrb | ratio )
            int alt213=2;
            switch ( input.LA(1) ) {
            case 143:
                {
                alt213=1;
                }
                break;
            case 146:
                {
                alt213=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 213, 0, input);

                throw nvae;
            }

            switch (alt213) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:417:25: lrb ratio rrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_lrb_in_ratioOrBracketedRatio3135_static.FOLLOW_lrb_in_ratioOrBracketedRatio3135);
                    lrb639=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb639.getTree());
                    pushFollow(FOLLOW_ratio_in_ratioOrBracketedRatio3137_static.FOLLOW_ratio_in_ratioOrBracketedRatio3137);
                    ratio640=ratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio640.getTree());
                    pushFollow(FOLLOW_rrb_in_ratioOrBracketedRatio3139_static.FOLLOW_rrb_in_ratioOrBracketedRatio3139);
                    rrb641=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb641.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:417:41: ratio
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ratio_in_ratioOrBracketedRatio3143_static.FOLLOW_ratio_in_ratioOrBracketedRatio3143);
                    ratio642=ratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio642.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, ratioOrBracketedRatio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ratioOrBracketedRatio"

    public static class ratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ratio"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:418:1: ratio : cdRatio -> ^( RATIO cdRatio ) ;
    public final ChemicalChunkerParser.ratio_return ratio() throws RecognitionException {
        ChemicalChunkerParser.ratio_return retval = new ChemicalChunkerParser.ratio_return();
        retval.start = input.LT(1);
        int ratio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cdRatio_return cdRatio643 = null;


        RewriteRuleSubtreeStream stream_cdRatio=new RewriteRuleSubtreeStream(adaptor,"rule cdRatio");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:418:7: ( cdRatio -> ^( RATIO cdRatio ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:418:9: cdRatio
            {
            pushFollow(FOLLOW_cdRatio_in_ratio3150_static.FOLLOW_cdRatio_in_ratio3150);
            cdRatio643=cdRatio();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cdRatio.add(cdRatio643.getTree());


            // AST REWRITE
            // elements: cdRatio
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 418:17: -> ^( RATIO cdRatio )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:418:20: ^( RATIO cdRatio )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RATIO, "RATIO"), root_1);

                adaptor.addChild(root_1, stream_cdRatio.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, ratio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ratio"

    public static class cdRatio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdRatio"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:419:1: cdRatio : cd ( colon cd {...}?)+ ;
    public final ChemicalChunkerParser.cdRatio_return cdRatio() throws RecognitionException {
        ChemicalChunkerParser.cdRatio_return retval = new ChemicalChunkerParser.cdRatio_return();
        retval.start = input.LT(1);
        int cdRatio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd644 = null;

        ChemicalChunkerParser.colon_return colon645 = null;

        ChemicalChunkerParser.cd_return cd646 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:419:9: ( cd ( colon cd {...}?)+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:419:11: cd ( colon cd {...}?)+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_cdRatio3165_static.FOLLOW_cd_in_cdRatio3165);
            cd644=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd644.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:419:14: ( colon cd {...}?)+
            int cnt214=0;
            loop214:
            do {
                int alt214=2;
                switch ( input.LA(1) ) {
                case 132:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 146:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA214_5 = input.LA(5);

                                if ( (synpred470_ChemicalChunker()) ) {
                                    alt214=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt214) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:419:15: colon cd {...}?
            	    {
            	    pushFollow(FOLLOW_colon_in_cdRatio3168_static.FOLLOW_colon_in_cdRatio3168);
            	    colon645=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon645.getTree());
            	    pushFollow(FOLLOW_cd_in_cdRatio3170_static.FOLLOW_cd_in_cdRatio3170);
            	    cd646=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd646.getTree());
            	    if ( !((!followedByQuantityUnits(input))) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "cdRatio", "!followedByQuantityUnits(input)");
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt214 >= 1 ) break loop214;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(214, input);
                        throw eee;
                }
                cnt214++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, cdRatio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdRatio"

    public static class citation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citation"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:421:1: citation : ( citationStructure | comma citationContent comma );
    public final ChemicalChunkerParser.citation_return citation() throws RecognitionException {
        ChemicalChunkerParser.citation_return retval = new ChemicalChunkerParser.citation_return();
        retval.start = input.LT(1);
        int citation_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citationStructure_return citationStructure647 = null;

        ChemicalChunkerParser.comma_return comma648 = null;

        ChemicalChunkerParser.citationContent_return citationContent649 = null;

        ChemicalChunkerParser.comma_return comma650 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:421:9: ( citationStructure | comma citationContent comma )
            int alt215=2;
            switch ( input.LA(1) ) {
            case 143:
                {
                alt215=1;
                }
                break;
            case 133:
                {
                alt215=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 215, 0, input);

                throw nvae;
            }

            switch (alt215) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:421:12: citationStructure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_citationStructure_in_citation3182_static.FOLLOW_citationStructure_in_citation3182);
                    citationStructure647=citationStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citationStructure647.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:421:30: comma citationContent comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_citation3184_static.FOLLOW_comma_in_citation3184);
                    comma648=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma648.getTree());
                    pushFollow(FOLLOW_citationContent_in_citation3186_static.FOLLOW_citationContent_in_citation3186);
                    citationContent649=citationContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citationContent649.getTree());
                    pushFollow(FOLLOW_comma_in_citation3188_static.FOLLOW_comma_in_citation3188);
                    comma650=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma650.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, citation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citation"

    public static class citationStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationStructure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:423:1: citationStructure : citationContent -> ^( CITATION citationContent ) ;
    public final ChemicalChunkerParser.citationStructure_return citationStructure() throws RecognitionException {
        ChemicalChunkerParser.citationStructure_return retval = new ChemicalChunkerParser.citationStructure_return();
        retval.start = input.LT(1);
        int citationStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citationContent_return citationContent651 = null;


        RewriteRuleSubtreeStream stream_citationContent=new RewriteRuleSubtreeStream(adaptor,"rule citationContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:423:18: ( citationContent -> ^( CITATION citationContent ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:423:21: citationContent
            {
            pushFollow(FOLLOW_citationContent_in_citationStructure3196_static.FOLLOW_citationContent_in_citationStructure3196);
            citationContent651=citationContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_citationContent.add(citationContent651.getTree());


            // AST REWRITE
            // elements: citationContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 423:37: -> ^( CITATION citationContent )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:423:40: ^( CITATION citationContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CITATION, "CITATION"), root_1);

                adaptor.addChild(root_1, stream_citationContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, citationStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citationStructure"

    public static class citationContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationContent"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:424:1: citationContent : lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb ;
    public final ChemicalChunkerParser.citationContent_return citationContent() throws RecognitionException {
        ChemicalChunkerParser.citationContent_return retval = new ChemicalChunkerParser.citationContent_return();
        retval.start = input.LT(1);
        int citationContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb652 = null;

        ChemicalChunkerParser.nnp_return nnp653 = null;

        ChemicalChunkerParser.fw_return fw654 = null;

        ChemicalChunkerParser.cd_return cd655 = null;

        ChemicalChunkerParser.conjunction_return conjunction656 = null;

        ChemicalChunkerParser.nnp_return nnp657 = null;

        ChemicalChunkerParser.fw_return fw658 = null;

        ChemicalChunkerParser.cd_return cd659 = null;

        ChemicalChunkerParser.conjunction_return conjunction660 = null;

        ChemicalChunkerParser.rrb_return rrb661 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:424:16: ( lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:424:20: lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_citationContent3212_static.FOLLOW_lrb_in_citationContent3212);
            lrb652=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb652.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:424:24: ( nnp | fw | cd | conjunction )
            int alt216=4;
            switch ( input.LA(1) ) {
            case 158:
                {
                alt216=1;
                }
                break;
            case 149:
                {
                alt216=2;
                }
                break;
            case 146:
                {
                alt216=3;
                }
                break;
            case 133:
            case 145:
                {
                alt216=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 216, 0, input);

                throw nvae;
            }

            switch (alt216) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:424:25: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_citationContent3215_static.FOLLOW_nnp_in_citationContent3215);
                    nnp653=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp653.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:424:29: fw
                    {
                    pushFollow(FOLLOW_fw_in_citationContent3217_static.FOLLOW_fw_in_citationContent3217);
                    fw654=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw654.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:424:32: cd
                    {
                    pushFollow(FOLLOW_cd_in_citationContent3219_static.FOLLOW_cd_in_citationContent3219);
                    cd655=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd655.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:424:35: conjunction
                    {
                    pushFollow(FOLLOW_conjunction_in_citationContent3221_static.FOLLOW_conjunction_in_citationContent3221);
                    conjunction656=conjunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction656.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:424:48: ( nnp | fw | cd | conjunction )+
            int cnt217=0;
            loop217:
            do {
                int alt217=5;
                switch ( input.LA(1) ) {
                case 158:
                    {
                    alt217=1;
                    }
                    break;
                case 149:
                    {
                    alt217=2;
                    }
                    break;
                case 146:
                    {
                    alt217=3;
                    }
                    break;
                case 133:
                case 145:
                    {
                    alt217=4;
                    }
                    break;

                }

                switch (alt217) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:424:49: nnp
            	    {
            	    pushFollow(FOLLOW_nnp_in_citationContent3225_static.FOLLOW_nnp_in_citationContent3225);
            	    nnp657=nnp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp657.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:424:53: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_citationContent3227_static.FOLLOW_fw_in_citationContent3227);
            	    fw658=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw658.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:424:56: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_citationContent3229_static.FOLLOW_cd_in_citationContent3229);
            	    cd659=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd659.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:424:59: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_citationContent3231_static.FOLLOW_conjunction_in_citationContent3231);
            	    conjunction660=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction660.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt217 >= 1 ) break loop217;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(217, input);
                        throw eee;
                }
                cnt217++;
            } while (true);

            pushFollow(FOLLOW_rrb_in_citationContent3235_static.FOLLOW_rrb_in_citationContent3235);
            rrb661=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb661.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, citationContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citationContent"

    public static class allIdentifierTypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "allIdentifierTypes"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:427:1: allIdentifierTypes : ( allIdentifierTypesOtherThanCD | cd {...}?);
    public final ChemicalChunkerParser.allIdentifierTypes_return allIdentifierTypes() throws RecognitionException {
        ChemicalChunkerParser.allIdentifierTypes_return retval = new ChemicalChunkerParser.allIdentifierTypes_return();
        retval.start = input.LT(1);
        int allIdentifierTypes_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.allIdentifierTypesOtherThanCD_return allIdentifierTypesOtherThanCD662 = null;

        ChemicalChunkerParser.cd_return cd663 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:427:20: ( allIdentifierTypesOtherThanCD | cd {...}?)
            int alt218=2;
            switch ( input.LA(1) ) {
            case 39:
            case 139:
            case 141:
            case 143:
                {
                alt218=1;
                }
                break;
            case 146:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    int LA218_3 = input.LA(3);

                    if ( (synpred479_ChemicalChunker()) ) {
                        alt218=1;
                    }
                    else if ( (true) ) {
                        alt218=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 218, 3, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 218, 2, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 218, 0, input);

                throw nvae;
            }

            switch (alt218) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:427:22: allIdentifierTypesOtherThanCD
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_allIdentifierTypesOtherThanCD_in_allIdentifierTypes3245_static.FOLLOW_allIdentifierTypesOtherThanCD_in_allIdentifierTypes3245);
                    allIdentifierTypesOtherThanCD662=allIdentifierTypesOtherThanCD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, allIdentifierTypesOtherThanCD662.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:427:54: cd {...}?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cd_in_allIdentifierTypes3249_static.FOLLOW_cd_in_allIdentifierTypes3249);
                    cd663=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd663.getTree());
                    if ( !((!cdHasRoleOtherThanIdentifier(input))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "allIdentifierTypes", "!cdHasRoleOtherThanIdentifier(input)");
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, allIdentifierTypes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "allIdentifierTypes"

    public static class allIdentifierTypesOtherThanCD_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "allIdentifierTypesOtherThanCD"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:428:1: allIdentifierTypesOtherThanCD : ( squareBracketedReference | identifierOrBracketedIdentifier | cdAlphanum | {...}? bracketedNumeric );
    public final ChemicalChunkerParser.allIdentifierTypesOtherThanCD_return allIdentifierTypesOtherThanCD() throws RecognitionException {
        ChemicalChunkerParser.allIdentifierTypesOtherThanCD_return retval = new ChemicalChunkerParser.allIdentifierTypesOtherThanCD_return();
        retval.start = input.LT(1);
        int allIdentifierTypesOtherThanCD_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference664 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier665 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum666 = null;

        ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric667 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:428:31: ( squareBracketedReference | identifierOrBracketedIdentifier | cdAlphanum | {...}? bracketedNumeric )
            int alt219=4;
            switch ( input.LA(1) ) {
            case 139:
                {
                alt219=1;
                }
                break;
            case 141:
            case 146:
                {
                alt219=2;
                }
                break;
            case 143:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 146:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 141:
                                {
                                alt219=2;
                                }
                                break;
                            case 144:
                                {
                                alt219=4;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 219, 8, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 219, 6, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 141:
                        {
                        alt219=2;
                        }
                        break;
                    case 39:
                        {
                        alt219=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 219, 5, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 219, 3, input);

                    throw nvae;
                }

                }
                break;
            case 39:
                {
                alt219=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 219, 0, input);

                throw nvae;
            }

            switch (alt219) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:428:33: squareBracketedReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_squareBracketedReference_in_allIdentifierTypesOtherThanCD3258_static.FOLLOW_squareBracketedReference_in_allIdentifierTypesOtherThanCD3258);
                    squareBracketedReference664=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, squareBracketedReference664.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:428:58: identifierOrBracketedIdentifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_allIdentifierTypesOtherThanCD3260_static.FOLLOW_identifierOrBracketedIdentifier_in_allIdentifierTypesOtherThanCD3260);
                    identifierOrBracketedIdentifier665=identifierOrBracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierOrBracketedIdentifier665.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:428:90: cdAlphanum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cdAlphanum_in_allIdentifierTypesOtherThanCD3262_static.FOLLOW_cdAlphanum_in_allIdentifierTypesOtherThanCD3262);
                    cdAlphanum666=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum666.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:428:101: {...}? bracketedNumeric
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !((notFollowedByBracketedYear(input))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "allIdentifierTypesOtherThanCD", "notFollowedByBracketedYear(input)");
                    }
                    pushFollow(FOLLOW_bracketedNumeric_in_allIdentifierTypesOtherThanCD3265_static.FOLLOW_bracketedNumeric_in_allIdentifierTypesOtherThanCD3265);
                    bracketedNumeric667=bracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedNumeric667.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, allIdentifierTypesOtherThanCD_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "allIdentifierTypesOtherThanCD"

    public static class numericOrBracketedNumeric_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericOrBracketedNumeric"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:429:1: numericOrBracketedNumeric : ( numeric | bracketedNumeric );
    public final ChemicalChunkerParser.numericOrBracketedNumeric_return numericOrBracketedNumeric() throws RecognitionException {
        ChemicalChunkerParser.numericOrBracketedNumeric_return retval = new ChemicalChunkerParser.numericOrBracketedNumeric_return();
        retval.start = input.LT(1);
        int numericOrBracketedNumeric_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric668 = null;

        ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric669 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:429:27: ( numeric | bracketedNumeric )
            int alt220=2;
            switch ( input.LA(1) ) {
            case 39:
            case 146:
                {
                alt220=1;
                }
                break;
            case 143:
                {
                alt220=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 220, 0, input);

                throw nvae;
            }

            switch (alt220) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:429:30: numeric
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_numeric_in_numericOrBracketedNumeric3273_static.FOLLOW_numeric_in_numericOrBracketedNumeric3273);
                    numeric668=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric668.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:429:40: bracketedNumeric
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric3277_static.FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric3277);
                    bracketedNumeric669=bracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedNumeric669.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, numericOrBracketedNumeric_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numericOrBracketedNumeric"

    public static class bracketedNumeric_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedNumeric"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:430:1: bracketedNumeric : lrb numeric rrb ;
    public final ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric() throws RecognitionException {
        ChemicalChunkerParser.bracketedNumeric_return retval = new ChemicalChunkerParser.bracketedNumeric_return();
        retval.start = input.LT(1);
        int bracketedNumeric_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb670 = null;

        ChemicalChunkerParser.numeric_return numeric671 = null;

        ChemicalChunkerParser.rrb_return rrb672 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:430:18: ( lrb numeric rrb )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:430:21: lrb numeric rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedNumeric3285_static.FOLLOW_lrb_in_bracketedNumeric3285);
            lrb670=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb670.getTree());
            pushFollow(FOLLOW_numeric_in_bracketedNumeric3287_static.FOLLOW_numeric_in_bracketedNumeric3287);
            numeric671=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric671.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedNumeric3289_static.FOLLOW_rrb_in_bracketedNumeric3289);
            rrb672=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb672.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, bracketedNumeric_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedNumeric"

    public static class squareBracketedReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "squareBracketedReference"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:431:1: squareBracketedReference : lsqb numeric rsqb ;
    public final ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference() throws RecognitionException {
        ChemicalChunkerParser.squareBracketedReference_return retval = new ChemicalChunkerParser.squareBracketedReference_return();
        retval.start = input.LT(1);
        int squareBracketedReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lsqb_return lsqb673 = null;

        ChemicalChunkerParser.numeric_return numeric674 = null;

        ChemicalChunkerParser.rsqb_return rsqb675 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:431:26: ( lsqb numeric rsqb )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:431:28: lsqb numeric rsqb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lsqb_in_squareBracketedReference3296_static.FOLLOW_lsqb_in_squareBracketedReference3296);
            lsqb673=lsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb673.getTree());
            pushFollow(FOLLOW_numeric_in_squareBracketedReference3298_static.FOLLOW_numeric_in_squareBracketedReference3298);
            numeric674=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric674.getTree());
            pushFollow(FOLLOW_rsqb_in_squareBracketedReference3300_static.FOLLOW_rsqb_in_squareBracketedReference3300);
            rsqb675=rsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb675.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, squareBracketedReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "squareBracketedReference"

    public static class identifierOrBracketedIdentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifierOrBracketedIdentifier"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:432:1: identifierOrBracketedIdentifier : ( ( cd )? nnidentifier | bracketedIdentifier );
    public final ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier() throws RecognitionException {
        ChemicalChunkerParser.identifierOrBracketedIdentifier_return retval = new ChemicalChunkerParser.identifierOrBracketedIdentifier_return();
        retval.start = input.LT(1);
        int identifierOrBracketedIdentifier_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd676 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier677 = null;

        ChemicalChunkerParser.bracketedIdentifier_return bracketedIdentifier678 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:432:33: ( ( cd )? nnidentifier | bracketedIdentifier )
            int alt222=2;
            switch ( input.LA(1) ) {
            case 141:
            case 146:
                {
                alt222=1;
                }
                break;
            case 143:
                {
                alt222=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 222, 0, input);

                throw nvae;
            }

            switch (alt222) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:432:35: ( cd )? nnidentifier
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:432:35: ( cd )?
                    int alt221=2;
                    switch ( input.LA(1) ) {
                        case 146:
                            {
                            alt221=1;
                            }
                            break;
                    }

                    switch (alt221) {
                        case 1 :
                            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: cd
                            {
                            pushFollow(FOLLOW_cd_in_identifierOrBracketedIdentifier3307_static.FOLLOW_cd_in_identifierOrBracketedIdentifier3307);
                            cd676=cd();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd676.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier3310_static.FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier3310);
                    nnidentifier677=nnidentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnidentifier677.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:432:54: bracketedIdentifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier3314_static.FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier3314);
                    bracketedIdentifier678=bracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedIdentifier678.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, identifierOrBracketedIdentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifierOrBracketedIdentifier"

    public static class bracketedIdentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedIdentifier"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:433:1: bracketedIdentifier : lrb ( cd )? nnidentifier rrb ;
    public final ChemicalChunkerParser.bracketedIdentifier_return bracketedIdentifier() throws RecognitionException {
        ChemicalChunkerParser.bracketedIdentifier_return retval = new ChemicalChunkerParser.bracketedIdentifier_return();
        retval.start = input.LT(1);
        int bracketedIdentifier_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb679 = null;

        ChemicalChunkerParser.cd_return cd680 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier681 = null;

        ChemicalChunkerParser.rrb_return rrb682 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:433:21: ( lrb ( cd )? nnidentifier rrb )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:433:24: lrb ( cd )? nnidentifier rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedIdentifier3322_static.FOLLOW_lrb_in_bracketedIdentifier3322);
            lrb679=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb679.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:433:28: ( cd )?
            int alt223=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt223=1;
                    }
                    break;
            }

            switch (alt223) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_bracketedIdentifier3324_static.FOLLOW_cd_in_bracketedIdentifier3324);
                    cd680=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd680.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnidentifier_in_bracketedIdentifier3327_static.FOLLOW_nnidentifier_in_bracketedIdentifier3327);
            nnidentifier681=nnidentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnidentifier681.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedIdentifier3329_static.FOLLOW_rrb_in_bracketedIdentifier3329);
            rrb682=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb682.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, bracketedIdentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedIdentifier"

    public static class adj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adj"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:435:1: adj : ( jj | jjr | jjs | jjchem | oscarcj | oscarrn );
    public final ChemicalChunkerParser.adj_return adj() throws RecognitionException {
        ChemicalChunkerParser.adj_return retval = new ChemicalChunkerParser.adj_return();
        retval.start = input.LT(1);
        int adj_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj683 = null;

        ChemicalChunkerParser.jjr_return jjr684 = null;

        ChemicalChunkerParser.jjs_return jjs685 = null;

        ChemicalChunkerParser.jjchem_return jjchem686 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj687 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn688 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:435:5: ( jj | jjr | jjs | jjchem | oscarcj | oscarrn )
            int alt224=6;
            switch ( input.LA(1) ) {
            case 151:
                {
                alt224=1;
                }
                break;
            case 152:
                {
                alt224=2;
                }
                break;
            case 153:
                {
                alt224=3;
                }
                break;
            case 45:
                {
                alt224=4;
                }
                break;
            case 40:
                {
                alt224=5;
                }
                break;
            case 41:
                {
                alt224=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 224, 0, input);

                throw nvae;
            }

            switch (alt224) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:435:7: jj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jj_in_adj3337_static.FOLLOW_jj_in_adj3337);
                    jj683=jj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj683.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:435:10: jjr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjr_in_adj3339_static.FOLLOW_jjr_in_adj3339);
                    jjr684=jjr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjr684.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:435:14: jjs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjs_in_adj3341_static.FOLLOW_jjs_in_adj3341);
                    jjs685=jjs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjs685.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:435:18: jjchem
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjchem_in_adj3343_static.FOLLOW_jjchem_in_adj3343);
                    jjchem686=jjchem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem686.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:435:25: oscarcj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcj_in_adj3345_static.FOLLOW_oscarcj_in_adj3345);
                    oscarcj687=oscarcj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj687.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:435:33: oscarrn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarrn_in_adj3347_static.FOLLOW_oscarrn_in_adj3347);
                    oscarrn688=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn688.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, adj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "adj"

    public static class adv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adv"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:436:1: adv : ( rb | rbr | rp | rbs );
    public final ChemicalChunkerParser.adv_return adv() throws RecognitionException {
        ChemicalChunkerParser.adv_return retval = new ChemicalChunkerParser.adv_return();
        retval.start = input.LT(1);
        int adv_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.rb_return rb689 = null;

        ChemicalChunkerParser.rbr_return rbr690 = null;

        ChemicalChunkerParser.rp_return rp691 = null;

        ChemicalChunkerParser.rbs_return rbs692 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:436:5: ( rb | rbr | rp | rbs )
            int alt225=4;
            switch ( input.LA(1) ) {
            case 164:
                {
                alt225=1;
                }
                break;
            case 165:
                {
                alt225=2;
                }
                break;
            case 167:
                {
                alt225=3;
                }
                break;
            case 166:
                {
                alt225=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 225, 0, input);

                throw nvae;
            }

            switch (alt225) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:436:7: rb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rb_in_adv3354_static.FOLLOW_rb_in_adv3354);
                    rb689=rb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rb689.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:436:10: rbr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbr_in_adv3356_static.FOLLOW_rbr_in_adv3356);
                    rbr690=rbr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbr690.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:436:14: rp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rp_in_adv3358_static.FOLLOW_rp_in_adv3358);
                    rp691=rp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rp691.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:436:17: rbs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbs_in_adv3360_static.FOLLOW_rbs_in_adv3360);
                    rbs692=rbs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbs692.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, adv_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "adv"

    public static class clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "clause"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:437:1: clause : ( wdt | wp_poss | wrb | ex | pdt | wp );
    public final ChemicalChunkerParser.clause_return clause() throws RecognitionException {
        ChemicalChunkerParser.clause_return retval = new ChemicalChunkerParser.clause_return();
        retval.start = input.LT(1);
        int clause_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.wdt_return wdt693 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss694 = null;

        ChemicalChunkerParser.wrb_return wrb695 = null;

        ChemicalChunkerParser.ex_return ex696 = null;

        ChemicalChunkerParser.pdt_return pdt697 = null;

        ChemicalChunkerParser.wp_return wp698 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:437:8: ( wdt | wp_poss | wrb | ex | pdt | wp )
            int alt226=6;
            switch ( input.LA(1) ) {
            case 177:
                {
                alt226=1;
                }
                break;
            case 179:
                {
                alt226=2;
                }
                break;
            case 180:
                {
                alt226=3;
                }
                break;
            case 148:
                {
                alt226=4;
                }
                break;
            case 160:
                {
                alt226=5;
                }
                break;
            case 178:
                {
                alt226=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 226, 0, input);

                throw nvae;
            }

            switch (alt226) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:437:10: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wdt_in_clause3367_static.FOLLOW_wdt_in_clause3367);
                    wdt693=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt693.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:437:14: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_poss_in_clause3369_static.FOLLOW_wp_poss_in_clause3369);
                    wp_poss694=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss694.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:437:22: wrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wrb_in_clause3371_static.FOLLOW_wrb_in_clause3371);
                    wrb695=wrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wrb695.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:437:26: ex
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ex_in_clause3373_static.FOLLOW_ex_in_clause3373);
                    ex696=ex();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex696.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:437:29: pdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pdt_in_clause3375_static.FOLLOW_pdt_in_clause3375);
                    pdt697=pdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pdt697.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:437:33: wp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_in_clause3377_static.FOLLOW_wp_in_clause3377);
                    wp698=wp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp698.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "clause"

    public static class conjunction_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conjunction"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:438:1: conjunction : ( cc | comma );
    public final ChemicalChunkerParser.conjunction_return conjunction() throws RecognitionException {
        ChemicalChunkerParser.conjunction_return retval = new ChemicalChunkerParser.conjunction_return();
        retval.start = input.LT(1);
        int conjunction_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cc_return cc699 = null;

        ChemicalChunkerParser.comma_return comma700 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:438:13: ( cc | comma )
            int alt227=2;
            switch ( input.LA(1) ) {
            case 145:
                {
                alt227=1;
                }
                break;
            case 133:
                {
                alt227=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 227, 0, input);

                throw nvae;
            }

            switch (alt227) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:438:15: cc
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cc_in_conjunction3384_static.FOLLOW_cc_in_conjunction3384);
                    cc699=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc699.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:438:18: comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_conjunction3386_static.FOLLOW_comma_in_conjunction3386);
                    comma700=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma700.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, conjunction_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conjunction"

    public static class inAll_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inAll"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:439:1: inAll : ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inAll_return inAll() throws RecognitionException {
        ChemicalChunkerParser.inAll_return retval = new ChemicalChunkerParser.inAll_return();
        retval.start = input.LT(1);
        int inAll_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.in_return in701 = null;

        ChemicalChunkerParser.inafter_return inafter702 = null;

        ChemicalChunkerParser.inas_return inas703 = null;

        ChemicalChunkerParser.inbefore_return inbefore704 = null;

        ChemicalChunkerParser.inby_return inby705 = null;

        ChemicalChunkerParser.infor_return infor706 = null;

        ChemicalChunkerParser.infrom_return infrom707 = null;

        ChemicalChunkerParser.inin_return inin708 = null;

        ChemicalChunkerParser.ininto_return ininto709 = null;

        ChemicalChunkerParser.inof_return inof710 = null;

        ChemicalChunkerParser.inoff_return inoff711 = null;

        ChemicalChunkerParser.inon_return inon712 = null;

        ChemicalChunkerParser.inover_return inover713 = null;

        ChemicalChunkerParser.inunder_return inunder714 = null;

        ChemicalChunkerParser.invia_return invia715 = null;

        ChemicalChunkerParser.inwith_return inwith716 = null;

        ChemicalChunkerParser.inwithout_return inwithout717 = null;

        ChemicalChunkerParser.to_return to718 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:439:7: ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt228=18;
            switch ( input.LA(1) ) {
            case 150:
                {
                alt228=1;
                }
                break;
            case 49:
                {
                alt228=2;
                }
                break;
            case 47:
                {
                alt228=3;
                }
                break;
            case 48:
                {
                alt228=4;
                }
                break;
            case 54:
                {
                alt228=5;
                }
                break;
            case 58:
                {
                alt228=6;
                }
                break;
            case 59:
                {
                alt228=7;
                }
                break;
            case 50:
                {
                alt228=8;
                }
                break;
            case 51:
                {
                alt228=9;
                }
                break;
            case 56:
                {
                alt228=10;
                }
                break;
            case 62:
                {
                alt228=11;
                }
                break;
            case 57:
                {
                alt228=12;
                }
                break;
            case 61:
                {
                alt228=13;
                }
                break;
            case 60:
                {
                alt228=14;
                }
                break;
            case 55:
                {
                alt228=15;
                }
                break;
            case 52:
                {
                alt228=16;
                }
                break;
            case 53:
                {
                alt228=17;
                }
                break;
            case 169:
                {
                alt228=18;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 228, 0, input);

                throw nvae;
            }

            switch (alt228) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:439:9: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inAll3393_static.FOLLOW_in_in_inAll3393);
                    in701=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in701.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:439:12: inafter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inafter_in_inAll3395_static.FOLLOW_inafter_in_inAll3395);
                    inafter702=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter702.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:439:20: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inAll3397_static.FOLLOW_inas_in_inAll3397);
                    inas703=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas703.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:439:25: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inAll3399_static.FOLLOW_inbefore_in_inAll3399);
                    inbefore704=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore704.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:439:34: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inAll3401_static.FOLLOW_inby_in_inAll3401);
                    inby705=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby705.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:439:39: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inAll3403_static.FOLLOW_infor_in_inAll3403);
                    infor706=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor706.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:439:45: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inAll3405_static.FOLLOW_infrom_in_inAll3405);
                    infrom707=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom707.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:439:52: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inAll3407_static.FOLLOW_inin_in_inAll3407);
                    inin708=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin708.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:439:57: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inAll3409_static.FOLLOW_ininto_in_inAll3409);
                    ininto709=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto709.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:439:64: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inAll3411_static.FOLLOW_inof_in_inAll3411);
                    inof710=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof710.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:439:69: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inAll3413_static.FOLLOW_inoff_in_inAll3413);
                    inoff711=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff711.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:439:75: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inAll3415_static.FOLLOW_inon_in_inAll3415);
                    inon712=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon712.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:439:80: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inAll3417_static.FOLLOW_inover_in_inAll3417);
                    inover713=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover713.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:439:87: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inAll3419_static.FOLLOW_inunder_in_inAll3419);
                    inunder714=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder714.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:439:95: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inAll3421_static.FOLLOW_invia_in_inAll3421);
                    invia715=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia715.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:439:101: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inAll3423_static.FOLLOW_inwith_in_inAll3423);
                    inwith716=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith716.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:439:108: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inAll3425_static.FOLLOW_inwithout_in_inAll3425);
                    inwithout717=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout717.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:439:118: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inAll3427_static.FOLLOW_to_in_inAll3427);
                    to718=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to718.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, inAll_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inAll"

    public static class inMost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inMost"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:440:1: inMost : ( in | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inMost_return inMost() throws RecognitionException {
        ChemicalChunkerParser.inMost_return retval = new ChemicalChunkerParser.inMost_return();
        retval.start = input.LT(1);
        int inMost_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.in_return in719 = null;

        ChemicalChunkerParser.inas_return inas720 = null;

        ChemicalChunkerParser.inbefore_return inbefore721 = null;

        ChemicalChunkerParser.inby_return inby722 = null;

        ChemicalChunkerParser.infor_return infor723 = null;

        ChemicalChunkerParser.infrom_return infrom724 = null;

        ChemicalChunkerParser.inin_return inin725 = null;

        ChemicalChunkerParser.ininto_return ininto726 = null;

        ChemicalChunkerParser.inof_return inof727 = null;

        ChemicalChunkerParser.inoff_return inoff728 = null;

        ChemicalChunkerParser.inon_return inon729 = null;

        ChemicalChunkerParser.inover_return inover730 = null;

        ChemicalChunkerParser.inunder_return inunder731 = null;

        ChemicalChunkerParser.invia_return invia732 = null;

        ChemicalChunkerParser.inwith_return inwith733 = null;

        ChemicalChunkerParser.inwithout_return inwithout734 = null;

        ChemicalChunkerParser.to_return to735 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:440:8: ( in | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt229=17;
            switch ( input.LA(1) ) {
            case 150:
                {
                alt229=1;
                }
                break;
            case 47:
                {
                alt229=2;
                }
                break;
            case 48:
                {
                alt229=3;
                }
                break;
            case 54:
                {
                alt229=4;
                }
                break;
            case 58:
                {
                alt229=5;
                }
                break;
            case 59:
                {
                alt229=6;
                }
                break;
            case 50:
                {
                alt229=7;
                }
                break;
            case 51:
                {
                alt229=8;
                }
                break;
            case 56:
                {
                alt229=9;
                }
                break;
            case 62:
                {
                alt229=10;
                }
                break;
            case 57:
                {
                alt229=11;
                }
                break;
            case 61:
                {
                alt229=12;
                }
                break;
            case 60:
                {
                alt229=13;
                }
                break;
            case 55:
                {
                alt229=14;
                }
                break;
            case 52:
                {
                alt229=15;
                }
                break;
            case 53:
                {
                alt229=16;
                }
                break;
            case 169:
                {
                alt229=17;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 229, 0, input);

                throw nvae;
            }

            switch (alt229) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:440:10: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inMost3434_static.FOLLOW_in_in_inMost3434);
                    in719=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in719.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:440:13: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inMost3436_static.FOLLOW_inas_in_inMost3436);
                    inas720=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas720.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:440:18: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inMost3438_static.FOLLOW_inbefore_in_inMost3438);
                    inbefore721=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore721.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:440:27: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inMost3440_static.FOLLOW_inby_in_inMost3440);
                    inby722=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby722.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:440:32: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inMost3442_static.FOLLOW_infor_in_inMost3442);
                    infor723=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor723.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:440:38: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inMost3444_static.FOLLOW_infrom_in_inMost3444);
                    infrom724=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom724.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:440:45: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inMost3446_static.FOLLOW_inin_in_inMost3446);
                    inin725=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin725.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:440:50: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inMost3448_static.FOLLOW_ininto_in_inMost3448);
                    ininto726=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto726.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:440:57: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inMost3450_static.FOLLOW_inof_in_inMost3450);
                    inof727=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof727.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:440:62: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inMost3452_static.FOLLOW_inoff_in_inMost3452);
                    inoff728=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff728.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:440:68: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inMost3454_static.FOLLOW_inon_in_inMost3454);
                    inon729=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon729.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:440:73: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inMost3456_static.FOLLOW_inover_in_inMost3456);
                    inover730=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover730.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:440:80: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inMost3458_static.FOLLOW_inunder_in_inMost3458);
                    inunder731=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder731.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:440:88: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inMost3460_static.FOLLOW_invia_in_inMost3460);
                    invia732=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia732.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:440:94: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inMost3462_static.FOLLOW_inwith_in_inMost3462);
                    inwith733=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith733.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:440:101: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inMost3464_static.FOLLOW_inwithout_in_inMost3464);
                    inwithout734=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout734.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:440:111: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inMost3466_static.FOLLOW_to_in_inMost3466);
                    to735=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to735.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, inMost_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inMost"

    public static class numeric_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numeric"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:441:1: numeric : ( cd | cdAlphanum );
    public final ChemicalChunkerParser.numeric_return numeric() throws RecognitionException {
        ChemicalChunkerParser.numeric_return retval = new ChemicalChunkerParser.numeric_return();
        retval.start = input.LT(1);
        int numeric_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd736 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum737 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:441:9: ( cd | cdAlphanum )
            int alt230=2;
            switch ( input.LA(1) ) {
            case 146:
                {
                alt230=1;
                }
                break;
            case 39:
                {
                alt230=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 230, 0, input);

                throw nvae;
            }

            switch (alt230) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:441:11: cd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cd_in_numeric3473_static.FOLLOW_cd_in_numeric3473);
                    cd736=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd736.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:441:14: cdAlphanum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cdAlphanum_in_numeric3475_static.FOLLOW_cdAlphanum_in_numeric3475);
                    cdAlphanum737=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum737.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, numeric_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numeric"

    public static class nnplabel_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnplabel"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:446:1: nnplabel : 'NNP-LABEL' TOKEN -> ^( 'NNP-LABEL' TOKEN ) ;
    public final ChemicalChunkerParser.nnplabel_return nnplabel() throws RecognitionException {
        ChemicalChunkerParser.nnplabel_return retval = new ChemicalChunkerParser.nnplabel_return();
        retval.start = input.LT(1);
        int nnplabel_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal738=null;
        Token TOKEN739=null;

        Object string_literal738_tree=null;
        Object TOKEN739_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:446:9: ( 'NNP-LABEL' TOKEN -> ^( 'NNP-LABEL' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:446:10: 'NNP-LABEL' TOKEN
            {
            string_literal738=(Token)match(input,38,FOLLOW_38_in_nnplabel3484_static.FOLLOW_38_in_nnplabel3484); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_38.add(string_literal738);

            TOKEN739=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnplabel3486_static.FOLLOW_TOKEN_in_nnplabel3486); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN739);



            // AST REWRITE
            // elements: TOKEN, 38
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 446:28: -> ^( 'NNP-LABEL' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:446:31: ^( 'NNP-LABEL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_38.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, nnplabel_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnplabel"

    public static class cdAlphanum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdAlphanum"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:448:1: cdAlphanum : 'CD-ALPHANUM' TOKEN -> ^( 'CD-ALPHANUM' TOKEN ) ;
    public final ChemicalChunkerParser.cdAlphanum_return cdAlphanum() throws RecognitionException {
        ChemicalChunkerParser.cdAlphanum_return retval = new ChemicalChunkerParser.cdAlphanum_return();
        retval.start = input.LT(1);
        int cdAlphanum_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal740=null;
        Token TOKEN741=null;

        Object string_literal740_tree=null;
        Object TOKEN741_tree=null;
        RewriteRuleTokenStream stream_39=new RewriteRuleTokenStream(adaptor,"token 39");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:448:11: ( 'CD-ALPHANUM' TOKEN -> ^( 'CD-ALPHANUM' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:448:12: 'CD-ALPHANUM' TOKEN
            {
            string_literal740=(Token)match(input,39,FOLLOW_39_in_cdAlphanum3500_static.FOLLOW_39_in_cdAlphanum3500); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_39.add(string_literal740);

            TOKEN741=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdAlphanum3502_static.FOLLOW_TOKEN_in_cdAlphanum3502); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN741);



            // AST REWRITE
            // elements: TOKEN, 39
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 448:32: -> ^( 'CD-ALPHANUM' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:448:35: ^( 'CD-ALPHANUM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_39.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, cdAlphanum_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdAlphanum"

    public static class oscarcj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcj"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:449:1: oscarcj : 'OSCAR-CJ' TOKEN -> ^( 'OSCAR-CJ' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcj_return oscarcj() throws RecognitionException {
        ChemicalChunkerParser.oscarcj_return retval = new ChemicalChunkerParser.oscarcj_return();
        retval.start = input.LT(1);
        int oscarcj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal742=null;
        Token TOKEN743=null;

        Object string_literal742_tree=null;
        Object TOKEN743_tree=null;
        RewriteRuleTokenStream stream_40=new RewriteRuleTokenStream(adaptor,"token 40");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:449:8: ( 'OSCAR-CJ' TOKEN -> ^( 'OSCAR-CJ' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:449:9: 'OSCAR-CJ' TOKEN
            {
            string_literal742=(Token)match(input,40,FOLLOW_40_in_oscarcj3515_static.FOLLOW_40_in_oscarcj3515); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_40.add(string_literal742);

            TOKEN743=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcj3517_static.FOLLOW_TOKEN_in_oscarcj3517); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN743);



            // AST REWRITE
            // elements: 40, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 449:26: -> ^( 'OSCAR-CJ' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:449:29: ^( 'OSCAR-CJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_40.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, oscarcj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarcj"

    public static class oscarrn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarrn"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:450:1: oscarrn : 'OSCAR-RN' TOKEN -> ^( 'OSCAR-RN' TOKEN ) ;
    public final ChemicalChunkerParser.oscarrn_return oscarrn() throws RecognitionException {
        ChemicalChunkerParser.oscarrn_return retval = new ChemicalChunkerParser.oscarrn_return();
        retval.start = input.LT(1);
        int oscarrn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal744=null;
        Token TOKEN745=null;

        Object string_literal744_tree=null;
        Object TOKEN745_tree=null;
        RewriteRuleTokenStream stream_41=new RewriteRuleTokenStream(adaptor,"token 41");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:450:8: ( 'OSCAR-RN' TOKEN -> ^( 'OSCAR-RN' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:450:9: 'OSCAR-RN' TOKEN
            {
            string_literal744=(Token)match(input,41,FOLLOW_41_in_oscarrn3530_static.FOLLOW_41_in_oscarrn3530); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_41.add(string_literal744);

            TOKEN745=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarrn3532_static.FOLLOW_TOKEN_in_oscarrn3532); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN745);



            // AST REWRITE
            // elements: 41, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 450:26: -> ^( 'OSCAR-RN' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:450:29: ^( 'OSCAR-RN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_41.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, oscarrn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarrn"

    public static class oscarase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarase"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:451:1: oscarase : 'OSCAR-ASE' TOKEN -> ^( 'OSCAR-ASE' TOKEN ) ;
    public final ChemicalChunkerParser.oscarase_return oscarase() throws RecognitionException {
        ChemicalChunkerParser.oscarase_return retval = new ChemicalChunkerParser.oscarase_return();
        retval.start = input.LT(1);
        int oscarase_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal746=null;
        Token TOKEN747=null;

        Object string_literal746_tree=null;
        Object TOKEN747_tree=null;
        RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,"token 42");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:451:9: ( 'OSCAR-ASE' TOKEN -> ^( 'OSCAR-ASE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:451:10: 'OSCAR-ASE' TOKEN
            {
            string_literal746=(Token)match(input,42,FOLLOW_42_in_oscarase3545_static.FOLLOW_42_in_oscarase3545); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_42.add(string_literal746);

            TOKEN747=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarase3547_static.FOLLOW_TOKEN_in_oscarase3547); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN747);



            // AST REWRITE
            // elements: 42, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 451:28: -> ^( 'OSCAR-ASE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:451:31: ^( 'OSCAR-ASE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_42.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 136, oscarase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarase"

    public static class tmunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tmunicode"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:452:1: tmunicode : 'TM-UNICODE' TOKEN -> ^( 'TM-UNICODE' TOKEN ) ;
    public final ChemicalChunkerParser.tmunicode_return tmunicode() throws RecognitionException {
        ChemicalChunkerParser.tmunicode_return retval = new ChemicalChunkerParser.tmunicode_return();
        retval.start = input.LT(1);
        int tmunicode_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal748=null;
        Token TOKEN749=null;

        Object string_literal748_tree=null;
        Object TOKEN749_tree=null;
        RewriteRuleTokenStream stream_43=new RewriteRuleTokenStream(adaptor,"token 43");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:452:10: ( 'TM-UNICODE' TOKEN -> ^( 'TM-UNICODE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:452:11: 'TM-UNICODE' TOKEN
            {
            string_literal748=(Token)match(input,43,FOLLOW_43_in_tmunicode3560_static.FOLLOW_43_in_tmunicode3560); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_43.add(string_literal748);

            TOKEN749=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_tmunicode3562_static.FOLLOW_TOKEN_in_tmunicode3562); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN749);



            // AST REWRITE
            // elements: TOKEN, 43
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 452:30: -> ^( 'TM-UNICODE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:452:33: ^( 'TM-UNICODE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_43.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 137, tmunicode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "tmunicode"

    public static class cdunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdunicode"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:453:1: cdunicode : 'CD-UNICODE' TOKEN -> ^( 'CD-UNICODE' TOKEN ) ;
    public final ChemicalChunkerParser.cdunicode_return cdunicode() throws RecognitionException {
        ChemicalChunkerParser.cdunicode_return retval = new ChemicalChunkerParser.cdunicode_return();
        retval.start = input.LT(1);
        int cdunicode_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal750=null;
        Token TOKEN751=null;

        Object string_literal750_tree=null;
        Object TOKEN751_tree=null;
        RewriteRuleTokenStream stream_44=new RewriteRuleTokenStream(adaptor,"token 44");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:453:10: ( 'CD-UNICODE' TOKEN -> ^( 'CD-UNICODE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:453:11: 'CD-UNICODE' TOKEN
            {
            string_literal750=(Token)match(input,44,FOLLOW_44_in_cdunicode3575_static.FOLLOW_44_in_cdunicode3575); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_44.add(string_literal750);

            TOKEN751=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdunicode3577_static.FOLLOW_TOKEN_in_cdunicode3577); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN751);



            // AST REWRITE
            // elements: 44, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 453:30: -> ^( 'CD-UNICODE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:453:33: ^( 'CD-UNICODE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_44.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 138, cdunicode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdunicode"

    public static class jjchem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjchem"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:454:1: jjchem : 'JJ-CHEM' TOKEN -> ^( 'JJ-CHEM' TOKEN ) ;
    public final ChemicalChunkerParser.jjchem_return jjchem() throws RecognitionException {
        ChemicalChunkerParser.jjchem_return retval = new ChemicalChunkerParser.jjchem_return();
        retval.start = input.LT(1);
        int jjchem_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal752=null;
        Token TOKEN753=null;

        Object string_literal752_tree=null;
        Object TOKEN753_tree=null;
        RewriteRuleTokenStream stream_45=new RewriteRuleTokenStream(adaptor,"token 45");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:454:7: ( 'JJ-CHEM' TOKEN -> ^( 'JJ-CHEM' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:454:8: 'JJ-CHEM' TOKEN
            {
            string_literal752=(Token)match(input,45,FOLLOW_45_in_jjchem3590_static.FOLLOW_45_in_jjchem3590); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_45.add(string_literal752);

            TOKEN753=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjchem3592_static.FOLLOW_TOKEN_in_jjchem3592); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN753);



            // AST REWRITE
            // elements: TOKEN, 45
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 454:24: -> ^( 'JJ-CHEM' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:454:27: ^( 'JJ-CHEM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_45.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 139, jjchem_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjchem"

    public static class jjcomp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjcomp"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:455:1: jjcomp : 'JJ-COMPOUND' TOKEN -> ^( 'JJ-COMPOUND' TOKEN ) ;
    public final ChemicalChunkerParser.jjcomp_return jjcomp() throws RecognitionException {
        ChemicalChunkerParser.jjcomp_return retval = new ChemicalChunkerParser.jjcomp_return();
        retval.start = input.LT(1);
        int jjcomp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal754=null;
        Token TOKEN755=null;

        Object string_literal754_tree=null;
        Object TOKEN755_tree=null;
        RewriteRuleTokenStream stream_46=new RewriteRuleTokenStream(adaptor,"token 46");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:455:7: ( 'JJ-COMPOUND' TOKEN -> ^( 'JJ-COMPOUND' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:455:8: 'JJ-COMPOUND' TOKEN
            {
            string_literal754=(Token)match(input,46,FOLLOW_46_in_jjcomp3605_static.FOLLOW_46_in_jjcomp3605); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_46.add(string_literal754);

            TOKEN755=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjcomp3607_static.FOLLOW_TOKEN_in_jjcomp3607); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN755);



            // AST REWRITE
            // elements: 46, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 455:28: -> ^( 'JJ-COMPOUND' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:455:31: ^( 'JJ-COMPOUND' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_46.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 140, jjcomp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjcomp"

    public static class inas_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inas"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:457:1: inas : 'IN-AS' TOKEN -> ^( 'IN-AS' TOKEN ) ;
    public final ChemicalChunkerParser.inas_return inas() throws RecognitionException {
        ChemicalChunkerParser.inas_return retval = new ChemicalChunkerParser.inas_return();
        retval.start = input.LT(1);
        int inas_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal756=null;
        Token TOKEN757=null;

        Object string_literal756_tree=null;
        Object TOKEN757_tree=null;
        RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:457:5: ( 'IN-AS' TOKEN -> ^( 'IN-AS' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:457:6: 'IN-AS' TOKEN
            {
            string_literal756=(Token)match(input,47,FOLLOW_47_in_inas3621_static.FOLLOW_47_in_inas3621); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_47.add(string_literal756);

            TOKEN757=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inas3623_static.FOLLOW_TOKEN_in_inas3623); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN757);



            // AST REWRITE
            // elements: TOKEN, 47
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 457:20: -> ^( 'IN-AS' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:457:23: ^( 'IN-AS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_47.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 141, inas_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inas"

    public static class inbefore_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inbefore"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:458:1: inbefore : 'IN-BEFORE' TOKEN -> ^( 'IN-BEFORE' TOKEN ) ;
    public final ChemicalChunkerParser.inbefore_return inbefore() throws RecognitionException {
        ChemicalChunkerParser.inbefore_return retval = new ChemicalChunkerParser.inbefore_return();
        retval.start = input.LT(1);
        int inbefore_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal758=null;
        Token TOKEN759=null;

        Object string_literal758_tree=null;
        Object TOKEN759_tree=null;
        RewriteRuleTokenStream stream_48=new RewriteRuleTokenStream(adaptor,"token 48");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:458:9: ( 'IN-BEFORE' TOKEN -> ^( 'IN-BEFORE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:458:10: 'IN-BEFORE' TOKEN
            {
            string_literal758=(Token)match(input,48,FOLLOW_48_in_inbefore3636_static.FOLLOW_48_in_inbefore3636); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_48.add(string_literal758);

            TOKEN759=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inbefore3638_static.FOLLOW_TOKEN_in_inbefore3638); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN759);



            // AST REWRITE
            // elements: 48, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 458:28: -> ^( 'IN-BEFORE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:458:31: ^( 'IN-BEFORE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_48.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 142, inbefore_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inbefore"

    public static class inafter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inafter"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:459:1: inafter : 'IN-AFTER' TOKEN -> ^( 'IN-AFTER' TOKEN ) ;
    public final ChemicalChunkerParser.inafter_return inafter() throws RecognitionException {
        ChemicalChunkerParser.inafter_return retval = new ChemicalChunkerParser.inafter_return();
        retval.start = input.LT(1);
        int inafter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal760=null;
        Token TOKEN761=null;

        Object string_literal760_tree=null;
        Object TOKEN761_tree=null;
        RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:459:8: ( 'IN-AFTER' TOKEN -> ^( 'IN-AFTER' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:459:9: 'IN-AFTER' TOKEN
            {
            string_literal760=(Token)match(input,49,FOLLOW_49_in_inafter3651_static.FOLLOW_49_in_inafter3651); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_49.add(string_literal760);

            TOKEN761=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inafter3653_static.FOLLOW_TOKEN_in_inafter3653); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN761);



            // AST REWRITE
            // elements: 49, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 459:26: -> ^( 'IN-AFTER' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:459:29: ^( 'IN-AFTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_49.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 143, inafter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inafter"

    public static class inin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inin"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:460:1: inin : 'IN-IN' TOKEN -> ^( 'IN-IN' TOKEN ) ;
    public final ChemicalChunkerParser.inin_return inin() throws RecognitionException {
        ChemicalChunkerParser.inin_return retval = new ChemicalChunkerParser.inin_return();
        retval.start = input.LT(1);
        int inin_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal762=null;
        Token TOKEN763=null;

        Object string_literal762_tree=null;
        Object TOKEN763_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_50=new RewriteRuleTokenStream(adaptor,"token 50");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:460:5: ( 'IN-IN' TOKEN -> ^( 'IN-IN' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:460:6: 'IN-IN' TOKEN
            {
            string_literal762=(Token)match(input,50,FOLLOW_50_in_inin3666_static.FOLLOW_50_in_inin3666); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_50.add(string_literal762);

            TOKEN763=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inin3668_static.FOLLOW_TOKEN_in_inin3668); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN763);



            // AST REWRITE
            // elements: TOKEN, 50
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 460:20: -> ^( 'IN-IN' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:460:23: ^( 'IN-IN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_50.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 144, inin_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inin"

    public static class ininto_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ininto"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:461:1: ininto : 'IN-INTO' TOKEN -> ^( 'IN-INTO' TOKEN ) ;
    public final ChemicalChunkerParser.ininto_return ininto() throws RecognitionException {
        ChemicalChunkerParser.ininto_return retval = new ChemicalChunkerParser.ininto_return();
        retval.start = input.LT(1);
        int ininto_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal764=null;
        Token TOKEN765=null;

        Object string_literal764_tree=null;
        Object TOKEN765_tree=null;
        RewriteRuleTokenStream stream_51=new RewriteRuleTokenStream(adaptor,"token 51");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:461:7: ( 'IN-INTO' TOKEN -> ^( 'IN-INTO' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:461:8: 'IN-INTO' TOKEN
            {
            string_literal764=(Token)match(input,51,FOLLOW_51_in_ininto3681_static.FOLLOW_51_in_ininto3681); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_51.add(string_literal764);

            TOKEN765=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ininto3683_static.FOLLOW_TOKEN_in_ininto3683); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN765);



            // AST REWRITE
            // elements: TOKEN, 51
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 461:24: -> ^( 'IN-INTO' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:461:27: ^( 'IN-INTO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_51.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 145, ininto_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ininto"

    public static class inwith_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwith"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:462:1: inwith : 'IN-WITH' TOKEN -> ^( 'IN-WITH' TOKEN ) ;
    public final ChemicalChunkerParser.inwith_return inwith() throws RecognitionException {
        ChemicalChunkerParser.inwith_return retval = new ChemicalChunkerParser.inwith_return();
        retval.start = input.LT(1);
        int inwith_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal766=null;
        Token TOKEN767=null;

        Object string_literal766_tree=null;
        Object TOKEN767_tree=null;
        RewriteRuleTokenStream stream_52=new RewriteRuleTokenStream(adaptor,"token 52");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:462:7: ( 'IN-WITH' TOKEN -> ^( 'IN-WITH' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:462:8: 'IN-WITH' TOKEN
            {
            string_literal766=(Token)match(input,52,FOLLOW_52_in_inwith3696_static.FOLLOW_52_in_inwith3696); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_52.add(string_literal766);

            TOKEN767=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwith3698_static.FOLLOW_TOKEN_in_inwith3698); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN767);



            // AST REWRITE
            // elements: 52, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 462:24: -> ^( 'IN-WITH' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:462:27: ^( 'IN-WITH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_52.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 146, inwith_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inwith"

    public static class inwithout_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwithout"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:463:1: inwithout : 'IN-WITHOUT' TOKEN -> ^( 'IN-WITHOUT' TOKEN ) ;
    public final ChemicalChunkerParser.inwithout_return inwithout() throws RecognitionException {
        ChemicalChunkerParser.inwithout_return retval = new ChemicalChunkerParser.inwithout_return();
        retval.start = input.LT(1);
        int inwithout_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal768=null;
        Token TOKEN769=null;

        Object string_literal768_tree=null;
        Object TOKEN769_tree=null;
        RewriteRuleTokenStream stream_53=new RewriteRuleTokenStream(adaptor,"token 53");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:463:10: ( 'IN-WITHOUT' TOKEN -> ^( 'IN-WITHOUT' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:463:11: 'IN-WITHOUT' TOKEN
            {
            string_literal768=(Token)match(input,53,FOLLOW_53_in_inwithout3711_static.FOLLOW_53_in_inwithout3711); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_53.add(string_literal768);

            TOKEN769=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwithout3713_static.FOLLOW_TOKEN_in_inwithout3713); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN769);



            // AST REWRITE
            // elements: 53, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 463:30: -> ^( 'IN-WITHOUT' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:463:33: ^( 'IN-WITHOUT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_53.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 147, inwithout_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inwithout"

    public static class inby_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inby"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:464:1: inby : 'IN-BY' TOKEN -> ^( 'IN-BY' TOKEN ) ;
    public final ChemicalChunkerParser.inby_return inby() throws RecognitionException {
        ChemicalChunkerParser.inby_return retval = new ChemicalChunkerParser.inby_return();
        retval.start = input.LT(1);
        int inby_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal770=null;
        Token TOKEN771=null;

        Object string_literal770_tree=null;
        Object TOKEN771_tree=null;
        RewriteRuleTokenStream stream_54=new RewriteRuleTokenStream(adaptor,"token 54");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:464:5: ( 'IN-BY' TOKEN -> ^( 'IN-BY' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:464:6: 'IN-BY' TOKEN
            {
            string_literal770=(Token)match(input,54,FOLLOW_54_in_inby3726_static.FOLLOW_54_in_inby3726); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_54.add(string_literal770);

            TOKEN771=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inby3728_static.FOLLOW_TOKEN_in_inby3728); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN771);



            // AST REWRITE
            // elements: 54, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 464:20: -> ^( 'IN-BY' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:464:23: ^( 'IN-BY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_54.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 148, inby_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inby"

    public static class invia_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invia"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:465:1: invia : 'IN-VIA' TOKEN -> ^( 'IN-VIA' TOKEN ) ;
    public final ChemicalChunkerParser.invia_return invia() throws RecognitionException {
        ChemicalChunkerParser.invia_return retval = new ChemicalChunkerParser.invia_return();
        retval.start = input.LT(1);
        int invia_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal772=null;
        Token TOKEN773=null;

        Object string_literal772_tree=null;
        Object TOKEN773_tree=null;
        RewriteRuleTokenStream stream_55=new RewriteRuleTokenStream(adaptor,"token 55");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:465:6: ( 'IN-VIA' TOKEN -> ^( 'IN-VIA' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:465:7: 'IN-VIA' TOKEN
            {
            string_literal772=(Token)match(input,55,FOLLOW_55_in_invia3741_static.FOLLOW_55_in_invia3741); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_55.add(string_literal772);

            TOKEN773=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_invia3743_static.FOLLOW_TOKEN_in_invia3743); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN773);



            // AST REWRITE
            // elements: 55, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 465:22: -> ^( 'IN-VIA' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:465:25: ^( 'IN-VIA' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_55.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 149, invia_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "invia"

    public static class inof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inof"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:466:1: inof : 'IN-OF' TOKEN -> ^( 'IN-OF' TOKEN ) ;
    public final ChemicalChunkerParser.inof_return inof() throws RecognitionException {
        ChemicalChunkerParser.inof_return retval = new ChemicalChunkerParser.inof_return();
        retval.start = input.LT(1);
        int inof_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal774=null;
        Token TOKEN775=null;

        Object string_literal774_tree=null;
        Object TOKEN775_tree=null;
        RewriteRuleTokenStream stream_56=new RewriteRuleTokenStream(adaptor,"token 56");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:466:5: ( 'IN-OF' TOKEN -> ^( 'IN-OF' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:466:6: 'IN-OF' TOKEN
            {
            string_literal774=(Token)match(input,56,FOLLOW_56_in_inof3756_static.FOLLOW_56_in_inof3756); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_56.add(string_literal774);

            TOKEN775=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inof3758_static.FOLLOW_TOKEN_in_inof3758); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN775);



            // AST REWRITE
            // elements: TOKEN, 56
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 466:20: -> ^( 'IN-OF' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:466:23: ^( 'IN-OF' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_56.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 150, inof_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inof"

    public static class inon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inon"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:467:1: inon : 'IN-ON' TOKEN -> ^( 'IN-ON' TOKEN ) ;
    public final ChemicalChunkerParser.inon_return inon() throws RecognitionException {
        ChemicalChunkerParser.inon_return retval = new ChemicalChunkerParser.inon_return();
        retval.start = input.LT(1);
        int inon_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal776=null;
        Token TOKEN777=null;

        Object string_literal776_tree=null;
        Object TOKEN777_tree=null;
        RewriteRuleTokenStream stream_57=new RewriteRuleTokenStream(adaptor,"token 57");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:467:5: ( 'IN-ON' TOKEN -> ^( 'IN-ON' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:467:6: 'IN-ON' TOKEN
            {
            string_literal776=(Token)match(input,57,FOLLOW_57_in_inon3771_static.FOLLOW_57_in_inon3771); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_57.add(string_literal776);

            TOKEN777=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inon3773_static.FOLLOW_TOKEN_in_inon3773); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN777);



            // AST REWRITE
            // elements: 57, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 467:20: -> ^( 'IN-ON' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:467:23: ^( 'IN-ON' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_57.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 151, inon_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inon"

    public static class infor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infor"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:468:1: infor : 'IN-FOR' TOKEN -> ^( 'IN-FOR' TOKEN ) ;
    public final ChemicalChunkerParser.infor_return infor() throws RecognitionException {
        ChemicalChunkerParser.infor_return retval = new ChemicalChunkerParser.infor_return();
        retval.start = input.LT(1);
        int infor_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal778=null;
        Token TOKEN779=null;

        Object string_literal778_tree=null;
        Object TOKEN779_tree=null;
        RewriteRuleTokenStream stream_58=new RewriteRuleTokenStream(adaptor,"token 58");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:468:6: ( 'IN-FOR' TOKEN -> ^( 'IN-FOR' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:468:7: 'IN-FOR' TOKEN
            {
            string_literal778=(Token)match(input,58,FOLLOW_58_in_infor3786_static.FOLLOW_58_in_infor3786); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_58.add(string_literal778);

            TOKEN779=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infor3788_static.FOLLOW_TOKEN_in_infor3788); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN779);



            // AST REWRITE
            // elements: TOKEN, 58
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 468:22: -> ^( 'IN-FOR' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:468:25: ^( 'IN-FOR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_58.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 152, infor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "infor"

    public static class infrom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infrom"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:469:1: infrom : 'IN-FROM' TOKEN -> ^( 'IN-FROM' TOKEN ) ;
    public final ChemicalChunkerParser.infrom_return infrom() throws RecognitionException {
        ChemicalChunkerParser.infrom_return retval = new ChemicalChunkerParser.infrom_return();
        retval.start = input.LT(1);
        int infrom_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal780=null;
        Token TOKEN781=null;

        Object string_literal780_tree=null;
        Object TOKEN781_tree=null;
        RewriteRuleTokenStream stream_59=new RewriteRuleTokenStream(adaptor,"token 59");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:469:7: ( 'IN-FROM' TOKEN -> ^( 'IN-FROM' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:469:8: 'IN-FROM' TOKEN
            {
            string_literal780=(Token)match(input,59,FOLLOW_59_in_infrom3801_static.FOLLOW_59_in_infrom3801); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_59.add(string_literal780);

            TOKEN781=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infrom3803_static.FOLLOW_TOKEN_in_infrom3803); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN781);



            // AST REWRITE
            // elements: 59, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 469:24: -> ^( 'IN-FROM' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:469:27: ^( 'IN-FROM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_59.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 153, infrom_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "infrom"

    public static class inunder_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inunder"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:470:1: inunder : 'IN-UNDER' TOKEN -> ^( 'IN-UNDER' TOKEN ) ;
    public final ChemicalChunkerParser.inunder_return inunder() throws RecognitionException {
        ChemicalChunkerParser.inunder_return retval = new ChemicalChunkerParser.inunder_return();
        retval.start = input.LT(1);
        int inunder_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal782=null;
        Token TOKEN783=null;

        Object string_literal782_tree=null;
        Object TOKEN783_tree=null;
        RewriteRuleTokenStream stream_60=new RewriteRuleTokenStream(adaptor,"token 60");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:470:8: ( 'IN-UNDER' TOKEN -> ^( 'IN-UNDER' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:470:9: 'IN-UNDER' TOKEN
            {
            string_literal782=(Token)match(input,60,FOLLOW_60_in_inunder3816_static.FOLLOW_60_in_inunder3816); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_60.add(string_literal782);

            TOKEN783=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inunder3818_static.FOLLOW_TOKEN_in_inunder3818); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN783);



            // AST REWRITE
            // elements: 60, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 470:26: -> ^( 'IN-UNDER' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:470:29: ^( 'IN-UNDER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_60.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 154, inunder_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inunder"

    public static class inover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inover"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:471:1: inover : 'IN-OVER' TOKEN -> ^( 'IN-OVER' TOKEN ) ;
    public final ChemicalChunkerParser.inover_return inover() throws RecognitionException {
        ChemicalChunkerParser.inover_return retval = new ChemicalChunkerParser.inover_return();
        retval.start = input.LT(1);
        int inover_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal784=null;
        Token TOKEN785=null;

        Object string_literal784_tree=null;
        Object TOKEN785_tree=null;
        RewriteRuleTokenStream stream_61=new RewriteRuleTokenStream(adaptor,"token 61");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:471:7: ( 'IN-OVER' TOKEN -> ^( 'IN-OVER' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:471:8: 'IN-OVER' TOKEN
            {
            string_literal784=(Token)match(input,61,FOLLOW_61_in_inover3831_static.FOLLOW_61_in_inover3831); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_61.add(string_literal784);

            TOKEN785=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inover3833_static.FOLLOW_TOKEN_in_inover3833); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN785);



            // AST REWRITE
            // elements: TOKEN, 61
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 471:24: -> ^( 'IN-OVER' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:471:27: ^( 'IN-OVER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_61.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 155, inover_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inover"

    public static class inoff_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inoff"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:472:1: inoff : 'IN-OFF' TOKEN -> ^( 'IN-OFF' TOKEN ) ;
    public final ChemicalChunkerParser.inoff_return inoff() throws RecognitionException {
        ChemicalChunkerParser.inoff_return retval = new ChemicalChunkerParser.inoff_return();
        retval.start = input.LT(1);
        int inoff_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal786=null;
        Token TOKEN787=null;

        Object string_literal786_tree=null;
        Object TOKEN787_tree=null;
        RewriteRuleTokenStream stream_62=new RewriteRuleTokenStream(adaptor,"token 62");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:472:6: ( 'IN-OFF' TOKEN -> ^( 'IN-OFF' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:472:7: 'IN-OFF' TOKEN
            {
            string_literal786=(Token)match(input,62,FOLLOW_62_in_inoff3846_static.FOLLOW_62_in_inoff3846); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_62.add(string_literal786);

            TOKEN787=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inoff3848_static.FOLLOW_TOKEN_in_inoff3848); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN787);



            // AST REWRITE
            // elements: TOKEN, 62
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 472:22: -> ^( 'IN-OFF' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:472:25: ^( 'IN-OFF' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_62.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 156, inoff_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inoff"

    public static class nnstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnstate"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:475:1: nnstate : 'NN-STATE' TOKEN -> ^( 'NN-STATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnstate_return nnstate() throws RecognitionException {
        ChemicalChunkerParser.nnstate_return retval = new ChemicalChunkerParser.nnstate_return();
        retval.start = input.LT(1);
        int nnstate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal788=null;
        Token TOKEN789=null;

        Object string_literal788_tree=null;
        Object TOKEN789_tree=null;
        RewriteRuleTokenStream stream_63=new RewriteRuleTokenStream(adaptor,"token 63");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:475:8: ( 'NN-STATE' TOKEN -> ^( 'NN-STATE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:475:9: 'NN-STATE' TOKEN
            {
            string_literal788=(Token)match(input,63,FOLLOW_63_in_nnstate3863_static.FOLLOW_63_in_nnstate3863); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_63.add(string_literal788);

            TOKEN789=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnstate3865_static.FOLLOW_TOKEN_in_nnstate3865); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN789);



            // AST REWRITE
            // elements: TOKEN, 63
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 475:26: -> ^( 'NN-STATE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:475:29: ^( 'NN-STATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_63.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 157, nnstate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnstate"

    public static class nntime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntime"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:476:1: nntime : 'NN-TIME' TOKEN -> ^( 'NN-TIME' TOKEN ) ;
    public final ChemicalChunkerParser.nntime_return nntime() throws RecognitionException {
        ChemicalChunkerParser.nntime_return retval = new ChemicalChunkerParser.nntime_return();
        retval.start = input.LT(1);
        int nntime_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal790=null;
        Token TOKEN791=null;

        Object string_literal790_tree=null;
        Object TOKEN791_tree=null;
        RewriteRuleTokenStream stream_64=new RewriteRuleTokenStream(adaptor,"token 64");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:476:7: ( 'NN-TIME' TOKEN -> ^( 'NN-TIME' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:476:8: 'NN-TIME' TOKEN
            {
            string_literal790=(Token)match(input,64,FOLLOW_64_in_nntime3878_static.FOLLOW_64_in_nntime3878); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_64.add(string_literal790);

            TOKEN791=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntime3880_static.FOLLOW_TOKEN_in_nntime3880); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN791);



            // AST REWRITE
            // elements: TOKEN, 64
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 476:24: -> ^( 'NN-TIME' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:476:27: ^( 'NN-TIME' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_64.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 158, nntime_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntime"

    public static class nnmass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmass"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:477:1: nnmass : 'NN-MASS' TOKEN -> ^( 'NN-MASS' TOKEN ) ;
    public final ChemicalChunkerParser.nnmass_return nnmass() throws RecognitionException {
        ChemicalChunkerParser.nnmass_return retval = new ChemicalChunkerParser.nnmass_return();
        retval.start = input.LT(1);
        int nnmass_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal792=null;
        Token TOKEN793=null;

        Object string_literal792_tree=null;
        Object TOKEN793_tree=null;
        RewriteRuleTokenStream stream_65=new RewriteRuleTokenStream(adaptor,"token 65");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:477:7: ( 'NN-MASS' TOKEN -> ^( 'NN-MASS' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:477:8: 'NN-MASS' TOKEN
            {
            string_literal792=(Token)match(input,65,FOLLOW_65_in_nnmass3893_static.FOLLOW_65_in_nnmass3893); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_65.add(string_literal792);

            TOKEN793=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmass3895_static.FOLLOW_TOKEN_in_nnmass3895); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN793);



            // AST REWRITE
            // elements: 65, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 477:24: -> ^( 'NN-MASS' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:477:27: ^( 'NN-MASS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_65.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 159, nnmass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmass"

    public static class nnamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnamount"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:478:1: nnamount : 'NN-AMOUNT' TOKEN -> ^( 'NN-AMOUNT' TOKEN ) ;
    public final ChemicalChunkerParser.nnamount_return nnamount() throws RecognitionException {
        ChemicalChunkerParser.nnamount_return retval = new ChemicalChunkerParser.nnamount_return();
        retval.start = input.LT(1);
        int nnamount_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal794=null;
        Token TOKEN795=null;

        Object string_literal794_tree=null;
        Object TOKEN795_tree=null;
        RewriteRuleTokenStream stream_66=new RewriteRuleTokenStream(adaptor,"token 66");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:478:9: ( 'NN-AMOUNT' TOKEN -> ^( 'NN-AMOUNT' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:478:10: 'NN-AMOUNT' TOKEN
            {
            string_literal794=(Token)match(input,66,FOLLOW_66_in_nnamount3908_static.FOLLOW_66_in_nnamount3908); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_66.add(string_literal794);

            TOKEN795=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnamount3910_static.FOLLOW_TOKEN_in_nnamount3910); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN795);



            // AST REWRITE
            // elements: 66, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 478:28: -> ^( 'NN-AMOUNT' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:478:31: ^( 'NN-AMOUNT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_66.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 160, nnamount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnamount"

    public static class nnmolar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmolar"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:479:1: nnmolar : 'NN-MOLAR' TOKEN -> ^( 'NN-MOLAR' TOKEN ) ;
    public final ChemicalChunkerParser.nnmolar_return nnmolar() throws RecognitionException {
        ChemicalChunkerParser.nnmolar_return retval = new ChemicalChunkerParser.nnmolar_return();
        retval.start = input.LT(1);
        int nnmolar_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal796=null;
        Token TOKEN797=null;

        Object string_literal796_tree=null;
        Object TOKEN797_tree=null;
        RewriteRuleTokenStream stream_67=new RewriteRuleTokenStream(adaptor,"token 67");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:479:8: ( 'NN-MOLAR' TOKEN -> ^( 'NN-MOLAR' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:479:9: 'NN-MOLAR' TOKEN
            {
            string_literal796=(Token)match(input,67,FOLLOW_67_in_nnmolar3923_static.FOLLOW_67_in_nnmolar3923); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_67.add(string_literal796);

            TOKEN797=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmolar3925_static.FOLLOW_TOKEN_in_nnmolar3925); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN797);



            // AST REWRITE
            // elements: TOKEN, 67
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 479:26: -> ^( 'NN-MOLAR' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:479:29: ^( 'NN-MOLAR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_67.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 161, nnmolar_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmolar"

    public static class nnatmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnatmosphere"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:480:1: nnatmosphere : 'NN-ATMOSPHERE' TOKEN -> ^( 'NN-ATMOSPHERE' TOKEN ) ;
    public final ChemicalChunkerParser.nnatmosphere_return nnatmosphere() throws RecognitionException {
        ChemicalChunkerParser.nnatmosphere_return retval = new ChemicalChunkerParser.nnatmosphere_return();
        retval.start = input.LT(1);
        int nnatmosphere_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal798=null;
        Token TOKEN799=null;

        Object string_literal798_tree=null;
        Object TOKEN799_tree=null;
        RewriteRuleTokenStream stream_68=new RewriteRuleTokenStream(adaptor,"token 68");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:480:13: ( 'NN-ATMOSPHERE' TOKEN -> ^( 'NN-ATMOSPHERE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:480:14: 'NN-ATMOSPHERE' TOKEN
            {
            string_literal798=(Token)match(input,68,FOLLOW_68_in_nnatmosphere3938_static.FOLLOW_68_in_nnatmosphere3938); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_68.add(string_literal798);

            TOKEN799=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnatmosphere3940_static.FOLLOW_TOKEN_in_nnatmosphere3940); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN799);



            // AST REWRITE
            // elements: 68, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 480:36: -> ^( 'NN-ATMOSPHERE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:480:39: ^( 'NN-ATMOSPHERE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_68.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 162, nnatmosphere_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnatmosphere"

    public static class nneq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nneq"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:481:1: nneq : 'NN-EQ' TOKEN -> ^( 'NN-EQ' TOKEN ) ;
    public final ChemicalChunkerParser.nneq_return nneq() throws RecognitionException {
        ChemicalChunkerParser.nneq_return retval = new ChemicalChunkerParser.nneq_return();
        retval.start = input.LT(1);
        int nneq_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal800=null;
        Token TOKEN801=null;

        Object string_literal800_tree=null;
        Object TOKEN801_tree=null;
        RewriteRuleTokenStream stream_69=new RewriteRuleTokenStream(adaptor,"token 69");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:481:5: ( 'NN-EQ' TOKEN -> ^( 'NN-EQ' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:481:6: 'NN-EQ' TOKEN
            {
            string_literal800=(Token)match(input,69,FOLLOW_69_in_nneq3953_static.FOLLOW_69_in_nneq3953); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_69.add(string_literal800);

            TOKEN801=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nneq3955_static.FOLLOW_TOKEN_in_nneq3955); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN801);



            // AST REWRITE
            // elements: TOKEN, 69
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 481:20: -> ^( 'NN-EQ' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:481:23: ^( 'NN-EQ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_69.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 163, nneq_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nneq"

    public static class nnvol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvol"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:482:1: nnvol : 'NN-VOL' TOKEN -> ^( 'NN-VOL' TOKEN ) ;
    public final ChemicalChunkerParser.nnvol_return nnvol() throws RecognitionException {
        ChemicalChunkerParser.nnvol_return retval = new ChemicalChunkerParser.nnvol_return();
        retval.start = input.LT(1);
        int nnvol_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal802=null;
        Token TOKEN803=null;

        Object string_literal802_tree=null;
        Object TOKEN803_tree=null;
        RewriteRuleTokenStream stream_70=new RewriteRuleTokenStream(adaptor,"token 70");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:482:6: ( 'NN-VOL' TOKEN -> ^( 'NN-VOL' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:482:7: 'NN-VOL' TOKEN
            {
            string_literal802=(Token)match(input,70,FOLLOW_70_in_nnvol3968_static.FOLLOW_70_in_nnvol3968); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_70.add(string_literal802);

            TOKEN803=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvol3970_static.FOLLOW_TOKEN_in_nnvol3970); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN803);



            // AST REWRITE
            // elements: TOKEN, 70
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 482:22: -> ^( 'NN-VOL' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:482:25: ^( 'NN-VOL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_70.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 164, nnvol_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnvol"

    public static class nnchementity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchementity"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:483:1: nnchementity : 'NN-CHEMENTITY' TOKEN -> ^( 'NN-CHEMENTITY' TOKEN ) ;
    public final ChemicalChunkerParser.nnchementity_return nnchementity() throws RecognitionException {
        ChemicalChunkerParser.nnchementity_return retval = new ChemicalChunkerParser.nnchementity_return();
        retval.start = input.LT(1);
        int nnchementity_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal804=null;
        Token TOKEN805=null;

        Object string_literal804_tree=null;
        Object TOKEN805_tree=null;
        RewriteRuleTokenStream stream_71=new RewriteRuleTokenStream(adaptor,"token 71");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:483:13: ( 'NN-CHEMENTITY' TOKEN -> ^( 'NN-CHEMENTITY' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:483:14: 'NN-CHEMENTITY' TOKEN
            {
            string_literal804=(Token)match(input,71,FOLLOW_71_in_nnchementity3983_static.FOLLOW_71_in_nnchementity3983); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_71.add(string_literal804);

            TOKEN805=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchementity3985_static.FOLLOW_TOKEN_in_nnchementity3985); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN805);



            // AST REWRITE
            // elements: TOKEN, 71
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 483:36: -> ^( 'NN-CHEMENTITY' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:483:39: ^( 'NN-CHEMENTITY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_71.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 165, nnchementity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnchementity"

    public static class nntemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntemp"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:484:1: nntemp : 'NN-TEMP' TOKEN -> ^( 'NN-TEMP' TOKEN ) ;
    public final ChemicalChunkerParser.nntemp_return nntemp() throws RecognitionException {
        ChemicalChunkerParser.nntemp_return retval = new ChemicalChunkerParser.nntemp_return();
        retval.start = input.LT(1);
        int nntemp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal806=null;
        Token TOKEN807=null;

        Object string_literal806_tree=null;
        Object TOKEN807_tree=null;
        RewriteRuleTokenStream stream_72=new RewriteRuleTokenStream(adaptor,"token 72");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:484:7: ( 'NN-TEMP' TOKEN -> ^( 'NN-TEMP' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:484:8: 'NN-TEMP' TOKEN
            {
            string_literal806=(Token)match(input,72,FOLLOW_72_in_nntemp3998_static.FOLLOW_72_in_nntemp3998); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_72.add(string_literal806);

            TOKEN807=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntemp4000_static.FOLLOW_TOKEN_in_nntemp4000); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN807);



            // AST REWRITE
            // elements: 72, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 484:24: -> ^( 'NN-TEMP' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:484:27: ^( 'NN-TEMP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_72.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 166, nntemp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntemp"

    public static class nnph_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnph"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:485:1: nnph : 'NN-PH' TOKEN -> ^( 'NN-PH' TOKEN ) ;
    public final ChemicalChunkerParser.nnph_return nnph() throws RecognitionException {
        ChemicalChunkerParser.nnph_return retval = new ChemicalChunkerParser.nnph_return();
        retval.start = input.LT(1);
        int nnph_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal808=null;
        Token TOKEN809=null;

        Object string_literal808_tree=null;
        Object TOKEN809_tree=null;
        RewriteRuleTokenStream stream_73=new RewriteRuleTokenStream(adaptor,"token 73");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:485:5: ( 'NN-PH' TOKEN -> ^( 'NN-PH' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:485:6: 'NN-PH' TOKEN
            {
            string_literal808=(Token)match(input,73,FOLLOW_73_in_nnph4013_static.FOLLOW_73_in_nnph4013); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_73.add(string_literal808);

            TOKEN809=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnph4015_static.FOLLOW_TOKEN_in_nnph4015); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN809);



            // AST REWRITE
            // elements: 73, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 485:20: -> ^( 'NN-PH' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:485:23: ^( 'NN-PH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_73.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 167, nnph_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnph"

    public static class nnflash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnflash"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:486:1: nnflash : 'NN-FLASH' TOKEN -> ^( 'NN-FLASH' TOKEN ) ;
    public final ChemicalChunkerParser.nnflash_return nnflash() throws RecognitionException {
        ChemicalChunkerParser.nnflash_return retval = new ChemicalChunkerParser.nnflash_return();
        retval.start = input.LT(1);
        int nnflash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal810=null;
        Token TOKEN811=null;

        Object string_literal810_tree=null;
        Object TOKEN811_tree=null;
        RewriteRuleTokenStream stream_74=new RewriteRuleTokenStream(adaptor,"token 74");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:486:8: ( 'NN-FLASH' TOKEN -> ^( 'NN-FLASH' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:486:9: 'NN-FLASH' TOKEN
            {
            string_literal810=(Token)match(input,74,FOLLOW_74_in_nnflash4028_static.FOLLOW_74_in_nnflash4028); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_74.add(string_literal810);

            TOKEN811=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnflash4030_static.FOLLOW_TOKEN_in_nnflash4030); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN811);



            // AST REWRITE
            // elements: 74, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 486:26: -> ^( 'NN-FLASH' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:486:29: ^( 'NN-FLASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_74.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 168, nnflash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnflash"

    public static class nngeneral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nngeneral"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:487:1: nngeneral : 'NN-GENERAL' TOKEN -> ^( 'NN-GENERAL' TOKEN ) ;
    public final ChemicalChunkerParser.nngeneral_return nngeneral() throws RecognitionException {
        ChemicalChunkerParser.nngeneral_return retval = new ChemicalChunkerParser.nngeneral_return();
        retval.start = input.LT(1);
        int nngeneral_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal812=null;
        Token TOKEN813=null;

        Object string_literal812_tree=null;
        Object TOKEN813_tree=null;
        RewriteRuleTokenStream stream_75=new RewriteRuleTokenStream(adaptor,"token 75");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:487:10: ( 'NN-GENERAL' TOKEN -> ^( 'NN-GENERAL' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:487:11: 'NN-GENERAL' TOKEN
            {
            string_literal812=(Token)match(input,75,FOLLOW_75_in_nngeneral4043_static.FOLLOW_75_in_nngeneral4043); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_75.add(string_literal812);

            TOKEN813=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nngeneral4045_static.FOLLOW_TOKEN_in_nngeneral4045); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN813);



            // AST REWRITE
            // elements: TOKEN, 75
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 487:30: -> ^( 'NN-GENERAL' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:487:33: ^( 'NN-GENERAL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_75.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 169, nngeneral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nngeneral"

    public static class nnmethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmethod"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:488:1: nnmethod : 'NN-METHOD' TOKEN -> ^( 'NN-METHOD' TOKEN ) ;
    public final ChemicalChunkerParser.nnmethod_return nnmethod() throws RecognitionException {
        ChemicalChunkerParser.nnmethod_return retval = new ChemicalChunkerParser.nnmethod_return();
        retval.start = input.LT(1);
        int nnmethod_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal814=null;
        Token TOKEN815=null;

        Object string_literal814_tree=null;
        Object TOKEN815_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_76=new RewriteRuleTokenStream(adaptor,"token 76");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:488:9: ( 'NN-METHOD' TOKEN -> ^( 'NN-METHOD' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:488:10: 'NN-METHOD' TOKEN
            {
            string_literal814=(Token)match(input,76,FOLLOW_76_in_nnmethod4058_static.FOLLOW_76_in_nnmethod4058); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_76.add(string_literal814);

            TOKEN815=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmethod4060_static.FOLLOW_TOKEN_in_nnmethod4060); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN815);



            // AST REWRITE
            // elements: 76, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 488:28: -> ^( 'NN-METHOD' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:488:31: ^( 'NN-METHOD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_76.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 170, nnmethod_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmethod"

    public static class nnpressure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpressure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:489:1: nnpressure : 'NN-PRESSURE' TOKEN -> ^( 'NN-PRESSURE' TOKEN ) ;
    public final ChemicalChunkerParser.nnpressure_return nnpressure() throws RecognitionException {
        ChemicalChunkerParser.nnpressure_return retval = new ChemicalChunkerParser.nnpressure_return();
        retval.start = input.LT(1);
        int nnpressure_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal816=null;
        Token TOKEN817=null;

        Object string_literal816_tree=null;
        Object TOKEN817_tree=null;
        RewriteRuleTokenStream stream_77=new RewriteRuleTokenStream(adaptor,"token 77");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:489:11: ( 'NN-PRESSURE' TOKEN -> ^( 'NN-PRESSURE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:489:12: 'NN-PRESSURE' TOKEN
            {
            string_literal816=(Token)match(input,77,FOLLOW_77_in_nnpressure4073_static.FOLLOW_77_in_nnpressure4073); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_77.add(string_literal816);

            TOKEN817=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpressure4075_static.FOLLOW_TOKEN_in_nnpressure4075); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN817);



            // AST REWRITE
            // elements: 77, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 489:32: -> ^( 'NN-PRESSURE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:489:35: ^( 'NN-PRESSURE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_77.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 171, nnpressure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpressure"

    public static class nncolumn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncolumn"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:490:1: nncolumn : 'NN-COLUMN' TOKEN -> ^( 'NN-COLUMN' TOKEN ) ;
    public final ChemicalChunkerParser.nncolumn_return nncolumn() throws RecognitionException {
        ChemicalChunkerParser.nncolumn_return retval = new ChemicalChunkerParser.nncolumn_return();
        retval.start = input.LT(1);
        int nncolumn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal818=null;
        Token TOKEN819=null;

        Object string_literal818_tree=null;
        Object TOKEN819_tree=null;
        RewriteRuleTokenStream stream_78=new RewriteRuleTokenStream(adaptor,"token 78");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:490:9: ( 'NN-COLUMN' TOKEN -> ^( 'NN-COLUMN' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:490:10: 'NN-COLUMN' TOKEN
            {
            string_literal818=(Token)match(input,78,FOLLOW_78_in_nncolumn4088_static.FOLLOW_78_in_nncolumn4088); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_78.add(string_literal818);

            TOKEN819=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncolumn4090_static.FOLLOW_TOKEN_in_nncolumn4090); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN819);



            // AST REWRITE
            // elements: 78, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 490:28: -> ^( 'NN-COLUMN' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:490:31: ^( 'NN-COLUMN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_78.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 172, nncolumn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nncolumn"

    public static class nnchromatography_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchromatography"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:491:1: nnchromatography : 'NN-CHROMATOGRAPHY' TOKEN -> ^( 'NN-CHROMATOGRAPHY' TOKEN ) ;
    public final ChemicalChunkerParser.nnchromatography_return nnchromatography() throws RecognitionException {
        ChemicalChunkerParser.nnchromatography_return retval = new ChemicalChunkerParser.nnchromatography_return();
        retval.start = input.LT(1);
        int nnchromatography_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal820=null;
        Token TOKEN821=null;

        Object string_literal820_tree=null;
        Object TOKEN821_tree=null;
        RewriteRuleTokenStream stream_79=new RewriteRuleTokenStream(adaptor,"token 79");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:491:17: ( 'NN-CHROMATOGRAPHY' TOKEN -> ^( 'NN-CHROMATOGRAPHY' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:491:18: 'NN-CHROMATOGRAPHY' TOKEN
            {
            string_literal820=(Token)match(input,79,FOLLOW_79_in_nnchromatography4103_static.FOLLOW_79_in_nnchromatography4103); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_79.add(string_literal820);

            TOKEN821=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchromatography4105_static.FOLLOW_TOKEN_in_nnchromatography4105); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN821);



            // AST REWRITE
            // elements: TOKEN, 79
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 491:44: -> ^( 'NN-CHROMATOGRAPHY' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:491:47: ^( 'NN-CHROMATOGRAPHY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_79.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 173, nnchromatography_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnchromatography"

    public static class nnvacuum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvacuum"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:492:1: nnvacuum : 'NN-VACUUM' TOKEN -> ^( 'NN-VACUUM' TOKEN ) ;
    public final ChemicalChunkerParser.nnvacuum_return nnvacuum() throws RecognitionException {
        ChemicalChunkerParser.nnvacuum_return retval = new ChemicalChunkerParser.nnvacuum_return();
        retval.start = input.LT(1);
        int nnvacuum_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal822=null;
        Token TOKEN823=null;

        Object string_literal822_tree=null;
        Object TOKEN823_tree=null;
        RewriteRuleTokenStream stream_80=new RewriteRuleTokenStream(adaptor,"token 80");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:492:9: ( 'NN-VACUUM' TOKEN -> ^( 'NN-VACUUM' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:492:10: 'NN-VACUUM' TOKEN
            {
            string_literal822=(Token)match(input,80,FOLLOW_80_in_nnvacuum4118_static.FOLLOW_80_in_nnvacuum4118); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_80.add(string_literal822);

            TOKEN823=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvacuum4120_static.FOLLOW_TOKEN_in_nnvacuum4120); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN823);



            // AST REWRITE
            // elements: 80, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 492:28: -> ^( 'NN-VACUUM' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:492:31: ^( 'NN-VACUUM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_80.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 174, nnvacuum_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnvacuum"

    public static class nncycle_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncycle"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:493:1: nncycle : 'NN-CYCLE' TOKEN -> ^( 'NN-CYCLE' TOKEN ) ;
    public final ChemicalChunkerParser.nncycle_return nncycle() throws RecognitionException {
        ChemicalChunkerParser.nncycle_return retval = new ChemicalChunkerParser.nncycle_return();
        retval.start = input.LT(1);
        int nncycle_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal824=null;
        Token TOKEN825=null;

        Object string_literal824_tree=null;
        Object TOKEN825_tree=null;
        RewriteRuleTokenStream stream_81=new RewriteRuleTokenStream(adaptor,"token 81");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:493:8: ( 'NN-CYCLE' TOKEN -> ^( 'NN-CYCLE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:493:9: 'NN-CYCLE' TOKEN
            {
            string_literal824=(Token)match(input,81,FOLLOW_81_in_nncycle4133_static.FOLLOW_81_in_nncycle4133); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_81.add(string_literal824);

            TOKEN825=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncycle4135_static.FOLLOW_TOKEN_in_nncycle4135); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN825);



            // AST REWRITE
            // elements: TOKEN, 81
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 493:26: -> ^( 'NN-CYCLE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:493:29: ^( 'NN-CYCLE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_81.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 175, nncycle_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nncycle"

    public static class nntimes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntimes"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:494:1: nntimes : 'NN-TIMES' TOKEN -> ^( 'NN-TIMES' TOKEN ) ;
    public final ChemicalChunkerParser.nntimes_return nntimes() throws RecognitionException {
        ChemicalChunkerParser.nntimes_return retval = new ChemicalChunkerParser.nntimes_return();
        retval.start = input.LT(1);
        int nntimes_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal826=null;
        Token TOKEN827=null;

        Object string_literal826_tree=null;
        Object TOKEN827_tree=null;
        RewriteRuleTokenStream stream_82=new RewriteRuleTokenStream(adaptor,"token 82");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:494:8: ( 'NN-TIMES' TOKEN -> ^( 'NN-TIMES' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:494:9: 'NN-TIMES' TOKEN
            {
            string_literal826=(Token)match(input,82,FOLLOW_82_in_nntimes4148_static.FOLLOW_82_in_nntimes4148); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_82.add(string_literal826);

            TOKEN827=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntimes4150_static.FOLLOW_TOKEN_in_nntimes4150); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN827);



            // AST REWRITE
            // elements: TOKEN, 82
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 494:26: -> ^( 'NN-TIMES' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:494:29: ^( 'NN-TIMES' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_82.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 176, nntimes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntimes"

    public static class nnexample_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnexample"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:495:1: nnexample : 'NN-EXAMPLE' TOKEN -> ^( 'NN-EXAMPLE' TOKEN ) ;
    public final ChemicalChunkerParser.nnexample_return nnexample() throws RecognitionException {
        ChemicalChunkerParser.nnexample_return retval = new ChemicalChunkerParser.nnexample_return();
        retval.start = input.LT(1);
        int nnexample_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal828=null;
        Token TOKEN829=null;

        Object string_literal828_tree=null;
        Object TOKEN829_tree=null;
        RewriteRuleTokenStream stream_83=new RewriteRuleTokenStream(adaptor,"token 83");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 177) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:495:10: ( 'NN-EXAMPLE' TOKEN -> ^( 'NN-EXAMPLE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:495:11: 'NN-EXAMPLE' TOKEN
            {
            string_literal828=(Token)match(input,83,FOLLOW_83_in_nnexample4163_static.FOLLOW_83_in_nnexample4163); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_83.add(string_literal828);

            TOKEN829=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnexample4165_static.FOLLOW_TOKEN_in_nnexample4165); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN829);



            // AST REWRITE
            // elements: 83, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 495:30: -> ^( 'NN-EXAMPLE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:495:33: ^( 'NN-EXAMPLE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_83.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 177, nnexample_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnexample"

    public static class oscarcm_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcm"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:498:1: oscarcm : 'OSCAR-CM' TOKEN -> ^( 'OSCAR-CM' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcm_return oscarcm() throws RecognitionException {
        ChemicalChunkerParser.oscarcm_return retval = new ChemicalChunkerParser.oscarcm_return();
        retval.start = input.LT(1);
        int oscarcm_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal830=null;
        Token TOKEN831=null;

        Object string_literal830_tree=null;
        Object TOKEN831_tree=null;
        RewriteRuleTokenStream stream_84=new RewriteRuleTokenStream(adaptor,"token 84");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 178) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:498:8: ( 'OSCAR-CM' TOKEN -> ^( 'OSCAR-CM' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:498:9: 'OSCAR-CM' TOKEN
            {
            string_literal830=(Token)match(input,84,FOLLOW_84_in_oscarcm4180_static.FOLLOW_84_in_oscarcm4180); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_84.add(string_literal830);

            TOKEN831=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcm4182_static.FOLLOW_TOKEN_in_oscarcm4182); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN831);



            // AST REWRITE
            // elements: TOKEN, 84
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 498:26: -> ^( 'OSCAR-CM' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:498:29: ^( 'OSCAR-CM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_84.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 178, oscarcm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarcm"

    public static class vbuse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbuse"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:501:1: vbuse : 'VB-USE' TOKEN -> ^( 'VB-USE' TOKEN ) ;
    public final ChemicalChunkerParser.vbuse_return vbuse() throws RecognitionException {
        ChemicalChunkerParser.vbuse_return retval = new ChemicalChunkerParser.vbuse_return();
        retval.start = input.LT(1);
        int vbuse_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal832=null;
        Token TOKEN833=null;

        Object string_literal832_tree=null;
        Object TOKEN833_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_85=new RewriteRuleTokenStream(adaptor,"token 85");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 179) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:501:6: ( 'VB-USE' TOKEN -> ^( 'VB-USE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:501:7: 'VB-USE' TOKEN
            {
            string_literal832=(Token)match(input,85,FOLLOW_85_in_vbuse4197_static.FOLLOW_85_in_vbuse4197); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_85.add(string_literal832);

            TOKEN833=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbuse4199_static.FOLLOW_TOKEN_in_vbuse4199); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN833);



            // AST REWRITE
            // elements: 85, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 501:22: -> ^( 'VB-USE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:501:25: ^( 'VB-USE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_85.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 179, vbuse_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbuse"

    public static class vbchange_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbchange"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:502:1: vbchange : 'VB-CHANGE' TOKEN -> ^( 'VB-CHANGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbchange_return vbchange() throws RecognitionException {
        ChemicalChunkerParser.vbchange_return retval = new ChemicalChunkerParser.vbchange_return();
        retval.start = input.LT(1);
        int vbchange_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal834=null;
        Token TOKEN835=null;

        Object string_literal834_tree=null;
        Object TOKEN835_tree=null;
        RewriteRuleTokenStream stream_86=new RewriteRuleTokenStream(adaptor,"token 86");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 180) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:502:9: ( 'VB-CHANGE' TOKEN -> ^( 'VB-CHANGE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:502:10: 'VB-CHANGE' TOKEN
            {
            string_literal834=(Token)match(input,86,FOLLOW_86_in_vbchange4212_static.FOLLOW_86_in_vbchange4212); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_86.add(string_literal834);

            TOKEN835=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbchange4214_static.FOLLOW_TOKEN_in_vbchange4214); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN835);



            // AST REWRITE
            // elements: TOKEN, 86
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 502:28: -> ^( 'VB-CHANGE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:502:31: ^( 'VB-CHANGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_86.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 180, vbchange_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbchange"

    public static class vbsubmerge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubmerge"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:503:1: vbsubmerge : 'VB-SUBMERGE' TOKEN -> ^( 'VB-SUBMERGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbsubmerge_return vbsubmerge() throws RecognitionException {
        ChemicalChunkerParser.vbsubmerge_return retval = new ChemicalChunkerParser.vbsubmerge_return();
        retval.start = input.LT(1);
        int vbsubmerge_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal836=null;
        Token TOKEN837=null;

        Object string_literal836_tree=null;
        Object TOKEN837_tree=null;
        RewriteRuleTokenStream stream_87=new RewriteRuleTokenStream(adaptor,"token 87");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 181) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:503:11: ( 'VB-SUBMERGE' TOKEN -> ^( 'VB-SUBMERGE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:503:12: 'VB-SUBMERGE' TOKEN
            {
            string_literal836=(Token)match(input,87,FOLLOW_87_in_vbsubmerge4227_static.FOLLOW_87_in_vbsubmerge4227); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_87.add(string_literal836);

            TOKEN837=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubmerge4229_static.FOLLOW_TOKEN_in_vbsubmerge4229); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN837);



            // AST REWRITE
            // elements: 87, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 503:32: -> ^( 'VB-SUBMERGE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:503:35: ^( 'VB-SUBMERGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_87.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 181, vbsubmerge_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsubmerge"

    public static class vbsubject_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubject"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:504:1: vbsubject : 'VB-SUBJECT' TOKEN -> ^( 'VB-SUBJECT' TOKEN ) ;
    public final ChemicalChunkerParser.vbsubject_return vbsubject() throws RecognitionException {
        ChemicalChunkerParser.vbsubject_return retval = new ChemicalChunkerParser.vbsubject_return();
        retval.start = input.LT(1);
        int vbsubject_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal838=null;
        Token TOKEN839=null;

        Object string_literal838_tree=null;
        Object TOKEN839_tree=null;
        RewriteRuleTokenStream stream_88=new RewriteRuleTokenStream(adaptor,"token 88");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 182) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:504:10: ( 'VB-SUBJECT' TOKEN -> ^( 'VB-SUBJECT' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:504:11: 'VB-SUBJECT' TOKEN
            {
            string_literal838=(Token)match(input,88,FOLLOW_88_in_vbsubject4242_static.FOLLOW_88_in_vbsubject4242); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_88.add(string_literal838);

            TOKEN839=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubject4244_static.FOLLOW_TOKEN_in_vbsubject4244); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN839);



            // AST REWRITE
            // elements: TOKEN, 88
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 504:30: -> ^( 'VB-SUBJECT' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:504:33: ^( 'VB-SUBJECT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_88.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 182, vbsubject_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsubject"

    public static class nnadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnadd"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:507:1: nnadd : 'NN-ADD' TOKEN -> ^( 'NN-ADD' TOKEN ) ;
    public final ChemicalChunkerParser.nnadd_return nnadd() throws RecognitionException {
        ChemicalChunkerParser.nnadd_return retval = new ChemicalChunkerParser.nnadd_return();
        retval.start = input.LT(1);
        int nnadd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal840=null;
        Token TOKEN841=null;

        Object string_literal840_tree=null;
        Object TOKEN841_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_89=new RewriteRuleTokenStream(adaptor,"token 89");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 183) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:507:6: ( 'NN-ADD' TOKEN -> ^( 'NN-ADD' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:507:7: 'NN-ADD' TOKEN
            {
            string_literal840=(Token)match(input,89,FOLLOW_89_in_nnadd4259_static.FOLLOW_89_in_nnadd4259); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_89.add(string_literal840);

            TOKEN841=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnadd4261_static.FOLLOW_TOKEN_in_nnadd4261); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN841);



            // AST REWRITE
            // elements: 89, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 507:22: -> ^( 'NN-ADD' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:507:25: ^( 'NN-ADD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_89.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 183, nnadd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnadd"

    public static class nnmixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmixture"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:508:1: nnmixture : 'NN-MIXTURE' TOKEN -> ^( 'NN-MIXTURE' TOKEN ) ;
    public final ChemicalChunkerParser.nnmixture_return nnmixture() throws RecognitionException {
        ChemicalChunkerParser.nnmixture_return retval = new ChemicalChunkerParser.nnmixture_return();
        retval.start = input.LT(1);
        int nnmixture_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal842=null;
        Token TOKEN843=null;

        Object string_literal842_tree=null;
        Object TOKEN843_tree=null;
        RewriteRuleTokenStream stream_90=new RewriteRuleTokenStream(adaptor,"token 90");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 184) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:508:10: ( 'NN-MIXTURE' TOKEN -> ^( 'NN-MIXTURE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:508:11: 'NN-MIXTURE' TOKEN
            {
            string_literal842=(Token)match(input,90,FOLLOW_90_in_nnmixture4274_static.FOLLOW_90_in_nnmixture4274); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_90.add(string_literal842);

            TOKEN843=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmixture4276_static.FOLLOW_TOKEN_in_nnmixture4276); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN843);



            // AST REWRITE
            // elements: 90, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 508:30: -> ^( 'NN-MIXTURE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:508:33: ^( 'NN-MIXTURE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_90.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 184, nnmixture_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmixture"

    public static class vbdilute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdilute"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:509:1: vbdilute : 'VB-DILUTE' TOKEN -> ^( 'VB-DILUTE' TOKEN ) ;
    public final ChemicalChunkerParser.vbdilute_return vbdilute() throws RecognitionException {
        ChemicalChunkerParser.vbdilute_return retval = new ChemicalChunkerParser.vbdilute_return();
        retval.start = input.LT(1);
        int vbdilute_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal844=null;
        Token TOKEN845=null;

        Object string_literal844_tree=null;
        Object TOKEN845_tree=null;
        RewriteRuleTokenStream stream_91=new RewriteRuleTokenStream(adaptor,"token 91");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 185) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:509:9: ( 'VB-DILUTE' TOKEN -> ^( 'VB-DILUTE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:509:10: 'VB-DILUTE' TOKEN
            {
            string_literal844=(Token)match(input,91,FOLLOW_91_in_vbdilute4289_static.FOLLOW_91_in_vbdilute4289); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_91.add(string_literal844);

            TOKEN845=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdilute4291_static.FOLLOW_TOKEN_in_vbdilute4291); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN845);



            // AST REWRITE
            // elements: TOKEN, 91
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 509:28: -> ^( 'VB-DILUTE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:509:31: ^( 'VB-DILUTE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_91.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 185, vbdilute_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdilute"

    public static class vbadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbadd"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:510:1: vbadd : 'VB-ADD' TOKEN -> ^( 'VB-ADD' TOKEN ) ;
    public final ChemicalChunkerParser.vbadd_return vbadd() throws RecognitionException {
        ChemicalChunkerParser.vbadd_return retval = new ChemicalChunkerParser.vbadd_return();
        retval.start = input.LT(1);
        int vbadd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal846=null;
        Token TOKEN847=null;

        Object string_literal846_tree=null;
        Object TOKEN847_tree=null;
        RewriteRuleTokenStream stream_92=new RewriteRuleTokenStream(adaptor,"token 92");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 186) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:510:6: ( 'VB-ADD' TOKEN -> ^( 'VB-ADD' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:510:7: 'VB-ADD' TOKEN
            {
            string_literal846=(Token)match(input,92,FOLLOW_92_in_vbadd4304_static.FOLLOW_92_in_vbadd4304); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_92.add(string_literal846);

            TOKEN847=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbadd4306_static.FOLLOW_TOKEN_in_vbadd4306); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN847);



            // AST REWRITE
            // elements: 92, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 510:22: -> ^( 'VB-ADD' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:510:25: ^( 'VB-ADD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_92.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 186, vbadd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbadd"

    public static class vbcharge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcharge"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:511:1: vbcharge : 'VB-CHARGE' TOKEN -> ^( 'VB-CHARGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbcharge_return vbcharge() throws RecognitionException {
        ChemicalChunkerParser.vbcharge_return retval = new ChemicalChunkerParser.vbcharge_return();
        retval.start = input.LT(1);
        int vbcharge_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal848=null;
        Token TOKEN849=null;

        Object string_literal848_tree=null;
        Object TOKEN849_tree=null;
        RewriteRuleTokenStream stream_93=new RewriteRuleTokenStream(adaptor,"token 93");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 187) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:511:9: ( 'VB-CHARGE' TOKEN -> ^( 'VB-CHARGE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:511:10: 'VB-CHARGE' TOKEN
            {
            string_literal848=(Token)match(input,93,FOLLOW_93_in_vbcharge4319_static.FOLLOW_93_in_vbcharge4319); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_93.add(string_literal848);

            TOKEN849=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcharge4321_static.FOLLOW_TOKEN_in_vbcharge4321); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN849);



            // AST REWRITE
            // elements: 93, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 511:28: -> ^( 'VB-CHARGE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:511:31: ^( 'VB-CHARGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_93.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 187, vbcharge_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcharge"

    public static class vbcontain_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcontain"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:512:1: vbcontain : 'VB-CONTAIN' TOKEN -> ^( 'VB-CONTAIN' TOKEN ) ;
    public final ChemicalChunkerParser.vbcontain_return vbcontain() throws RecognitionException {
        ChemicalChunkerParser.vbcontain_return retval = new ChemicalChunkerParser.vbcontain_return();
        retval.start = input.LT(1);
        int vbcontain_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal850=null;
        Token TOKEN851=null;

        Object string_literal850_tree=null;
        Object TOKEN851_tree=null;
        RewriteRuleTokenStream stream_94=new RewriteRuleTokenStream(adaptor,"token 94");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 188) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:512:10: ( 'VB-CONTAIN' TOKEN -> ^( 'VB-CONTAIN' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:512:11: 'VB-CONTAIN' TOKEN
            {
            string_literal850=(Token)match(input,94,FOLLOW_94_in_vbcontain4334_static.FOLLOW_94_in_vbcontain4334); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_94.add(string_literal850);

            TOKEN851=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcontain4336_static.FOLLOW_TOKEN_in_vbcontain4336); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN851);



            // AST REWRITE
            // elements: 94, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 512:30: -> ^( 'VB-CONTAIN' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:512:33: ^( 'VB-CONTAIN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_94.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 188, vbcontain_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcontain"

    public static class vbdrop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdrop"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:513:1: vbdrop : 'VB-DROP' TOKEN -> ^( 'VB-DROP' TOKEN ) ;
    public final ChemicalChunkerParser.vbdrop_return vbdrop() throws RecognitionException {
        ChemicalChunkerParser.vbdrop_return retval = new ChemicalChunkerParser.vbdrop_return();
        retval.start = input.LT(1);
        int vbdrop_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal852=null;
        Token TOKEN853=null;

        Object string_literal852_tree=null;
        Object TOKEN853_tree=null;
        RewriteRuleTokenStream stream_95=new RewriteRuleTokenStream(adaptor,"token 95");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 189) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:513:7: ( 'VB-DROP' TOKEN -> ^( 'VB-DROP' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:513:8: 'VB-DROP' TOKEN
            {
            string_literal852=(Token)match(input,95,FOLLOW_95_in_vbdrop4349_static.FOLLOW_95_in_vbdrop4349); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_95.add(string_literal852);

            TOKEN853=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdrop4351_static.FOLLOW_TOKEN_in_vbdrop4351); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN853);



            // AST REWRITE
            // elements: TOKEN, 95
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 513:24: -> ^( 'VB-DROP' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:513:27: ^( 'VB-DROP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_95.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 189, vbdrop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdrop"

    public static class vbfill_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfill"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:514:1: vbfill : 'VB-FILL' TOKEN -> ^( 'VB-FILL' TOKEN ) ;
    public final ChemicalChunkerParser.vbfill_return vbfill() throws RecognitionException {
        ChemicalChunkerParser.vbfill_return retval = new ChemicalChunkerParser.vbfill_return();
        retval.start = input.LT(1);
        int vbfill_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal854=null;
        Token TOKEN855=null;

        Object string_literal854_tree=null;
        Object TOKEN855_tree=null;
        RewriteRuleTokenStream stream_96=new RewriteRuleTokenStream(adaptor,"token 96");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 190) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:514:7: ( 'VB-FILL' TOKEN -> ^( 'VB-FILL' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:514:8: 'VB-FILL' TOKEN
            {
            string_literal854=(Token)match(input,96,FOLLOW_96_in_vbfill4364_static.FOLLOW_96_in_vbfill4364); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_96.add(string_literal854);

            TOKEN855=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfill4366_static.FOLLOW_TOKEN_in_vbfill4366); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN855);



            // AST REWRITE
            // elements: 96, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 514:24: -> ^( 'VB-FILL' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:514:27: ^( 'VB-FILL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_96.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 190, vbfill_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbfill"

    public static class vbsuspend_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsuspend"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:515:1: vbsuspend : 'VB-SUSPEND' TOKEN -> ^( 'VB-SUSPEND' TOKEN ) ;
    public final ChemicalChunkerParser.vbsuspend_return vbsuspend() throws RecognitionException {
        ChemicalChunkerParser.vbsuspend_return retval = new ChemicalChunkerParser.vbsuspend_return();
        retval.start = input.LT(1);
        int vbsuspend_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal856=null;
        Token TOKEN857=null;

        Object string_literal856_tree=null;
        Object TOKEN857_tree=null;
        RewriteRuleTokenStream stream_97=new RewriteRuleTokenStream(adaptor,"token 97");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 191) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:515:10: ( 'VB-SUSPEND' TOKEN -> ^( 'VB-SUSPEND' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:515:11: 'VB-SUSPEND' TOKEN
            {
            string_literal856=(Token)match(input,97,FOLLOW_97_in_vbsuspend4379_static.FOLLOW_97_in_vbsuspend4379); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_97.add(string_literal856);

            TOKEN857=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsuspend4381_static.FOLLOW_TOKEN_in_vbsuspend4381); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN857);



            // AST REWRITE
            // elements: TOKEN, 97
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 515:30: -> ^( 'VB-SUSPEND' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:515:33: ^( 'VB-SUSPEND' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_97.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 191, vbsuspend_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsuspend"

    public static class vbtreat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbtreat"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:516:1: vbtreat : 'VB-TREAT' TOKEN -> ^( 'VB-TREAT' TOKEN ) ;
    public final ChemicalChunkerParser.vbtreat_return vbtreat() throws RecognitionException {
        ChemicalChunkerParser.vbtreat_return retval = new ChemicalChunkerParser.vbtreat_return();
        retval.start = input.LT(1);
        int vbtreat_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal858=null;
        Token TOKEN859=null;

        Object string_literal858_tree=null;
        Object TOKEN859_tree=null;
        RewriteRuleTokenStream stream_98=new RewriteRuleTokenStream(adaptor,"token 98");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 192) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:516:8: ( 'VB-TREAT' TOKEN -> ^( 'VB-TREAT' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:516:9: 'VB-TREAT' TOKEN
            {
            string_literal858=(Token)match(input,98,FOLLOW_98_in_vbtreat4394_static.FOLLOW_98_in_vbtreat4394); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_98.add(string_literal858);

            TOKEN859=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbtreat4396_static.FOLLOW_TOKEN_in_vbtreat4396); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN859);



            // AST REWRITE
            // elements: TOKEN, 98
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 516:26: -> ^( 'VB-TREAT' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:516:29: ^( 'VB-TREAT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_98.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 192, vbtreat_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbtreat"

    public static class vbapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbapparatus"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:519:1: vbapparatus : 'VB-APPARATUS' TOKEN -> ^( 'VB-APPARATUS' TOKEN ) ;
    public final ChemicalChunkerParser.vbapparatus_return vbapparatus() throws RecognitionException {
        ChemicalChunkerParser.vbapparatus_return retval = new ChemicalChunkerParser.vbapparatus_return();
        retval.start = input.LT(1);
        int vbapparatus_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal860=null;
        Token TOKEN861=null;

        Object string_literal860_tree=null;
        Object TOKEN861_tree=null;
        RewriteRuleTokenStream stream_99=new RewriteRuleTokenStream(adaptor,"token 99");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 193) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:519:12: ( 'VB-APPARATUS' TOKEN -> ^( 'VB-APPARATUS' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:519:13: 'VB-APPARATUS' TOKEN
            {
            string_literal860=(Token)match(input,99,FOLLOW_99_in_vbapparatus4411_static.FOLLOW_99_in_vbapparatus4411); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_99.add(string_literal860);

            TOKEN861=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbapparatus4413_static.FOLLOW_TOKEN_in_vbapparatus4413); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN861);



            // AST REWRITE
            // elements: 99, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 519:34: -> ^( 'VB-APPARATUS' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:519:37: ^( 'VB-APPARATUS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_99.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 193, vbapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbapparatus"

    public static class nnapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnapparatus"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:520:1: nnapparatus : 'NN-APPARATUS' TOKEN -> ^( 'NN-APPARATUS' TOKEN ) ;
    public final ChemicalChunkerParser.nnapparatus_return nnapparatus() throws RecognitionException {
        ChemicalChunkerParser.nnapparatus_return retval = new ChemicalChunkerParser.nnapparatus_return();
        retval.start = input.LT(1);
        int nnapparatus_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal862=null;
        Token TOKEN863=null;

        Object string_literal862_tree=null;
        Object TOKEN863_tree=null;
        RewriteRuleTokenStream stream_100=new RewriteRuleTokenStream(adaptor,"token 100");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 194) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:520:12: ( 'NN-APPARATUS' TOKEN -> ^( 'NN-APPARATUS' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:520:13: 'NN-APPARATUS' TOKEN
            {
            string_literal862=(Token)match(input,100,FOLLOW_100_in_nnapparatus4426_static.FOLLOW_100_in_nnapparatus4426); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_100.add(string_literal862);

            TOKEN863=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnapparatus4428_static.FOLLOW_TOKEN_in_nnapparatus4428); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN863);



            // AST REWRITE
            // elements: TOKEN, 100
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 520:34: -> ^( 'NN-APPARATUS' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:520:37: ^( 'NN-APPARATUS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_100.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 194, nnapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnapparatus"

    public static class vbconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbconcentrate"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:523:1: vbconcentrate : 'VB-CONCENTRATE' TOKEN -> ^( 'VB-CONCENTRATE' TOKEN ) ;
    public final ChemicalChunkerParser.vbconcentrate_return vbconcentrate() throws RecognitionException {
        ChemicalChunkerParser.vbconcentrate_return retval = new ChemicalChunkerParser.vbconcentrate_return();
        retval.start = input.LT(1);
        int vbconcentrate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal864=null;
        Token TOKEN865=null;

        Object string_literal864_tree=null;
        Object TOKEN865_tree=null;
        RewriteRuleTokenStream stream_101=new RewriteRuleTokenStream(adaptor,"token 101");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 195) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:523:14: ( 'VB-CONCENTRATE' TOKEN -> ^( 'VB-CONCENTRATE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:523:15: 'VB-CONCENTRATE' TOKEN
            {
            string_literal864=(Token)match(input,101,FOLLOW_101_in_vbconcentrate4443_static.FOLLOW_101_in_vbconcentrate4443); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_101.add(string_literal864);

            TOKEN865=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbconcentrate4445_static.FOLLOW_TOKEN_in_vbconcentrate4445); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN865);



            // AST REWRITE
            // elements: 101, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 523:38: -> ^( 'VB-CONCENTRATE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:523:41: ^( 'VB-CONCENTRATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_101.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 195, vbconcentrate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbconcentrate"

    public static class nnconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnconcentrate"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:524:1: nnconcentrate : 'NN-CONCENTRATE' TOKEN -> ^( 'NN-CONCENTRATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnconcentrate_return nnconcentrate() throws RecognitionException {
        ChemicalChunkerParser.nnconcentrate_return retval = new ChemicalChunkerParser.nnconcentrate_return();
        retval.start = input.LT(1);
        int nnconcentrate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal866=null;
        Token TOKEN867=null;

        Object string_literal866_tree=null;
        Object TOKEN867_tree=null;
        RewriteRuleTokenStream stream_102=new RewriteRuleTokenStream(adaptor,"token 102");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 196) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:524:14: ( 'NN-CONCENTRATE' TOKEN -> ^( 'NN-CONCENTRATE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:524:15: 'NN-CONCENTRATE' TOKEN
            {
            string_literal866=(Token)match(input,102,FOLLOW_102_in_nnconcentrate4458_static.FOLLOW_102_in_nnconcentrate4458); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_102.add(string_literal866);

            TOKEN867=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnconcentrate4460_static.FOLLOW_TOKEN_in_nnconcentrate4460); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN867);



            // AST REWRITE
            // elements: TOKEN, 102
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 524:38: -> ^( 'NN-CONCENTRATE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:524:41: ^( 'NN-CONCENTRATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_102.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 196, nnconcentrate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnconcentrate"

    public static class vbcool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcool"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:527:1: vbcool : 'VB-COOL' TOKEN -> ^( 'VB-COOL' TOKEN ) ;
    public final ChemicalChunkerParser.vbcool_return vbcool() throws RecognitionException {
        ChemicalChunkerParser.vbcool_return retval = new ChemicalChunkerParser.vbcool_return();
        retval.start = input.LT(1);
        int vbcool_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal868=null;
        Token TOKEN869=null;

        Object string_literal868_tree=null;
        Object TOKEN869_tree=null;
        RewriteRuleTokenStream stream_103=new RewriteRuleTokenStream(adaptor,"token 103");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 197) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:527:7: ( 'VB-COOL' TOKEN -> ^( 'VB-COOL' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:527:8: 'VB-COOL' TOKEN
            {
            string_literal868=(Token)match(input,103,FOLLOW_103_in_vbcool4475_static.FOLLOW_103_in_vbcool4475); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_103.add(string_literal868);

            TOKEN869=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcool4477_static.FOLLOW_TOKEN_in_vbcool4477); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN869);



            // AST REWRITE
            // elements: 103, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 527:24: -> ^( 'VB-COOL' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:527:27: ^( 'VB-COOL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_103.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 197, vbcool_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcool"

    public static class vbdegass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdegass"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:530:1: vbdegass : 'VB-DEGASS' TOKEN -> ^( 'VB-DEGASS' TOKEN ) ;
    public final ChemicalChunkerParser.vbdegass_return vbdegass() throws RecognitionException {
        ChemicalChunkerParser.vbdegass_return retval = new ChemicalChunkerParser.vbdegass_return();
        retval.start = input.LT(1);
        int vbdegass_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal870=null;
        Token TOKEN871=null;

        Object string_literal870_tree=null;
        Object TOKEN871_tree=null;
        RewriteRuleTokenStream stream_104=new RewriteRuleTokenStream(adaptor,"token 104");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 198) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:530:9: ( 'VB-DEGASS' TOKEN -> ^( 'VB-DEGASS' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:530:10: 'VB-DEGASS' TOKEN
            {
            string_literal870=(Token)match(input,104,FOLLOW_104_in_vbdegass4492_static.FOLLOW_104_in_vbdegass4492); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_104.add(string_literal870);

            TOKEN871=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdegass4494_static.FOLLOW_TOKEN_in_vbdegass4494); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN871);



            // AST REWRITE
            // elements: 104, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 530:28: -> ^( 'VB-DEGASS' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:530:31: ^( 'VB-DEGASS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_104.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 198, vbdegass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdegass"

    public static class vbdissolve_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdissolve"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:533:1: vbdissolve : 'VB-DISSOLVE' TOKEN -> ^( 'VB-DISSOLVE' TOKEN ) ;
    public final ChemicalChunkerParser.vbdissolve_return vbdissolve() throws RecognitionException {
        ChemicalChunkerParser.vbdissolve_return retval = new ChemicalChunkerParser.vbdissolve_return();
        retval.start = input.LT(1);
        int vbdissolve_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal872=null;
        Token TOKEN873=null;

        Object string_literal872_tree=null;
        Object TOKEN873_tree=null;
        RewriteRuleTokenStream stream_105=new RewriteRuleTokenStream(adaptor,"token 105");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 199) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:533:11: ( 'VB-DISSOLVE' TOKEN -> ^( 'VB-DISSOLVE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:533:12: 'VB-DISSOLVE' TOKEN
            {
            string_literal872=(Token)match(input,105,FOLLOW_105_in_vbdissolve4509_static.FOLLOW_105_in_vbdissolve4509); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_105.add(string_literal872);

            TOKEN873=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdissolve4511_static.FOLLOW_TOKEN_in_vbdissolve4511); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN873);



            // AST REWRITE
            // elements: TOKEN, 105
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 533:32: -> ^( 'VB-DISSOLVE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:533:35: ^( 'VB-DISSOLVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_105.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 199, vbdissolve_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdissolve"

    public static class vbdry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdry"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:536:1: vbdry : 'VB-DRY' TOKEN -> ^( 'VB-DRY' TOKEN ) ;
    public final ChemicalChunkerParser.vbdry_return vbdry() throws RecognitionException {
        ChemicalChunkerParser.vbdry_return retval = new ChemicalChunkerParser.vbdry_return();
        retval.start = input.LT(1);
        int vbdry_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal874=null;
        Token TOKEN875=null;

        Object string_literal874_tree=null;
        Object TOKEN875_tree=null;
        RewriteRuleTokenStream stream_106=new RewriteRuleTokenStream(adaptor,"token 106");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 200) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:536:6: ( 'VB-DRY' TOKEN -> ^( 'VB-DRY' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:536:7: 'VB-DRY' TOKEN
            {
            string_literal874=(Token)match(input,106,FOLLOW_106_in_vbdry4526_static.FOLLOW_106_in_vbdry4526); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_106.add(string_literal874);

            TOKEN875=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdry4528_static.FOLLOW_TOKEN_in_vbdry4528); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN875);



            // AST REWRITE
            // elements: 106, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 536:22: -> ^( 'VB-DRY' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:536:25: ^( 'VB-DRY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_106.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 200, vbdry_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdry"

    public static class nndry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nndry"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:537:1: nndry : 'NN-DRY' TOKEN -> ^( 'NN-DRY' TOKEN ) ;
    public final ChemicalChunkerParser.nndry_return nndry() throws RecognitionException {
        ChemicalChunkerParser.nndry_return retval = new ChemicalChunkerParser.nndry_return();
        retval.start = input.LT(1);
        int nndry_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal876=null;
        Token TOKEN877=null;

        Object string_literal876_tree=null;
        Object TOKEN877_tree=null;
        RewriteRuleTokenStream stream_107=new RewriteRuleTokenStream(adaptor,"token 107");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 201) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:537:6: ( 'NN-DRY' TOKEN -> ^( 'NN-DRY' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:537:7: 'NN-DRY' TOKEN
            {
            string_literal876=(Token)match(input,107,FOLLOW_107_in_nndry4541_static.FOLLOW_107_in_nndry4541); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_107.add(string_literal876);

            TOKEN877=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nndry4543_static.FOLLOW_TOKEN_in_nndry4543); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN877);



            // AST REWRITE
            // elements: TOKEN, 107
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 537:22: -> ^( 'NN-DRY' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:537:25: ^( 'NN-DRY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_107.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 201, nndry_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nndry"

    public static class vbextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbextract"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:540:1: vbextract : 'VB-EXTRACT' TOKEN -> ^( 'VB-EXTRACT' TOKEN ) ;
    public final ChemicalChunkerParser.vbextract_return vbextract() throws RecognitionException {
        ChemicalChunkerParser.vbextract_return retval = new ChemicalChunkerParser.vbextract_return();
        retval.start = input.LT(1);
        int vbextract_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal878=null;
        Token TOKEN879=null;

        Object string_literal878_tree=null;
        Object TOKEN879_tree=null;
        RewriteRuleTokenStream stream_108=new RewriteRuleTokenStream(adaptor,"token 108");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 202) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:540:10: ( 'VB-EXTRACT' TOKEN -> ^( 'VB-EXTRACT' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:540:11: 'VB-EXTRACT' TOKEN
            {
            string_literal878=(Token)match(input,108,FOLLOW_108_in_vbextract4558_static.FOLLOW_108_in_vbextract4558); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_108.add(string_literal878);

            TOKEN879=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbextract4560_static.FOLLOW_TOKEN_in_vbextract4560); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN879);



            // AST REWRITE
            // elements: TOKEN, 108
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 540:30: -> ^( 'VB-EXTRACT' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:540:33: ^( 'VB-EXTRACT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_108.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 202, vbextract_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbextract"

    public static class nnextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnextract"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:541:1: nnextract : 'NN-EXTRACT' TOKEN -> ^( 'NN-EXTRACT' TOKEN ) ;
    public final ChemicalChunkerParser.nnextract_return nnextract() throws RecognitionException {
        ChemicalChunkerParser.nnextract_return retval = new ChemicalChunkerParser.nnextract_return();
        retval.start = input.LT(1);
        int nnextract_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal880=null;
        Token TOKEN881=null;

        Object string_literal880_tree=null;
        Object TOKEN881_tree=null;
        RewriteRuleTokenStream stream_109=new RewriteRuleTokenStream(adaptor,"token 109");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 203) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:541:10: ( 'NN-EXTRACT' TOKEN -> ^( 'NN-EXTRACT' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:541:11: 'NN-EXTRACT' TOKEN
            {
            string_literal880=(Token)match(input,109,FOLLOW_109_in_nnextract4573_static.FOLLOW_109_in_nnextract4573); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_109.add(string_literal880);

            TOKEN881=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnextract4575_static.FOLLOW_TOKEN_in_nnextract4575); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN881);



            // AST REWRITE
            // elements: 109, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 541:30: -> ^( 'NN-EXTRACT' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:541:33: ^( 'NN-EXTRACT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_109.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 203, nnextract_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnextract"

    public static class vbfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfilter"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:544:1: vbfilter : 'VB-FILTER' TOKEN -> ^( 'VB-FILTER' TOKEN ) ;
    public final ChemicalChunkerParser.vbfilter_return vbfilter() throws RecognitionException {
        ChemicalChunkerParser.vbfilter_return retval = new ChemicalChunkerParser.vbfilter_return();
        retval.start = input.LT(1);
        int vbfilter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal882=null;
        Token TOKEN883=null;

        Object string_literal882_tree=null;
        Object TOKEN883_tree=null;
        RewriteRuleTokenStream stream_110=new RewriteRuleTokenStream(adaptor,"token 110");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 204) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:544:9: ( 'VB-FILTER' TOKEN -> ^( 'VB-FILTER' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:544:10: 'VB-FILTER' TOKEN
            {
            string_literal882=(Token)match(input,110,FOLLOW_110_in_vbfilter4590_static.FOLLOW_110_in_vbfilter4590); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_110.add(string_literal882);

            TOKEN883=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfilter4592_static.FOLLOW_TOKEN_in_vbfilter4592); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN883);



            // AST REWRITE
            // elements: TOKEN, 110
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 544:28: -> ^( 'VB-FILTER' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:544:31: ^( 'VB-FILTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_110.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 204, vbfilter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbfilter"

    public static class nnfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnfilter"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:545:1: nnfilter : 'NN-FILTER' TOKEN -> ^( 'NN-FILTER' TOKEN ) ;
    public final ChemicalChunkerParser.nnfilter_return nnfilter() throws RecognitionException {
        ChemicalChunkerParser.nnfilter_return retval = new ChemicalChunkerParser.nnfilter_return();
        retval.start = input.LT(1);
        int nnfilter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal884=null;
        Token TOKEN885=null;

        Object string_literal884_tree=null;
        Object TOKEN885_tree=null;
        RewriteRuleTokenStream stream_111=new RewriteRuleTokenStream(adaptor,"token 111");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 205) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:545:9: ( 'NN-FILTER' TOKEN -> ^( 'NN-FILTER' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:545:10: 'NN-FILTER' TOKEN
            {
            string_literal884=(Token)match(input,111,FOLLOW_111_in_nnfilter4605_static.FOLLOW_111_in_nnfilter4605); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_111.add(string_literal884);

            TOKEN885=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnfilter4607_static.FOLLOW_TOKEN_in_nnfilter4607); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN885);



            // AST REWRITE
            // elements: TOKEN, 111
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 545:28: -> ^( 'NN-FILTER' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:545:31: ^( 'NN-FILTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_111.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 205, nnfilter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnfilter"

    public static class vbheat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbheat"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:548:1: vbheat : 'VB-HEAT' TOKEN -> ^( 'VB-HEAT' TOKEN ) ;
    public final ChemicalChunkerParser.vbheat_return vbheat() throws RecognitionException {
        ChemicalChunkerParser.vbheat_return retval = new ChemicalChunkerParser.vbheat_return();
        retval.start = input.LT(1);
        int vbheat_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal886=null;
        Token TOKEN887=null;

        Object string_literal886_tree=null;
        Object TOKEN887_tree=null;
        RewriteRuleTokenStream stream_112=new RewriteRuleTokenStream(adaptor,"token 112");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 206) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:548:7: ( 'VB-HEAT' TOKEN -> ^( 'VB-HEAT' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:548:8: 'VB-HEAT' TOKEN
            {
            string_literal886=(Token)match(input,112,FOLLOW_112_in_vbheat4622_static.FOLLOW_112_in_vbheat4622); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_112.add(string_literal886);

            TOKEN887=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbheat4624_static.FOLLOW_TOKEN_in_vbheat4624); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN887);



            // AST REWRITE
            // elements: TOKEN, 112
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 548:24: -> ^( 'VB-HEAT' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:548:27: ^( 'VB-HEAT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_112.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 206, vbheat_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbheat"

    public static class vbincrease_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbincrease"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:549:1: vbincrease : 'VB-INCREASE' TOKEN -> ^( 'VB-INCREASE' TOKEN ) ;
    public final ChemicalChunkerParser.vbincrease_return vbincrease() throws RecognitionException {
        ChemicalChunkerParser.vbincrease_return retval = new ChemicalChunkerParser.vbincrease_return();
        retval.start = input.LT(1);
        int vbincrease_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal888=null;
        Token TOKEN889=null;

        Object string_literal888_tree=null;
        Object TOKEN889_tree=null;
        RewriteRuleTokenStream stream_113=new RewriteRuleTokenStream(adaptor,"token 113");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 207) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:549:11: ( 'VB-INCREASE' TOKEN -> ^( 'VB-INCREASE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:549:12: 'VB-INCREASE' TOKEN
            {
            string_literal888=(Token)match(input,113,FOLLOW_113_in_vbincrease4637_static.FOLLOW_113_in_vbincrease4637); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_113.add(string_literal888);

            TOKEN889=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbincrease4639_static.FOLLOW_TOKEN_in_vbincrease4639); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN889);



            // AST REWRITE
            // elements: TOKEN, 113
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 549:32: -> ^( 'VB-INCREASE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:549:35: ^( 'VB-INCREASE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_113.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 207, vbincrease_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbincrease"

    public static class vbimmerse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbimmerse"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:552:1: vbimmerse : 'VB-IMMERSE' TOKEN -> ^( 'VB-IMMERSE' TOKEN ) ;
    public final ChemicalChunkerParser.vbimmerse_return vbimmerse() throws RecognitionException {
        ChemicalChunkerParser.vbimmerse_return retval = new ChemicalChunkerParser.vbimmerse_return();
        retval.start = input.LT(1);
        int vbimmerse_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal890=null;
        Token TOKEN891=null;

        Object string_literal890_tree=null;
        Object TOKEN891_tree=null;
        RewriteRuleTokenStream stream_114=new RewriteRuleTokenStream(adaptor,"token 114");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 208) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:552:10: ( 'VB-IMMERSE' TOKEN -> ^( 'VB-IMMERSE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:552:11: 'VB-IMMERSE' TOKEN
            {
            string_literal890=(Token)match(input,114,FOLLOW_114_in_vbimmerse4654_static.FOLLOW_114_in_vbimmerse4654); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_114.add(string_literal890);

            TOKEN891=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbimmerse4656_static.FOLLOW_TOKEN_in_vbimmerse4656); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN891);



            // AST REWRITE
            // elements: 114, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 552:30: -> ^( 'VB-IMMERSE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:552:33: ^( 'VB-IMMERSE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_114.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 208, vbimmerse_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbimmerse"

    public static class vbpartition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpartition"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:555:1: vbpartition : 'VB-PARTITION' TOKEN -> ^( 'VB-PARTITION' TOKEN ) ;
    public final ChemicalChunkerParser.vbpartition_return vbpartition() throws RecognitionException {
        ChemicalChunkerParser.vbpartition_return retval = new ChemicalChunkerParser.vbpartition_return();
        retval.start = input.LT(1);
        int vbpartition_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal892=null;
        Token TOKEN893=null;

        Object string_literal892_tree=null;
        Object TOKEN893_tree=null;
        RewriteRuleTokenStream stream_115=new RewriteRuleTokenStream(adaptor,"token 115");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 209) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:555:12: ( 'VB-PARTITION' TOKEN -> ^( 'VB-PARTITION' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:555:13: 'VB-PARTITION' TOKEN
            {
            string_literal892=(Token)match(input,115,FOLLOW_115_in_vbpartition4671_static.FOLLOW_115_in_vbpartition4671); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_115.add(string_literal892);

            TOKEN893=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpartition4673_static.FOLLOW_TOKEN_in_vbpartition4673); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN893);



            // AST REWRITE
            // elements: 115, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 555:34: -> ^( 'VB-PARTITION' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:555:37: ^( 'VB-PARTITION' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_115.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 209, vbpartition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbpartition"

    public static class vbprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbprecipitate"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:558:1: vbprecipitate : 'VB-PRECIPITATE' TOKEN -> ^( 'VB-PRECIPITATE' TOKEN ) ;
    public final ChemicalChunkerParser.vbprecipitate_return vbprecipitate() throws RecognitionException {
        ChemicalChunkerParser.vbprecipitate_return retval = new ChemicalChunkerParser.vbprecipitate_return();
        retval.start = input.LT(1);
        int vbprecipitate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal894=null;
        Token TOKEN895=null;

        Object string_literal894_tree=null;
        Object TOKEN895_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 210) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:558:14: ( 'VB-PRECIPITATE' TOKEN -> ^( 'VB-PRECIPITATE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:558:15: 'VB-PRECIPITATE' TOKEN
            {
            string_literal894=(Token)match(input,116,FOLLOW_116_in_vbprecipitate4688_static.FOLLOW_116_in_vbprecipitate4688); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(string_literal894);

            TOKEN895=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbprecipitate4690_static.FOLLOW_TOKEN_in_vbprecipitate4690); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN895);



            // AST REWRITE
            // elements: TOKEN, 116
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 558:38: -> ^( 'VB-PRECIPITATE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:558:41: ^( 'VB-PRECIPITATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_116.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 210, vbprecipitate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbprecipitate"

    public static class nnprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnprecipitate"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:559:1: nnprecipitate : 'NN-PRECIPITATE' TOKEN -> ^( 'NN-PRECIPITATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnprecipitate_return nnprecipitate() throws RecognitionException {
        ChemicalChunkerParser.nnprecipitate_return retval = new ChemicalChunkerParser.nnprecipitate_return();
        retval.start = input.LT(1);
        int nnprecipitate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal896=null;
        Token TOKEN897=null;

        Object string_literal896_tree=null;
        Object TOKEN897_tree=null;
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 211) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:559:14: ( 'NN-PRECIPITATE' TOKEN -> ^( 'NN-PRECIPITATE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:559:15: 'NN-PRECIPITATE' TOKEN
            {
            string_literal896=(Token)match(input,117,FOLLOW_117_in_nnprecipitate4703_static.FOLLOW_117_in_nnprecipitate4703); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(string_literal896);

            TOKEN897=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnprecipitate4705_static.FOLLOW_TOKEN_in_nnprecipitate4705); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN897);



            // AST REWRITE
            // elements: TOKEN, 117
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 559:38: -> ^( 'NN-PRECIPITATE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:559:41: ^( 'NN-PRECIPITATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_117.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 211, nnprecipitate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnprecipitate"

    public static class vbpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpurify"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:562:1: vbpurify : 'VB-PURIFY' TOKEN -> ^( 'VB-PURIFY' TOKEN ) ;
    public final ChemicalChunkerParser.vbpurify_return vbpurify() throws RecognitionException {
        ChemicalChunkerParser.vbpurify_return retval = new ChemicalChunkerParser.vbpurify_return();
        retval.start = input.LT(1);
        int vbpurify_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal898=null;
        Token TOKEN899=null;

        Object string_literal898_tree=null;
        Object TOKEN899_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 212) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:562:9: ( 'VB-PURIFY' TOKEN -> ^( 'VB-PURIFY' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:562:10: 'VB-PURIFY' TOKEN
            {
            string_literal898=(Token)match(input,118,FOLLOW_118_in_vbpurify4720_static.FOLLOW_118_in_vbpurify4720); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(string_literal898);

            TOKEN899=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpurify4722_static.FOLLOW_TOKEN_in_vbpurify4722); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN899);



            // AST REWRITE
            // elements: 118, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 562:28: -> ^( 'VB-PURIFY' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:562:31: ^( 'VB-PURIFY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_118.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 212, vbpurify_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbpurify"

    public static class nnpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpurify"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:563:1: nnpurify : 'NN-PURIFY' TOKEN -> ^( 'NN-PURIFY' TOKEN ) ;
    public final ChemicalChunkerParser.nnpurify_return nnpurify() throws RecognitionException {
        ChemicalChunkerParser.nnpurify_return retval = new ChemicalChunkerParser.nnpurify_return();
        retval.start = input.LT(1);
        int nnpurify_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal900=null;
        Token TOKEN901=null;

        Object string_literal900_tree=null;
        Object TOKEN901_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 213) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:563:9: ( 'NN-PURIFY' TOKEN -> ^( 'NN-PURIFY' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:563:10: 'NN-PURIFY' TOKEN
            {
            string_literal900=(Token)match(input,119,FOLLOW_119_in_nnpurify4735_static.FOLLOW_119_in_nnpurify4735); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(string_literal900);

            TOKEN901=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpurify4737_static.FOLLOW_TOKEN_in_nnpurify4737); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN901);



            // AST REWRITE
            // elements: 119, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 563:28: -> ^( 'NN-PURIFY' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:563:31: ^( 'NN-PURIFY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_119.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 213, nnpurify_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpurify"

    public static class vbquench_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbquench"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:566:1: vbquench : 'VB-QUENCH' TOKEN -> ^( 'VB-QUENCH' TOKEN ) ;
    public final ChemicalChunkerParser.vbquench_return vbquench() throws RecognitionException {
        ChemicalChunkerParser.vbquench_return retval = new ChemicalChunkerParser.vbquench_return();
        retval.start = input.LT(1);
        int vbquench_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal902=null;
        Token TOKEN903=null;

        Object string_literal902_tree=null;
        Object TOKEN903_tree=null;
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 214) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:566:9: ( 'VB-QUENCH' TOKEN -> ^( 'VB-QUENCH' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:566:10: 'VB-QUENCH' TOKEN
            {
            string_literal902=(Token)match(input,120,FOLLOW_120_in_vbquench4752_static.FOLLOW_120_in_vbquench4752); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(string_literal902);

            TOKEN903=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbquench4754_static.FOLLOW_TOKEN_in_vbquench4754); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN903);



            // AST REWRITE
            // elements: TOKEN, 120
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 566:28: -> ^( 'VB-QUENCH' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:566:31: ^( 'VB-QUENCH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_120.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 214, vbquench_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbquench"

    public static class vbrecover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbrecover"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:569:1: vbrecover : 'VB-RECOVER' TOKEN -> ^( 'VB-RECOVER' TOKEN ) ;
    public final ChemicalChunkerParser.vbrecover_return vbrecover() throws RecognitionException {
        ChemicalChunkerParser.vbrecover_return retval = new ChemicalChunkerParser.vbrecover_return();
        retval.start = input.LT(1);
        int vbrecover_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal904=null;
        Token TOKEN905=null;

        Object string_literal904_tree=null;
        Object TOKEN905_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 215) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:569:10: ( 'VB-RECOVER' TOKEN -> ^( 'VB-RECOVER' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:569:11: 'VB-RECOVER' TOKEN
            {
            string_literal904=(Token)match(input,121,FOLLOW_121_in_vbrecover4769_static.FOLLOW_121_in_vbrecover4769); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(string_literal904);

            TOKEN905=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbrecover4771_static.FOLLOW_TOKEN_in_vbrecover4771); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN905);



            // AST REWRITE
            // elements: TOKEN, 121
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 569:30: -> ^( 'VB-RECOVER' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:569:33: ^( 'VB-RECOVER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_121.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 215, vbrecover_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbrecover"

    public static class vbremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbremove"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:572:1: vbremove : 'VB-REMOVE' TOKEN -> ^( 'VB-REMOVE' TOKEN ) ;
    public final ChemicalChunkerParser.vbremove_return vbremove() throws RecognitionException {
        ChemicalChunkerParser.vbremove_return retval = new ChemicalChunkerParser.vbremove_return();
        retval.start = input.LT(1);
        int vbremove_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal906=null;
        Token TOKEN907=null;

        Object string_literal906_tree=null;
        Object TOKEN907_tree=null;
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 216) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:572:9: ( 'VB-REMOVE' TOKEN -> ^( 'VB-REMOVE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:572:10: 'VB-REMOVE' TOKEN
            {
            string_literal906=(Token)match(input,122,FOLLOW_122_in_vbremove4786_static.FOLLOW_122_in_vbremove4786); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_122.add(string_literal906);

            TOKEN907=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbremove4788_static.FOLLOW_TOKEN_in_vbremove4788); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN907);



            // AST REWRITE
            // elements: TOKEN, 122
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 572:28: -> ^( 'VB-REMOVE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:572:31: ^( 'VB-REMOVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_122.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 216, vbremove_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbremove"

    public static class nnremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnremove"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:573:1: nnremove : 'NN-REMOVE' TOKEN -> ^( 'NN-REMOVE' TOKEN ) ;
    public final ChemicalChunkerParser.nnremove_return nnremove() throws RecognitionException {
        ChemicalChunkerParser.nnremove_return retval = new ChemicalChunkerParser.nnremove_return();
        retval.start = input.LT(1);
        int nnremove_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal908=null;
        Token TOKEN909=null;

        Object string_literal908_tree=null;
        Object TOKEN909_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 217) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:573:9: ( 'NN-REMOVE' TOKEN -> ^( 'NN-REMOVE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:573:10: 'NN-REMOVE' TOKEN
            {
            string_literal908=(Token)match(input,123,FOLLOW_123_in_nnremove4801_static.FOLLOW_123_in_nnremove4801); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_123.add(string_literal908);

            TOKEN909=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnremove4803_static.FOLLOW_TOKEN_in_nnremove4803); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN909);



            // AST REWRITE
            // elements: TOKEN, 123
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 573:28: -> ^( 'NN-REMOVE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:573:31: ^( 'NN-REMOVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_123.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 217, nnremove_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnremove"

    public static class vbstir_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbstir"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:576:1: vbstir : 'VB-STIR' TOKEN -> ^( 'VB-STIR' TOKEN ) ;
    public final ChemicalChunkerParser.vbstir_return vbstir() throws RecognitionException {
        ChemicalChunkerParser.vbstir_return retval = new ChemicalChunkerParser.vbstir_return();
        retval.start = input.LT(1);
        int vbstir_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal910=null;
        Token TOKEN911=null;

        Object string_literal910_tree=null;
        Object TOKEN911_tree=null;
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 218) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:576:7: ( 'VB-STIR' TOKEN -> ^( 'VB-STIR' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:576:8: 'VB-STIR' TOKEN
            {
            string_literal910=(Token)match(input,124,FOLLOW_124_in_vbstir4818_static.FOLLOW_124_in_vbstir4818); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_124.add(string_literal910);

            TOKEN911=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbstir4820_static.FOLLOW_TOKEN_in_vbstir4820); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN911);



            // AST REWRITE
            // elements: TOKEN, 124
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 576:24: -> ^( 'VB-STIR' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:576:27: ^( 'VB-STIR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_124.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 218, vbstir_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbstir"

    public static class vbsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsynthesize"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:579:1: vbsynthesize : 'VB-SYNTHESIZE' TOKEN -> ^( 'VB-SYNTHESIZE' TOKEN ) ;
    public final ChemicalChunkerParser.vbsynthesize_return vbsynthesize() throws RecognitionException {
        ChemicalChunkerParser.vbsynthesize_return retval = new ChemicalChunkerParser.vbsynthesize_return();
        retval.start = input.LT(1);
        int vbsynthesize_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal912=null;
        Token TOKEN913=null;

        Object string_literal912_tree=null;
        Object TOKEN913_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 219) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:579:13: ( 'VB-SYNTHESIZE' TOKEN -> ^( 'VB-SYNTHESIZE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:579:14: 'VB-SYNTHESIZE' TOKEN
            {
            string_literal912=(Token)match(input,125,FOLLOW_125_in_vbsynthesize4835_static.FOLLOW_125_in_vbsynthesize4835); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_125.add(string_literal912);

            TOKEN913=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsynthesize4837_static.FOLLOW_TOKEN_in_vbsynthesize4837); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN913);



            // AST REWRITE
            // elements: 125, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 579:36: -> ^( 'VB-SYNTHESIZE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:579:39: ^( 'VB-SYNTHESIZE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_125.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 219, vbsynthesize_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsynthesize"

    public static class nnsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnsynthesize"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:580:1: nnsynthesize : 'NN-SYNTHESIZE' TOKEN -> ^( 'NN-SYNTHESIZE' TOKEN ) ;
    public final ChemicalChunkerParser.nnsynthesize_return nnsynthesize() throws RecognitionException {
        ChemicalChunkerParser.nnsynthesize_return retval = new ChemicalChunkerParser.nnsynthesize_return();
        retval.start = input.LT(1);
        int nnsynthesize_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal914=null;
        Token TOKEN915=null;

        Object string_literal914_tree=null;
        Object TOKEN915_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 220) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:580:13: ( 'NN-SYNTHESIZE' TOKEN -> ^( 'NN-SYNTHESIZE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:580:14: 'NN-SYNTHESIZE' TOKEN
            {
            string_literal914=(Token)match(input,126,FOLLOW_126_in_nnsynthesize4850_static.FOLLOW_126_in_nnsynthesize4850); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(string_literal914);

            TOKEN915=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnsynthesize4852_static.FOLLOW_TOKEN_in_nnsynthesize4852); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN915);



            // AST REWRITE
            // elements: 126, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 580:36: -> ^( 'NN-SYNTHESIZE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:580:39: ^( 'NN-SYNTHESIZE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_126.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 220, nnsynthesize_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnsynthesize"

    public static class vbwait_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwait"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:583:1: vbwait : 'VB-WAIT' TOKEN -> ^( 'VB-WAIT' TOKEN ) ;
    public final ChemicalChunkerParser.vbwait_return vbwait() throws RecognitionException {
        ChemicalChunkerParser.vbwait_return retval = new ChemicalChunkerParser.vbwait_return();
        retval.start = input.LT(1);
        int vbwait_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal916=null;
        Token TOKEN917=null;

        Object string_literal916_tree=null;
        Object TOKEN917_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 221) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:583:7: ( 'VB-WAIT' TOKEN -> ^( 'VB-WAIT' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:583:8: 'VB-WAIT' TOKEN
            {
            string_literal916=(Token)match(input,127,FOLLOW_127_in_vbwait4867_static.FOLLOW_127_in_vbwait4867); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(string_literal916);

            TOKEN917=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwait4869_static.FOLLOW_TOKEN_in_vbwait4869); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN917);



            // AST REWRITE
            // elements: 127, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 583:24: -> ^( 'VB-WAIT' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:583:27: ^( 'VB-WAIT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_127.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 221, vbwait_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbwait"

    public static class vbwash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwash"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:586:1: vbwash : 'VB-WASH' TOKEN -> ^( 'VB-WASH' TOKEN ) ;
    public final ChemicalChunkerParser.vbwash_return vbwash() throws RecognitionException {
        ChemicalChunkerParser.vbwash_return retval = new ChemicalChunkerParser.vbwash_return();
        retval.start = input.LT(1);
        int vbwash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal918=null;
        Token TOKEN919=null;

        Object string_literal918_tree=null;
        Object TOKEN919_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 222) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:586:7: ( 'VB-WASH' TOKEN -> ^( 'VB-WASH' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:586:8: 'VB-WASH' TOKEN
            {
            string_literal918=(Token)match(input,128,FOLLOW_128_in_vbwash4884_static.FOLLOW_128_in_vbwash4884); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(string_literal918);

            TOKEN919=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwash4886_static.FOLLOW_TOKEN_in_vbwash4886); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN919);



            // AST REWRITE
            // elements: TOKEN, 128
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 586:24: -> ^( 'VB-WASH' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:586:27: ^( 'VB-WASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_128.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 222, vbwash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbwash"

    public static class vbyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbyield"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:589:1: vbyield : 'VB-YIELD' TOKEN -> ^( 'VB-YIELD' TOKEN ) ;
    public final ChemicalChunkerParser.vbyield_return vbyield() throws RecognitionException {
        ChemicalChunkerParser.vbyield_return retval = new ChemicalChunkerParser.vbyield_return();
        retval.start = input.LT(1);
        int vbyield_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal920=null;
        Token TOKEN921=null;

        Object string_literal920_tree=null;
        Object TOKEN921_tree=null;
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 223) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:589:8: ( 'VB-YIELD' TOKEN -> ^( 'VB-YIELD' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:589:9: 'VB-YIELD' TOKEN
            {
            string_literal920=(Token)match(input,129,FOLLOW_129_in_vbyield4901_static.FOLLOW_129_in_vbyield4901); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(string_literal920);

            TOKEN921=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbyield4903_static.FOLLOW_TOKEN_in_vbyield4903); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN921);



            // AST REWRITE
            // elements: TOKEN, 129
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 589:26: -> ^( 'VB-YIELD' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:589:29: ^( 'VB-YIELD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_129.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 223, vbyield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbyield"

    public static class nnyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnyield"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:592:1: nnyield : 'NN-YIELD' TOKEN -> ^( 'NN-YIELD' TOKEN ) ;
    public final ChemicalChunkerParser.nnyield_return nnyield() throws RecognitionException {
        ChemicalChunkerParser.nnyield_return retval = new ChemicalChunkerParser.nnyield_return();
        retval.start = input.LT(1);
        int nnyield_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal922=null;
        Token TOKEN923=null;

        Object string_literal922_tree=null;
        Object TOKEN923_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 224) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:592:8: ( 'NN-YIELD' TOKEN -> ^( 'NN-YIELD' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:592:9: 'NN-YIELD' TOKEN
            {
            string_literal922=(Token)match(input,130,FOLLOW_130_in_nnyield4918_static.FOLLOW_130_in_nnyield4918); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(string_literal922);

            TOKEN923=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnyield4920_static.FOLLOW_TOKEN_in_nnyield4920); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN923);



            // AST REWRITE
            // elements: 130, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 592:26: -> ^( 'NN-YIELD' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:592:29: ^( 'NN-YIELD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_130.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 224, nnyield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnyield"

    public static class rbconj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbconj"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:596:1: rbconj : 'RB-CONJ' TOKEN -> ^( 'RB-CONJ' TOKEN ) ;
    public final ChemicalChunkerParser.rbconj_return rbconj() throws RecognitionException {
        ChemicalChunkerParser.rbconj_return retval = new ChemicalChunkerParser.rbconj_return();
        retval.start = input.LT(1);
        int rbconj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal924=null;
        Token TOKEN925=null;

        Object string_literal924_tree=null;
        Object TOKEN925_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 225) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:596:7: ( 'RB-CONJ' TOKEN -> ^( 'RB-CONJ' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:596:8: 'RB-CONJ' TOKEN
            {
            string_literal924=(Token)match(input,131,FOLLOW_131_in_rbconj4936_static.FOLLOW_131_in_rbconj4936); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(string_literal924);

            TOKEN925=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbconj4938_static.FOLLOW_TOKEN_in_rbconj4938); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN925);



            // AST REWRITE
            // elements: 131, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 596:24: -> ^( 'RB-CONJ' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:596:27: ^( 'RB-CONJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_131.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 225, rbconj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbconj"

    public static class colon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "colon"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:597:1: colon : 'COLON' TOKEN -> ^( 'COLON' TOKEN ) ;
    public final ChemicalChunkerParser.colon_return colon() throws RecognitionException {
        ChemicalChunkerParser.colon_return retval = new ChemicalChunkerParser.colon_return();
        retval.start = input.LT(1);
        int colon_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal926=null;
        Token TOKEN927=null;

        Object string_literal926_tree=null;
        Object TOKEN927_tree=null;
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 226) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:597:6: ( 'COLON' TOKEN -> ^( 'COLON' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:597:7: 'COLON' TOKEN
            {
            string_literal926=(Token)match(input,132,FOLLOW_132_in_colon4951_static.FOLLOW_132_in_colon4951); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_132.add(string_literal926);

            TOKEN927=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_colon4953_static.FOLLOW_TOKEN_in_colon4953); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN927);



            // AST REWRITE
            // elements: 132, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 597:21: -> ^( 'COLON' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:597:24: ^( 'COLON' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_132.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 226, colon_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "colon"

    public static class comma_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comma"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:598:1: comma : 'COMMA' TOKEN -> ^( 'COMMA' TOKEN ) ;
    public final ChemicalChunkerParser.comma_return comma() throws RecognitionException {
        ChemicalChunkerParser.comma_return retval = new ChemicalChunkerParser.comma_return();
        retval.start = input.LT(1);
        int comma_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal928=null;
        Token TOKEN929=null;

        Object string_literal928_tree=null;
        Object TOKEN929_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 227) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:598:6: ( 'COMMA' TOKEN -> ^( 'COMMA' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:598:7: 'COMMA' TOKEN
            {
            string_literal928=(Token)match(input,133,FOLLOW_133_in_comma4966_static.FOLLOW_133_in_comma4966); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(string_literal928);

            TOKEN929=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_comma4968_static.FOLLOW_TOKEN_in_comma4968); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN929);



            // AST REWRITE
            // elements: 133, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 598:21: -> ^( 'COMMA' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:598:24: ^( 'COMMA' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_133.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 227, comma_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "comma"

    public static class apost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apost"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:599:1: apost : 'APOST' TOKEN -> ^( 'APOST' TOKEN ) ;
    public final ChemicalChunkerParser.apost_return apost() throws RecognitionException {
        ChemicalChunkerParser.apost_return retval = new ChemicalChunkerParser.apost_return();
        retval.start = input.LT(1);
        int apost_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal930=null;
        Token TOKEN931=null;

        Object string_literal930_tree=null;
        Object TOKEN931_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 228) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:599:6: ( 'APOST' TOKEN -> ^( 'APOST' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:599:7: 'APOST' TOKEN
            {
            string_literal930=(Token)match(input,134,FOLLOW_134_in_apost4981_static.FOLLOW_134_in_apost4981); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(string_literal930);

            TOKEN931=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_apost4983_static.FOLLOW_TOKEN_in_apost4983); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN931);



            // AST REWRITE
            // elements: 134, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 599:21: -> ^( 'APOST' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:599:24: ^( 'APOST' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_134.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 228, apost_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "apost"

    public static class neg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neg"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:600:1: neg : 'NEG' TOKEN -> ^( 'NEG' TOKEN ) ;
    public final ChemicalChunkerParser.neg_return neg() throws RecognitionException {
        ChemicalChunkerParser.neg_return retval = new ChemicalChunkerParser.neg_return();
        retval.start = input.LT(1);
        int neg_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal932=null;
        Token TOKEN933=null;

        Object string_literal932_tree=null;
        Object TOKEN933_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 229) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:600:4: ( 'NEG' TOKEN -> ^( 'NEG' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:600:5: 'NEG' TOKEN
            {
            string_literal932=(Token)match(input,135,FOLLOW_135_in_neg4996_static.FOLLOW_135_in_neg4996); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(string_literal932);

            TOKEN933=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_neg4998_static.FOLLOW_TOKEN_in_neg4998); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN933);



            // AST REWRITE
            // elements: TOKEN, 135
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 600:17: -> ^( 'NEG' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:600:20: ^( 'NEG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_135.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 229, neg_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "neg"

    public static class dash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dash"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:601:1: dash : 'DASH' TOKEN -> ^( 'DASH' TOKEN ) ;
    public final ChemicalChunkerParser.dash_return dash() throws RecognitionException {
        ChemicalChunkerParser.dash_return retval = new ChemicalChunkerParser.dash_return();
        retval.start = input.LT(1);
        int dash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal934=null;
        Token TOKEN935=null;

        Object string_literal934_tree=null;
        Object TOKEN935_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 230) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:601:5: ( 'DASH' TOKEN -> ^( 'DASH' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:601:6: 'DASH' TOKEN
            {
            string_literal934=(Token)match(input,136,FOLLOW_136_in_dash5011_static.FOLLOW_136_in_dash5011); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(string_literal934);

            TOKEN935=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dash5013_static.FOLLOW_TOKEN_in_dash5013); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN935);



            // AST REWRITE
            // elements: TOKEN, 136
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 601:19: -> ^( 'DASH' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:601:22: ^( 'DASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_136.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 230, dash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dash"

    public static class stop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stop"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:602:1: stop : 'STOP' TOKEN -> ^( 'STOP' TOKEN ) ;
    public final ChemicalChunkerParser.stop_return stop() throws RecognitionException {
        ChemicalChunkerParser.stop_return retval = new ChemicalChunkerParser.stop_return();
        retval.start = input.LT(1);
        int stop_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal936=null;
        Token TOKEN937=null;

        Object string_literal936_tree=null;
        Object TOKEN937_tree=null;
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 231) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:602:5: ( 'STOP' TOKEN -> ^( 'STOP' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:602:6: 'STOP' TOKEN
            {
            string_literal936=(Token)match(input,137,FOLLOW_137_in_stop5026_static.FOLLOW_137_in_stop5026); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_137.add(string_literal936);

            TOKEN937=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_stop5028_static.FOLLOW_TOKEN_in_stop5028); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN937);



            // AST REWRITE
            // elements: TOKEN, 137
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 602:19: -> ^( 'STOP' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:602:22: ^( 'STOP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_137.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 231, stop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "stop"

    public static class percentsign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percentsign"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:603:1: percentsign : 'NN-PERCENT' TOKEN -> ^( 'NN-PERCENT' TOKEN ) ;
    public final ChemicalChunkerParser.percentsign_return percentsign() throws RecognitionException {
        ChemicalChunkerParser.percentsign_return retval = new ChemicalChunkerParser.percentsign_return();
        retval.start = input.LT(1);
        int percentsign_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal938=null;
        Token TOKEN939=null;

        Object string_literal938_tree=null;
        Object TOKEN939_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 232) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:603:12: ( 'NN-PERCENT' TOKEN -> ^( 'NN-PERCENT' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:603:13: 'NN-PERCENT' TOKEN
            {
            string_literal938=(Token)match(input,138,FOLLOW_138_in_percentsign5041_static.FOLLOW_138_in_percentsign5041); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_138.add(string_literal938);

            TOKEN939=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_percentsign5043_static.FOLLOW_TOKEN_in_percentsign5043); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN939);



            // AST REWRITE
            // elements: 138, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 603:32: -> ^( 'NN-PERCENT' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:603:35: ^( 'NN-PERCENT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_138.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 232, percentsign_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "percentsign"

    public static class lsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lsqb"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:604:1: lsqb : 'LSQB' TOKEN -> ^( 'LSQB' TOKEN ) ;
    public final ChemicalChunkerParser.lsqb_return lsqb() throws RecognitionException {
        ChemicalChunkerParser.lsqb_return retval = new ChemicalChunkerParser.lsqb_return();
        retval.start = input.LT(1);
        int lsqb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal940=null;
        Token TOKEN941=null;

        Object string_literal940_tree=null;
        Object TOKEN941_tree=null;
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 233) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:604:5: ( 'LSQB' TOKEN -> ^( 'LSQB' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:604:6: 'LSQB' TOKEN
            {
            string_literal940=(Token)match(input,139,FOLLOW_139_in_lsqb5056_static.FOLLOW_139_in_lsqb5056); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_139.add(string_literal940);

            TOKEN941=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lsqb5058_static.FOLLOW_TOKEN_in_lsqb5058); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN941);



            // AST REWRITE
            // elements: 139, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 604:19: -> ^( 'LSQB' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:604:22: ^( 'LSQB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_139.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 233, lsqb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lsqb"

    public static class rsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rsqb"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:605:1: rsqb : 'RSQB' TOKEN -> ^( 'RSQB' TOKEN ) ;
    public final ChemicalChunkerParser.rsqb_return rsqb() throws RecognitionException {
        ChemicalChunkerParser.rsqb_return retval = new ChemicalChunkerParser.rsqb_return();
        retval.start = input.LT(1);
        int rsqb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal942=null;
        Token TOKEN943=null;

        Object string_literal942_tree=null;
        Object TOKEN943_tree=null;
        RewriteRuleTokenStream stream_140=new RewriteRuleTokenStream(adaptor,"token 140");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 234) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:605:5: ( 'RSQB' TOKEN -> ^( 'RSQB' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:605:6: 'RSQB' TOKEN
            {
            string_literal942=(Token)match(input,140,FOLLOW_140_in_rsqb5071_static.FOLLOW_140_in_rsqb5071); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_140.add(string_literal942);

            TOKEN943=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rsqb5073_static.FOLLOW_TOKEN_in_rsqb5073); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN943);



            // AST REWRITE
            // elements: TOKEN, 140
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 605:19: -> ^( 'RSQB' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:605:22: ^( 'RSQB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_140.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 234, rsqb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rsqb"

    public static class nnidentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnidentifier"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:607:1: nnidentifier : 'NN-IDENTIFIER' TOKEN -> ^( 'NN-IDENTIFIER' TOKEN ) ;
    public final ChemicalChunkerParser.nnidentifier_return nnidentifier() throws RecognitionException {
        ChemicalChunkerParser.nnidentifier_return retval = new ChemicalChunkerParser.nnidentifier_return();
        retval.start = input.LT(1);
        int nnidentifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal944=null;
        Token TOKEN945=null;

        Object string_literal944_tree=null;
        Object TOKEN945_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 235) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:607:13: ( 'NN-IDENTIFIER' TOKEN -> ^( 'NN-IDENTIFIER' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:607:14: 'NN-IDENTIFIER' TOKEN
            {
            string_literal944=(Token)match(input,141,FOLLOW_141_in_nnidentifier5087_static.FOLLOW_141_in_nnidentifier5087); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_141.add(string_literal944);

            TOKEN945=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnidentifier5089_static.FOLLOW_TOKEN_in_nnidentifier5089); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN945);



            // AST REWRITE
            // elements: TOKEN, 141
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 607:36: -> ^( 'NN-IDENTIFIER' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:607:39: ^( 'NN-IDENTIFIER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_141.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 235, nnidentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnidentifier"

    public static class dtTHE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dtTHE"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:610:1: dtTHE : 'DT-THE' TOKEN -> ^( 'DT-THE' TOKEN ) ;
    public final ChemicalChunkerParser.dtTHE_return dtTHE() throws RecognitionException {
        ChemicalChunkerParser.dtTHE_return retval = new ChemicalChunkerParser.dtTHE_return();
        retval.start = input.LT(1);
        int dtTHE_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal946=null;
        Token TOKEN947=null;

        Object string_literal946_tree=null;
        Object TOKEN947_tree=null;
        RewriteRuleTokenStream stream_142=new RewriteRuleTokenStream(adaptor,"token 142");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 236) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:610:6: ( 'DT-THE' TOKEN -> ^( 'DT-THE' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:610:7: 'DT-THE' TOKEN
            {
            string_literal946=(Token)match(input,142,FOLLOW_142_in_dtTHE5104_static.FOLLOW_142_in_dtTHE5104); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_142.add(string_literal946);

            TOKEN947=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dtTHE5106_static.FOLLOW_TOKEN_in_dtTHE5106); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN947);



            // AST REWRITE
            // elements: TOKEN, 142
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 610:22: -> ^( 'DT-THE' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:610:25: ^( 'DT-THE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_142.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 236, dtTHE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dtTHE"

    public static class lrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lrb"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:612:1: lrb : '-LRB-' TOKEN -> ^( '-LRB-' TOKEN ) ;
    public final ChemicalChunkerParser.lrb_return lrb() throws RecognitionException {
        ChemicalChunkerParser.lrb_return retval = new ChemicalChunkerParser.lrb_return();
        retval.start = input.LT(1);
        int lrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal948=null;
        Token TOKEN949=null;

        Object string_literal948_tree=null;
        Object TOKEN949_tree=null;
        RewriteRuleTokenStream stream_143=new RewriteRuleTokenStream(adaptor,"token 143");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 237) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:612:4: ( '-LRB-' TOKEN -> ^( '-LRB-' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:612:5: '-LRB-' TOKEN
            {
            string_literal948=(Token)match(input,143,FOLLOW_143_in_lrb5120_static.FOLLOW_143_in_lrb5120); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_143.add(string_literal948);

            TOKEN949=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lrb5122_static.FOLLOW_TOKEN_in_lrb5122); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN949);



            // AST REWRITE
            // elements: TOKEN, 143
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 612:19: -> ^( '-LRB-' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:612:22: ^( '-LRB-' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_143.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 237, lrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lrb"

    public static class rrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rrb"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:613:1: rrb : '-RRB-' TOKEN -> ^( '-RRB-' TOKEN ) ;
    public final ChemicalChunkerParser.rrb_return rrb() throws RecognitionException {
        ChemicalChunkerParser.rrb_return retval = new ChemicalChunkerParser.rrb_return();
        retval.start = input.LT(1);
        int rrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal950=null;
        Token TOKEN951=null;

        Object string_literal950_tree=null;
        Object TOKEN951_tree=null;
        RewriteRuleTokenStream stream_144=new RewriteRuleTokenStream(adaptor,"token 144");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 238) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:613:4: ( '-RRB-' TOKEN -> ^( '-RRB-' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:613:5: '-RRB-' TOKEN
            {
            string_literal950=(Token)match(input,144,FOLLOW_144_in_rrb5135_static.FOLLOW_144_in_rrb5135); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_144.add(string_literal950);

            TOKEN951=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rrb5137_static.FOLLOW_TOKEN_in_rrb5137); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN951);



            // AST REWRITE
            // elements: TOKEN, 144
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 613:19: -> ^( '-RRB-' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:613:22: ^( '-RRB-' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_144.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 238, rrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rrb"

    public static class cc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cc"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:618:1: cc : 'CC' TOKEN -> ^( 'CC' TOKEN ) ;
    public final ChemicalChunkerParser.cc_return cc() throws RecognitionException {
        ChemicalChunkerParser.cc_return retval = new ChemicalChunkerParser.cc_return();
        retval.start = input.LT(1);
        int cc_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal952=null;
        Token TOKEN953=null;

        Object string_literal952_tree=null;
        Object TOKEN953_tree=null;
        RewriteRuleTokenStream stream_145=new RewriteRuleTokenStream(adaptor,"token 145");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 239) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:618:3: ( 'CC' TOKEN -> ^( 'CC' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:618:4: 'CC' TOKEN
            {
            string_literal952=(Token)match(input,145,FOLLOW_145_in_cc5154_static.FOLLOW_145_in_cc5154); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_145.add(string_literal952);

            TOKEN953=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cc5156_static.FOLLOW_TOKEN_in_cc5156); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN953);



            // AST REWRITE
            // elements: TOKEN, 145
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 618:15: -> ^( 'CC' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:618:18: ^( 'CC' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_145.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 239, cc_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cc"

    public static class cd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cd"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:621:1: cd : 'CD' TOKEN -> ^( 'CD' TOKEN ) ;
    public final ChemicalChunkerParser.cd_return cd() throws RecognitionException {
        ChemicalChunkerParser.cd_return retval = new ChemicalChunkerParser.cd_return();
        retval.start = input.LT(1);
        int cd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal954=null;
        Token TOKEN955=null;

        Object string_literal954_tree=null;
        Object TOKEN955_tree=null;
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 240) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:621:3: ( 'CD' TOKEN -> ^( 'CD' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:621:4: 'CD' TOKEN
            {
            string_literal954=(Token)match(input,146,FOLLOW_146_in_cd5171_static.FOLLOW_146_in_cd5171); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_146.add(string_literal954);

            TOKEN955=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cd5173_static.FOLLOW_TOKEN_in_cd5173); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN955);



            // AST REWRITE
            // elements: TOKEN, 146
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 621:15: -> ^( 'CD' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:621:18: ^( 'CD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_146.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 240, cd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cd"

    public static class dt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dt"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:624:1: dt : 'DT' TOKEN -> ^( 'DT' TOKEN ) ;
    public final ChemicalChunkerParser.dt_return dt() throws RecognitionException {
        ChemicalChunkerParser.dt_return retval = new ChemicalChunkerParser.dt_return();
        retval.start = input.LT(1);
        int dt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal956=null;
        Token TOKEN957=null;

        Object string_literal956_tree=null;
        Object TOKEN957_tree=null;
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 241) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:624:3: ( 'DT' TOKEN -> ^( 'DT' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:624:4: 'DT' TOKEN
            {
            string_literal956=(Token)match(input,147,FOLLOW_147_in_dt5188_static.FOLLOW_147_in_dt5188); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_147.add(string_literal956);

            TOKEN957=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dt5190_static.FOLLOW_TOKEN_in_dt5190); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN957);



            // AST REWRITE
            // elements: 147, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 624:15: -> ^( 'DT' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:624:18: ^( 'DT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_147.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 241, dt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dt"

    public static class ex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ex"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:627:1: ex : 'EX' TOKEN -> ^( 'EX' TOKEN ) ;
    public final ChemicalChunkerParser.ex_return ex() throws RecognitionException {
        ChemicalChunkerParser.ex_return retval = new ChemicalChunkerParser.ex_return();
        retval.start = input.LT(1);
        int ex_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal958=null;
        Token TOKEN959=null;

        Object string_literal958_tree=null;
        Object TOKEN959_tree=null;
        RewriteRuleTokenStream stream_148=new RewriteRuleTokenStream(adaptor,"token 148");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 242) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:627:3: ( 'EX' TOKEN -> ^( 'EX' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:627:4: 'EX' TOKEN
            {
            string_literal958=(Token)match(input,148,FOLLOW_148_in_ex5205_static.FOLLOW_148_in_ex5205); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_148.add(string_literal958);

            TOKEN959=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ex5207_static.FOLLOW_TOKEN_in_ex5207); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN959);



            // AST REWRITE
            // elements: TOKEN, 148
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 627:15: -> ^( 'EX' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:627:18: ^( 'EX' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_148.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 242, ex_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ex"

    public static class fw_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fw"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:630:1: fw : 'FW' TOKEN -> ^( 'FW' TOKEN ) ;
    public final ChemicalChunkerParser.fw_return fw() throws RecognitionException {
        ChemicalChunkerParser.fw_return retval = new ChemicalChunkerParser.fw_return();
        retval.start = input.LT(1);
        int fw_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal960=null;
        Token TOKEN961=null;

        Object string_literal960_tree=null;
        Object TOKEN961_tree=null;
        RewriteRuleTokenStream stream_149=new RewriteRuleTokenStream(adaptor,"token 149");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 243) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:630:3: ( 'FW' TOKEN -> ^( 'FW' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:630:4: 'FW' TOKEN
            {
            string_literal960=(Token)match(input,149,FOLLOW_149_in_fw5222_static.FOLLOW_149_in_fw5222); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_149.add(string_literal960);

            TOKEN961=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fw5224_static.FOLLOW_TOKEN_in_fw5224); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN961);



            // AST REWRITE
            // elements: TOKEN, 149
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 630:15: -> ^( 'FW' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:630:18: ^( 'FW' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_149.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 243, fw_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fw"

    public static class in_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:633:1: in : 'IN' TOKEN -> ^( 'IN' TOKEN ) ;
    public final ChemicalChunkerParser.in_return in() throws RecognitionException {
        ChemicalChunkerParser.in_return retval = new ChemicalChunkerParser.in_return();
        retval.start = input.LT(1);
        int in_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal962=null;
        Token TOKEN963=null;

        Object string_literal962_tree=null;
        Object TOKEN963_tree=null;
        RewriteRuleTokenStream stream_150=new RewriteRuleTokenStream(adaptor,"token 150");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 244) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:633:3: ( 'IN' TOKEN -> ^( 'IN' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:633:4: 'IN' TOKEN
            {
            string_literal962=(Token)match(input,150,FOLLOW_150_in_in5239_static.FOLLOW_150_in_in5239); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_150.add(string_literal962);

            TOKEN963=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_in5241_static.FOLLOW_TOKEN_in_in5241); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN963);



            // AST REWRITE
            // elements: 150, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 633:15: -> ^( 'IN' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:633:18: ^( 'IN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_150.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 244, in_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "in"

    public static class jj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jj"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:636:1: jj : 'JJ' TOKEN -> ^( 'JJ' TOKEN ) ;
    public final ChemicalChunkerParser.jj_return jj() throws RecognitionException {
        ChemicalChunkerParser.jj_return retval = new ChemicalChunkerParser.jj_return();
        retval.start = input.LT(1);
        int jj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal964=null;
        Token TOKEN965=null;

        Object string_literal964_tree=null;
        Object TOKEN965_tree=null;
        RewriteRuleTokenStream stream_151=new RewriteRuleTokenStream(adaptor,"token 151");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 245) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:636:3: ( 'JJ' TOKEN -> ^( 'JJ' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:636:4: 'JJ' TOKEN
            {
            string_literal964=(Token)match(input,151,FOLLOW_151_in_jj5256_static.FOLLOW_151_in_jj5256); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_151.add(string_literal964);

            TOKEN965=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jj5258_static.FOLLOW_TOKEN_in_jj5258); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN965);



            // AST REWRITE
            // elements: 151, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 636:15: -> ^( 'JJ' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:636:18: ^( 'JJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_151.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 245, jj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jj"

    public static class jjr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjr"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:639:1: jjr : 'JJR' TOKEN -> ^( 'JJR' TOKEN ) ;
    public final ChemicalChunkerParser.jjr_return jjr() throws RecognitionException {
        ChemicalChunkerParser.jjr_return retval = new ChemicalChunkerParser.jjr_return();
        retval.start = input.LT(1);
        int jjr_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal966=null;
        Token TOKEN967=null;

        Object string_literal966_tree=null;
        Object TOKEN967_tree=null;
        RewriteRuleTokenStream stream_152=new RewriteRuleTokenStream(adaptor,"token 152");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 246) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:639:4: ( 'JJR' TOKEN -> ^( 'JJR' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:639:5: 'JJR' TOKEN
            {
            string_literal966=(Token)match(input,152,FOLLOW_152_in_jjr5273_static.FOLLOW_152_in_jjr5273); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_152.add(string_literal966);

            TOKEN967=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjr5275_static.FOLLOW_TOKEN_in_jjr5275); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN967);



            // AST REWRITE
            // elements: TOKEN, 152
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 639:17: -> ^( 'JJR' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:639:20: ^( 'JJR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_152.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 246, jjr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjr"

    public static class jjs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjs"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:642:1: jjs : 'JJS' TOKEN -> ^( 'JJS' TOKEN ) ;
    public final ChemicalChunkerParser.jjs_return jjs() throws RecognitionException {
        ChemicalChunkerParser.jjs_return retval = new ChemicalChunkerParser.jjs_return();
        retval.start = input.LT(1);
        int jjs_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal968=null;
        Token TOKEN969=null;

        Object string_literal968_tree=null;
        Object TOKEN969_tree=null;
        RewriteRuleTokenStream stream_153=new RewriteRuleTokenStream(adaptor,"token 153");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 247) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:642:4: ( 'JJS' TOKEN -> ^( 'JJS' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:642:5: 'JJS' TOKEN
            {
            string_literal968=(Token)match(input,153,FOLLOW_153_in_jjs5290_static.FOLLOW_153_in_jjs5290); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_153.add(string_literal968);

            TOKEN969=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjs5292_static.FOLLOW_TOKEN_in_jjs5292); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN969);



            // AST REWRITE
            // elements: 153, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 642:17: -> ^( 'JJS' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:642:20: ^( 'JJS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_153.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 247, jjs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjs"

    public static class ls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ls"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:645:1: ls : 'LS' TOKEN -> ^( 'LS' TOKEN ) ;
    public final ChemicalChunkerParser.ls_return ls() throws RecognitionException {
        ChemicalChunkerParser.ls_return retval = new ChemicalChunkerParser.ls_return();
        retval.start = input.LT(1);
        int ls_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal970=null;
        Token TOKEN971=null;

        Object string_literal970_tree=null;
        Object TOKEN971_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_154=new RewriteRuleTokenStream(adaptor,"token 154");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 248) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:645:3: ( 'LS' TOKEN -> ^( 'LS' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:645:4: 'LS' TOKEN
            {
            string_literal970=(Token)match(input,154,FOLLOW_154_in_ls5307_static.FOLLOW_154_in_ls5307); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_154.add(string_literal970);

            TOKEN971=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ls5309_static.FOLLOW_TOKEN_in_ls5309); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN971);



            // AST REWRITE
            // elements: 154, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 645:15: -> ^( 'LS' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:645:18: ^( 'LS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_154.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 248, ls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ls"

    public static class md_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "md"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:648:1: md : 'MD' TOKEN -> ^( 'MD' TOKEN ) ;
    public final ChemicalChunkerParser.md_return md() throws RecognitionException {
        ChemicalChunkerParser.md_return retval = new ChemicalChunkerParser.md_return();
        retval.start = input.LT(1);
        int md_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal972=null;
        Token TOKEN973=null;

        Object string_literal972_tree=null;
        Object TOKEN973_tree=null;
        RewriteRuleTokenStream stream_155=new RewriteRuleTokenStream(adaptor,"token 155");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 249) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:648:3: ( 'MD' TOKEN -> ^( 'MD' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:648:4: 'MD' TOKEN
            {
            string_literal972=(Token)match(input,155,FOLLOW_155_in_md5324_static.FOLLOW_155_in_md5324); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_155.add(string_literal972);

            TOKEN973=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_md5326_static.FOLLOW_TOKEN_in_md5326); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN973);



            // AST REWRITE
            // elements: TOKEN, 155
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 648:15: -> ^( 'MD' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:648:18: ^( 'MD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_155.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 249, md_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "md"

    public static class nn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:651:1: nn : 'NN' TOKEN -> ^( 'NN' TOKEN ) ;
    public final ChemicalChunkerParser.nn_return nn() throws RecognitionException {
        ChemicalChunkerParser.nn_return retval = new ChemicalChunkerParser.nn_return();
        retval.start = input.LT(1);
        int nn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal974=null;
        Token TOKEN975=null;

        Object string_literal974_tree=null;
        Object TOKEN975_tree=null;
        RewriteRuleTokenStream stream_156=new RewriteRuleTokenStream(adaptor,"token 156");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 250) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:651:3: ( 'NN' TOKEN -> ^( 'NN' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:651:4: 'NN' TOKEN
            {
            string_literal974=(Token)match(input,156,FOLLOW_156_in_nn5341_static.FOLLOW_156_in_nn5341); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_156.add(string_literal974);

            TOKEN975=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn5343_static.FOLLOW_TOKEN_in_nn5343); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN975);



            // AST REWRITE
            // elements: 156, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 651:15: -> ^( 'NN' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:651:18: ^( 'NN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_156.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 250, nn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nn"

    public static class nns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:654:1: nns : 'NNS' TOKEN -> ^( 'NNS' TOKEN ) ;
    public final ChemicalChunkerParser.nns_return nns() throws RecognitionException {
        ChemicalChunkerParser.nns_return retval = new ChemicalChunkerParser.nns_return();
        retval.start = input.LT(1);
        int nns_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal976=null;
        Token TOKEN977=null;

        Object string_literal976_tree=null;
        Object TOKEN977_tree=null;
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 251) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:654:4: ( 'NNS' TOKEN -> ^( 'NNS' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:654:5: 'NNS' TOKEN
            {
            string_literal976=(Token)match(input,157,FOLLOW_157_in_nns5358_static.FOLLOW_157_in_nns5358); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_157.add(string_literal976);

            TOKEN977=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns5360_static.FOLLOW_TOKEN_in_nns5360); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN977);



            // AST REWRITE
            // elements: 157, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 654:17: -> ^( 'NNS' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:654:20: ^( 'NNS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_157.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 251, nns_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nns"

    public static class nnp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnp"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:657:1: nnp : 'NNP' TOKEN -> ^( 'NNP' TOKEN ) ;
    public final ChemicalChunkerParser.nnp_return nnp() throws RecognitionException {
        ChemicalChunkerParser.nnp_return retval = new ChemicalChunkerParser.nnp_return();
        retval.start = input.LT(1);
        int nnp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal978=null;
        Token TOKEN979=null;

        Object string_literal978_tree=null;
        Object TOKEN979_tree=null;
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 252) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:657:4: ( 'NNP' TOKEN -> ^( 'NNP' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:657:5: 'NNP' TOKEN
            {
            string_literal978=(Token)match(input,158,FOLLOW_158_in_nnp5375_static.FOLLOW_158_in_nnp5375); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_158.add(string_literal978);

            TOKEN979=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnp5377_static.FOLLOW_TOKEN_in_nnp5377); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN979);



            // AST REWRITE
            // elements: TOKEN, 158
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 657:17: -> ^( 'NNP' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:657:20: ^( 'NNP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_158.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 252, nnp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnp"

    public static class nnps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnps"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:660:1: nnps : 'NNPS' TOKEN -> ^( 'NNPS' TOKEN ) ;
    public final ChemicalChunkerParser.nnps_return nnps() throws RecognitionException {
        ChemicalChunkerParser.nnps_return retval = new ChemicalChunkerParser.nnps_return();
        retval.start = input.LT(1);
        int nnps_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal980=null;
        Token TOKEN981=null;

        Object string_literal980_tree=null;
        Object TOKEN981_tree=null;
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 253) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:660:5: ( 'NNPS' TOKEN -> ^( 'NNPS' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:660:6: 'NNPS' TOKEN
            {
            string_literal980=(Token)match(input,159,FOLLOW_159_in_nnps5392_static.FOLLOW_159_in_nnps5392); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_159.add(string_literal980);

            TOKEN981=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnps5394_static.FOLLOW_TOKEN_in_nnps5394); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN981);



            // AST REWRITE
            // elements: 159, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 660:19: -> ^( 'NNPS' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:660:22: ^( 'NNPS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_159.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 253, nnps_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnps"

    public static class pdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pdt"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:663:1: pdt : 'PDT' TOKEN -> ^( 'PDT' TOKEN ) ;
    public final ChemicalChunkerParser.pdt_return pdt() throws RecognitionException {
        ChemicalChunkerParser.pdt_return retval = new ChemicalChunkerParser.pdt_return();
        retval.start = input.LT(1);
        int pdt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal982=null;
        Token TOKEN983=null;

        Object string_literal982_tree=null;
        Object TOKEN983_tree=null;
        RewriteRuleTokenStream stream_160=new RewriteRuleTokenStream(adaptor,"token 160");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 254) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:663:4: ( 'PDT' TOKEN -> ^( 'PDT' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:663:5: 'PDT' TOKEN
            {
            string_literal982=(Token)match(input,160,FOLLOW_160_in_pdt5409_static.FOLLOW_160_in_pdt5409); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_160.add(string_literal982);

            TOKEN983=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pdt5411_static.FOLLOW_TOKEN_in_pdt5411); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN983);



            // AST REWRITE
            // elements: 160, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 663:17: -> ^( 'PDT' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:663:20: ^( 'PDT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_160.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 254, pdt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pdt"

    public static class pos_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pos"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:666:1: pos : 'POS' TOKEN -> ^( 'POS' TOKEN ) ;
    public final ChemicalChunkerParser.pos_return pos() throws RecognitionException {
        ChemicalChunkerParser.pos_return retval = new ChemicalChunkerParser.pos_return();
        retval.start = input.LT(1);
        int pos_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal984=null;
        Token TOKEN985=null;

        Object string_literal984_tree=null;
        Object TOKEN985_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 255) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:666:4: ( 'POS' TOKEN -> ^( 'POS' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:666:5: 'POS' TOKEN
            {
            string_literal984=(Token)match(input,161,FOLLOW_161_in_pos5426_static.FOLLOW_161_in_pos5426); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_161.add(string_literal984);

            TOKEN985=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pos5428_static.FOLLOW_TOKEN_in_pos5428); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN985);



            // AST REWRITE
            // elements: TOKEN, 161
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 666:17: -> ^( 'POS' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:666:20: ^( 'POS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_161.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 255, pos_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pos"

    public static class prp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:669:1: prp : 'PRP' TOKEN -> ^( 'PRP' TOKEN ) ;
    public final ChemicalChunkerParser.prp_return prp() throws RecognitionException {
        ChemicalChunkerParser.prp_return retval = new ChemicalChunkerParser.prp_return();
        retval.start = input.LT(1);
        int prp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal986=null;
        Token TOKEN987=null;

        Object string_literal986_tree=null;
        Object TOKEN987_tree=null;
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 256) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:669:4: ( 'PRP' TOKEN -> ^( 'PRP' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:669:5: 'PRP' TOKEN
            {
            string_literal986=(Token)match(input,162,FOLLOW_162_in_prp5443_static.FOLLOW_162_in_prp5443); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_162.add(string_literal986);

            TOKEN987=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp5445_static.FOLLOW_TOKEN_in_prp5445); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN987);



            // AST REWRITE
            // elements: 162, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 669:17: -> ^( 'PRP' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:669:20: ^( 'PRP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_162.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 256, prp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prp"

    public static class prp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp_poss"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:672:1: prp_poss : 'PRP$' TOKEN -> ^( 'PRP$' TOKEN ) ;
    public final ChemicalChunkerParser.prp_poss_return prp_poss() throws RecognitionException {
        ChemicalChunkerParser.prp_poss_return retval = new ChemicalChunkerParser.prp_poss_return();
        retval.start = input.LT(1);
        int prp_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal988=null;
        Token TOKEN989=null;

        Object string_literal988_tree=null;
        Object TOKEN989_tree=null;
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 257) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:672:9: ( 'PRP$' TOKEN -> ^( 'PRP$' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:672:10: 'PRP$' TOKEN
            {
            string_literal988=(Token)match(input,163,FOLLOW_163_in_prp_poss5460_static.FOLLOW_163_in_prp_poss5460); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_163.add(string_literal988);

            TOKEN989=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp_poss5462_static.FOLLOW_TOKEN_in_prp_poss5462); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN989);



            // AST REWRITE
            // elements: TOKEN, 163
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 672:23: -> ^( 'PRP$' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:672:26: ^( 'PRP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_163.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 257, prp_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prp_poss"

    public static class rb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rb"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:675:1: rb : 'RB' TOKEN -> ^( 'RB' TOKEN ) ;
    public final ChemicalChunkerParser.rb_return rb() throws RecognitionException {
        ChemicalChunkerParser.rb_return retval = new ChemicalChunkerParser.rb_return();
        retval.start = input.LT(1);
        int rb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal990=null;
        Token TOKEN991=null;

        Object string_literal990_tree=null;
        Object TOKEN991_tree=null;
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 258) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:675:3: ( 'RB' TOKEN -> ^( 'RB' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:675:4: 'RB' TOKEN
            {
            string_literal990=(Token)match(input,164,FOLLOW_164_in_rb5477_static.FOLLOW_164_in_rb5477); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_164.add(string_literal990);

            TOKEN991=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rb5479_static.FOLLOW_TOKEN_in_rb5479); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN991);



            // AST REWRITE
            // elements: 164, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 675:15: -> ^( 'RB' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:675:18: ^( 'RB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_164.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 258, rb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rb"

    public static class rbr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbr"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:678:1: rbr : 'RBR' TOKEN -> ^( 'RBR' TOKEN ) ;
    public final ChemicalChunkerParser.rbr_return rbr() throws RecognitionException {
        ChemicalChunkerParser.rbr_return retval = new ChemicalChunkerParser.rbr_return();
        retval.start = input.LT(1);
        int rbr_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal992=null;
        Token TOKEN993=null;

        Object string_literal992_tree=null;
        Object TOKEN993_tree=null;
        RewriteRuleTokenStream stream_165=new RewriteRuleTokenStream(adaptor,"token 165");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 259) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:678:4: ( 'RBR' TOKEN -> ^( 'RBR' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:678:5: 'RBR' TOKEN
            {
            string_literal992=(Token)match(input,165,FOLLOW_165_in_rbr5494_static.FOLLOW_165_in_rbr5494); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_165.add(string_literal992);

            TOKEN993=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbr5496_static.FOLLOW_TOKEN_in_rbr5496); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN993);



            // AST REWRITE
            // elements: TOKEN, 165
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 678:17: -> ^( 'RBR' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:678:20: ^( 'RBR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_165.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 259, rbr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbr"

    public static class rbs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbs"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:681:1: rbs : 'RBS' TOKEN -> ^( 'RBS' TOKEN ) ;
    public final ChemicalChunkerParser.rbs_return rbs() throws RecognitionException {
        ChemicalChunkerParser.rbs_return retval = new ChemicalChunkerParser.rbs_return();
        retval.start = input.LT(1);
        int rbs_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal994=null;
        Token TOKEN995=null;

        Object string_literal994_tree=null;
        Object TOKEN995_tree=null;
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 260) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:681:4: ( 'RBS' TOKEN -> ^( 'RBS' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:681:5: 'RBS' TOKEN
            {
            string_literal994=(Token)match(input,166,FOLLOW_166_in_rbs5511_static.FOLLOW_166_in_rbs5511); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_166.add(string_literal994);

            TOKEN995=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbs5513_static.FOLLOW_TOKEN_in_rbs5513); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN995);



            // AST REWRITE
            // elements: 166, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 681:17: -> ^( 'RBS' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:681:20: ^( 'RBS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_166.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 260, rbs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbs"

    public static class rp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rp"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:684:1: rp : 'RP' TOKEN -> ^( 'RP' TOKEN ) ;
    public final ChemicalChunkerParser.rp_return rp() throws RecognitionException {
        ChemicalChunkerParser.rp_return retval = new ChemicalChunkerParser.rp_return();
        retval.start = input.LT(1);
        int rp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal996=null;
        Token TOKEN997=null;

        Object string_literal996_tree=null;
        Object TOKEN997_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 261) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:684:3: ( 'RP' TOKEN -> ^( 'RP' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:684:4: 'RP' TOKEN
            {
            string_literal996=(Token)match(input,167,FOLLOW_167_in_rp5528_static.FOLLOW_167_in_rp5528); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_167.add(string_literal996);

            TOKEN997=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rp5530_static.FOLLOW_TOKEN_in_rp5530); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN997);



            // AST REWRITE
            // elements: TOKEN, 167
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 684:15: -> ^( 'RP' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:684:18: ^( 'RP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_167.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 261, rp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rp"

    public static class sym_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sym"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:687:1: sym : 'SYM' TOKEN -> ^( 'SYM' TOKEN ) ;
    public final ChemicalChunkerParser.sym_return sym() throws RecognitionException {
        ChemicalChunkerParser.sym_return retval = new ChemicalChunkerParser.sym_return();
        retval.start = input.LT(1);
        int sym_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal998=null;
        Token TOKEN999=null;

        Object string_literal998_tree=null;
        Object TOKEN999_tree=null;
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 262) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:687:4: ( 'SYM' TOKEN -> ^( 'SYM' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:687:5: 'SYM' TOKEN
            {
            string_literal998=(Token)match(input,168,FOLLOW_168_in_sym5545_static.FOLLOW_168_in_sym5545); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_168.add(string_literal998);

            TOKEN999=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_sym5547_static.FOLLOW_TOKEN_in_sym5547); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN999);



            // AST REWRITE
            // elements: 168, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 687:17: -> ^( 'SYM' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:687:20: ^( 'SYM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_168.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 262, sym_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sym"

    public static class to_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:690:1: to : 'TO' TOKEN -> ^( 'TO' TOKEN ) ;
    public final ChemicalChunkerParser.to_return to() throws RecognitionException {
        ChemicalChunkerParser.to_return retval = new ChemicalChunkerParser.to_return();
        retval.start = input.LT(1);
        int to_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1000=null;
        Token TOKEN1001=null;

        Object string_literal1000_tree=null;
        Object TOKEN1001_tree=null;
        RewriteRuleTokenStream stream_169=new RewriteRuleTokenStream(adaptor,"token 169");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 263) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:690:3: ( 'TO' TOKEN -> ^( 'TO' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:690:4: 'TO' TOKEN
            {
            string_literal1000=(Token)match(input,169,FOLLOW_169_in_to5562_static.FOLLOW_169_in_to5562); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_169.add(string_literal1000);

            TOKEN1001=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_to5564_static.FOLLOW_TOKEN_in_to5564); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1001);



            // AST REWRITE
            // elements: TOKEN, 169
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 690:15: -> ^( 'TO' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:690:18: ^( 'TO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_169.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 263, to_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "to"

    public static class uh_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uh"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:693:1: uh : 'UH' TOKEN -> ^( 'UH' TOKEN ) ;
    public final ChemicalChunkerParser.uh_return uh() throws RecognitionException {
        ChemicalChunkerParser.uh_return retval = new ChemicalChunkerParser.uh_return();
        retval.start = input.LT(1);
        int uh_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1002=null;
        Token TOKEN1003=null;

        Object string_literal1002_tree=null;
        Object TOKEN1003_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 264) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:693:3: ( 'UH' TOKEN -> ^( 'UH' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:693:4: 'UH' TOKEN
            {
            string_literal1002=(Token)match(input,170,FOLLOW_170_in_uh5579_static.FOLLOW_170_in_uh5579); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_170.add(string_literal1002);

            TOKEN1003=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_uh5581_static.FOLLOW_TOKEN_in_uh5581); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1003);



            // AST REWRITE
            // elements: 170, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 693:15: -> ^( 'UH' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:693:18: ^( 'UH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_170.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 264, uh_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "uh"

    public static class vb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vb"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:696:1: vb : 'VB' TOKEN -> ^( 'VB' TOKEN ) ;
    public final ChemicalChunkerParser.vb_return vb() throws RecognitionException {
        ChemicalChunkerParser.vb_return retval = new ChemicalChunkerParser.vb_return();
        retval.start = input.LT(1);
        int vb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1004=null;
        Token TOKEN1005=null;

        Object string_literal1004_tree=null;
        Object TOKEN1005_tree=null;
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 265) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:696:3: ( 'VB' TOKEN -> ^( 'VB' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:696:4: 'VB' TOKEN
            {
            string_literal1004=(Token)match(input,171,FOLLOW_171_in_vb5596_static.FOLLOW_171_in_vb5596); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_171.add(string_literal1004);

            TOKEN1005=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vb5598_static.FOLLOW_TOKEN_in_vb5598); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1005);



            // AST REWRITE
            // elements: TOKEN, 171
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 696:15: -> ^( 'VB' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:696:18: ^( 'VB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_171.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 265, vb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vb"

    public static class vbd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbd"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:699:1: vbd : 'VBD' TOKEN -> ^( 'VBD' TOKEN ) ;
    public final ChemicalChunkerParser.vbd_return vbd() throws RecognitionException {
        ChemicalChunkerParser.vbd_return retval = new ChemicalChunkerParser.vbd_return();
        retval.start = input.LT(1);
        int vbd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1006=null;
        Token TOKEN1007=null;

        Object string_literal1006_tree=null;
        Object TOKEN1007_tree=null;
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 266) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:699:4: ( 'VBD' TOKEN -> ^( 'VBD' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:699:5: 'VBD' TOKEN
            {
            string_literal1006=(Token)match(input,172,FOLLOW_172_in_vbd5613_static.FOLLOW_172_in_vbd5613); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_172.add(string_literal1006);

            TOKEN1007=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbd5615_static.FOLLOW_TOKEN_in_vbd5615); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1007);



            // AST REWRITE
            // elements: TOKEN, 172
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 699:17: -> ^( 'VBD' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:699:20: ^( 'VBD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_172.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 266, vbd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbd"

    public static class vbg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbg"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:702:1: vbg : 'VBG' TOKEN -> ^( 'VBG' TOKEN ) ;
    public final ChemicalChunkerParser.vbg_return vbg() throws RecognitionException {
        ChemicalChunkerParser.vbg_return retval = new ChemicalChunkerParser.vbg_return();
        retval.start = input.LT(1);
        int vbg_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1008=null;
        Token TOKEN1009=null;

        Object string_literal1008_tree=null;
        Object TOKEN1009_tree=null;
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 267) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:702:4: ( 'VBG' TOKEN -> ^( 'VBG' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:702:5: 'VBG' TOKEN
            {
            string_literal1008=(Token)match(input,173,FOLLOW_173_in_vbg5630_static.FOLLOW_173_in_vbg5630); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_173.add(string_literal1008);

            TOKEN1009=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbg5632_static.FOLLOW_TOKEN_in_vbg5632); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1009);



            // AST REWRITE
            // elements: TOKEN, 173
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 702:17: -> ^( 'VBG' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:702:20: ^( 'VBG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_173.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 267, vbg_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbg"

    public static class vbn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbn"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:705:1: vbn : 'VBN' TOKEN -> ^( 'VBN' TOKEN ) ;
    public final ChemicalChunkerParser.vbn_return vbn() throws RecognitionException {
        ChemicalChunkerParser.vbn_return retval = new ChemicalChunkerParser.vbn_return();
        retval.start = input.LT(1);
        int vbn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1010=null;
        Token TOKEN1011=null;

        Object string_literal1010_tree=null;
        Object TOKEN1011_tree=null;
        RewriteRuleTokenStream stream_174=new RewriteRuleTokenStream(adaptor,"token 174");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 268) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:705:4: ( 'VBN' TOKEN -> ^( 'VBN' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:705:5: 'VBN' TOKEN
            {
            string_literal1010=(Token)match(input,174,FOLLOW_174_in_vbn5647_static.FOLLOW_174_in_vbn5647); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_174.add(string_literal1010);

            TOKEN1011=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbn5649_static.FOLLOW_TOKEN_in_vbn5649); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1011);



            // AST REWRITE
            // elements: 174, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 705:17: -> ^( 'VBN' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:705:20: ^( 'VBN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_174.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 268, vbn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbn"

    public static class vbp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbp"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:708:1: vbp : 'VBP' TOKEN -> ^( 'VBP' TOKEN ) ;
    public final ChemicalChunkerParser.vbp_return vbp() throws RecognitionException {
        ChemicalChunkerParser.vbp_return retval = new ChemicalChunkerParser.vbp_return();
        retval.start = input.LT(1);
        int vbp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1012=null;
        Token TOKEN1013=null;

        Object string_literal1012_tree=null;
        Object TOKEN1013_tree=null;
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 269) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:708:4: ( 'VBP' TOKEN -> ^( 'VBP' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:708:5: 'VBP' TOKEN
            {
            string_literal1012=(Token)match(input,175,FOLLOW_175_in_vbp5664_static.FOLLOW_175_in_vbp5664); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_175.add(string_literal1012);

            TOKEN1013=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbp5666_static.FOLLOW_TOKEN_in_vbp5666); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1013);



            // AST REWRITE
            // elements: 175, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 708:17: -> ^( 'VBP' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:708:20: ^( 'VBP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_175.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 269, vbp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbp"

    public static class vbz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbz"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:711:1: vbz : 'VBZ' TOKEN -> ^( 'VBZ' TOKEN ) ;
    public final ChemicalChunkerParser.vbz_return vbz() throws RecognitionException {
        ChemicalChunkerParser.vbz_return retval = new ChemicalChunkerParser.vbz_return();
        retval.start = input.LT(1);
        int vbz_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1014=null;
        Token TOKEN1015=null;

        Object string_literal1014_tree=null;
        Object TOKEN1015_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 270) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:711:4: ( 'VBZ' TOKEN -> ^( 'VBZ' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:711:5: 'VBZ' TOKEN
            {
            string_literal1014=(Token)match(input,176,FOLLOW_176_in_vbz5681_static.FOLLOW_176_in_vbz5681); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_176.add(string_literal1014);

            TOKEN1015=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbz5683_static.FOLLOW_TOKEN_in_vbz5683); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1015);



            // AST REWRITE
            // elements: TOKEN, 176
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 711:17: -> ^( 'VBZ' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:711:20: ^( 'VBZ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_176.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 270, vbz_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbz"

    public static class wdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wdt"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:714:1: wdt : 'WDT' TOKEN -> ^( 'WDT' TOKEN ) ;
    public final ChemicalChunkerParser.wdt_return wdt() throws RecognitionException {
        ChemicalChunkerParser.wdt_return retval = new ChemicalChunkerParser.wdt_return();
        retval.start = input.LT(1);
        int wdt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1016=null;
        Token TOKEN1017=null;

        Object string_literal1016_tree=null;
        Object TOKEN1017_tree=null;
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 271) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:714:4: ( 'WDT' TOKEN -> ^( 'WDT' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:714:5: 'WDT' TOKEN
            {
            string_literal1016=(Token)match(input,177,FOLLOW_177_in_wdt5698_static.FOLLOW_177_in_wdt5698); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_177.add(string_literal1016);

            TOKEN1017=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wdt5700_static.FOLLOW_TOKEN_in_wdt5700); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1017);



            // AST REWRITE
            // elements: 177, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 714:17: -> ^( 'WDT' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:714:20: ^( 'WDT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_177.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 271, wdt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wdt"

    public static class wp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:717:1: wp : 'WP' TOKEN -> ^( 'WP' TOKEN ) ;
    public final ChemicalChunkerParser.wp_return wp() throws RecognitionException {
        ChemicalChunkerParser.wp_return retval = new ChemicalChunkerParser.wp_return();
        retval.start = input.LT(1);
        int wp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1018=null;
        Token TOKEN1019=null;

        Object string_literal1018_tree=null;
        Object TOKEN1019_tree=null;
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 272) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:717:3: ( 'WP' TOKEN -> ^( 'WP' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:717:4: 'WP' TOKEN
            {
            string_literal1018=(Token)match(input,178,FOLLOW_178_in_wp5715_static.FOLLOW_178_in_wp5715); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_178.add(string_literal1018);

            TOKEN1019=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp5717_static.FOLLOW_TOKEN_in_wp5717); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1019);



            // AST REWRITE
            // elements: 178, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 717:15: -> ^( 'WP' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:717:18: ^( 'WP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_178.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 272, wp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wp"

    public static class wp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp_poss"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:720:1: wp_poss : 'WP$' TOKEN -> ^( 'WP$' TOKEN ) ;
    public final ChemicalChunkerParser.wp_poss_return wp_poss() throws RecognitionException {
        ChemicalChunkerParser.wp_poss_return retval = new ChemicalChunkerParser.wp_poss_return();
        retval.start = input.LT(1);
        int wp_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1020=null;
        Token TOKEN1021=null;

        Object string_literal1020_tree=null;
        Object TOKEN1021_tree=null;
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 273) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:720:8: ( 'WP$' TOKEN -> ^( 'WP$' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:720:9: 'WP$' TOKEN
            {
            string_literal1020=(Token)match(input,179,FOLLOW_179_in_wp_poss5732_static.FOLLOW_179_in_wp_poss5732); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_179.add(string_literal1020);

            TOKEN1021=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp_poss5734_static.FOLLOW_TOKEN_in_wp_poss5734); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1021);



            // AST REWRITE
            // elements: TOKEN, 179
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 720:21: -> ^( 'WP$' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:720:24: ^( 'WP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_179.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 273, wp_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wp_poss"

    public static class wrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wrb"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:723:1: wrb : 'WRB' TOKEN -> ^( 'WRB' TOKEN ) ;
    public final ChemicalChunkerParser.wrb_return wrb() throws RecognitionException {
        ChemicalChunkerParser.wrb_return retval = new ChemicalChunkerParser.wrb_return();
        retval.start = input.LT(1);
        int wrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1022=null;
        Token TOKEN1023=null;

        Object string_literal1022_tree=null;
        Object TOKEN1023_tree=null;
        RewriteRuleTokenStream stream_180=new RewriteRuleTokenStream(adaptor,"token 180");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 274) ) { return retval; }
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:723:4: ( 'WRB' TOKEN -> ^( 'WRB' TOKEN ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:723:5: 'WRB' TOKEN
            {
            string_literal1022=(Token)match(input,180,FOLLOW_180_in_wrb5749_static.FOLLOW_180_in_wrb5749); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_180.add(string_literal1022);

            TOKEN1023=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wrb5751_static.FOLLOW_TOKEN_in_wrb5751); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1023);



            // AST REWRITE
            // elements: TOKEN, 180
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 723:17: -> ^( 'WRB' TOKEN )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:723:20: ^( 'WRB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_180.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 274, wrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wrb"

    // $ANTLR start synpred2_ChemicalChunker
    public final void synpred2_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:160:12: ( procedureNounPhrase )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:160:12: procedureNounPhrase
        {
        pushFollow(FOLLOW_procedureNounPhrase_in_synpred2_ChemicalChunker222_static.FOLLOW_procedureNounPhrase_in_synpred2_ChemicalChunker222);
        procedureNounPhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_ChemicalChunker

    // $ANTLR start synpred3_ChemicalChunker
    public final void synpred3_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:160:35: ( sentenceStructure )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:160:35: sentenceStructure
        {
        pushFollow(FOLLOW_sentenceStructure_in_synpred3_ChemicalChunker227_static.FOLLOW_sentenceStructure_in_synpred3_ChemicalChunker227);
        sentenceStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_ChemicalChunker

    // $ANTLR start synpred4_ChemicalChunker
    public final void synpred4_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:160:53: ( unmatchedPhrase )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:160:53: unmatchedPhrase
        {
        pushFollow(FOLLOW_unmatchedPhrase_in_synpred4_ChemicalChunker229_static.FOLLOW_unmatchedPhrase_in_synpred4_ChemicalChunker229);
        unmatchedPhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_ChemicalChunker

    // $ANTLR start synpred6_ChemicalChunker
    public final void synpred6_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:22: ( nounphrase )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:22: nounphrase
        {
        pushFollow(FOLLOW_nounphrase_in_synpred6_ChemicalChunker244_static.FOLLOW_nounphrase_in_synpred6_ChemicalChunker244);
        nounphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_ChemicalChunker

    // $ANTLR start synpred7_ChemicalChunker
    public final void synpred7_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:33: ( verbphrase )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:33: verbphrase
        {
        pushFollow(FOLLOW_verbphrase_in_synpred7_ChemicalChunker246_static.FOLLOW_verbphrase_in_synpred7_ChemicalChunker246);
        verbphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_ChemicalChunker

    // $ANTLR start synpred8_ChemicalChunker
    public final void synpred8_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:44: ( prepphrase )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:44: prepphrase
        {
        pushFollow(FOLLOW_prepphrase_in_synpred8_ChemicalChunker248_static.FOLLOW_prepphrase_in_synpred8_ChemicalChunker248);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_ChemicalChunker

    // $ANTLR start synpred9_ChemicalChunker
    public final void synpred9_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:55: ( prepphraseAfter )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:55: prepphraseAfter
        {
        pushFollow(FOLLOW_prepphraseAfter_in_synpred9_ChemicalChunker250_static.FOLLOW_prepphraseAfter_in_synpred9_ChemicalChunker250);
        prepphraseAfter();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_ChemicalChunker

    // $ANTLR start synpred10_ChemicalChunker
    public final void synpred10_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:74: ( advAdj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:74: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred10_ChemicalChunker255_static.FOLLOW_advAdj_in_synpred10_ChemicalChunker255);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_ChemicalChunker

    // $ANTLR start synpred11_ChemicalChunker
    public final void synpred11_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:81: ( colon )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:81: colon
        {
        pushFollow(FOLLOW_colon_in_synpred11_ChemicalChunker257_static.FOLLOW_colon_in_synpred11_ChemicalChunker257);
        colon();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_ChemicalChunker

    // $ANTLR start synpred12_ChemicalChunker
    public final void synpred12_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:90: ( conjunction )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:90: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred12_ChemicalChunker262_static.FOLLOW_conjunction_in_synpred12_ChemicalChunker262);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_ChemicalChunker

    // $ANTLR start synpred13_ChemicalChunker
    public final void synpred13_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:102: ( rbconj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:102: rbconj
        {
        pushFollow(FOLLOW_rbconj_in_synpred13_ChemicalChunker264_static.FOLLOW_rbconj_in_synpred13_ChemicalChunker264);
        rbconj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_ChemicalChunker

    // $ANTLR start synpred14_ChemicalChunker
    public final void synpred14_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:109: ( comma )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:109: comma
        {
        pushFollow(FOLLOW_comma_in_synpred14_ChemicalChunker266_static.FOLLOW_comma_in_synpred14_ChemicalChunker266);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_ChemicalChunker

    // $ANTLR start synpred85_ChemicalChunker
    public final void synpred85_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:177:96: ( headingProcedureTerminators )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:177:96: headingProcedureTerminators
        {
        pushFollow(FOLLOW_headingProcedureTerminators_in_synpred85_ChemicalChunker481_static.FOLLOW_headingProcedureTerminators_in_synpred85_ChemicalChunker481);
        headingProcedureTerminators();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred85_ChemicalChunker

    // $ANTLR start synpred91_ChemicalChunker
    public final void synpred91_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:194:4: ( nounphraseStructure1 )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:194:4: nounphraseStructure1
        {
        pushFollow(FOLLOW_nounphraseStructure1_in_synpred91_ChemicalChunker586_static.FOLLOW_nounphraseStructure1_in_synpred91_ChemicalChunker586);
        nounphraseStructure1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred91_ChemicalChunker

    // $ANTLR start synpred93_ChemicalChunker
    public final void synpred93_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:198:11: ( dt )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:198:11: dt
        {
        pushFollow(FOLLOW_dt_in_synpred93_ChemicalChunker617_static.FOLLOW_dt_in_synpred93_ChemicalChunker617);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred93_ChemicalChunker

    // $ANTLR start synpred94_ChemicalChunker
    public final void synpred94_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:198:35: ( conjunction )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:198:35: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred94_ChemicalChunker624_static.FOLLOW_conjunction_in_synpred94_ChemicalChunker624);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred94_ChemicalChunker

    // $ANTLR start synpred95_ChemicalChunker
    public final void synpred95_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:198:35: ( ( conjunction )* nounphraseContent {...}?)
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:198:35: ( conjunction )* nounphraseContent {...}?
        {
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:198:35: ( conjunction )*
        loop231:
        do {
            int alt231=2;
            alt231 = dfa231.predict(input);
            switch (alt231) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred95_ChemicalChunker624_static.FOLLOW_conjunction_in_synpred95_ChemicalChunker624);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop231;
            }
        } while (true);

        pushFollow(FOLLOW_nounphraseContent_in_synpred95_ChemicalChunker627_static.FOLLOW_nounphraseContent_in_synpred95_ChemicalChunker627);
        nounphraseContent();

        state._fsp--;
        if (state.failed) return ;
        if ( !((!followedByVBDorVBZthenVBYIELDed(input))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred95_ChemicalChunker", "!followedByVBDorVBZthenVBYIELDed(input)");
        }

        }
    }
    // $ANTLR end synpred95_ChemicalChunker

    // $ANTLR start synpred96_ChemicalChunker
    public final void synpred96_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:198:112: ( prepphraseOf )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:198:112: prepphraseOf
        {
        pushFollow(FOLLOW_prepphraseOf_in_synpred96_ChemicalChunker634_static.FOLLOW_prepphraseOf_in_synpred96_ChemicalChunker634);
        prepphraseOf();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred96_ChemicalChunker

    // $ANTLR start synpred97_ChemicalChunker
    public final void synpred97_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:198:126: ( prepphraseIN )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:198:126: prepphraseIN
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred97_ChemicalChunker637_static.FOLLOW_prepphraseIN_in_synpred97_ChemicalChunker637);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred97_ChemicalChunker

    // $ANTLR start synpred98_ChemicalChunker
    public final void synpred98_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:201:4: ( advAdj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:201:4: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred98_ChemicalChunker649_static.FOLLOW_advAdj_in_synpred98_ChemicalChunker649);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred98_ChemicalChunker

    // $ANTLR start synpred99_ChemicalChunker
    public final void synpred99_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:201:14: ( dissolvePhrase )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:201:14: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred99_ChemicalChunker654_static.FOLLOW_dissolvePhrase_in_synpred99_ChemicalChunker654);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred99_ChemicalChunker

    // $ANTLR start synpred100_ChemicalChunker
    public final void synpred100_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:201:29: ( ratioOrBracketedRatio )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:201:29: ratioOrBracketedRatio
        {
        pushFollow(FOLLOW_ratioOrBracketedRatio_in_synpred100_ChemicalChunker656_static.FOLLOW_ratioOrBracketedRatio_in_synpred100_ChemicalChunker656);
        ratioOrBracketedRatio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred100_ChemicalChunker

    // $ANTLR start synpred101_ChemicalChunker
    public final void synpred101_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:201:51: ( noun )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:201:51: noun
        {
        pushFollow(FOLLOW_noun_in_synpred101_ChemicalChunker658_static.FOLLOW_noun_in_synpred101_ChemicalChunker658);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred101_ChemicalChunker

    // $ANTLR start synpred102_ChemicalChunker
    public final void synpred102_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:201:56: ( numeric )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:201:56: numeric
        {
        pushFollow(FOLLOW_numeric_in_synpred102_ChemicalChunker660_static.FOLLOW_numeric_in_synpred102_ChemicalChunker660);
        numeric();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred102_ChemicalChunker

    // $ANTLR start synpred103_ChemicalChunker
    public final void synpred103_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:201:64: ( bracketedContent )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:201:64: bracketedContent
        {
        pushFollow(FOLLOW_bracketedContent_in_synpred103_ChemicalChunker662_static.FOLLOW_bracketedContent_in_synpred103_ChemicalChunker662);
        bracketedContent();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred103_ChemicalChunker

    // $ANTLR start synpred104_ChemicalChunker
    public final void synpred104_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:5: ( dissolveStructure )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:5: dissolveStructure
        {
        pushFollow(FOLLOW_dissolveStructure_in_synpred104_ChemicalChunker674_static.FOLLOW_dissolveStructure_in_synpred104_ChemicalChunker674);
        dissolveStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred104_ChemicalChunker

    // $ANTLR start synpred105_ChemicalChunker
    public final void synpred105_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:207:4: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:207:4: adj
        {
        pushFollow(FOLLOW_adj_in_synpred105_ChemicalChunker705_static.FOLLOW_adj_in_synpred105_ChemicalChunker705);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred105_ChemicalChunker

    // $ANTLR start synpred108_ChemicalChunker
    public final void synpred108_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:207:33: ( molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:207:33: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred108_ChemicalChunker717_static.FOLLOW_molecule_in_synpred108_ChemicalChunker717);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred108_ChemicalChunker

    // $ANTLR start synpred109_ChemicalChunker
    public final void synpred109_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:207:72: ( conjunction molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:207:72: conjunction molecule
        {
        pushFollow(FOLLOW_conjunction_in_synpred109_ChemicalChunker726_static.FOLLOW_conjunction_in_synpred109_ChemicalChunker726);
        conjunction();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_molecule_in_synpred109_ChemicalChunker728_static.FOLLOW_molecule_in_synpred109_ChemicalChunker728);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred109_ChemicalChunker

    // $ANTLR start synpred111_ChemicalChunker
    public final void synpred111_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:210:16: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:210:16: adj
        {
        pushFollow(FOLLOW_adj_in_synpred111_ChemicalChunker745_static.FOLLOW_adj_in_synpred111_ChemicalChunker745);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred111_ChemicalChunker

    // $ANTLR start synpred113_ChemicalChunker
    public final void synpred113_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:210:27: ( molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:210:27: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred113_ChemicalChunker752_static.FOLLOW_molecule_in_synpred113_ChemicalChunker752);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred113_ChemicalChunker

    // $ANTLR start synpred115_ChemicalChunker
    public final void synpred115_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:28: ( to )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:28: to
        {
        pushFollow(FOLLOW_to_in_synpred115_ChemicalChunker786_static.FOLLOW_to_in_synpred115_ChemicalChunker786);
        to();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred115_ChemicalChunker

    // $ANTLR start synpred116_ChemicalChunker
    public final void synpred116_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:32: ( inAll )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:32: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred116_ChemicalChunker789_static.FOLLOW_inAll_in_synpred116_ChemicalChunker789);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred116_ChemicalChunker

    // $ANTLR start synpred122_ChemicalChunker
    public final void synpred122_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:82: ( md )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:82: md
        {
        pushFollow(FOLLOW_md_in_synpred122_ChemicalChunker810_static.FOLLOW_md_in_synpred122_ChemicalChunker810);
        md();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred122_ChemicalChunker

    // $ANTLR start synpred123_ChemicalChunker
    public final void synpred123_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:86: ( adv )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:86: adv
        {
        pushFollow(FOLLOW_adv_in_synpred123_ChemicalChunker813_static.FOLLOW_adv_in_synpred123_ChemicalChunker813);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred123_ChemicalChunker

    // $ANTLR start synpred124_ChemicalChunker
    public final void synpred124_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:91: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:91: adj
        {
        pushFollow(FOLLOW_adj_in_synpred124_ChemicalChunker816_static.FOLLOW_adj_in_synpred124_ChemicalChunker816);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred124_ChemicalChunker

    // $ANTLR start synpred125_ChemicalChunker
    public final void synpred125_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:96: ( neg )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:96: neg
        {
        pushFollow(FOLLOW_neg_in_synpred125_ChemicalChunker819_static.FOLLOW_neg_in_synpred125_ChemicalChunker819);
        neg();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred125_ChemicalChunker

    // $ANTLR start synpred127_ChemicalChunker
    public final void synpred127_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:114: ( md )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:114: md
        {
        pushFollow(FOLLOW_md_in_synpred127_ChemicalChunker827_static.FOLLOW_md_in_synpred127_ChemicalChunker827);
        md();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred127_ChemicalChunker

    // $ANTLR start synpred128_ChemicalChunker
    public final void synpred128_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:118: ( adv )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:118: adv
        {
        pushFollow(FOLLOW_adv_in_synpred128_ChemicalChunker830_static.FOLLOW_adv_in_synpred128_ChemicalChunker830);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred128_ChemicalChunker

    // $ANTLR start synpred129_ChemicalChunker
    public final void synpred129_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:123: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:123: adj
        {
        pushFollow(FOLLOW_adj_in_synpred129_ChemicalChunker833_static.FOLLOW_adj_in_synpred129_ChemicalChunker833);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred129_ChemicalChunker

    // $ANTLR start synpred130_ChemicalChunker
    public final void synpred130_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:128: ( neg )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:128: neg
        {
        pushFollow(FOLLOW_neg_in_synpred130_ChemicalChunker836_static.FOLLOW_neg_in_synpred130_ChemicalChunker836);
        neg();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred130_ChemicalChunker

    // $ANTLR start synpred131_ChemicalChunker
    public final void synpred131_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:133: ( otherVerbStructure )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:133: otherVerbStructure
        {
        pushFollow(FOLLOW_otherVerbStructure_in_synpred131_ChemicalChunker839_static.FOLLOW_otherVerbStructure_in_synpred131_ChemicalChunker839);
        otherVerbStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred131_ChemicalChunker

    // $ANTLR start synpred132_ChemicalChunker
    public final void synpred132_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:153: ( actionVerbStructure )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:153: actionVerbStructure
        {
        pushFollow(FOLLOW_actionVerbStructure_in_synpred132_ChemicalChunker842_static.FOLLOW_actionVerbStructure_in_synpred132_ChemicalChunker842);
        actionVerbStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred132_ChemicalChunker

    // $ANTLR start synpred133_ChemicalChunker
    public final void synpred133_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:175: ( inoff )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:175: inoff
        {
        pushFollow(FOLLOW_inoff_in_synpred133_ChemicalChunker846_static.FOLLOW_inoff_in_synpred133_ChemicalChunker846);
        inoff();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred133_ChemicalChunker

    // $ANTLR start synpred136_ChemicalChunker
    public final void synpred136_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:183: ( ( cc )? ( comma )? prepphrase )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:183: ( cc )? ( comma )? prepphrase
        {
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:183: ( cc )?
        int alt236=2;
        switch ( input.LA(1) ) {
            case 145:
                {
                alt236=1;
                }
                break;
        }

        switch (alt236) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: cc
                {
                pushFollow(FOLLOW_cc_in_synpred136_ChemicalChunker850_static.FOLLOW_cc_in_synpred136_ChemicalChunker850);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:187: ( comma )?
        int alt237=2;
        switch ( input.LA(1) ) {
            case 133:
                {
                alt237=1;
                }
                break;
        }

        switch (alt237) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: comma
                {
                pushFollow(FOLLOW_comma_in_synpred136_ChemicalChunker853_static.FOLLOW_comma_in_synpred136_ChemicalChunker853);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_prepphrase_in_synpred136_ChemicalChunker856_static.FOLLOW_prepphrase_in_synpred136_ChemicalChunker856);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred136_ChemicalChunker

    // $ANTLR start synpred141_ChemicalChunker
    public final void synpred141_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:217:55: ( md )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:217:55: md
        {
        pushFollow(FOLLOW_md_in_synpred141_ChemicalChunker880_static.FOLLOW_md_in_synpred141_ChemicalChunker880);
        md();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred141_ChemicalChunker

    // $ANTLR start synpred142_ChemicalChunker
    public final void synpred142_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:217:59: ( adv )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:217:59: adv
        {
        pushFollow(FOLLOW_adv_in_synpred142_ChemicalChunker883_static.FOLLOW_adv_in_synpred142_ChemicalChunker883);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred142_ChemicalChunker

    // $ANTLR start synpred143_ChemicalChunker
    public final void synpred143_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:217:64: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:217:64: adj
        {
        pushFollow(FOLLOW_adj_in_synpred143_ChemicalChunker886_static.FOLLOW_adj_in_synpred143_ChemicalChunker886);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred143_ChemicalChunker

    // $ANTLR start synpred144_ChemicalChunker
    public final void synpred144_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:217:69: ( neg )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:217:69: neg
        {
        pushFollow(FOLLOW_neg_in_synpred144_ChemicalChunker889_static.FOLLOW_neg_in_synpred144_ChemicalChunker889);
        neg();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred144_ChemicalChunker

    // $ANTLR start synpred149_ChemicalChunker
    public final void synpred149_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:218:53: ( md )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:218:53: md
        {
        pushFollow(FOLLOW_md_in_synpred149_ChemicalChunker911_static.FOLLOW_md_in_synpred149_ChemicalChunker911);
        md();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred149_ChemicalChunker

    // $ANTLR start synpred150_ChemicalChunker
    public final void synpred150_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:218:57: ( adv )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:218:57: adv
        {
        pushFollow(FOLLOW_adv_in_synpred150_ChemicalChunker914_static.FOLLOW_adv_in_synpred150_ChemicalChunker914);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred150_ChemicalChunker

    // $ANTLR start synpred151_ChemicalChunker
    public final void synpred151_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:218:62: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:218:62: adj
        {
        pushFollow(FOLLOW_adj_in_synpred151_ChemicalChunker917_static.FOLLOW_adj_in_synpred151_ChemicalChunker917);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred151_ChemicalChunker

    // $ANTLR start synpred152_ChemicalChunker
    public final void synpred152_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:218:67: ( neg )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:218:67: neg
        {
        pushFollow(FOLLOW_neg_in_synpred152_ChemicalChunker920_static.FOLLOW_neg_in_synpred152_ChemicalChunker920);
        neg();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred152_ChemicalChunker

    // $ANTLR start synpred164_ChemicalChunker
    public final void synpred164_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:103: ( vbdegass )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:103: vbdegass
        {
        pushFollow(FOLLOW_vbdegass_in_synpred164_ChemicalChunker960_static.FOLLOW_vbdegass_in_synpred164_ChemicalChunker960);
        vbdegass();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred164_ChemicalChunker

    // $ANTLR start synpred165_ChemicalChunker
    public final void synpred165_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:112: ( degassMultiVerb )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:112: degassMultiVerb
        {
        pushFollow(FOLLOW_degassMultiVerb_in_synpred165_ChemicalChunker962_static.FOLLOW_degassMultiVerb_in_synpred165_ChemicalChunker962);
        degassMultiVerb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred165_ChemicalChunker

    // $ANTLR start synpred193_ChemicalChunker
    public final void synpred193_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:227:24: ( dash nounStructure )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:227:24: dash nounStructure
        {
        pushFollow(FOLLOW_dash_in_synpred193_ChemicalChunker1050_static.FOLLOW_dash_in_synpred193_ChemicalChunker1050);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nounStructure_in_synpred193_ChemicalChunker1052_static.FOLLOW_nounStructure_in_synpred193_ChemicalChunker1052);
        nounStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred193_ChemicalChunker

    // $ANTLR start synpred196_ChemicalChunker
    public final void synpred196_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:31: ( captionLabel )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:31: captionLabel
        {
        pushFollow(FOLLOW_captionLabel_in_synpred196_ChemicalChunker1067_static.FOLLOW_captionLabel_in_synpred196_ChemicalChunker1067);
        captionLabel();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred196_ChemicalChunker

    // $ANTLR start synpred197_ChemicalChunker
    public final void synpred197_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:44: ( nnplabel )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:44: nnplabel
        {
        pushFollow(FOLLOW_nnplabel_in_synpred197_ChemicalChunker1069_static.FOLLOW_nnplabel_in_synpred197_ChemicalChunker1069);
        nnplabel();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred197_ChemicalChunker

    // $ANTLR start synpred198_ChemicalChunker
    public final void synpred198_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:53: ( citation )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:53: citation
        {
        pushFollow(FOLLOW_citation_in_synpred198_ChemicalChunker1071_static.FOLLOW_citation_in_synpred198_ChemicalChunker1071);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred198_ChemicalChunker

    // $ANTLR start synpred199_ChemicalChunker
    public final void synpred199_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:62: ( cycles )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:62: cycles
        {
        pushFollow(FOLLOW_cycles_in_synpred199_ChemicalChunker1073_static.FOLLOW_cycles_in_synpred199_ChemicalChunker1073);
        cycles();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred199_ChemicalChunker

    // $ANTLR start synpred200_ChemicalChunker
    public final void synpred200_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:69: ( molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:69: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred200_ChemicalChunker1075_static.FOLLOW_molecule_in_synpred200_ChemicalChunker1075);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred200_ChemicalChunker

    // $ANTLR start synpred201_ChemicalChunker
    public final void synpred201_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:78: ( apparatus )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:78: apparatus
        {
        pushFollow(FOLLOW_apparatus_in_synpred201_ChemicalChunker1077_static.FOLLOW_apparatus_in_synpred201_ChemicalChunker1077);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred201_ChemicalChunker

    // $ANTLR start synpred202_ChemicalChunker
    public final void synpred202_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:88: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:88: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred202_ChemicalChunker1079_static.FOLLOW_unnamedmolecule_in_synpred202_ChemicalChunker1079);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred202_ChemicalChunker

    // $ANTLR start synpred203_ChemicalChunker
    public final void synpred203_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:104: ( nnstate )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:104: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred203_ChemicalChunker1081_static.FOLLOW_nnstate_in_synpred203_ChemicalChunker1081);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred203_ChemicalChunker

    // $ANTLR start synpred204_ChemicalChunker
    public final void synpred204_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:112: ( procedureNode )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:112: procedureNode
        {
        pushFollow(FOLLOW_procedureNode_in_synpred204_ChemicalChunker1083_static.FOLLOW_procedureNode_in_synpred204_ChemicalChunker1083);
        procedureNode();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred204_ChemicalChunker

    // $ANTLR start synpred205_ChemicalChunker
    public final void synpred205_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:126: ( nn )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:126: nn
        {
        pushFollow(FOLLOW_nn_in_synpred205_ChemicalChunker1085_static.FOLLOW_nn_in_synpred205_ChemicalChunker1085);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred205_ChemicalChunker

    // $ANTLR start synpred208_ChemicalChunker
    public final void synpred208_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:137: ( nnadd )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:137: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred208_ChemicalChunker1091_static.FOLLOW_nnadd_in_synpred208_ChemicalChunker1091);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred208_ChemicalChunker

    // $ANTLR start synpred210_ChemicalChunker
    public final void synpred210_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:161: ( nnexample )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:161: nnexample
        {
        pushFollow(FOLLOW_nnexample_in_synpred210_ChemicalChunker1095_static.FOLLOW_nnexample_in_synpred210_ChemicalChunker1095);
        nnexample();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred210_ChemicalChunker

    // $ANTLR start synpred211_ChemicalChunker
    public final void synpred211_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:171: ( range )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:171: range
        {
        pushFollow(FOLLOW_range_in_synpred211_ChemicalChunker1097_static.FOLLOW_range_in_synpred211_ChemicalChunker1097);
        range();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred211_ChemicalChunker

    // $ANTLR start synpred213_ChemicalChunker
    public final void synpred213_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:184: ( nnatmosphere )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:184: nnatmosphere
        {
        pushFollow(FOLLOW_nnatmosphere_in_synpred213_ChemicalChunker1101_static.FOLLOW_nnatmosphere_in_synpred213_ChemicalChunker1101);
        nnatmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred213_ChemicalChunker

    // $ANTLR start synpred215_ChemicalChunker
    public final void synpred215_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:207: ( quantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:207: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred215_ChemicalChunker1105_static.FOLLOW_quantity_in_synpred215_ChemicalChunker1105);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred215_ChemicalChunker

    // $ANTLR start synpred216_ChemicalChunker
    public final void synpred216_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:216: ( nnchementity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:216: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred216_ChemicalChunker1107_static.FOLLOW_nnchementity_in_synpred216_ChemicalChunker1107);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred216_ChemicalChunker

    // $ANTLR start synpred218_ChemicalChunker
    public final void synpred218_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:236: ( nnph )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:236: nnph
        {
        pushFollow(FOLLOW_nnph_in_synpred218_ChemicalChunker1111_static.FOLLOW_nnph_in_synpred218_ChemicalChunker1111);
        nnph();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred218_ChemicalChunker

    // $ANTLR start synpred220_ChemicalChunker
    public final void synpred220_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:249: ( nngeneral )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:249: nngeneral
        {
        pushFollow(FOLLOW_nngeneral_in_synpred220_ChemicalChunker1115_static.FOLLOW_nngeneral_in_synpred220_ChemicalChunker1115);
        nngeneral();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred220_ChemicalChunker

    // $ANTLR start synpred223_ChemicalChunker
    public final void synpred223_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:273: ( nnpressure )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:273: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred223_ChemicalChunker1121_static.FOLLOW_nnpressure_in_synpred223_ChemicalChunker1121);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred223_ChemicalChunker

    // $ANTLR start synpred233_ChemicalChunker
    public final void synpred233_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:377: ( nnmixture )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:377: nnmixture
        {
        pushFollow(FOLLOW_nnmixture_in_synpred233_ChemicalChunker1141_static.FOLLOW_nnmixture_in_synpred233_ChemicalChunker1141);
        nnmixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred233_ChemicalChunker

    // $ANTLR start synpred234_ChemicalChunker
    public final void synpred234_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:387: ( squareBracketedReference )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:387: squareBracketedReference
        {
        pushFollow(FOLLOW_squareBracketedReference_in_synpred234_ChemicalChunker1143_static.FOLLOW_squareBracketedReference_in_synpred234_ChemicalChunker1143);
        squareBracketedReference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred234_ChemicalChunker

    // $ANTLR start synpred240_ChemicalChunker
    public final void synpred240_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:460: ( nnyield )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:229:460: nnyield
        {
        pushFollow(FOLLOW_nnyield_in_synpred240_ChemicalChunker1155_static.FOLLOW_nnyield_in_synpred240_ChemicalChunker1155);
        nnyield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred240_ChemicalChunker

    // $ANTLR start synpred248_ChemicalChunker
    public final void synpred248_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:234:11: ( prepphraseAtmosphere )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:234:11: prepphraseAtmosphere
        {
        pushFollow(FOLLOW_prepphraseAtmosphere_in_synpred248_ChemicalChunker1185_static.FOLLOW_prepphraseAtmosphere_in_synpred248_ChemicalChunker1185);
        prepphraseAtmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred248_ChemicalChunker

    // $ANTLR start synpred249_ChemicalChunker
    public final void synpred249_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:234:32: ( prepphraseTime )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:234:32: prepphraseTime
        {
        pushFollow(FOLLOW_prepphraseTime_in_synpred249_ChemicalChunker1187_static.FOLLOW_prepphraseTime_in_synpred249_ChemicalChunker1187);
        prepphraseTime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred249_ChemicalChunker

    // $ANTLR start synpred250_ChemicalChunker
    public final void synpred250_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:234:47: ( prepphraseTemp )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:234:47: prepphraseTemp
        {
        pushFollow(FOLLOW_prepphraseTemp_in_synpred250_ChemicalChunker1189_static.FOLLOW_prepphraseTemp_in_synpred250_ChemicalChunker1189);
        prepphraseTemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred250_ChemicalChunker

    // $ANTLR start synpred251_ChemicalChunker
    public final void synpred251_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:234:62: ( prepphraseIN )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:234:62: prepphraseIN
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred251_ChemicalChunker1191_static.FOLLOW_prepphraseIN_in_synpred251_ChemicalChunker1191);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred251_ChemicalChunker

    // $ANTLR start synpred252_ChemicalChunker
    public final void synpred252_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:234:75: ( prepphraseRole )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:234:75: prepphraseRole
        {
        pushFollow(FOLLOW_prepphraseRole_in_synpred252_ChemicalChunker1193_static.FOLLOW_prepphraseRole_in_synpred252_ChemicalChunker1193);
        prepphraseRole();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred252_ChemicalChunker

    // $ANTLR start synpred254_ChemicalChunker
    public final void synpred254_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:240:16: ( advAdj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:240:16: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred254_ChemicalChunker1233_static.FOLLOW_advAdj_in_synpred254_ChemicalChunker1233);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred254_ChemicalChunker

    // $ANTLR start synpred255_ChemicalChunker
    public final void synpred255_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:240:33: ( nnatmosphere )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:240:33: nnatmosphere
        {
        pushFollow(FOLLOW_nnatmosphere_in_synpred255_ChemicalChunker1238_static.FOLLOW_nnatmosphere_in_synpred255_ChemicalChunker1238);
        nnatmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred255_ChemicalChunker

    // $ANTLR start synpred256_ChemicalChunker
    public final void synpred256_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:246:3: ( advAdj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:246:3: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred256_ChemicalChunker1266_static.FOLLOW_advAdj_in_synpred256_ChemicalChunker1266);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred256_ChemicalChunker

    // $ANTLR start synpred261_ChemicalChunker
    public final void synpred261_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:246:35: ( nntime )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:246:35: nntime
        {
        pushFollow(FOLLOW_nntime_in_synpred261_ChemicalChunker1282_static.FOLLOW_nntime_in_synpred261_ChemicalChunker1282);
        nntime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred261_ChemicalChunker

    // $ANTLR start synpred262_ChemicalChunker
    public final void synpred262_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:251:5: ( advAdj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:251:5: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred262_ChemicalChunker1313_static.FOLLOW_advAdj_in_synpred262_ChemicalChunker1313);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred262_ChemicalChunker

    // $ANTLR start synpred267_ChemicalChunker
    public final void synpred267_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:251:36: ( nntemp )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:251:36: nntemp
        {
        pushFollow(FOLLOW_nntemp_in_synpred267_ChemicalChunker1328_static.FOLLOW_nntemp_in_synpred267_ChemicalChunker1328);
        nntemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred267_ChemicalChunker

    // $ANTLR start synpred273_ChemicalChunker
    public final void synpred273_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:272:15: ( conjunction )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:272:15: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred273_ChemicalChunker1501_static.FOLLOW_conjunction_in_synpred273_ChemicalChunker1501);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred273_ChemicalChunker

    // $ANTLR start synpred274_ChemicalChunker
    public final void synpred274_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:272:15: ( ( conjunction )* apparatus )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:272:15: ( conjunction )* apparatus
        {
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:272:15: ( conjunction )*
        loop238:
        do {
            int alt238=2;
            alt238 = dfa238.predict(input);
            switch (alt238) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred274_ChemicalChunker1501_static.FOLLOW_conjunction_in_synpred274_ChemicalChunker1501);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop238;
            }
        } while (true);

        pushFollow(FOLLOW_apparatus_in_synpred274_ChemicalChunker1504_static.FOLLOW_apparatus_in_synpred274_ChemicalChunker1504);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred274_ChemicalChunker

    // $ANTLR start synpred277_ChemicalChunker
    public final void synpred277_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:274:22: ( nnApp )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:274:22: nnApp
        {
        pushFollow(FOLLOW_nnApp_in_synpred277_ChemicalChunker1521_static.FOLLOW_nnApp_in_synpred277_ChemicalChunker1521);
        nnApp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred277_ChemicalChunker

    // $ANTLR start synpred278_ChemicalChunker
    public final void synpred278_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:277:4: ( nnapparatus )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:277:4: nnapparatus
        {
        pushFollow(FOLLOW_nnapparatus_in_synpred278_ChemicalChunker1548_static.FOLLOW_nnapparatus_in_synpred278_ChemicalChunker1548);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred278_ChemicalChunker

    // $ANTLR start synpred279_ChemicalChunker
    public final void synpred279_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:277:18: ( dash nnapparatus )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:277:18: dash nnapparatus
        {
        pushFollow(FOLLOW_dash_in_synpred279_ChemicalChunker1552_static.FOLLOW_dash_in_synpred279_ChemicalChunker1552);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nnapparatus_in_synpred279_ChemicalChunker1554_static.FOLLOW_nnapparatus_in_synpred279_ChemicalChunker1554);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred279_ChemicalChunker

    // $ANTLR start synpred280_ChemicalChunker
    public final void synpred280_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:279:8: ( quantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:279:8: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred280_ChemicalChunker1568_static.FOLLOW_quantity_in_synpred280_ChemicalChunker1568);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred280_ChemicalChunker

    // $ANTLR start synpred281_ChemicalChunker
    public final void synpred281_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:279:17: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:279:17: adj
        {
        pushFollow(FOLLOW_adj_in_synpred281_ChemicalChunker1570_static.FOLLOW_adj_in_synpred281_ChemicalChunker1570);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred281_ChemicalChunker

    // $ANTLR start synpred282_ChemicalChunker
    public final void synpred282_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:279:21: ( nnpressure )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:279:21: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred282_ChemicalChunker1572_static.FOLLOW_nnpressure_in_synpred282_ChemicalChunker1572);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred282_ChemicalChunker

    // $ANTLR start synpred283_ChemicalChunker
    public final void synpred283_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:279:32: ( nnadd )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:279:32: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred283_ChemicalChunker1574_static.FOLLOW_nnadd_in_synpred283_ChemicalChunker1574);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred283_ChemicalChunker

    // $ANTLR start synpred284_ChemicalChunker
    public final void synpred284_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:279:38: ( molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:279:38: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred284_ChemicalChunker1576_static.FOLLOW_molecule_in_synpred284_ChemicalChunker1576);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred284_ChemicalChunker

    // $ANTLR start synpred285_ChemicalChunker
    public final void synpred285_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:279:47: ( nnchementity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:279:47: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred285_ChemicalChunker1578_static.FOLLOW_nnchementity_in_synpred285_ChemicalChunker1578);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred285_ChemicalChunker

    // $ANTLR start synpred286_ChemicalChunker
    public final void synpred286_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:279:60: ( nnstate )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:279:60: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred286_ChemicalChunker1580_static.FOLLOW_nnstate_in_synpred286_ChemicalChunker1580);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred286_ChemicalChunker

    // $ANTLR start synpred287_ChemicalChunker
    public final void synpred287_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:279:68: ( nn )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:279:68: nn
        {
        pushFollow(FOLLOW_nn_in_synpred287_ChemicalChunker1582_static.FOLLOW_nn_in_synpred287_ChemicalChunker1582);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred287_ChemicalChunker

    // $ANTLR start synpred290_ChemicalChunker
    public final void synpred290_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:281:55: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:281:55: adj
        {
        pushFollow(FOLLOW_adj_in_synpred290_ChemicalChunker1603_static.FOLLOW_adj_in_synpred290_ChemicalChunker1603);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred290_ChemicalChunker

    // $ANTLR start synpred291_ChemicalChunker
    public final void synpred291_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:281:60: ( nnstate )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:281:60: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred291_ChemicalChunker1606_static.FOLLOW_nnstate_in_synpred291_ChemicalChunker1606);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred291_ChemicalChunker

    // $ANTLR start synpred292_ChemicalChunker
    public final void synpred292_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:281:70: ( numericReferenceOrQuantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:281:70: numericReferenceOrQuantity
        {
        pushFollow(FOLLOW_numericReferenceOrQuantity_in_synpred292_ChemicalChunker1610_static.FOLLOW_numericReferenceOrQuantity_in_synpred292_ChemicalChunker1610);
        numericReferenceOrQuantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred292_ChemicalChunker

    // $ANTLR start synpred293_ChemicalChunker
    public final void synpred293_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:281:99: ( nnchementity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:281:99: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred293_ChemicalChunker1614_static.FOLLOW_nnchementity_in_synpred293_ChemicalChunker1614);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred293_ChemicalChunker

    // $ANTLR start synpred294_ChemicalChunker
    public final void synpred294_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:281:115: ( quantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:281:115: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred294_ChemicalChunker1619_static.FOLLOW_quantity_in_synpred294_ChemicalChunker1619);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred294_ChemicalChunker

    // $ANTLR start synpred295_ChemicalChunker
    public final void synpred295_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:281:125: ( fromProcedure )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:281:125: fromProcedure
        {
        pushFollow(FOLLOW_fromProcedure_in_synpred295_ChemicalChunker1622_static.FOLLOW_fromProcedure_in_synpred295_ChemicalChunker1622);
        fromProcedure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred295_ChemicalChunker

    // $ANTLR start synpred296_ChemicalChunker
    public final void synpred296_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:283:26: ( oscarcm )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:283:26: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred296_ChemicalChunker1631_static.FOLLOW_oscarcm_in_synpred296_ChemicalChunker1631);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred296_ChemicalChunker

    // $ANTLR start synpred297_ChemicalChunker
    public final void synpred297_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:283:35: ( afterOscarCompoundStructure )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:283:35: afterOscarCompoundStructure
        {
        pushFollow(FOLLOW_afterOscarCompoundStructure_in_synpred297_ChemicalChunker1634_static.FOLLOW_afterOscarCompoundStructure_in_synpred297_ChemicalChunker1634);
        afterOscarCompoundStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred297_ChemicalChunker

    // $ANTLR start synpred299_ChemicalChunker
    public final void synpred299_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:36: ( oscarcm )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:36: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred299_ChemicalChunker1664_static.FOLLOW_oscarcm_in_synpred299_ChemicalChunker1664);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred299_ChemicalChunker

    // $ANTLR start synpred300_ChemicalChunker
    public final void synpred300_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:31: ( dash ( oscarcm )+ )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:31: dash ( oscarcm )+
        {
        pushFollow(FOLLOW_dash_in_synpred300_ChemicalChunker1662_static.FOLLOW_dash_in_synpred300_ChemicalChunker1662);
        dash();

        state._fsp--;
        if (state.failed) return ;
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:36: ( oscarcm )+
        int cnt241=0;
        loop241:
        do {
            int alt241=2;
            switch ( input.LA(1) ) {
            case 84:
                {
                alt241=1;
                }
                break;

            }

            switch (alt241) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: oscarcm
        	    {
        	    pushFollow(FOLLOW_oscarcm_in_synpred300_ChemicalChunker1664_static.FOLLOW_oscarcm_in_synpred300_ChemicalChunker1664);
        	    oscarcm();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt241 >= 1 ) break loop241;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(241, input);
                    throw eee;
            }
            cnt241++;
        } while (true);


        }
    }
    // $ANTLR end synpred300_ChemicalChunker

    // $ANTLR start synpred301_ChemicalChunker
    public final void synpred301_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:47: ( dash )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:47: dash
        {
        pushFollow(FOLLOW_dash_in_synpred301_ChemicalChunker1669_static.FOLLOW_dash_in_synpred301_ChemicalChunker1669);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred301_ChemicalChunker

    // $ANTLR start synpred302_ChemicalChunker
    public final void synpred302_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:30: ( ( dash ( oscarcm )+ )+ ( dash )? )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:30: ( dash ( oscarcm )+ )+ ( dash )?
        {
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:30: ( dash ( oscarcm )+ )+
        int cnt243=0;
        loop243:
        do {
            int alt243=2;
            switch ( input.LA(1) ) {
            case 136:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 84:
                        {
                        alt243=1;
                        }
                        break;

                    }

                    }
                    break;

                }

                }
                break;

            }

            switch (alt243) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:31: dash ( oscarcm )+
        	    {
        	    pushFollow(FOLLOW_dash_in_synpred302_ChemicalChunker1662_static.FOLLOW_dash_in_synpred302_ChemicalChunker1662);
        	    dash();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:36: ( oscarcm )+
        	    int cnt242=0;
        	    loop242:
        	    do {
        	        int alt242=2;
        	        switch ( input.LA(1) ) {
        	        case 84:
        	            {
        	            alt242=1;
        	            }
        	            break;

        	        }

        	        switch (alt242) {
        	    	case 1 :
        	    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: oscarcm
        	    	    {
        	    	    pushFollow(FOLLOW_oscarcm_in_synpred302_ChemicalChunker1664_static.FOLLOW_oscarcm_in_synpred302_ChemicalChunker1664);
        	    	    oscarcm();

        	    	    state._fsp--;
        	    	    if (state.failed) return ;

        	    	    }
        	    	    break;

        	    	default :
        	    	    if ( cnt242 >= 1 ) break loop242;
        	    	    if (state.backtracking>0) {state.failed=true; return ;}
        	                EarlyExitException eee =
        	                    new EarlyExitException(242, input);
        	                throw eee;
        	        }
        	        cnt242++;
        	    } while (true);


        	    }
        	    break;

        	default :
        	    if ( cnt243 >= 1 ) break loop243;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(243, input);
                    throw eee;
            }
            cnt243++;
        } while (true);

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:47: ( dash )?
        int alt244=2;
        switch ( input.LA(1) ) {
            case 136:
                {
                alt244=1;
                }
                break;
        }

        switch (alt244) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dash
                {
                pushFollow(FOLLOW_dash_in_synpred302_ChemicalChunker1669_static.FOLLOW_dash_in_synpred302_ChemicalChunker1669);
                dash();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred302_ChemicalChunker

    // $ANTLR start synpred306_ChemicalChunker
    public final void synpred306_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:53: ( ( colon ( oscarcm )+ )+ ( lrb )? ratio )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:54: ( colon ( oscarcm )+ )+ ( lrb )? ratio
        {
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:54: ( colon ( oscarcm )+ )+
        int cnt247=0;
        loop247:
        do {
            int alt247=2;
            switch ( input.LA(1) ) {
            case 132:
                {
                alt247=1;
                }
                break;

            }

            switch (alt247) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:55: colon ( oscarcm )+
        	    {
        	    pushFollow(FOLLOW_colon_in_synpred306_ChemicalChunker1674_static.FOLLOW_colon_in_synpred306_ChemicalChunker1674);
        	    colon();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:61: ( oscarcm )+
        	    int cnt246=0;
        	    loop246:
        	    do {
        	        int alt246=2;
        	        switch ( input.LA(1) ) {
        	        case 84:
        	            {
        	            alt246=1;
        	            }
        	            break;

        	        }

        	        switch (alt246) {
        	    	case 1 :
        	    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: oscarcm
        	    	    {
        	    	    pushFollow(FOLLOW_oscarcm_in_synpred306_ChemicalChunker1676_static.FOLLOW_oscarcm_in_synpred306_ChemicalChunker1676);
        	    	    oscarcm();

        	    	    state._fsp--;
        	    	    if (state.failed) return ;

        	    	    }
        	    	    break;

        	    	default :
        	    	    if ( cnt246 >= 1 ) break loop246;
        	    	    if (state.backtracking>0) {state.failed=true; return ;}
        	                EarlyExitException eee =
        	                    new EarlyExitException(246, input);
        	                throw eee;
        	        }
        	        cnt246++;
        	    } while (true);


        	    }
        	    break;

        	default :
        	    if ( cnt247 >= 1 ) break loop247;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(247, input);
                    throw eee;
            }
            cnt247++;
        } while (true);

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:72: ( lrb )?
        int alt248=2;
        switch ( input.LA(1) ) {
            case 143:
                {
                alt248=1;
                }
                break;
        }

        switch (alt248) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: lrb
                {
                pushFollow(FOLLOW_lrb_in_synpred306_ChemicalChunker1681_static.FOLLOW_lrb_in_synpred306_ChemicalChunker1681);
                lrb();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_ratio_in_synpred306_ChemicalChunker1684_static.FOLLOW_ratio_in_synpred306_ChemicalChunker1684);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred306_ChemicalChunker

    // $ANTLR start synpred307_ChemicalChunker
    public final void synpred307_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:92: ( oscarcm )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:92: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred307_ChemicalChunker1690_static.FOLLOW_oscarcm_in_synpred307_ChemicalChunker1690);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred307_ChemicalChunker

    // $ANTLR start synpred308_ChemicalChunker
    public final void synpred308_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:86: ( colon ( oscarcm )+ )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:86: colon ( oscarcm )+
        {
        pushFollow(FOLLOW_colon_in_synpred308_ChemicalChunker1688_static.FOLLOW_colon_in_synpred308_ChemicalChunker1688);
        colon();

        state._fsp--;
        if (state.failed) return ;
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:92: ( oscarcm )+
        int cnt249=0;
        loop249:
        do {
            int alt249=2;
            switch ( input.LA(1) ) {
            case 84:
                {
                alt249=1;
                }
                break;

            }

            switch (alt249) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: oscarcm
        	    {
        	    pushFollow(FOLLOW_oscarcm_in_synpred308_ChemicalChunker1690_static.FOLLOW_oscarcm_in_synpred308_ChemicalChunker1690);
        	    oscarcm();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt249 >= 1 ) break loop249;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(249, input);
                    throw eee;
            }
            cnt249++;
        } while (true);


        }
    }
    // $ANTLR end synpred308_ChemicalChunker

    // $ANTLR start synpred309_ChemicalChunker
    public final void synpred309_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:104: ( dash )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:104: dash
        {
        pushFollow(FOLLOW_dash_in_synpred309_ChemicalChunker1696_static.FOLLOW_dash_in_synpred309_ChemicalChunker1696);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred309_ChemicalChunker

    // $ANTLR start synpred310_ChemicalChunker
    public final void synpred310_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:109: ( apost )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:109: apost
        {
        pushFollow(FOLLOW_apost_in_synpred310_ChemicalChunker1698_static.FOLLOW_apost_in_synpred310_ChemicalChunker1698);
        apost();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred310_ChemicalChunker

    // $ANTLR start synpred312_ChemicalChunker
    public final void synpred312_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:290:19: ( moleculeamount3 )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:290:19: moleculeamount3
        {
        pushFollow(FOLLOW_moleculeamount3_in_synpred312_ChemicalChunker1741_static.FOLLOW_moleculeamount3_in_synpred312_ChemicalChunker1741);
        moleculeamount3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred312_ChemicalChunker

    // $ANTLR start synpred313_ChemicalChunker
    public final void synpred313_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:290:36: ( moleculeamount1 )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:290:36: moleculeamount1
        {
        pushFollow(FOLLOW_moleculeamount1_in_synpred313_ChemicalChunker1744_static.FOLLOW_moleculeamount1_in_synpred313_ChemicalChunker1744);
        moleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred313_ChemicalChunker

    // $ANTLR start synpred314_ChemicalChunker
    public final void synpred314_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:290:71: ( asAstate )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:290:71: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred314_ChemicalChunker1751_static.FOLLOW_asAstate_in_synpred314_ChemicalChunker1751);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred314_ChemicalChunker

    // $ANTLR start synpred315_ChemicalChunker
    public final void synpred315_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:293:4: ( quantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:293:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred315_ChemicalChunker1762_static.FOLLOW_quantity_in_synpred315_ChemicalChunker1762);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred315_ChemicalChunker

    // $ANTLR start synpred316_ChemicalChunker
    public final void synpred316_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:293:13: ( bracketedContentInMol )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:293:13: bracketedContentInMol
        {
        pushFollow(FOLLOW_bracketedContentInMol_in_synpred316_ChemicalChunker1764_static.FOLLOW_bracketedContentInMol_in_synpred316_ChemicalChunker1764);
        bracketedContentInMol();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred316_ChemicalChunker

    // $ANTLR start synpred319_ChemicalChunker
    public final void synpred319_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:293:78: ( bracketedContentInMol )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:293:78: bracketedContentInMol
        {
        pushFollow(FOLLOW_bracketedContentInMol_in_synpred319_ChemicalChunker1781_static.FOLLOW_bracketedContentInMol_in_synpred319_ChemicalChunker1781);
        bracketedContentInMol();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred319_ChemicalChunker

    // $ANTLR start synpred322_ChemicalChunker
    public final void synpred322_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:296:30: ( quantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:296:30: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred322_ChemicalChunker1803_static.FOLLOW_quantity_in_synpred322_ChemicalChunker1803);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred322_ChemicalChunker

    // $ANTLR start synpred323_ChemicalChunker
    public final void synpred323_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:296:39: ( bracketedContentInMol )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:296:39: bracketedContentInMol
        {
        pushFollow(FOLLOW_bracketedContentInMol_in_synpred323_ChemicalChunker1805_static.FOLLOW_bracketedContentInMol_in_synpred323_ChemicalChunker1805);
        bracketedContentInMol();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred323_ChemicalChunker

    // $ANTLR start synpred328_ChemicalChunker
    public final void synpred328_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:296:100: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:296:100: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred328_ChemicalChunker1828_static.FOLLOW_oscarCompound_in_synpred328_ChemicalChunker1828);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred328_ChemicalChunker

    // $ANTLR start synpred329_ChemicalChunker
    public final void synpred329_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:299:4: ( quantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:299:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred329_ChemicalChunker1840_static.FOLLOW_quantity_in_synpred329_ChemicalChunker1840);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred329_ChemicalChunker

    // $ANTLR start synpred330_ChemicalChunker
    public final void synpred330_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:299:13: ( bracketedContentInMol )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:299:13: bracketedContentInMol
        {
        pushFollow(FOLLOW_bracketedContentInMol_in_synpred330_ChemicalChunker1842_static.FOLLOW_bracketedContentInMol_in_synpred330_ChemicalChunker1842);
        bracketedContentInMol();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred330_ChemicalChunker

    // $ANTLR start synpred331_ChemicalChunker
    public final void synpred331_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:299:37: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:299:37: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred331_ChemicalChunker1846_static.FOLLOW_oscarCompound_in_synpred331_ChemicalChunker1846);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred331_ChemicalChunker

    // $ANTLR start synpred332_ChemicalChunker
    public final void synpred332_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:301:35: ( citation )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:301:35: citation
        {
        pushFollow(FOLLOW_citation_in_synpred332_ChemicalChunker1857_static.FOLLOW_citation_in_synpred332_ChemicalChunker1857);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred332_ChemicalChunker

    // $ANTLR start synpred333_ChemicalChunker
    public final void synpred333_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:301:44: ( quantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:301:44: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred333_ChemicalChunker1859_static.FOLLOW_quantity_in_synpred333_ChemicalChunker1859);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred333_ChemicalChunker

    // $ANTLR start synpred335_ChemicalChunker
    public final void synpred335_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:301:53: ( comma ( quantity1Node | citationStructure ) )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:301:53: comma ( quantity1Node | citationStructure )
        {
        pushFollow(FOLLOW_comma_in_synpred335_ChemicalChunker1861_static.FOLLOW_comma_in_synpred335_ChemicalChunker1861);
        comma();

        state._fsp--;
        if (state.failed) return ;
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:301:59: ( quantity1Node | citationStructure )
        int alt251=2;
        switch ( input.LA(1) ) {
        case 143:
            {
            switch ( input.LA(2) ) {
            case TOKEN:
                {
                switch ( input.LA(3) ) {
                case 133:
                case 145:
                case 149:
                case 158:
                    {
                    alt251=2;
                    }
                    break;
                case 146:
                    {
                    switch ( input.LA(4) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(5) ) {
                        case 133:
                        case 145:
                        case 146:
                        case 149:
                        case 158:
                            {
                            alt251=2;
                            }
                            break;
                        case 44:
                        case 65:
                        case 66:
                        case 67:
                        case 69:
                        case 70:
                        case 138:
                        case 156:
                            {
                            alt251=1;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 251, 6, input);

                            throw nvae;
                        }

                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 251, 4, input);

                        throw nvae;
                    }

                    }
                    break;
                case 73:
                case 130:
                    {
                    alt251=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 2, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 251, 1, input);

                throw nvae;
            }

            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 251, 0, input);

            throw nvae;
        }

        switch (alt251) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:301:60: quantity1Node
                {
                pushFollow(FOLLOW_quantity1Node_in_synpred335_ChemicalChunker1864_static.FOLLOW_quantity1Node_in_synpred335_ChemicalChunker1864);
                quantity1Node();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:301:74: citationStructure
                {
                pushFollow(FOLLOW_citationStructure_in_synpred335_ChemicalChunker1866_static.FOLLOW_citationStructure_in_synpred335_ChemicalChunker1866);
                citationStructure();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred335_ChemicalChunker

    // $ANTLR start synpred336_ChemicalChunker
    public final void synpred336_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:301:93: ( bracketedContentInMol )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:301:93: bracketedContentInMol
        {
        pushFollow(FOLLOW_bracketedContentInMol_in_synpred336_ChemicalChunker1869_static.FOLLOW_bracketedContentInMol_in_synpred336_ChemicalChunker1869);
        bracketedContentInMol();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred336_ChemicalChunker

    // $ANTLR start synpred337_ChemicalChunker
    public final void synpred337_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:307:68: ( asAstate )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:307:68: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred337_ChemicalChunker1901_static.FOLLOW_asAstate_in_synpred337_ChemicalChunker1901);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred337_ChemicalChunker

    // $ANTLR start synpred338_ChemicalChunker
    public final void synpred338_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:310:16: ( potentialUnnamedMoleculeAmount1 )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:310:16: potentialUnnamedMoleculeAmount1
        {
        pushFollow(FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred338_ChemicalChunker1914_static.FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred338_ChemicalChunker1914);
        potentialUnnamedMoleculeAmount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred338_ChemicalChunker

    // $ANTLR start synpred339_ChemicalChunker
    public final void synpred339_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:310:50: ( potentialUnnamedMoleculeAmount2 )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:310:50: potentialUnnamedMoleculeAmount2
        {
        pushFollow(FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred339_ChemicalChunker1918_static.FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred339_ChemicalChunker1918);
        potentialUnnamedMoleculeAmount2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred339_ChemicalChunker

    // $ANTLR start synpred341_ChemicalChunker
    public final void synpred341_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:310:112: ( potentialUnnamedMoleculeAmount2 )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:310:112: potentialUnnamedMoleculeAmount2
        {
        pushFollow(FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred341_ChemicalChunker1928_static.FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred341_ChemicalChunker1928);
        potentialUnnamedMoleculeAmount2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred341_ChemicalChunker

    // $ANTLR start synpred342_ChemicalChunker
    public final void synpred342_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:313:4: ( quantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:313:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred342_ChemicalChunker1941_static.FOLLOW_quantity_in_synpred342_ChemicalChunker1941);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred342_ChemicalChunker

    // $ANTLR start synpred346_ChemicalChunker
    public final void synpred346_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:316:29: ( quantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:316:29: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred346_ChemicalChunker1965_static.FOLLOW_quantity_in_synpred346_ChemicalChunker1965);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred346_ChemicalChunker

    // $ANTLR start synpred347_ChemicalChunker
    public final void synpred347_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:316:39: ( asAstate )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:316:39: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred347_ChemicalChunker1968_static.FOLLOW_asAstate_in_synpred347_ChemicalChunker1968);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred347_ChemicalChunker

    // $ANTLR start synpred348_ChemicalChunker
    public final void synpred348_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:316:49: ( fromProcedure )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:316:49: fromProcedure
        {
        pushFollow(FOLLOW_fromProcedure_in_synpred348_ChemicalChunker1971_static.FOLLOW_fromProcedure_in_synpred348_ChemicalChunker1971);
        fromProcedure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred348_ChemicalChunker

    // $ANTLR start synpred353_ChemicalChunker
    public final void synpred353_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:319:148: ( quantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:319:148: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred353_ChemicalChunker2011_static.FOLLOW_quantity_in_synpred353_ChemicalChunker2011);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred353_ChemicalChunker

    // $ANTLR start synpred354_ChemicalChunker
    public final void synpred354_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:319:158: ( asAstate )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:319:158: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred354_ChemicalChunker2014_static.FOLLOW_asAstate_in_synpred354_ChemicalChunker2014);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred354_ChemicalChunker

    // $ANTLR start synpred355_ChemicalChunker
    public final void synpred355_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:319:168: ( fromProcedure )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:319:168: fromProcedure
        {
        pushFollow(FOLLOW_fromProcedure_in_synpred355_ChemicalChunker2017_static.FOLLOW_fromProcedure_in_synpred355_ChemicalChunker2017);
        fromProcedure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred355_ChemicalChunker

    // $ANTLR start synpred356_ChemicalChunker
    public final void synpred356_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:322:37: ( quantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:322:37: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred356_ChemicalChunker2029_static.FOLLOW_quantity_in_synpred356_ChemicalChunker2029);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred356_ChemicalChunker

    // $ANTLR start synpred357_ChemicalChunker
    public final void synpred357_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:322:47: ( asAstate )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:322:47: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred357_ChemicalChunker2032_static.FOLLOW_asAstate_in_synpred357_ChemicalChunker2032);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred357_ChemicalChunker

    // $ANTLR start synpred358_ChemicalChunker
    public final void synpred358_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:322:57: ( fromProcedure )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:322:57: fromProcedure
        {
        pushFollow(FOLLOW_fromProcedure_in_synpred358_ChemicalChunker2035_static.FOLLOW_fromProcedure_in_synpred358_ChemicalChunker2035);
        fromProcedure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred358_ChemicalChunker

    // $ANTLR start synpred361_ChemicalChunker
    public final void synpred361_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:325:82: ( numericReferenceOrQuantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:325:82: numericReferenceOrQuantity
        {
        pushFollow(FOLLOW_numericReferenceOrQuantity_in_synpred361_ChemicalChunker2059_static.FOLLOW_numericReferenceOrQuantity_in_synpred361_ChemicalChunker2059);
        numericReferenceOrQuantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred361_ChemicalChunker

    // $ANTLR start synpred364_ChemicalChunker
    public final void synpred364_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:328:66: ( numericReferenceOrQuantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:328:66: numericReferenceOrQuantity
        {
        pushFollow(FOLLOW_numericReferenceOrQuantity_in_synpred364_ChemicalChunker2080_static.FOLLOW_numericReferenceOrQuantity_in_synpred364_ChemicalChunker2080);
        numericReferenceOrQuantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred364_ChemicalChunker

    // $ANTLR start synpred377_ChemicalChunker
    public final void synpred377_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:335:4: ( quantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:335:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred377_ChemicalChunker2136_static.FOLLOW_quantity_in_synpred377_ChemicalChunker2136);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred377_ChemicalChunker

    // $ANTLR start synpred382_ChemicalChunker
    public final void synpred382_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:338:42: ( quantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:338:42: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred382_ChemicalChunker2165_static.FOLLOW_quantity_in_synpred382_ChemicalChunker2165);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred382_ChemicalChunker

    // $ANTLR start synpred383_ChemicalChunker
    public final void synpred383_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:350:6: ( captionLabelContent )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:350:6: captionLabelContent
        {
        pushFollow(FOLLOW_captionLabelContent_in_synpred383_ChemicalChunker2236_static.FOLLOW_captionLabelContent_in_synpred383_ChemicalChunker2236);
        captionLabelContent();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred383_ChemicalChunker

    // $ANTLR start synpred384_ChemicalChunker
    public final void synpred384_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:352:36: ( conjunction allIdentifierTypes )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:352:36: conjunction allIdentifierTypes
        {
        pushFollow(FOLLOW_conjunction_in_synpred384_ChemicalChunker2262_static.FOLLOW_conjunction_in_synpred384_ChemicalChunker2262);
        conjunction();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_allIdentifierTypes_in_synpred384_ChemicalChunker2264_static.FOLLOW_allIdentifierTypes_in_synpred384_ChemicalChunker2264);
        allIdentifierTypes();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred384_ChemicalChunker

    // $ANTLR start synpred389_ChemicalChunker
    public final void synpred389_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:364:19: ( comma measurements )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:364:19: comma measurements
        {
        pushFollow(FOLLOW_comma_in_synpred389_ChemicalChunker2368_static.FOLLOW_comma_in_synpred389_ChemicalChunker2368);
        comma();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_measurements_in_synpred389_ChemicalChunker2371_static.FOLLOW_measurements_in_synpred389_ChemicalChunker2371);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred389_ChemicalChunker

    // $ANTLR start synpred392_ChemicalChunker
    public final void synpred392_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:367:40: ( dt )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:367:40: dt
        {
        pushFollow(FOLLOW_dt_in_synpred392_ChemicalChunker2396_static.FOLLOW_dt_in_synpred392_ChemicalChunker2396);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred392_ChemicalChunker

    // $ANTLR start synpred393_ChemicalChunker
    public final void synpred393_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:368:25: ( measurementtypes )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:368:25: measurementtypes
        {
        pushFollow(FOLLOW_measurementtypes_in_synpred393_ChemicalChunker2408_static.FOLLOW_measurementtypes_in_synpred393_ChemicalChunker2408);
        measurementtypes();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred393_ChemicalChunker

    // $ANTLR start synpred400_ChemicalChunker
    public final void synpred400_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:370:60: ( yield )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:370:60: yield
        {
        pushFollow(FOLLOW_yield_in_synpred400_ChemicalChunker2445_static.FOLLOW_yield_in_synpred400_ChemicalChunker2445);
        yield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred400_ChemicalChunker

    // $ANTLR start synpred405_ChemicalChunker
    public final void synpred405_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:381:32: ( dash cd percentsign )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:381:32: dash cd percentsign
        {
        pushFollow(FOLLOW_dash_in_synpred405_ChemicalChunker2644_static.FOLLOW_dash_in_synpred405_ChemicalChunker2644);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_cd_in_synpred405_ChemicalChunker2646_static.FOLLOW_cd_in_synpred405_ChemicalChunker2646);
        cd();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_percentsign_in_synpred405_ChemicalChunker2648_static.FOLLOW_percentsign_in_synpred405_ChemicalChunker2648);
        percentsign();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred405_ChemicalChunker

    // $ANTLR start synpred409_ChemicalChunker
    public final void synpred409_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:28: ( verb )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:28: verb
        {
        pushFollow(FOLLOW_verb_in_synpred409_ChemicalChunker2751_static.FOLLOW_verb_in_synpred409_ChemicalChunker2751);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred409_ChemicalChunker

    // $ANTLR start synpred410_ChemicalChunker
    public final void synpred410_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:33: ( noun )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:33: noun
        {
        pushFollow(FOLLOW_noun_in_synpred410_ChemicalChunker2753_static.FOLLOW_noun_in_synpred410_ChemicalChunker2753);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred410_ChemicalChunker

    // $ANTLR start synpred411_ChemicalChunker
    public final void synpred411_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:38: ( bracketedContent )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:38: bracketedContent
        {
        pushFollow(FOLLOW_bracketedContent_in_synpred411_ChemicalChunker2755_static.FOLLOW_bracketedContent_in_synpred411_ChemicalChunker2755);
        bracketedContent();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred411_ChemicalChunker

    // $ANTLR start synpred416_ChemicalChunker
    public final void synpred416_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:81: ( ratio )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:81: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred416_ChemicalChunker2765_static.FOLLOW_ratio_in_synpred416_ChemicalChunker2765);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred416_ChemicalChunker

    // $ANTLR start synpred417_ChemicalChunker
    public final void synpred417_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:87: ( conjunction )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:87: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred417_ChemicalChunker2767_static.FOLLOW_conjunction_in_synpred417_ChemicalChunker2767);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred417_ChemicalChunker

    // $ANTLR start synpred418_ChemicalChunker
    public final void synpred418_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:99: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:99: adj
        {
        pushFollow(FOLLOW_adj_in_synpred418_ChemicalChunker2769_static.FOLLOW_adj_in_synpred418_ChemicalChunker2769);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred418_ChemicalChunker

    // $ANTLR start synpred421_ChemicalChunker
    public final void synpred421_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:114: ( numeric )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:114: numeric
        {
        pushFollow(FOLLOW_numeric_in_synpred421_ChemicalChunker2775_static.FOLLOW_numeric_in_synpred421_ChemicalChunker2775);
        numeric();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred421_ChemicalChunker

    // $ANTLR start synpred429_ChemicalChunker
    public final void synpred429_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:393:33: ( numberCompoundReference ( comma | colon | {...}? stop ) )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:393:33: numberCompoundReference ( comma | colon | {...}? stop )
        {
        pushFollow(FOLLOW_numberCompoundReference_in_synpred429_ChemicalChunker2845_static.FOLLOW_numberCompoundReference_in_synpred429_ChemicalChunker2845);
        numberCompoundReference();

        state._fsp--;
        if (state.failed) return ;
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:393:57: ( comma | colon | {...}? stop )
        int alt260=3;
        switch ( input.LA(1) ) {
        case 133:
            {
            alt260=1;
            }
            break;
        case 132:
            {
            alt260=2;
            }
            break;
        case 137:
            {
            alt260=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 260, 0, input);

            throw nvae;
        }

        switch (alt260) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:393:58: comma
                {
                pushFollow(FOLLOW_comma_in_synpred429_ChemicalChunker2848_static.FOLLOW_comma_in_synpred429_ChemicalChunker2848);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:393:66: colon
                {
                pushFollow(FOLLOW_colon_in_synpred429_ChemicalChunker2852_static.FOLLOW_colon_in_synpred429_ChemicalChunker2852);
                colon();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:393:74: {...}? stop
                {
                if ( !((nextIsSemiColon(input))) ) {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    throw new FailedPredicateException(input, "synpred429_ChemicalChunker", "nextIsSemiColon(input)");
                }
                pushFollow(FOLLOW_stop_in_synpred429_ChemicalChunker2858_static.FOLLOW_stop_in_synpred429_ChemicalChunker2858);
                stop();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred429_ChemicalChunker

    // $ANTLR start synpred431_ChemicalChunker
    public final void synpred431_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:45: ( verb )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:45: verb
        {
        pushFollow(FOLLOW_verb_in_synpred431_ChemicalChunker2878_static.FOLLOW_verb_in_synpred431_ChemicalChunker2878);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred431_ChemicalChunker

    // $ANTLR start synpred432_ChemicalChunker
    public final void synpred432_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:50: ( quantity2Node )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:50: quantity2Node
        {
        pushFollow(FOLLOW_quantity2Node_in_synpred432_ChemicalChunker2880_static.FOLLOW_quantity2Node_in_synpred432_ChemicalChunker2880);
        quantity2Node();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred432_ChemicalChunker

    // $ANTLR start synpred433_ChemicalChunker
    public final void synpred433_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:64: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:64: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred433_ChemicalChunker2882_static.FOLLOW_oscarCompound_in_synpred433_ChemicalChunker2882);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred433_ChemicalChunker

    // $ANTLR start synpred434_ChemicalChunker
    public final void synpred434_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:78: ( alphanumericOrIdentifierCompoundReference )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:78: alphanumericOrIdentifierCompoundReference
        {
        pushFollow(FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred434_ChemicalChunker2884_static.FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred434_ChemicalChunker2884);
        alphanumericOrIdentifierCompoundReference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred434_ChemicalChunker

    // $ANTLR start synpred435_ChemicalChunker
    public final void synpred435_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:120: ( ratio )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:120: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred435_ChemicalChunker2886_static.FOLLOW_ratio_in_synpred435_ChemicalChunker2886);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred435_ChemicalChunker

    // $ANTLR start synpred436_ChemicalChunker
    public final void synpred436_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:126: ( cd )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:126: cd
        {
        pushFollow(FOLLOW_cd_in_synpred436_ChemicalChunker2888_static.FOLLOW_cd_in_synpred436_ChemicalChunker2888);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred436_ChemicalChunker

    // $ANTLR start synpred441_ChemicalChunker
    public final void synpred441_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:155: ( comma )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:155: comma
        {
        pushFollow(FOLLOW_comma_in_synpred441_ChemicalChunker2898_static.FOLLOW_comma_in_synpred441_ChemicalChunker2898);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred441_ChemicalChunker

    // $ANTLR start synpred442_ChemicalChunker
    public final void synpred442_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:161: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:161: adj
        {
        pushFollow(FOLLOW_adj_in_synpred442_ChemicalChunker2900_static.FOLLOW_adj_in_synpred442_ChemicalChunker2900);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred442_ChemicalChunker

    // $ANTLR start synpred445_ChemicalChunker
    public final void synpred445_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:176: ( noun )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:395:176: noun
        {
        pushFollow(FOLLOW_noun_in_synpred445_ChemicalChunker2906_static.FOLLOW_noun_in_synpred445_ChemicalChunker2906);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred445_ChemicalChunker

    // $ANTLR start synpred453_ChemicalChunker
    public final void synpred453_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:402:31: ( allIdentifierTypes )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:402:31: allIdentifierTypes
        {
        pushFollow(FOLLOW_allIdentifierTypes_in_synpred453_ChemicalChunker2979_static.FOLLOW_allIdentifierTypes_in_synpred453_ChemicalChunker2979);
        allIdentifierTypes();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred453_ChemicalChunker

    // $ANTLR start synpred459_ChemicalChunker
    public final void synpred459_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:402:85: ( ( comma | colon | inof | infrom )? submethod )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:402:85: ( comma | colon | inof | infrom )? submethod
        {
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:402:85: ( comma | colon | inof | infrom )?
        int alt263=5;
        switch ( input.LA(1) ) {
            case 133:
                {
                alt263=1;
                }
                break;
            case 132:
                {
                alt263=2;
                }
                break;
            case 56:
                {
                alt263=3;
                }
                break;
            case 59:
                {
                alt263=4;
                }
                break;
        }

        switch (alt263) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:402:86: comma
                {
                pushFollow(FOLLOW_comma_in_synpred459_ChemicalChunker2992_static.FOLLOW_comma_in_synpred459_ChemicalChunker2992);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:402:93: colon
                {
                pushFollow(FOLLOW_colon_in_synpred459_ChemicalChunker2995_static.FOLLOW_colon_in_synpred459_ChemicalChunker2995);
                colon();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:402:100: inof
                {
                pushFollow(FOLLOW_inof_in_synpred459_ChemicalChunker2998_static.FOLLOW_inof_in_synpred459_ChemicalChunker2998);
                inof();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 4 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:402:107: infrom
                {
                pushFollow(FOLLOW_infrom_in_synpred459_ChemicalChunker3002_static.FOLLOW_infrom_in_synpred459_ChemicalChunker3002);
                infrom();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_submethod_in_synpred459_ChemicalChunker3006_static.FOLLOW_submethod_in_synpred459_ChemicalChunker3006);
        submethod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred459_ChemicalChunker

    // $ANTLR start synpred460_ChemicalChunker
    public final void synpred460_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:402:128: ( lrb submethod rrb )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:402:128: lrb submethod rrb
        {
        pushFollow(FOLLOW_lrb_in_synpred460_ChemicalChunker3010_static.FOLLOW_lrb_in_synpred460_ChemicalChunker3010);
        lrb();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_submethod_in_synpred460_ChemicalChunker3012_static.FOLLOW_submethod_in_synpred460_ChemicalChunker3012);
        submethod();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_rrb_in_synpred460_ChemicalChunker3014_static.FOLLOW_rrb_in_synpred460_ChemicalChunker3014);
        rrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred460_ChemicalChunker

    // $ANTLR start synpred470_ChemicalChunker
    public final void synpred470_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:419:15: ( colon cd {...}?)
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:419:15: colon cd {...}?
        {
        pushFollow(FOLLOW_colon_in_synpred470_ChemicalChunker3168_static.FOLLOW_colon_in_synpred470_ChemicalChunker3168);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_cd_in_synpred470_ChemicalChunker3170_static.FOLLOW_cd_in_synpred470_ChemicalChunker3170);
        cd();

        state._fsp--;
        if (state.failed) return ;
        if ( !((!followedByQuantityUnits(input))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred470_ChemicalChunker", "!followedByQuantityUnits(input)");
        }

        }
    }
    // $ANTLR end synpred470_ChemicalChunker

    // $ANTLR start synpred479_ChemicalChunker
    public final void synpred479_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:427:22: ( allIdentifierTypesOtherThanCD )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:427:22: allIdentifierTypesOtherThanCD
        {
        pushFollow(FOLLOW_allIdentifierTypesOtherThanCD_in_synpred479_ChemicalChunker3245_static.FOLLOW_allIdentifierTypesOtherThanCD_in_synpred479_ChemicalChunker3245);
        allIdentifierTypesOtherThanCD();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred479_ChemicalChunker

    // Delegated rules

    public final boolean synpred292_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred306_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred115_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred115_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred445_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred445_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred377_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred377_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred98_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred98_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred358_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred358_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred453_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred453_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred347_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred347_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred429_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred429_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred116_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred116_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred299_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred299_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred312_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred312_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred202_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred202_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred136_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred136_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred460_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred460_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred336_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred336_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred432_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred432_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred418_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred418_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred203_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred203_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred384_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred384_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred364_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred364_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred308_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred308_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred129_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred129_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred417_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred417_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred383_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred383_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred130_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred130_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred197_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred197_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred342_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred342_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred164_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred164_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred328_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred328_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred433_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred433_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred282_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred337_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred337_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred291_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred291_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred267_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred267_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred421_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred421_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred143_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred143_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred277_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred277_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred310_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred310_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred216_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred216_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred199_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred199_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred220_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred220_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred150_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred150_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred409_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred409_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred330_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred330_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred442_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred442_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred416_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred416_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred354_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred354_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred133_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred133_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred141_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred141_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred198_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred198_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred392_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred392_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred339_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred339_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred132_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred132_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred286_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred286_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred355_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred355_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred290_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred290_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred218_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred218_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred144_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred144_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred280_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred280_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred315_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred315_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred411_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred411_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred301_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred301_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred296_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred296_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred316_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred316_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred479_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred479_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred410_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred410_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred400_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred400_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred331_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred331_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred436_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred436_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred85_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred85_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred323_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred323_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred152_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred152_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred434_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred434_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred307_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred335_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred335_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred297_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred297_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred283_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred283_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred165_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred165_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred223_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred151_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred151_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred215_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred215_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred284_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred284_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred322_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred322_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred341_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred341_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred353_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred353_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred131_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred131_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred300_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred300_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred348_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred348_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred293_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred293_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred113_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred113_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred361_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred361_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred329_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred329_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred273_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred204_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred204_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred459_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred459_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred302_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred302_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred295_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred295_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred356_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred356_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred200_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred200_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred274_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred274_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred357_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred357_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred314_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred314_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred287_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred389_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred389_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred313_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred313_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred281_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred281_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred431_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred431_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred201_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred201_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred250_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred250_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred470_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred470_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred405_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred405_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred393_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred393_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred346_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred346_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred441_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred441_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred248_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred248_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred285_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred285_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred309_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred309_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred333_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred333_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred435_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred435_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred205_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred205_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred249_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred249_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred382_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred382_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred332_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred332_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred149_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred149_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred338_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred338_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred319_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred319_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred255_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred255_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA3 dfa3 = new DFA3(this);
    protected DFA2 dfa2 = new DFA2(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA6 dfa6 = new DFA6(this);
    protected DFA7 dfa7 = new DFA7(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA18 dfa18 = new DFA18(this);
    protected DFA17 dfa17 = new DFA17(this);
    protected DFA20 dfa20 = new DFA20(this);
    protected DFA21 dfa21 = new DFA21(this);
    protected DFA22 dfa22 = new DFA22(this);
    protected DFA23 dfa23 = new DFA23(this);
    protected DFA25 dfa25 = new DFA25(this);
    protected DFA27 dfa27 = new DFA27(this);
    protected DFA29 dfa29 = new DFA29(this);
    protected DFA31 dfa31 = new DFA31(this);
    protected DFA41 dfa41 = new DFA41(this);
    protected DFA42 dfa42 = new DFA42(this);
    protected DFA45 dfa45 = new DFA45(this);
    protected DFA46 dfa46 = new DFA46(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA54 dfa54 = new DFA54(this);
    protected DFA60 dfa60 = new DFA60(this);
    protected DFA61 dfa61 = new DFA61(this);
    protected DFA68 dfa68 = new DFA68(this);
    protected DFA69 dfa69 = new DFA69(this);
    protected DFA72 dfa72 = new DFA72(this);
    protected DFA75 dfa75 = new DFA75(this);
    protected DFA77 dfa77 = new DFA77(this);
    protected DFA79 dfa79 = new DFA79(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA87 dfa87 = new DFA87(this);
    protected DFA99 dfa99 = new DFA99(this);
    protected DFA98 dfa98 = new DFA98(this);
    protected DFA105 dfa105 = new DFA105(this);
    protected DFA107 dfa107 = new DFA107(this);
    protected DFA109 dfa109 = new DFA109(this);
    protected DFA110 dfa110 = new DFA110(this);
    protected DFA111 dfa111 = new DFA111(this);
    protected DFA113 dfa113 = new DFA113(this);
    protected DFA123 dfa123 = new DFA123(this);
    protected DFA124 dfa124 = new DFA124(this);
    protected DFA127 dfa127 = new DFA127(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA134 dfa134 = new DFA134(this);
    protected DFA135 dfa135 = new DFA135(this);
    protected DFA137 dfa137 = new DFA137(this);
    protected DFA138 dfa138 = new DFA138(this);
    protected DFA140 dfa140 = new DFA140(this);
    protected DFA139 dfa139 = new DFA139(this);
    protected DFA141 dfa141 = new DFA141(this);
    protected DFA144 dfa144 = new DFA144(this);
    protected DFA145 dfa145 = new DFA145(this);
    protected DFA146 dfa146 = new DFA146(this);
    protected DFA150 dfa150 = new DFA150(this);
    protected DFA151 dfa151 = new DFA151(this);
    protected DFA152 dfa152 = new DFA152(this);
    protected DFA153 dfa153 = new DFA153(this);
    protected DFA154 dfa154 = new DFA154(this);
    protected DFA155 dfa155 = new DFA155(this);
    protected DFA157 dfa157 = new DFA157(this);
    protected DFA160 dfa160 = new DFA160(this);
    protected DFA165 dfa165 = new DFA165(this);
    protected DFA166 dfa166 = new DFA166(this);
    protected DFA169 dfa169 = new DFA169(this);
    protected DFA171 dfa171 = new DFA171(this);
    protected DFA176 dfa176 = new DFA176(this);
    protected DFA180 dfa180 = new DFA180(this);
    protected DFA181 dfa181 = new DFA181(this);
    protected DFA189 dfa189 = new DFA189(this);
    protected DFA196 dfa196 = new DFA196(this);
    protected DFA198 dfa198 = new DFA198(this);
    protected DFA203 dfa203 = new DFA203(this);
    protected DFA206 dfa206 = new DFA206(this);
    protected DFA231 dfa231 = new DFA231(this);
    protected DFA238 dfa238 = new DFA238(this);
    static class DFA3_static {
    static final String DFA3_eotS =
        "\47\uffff";
    static final String DFA3_eofS =
        "\7\uffff\5\6\15\uffff\5\6\5\uffff\1\6\3\uffff";
    static final String DFA3_minS =
        "\1\46\5\45\1\uffff\5\46\11\45\4\0\5\46\1\uffff\4\45\1\46\3\0";
    static final String DFA3_maxS =
        "\1\u00b4\5\45\1\uffff\5\u00b4\11\45\4\0\5\u00b4\1\uffff\4\45\1\u00b4"+
        "\3\0";
    static final String DFA3_acceptS =
        "\6\uffff\1\2\27\uffff\1\1\10\uffff";
    static final String DFA3_specialS =
        "\25\uffff\1\4\1\3\1\6\1\2\13\uffff\1\5\1\1\1\0}>";
    static final String[] DFA3_transitionS = {
            "\1\6\1\3\141\6\1\uffff\1\6\1\5\1\6\1\1\1\6\1\4\2\6\1\2\42\6",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "",
            "\136\6\1\15\4\6\1\14\6\6\1\16\44\6",
            "\136\6\1\17\4\6\1\14\6\6\1\16\44\6",
            "\136\6\1\15\4\6\1\14\6\6\1\16\44\6",
            "\1\6\1\22\145\6\1\21\4\6\1\20\42\6",
            "\1\6\1\24\152\6\1\23\42\6",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "\1\35",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\147\6\1\37\2\6\1\40\44\6",
            "\152\6\1\41\44\6",
            "\152\6\1\40\44\6",
            "\146\6\1\42\50\6",
            "\146\6\1\42\50\6",
            "",
            "\1\43",
            "\1\44",
            "\1\45",
            "\1\46",
            "\152\6\1\41\44\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_static.DFA3_eotS);
    static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_static.DFA3_eofS);
    static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_static.DFA3_minS);
    static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_static.DFA3_maxS);
    static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_static.DFA3_acceptS);
    static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_static.DFA3_specialS);
    static final short[][] DFA3_transition;

    static {
        int numStates = DFA3_static.DFA3_transitionS.length;
        DFA3_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA3_transition[i] = DFA.unpackEncodedString(DFA3_static.DFA3_transitionS[i]);
        }
    }

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = DFA3_eot;
            this.eof = DFA3_eof;
            this.min = DFA3_min;
            this.max = DFA3_max;
            this.accept = DFA3_accept;
            this.special = DFA3_special;
            this.transition = DFA3_transition;
        }
        public String getDescription() {
            return "160:11: ( procedureNounPhrase | ( sentenceStructure | unmatchedPhrase )+ )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA3_38 = input.LA(1);

                         
                        int index3_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index3_38);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA3_37 = input.LA(1);

                         
                        int index3_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index3_37);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA3_24 = input.LA(1);

                         
                        int index3_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index3_24);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA3_22 = input.LA(1);

                         
                        int index3_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index3_22);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA3_21 = input.LA(1);

                         
                        int index3_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index3_21);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA3_36 = input.LA(1);

                         
                        int index3_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index3_36);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA3_23 = input.LA(1);

                         
                        int index3_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index3_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 3, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA2_static {
    static final String DFA2_eotS =
        "\u0092\uffff";
    static final String DFA2_eofS =
        "\1\1\u0091\uffff";
    static final String DFA2_minS =
        "\1\46\1\uffff\u008e\0\2\uffff";
    static final String DFA2_maxS =
        "\1\u00b4\1\uffff\u008e\0\2\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\1\3\u008e\uffff\1\1\1\2";
    static final String DFA2_specialS =
        "\2\uffff\1\33\1\106\1\174\1\145\1\32\1\2\1\122\1\177\1\u008b\1\36"+
        "\1\u0086\1\74\1\76\1\101\1\126\1\u0082\1\u008d\1\173\1\104\1\53"+
        "\1\151\1\165\1\130\1\34\1\112\1\55\1\111\1\40\1\10\1\1\1\171\1\166"+
        "\1\157\1\163\1\176\1\136\1\105\1\154\1\7\1\27\1\131\1\12\1\66\1"+
        "\17\1\132\1\103\1\134\1\146\1\113\1\70\1\50\1\u0080\1\54\1\42\1"+
        "\63\1\155\1\u0084\1\123\1\24\1\121\1\124\1\62\1\15\1\45\1\61\1\140"+
        "\1\144\1\11\1\52\1\117\1\160\1\4\1\u0087\1\114\1\0\1\21\1\71\1\35"+
        "\1\22\1\161\1\142\1\107\1\172\1\u008c\1\116\1\56\1\75\1\u0088\1"+
        "\14\1\41\1\44\1\141\1\127\1\51\1\120\1\65\1\102\1\20\1\26\1\164"+
        "\1\u008a\1\37\1\150\1\125\1\143\1\175\1\110\1\135\1\57\1\30\1\72"+
        "\1\6\1\25\1\153\1\u0085\1\u0083\1\137\1\47\1\77\1\23\1\115\1\147"+
        "\1\133\1\162\1\152\1\u0081\1\43\1\64\1\5\1\3\1\170\1\16\1\167\1"+
        "\156\1\100\1\73\1\67\1\60\1\31\1\13\1\u0089\1\46\2\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\45\1\4\1\16\1\17\1\42\1\53\1\u0085\1\15\1\25\1\114\1\115"+
            "\1\113\1\121\1\122\1\131\1\132\1\116\1\130\1\123\1\125\1\117"+
            "\1\120\1\127\1\126\1\124\1\24\1\52\1\u0086\1\56\1\u0087\1\40"+
            "\1\57\1\66\1\23\1\54\1\10\1\55\1\46\1\47\1\20\1\60\1\61\1\62"+
            "\1\63\1\64\1\37\1\26\1\u0083\1\u0080\1\157\1\150\1\21\1\41\1"+
            "\140\1\135\1\136\1\137\1\141\1\142\1\u0082\1\143\1\144\1\30"+
            "\1\145\1\65\1\146\1\147\1\151\1\152\1\71\1\153\1\72\1\154\1"+
            "\73\1\155\1\156\1\u0081\1\160\1\161\1\74\1\162\1\67\1\163\1"+
            "\164\1\165\1\75\1\166\1\51\1\70\1\167\1\170\1\171\1\11\1\134"+
            "\1\u0088\1\22\1\u0089\1\u0084\1\u008a\1\1\1\u008b\1\6\1\u008c"+
            "\1\2\1\31\1\5\1\u008d\1\u008e\1\3\1\7\1\103\1\76\1\112\1\12"+
            "\1\13\1\14\1\106\1\133\1\27\1\50\1\36\1\107\1\104\1\110\1\43"+
            "\1\44\1\32\1\33\1\35\1\34\1\77\1\111\1\u008f\1\172\1\173\1\174"+
            "\1\175\1\176\1\177\1\100\1\105\1\101\1\102",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_static.DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_static.DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_static.DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_static.DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_static.DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_static.DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_static.DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_static.DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "()+ loopback of 160:34: ( sentenceStructure | unmatchedPhrase )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA2_76 = input.LA(1);

                         
                        int index2_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_76);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA2_31 = input.LA(1);

                         
                        int index2_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_31);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA2_7 = input.LA(1);

                         
                        int index2_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_7);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA2_131 = input.LA(1);

                         
                        int index2_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_131);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA2_73 = input.LA(1);

                         
                        int index2_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_73);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA2_130 = input.LA(1);

                         
                        int index2_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_130);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA2_113 = input.LA(1);

                         
                        int index2_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_113);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA2_40 = input.LA(1);

                         
                        int index2_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_40);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA2_30 = input.LA(1);

                         
                        int index2_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_30);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA2_69 = input.LA(1);

                         
                        int index2_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_69);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA2_43 = input.LA(1);

                         
                        int index2_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_43);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA2_141 = input.LA(1);

                         
                        int index2_141 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_141);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA2_90 = input.LA(1);

                         
                        int index2_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_90);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA2_64 = input.LA(1);

                         
                        int index2_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_64);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA2_133 = input.LA(1);

                         
                        int index2_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_133);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA2_45 = input.LA(1);

                         
                        int index2_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_45);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA2_99 = input.LA(1);

                         
                        int index2_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_99);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA2_77 = input.LA(1);

                         
                        int index2_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_77);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA2_80 = input.LA(1);

                         
                        int index2_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_80);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA2_121 = input.LA(1);

                         
                        int index2_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_121);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA2_60 = input.LA(1);

                         
                        int index2_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_60);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA2_114 = input.LA(1);

                         
                        int index2_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_114);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA2_100 = input.LA(1);

                         
                        int index2_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_100);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA2_41 = input.LA(1);

                         
                        int index2_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_41);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA2_111 = input.LA(1);

                         
                        int index2_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_111);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA2_140 = input.LA(1);

                         
                        int index2_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_140);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA2_6 = input.LA(1);

                         
                        int index2_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_6);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA2_2 = input.LA(1);

                         
                        int index2_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_2);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA2_25 = input.LA(1);

                         
                        int index2_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_25);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA2_79 = input.LA(1);

                         
                        int index2_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_79);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA2_11 = input.LA(1);

                         
                        int index2_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_11);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA2_103 = input.LA(1);

                         
                        int index2_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_103);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA2_29 = input.LA(1);

                         
                        int index2_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_29);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA2_91 = input.LA(1);

                         
                        int index2_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_91);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA2_55 = input.LA(1);

                         
                        int index2_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_55);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA2_128 = input.LA(1);

                         
                        int index2_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_128);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA2_92 = input.LA(1);

                         
                        int index2_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_92);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA2_65 = input.LA(1);

                         
                        int index2_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_65);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA2_143 = input.LA(1);

                         
                        int index2_143 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_143);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA2_119 = input.LA(1);

                         
                        int index2_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_119);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA2_52 = input.LA(1);

                         
                        int index2_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_52);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA2_95 = input.LA(1);

                         
                        int index2_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_95);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA2_70 = input.LA(1);

                         
                        int index2_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_70);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA2_21 = input.LA(1);

                         
                        int index2_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_21);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA2_54 = input.LA(1);

                         
                        int index2_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_54);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA2_27 = input.LA(1);

                         
                        int index2_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_27);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA2_87 = input.LA(1);

                         
                        int index2_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_87);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA2_110 = input.LA(1);

                         
                        int index2_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_110);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA2_139 = input.LA(1);

                         
                        int index2_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_139);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA2_66 = input.LA(1);

                         
                        int index2_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_66);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA2_63 = input.LA(1);

                         
                        int index2_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_63);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA2_56 = input.LA(1);

                         
                        int index2_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_56);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA2_129 = input.LA(1);

                         
                        int index2_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_129);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA2_97 = input.LA(1);

                         
                        int index2_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_97);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA2_44 = input.LA(1);

                         
                        int index2_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_44);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA2_138 = input.LA(1);

                         
                        int index2_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_138);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA2_51 = input.LA(1);

                         
                        int index2_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_51);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA2_78 = input.LA(1);

                         
                        int index2_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_78);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA2_112 = input.LA(1);

                         
                        int index2_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_112);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA2_137 = input.LA(1);

                         
                        int index2_137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_137);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA2_13 = input.LA(1);

                         
                        int index2_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_13);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA2_88 = input.LA(1);

                         
                        int index2_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_88);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA2_14 = input.LA(1);

                         
                        int index2_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_14);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA2_120 = input.LA(1);

                         
                        int index2_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_120);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA2_136 = input.LA(1);

                         
                        int index2_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_136);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA2_15 = input.LA(1);

                         
                        int index2_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_15);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA2_98 = input.LA(1);

                         
                        int index2_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_98);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA2_47 = input.LA(1);

                         
                        int index2_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_47);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA2_20 = input.LA(1);

                         
                        int index2_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_20);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA2_38 = input.LA(1);

                         
                        int index2_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_38);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA2_3 = input.LA(1);

                         
                        int index2_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_3);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA2_83 = input.LA(1);

                         
                        int index2_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_83);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA2_108 = input.LA(1);

                         
                        int index2_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_108);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA2_28 = input.LA(1);

                         
                        int index2_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_28);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA2_26 = input.LA(1);

                         
                        int index2_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_26);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA2_50 = input.LA(1);

                         
                        int index2_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_50);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA2_75 = input.LA(1);

                         
                        int index2_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_75);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA2_122 = input.LA(1);

                         
                        int index2_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_122);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA2_86 = input.LA(1);

                         
                        int index2_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_86);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA2_71 = input.LA(1);

                         
                        int index2_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_71);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA2_96 = input.LA(1);

                         
                        int index2_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_96);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA2_61 = input.LA(1);

                         
                        int index2_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_61);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA2_8 = input.LA(1);

                         
                        int index2_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_8);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA2_59 = input.LA(1);

                         
                        int index2_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_59);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA2_62 = input.LA(1);

                         
                        int index2_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_62);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA2_105 = input.LA(1);

                         
                        int index2_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_105);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA2_16 = input.LA(1);

                         
                        int index2_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_16);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA2_94 = input.LA(1);

                         
                        int index2_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_94);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA2_24 = input.LA(1);

                         
                        int index2_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_24);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA2_42 = input.LA(1);

                         
                        int index2_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_42);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA2_46 = input.LA(1);

                         
                        int index2_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_46);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA2_124 = input.LA(1);

                         
                        int index2_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_124);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA2_48 = input.LA(1);

                         
                        int index2_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_48);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA2_109 = input.LA(1);

                         
                        int index2_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_109);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA2_37 = input.LA(1);

                         
                        int index2_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_37);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA2_118 = input.LA(1);

                         
                        int index2_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_118);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA2_67 = input.LA(1);

                         
                        int index2_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_67);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA2_93 = input.LA(1);

                         
                        int index2_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_93);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA2_82 = input.LA(1);

                         
                        int index2_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_82);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA2_106 = input.LA(1);

                         
                        int index2_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_106);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA2_68 = input.LA(1);

                         
                        int index2_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_68);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA2_5 = input.LA(1);

                         
                        int index2_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred3_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||synpred3_ChemicalChunker()||(synpred3_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_5);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA2_49 = input.LA(1);

                         
                        int index2_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_49);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA2_123 = input.LA(1);

                         
                        int index2_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_123);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA2_104 = input.LA(1);

                         
                        int index2_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_104);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA2_22 = input.LA(1);

                         
                        int index2_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_22);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA2_126 = input.LA(1);

                         
                        int index2_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_126);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA2_115 = input.LA(1);

                         
                        int index2_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_115);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA2_39 = input.LA(1);

                         
                        int index2_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_39);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA2_57 = input.LA(1);

                         
                        int index2_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_57);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA2_135 = input.LA(1);

                         
                        int index2_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_135);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA2_34 = input.LA(1);

                         
                        int index2_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_34);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA2_72 = input.LA(1);

                         
                        int index2_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_72);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA2_81 = input.LA(1);

                         
                        int index2_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_81);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA2_125 = input.LA(1);

                         
                        int index2_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_125);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA2_35 = input.LA(1);

                         
                        int index2_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_35);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA2_101 = input.LA(1);

                         
                        int index2_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_101);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA2_23 = input.LA(1);

                         
                        int index2_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_23);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA2_33 = input.LA(1);

                         
                        int index2_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_33);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA2_134 = input.LA(1);

                         
                        int index2_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_134);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA2_132 = input.LA(1);

                         
                        int index2_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_132);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA2_32 = input.LA(1);

                         
                        int index2_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_32);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA2_84 = input.LA(1);

                         
                        int index2_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_84);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA2_19 = input.LA(1);

                         
                        int index2_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_19);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA2_4 = input.LA(1);

                         
                        int index2_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_4);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA2_107 = input.LA(1);

                         
                        int index2_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_107);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA2_36 = input.LA(1);

                         
                        int index2_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_36);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA2_9 = input.LA(1);

                         
                        int index2_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_9);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA2_53 = input.LA(1);

                         
                        int index2_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_53);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA2_127 = input.LA(1);

                         
                        int index2_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_127);
                        if ( s>=0 ) return s;
                        break;

                    case 130 : 
                        int LA2_17 = input.LA(1);

                         
                        int index2_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_17);
                        if ( s>=0 ) return s;
                        break;

                    case 131 : 
                        int LA2_117 = input.LA(1);

                         
                        int index2_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_117);
                        if ( s>=0 ) return s;
                        break;

                    case 132 : 
                        int LA2_58 = input.LA(1);

                         
                        int index2_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_58);
                        if ( s>=0 ) return s;
                        break;

                    case 133 : 
                        int LA2_116 = input.LA(1);

                         
                        int index2_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_116);
                        if ( s>=0 ) return s;
                        break;

                    case 134 : 
                        int LA2_12 = input.LA(1);

                         
                        int index2_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_12);
                        if ( s>=0 ) return s;
                        break;

                    case 135 : 
                        int LA2_74 = input.LA(1);

                         
                        int index2_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_74);
                        if ( s>=0 ) return s;
                        break;

                    case 136 : 
                        int LA2_89 = input.LA(1);

                         
                        int index2_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_89);
                        if ( s>=0 ) return s;
                        break;

                    case 137 : 
                        int LA2_142 = input.LA(1);

                         
                        int index2_142 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_142);
                        if ( s>=0 ) return s;
                        break;

                    case 138 : 
                        int LA2_102 = input.LA(1);

                         
                        int index2_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_102);
                        if ( s>=0 ) return s;
                        break;

                    case 139 : 
                        int LA2_10 = input.LA(1);

                         
                        int index2_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_10);
                        if ( s>=0 ) return s;
                        break;

                    case 140 : 
                        int LA2_85 = input.LA(1);

                         
                        int index2_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_85);
                        if ( s>=0 ) return s;
                        break;

                    case 141 : 
                        int LA2_18 = input.LA(1);

                         
                        int index2_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA5_static {
    static final String DFA5_eotS =
        "\u0089\uffff";
    static final String DFA5_eofS =
        "\1\13\u0088\uffff";
    static final String DFA5_minS =
        "\1\46\12\0\1\uffff\171\0\4\uffff";
    static final String DFA5_maxS =
        "\1\u00b4\12\0\1\uffff\171\0\4\uffff";
    static final String DFA5_acceptS =
        "\13\uffff\1\5\171\uffff\1\1\1\2\1\3\1\4";
    static final String DFA5_specialS =
        "\1\uffff\1\115\1\37\1\160\1\136\1\161\1\63\1\56\1\163\1\130\1\17"+
        "\1\uffff\1\32\1\176\1\102\1\105\1\126\1\164\1\145\1\u0080\1\4\1"+
        "\100\1\147\1\3\1\57\1\76\1\20\1\170\1\167\1\116\1\153\1\35\1\127"+
        "\1\165\1\166\1\70\1\55\1\141\1\121\1\174\1\134\1\152\1\64\1\120"+
        "\1\23\1\67\1\44\1\140\1\151\1\u0081\1\172\1\154\1\26\1\22\1\10\1"+
        "\162\1\31\1\122\1\73\1\42\1\11\1\75\1\146\1\5\1\12\1\171\1\33\1"+
        "\36\1\27\1\74\1\0\1\106\1\1\1\52\1\103\1\66\1\60\1\40\1\143\1\50"+
        "\1\61\1\112\1\34\1\65\1\175\1\53\1\30\1\21\1\45\1\125\1\144\1\6"+
        "\1\177\1\25\1\41\1\54\1\7\1\72\1\114\1\124\1\157\1\13\1\24\1\113"+
        "\1\156\1\104\1\77\1\43\1\15\1\173\1\150\1\133\1\117\1\110\1\51\1"+
        "\2\1\16\1\u0082\1\131\1\62\1\101\1\14\1\46\1\71\1\123\1\137\1\132"+
        "\1\155\1\107\1\135\1\142\1\47\1\111\4\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\46\1\20\1\11\1\12\1\43\1\54\1\13\1\10\1\32\1\115\1\116\1"+
            "\114\1\122\1\123\1\132\1\133\1\117\1\131\1\124\1\126\1\120\1"+
            "\121\1\130\1\127\1\125\1\31\1\53\1\13\1\57\1\13\1\41\1\60\1"+
            "\67\1\30\1\55\1\24\1\56\1\47\1\50\1\26\1\61\1\62\1\63\1\64\1"+
            "\65\1\40\1\33\1\u0083\1\u0080\1\157\1\150\1\27\1\42\1\140\1"+
            "\135\1\136\1\137\1\141\1\142\1\u0082\1\143\1\144\1\35\1\145"+
            "\1\66\1\146\1\147\1\151\1\152\1\72\1\153\1\73\1\154\1\74\1\155"+
            "\1\156\1\u0081\1\160\1\161\1\75\1\162\1\70\1\163\1\164\1\165"+
            "\1\76\1\166\1\52\1\71\1\167\1\170\1\171\1\25\1\15\1\13\1\14"+
            "\1\13\1\u0084\3\13\1\22\1\13\1\16\1\36\1\21\2\13\1\17\1\23\1"+
            "\104\1\77\1\113\1\5\1\6\1\7\1\107\1\134\1\34\1\51\1\37\1\110"+
            "\1\105\1\111\1\44\1\45\1\1\1\2\1\4\1\3\1\100\1\112\1\13\1\172"+
            "\1\173\1\174\1\175\1\176\1\177\1\101\1\106\1\102\1\103",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_static.DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_static.DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_static.DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_static.DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_static.DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_static.DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_static.DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_static.DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "()+ loopback of 162:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA5_70 = input.LA(1);

                         
                        int index5_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_70);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA5_72 = input.LA(1);

                         
                        int index5_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_72);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA5_115 = input.LA(1);

                         
                        int index5_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_115);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA5_23 = input.LA(1);

                         
                        int index5_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_23);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA5_20 = input.LA(1);

                         
                        int index5_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_20);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA5_63 = input.LA(1);

                         
                        int index5_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_63);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA5_91 = input.LA(1);

                         
                        int index5_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_91);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA5_96 = input.LA(1);

                         
                        int index5_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_96);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA5_54 = input.LA(1);

                         
                        int index5_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_54);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA5_60 = input.LA(1);

                         
                        int index5_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_60);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA5_64 = input.LA(1);

                         
                        int index5_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_64);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA5_101 = input.LA(1);

                         
                        int index5_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_101);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA5_121 = input.LA(1);

                         
                        int index5_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_121);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA5_108 = input.LA(1);

                         
                        int index5_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_108);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA5_116 = input.LA(1);

                         
                        int index5_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_116);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA5_10 = input.LA(1);

                         
                        int index5_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_10);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA5_26 = input.LA(1);

                         
                        int index5_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_26);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA5_87 = input.LA(1);

                         
                        int index5_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_87);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA5_53 = input.LA(1);

                         
                        int index5_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_53);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA5_44 = input.LA(1);

                         
                        int index5_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_44);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA5_102 = input.LA(1);

                         
                        int index5_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_102);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA5_93 = input.LA(1);

                         
                        int index5_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_93);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA5_52 = input.LA(1);

                         
                        int index5_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_52);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA5_68 = input.LA(1);

                         
                        int index5_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_68);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA5_86 = input.LA(1);

                         
                        int index5_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_86);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA5_56 = input.LA(1);

                         
                        int index5_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_56);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA5_12 = input.LA(1);

                         
                        int index5_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_12);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA5_66 = input.LA(1);

                         
                        int index5_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_66);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA5_82 = input.LA(1);

                         
                        int index5_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_82);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA5_31 = input.LA(1);

                         
                        int index5_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_31);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA5_67 = input.LA(1);

                         
                        int index5_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_67);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA5_2 = input.LA(1);

                         
                        int index5_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_2);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA5_77 = input.LA(1);

                         
                        int index5_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_77);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA5_94 = input.LA(1);

                         
                        int index5_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_94);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA5_59 = input.LA(1);

                         
                        int index5_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_59);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA5_107 = input.LA(1);

                         
                        int index5_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_107);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA5_46 = input.LA(1);

                         
                        int index5_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_46);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA5_88 = input.LA(1);

                         
                        int index5_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_88);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA5_122 = input.LA(1);

                         
                        int index5_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_122);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA5_131 = input.LA(1);

                         
                        int index5_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_131);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA5_79 = input.LA(1);

                         
                        int index5_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_79);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA5_114 = input.LA(1);

                         
                        int index5_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_114);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA5_73 = input.LA(1);

                         
                        int index5_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_73);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA5_85 = input.LA(1);

                         
                        int index5_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_85);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA5_95 = input.LA(1);

                         
                        int index5_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_95);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA5_36 = input.LA(1);

                         
                        int index5_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_36);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA5_7 = input.LA(1);

                         
                        int index5_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_7);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA5_24 = input.LA(1);

                         
                        int index5_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_24);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA5_76 = input.LA(1);

                         
                        int index5_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_76);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA5_80 = input.LA(1);

                         
                        int index5_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_80);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA5_119 = input.LA(1);

                         
                        int index5_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_119);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA5_6 = input.LA(1);

                         
                        int index5_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_6);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA5_42 = input.LA(1);

                         
                        int index5_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_42);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA5_83 = input.LA(1);

                         
                        int index5_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_83);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA5_75 = input.LA(1);

                         
                        int index5_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_75);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA5_45 = input.LA(1);

                         
                        int index5_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_45);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA5_35 = input.LA(1);

                         
                        int index5_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_35);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA5_123 = input.LA(1);

                         
                        int index5_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_123);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA5_97 = input.LA(1);

                         
                        int index5_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_97);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA5_58 = input.LA(1);

                         
                        int index5_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_58);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA5_69 = input.LA(1);

                         
                        int index5_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_69);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA5_61 = input.LA(1);

                         
                        int index5_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_61);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA5_25 = input.LA(1);

                         
                        int index5_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_25);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA5_106 = input.LA(1);

                         
                        int index5_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_106);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA5_21 = input.LA(1);

                         
                        int index5_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_21);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA5_120 = input.LA(1);

                         
                        int index5_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_120);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA5_14 = input.LA(1);

                         
                        int index5_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_14);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA5_74 = input.LA(1);

                         
                        int index5_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_74);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA5_105 = input.LA(1);

                         
                        int index5_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_105);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA5_15 = input.LA(1);

                         
                        int index5_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_15);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA5_71 = input.LA(1);

                         
                        int index5_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_71);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA5_128 = input.LA(1);

                         
                        int index5_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_128);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA5_113 = input.LA(1);

                         
                        int index5_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_113);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA5_132 = input.LA(1);

                         
                        int index5_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_132);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA5_81 = input.LA(1);

                         
                        int index5_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_81);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA5_103 = input.LA(1);

                         
                        int index5_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_103);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA5_98 = input.LA(1);

                         
                        int index5_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_98);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA5_1 = input.LA(1);

                         
                        int index5_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_1);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA5_29 = input.LA(1);

                         
                        int index5_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_29);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA5_112 = input.LA(1);

                         
                        int index5_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_112);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA5_43 = input.LA(1);

                         
                        int index5_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_43);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA5_38 = input.LA(1);

                         
                        int index5_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_38);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA5_57 = input.LA(1);

                         
                        int index5_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_57);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA5_124 = input.LA(1);

                         
                        int index5_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_124);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA5_99 = input.LA(1);

                         
                        int index5_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_99);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA5_89 = input.LA(1);

                         
                        int index5_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_89);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA5_16 = input.LA(1);

                         
                        int index5_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_16);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA5_32 = input.LA(1);

                         
                        int index5_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_32);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA5_9 = input.LA(1);

                         
                        int index5_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_9);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA5_118 = input.LA(1);

                         
                        int index5_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_118);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA5_126 = input.LA(1);

                         
                        int index5_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_126);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA5_111 = input.LA(1);

                         
                        int index5_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_111);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA5_40 = input.LA(1);

                         
                        int index5_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_40);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA5_129 = input.LA(1);

                         
                        int index5_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_129);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA5_4 = input.LA(1);

                         
                        int index5_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_4);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA5_125 = input.LA(1);

                         
                        int index5_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_125);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA5_47 = input.LA(1);

                         
                        int index5_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_47);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA5_37 = input.LA(1);

                         
                        int index5_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_37);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA5_130 = input.LA(1);

                         
                        int index5_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_130);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA5_78 = input.LA(1);

                         
                        int index5_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_78);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA5_90 = input.LA(1);

                         
                        int index5_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_90);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA5_18 = input.LA(1);

                         
                        int index5_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_18);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA5_62 = input.LA(1);

                         
                        int index5_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_62);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA5_22 = input.LA(1);

                         
                        int index5_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_22);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA5_110 = input.LA(1);

                         
                        int index5_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_110);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA5_48 = input.LA(1);

                         
                        int index5_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_48);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA5_41 = input.LA(1);

                         
                        int index5_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_41);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA5_30 = input.LA(1);

                         
                        int index5_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_30);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA5_51 = input.LA(1);

                         
                        int index5_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_51);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA5_127 = input.LA(1);

                         
                        int index5_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_127);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA5_104 = input.LA(1);

                         
                        int index5_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_104);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA5_100 = input.LA(1);

                         
                        int index5_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_100);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA5_3 = input.LA(1);

                         
                        int index5_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_3);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA5_5 = input.LA(1);

                         
                        int index5_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_5);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA5_55 = input.LA(1);

                         
                        int index5_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_55);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA5_8 = input.LA(1);

                         
                        int index5_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_8);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA5_17 = input.LA(1);

                         
                        int index5_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred6_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||synpred6_ChemicalChunker()||(synpred6_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_17);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA5_33 = input.LA(1);

                         
                        int index5_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_33);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA5_34 = input.LA(1);

                         
                        int index5_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_34);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA5_28 = input.LA(1);

                         
                        int index5_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_28);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA5_27 = input.LA(1);

                         
                        int index5_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_27);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA5_65 = input.LA(1);

                         
                        int index5_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_65);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA5_50 = input.LA(1);

                         
                        int index5_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_50);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA5_109 = input.LA(1);

                         
                        int index5_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_109);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA5_39 = input.LA(1);

                         
                        int index5_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_39);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA5_84 = input.LA(1);

                         
                        int index5_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_84);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA5_13 = input.LA(1);

                         
                        int index5_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_13);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA5_92 = input.LA(1);

                         
                        int index5_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_92);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA5_19 = input.LA(1);

                         
                        int index5_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_19);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA5_49 = input.LA(1);

                         
                        int index5_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_49);
                        if ( s>=0 ) return s;
                        break;

                    case 130 : 
                        int LA5_117 = input.LA(1);

                         
                        int index5_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_117);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA6_static {
    static final String DFA6_eotS =
        "\32\uffff";
    static final String DFA6_eofS =
        "\1\1\31\uffff";
    static final String DFA6_minS =
        "\1\46\1\uffff\13\45\13\0\2\uffff";
    static final String DFA6_maxS =
        "\1\u00b4\1\uffff\13\45\13\0\2\uffff";
    static final String DFA6_acceptS =
        "\1\uffff\1\3\26\uffff\1\1\1\2";
    static final String DFA6_specialS =
        "\15\uffff\1\7\1\1\1\2\1\5\1\4\1\3\1\11\1\12\1\10\1\6\1\0\2\uffff}>";
    static final String[] DFA6_transitionS = {
            "\2\1\1\6\1\7\3\1\1\5\126\1\1\14\22\1\1\2\1\3\1\4\12\1\1\10\1"+
            "\11\1\13\1\12\15\1",
            "",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA6_eot = DFA.unpackEncodedString(DFA6_static.DFA6_eotS);
    static final short[] DFA6_eof = DFA.unpackEncodedString(DFA6_static.DFA6_eofS);
    static final char[] DFA6_min = DFA.unpackEncodedStringToUnsignedChars(DFA6_static.DFA6_minS);
    static final char[] DFA6_max = DFA.unpackEncodedStringToUnsignedChars(DFA6_static.DFA6_maxS);
    static final short[] DFA6_accept = DFA.unpackEncodedString(DFA6_static.DFA6_acceptS);
    static final short[] DFA6_special = DFA.unpackEncodedString(DFA6_static.DFA6_specialS);
    static final short[][] DFA6_transition;

    static {
        int numStates = DFA6_static.DFA6_transitionS.length;
        DFA6_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA6_transition[i] = DFA.unpackEncodedString(DFA6_static.DFA6_transitionS[i]);
        }
    }

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = DFA6_eot;
            this.eof = DFA6_eof;
            this.min = DFA6_min;
            this.max = DFA6_max;
            this.accept = DFA6_accept;
            this.special = DFA6_special;
            this.transition = DFA6_transition;
        }
        public String getDescription() {
            return "()* loopback of 162:73: ( advAdj | colon )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA6_23 = input.LA(1);

                         
                        int index6_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 25;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_23);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA6_14 = input.LA(1);

                         
                        int index6_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_14);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA6_15 = input.LA(1);

                         
                        int index6_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_15);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA6_18 = input.LA(1);

                         
                        int index6_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_18);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA6_17 = input.LA(1);

                         
                        int index6_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_17);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA6_16 = input.LA(1);

                         
                        int index6_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_16);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA6_22 = input.LA(1);

                         
                        int index6_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_22);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA6_13 = input.LA(1);

                         
                        int index6_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_13);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA6_21 = input.LA(1);

                         
                        int index6_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_21);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA6_19 = input.LA(1);

                         
                        int index6_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_19);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA6_20 = input.LA(1);

                         
                        int index6_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 6, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA7_static {
    static final String DFA7_eotS =
        "\13\uffff";
    static final String DFA7_eofS =
        "\1\1\12\uffff";
    static final String DFA7_minS =
        "\1\46\1\uffff\3\45\3\0\3\uffff";
    static final String DFA7_maxS =
        "\1\u00b4\1\uffff\3\45\3\0\3\uffff";
    static final String DFA7_acceptS =
        "\1\uffff\1\4\6\uffff\1\1\1\3\1\2";
    static final String DFA7_specialS =
        "\5\uffff\1\2\1\1\1\0\3\uffff}>";
    static final String[] DFA7_transitionS = {
            "\135\1\1\3\1\1\1\2\13\1\1\4\43\1",
            "",
            "\1\5",
            "\1\6",
            "\1\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    }

    static final short[] DFA7_eot = DFA.unpackEncodedString(DFA7_static.DFA7_eotS);
    static final short[] DFA7_eof = DFA.unpackEncodedString(DFA7_static.DFA7_eofS);
    static final char[] DFA7_min = DFA.unpackEncodedStringToUnsignedChars(DFA7_static.DFA7_minS);
    static final char[] DFA7_max = DFA.unpackEncodedStringToUnsignedChars(DFA7_static.DFA7_maxS);
    static final short[] DFA7_accept = DFA.unpackEncodedString(DFA7_static.DFA7_acceptS);
    static final short[] DFA7_special = DFA.unpackEncodedString(DFA7_static.DFA7_specialS);
    static final short[][] DFA7_transition;

    static {
        int numStates = DFA7_static.DFA7_transitionS.length;
        DFA7_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA7_transition[i] = DFA.unpackEncodedString(DFA7_static.DFA7_transitionS[i]);
        }
    }

    class DFA7 extends DFA {

        public DFA7(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = DFA7_eot;
            this.eof = DFA7_eof;
            this.min = DFA7_min;
            this.max = DFA7_max;
            this.accept = DFA7_accept;
            this.special = DFA7_special;
            this.transition = DFA7_transition;
        }
        public String getDescription() {
            return "()* loopback of 162:89: ( conjunction | rbconj | comma )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA7_7 = input.LA(1);

                         
                        int index7_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_7);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA7_6 = input.LA(1);

                         
                        int index7_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_6);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA7_5 = input.LA(1);

                         
                        int index7_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred14_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 7, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA14_static {
    static final String DFA14_eotS =
        "\111\uffff";
    static final String DFA14_eofS =
        "\111\uffff";
    static final String DFA14_minS =
        "\1\46\25\0\63\uffff";
    static final String DFA14_maxS =
        "\1\u00b4\25\0\63\uffff";
    static final String DFA14_acceptS =
        "\26\uffff\1\2\61\uffff\1\1";
    static final String DFA14_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\63\uffff}>";
    static final String[] DFA14_transitionS = {
            "\2\26\1\12\1\13\2\26\1\uffff\1\11\1\22\20\uffff\1\21\1\26\1"+
            "\uffff\1\26\1\uffff\3\26\1\20\1\26\1\4\3\26\1\14\6\26\1\23\4"+
            "\uffff\1\15\1\26\11\uffff\1\25\1\uffff\1\26\4\uffff\1\26\1\uffff"+
            "\1\26\1\uffff\1\26\5\uffff\1\26\1\uffff\1\26\3\uffff\1\26\1"+
            "\uffff\2\26\3\uffff\1\5\2\uffff\1\16\5\uffff\1\17\1\uffff\2"+
            "\26\1\2\2\uffff\1\3\1\1\2\26\1\uffff\1\6\1\7\1\10\1\26\1\uffff"+
            "\1\24\14\26\10\uffff\4\26",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA14_eot = DFA.unpackEncodedString(DFA14_static.DFA14_eotS);
    static final short[] DFA14_eof = DFA.unpackEncodedString(DFA14_static.DFA14_eofS);
    static final char[] DFA14_min = DFA.unpackEncodedStringToUnsignedChars(DFA14_static.DFA14_minS);
    static final char[] DFA14_max = DFA.unpackEncodedStringToUnsignedChars(DFA14_static.DFA14_maxS);
    static final short[] DFA14_accept = DFA.unpackEncodedString(DFA14_static.DFA14_acceptS);
    static final short[] DFA14_special = DFA.unpackEncodedString(DFA14_static.DFA14_specialS);
    static final short[][] DFA14_transition;

    static {
        int numStates = DFA14_static.DFA14_transitionS.length;
        DFA14_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA14_transition[i] = DFA.unpackEncodedString(DFA14_static.DFA14_transitionS[i]);
        }
    }

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = DFA14_eot;
            this.eof = DFA14_eof;
            this.min = DFA14_min;
            this.max = DFA14_max;
            this.accept = DFA14_accept;
            this.special = DFA14_special;
            this.transition = DFA14_transition;
        }
        public String getDescription() {
            return "193:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA14_1 = input.LA(1);

                         
                        int index14_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA14_2 = input.LA(1);

                         
                        int index14_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA14_3 = input.LA(1);

                         
                        int index14_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA14_4 = input.LA(1);

                         
                        int index14_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA14_5 = input.LA(1);

                         
                        int index14_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA14_6 = input.LA(1);

                         
                        int index14_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA14_7 = input.LA(1);

                         
                        int index14_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA14_8 = input.LA(1);

                         
                        int index14_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA14_9 = input.LA(1);

                         
                        int index14_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA14_10 = input.LA(1);

                         
                        int index14_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA14_11 = input.LA(1);

                         
                        int index14_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA14_12 = input.LA(1);

                         
                        int index14_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA14_13 = input.LA(1);

                         
                        int index14_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA14_14 = input.LA(1);

                         
                        int index14_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA14_15 = input.LA(1);

                         
                        int index14_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA14_16 = input.LA(1);

                         
                        int index14_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA14_17 = input.LA(1);

                         
                        int index14_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA14_18 = input.LA(1);

                         
                        int index14_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA14_19 = input.LA(1);

                         
                        int index14_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA14_20 = input.LA(1);

                         
                        int index14_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_20);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA14_21 = input.LA(1);

                         
                        int index14_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index14_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 14, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA18_static {
    static final String DFA18_eotS =
        "\112\uffff";
    static final String DFA18_eofS =
        "\1\1\111\uffff";
    static final String DFA18_minS =
        "\1\46\1\uffff\107\0\1\uffff";
    static final String DFA18_maxS =
        "\1\u00b4\1\uffff\107\0\1\uffff";
    static final String DFA18_acceptS =
        "\1\uffff\1\2\107\uffff\1\1";
    static final String DFA18_specialS =
        "\2\uffff\1\32\1\31\1\101\1\71\1\6\1\40\1\53\1\61\1\74\1\104\1\4"+
        "\1\15\1\103\1\66\1\5\1\22\1\3\1\43\1\73\1\100\1\30\1\51\1\105\1"+
        "\13\1\44\1\23\1\20\1\63\1\12\1\42\1\62\1\76\1\33\1\57\1\64\1\67"+
        "\1\55\1\70\1\16\1\21\1\2\1\11\1\17\1\77\1\14\1\54\1\24\1\26\1\102"+
        "\1\47\1\45\1\10\1\60\1\7\1\0\1\37\1\52\1\46\1\75\1\106\1\50\1\36"+
        "\1\65\1\27\1\35\1\56\1\41\1\25\1\72\1\1\1\34\1\uffff}>";
    static final String[] DFA18_transitionS = {
            "\1\45\1\20\1\12\1\13\1\42\1\53\1\1\1\11\1\32\20\1\1\31\1\52"+
            "\1\1\1\56\1\1\1\40\1\57\1\66\1\30\1\54\1\24\1\55\1\46\1\47\1"+
            "\26\1\60\1\61\1\62\1\63\1\64\1\37\1\33\4\1\1\27\1\41\11\1\1"+
            "\35\1\1\1\65\4\1\1\71\1\1\1\72\1\1\1\73\5\1\1\74\1\1\1\67\3"+
            "\1\1\75\1\1\1\51\1\70\3\1\1\25\2\1\1\15\5\1\1\22\1\1\1\16\1"+
            "\1\1\21\1\1\1\14\1\17\1\23\1\103\1\76\1\1\1\6\1\7\1\10\1\106"+
            "\1\1\1\34\1\50\1\36\1\107\1\104\1\110\1\43\1\44\1\2\1\3\1\5"+
            "\1\4\1\77\10\1\1\100\1\105\1\101\1\102",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA18_eot = DFA.unpackEncodedString(DFA18_static.DFA18_eotS);
    static final short[] DFA18_eof = DFA.unpackEncodedString(DFA18_static.DFA18_eofS);
    static final char[] DFA18_min = DFA.unpackEncodedStringToUnsignedChars(DFA18_static.DFA18_minS);
    static final char[] DFA18_max = DFA.unpackEncodedStringToUnsignedChars(DFA18_static.DFA18_maxS);
    static final short[] DFA18_accept = DFA.unpackEncodedString(DFA18_static.DFA18_acceptS);
    static final short[] DFA18_special = DFA.unpackEncodedString(DFA18_static.DFA18_specialS);
    static final short[][] DFA18_transition;

    static {
        int numStates = DFA18_static.DFA18_transitionS.length;
        DFA18_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA18_transition[i] = DFA.unpackEncodedString(DFA18_static.DFA18_transitionS[i]);
        }
    }

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = DFA18_eot;
            this.eof = DFA18_eof;
            this.min = DFA18_min;
            this.max = DFA18_max;
            this.accept = DFA18_accept;
            this.special = DFA18_special;
            this.transition = DFA18_transition;
        }
        public String getDescription() {
            return "()* loopback of 198:34: ( ( conjunction )* nounphraseContent {...}?)*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA18_56 = input.LA(1);

                         
                        int index18_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_56);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA18_71 = input.LA(1);

                         
                        int index18_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_71);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA18_42 = input.LA(1);

                         
                        int index18_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_42);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA18_18 = input.LA(1);

                         
                        int index18_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_18);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA18_12 = input.LA(1);

                         
                        int index18_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_12);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA18_16 = input.LA(1);

                         
                        int index18_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_16);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA18_6 = input.LA(1);

                         
                        int index18_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_6);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA18_55 = input.LA(1);

                         
                        int index18_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_55);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA18_53 = input.LA(1);

                         
                        int index18_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_53);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA18_43 = input.LA(1);

                         
                        int index18_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_43);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA18_30 = input.LA(1);

                         
                        int index18_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_30);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA18_25 = input.LA(1);

                         
                        int index18_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_25);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA18_46 = input.LA(1);

                         
                        int index18_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_46);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA18_13 = input.LA(1);

                         
                        int index18_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_13);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA18_40 = input.LA(1);

                         
                        int index18_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_40);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA18_44 = input.LA(1);

                         
                        int index18_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_44);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA18_28 = input.LA(1);

                         
                        int index18_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_28);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA18_41 = input.LA(1);

                         
                        int index18_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_41);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA18_17 = input.LA(1);

                         
                        int index18_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred95_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||synpred95_ChemicalChunker()||(synpred95_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_17);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA18_27 = input.LA(1);

                         
                        int index18_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_27);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA18_48 = input.LA(1);

                         
                        int index18_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_48);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA18_69 = input.LA(1);

                         
                        int index18_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_69);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA18_49 = input.LA(1);

                         
                        int index18_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_49);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA18_65 = input.LA(1);

                         
                        int index18_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_65);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA18_22 = input.LA(1);

                         
                        int index18_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_22);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA18_3 = input.LA(1);

                         
                        int index18_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_3);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA18_2 = input.LA(1);

                         
                        int index18_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_2);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA18_34 = input.LA(1);

                         
                        int index18_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_34);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA18_72 = input.LA(1);

                         
                        int index18_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_72);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA18_66 = input.LA(1);

                         
                        int index18_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_66);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA18_63 = input.LA(1);

                         
                        int index18_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_63);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA18_57 = input.LA(1);

                         
                        int index18_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_57);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA18_7 = input.LA(1);

                         
                        int index18_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_7);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA18_68 = input.LA(1);

                         
                        int index18_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_68);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA18_31 = input.LA(1);

                         
                        int index18_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_31);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA18_19 = input.LA(1);

                         
                        int index18_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_19);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA18_26 = input.LA(1);

                         
                        int index18_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_26);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA18_52 = input.LA(1);

                         
                        int index18_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_52);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA18_59 = input.LA(1);

                         
                        int index18_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_59);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA18_51 = input.LA(1);

                         
                        int index18_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_51);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA18_62 = input.LA(1);

                         
                        int index18_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_62);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA18_23 = input.LA(1);

                         
                        int index18_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_23);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA18_58 = input.LA(1);

                         
                        int index18_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_58);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA18_8 = input.LA(1);

                         
                        int index18_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_8);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA18_47 = input.LA(1);

                         
                        int index18_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_47);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA18_38 = input.LA(1);

                         
                        int index18_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_38);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA18_67 = input.LA(1);

                         
                        int index18_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_67);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA18_35 = input.LA(1);

                         
                        int index18_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_35);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA18_54 = input.LA(1);

                         
                        int index18_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_54);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA18_9 = input.LA(1);

                         
                        int index18_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_9);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA18_32 = input.LA(1);

                         
                        int index18_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_32);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA18_29 = input.LA(1);

                         
                        int index18_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_29);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA18_36 = input.LA(1);

                         
                        int index18_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_36);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA18_64 = input.LA(1);

                         
                        int index18_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_64);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA18_15 = input.LA(1);

                         
                        int index18_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_15);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA18_37 = input.LA(1);

                         
                        int index18_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_37);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA18_39 = input.LA(1);

                         
                        int index18_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_39);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA18_5 = input.LA(1);

                         
                        int index18_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_5);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA18_70 = input.LA(1);

                         
                        int index18_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_70);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA18_20 = input.LA(1);

                         
                        int index18_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_20);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA18_10 = input.LA(1);

                         
                        int index18_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_10);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA18_60 = input.LA(1);

                         
                        int index18_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_60);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA18_33 = input.LA(1);

                         
                        int index18_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_33);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA18_45 = input.LA(1);

                         
                        int index18_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_45);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA18_21 = input.LA(1);

                         
                        int index18_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_21);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA18_4 = input.LA(1);

                         
                        int index18_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_4);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA18_50 = input.LA(1);

                         
                        int index18_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_50);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA18_14 = input.LA(1);

                         
                        int index18_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_14);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA18_11 = input.LA(1);

                         
                        int index18_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_11);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA18_24 = input.LA(1);

                         
                        int index18_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_24);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA18_61 = input.LA(1);

                         
                        int index18_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_61);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA17_static {
    static final String DFA17_eotS =
        "\110\uffff";
    static final String DFA17_eofS =
        "\110\uffff";
    static final String DFA17_minS =
        "\1\46\17\uffff\1\0\67\uffff";
    static final String DFA17_maxS =
        "\1\u00b4\17\uffff\1\0\67\uffff";
    static final String DFA17_acceptS =
        "\1\uffff\1\2\105\uffff\1\1";
    static final String DFA17_specialS =
        "\20\uffff\1\0\67\uffff}>";
    static final String[] DFA17_transitionS = {
            "\6\1\1\uffff\2\1\20\uffff\2\1\1\uffff\1\1\1\uffff\21\1\4\uffff"+
            "\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff"+
            "\1\1\2\uffff\1\20\5\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\107\4\1\1\uffff\4\1\1\uffff\15\1\10\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA17_eot = DFA.unpackEncodedString(DFA17_static.DFA17_eotS);
    static final short[] DFA17_eof = DFA.unpackEncodedString(DFA17_static.DFA17_eofS);
    static final char[] DFA17_min = DFA.unpackEncodedStringToUnsignedChars(DFA17_static.DFA17_minS);
    static final char[] DFA17_max = DFA.unpackEncodedStringToUnsignedChars(DFA17_static.DFA17_maxS);
    static final short[] DFA17_accept = DFA.unpackEncodedString(DFA17_static.DFA17_acceptS);
    static final short[] DFA17_special = DFA.unpackEncodedString(DFA17_static.DFA17_specialS);
    static final short[][] DFA17_transition;

    static {
        int numStates = DFA17_static.DFA17_transitionS.length;
        DFA17_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA17_transition[i] = DFA.unpackEncodedString(DFA17_static.DFA17_transitionS[i]);
        }
    }

    class DFA17 extends DFA {

        public DFA17(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 17;
            this.eot = DFA17_eot;
            this.eof = DFA17_eof;
            this.min = DFA17_min;
            this.max = DFA17_max;
            this.accept = DFA17_accept;
            this.special = DFA17_special;
            this.transition = DFA17_transition;
        }
        public String getDescription() {
            return "()* loopback of 198:35: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA17_16 = input.LA(1);

                         
                        int index17_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index17_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 17, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA20_static {
    static final String DFA20_eotS =
        "\17\uffff";
    static final String DFA20_eofS =
        "\17\uffff";
    static final String DFA20_minS =
        "\1\46\6\45\2\uffff\6\0";
    static final String DFA20_maxS =
        "\1\u00b4\6\45\2\uffff\6\0";
    static final String DFA20_acceptS =
        "\7\uffff\1\2\1\1\6\uffff";
    static final String DFA20_specialS =
        "\11\uffff\1\5\1\1\1\0\1\2\1\3\1\4}>";
    static final String[] DFA20_transitionS = {
            "\2\7\1\5\1\6\2\7\1\uffff\1\4\1\7\20\uffff\2\7\1\uffff\1\7\1"+
            "\uffff\21\7\4\uffff\2\7\11\uffff\1\7\1\uffff\1\7\4\uffff\1\7"+
            "\1\uffff\1\7\1\uffff\1\7\5\uffff\1\7\1\uffff\1\7\3\uffff\1\7"+
            "\1\uffff\2\7\3\uffff\1\7\2\uffff\1\7\5\uffff\1\7\1\uffff\1\7"+
            "\1\uffff\1\7\2\uffff\4\7\1\uffff\1\1\1\2\1\3\1\7\1\uffff\10"+
            "\7\4\10\1\7\10\uffff\4\7",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA20_eot = DFA.unpackEncodedString(DFA20_static.DFA20_eotS);
    static final short[] DFA20_eof = DFA.unpackEncodedString(DFA20_static.DFA20_eofS);
    static final char[] DFA20_min = DFA.unpackEncodedStringToUnsignedChars(DFA20_static.DFA20_minS);
    static final char[] DFA20_max = DFA.unpackEncodedStringToUnsignedChars(DFA20_static.DFA20_maxS);
    static final short[] DFA20_accept = DFA.unpackEncodedString(DFA20_static.DFA20_acceptS);
    static final short[] DFA20_special = DFA.unpackEncodedString(DFA20_static.DFA20_specialS);
    static final short[][] DFA20_transition;

    static {
        int numStates = DFA20_static.DFA20_transitionS.length;
        DFA20_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA20_transition[i] = DFA.unpackEncodedString(DFA20_static.DFA20_transitionS[i]);
        }
    }

    class DFA20 extends DFA {

        public DFA20(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 20;
            this.eot = DFA20_eot;
            this.eof = DFA20_eof;
            this.min = DFA20_min;
            this.max = DFA20_max;
            this.accept = DFA20_accept;
            this.special = DFA20_special;
            this.transition = DFA20_transition;
        }
        public String getDescription() {
            return "()* loopback of 201:4: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA20_11 = input.LA(1);

                         
                        int index20_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA20_10 = input.LA(1);

                         
                        int index20_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_10);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA20_12 = input.LA(1);

                         
                        int index20_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_12);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA20_13 = input.LA(1);

                         
                        int index20_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_13);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA20_14 = input.LA(1);

                         
                        int index20_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_14);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA20_9 = input.LA(1);

                         
                        int index20_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 20, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA21_static {
    static final String DFA21_eotS =
        "\111\uffff";
    static final String DFA21_eofS =
        "\1\1\110\uffff";
    static final String DFA21_minS =
        "\1\46\1\uffff\102\0\5\uffff";
    static final String DFA21_maxS =
        "\1\u00b4\1\uffff\102\0\5\uffff";
    static final String DFA21_acceptS =
        "\1\uffff\1\6\102\uffff\1\1\1\3\1\5\1\2\1\4";
    static final String DFA21_specialS =
        "\2\uffff\1\26\1\0\1\55\1\70\1\20\1\46\1\51\1\71\1\11\1\17\1\6\1"+
        "\37\1\15\1\76\1\75\1\73\1\62\1\1\1\74\1\27\1\60\1\4\1\35\1\63\1"+
        "\101\1\16\1\22\1\72\1\47\1\2\1\57\1\13\1\5\1\33\1\52\1\7\1\53\1"+
        "\10\1\40\1\61\1\100\1\34\1\50\1\21\1\23\1\25\1\54\1\3\1\14\1\77"+
        "\1\64\1\67\1\31\1\30\1\44\1\12\1\65\1\24\1\45\1\42\1\66\1\43\1\36"+
        "\1\32\1\56\1\41\5\uffff}>";
    static final String[] DFA21_transitionS = {
            "\1\33\1\30\1\7\1\10\1\26\1\46\1\1\1\6\1\21\20\1\1\20\1\45\1"+
            "\1\1\51\1\1\1\24\1\52\1\61\1\17\1\47\1\14\1\50\1\41\1\42\1\35"+
            "\1\53\1\54\1\55\1\56\1\57\1\23\1\22\4\1\1\36\1\25\11\1\1\40"+
            "\1\1\1\60\4\1\1\64\1\1\1\65\1\1\1\66\5\1\1\67\1\1\1\62\3\1\1"+
            "\70\1\1\1\44\1\63\3\1\1\15\2\1\1\2\5\1\1\16\1\1\1\27\1\1\1\12"+
            "\2\1\1\13\1\34\1\76\1\71\1\1\1\3\1\4\1\5\1\101\1\1\1\37\1\43"+
            "\1\11\1\102\1\77\1\103\1\31\1\32\4\1\1\72\10\1\1\73\1\100\1"+
            "\74\1\75",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA21_eot = DFA.unpackEncodedString(DFA21_static.DFA21_eotS);
    static final short[] DFA21_eof = DFA.unpackEncodedString(DFA21_static.DFA21_eofS);
    static final char[] DFA21_min = DFA.unpackEncodedStringToUnsignedChars(DFA21_static.DFA21_minS);
    static final char[] DFA21_max = DFA.unpackEncodedStringToUnsignedChars(DFA21_static.DFA21_maxS);
    static final short[] DFA21_accept = DFA.unpackEncodedString(DFA21_static.DFA21_acceptS);
    static final short[] DFA21_special = DFA.unpackEncodedString(DFA21_static.DFA21_specialS);
    static final short[][] DFA21_transition;

    static {
        int numStates = DFA21_static.DFA21_transitionS.length;
        DFA21_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA21_transition[i] = DFA.unpackEncodedString(DFA21_static.DFA21_transitionS[i]);
        }
    }

    class DFA21 extends DFA {

        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = DFA21_eot;
            this.eof = DFA21_eof;
            this.min = DFA21_min;
            this.max = DFA21_max;
            this.accept = DFA21_accept;
            this.special = DFA21_special;
            this.transition = DFA21_transition;
        }
        public String getDescription() {
            return "()+ loopback of 201:13: ( dissolvePhrase | ratioOrBracketedRatio | noun | numeric | bracketedContent )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA21_3 = input.LA(1);

                         
                        int index21_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA21_19 = input.LA(1);

                         
                        int index21_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_19);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA21_31 = input.LA(1);

                         
                        int index21_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_31);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA21_49 = input.LA(1);

                         
                        int index21_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_49);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA21_23 = input.LA(1);

                         
                        int index21_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_23);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA21_34 = input.LA(1);

                         
                        int index21_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_34);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA21_12 = input.LA(1);

                         
                        int index21_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_12);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA21_37 = input.LA(1);

                         
                        int index21_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_37);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA21_39 = input.LA(1);

                         
                        int index21_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_39);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA21_10 = input.LA(1);

                         
                        int index21_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred99_ChemicalChunker()||(synpred99_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 68;}

                        else if ( (synpred100_ChemicalChunker()) ) {s = 71;}

                        else if ( ((synpred101_ChemicalChunker()||(synpred101_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 69;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA21_57 = input.LA(1);

                         
                        int index21_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_57);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA21_33 = input.LA(1);

                         
                        int index21_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_33);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA21_50 = input.LA(1);

                         
                        int index21_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_50);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA21_14 = input.LA(1);

                         
                        int index21_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA21_27 = input.LA(1);

                         
                        int index21_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_27);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA21_11 = input.LA(1);

                         
                        int index21_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred100_ChemicalChunker()) ) {s = 71;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 72;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_11);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA21_6 = input.LA(1);

                         
                        int index21_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_6);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA21_45 = input.LA(1);

                         
                        int index21_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_45);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA21_28 = input.LA(1);

                         
                        int index21_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_28);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA21_46 = input.LA(1);

                         
                        int index21_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_46);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA21_59 = input.LA(1);

                         
                        int index21_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_59);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA21_47 = input.LA(1);

                         
                        int index21_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_47);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA21_2 = input.LA(1);

                         
                        int index21_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_2);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA21_21 = input.LA(1);

                         
                        int index21_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_21);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA21_55 = input.LA(1);

                         
                        int index21_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_55);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA21_54 = input.LA(1);

                         
                        int index21_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_54);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA21_65 = input.LA(1);

                         
                        int index21_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_65);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA21_35 = input.LA(1);

                         
                        int index21_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_35);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA21_43 = input.LA(1);

                         
                        int index21_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_43);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA21_24 = input.LA(1);

                         
                        int index21_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_24);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA21_64 = input.LA(1);

                         
                        int index21_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_64);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA21_13 = input.LA(1);

                         
                        int index21_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_13);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA21_40 = input.LA(1);

                         
                        int index21_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_40);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA21_67 = input.LA(1);

                         
                        int index21_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_67);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA21_61 = input.LA(1);

                         
                        int index21_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_61);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA21_63 = input.LA(1);

                         
                        int index21_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_63);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA21_56 = input.LA(1);

                         
                        int index21_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_56);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA21_60 = input.LA(1);

                         
                        int index21_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_60);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA21_7 = input.LA(1);

                         
                        int index21_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_7);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA21_30 = input.LA(1);

                         
                        int index21_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_30);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA21_44 = input.LA(1);

                         
                        int index21_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_44);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA21_8 = input.LA(1);

                         
                        int index21_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_8);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA21_36 = input.LA(1);

                         
                        int index21_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_36);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA21_38 = input.LA(1);

                         
                        int index21_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_38);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA21_48 = input.LA(1);

                         
                        int index21_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_48);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA21_4 = input.LA(1);

                         
                        int index21_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_4);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA21_66 = input.LA(1);

                         
                        int index21_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_66);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA21_32 = input.LA(1);

                         
                        int index21_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_32);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA21_22 = input.LA(1);

                         
                        int index21_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_22);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA21_41 = input.LA(1);

                         
                        int index21_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_41);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA21_18 = input.LA(1);

                         
                        int index21_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_18);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA21_25 = input.LA(1);

                         
                        int index21_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_25);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA21_52 = input.LA(1);

                         
                        int index21_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_52);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA21_58 = input.LA(1);

                         
                        int index21_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_58);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA21_62 = input.LA(1);

                         
                        int index21_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_62);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA21_53 = input.LA(1);

                         
                        int index21_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_53);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA21_5 = input.LA(1);

                         
                        int index21_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_5);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA21_9 = input.LA(1);

                         
                        int index21_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_9);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA21_29 = input.LA(1);

                         
                        int index21_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_29);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA21_17 = input.LA(1);

                         
                        int index21_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_17);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA21_20 = input.LA(1);

                         
                        int index21_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_20);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA21_16 = input.LA(1);

                         
                        int index21_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_16);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA21_15 = input.LA(1);

                         
                        int index21_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_15);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA21_51 = input.LA(1);

                         
                        int index21_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_51);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA21_42 = input.LA(1);

                         
                        int index21_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_42);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA21_26 = input.LA(1);

                         
                        int index21_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_26);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 21, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA22_static {
    static final String DFA22_eotS =
        "\31\uffff";
    static final String DFA22_eofS =
        "\31\uffff";
    static final String DFA22_minS =
        "\1\47\7\uffff\1\0\20\uffff";
    static final String DFA22_maxS =
        "\1\u009e\7\uffff\1\0\20\uffff";
    static final String DFA22_acceptS =
        "\1\uffff\1\1\26\uffff\1\2";
    static final String DFA22_specialS =
        "\10\uffff\1\0\20\uffff}>";
    static final String[] DFA22_transitionS = {
            "\4\1\2\uffff\2\1\20\uffff\1\1\4\uffff\1\1\2\uffff\1\1\1\uffff"+
            "\1\1\11\uffff\2\1\5\uffff\1\1\47\uffff\1\1\2\uffff\1\1\5\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\1\10\2\uffff\1\1\4\uffff\3\1\4\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA22_eot = DFA.unpackEncodedString(DFA22_static.DFA22_eotS);
    static final short[] DFA22_eof = DFA.unpackEncodedString(DFA22_static.DFA22_eofS);
    static final char[] DFA22_min = DFA.unpackEncodedStringToUnsignedChars(DFA22_static.DFA22_minS);
    static final char[] DFA22_max = DFA.unpackEncodedStringToUnsignedChars(DFA22_static.DFA22_maxS);
    static final short[] DFA22_accept = DFA.unpackEncodedString(DFA22_static.DFA22_acceptS);
    static final short[] DFA22_special = DFA.unpackEncodedString(DFA22_static.DFA22_specialS);
    static final short[][] DFA22_transition;

    static {
        int numStates = DFA22_static.DFA22_transitionS.length;
        DFA22_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA22_transition[i] = DFA.unpackEncodedString(DFA22_static.DFA22_transitionS[i]);
        }
    }

    class DFA22 extends DFA {

        public DFA22(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 22;
            this.eot = DFA22_eot;
            this.eof = DFA22_eof;
            this.min = DFA22_min;
            this.max = DFA22_max;
            this.accept = DFA22_accept;
            this.special = DFA22_special;
            this.transition = DFA22_transition;
        }
        public String getDescription() {
            return "204:4: ( dissolveStructure | lrb dissolveStructure rrb )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA22_8 = input.LA(1);

                         
                        int index22_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred104_ChemicalChunker()||(synpred104_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 1;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index22_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 22, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA23_static {
    static final String DFA23_eotS =
        "\17\uffff";
    static final String DFA23_eofS =
        "\17\uffff";
    static final String DFA23_minS =
        "\1\47\6\45\1\uffff\6\0\1\uffff";
    static final String DFA23_maxS =
        "\1\u009e\6\45\1\uffff\6\0\1\uffff";
    static final String DFA23_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA23_specialS =
        "\10\uffff\1\3\1\4\1\5\1\2\1\1\1\0\1\uffff}>";
    static final String[] DFA23_transitionS = {
            "\1\7\1\5\1\6\1\7\2\uffff\1\4\1\7\20\uffff\1\7\4\uffff\1\7\2"+
            "\uffff\1\7\1\uffff\1\7\11\uffff\2\7\5\uffff\1\7\47\uffff\1\7"+
            "\2\uffff\1\7\5\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7"+
            "\4\uffff\1\1\1\2\1\3\4\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA23_eot = DFA.unpackEncodedString(DFA23_static.DFA23_eotS);
    static final short[] DFA23_eof = DFA.unpackEncodedString(DFA23_static.DFA23_eofS);
    static final char[] DFA23_min = DFA.unpackEncodedStringToUnsignedChars(DFA23_static.DFA23_minS);
    static final char[] DFA23_max = DFA.unpackEncodedStringToUnsignedChars(DFA23_static.DFA23_maxS);
    static final short[] DFA23_accept = DFA.unpackEncodedString(DFA23_static.DFA23_acceptS);
    static final short[] DFA23_special = DFA.unpackEncodedString(DFA23_static.DFA23_specialS);
    static final short[][] DFA23_transition;

    static {
        int numStates = DFA23_static.DFA23_transitionS.length;
        DFA23_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA23_transition[i] = DFA.unpackEncodedString(DFA23_static.DFA23_transitionS[i]);
        }
    }

    class DFA23 extends DFA {

        public DFA23(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 23;
            this.eot = DFA23_eot;
            this.eof = DFA23_eof;
            this.min = DFA23_min;
            this.max = DFA23_max;
            this.accept = DFA23_accept;
            this.special = DFA23_special;
            this.transition = DFA23_transition;
        }
        public String getDescription() {
            return "207:4: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA23_13 = input.LA(1);

                         
                        int index23_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_13);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA23_12 = input.LA(1);

                         
                        int index23_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_12);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA23_11 = input.LA(1);

                         
                        int index23_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_11);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA23_8 = input.LA(1);

                         
                        int index23_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA23_9 = input.LA(1);

                         
                        int index23_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_9);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA23_10 = input.LA(1);

                         
                        int index23_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 23, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA25_static {
    static final String DFA25_eotS =
        "\27\uffff";
    static final String DFA25_eofS =
        "\27\uffff";
    static final String DFA25_minS =
        "\1\47\4\0\1\uffff\12\0\7\uffff";
    static final String DFA25_maxS =
        "\1\u0099\4\0\1\uffff\12\0\7\uffff";
    static final String DFA25_acceptS =
        "\5\uffff\1\1\13\uffff\1\2\5\uffff";
    static final String DFA25_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\7\uffff}>";
    static final String[] DFA25_transitionS = {
            "\1\21\1\16\1\17\1\21\2\uffff\1\15\1\11\20\uffff\1\10\4\uffff"+
            "\1\21\2\uffff\1\7\1\uffff\1\3\11\uffff\1\21\1\5\5\uffff\1\21"+
            "\47\uffff\1\4\2\uffff\1\5\5\uffff\1\6\1\uffff\1\21\1\uffff\1"+
            "\1\2\uffff\1\2\4\uffff\1\12\1\13\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA25_eot = DFA.unpackEncodedString(DFA25_static.DFA25_eotS);
    static final short[] DFA25_eof = DFA.unpackEncodedString(DFA25_static.DFA25_eofS);
    static final char[] DFA25_min = DFA.unpackEncodedStringToUnsignedChars(DFA25_static.DFA25_minS);
    static final char[] DFA25_max = DFA.unpackEncodedStringToUnsignedChars(DFA25_static.DFA25_maxS);
    static final short[] DFA25_accept = DFA.unpackEncodedString(DFA25_static.DFA25_acceptS);
    static final short[] DFA25_special = DFA.unpackEncodedString(DFA25_static.DFA25_specialS);
    static final short[][] DFA25_transition;

    static {
        int numStates = DFA25_static.DFA25_transitionS.length;
        DFA25_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA25_transition[i] = DFA.unpackEncodedString(DFA25_static.DFA25_transitionS[i]);
        }
    }

    class DFA25 extends DFA {

        public DFA25(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 25;
            this.eot = DFA25_eot;
            this.eof = DFA25_eof;
            this.min = DFA25_min;
            this.max = DFA25_max;
            this.accept = DFA25_accept;
            this.special = DFA25_special;
            this.transition = DFA25_transition;
        }
        public String getDescription() {
            return "207:32: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA25_1 = input.LA(1);

                         
                        int index25_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA25_2 = input.LA(1);

                         
                        int index25_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA25_3 = input.LA(1);

                         
                        int index25_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA25_4 = input.LA(1);

                         
                        int index25_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA25_6 = input.LA(1);

                         
                        int index25_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_6);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA25_7 = input.LA(1);

                         
                        int index25_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_7);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA25_8 = input.LA(1);

                         
                        int index25_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_8);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA25_9 = input.LA(1);

                         
                        int index25_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_9);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA25_10 = input.LA(1);

                         
                        int index25_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_10);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA25_11 = input.LA(1);

                         
                        int index25_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_11);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA25_12 = input.LA(1);

                         
                        int index25_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_12);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA25_13 = input.LA(1);

                         
                        int index25_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_13);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA25_14 = input.LA(1);

                         
                        int index25_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_14);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA25_15 = input.LA(1);

                         
                        int index25_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index25_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 25, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA27_static {
    static final String DFA27_eotS =
        "\u0092\uffff";
    static final String DFA27_eofS =
        "\1\3\u0091\uffff";
    static final String DFA27_minS =
        "\1\46\2\0\u008f\uffff";
    static final String DFA27_maxS =
        "\1\u00b4\2\0\u008f\uffff";
    static final String DFA27_acceptS =
        "\3\uffff\1\2\u008d\uffff\1\1";
    static final String DFA27_specialS =
        "\1\uffff\1\0\1\1\u008f\uffff}>";
    static final String[] DFA27_transitionS = {
            "\137\3\1\2\13\3\1\1\43\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA27_eot = DFA.unpackEncodedString(DFA27_static.DFA27_eotS);
    static final short[] DFA27_eof = DFA.unpackEncodedString(DFA27_static.DFA27_eofS);
    static final char[] DFA27_min = DFA.unpackEncodedStringToUnsignedChars(DFA27_static.DFA27_minS);
    static final char[] DFA27_max = DFA.unpackEncodedStringToUnsignedChars(DFA27_static.DFA27_maxS);
    static final short[] DFA27_accept = DFA.unpackEncodedString(DFA27_static.DFA27_acceptS);
    static final short[] DFA27_special = DFA.unpackEncodedString(DFA27_static.DFA27_specialS);
    static final short[][] DFA27_transition;

    static {
        int numStates = DFA27_static.DFA27_transitionS.length;
        DFA27_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA27_transition[i] = DFA.unpackEncodedString(DFA27_static.DFA27_transitionS[i]);
        }
    }

    class DFA27 extends DFA {

        public DFA27(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 27;
            this.eot = DFA27_eot;
            this.eof = DFA27_eof;
            this.min = DFA27_min;
            this.max = DFA27_max;
            this.accept = DFA27_accept;
            this.special = DFA27_special;
            this.transition = DFA27_transition;
        }
        public String getDescription() {
            return "()* loopback of 207:71: ( conjunction molecule )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA27_1 = input.LA(1);

                         
                        int index27_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index27_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA27_2 = input.LA(1);

                         
                        int index27_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index27_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 27, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA29_static {
    static final String DFA29_eotS =
        "\17\uffff";
    static final String DFA29_eofS =
        "\17\uffff";
    static final String DFA29_minS =
        "\1\47\6\45\1\uffff\6\0\1\uffff";
    static final String DFA29_maxS =
        "\1\u009e\6\45\1\uffff\6\0\1\uffff";
    static final String DFA29_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA29_specialS =
        "\10\uffff\1\5\1\0\1\4\1\3\1\1\1\2\1\uffff}>";
    static final String[] DFA29_transitionS = {
            "\1\7\1\5\1\6\1\7\2\uffff\1\4\1\7\20\uffff\1\7\4\uffff\1\7\2"+
            "\uffff\1\7\1\uffff\1\7\11\uffff\2\7\5\uffff\1\7\47\uffff\1\7"+
            "\2\uffff\1\7\5\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7"+
            "\4\uffff\1\1\1\2\1\3\4\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA29_eot = DFA.unpackEncodedString(DFA29_static.DFA29_eotS);
    static final short[] DFA29_eof = DFA.unpackEncodedString(DFA29_static.DFA29_eofS);
    static final char[] DFA29_min = DFA.unpackEncodedStringToUnsignedChars(DFA29_static.DFA29_minS);
    static final char[] DFA29_max = DFA.unpackEncodedStringToUnsignedChars(DFA29_static.DFA29_maxS);
    static final short[] DFA29_accept = DFA.unpackEncodedString(DFA29_static.DFA29_acceptS);
    static final short[] DFA29_special = DFA.unpackEncodedString(DFA29_static.DFA29_specialS);
    static final short[][] DFA29_transition;

    static {
        int numStates = DFA29_static.DFA29_transitionS.length;
        DFA29_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA29_transition[i] = DFA.unpackEncodedString(DFA29_static.DFA29_transitionS[i]);
        }
    }

    class DFA29 extends DFA {

        public DFA29(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = DFA29_eot;
            this.eof = DFA29_eof;
            this.min = DFA29_min;
            this.max = DFA29_max;
            this.accept = DFA29_accept;
            this.special = DFA29_special;
            this.transition = DFA29_transition;
        }
        public String getDescription() {
            return "210:16: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA29_9 = input.LA(1);

                         
                        int index29_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA29_12 = input.LA(1);

                         
                        int index29_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_12);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA29_13 = input.LA(1);

                         
                        int index29_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_13);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA29_11 = input.LA(1);

                         
                        int index29_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_11);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA29_10 = input.LA(1);

                         
                        int index29_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_10);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA29_8 = input.LA(1);

                         
                        int index29_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 29, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA31_static {
    static final String DFA31_eotS =
        "\27\uffff";
    static final String DFA31_eofS =
        "\27\uffff";
    static final String DFA31_minS =
        "\1\47\4\0\1\uffff\12\0\7\uffff";
    static final String DFA31_maxS =
        "\1\u0099\4\0\1\uffff\12\0\7\uffff";
    static final String DFA31_acceptS =
        "\5\uffff\1\1\13\uffff\1\2\5\uffff";
    static final String DFA31_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\7\uffff}>";
    static final String[] DFA31_transitionS = {
            "\1\21\1\16\1\17\1\21\2\uffff\1\15\1\11\20\uffff\1\10\4\uffff"+
            "\1\21\2\uffff\1\7\1\uffff\1\3\11\uffff\1\21\1\5\5\uffff\1\21"+
            "\47\uffff\1\4\2\uffff\1\5\5\uffff\1\6\1\uffff\1\21\1\uffff\1"+
            "\1\2\uffff\1\2\4\uffff\1\12\1\13\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA31_eot = DFA.unpackEncodedString(DFA31_static.DFA31_eotS);
    static final short[] DFA31_eof = DFA.unpackEncodedString(DFA31_static.DFA31_eofS);
    static final char[] DFA31_min = DFA.unpackEncodedStringToUnsignedChars(DFA31_static.DFA31_minS);
    static final char[] DFA31_max = DFA.unpackEncodedStringToUnsignedChars(DFA31_static.DFA31_maxS);
    static final short[] DFA31_accept = DFA.unpackEncodedString(DFA31_static.DFA31_acceptS);
    static final short[] DFA31_special = DFA.unpackEncodedString(DFA31_static.DFA31_specialS);
    static final short[][] DFA31_transition;

    static {
        int numStates = DFA31_static.DFA31_transitionS.length;
        DFA31_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA31_transition[i] = DFA.unpackEncodedString(DFA31_static.DFA31_transitionS[i]);
        }
    }

    class DFA31 extends DFA {

        public DFA31(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 31;
            this.eot = DFA31_eot;
            this.eof = DFA31_eof;
            this.min = DFA31_min;
            this.max = DFA31_max;
            this.accept = DFA31_accept;
            this.special = DFA31_special;
            this.transition = DFA31_transition;
        }
        public String getDescription() {
            return "210:26: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA31_1 = input.LA(1);

                         
                        int index31_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA31_2 = input.LA(1);

                         
                        int index31_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA31_3 = input.LA(1);

                         
                        int index31_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA31_4 = input.LA(1);

                         
                        int index31_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA31_6 = input.LA(1);

                         
                        int index31_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_6);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA31_7 = input.LA(1);

                         
                        int index31_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_7);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA31_8 = input.LA(1);

                         
                        int index31_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_8);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA31_9 = input.LA(1);

                         
                        int index31_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_9);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA31_10 = input.LA(1);

                         
                        int index31_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_10);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA31_11 = input.LA(1);

                         
                        int index31_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_11);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA31_12 = input.LA(1);

                         
                        int index31_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_12);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA31_13 = input.LA(1);

                         
                        int index31_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_13);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA31_14 = input.LA(1);

                         
                        int index31_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_14);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA31_15 = input.LA(1);

                         
                        int index31_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index31_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 31, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA41_static {
    static final String DFA41_eotS =
        "\13\uffff";
    static final String DFA41_eofS =
        "\1\1\12\uffff";
    static final String DFA41_minS =
        "\1\46\1\uffff\4\45\4\0\1\uffff";
    static final String DFA41_maxS =
        "\1\u00b4\1\uffff\4\45\4\0\1\uffff";
    static final String DFA41_acceptS =
        "\1\uffff\1\2\10\uffff\1\1";
    static final String DFA41_specialS =
        "\6\uffff\1\3\1\0\1\2\1\1\1\uffff}>";
    static final String[] DFA41_transitionS = {
            "\176\1\1\2\1\3\1\5\1\4\15\1",
            "",
            "\1\6",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA41_eot = DFA.unpackEncodedString(DFA41_static.DFA41_eotS);
    static final short[] DFA41_eof = DFA.unpackEncodedString(DFA41_static.DFA41_eofS);
    static final char[] DFA41_min = DFA.unpackEncodedStringToUnsignedChars(DFA41_static.DFA41_minS);
    static final char[] DFA41_max = DFA.unpackEncodedStringToUnsignedChars(DFA41_static.DFA41_maxS);
    static final short[] DFA41_accept = DFA.unpackEncodedString(DFA41_static.DFA41_acceptS);
    static final short[] DFA41_special = DFA.unpackEncodedString(DFA41_static.DFA41_specialS);
    static final short[][] DFA41_transition;

    static {
        int numStates = DFA41_static.DFA41_transitionS.length;
        DFA41_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA41_transition[i] = DFA.unpackEncodedString(DFA41_static.DFA41_transitionS[i]);
        }
    }

    class DFA41 extends DFA {

        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = DFA41_eot;
            this.eof = DFA41_eof;
            this.min = DFA41_min;
            this.max = DFA41_max;
            this.accept = DFA41_accept;
            this.special = DFA41_special;
            this.transition = DFA41_transition;
        }
        public String getDescription() {
            return "()* loopback of 215:86: ( adv )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA41_7 = input.LA(1);

                         
                        int index41_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index41_7);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA41_9 = input.LA(1);

                         
                        int index41_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index41_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA41_8 = input.LA(1);

                         
                        int index41_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index41_8);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA41_6 = input.LA(1);

                         
                        int index41_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index41_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 41, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA42_static {
    static final String DFA42_eotS =
        "\17\uffff";
    static final String DFA42_eofS =
        "\1\7\16\uffff";
    static final String DFA42_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA42_maxS =
        "\1\u00b4\6\45\1\uffff\6\0\1\uffff";
    static final String DFA42_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA42_specialS =
        "\10\uffff\1\1\1\4\1\5\1\0\1\2\1\3\1\uffff}>";
    static final String[] DFA42_transitionS = {
            "\2\7\1\5\1\6\3\7\1\4\151\7\1\1\1\2\1\3\33\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA42_eot = DFA.unpackEncodedString(DFA42_static.DFA42_eotS);
    static final short[] DFA42_eof = DFA.unpackEncodedString(DFA42_static.DFA42_eofS);
    static final char[] DFA42_min = DFA.unpackEncodedStringToUnsignedChars(DFA42_static.DFA42_minS);
    static final char[] DFA42_max = DFA.unpackEncodedStringToUnsignedChars(DFA42_static.DFA42_maxS);
    static final short[] DFA42_accept = DFA.unpackEncodedString(DFA42_static.DFA42_acceptS);
    static final short[] DFA42_special = DFA.unpackEncodedString(DFA42_static.DFA42_specialS);
    static final short[][] DFA42_transition;

    static {
        int numStates = DFA42_static.DFA42_transitionS.length;
        DFA42_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA42_transition[i] = DFA.unpackEncodedString(DFA42_static.DFA42_transitionS[i]);
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;
        }
        public String getDescription() {
            return "215:91: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA42_11 = input.LA(1);

                         
                        int index42_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index42_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA42_8 = input.LA(1);

                         
                        int index42_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index42_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA42_12 = input.LA(1);

                         
                        int index42_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index42_12);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA42_13 = input.LA(1);

                         
                        int index42_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index42_13);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA42_9 = input.LA(1);

                         
                        int index42_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index42_9);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA42_10 = input.LA(1);

                         
                        int index42_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index42_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 42, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA45_static {
    static final String DFA45_eotS =
        "\13\uffff";
    static final String DFA45_eofS =
        "\1\1\12\uffff";
    static final String DFA45_minS =
        "\1\46\1\uffff\4\45\4\0\1\uffff";
    static final String DFA45_maxS =
        "\1\u00b4\1\uffff\4\45\4\0\1\uffff";
    static final String DFA45_acceptS =
        "\1\uffff\1\2\10\uffff\1\1";
    static final String DFA45_specialS =
        "\6\uffff\1\1\1\3\1\2\1\0\1\uffff}>";
    static final String[] DFA45_transitionS = {
            "\176\1\1\2\1\3\1\5\1\4\15\1",
            "",
            "\1\6",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA45_eot = DFA.unpackEncodedString(DFA45_static.DFA45_eotS);
    static final short[] DFA45_eof = DFA.unpackEncodedString(DFA45_static.DFA45_eofS);
    static final char[] DFA45_min = DFA.unpackEncodedStringToUnsignedChars(DFA45_static.DFA45_minS);
    static final char[] DFA45_max = DFA.unpackEncodedStringToUnsignedChars(DFA45_static.DFA45_maxS);
    static final short[] DFA45_accept = DFA.unpackEncodedString(DFA45_static.DFA45_acceptS);
    static final short[] DFA45_special = DFA.unpackEncodedString(DFA45_static.DFA45_specialS);
    static final short[][] DFA45_transition;

    static {
        int numStates = DFA45_static.DFA45_transitionS.length;
        DFA45_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA45_transition[i] = DFA.unpackEncodedString(DFA45_static.DFA45_transitionS[i]);
        }
    }

    class DFA45 extends DFA {

        public DFA45(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 45;
            this.eot = DFA45_eot;
            this.eof = DFA45_eof;
            this.min = DFA45_min;
            this.max = DFA45_max;
            this.accept = DFA45_accept;
            this.special = DFA45_special;
            this.transition = DFA45_transition;
        }
        public String getDescription() {
            return "()* loopback of 215:118: ( adv )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA45_9 = input.LA(1);

                         
                        int index45_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA45_6 = input.LA(1);

                         
                        int index45_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_6);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA45_8 = input.LA(1);

                         
                        int index45_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_8);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA45_7 = input.LA(1);

                         
                        int index45_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 45, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA46_static {
    static final String DFA46_eotS =
        "\17\uffff";
    static final String DFA46_eofS =
        "\1\7\16\uffff";
    static final String DFA46_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA46_maxS =
        "\1\u00b4\6\45\1\uffff\6\0\1\uffff";
    static final String DFA46_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA46_specialS =
        "\10\uffff\1\1\1\3\1\0\1\5\1\2\1\4\1\uffff}>";
    static final String[] DFA46_transitionS = {
            "\2\7\1\5\1\6\3\7\1\4\151\7\1\1\1\2\1\3\33\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA46_eot = DFA.unpackEncodedString(DFA46_static.DFA46_eotS);
    static final short[] DFA46_eof = DFA.unpackEncodedString(DFA46_static.DFA46_eofS);
    static final char[] DFA46_min = DFA.unpackEncodedStringToUnsignedChars(DFA46_static.DFA46_minS);
    static final char[] DFA46_max = DFA.unpackEncodedStringToUnsignedChars(DFA46_static.DFA46_maxS);
    static final short[] DFA46_accept = DFA.unpackEncodedString(DFA46_static.DFA46_acceptS);
    static final short[] DFA46_special = DFA.unpackEncodedString(DFA46_static.DFA46_specialS);
    static final short[][] DFA46_transition;

    static {
        int numStates = DFA46_static.DFA46_transitionS.length;
        DFA46_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA46_transition[i] = DFA.unpackEncodedString(DFA46_static.DFA46_transitionS[i]);
        }
    }

    class DFA46 extends DFA {

        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;
        }
        public String getDescription() {
            return "215:123: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA46_10 = input.LA(1);

                         
                        int index46_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index46_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA46_8 = input.LA(1);

                         
                        int index46_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index46_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA46_12 = input.LA(1);

                         
                        int index46_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index46_12);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA46_9 = input.LA(1);

                         
                        int index46_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index46_9);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA46_13 = input.LA(1);

                         
                        int index46_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index46_13);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA46_11 = input.LA(1);

                         
                        int index46_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index46_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 46, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA48_static {
    static final String DFA48_eotS =
        "\155\uffff";
    static final String DFA48_eofS =
        "\1\15\27\uffff\14\15\40\uffff\25\15\12\uffff\12\15";
    static final String DFA48_minS =
        "\1\46\14\45\1\uffff\12\45\14\46\12\0\25\45\1\uffff\25\46\12\45\12"+
        "\46";
    static final String DFA48_maxS =
        "\1\u00b4\14\45\1\uffff\12\45\14\u00b4\12\0\25\45\1\uffff\25\u00b4"+
        "\12\45\12\u00b4";
    static final String DFA48_acceptS =
        "\15\uffff\1\2\65\uffff\1\1\51\uffff";
    static final String DFA48_specialS =
        "\44\uffff\1\2\1\11\1\7\1\3\1\1\1\10\1\4\1\5\1\0\1\6\77\uffff}>";
    static final String[] DFA48_transitionS = {
            "\2\15\1\13\1\14\3\15\1\12\47\15\1\27\1\24\12\15\1\26\20\15\1"+
            "\25\20\15\1\2\23\15\1\7\1\10\1\11\1\15\1\1\10\15\1\3\1\4\1\6"+
            "\1\5\3\15\1\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "\1\35",
            "\1\36",
            "\1\37",
            "\1\40",
            "\1\41",
            "\1\42",
            "\1\43",
            "",
            "\1\44",
            "\1\45",
            "\1\46",
            "\1\47",
            "\1\50",
            "\1\51",
            "\1\52",
            "\1\53",
            "\1\54",
            "\1\55",
            "\2\15\1\62\1\63\3\15\1\61\47\15\1\27\1\24\12\15\1\26\20\15"+
            "\1\25\20\15\1\70\23\15\1\56\1\57\1\60\1\15\1\1\10\15\1\64\1"+
            "\65\1\67\1\66\3\15\1\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\2\15\1\62\1\63\3\15\1\61\47\15\1\27\1\24\12\15\1\26\20\15"+
            "\1\25\44\15\1\56\1\57\1\60\12\15\1\64\1\65\1\67\1\66\3\15\1"+
            "\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\2\15\1\75\1\76\3\15\1\74\47\15\1\27\1\24\12\15\1\26\20\15"+
            "\1\25\44\15\1\71\1\72\1\73\12\15\1\77\1\100\1\102\1\101\3\15"+
            "\1\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\2\15\1\75\1\76\3\15\1\74\47\15\1\27\1\24\12\15\1\26\20\15"+
            "\1\25\44\15\1\71\1\72\1\73\12\15\1\77\1\100\1\102\1\101\3\15"+
            "\1\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\2\15\1\75\1\76\3\15\1\74\47\15\1\27\1\24\12\15\1\26\20\15"+
            "\1\25\44\15\1\71\1\72\1\73\12\15\1\77\1\100\1\102\1\101\3\15"+
            "\1\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\2\15\1\75\1\76\3\15\1\74\47\15\1\27\1\24\12\15\1\26\20\15"+
            "\1\25\44\15\1\71\1\72\1\73\12\15\1\77\1\100\1\102\1\101\3\15"+
            "\1\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\57\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\57\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\57\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\57\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\57\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\57\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\104",
            "\1\105",
            "\1\106",
            "\1\107",
            "\1\110",
            "\1\111",
            "\1\112",
            "\1\113",
            "\1\114",
            "\1\115",
            "\1\116",
            "\1\117",
            "\1\120",
            "\1\121",
            "\1\122",
            "\1\123",
            "\1\124",
            "\1\125",
            "\1\126",
            "\1\127",
            "\1\130",
            "",
            "\57\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\57\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\57\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\57\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\57\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\57\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\2\15\1\62\1\63\3\15\1\61\47\15\1\27\1\24\12\15\1\26\20\15"+
            "\1\25\44\15\1\56\1\57\1\60\12\15\1\64\1\65\1\67\1\66\3\15\1"+
            "\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\2\15\1\62\1\63\3\15\1\61\47\15\1\27\1\24\12\15\1\26\20\15"+
            "\1\25\44\15\1\56\1\57\1\60\12\15\1\64\1\65\1\67\1\66\3\15\1"+
            "\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\2\15\1\62\1\63\3\15\1\61\47\15\1\27\1\24\12\15\1\26\20\15"+
            "\1\25\44\15\1\56\1\57\1\60\12\15\1\64\1\65\1\67\1\66\3\15\1"+
            "\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\2\15\1\62\1\63\3\15\1\61\47\15\1\27\1\24\12\15\1\26\20\15"+
            "\1\25\44\15\1\56\1\57\1\60\12\15\1\64\1\65\1\67\1\66\3\15\1"+
            "\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\2\15\1\62\1\63\3\15\1\61\47\15\1\27\1\24\12\15\1\26\20\15"+
            "\1\25\44\15\1\56\1\57\1\60\12\15\1\64\1\65\1\67\1\66\3\15\1"+
            "\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\57\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\57\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\57\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\57\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\57\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\57\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\2\15\1\135\1\136\3\15\1\134\47\15\1\27\1\24\12\15\1\26\20"+
            "\15\1\25\44\15\1\131\1\132\1\133\12\15\1\137\1\140\1\142\1\141"+
            "\3\15\1\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\2\15\1\135\1\136\3\15\1\134\47\15\1\27\1\24\12\15\1\26\20"+
            "\15\1\25\44\15\1\131\1\132\1\133\12\15\1\137\1\140\1\142\1\141"+
            "\3\15\1\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\2\15\1\135\1\136\3\15\1\134\47\15\1\27\1\24\12\15\1\26\20"+
            "\15\1\25\44\15\1\131\1\132\1\133\12\15\1\137\1\140\1\142\1\141"+
            "\3\15\1\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\2\15\1\135\1\136\3\15\1\134\47\15\1\27\1\24\12\15\1\26\20"+
            "\15\1\25\44\15\1\131\1\132\1\133\12\15\1\137\1\140\1\142\1\141"+
            "\3\15\1\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\1\143",
            "\1\144",
            "\1\145",
            "\1\146",
            "\1\147",
            "\1\150",
            "\1\151",
            "\1\152",
            "\1\153",
            "\1\154",
            "\57\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\57\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\57\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\57\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\57\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\57\15\1\27\1\24\12\15\1\26\20\15\1\25\70\15\1\16\1\17\1\20"+
            "\1\21\1\22\1\23\4\15",
            "\2\15\1\135\1\136\3\15\1\134\47\15\1\27\1\24\12\15\1\26\20"+
            "\15\1\25\44\15\1\131\1\132\1\133\12\15\1\137\1\140\1\142\1\141"+
            "\3\15\1\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\2\15\1\135\1\136\3\15\1\134\47\15\1\27\1\24\12\15\1\26\20"+
            "\15\1\25\44\15\1\131\1\132\1\133\12\15\1\137\1\140\1\142\1\141"+
            "\3\15\1\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\2\15\1\135\1\136\3\15\1\134\47\15\1\27\1\24\12\15\1\26\20"+
            "\15\1\25\44\15\1\131\1\132\1\133\12\15\1\137\1\140\1\142\1\141"+
            "\3\15\1\16\1\17\1\20\1\21\1\22\1\23\4\15",
            "\2\15\1\135\1\136\3\15\1\134\47\15\1\27\1\24\12\15\1\26\20"+
            "\15\1\25\44\15\1\131\1\132\1\133\12\15\1\137\1\140\1\142\1\141"+
            "\3\15\1\16\1\17\1\20\1\21\1\22\1\23\4\15"
    };
    }

    static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_static.DFA48_eotS);
    static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_static.DFA48_eofS);
    static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_static.DFA48_minS);
    static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_static.DFA48_maxS);
    static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_static.DFA48_acceptS);
    static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_static.DFA48_specialS);
    static final short[][] DFA48_transition;

    static {
        int numStates = DFA48_static.DFA48_transitionS.length;
        DFA48_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA48_transition[i] = DFA.unpackEncodedString(DFA48_static.DFA48_transitionS[i]);
        }
    }

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;
        }
        public String getDescription() {
            return "()* loopback of 215:133: ( otherVerbStructure )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA48_44 = input.LA(1);

                         
                        int index48_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index48_44);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA48_40 = input.LA(1);

                         
                        int index48_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index48_40);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA48_36 = input.LA(1);

                         
                        int index48_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index48_36);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA48_39 = input.LA(1);

                         
                        int index48_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index48_39);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA48_42 = input.LA(1);

                         
                        int index48_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index48_42);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA48_43 = input.LA(1);

                         
                        int index48_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index48_43);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA48_45 = input.LA(1);

                         
                        int index48_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index48_45);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA48_38 = input.LA(1);

                         
                        int index48_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index48_38);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA48_41 = input.LA(1);

                         
                        int index48_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index48_41);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA48_37 = input.LA(1);

                         
                        int index48_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index48_37);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 48, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA49_static {
    static final String DFA49_eotS =
        "\u0097\uffff";
    static final String DFA49_eofS =
        "\1\53\53\uffff\14\53\65\uffff\12\53\1\uffff\13\53\12\uffff\12\53";
    static final String DFA49_minS =
        "\1\46\52\45\1\uffff\14\46\36\0\26\45\1\uffff\12\46\1\0\13\46\12"+
        "\45\12\46";
    static final String DFA49_maxS =
        "\1\u00b4\52\45\1\uffff\14\u00b4\36\0\26\45\1\uffff\12\u00b4\1\0"+
        "\13\u00b4\12\45\12\u00b4";
    static final String DFA49_acceptS =
        "\53\uffff\1\2\100\uffff\1\1\52\uffff";
    static final String DFA49_specialS =
        "\70\uffff\1\31\1\21\1\5\1\13\1\24\1\11\1\10\1\23\1\3\1\32\1\0\1"+
        "\7\1\17\1\26\1\36\1\12\1\33\1\1\1\27\1\20\1\6\1\34\1\14\1\4\1\35"+
        "\1\16\1\25\1\22\1\15\1\2\41\uffff\1\30\37\uffff}>";
    static final String[] DFA49_transitionS = {
            "\2\53\1\13\1\14\3\53\1\12\51\53\1\37\1\30\2\53\1\20\1\15\1\16"+
            "\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31"+
            "\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53"+
            "\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52"+
            "\1\53\1\2\23\53\1\7\1\10\1\11\1\53\1\1\10\53\1\3\1\4\1\6\1\5"+
            "\15\53",
            "\1\54",
            "\1\55",
            "\1\56",
            "\1\57",
            "\1\60",
            "\1\61",
            "\1\62",
            "\1\63",
            "\1\64",
            "\1\65",
            "\1\66",
            "\1\67",
            "\1\70",
            "\1\71",
            "\1\72",
            "\1\73",
            "\1\74",
            "\1\75",
            "\1\76",
            "\1\77",
            "\1\100",
            "\1\101",
            "\1\102",
            "\1\103",
            "\1\104",
            "\1\105",
            "\1\106",
            "\1\107",
            "\1\110",
            "\1\111",
            "\1\112",
            "\1\113",
            "\1\114",
            "\1\115",
            "\1\116",
            "\1\117",
            "\1\120",
            "\1\121",
            "\1\122",
            "\1\123",
            "\1\124",
            "\1\125",
            "",
            "\2\53\1\132\1\133\3\53\1\131\51\53\1\37\1\30\2\53\1\20\1\15"+
            "\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26\1\27"+
            "\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40\1\41"+
            "\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\140\1\53\1\50\1\51"+
            "\1\52\1\53\1\141\23\53\1\126\1\127\1\130\1\53\1\1\10\53\1\134"+
            "\1\135\1\137\1\136\15\53",
            "\2\53\1\132\1\133\3\53\1\131\51\53\1\37\1\30\2\53\1\20\1\15"+
            "\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26\1\27"+
            "\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40\1\41"+
            "\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\140\1\53\1\50\1\51"+
            "\1\52\25\53\1\126\1\127\1\130\12\53\1\134\1\135\1\137\1\136"+
            "\15\53",
            "\2\53\1\146\1\147\3\53\1\145\51\53\1\37\1\30\2\53\1\20\1\15"+
            "\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26\1\27"+
            "\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40\1\41"+
            "\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\47\1\53\1\50\1\51"+
            "\1\52\25\53\1\142\1\143\1\144\12\53\1\150\1\151\1\153\1\152"+
            "\15\53",
            "\2\53\1\146\1\147\3\53\1\145\51\53\1\37\1\30\2\53\1\20\1\15"+
            "\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26\1\27"+
            "\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40\1\41"+
            "\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\47\1\53\1\50\1\51"+
            "\1\52\25\53\1\142\1\143\1\144\12\53\1\150\1\151\1\153\1\152"+
            "\15\53",
            "\2\53\1\146\1\147\3\53\1\145\51\53\1\37\1\30\2\53\1\20\1\15"+
            "\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26\1\27"+
            "\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40\1\41"+
            "\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\47\1\53\1\50\1\51"+
            "\1\52\25\53\1\142\1\143\1\144\12\53\1\150\1\151\1\153\1\152"+
            "\15\53",
            "\2\53\1\146\1\147\3\53\1\145\51\53\1\37\1\30\2\53\1\20\1\15"+
            "\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26\1\27"+
            "\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40\1\41"+
            "\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\47\1\53\1\50\1\51"+
            "\1\52\25\53\1\142\1\143\1\144\12\53\1\150\1\151\1\153\1\152"+
            "\15\53",
            "\61\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\61\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\61\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\61\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\61\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\61\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\155",
            "\1\156",
            "\1\157",
            "\1\160",
            "\1\161",
            "\1\162",
            "\1\163",
            "\1\164",
            "\1\165",
            "\1\166",
            "\1\167",
            "\1\170",
            "\1\171",
            "\1\172",
            "\1\173",
            "\1\174",
            "\1\175",
            "\1\176",
            "\1\177",
            "\1\u0080",
            "\1\u0081",
            "\1\u0082",
            "",
            "\61\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\140\1\53\1\50\1\51\1\52\63\53",
            "\61\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\140\1\53\1\50\1\51\1\52\63\53",
            "\61\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\140\1\53\1\50\1\51\1\52\63\53",
            "\61\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\140\1\53\1\50\1\51\1\52\63\53",
            "\61\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\140\1\53\1\50\1\51\1\52\63\53",
            "\61\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\140\1\53\1\50\1\51\1\52\63\53",
            "\2\53\1\132\1\133\3\53\1\131\51\53\1\37\1\30\2\53\1\20\1\15"+
            "\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26\1\27"+
            "\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40\1\41"+
            "\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\140\1\53\1\50\1\51"+
            "\1\52\25\53\1\126\1\127\1\130\12\53\1\134\1\135\1\137\1\136"+
            "\15\53",
            "\2\53\1\132\1\133\3\53\1\131\51\53\1\37\1\30\2\53\1\20\1\15"+
            "\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26\1\27"+
            "\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40\1\41"+
            "\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\140\1\53\1\50\1\51"+
            "\1\52\25\53\1\126\1\127\1\130\12\53\1\134\1\135\1\137\1\136"+
            "\15\53",
            "\2\53\1\132\1\133\3\53\1\131\51\53\1\37\1\30\2\53\1\20\1\15"+
            "\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26\1\27"+
            "\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40\1\41"+
            "\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\140\1\53\1\50\1\51"+
            "\1\52\25\53\1\126\1\127\1\130\12\53\1\134\1\135\1\137\1\136"+
            "\15\53",
            "\2\53\1\132\1\133\3\53\1\131\51\53\1\37\1\30\2\53\1\20\1\15"+
            "\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26\1\27"+
            "\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40\1\41"+
            "\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\140\1\53\1\50\1\51"+
            "\1\52\25\53\1\126\1\127\1\130\12\53\1\134\1\135\1\137\1\136"+
            "\15\53",
            "\1\uffff",
            "\2\53\1\132\1\133\3\53\1\131\51\53\1\37\1\30\2\53\1\20\1\15"+
            "\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26\1\27"+
            "\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40\1\41"+
            "\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\140\1\53\1\50\1\51"+
            "\1\52\25\53\1\126\1\127\1\130\12\53\1\134\1\135\1\137\1\136"+
            "\15\53",
            "\61\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\61\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\61\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\61\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\61\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\61\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\2\53\1\u0087\1\u0088\3\53\1\u0086\51\53\1\37\1\30\2\53\1\20"+
            "\1\15\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26"+
            "\1\27\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40"+
            "\1\41\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\47\1\53\1\50"+
            "\1\51\1\52\25\53\1\u0083\1\u0084\1\u0085\12\53\1\u0089\1\u008a"+
            "\1\u008c\1\u008b\15\53",
            "\2\53\1\u0087\1\u0088\3\53\1\u0086\51\53\1\37\1\30\2\53\1\20"+
            "\1\15\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26"+
            "\1\27\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40"+
            "\1\41\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\47\1\53\1\50"+
            "\1\51\1\52\25\53\1\u0083\1\u0084\1\u0085\12\53\1\u0089\1\u008a"+
            "\1\u008c\1\u008b\15\53",
            "\2\53\1\u0087\1\u0088\3\53\1\u0086\51\53\1\37\1\30\2\53\1\20"+
            "\1\15\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26"+
            "\1\27\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40"+
            "\1\41\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\47\1\53\1\50"+
            "\1\51\1\52\25\53\1\u0083\1\u0084\1\u0085\12\53\1\u0089\1\u008a"+
            "\1\u008c\1\u008b\15\53",
            "\2\53\1\u0087\1\u0088\3\53\1\u0086\51\53\1\37\1\30\2\53\1\20"+
            "\1\15\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26"+
            "\1\27\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40"+
            "\1\41\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\47\1\53\1\50"+
            "\1\51\1\52\25\53\1\u0083\1\u0084\1\u0085\12\53\1\u0089\1\u008a"+
            "\1\u008c\1\u008b\15\53",
            "\1\u008d",
            "\1\u008e",
            "\1\u008f",
            "\1\u0090",
            "\1\u0091",
            "\1\u0092",
            "\1\u0093",
            "\1\u0094",
            "\1\u0095",
            "\1\u0096",
            "\61\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\61\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\61\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\61\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\61\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\61\53\1\37\1\30\2\53\1\20\1\15\1\16\1\17\1\21\1\22\1\53\1"+
            "\23\1\24\1\53\1\25\1\53\1\26\1\27\1\31\1\32\1\53\1\33\1\53\1"+
            "\34\1\53\1\35\1\36\1\53\1\40\1\41\1\53\1\42\1\53\1\43\1\44\1"+
            "\45\1\53\1\46\1\47\1\53\1\50\1\51\1\52\63\53",
            "\2\53\1\u0087\1\u0088\3\53\1\u0086\51\53\1\37\1\30\2\53\1\20"+
            "\1\15\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26"+
            "\1\27\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40"+
            "\1\41\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\47\1\53\1\50"+
            "\1\51\1\52\25\53\1\u0083\1\u0084\1\u0085\12\53\1\u0089\1\u008a"+
            "\1\u008c\1\u008b\15\53",
            "\2\53\1\u0087\1\u0088\3\53\1\u0086\51\53\1\37\1\30\2\53\1\20"+
            "\1\15\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26"+
            "\1\27\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40"+
            "\1\41\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\47\1\53\1\50"+
            "\1\51\1\52\25\53\1\u0083\1\u0084\1\u0085\12\53\1\u0089\1\u008a"+
            "\1\u008c\1\u008b\15\53",
            "\2\53\1\u0087\1\u0088\3\53\1\u0086\51\53\1\37\1\30\2\53\1\20"+
            "\1\15\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26"+
            "\1\27\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40"+
            "\1\41\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\47\1\53\1\50"+
            "\1\51\1\52\25\53\1\u0083\1\u0084\1\u0085\12\53\1\u0089\1\u008a"+
            "\1\u008c\1\u008b\15\53",
            "\2\53\1\u0087\1\u0088\3\53\1\u0086\51\53\1\37\1\30\2\53\1\20"+
            "\1\15\1\16\1\17\1\21\1\22\1\53\1\23\1\24\1\53\1\25\1\53\1\26"+
            "\1\27\1\31\1\32\1\53\1\33\1\53\1\34\1\53\1\35\1\36\1\53\1\40"+
            "\1\41\1\53\1\42\1\53\1\43\1\44\1\45\1\53\1\46\1\47\1\53\1\50"+
            "\1\51\1\52\25\53\1\u0083\1\u0084\1\u0085\12\53\1\u0089\1\u008a"+
            "\1\u008c\1\u008b\15\53"
    };
    }

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_static.DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_static.DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_static.DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_static.DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_static.DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_static.DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_static.DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_static.DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "215:153: ( actionVerbStructure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA49_66 = input.LA(1);

                         
                        int index49_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_66);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA49_73 = input.LA(1);

                         
                        int index49_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_73);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA49_85 = input.LA(1);

                         
                        int index49_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_85);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA49_64 = input.LA(1);

                         
                        int index49_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_64);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA49_79 = input.LA(1);

                         
                        int index49_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_79);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA49_58 = input.LA(1);

                         
                        int index49_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_58);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA49_76 = input.LA(1);

                         
                        int index49_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_76);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA49_67 = input.LA(1);

                         
                        int index49_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_67);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA49_62 = input.LA(1);

                         
                        int index49_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_62);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA49_61 = input.LA(1);

                         
                        int index49_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_61);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA49_71 = input.LA(1);

                         
                        int index49_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_71);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA49_59 = input.LA(1);

                         
                        int index49_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_59);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA49_78 = input.LA(1);

                         
                        int index49_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_78);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA49_84 = input.LA(1);

                         
                        int index49_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_84);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA49_81 = input.LA(1);

                         
                        int index49_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_81);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA49_68 = input.LA(1);

                         
                        int index49_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_68);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA49_75 = input.LA(1);

                         
                        int index49_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_75);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA49_57 = input.LA(1);

                         
                        int index49_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_57);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA49_83 = input.LA(1);

                         
                        int index49_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_83);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA49_63 = input.LA(1);

                         
                        int index49_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_63);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA49_60 = input.LA(1);

                         
                        int index49_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_60);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA49_82 = input.LA(1);

                         
                        int index49_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_82);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA49_69 = input.LA(1);

                         
                        int index49_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_69);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA49_74 = input.LA(1);

                         
                        int index49_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_74);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA49_119 = input.LA(1);

                         
                        int index49_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_119);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA49_56 = input.LA(1);

                         
                        int index49_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_56);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA49_65 = input.LA(1);

                         
                        int index49_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_65);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA49_72 = input.LA(1);

                         
                        int index49_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_72);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA49_77 = input.LA(1);

                         
                        int index49_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_77);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA49_80 = input.LA(1);

                         
                        int index49_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_80);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA49_70 = input.LA(1);

                         
                        int index49_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 108;}

                        else if ( (true) ) {s = 43;}

                         
                        input.seek(index49_70);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 49, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA54_static {
    static final String DFA54_eotS =
        "\u0092\uffff";
    static final String DFA54_eofS =
        "\1\13\u0091\uffff";
    static final String DFA54_minS =
        "\1\46\12\0\1\uffff\2\0\4\uffff\1\0\3\uffff\1\0\27\uffff\1\0\1\uffff"+
        "\1\0\34\uffff\22\0\50\uffff\1\0\12\uffff";
    static final String DFA54_maxS =
        "\1\u00b4\12\0\1\uffff\2\0\4\uffff\1\0\3\uffff\1\0\27\uffff\1\0\1"+
        "\uffff\1\0\34\uffff\22\0\50\uffff\1\0\12\uffff";
    static final String DFA54_acceptS =
        "\13\uffff\1\2\u0085\uffff\1\1";
    static final String DFA54_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\12"+
        "\1\13\4\uffff\1\14\3\uffff\1\15\27\uffff\1\16\1\uffff\1\17\34\uffff"+
        "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
        "\1\35\1\36\1\37\1\40\1\41\50\uffff\1\42\12\uffff}>";
    static final String[] DFA54_transitionS = {
            "\2\13\1\11\1\12\3\13\1\10\1\13\1\120\1\121\1\117\1\125\1\126"+
            "\1\135\1\136\1\122\1\134\1\127\1\131\1\123\1\124\1\133\1\132"+
            "\1\130\1\13\1\56\7\13\1\60\74\13\1\15\1\13\1\u0087\11\13\1\14"+
            "\1\22\1\26\2\13\1\116\1\5\1\6\1\7\12\13\1\1\1\2\1\4\1\3\1\13"+
            "\1\115\13\13",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA54_eot = DFA.unpackEncodedString(DFA54_static.DFA54_eotS);
    static final short[] DFA54_eof = DFA.unpackEncodedString(DFA54_static.DFA54_eofS);
    static final char[] DFA54_min = DFA.unpackEncodedStringToUnsignedChars(DFA54_static.DFA54_minS);
    static final char[] DFA54_max = DFA.unpackEncodedStringToUnsignedChars(DFA54_static.DFA54_maxS);
    static final short[] DFA54_accept = DFA.unpackEncodedString(DFA54_static.DFA54_acceptS);
    static final short[] DFA54_special = DFA.unpackEncodedString(DFA54_static.DFA54_specialS);
    static final short[][] DFA54_transition;

    static {
        int numStates = DFA54_static.DFA54_transitionS.length;
        DFA54_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA54_transition[i] = DFA.unpackEncodedString(DFA54_static.DFA54_transitionS[i]);
        }
    }

    class DFA54 extends DFA {

        public DFA54(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 54;
            this.eot = DFA54_eot;
            this.eof = DFA54_eof;
            this.min = DFA54_min;
            this.max = DFA54_max;
            this.accept = DFA54_accept;
            this.special = DFA54_special;
            this.transition = DFA54_transition;
        }
        public String getDescription() {
            return "()* loopback of 215:182: ( ( cc )? ( comma )? prepphrase )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA54_1 = input.LA(1);

                         
                        int index54_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA54_2 = input.LA(1);

                         
                        int index54_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA54_3 = input.LA(1);

                         
                        int index54_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA54_4 = input.LA(1);

                         
                        int index54_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA54_5 = input.LA(1);

                         
                        int index54_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA54_6 = input.LA(1);

                         
                        int index54_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA54_7 = input.LA(1);

                         
                        int index54_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA54_8 = input.LA(1);

                         
                        int index54_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA54_9 = input.LA(1);

                         
                        int index54_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA54_10 = input.LA(1);

                         
                        int index54_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA54_12 = input.LA(1);

                         
                        int index54_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_12);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA54_13 = input.LA(1);

                         
                        int index54_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_13);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA54_18 = input.LA(1);

                         
                        int index54_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_18);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA54_22 = input.LA(1);

                         
                        int index54_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_22);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA54_46 = input.LA(1);

                         
                        int index54_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_46);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA54_48 = input.LA(1);

                         
                        int index54_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_48);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA54_77 = input.LA(1);

                         
                        int index54_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_77);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA54_78 = input.LA(1);

                         
                        int index54_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_78);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA54_79 = input.LA(1);

                         
                        int index54_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_79);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA54_80 = input.LA(1);

                         
                        int index54_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_80);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA54_81 = input.LA(1);

                         
                        int index54_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_81);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA54_82 = input.LA(1);

                         
                        int index54_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_82);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA54_83 = input.LA(1);

                         
                        int index54_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_83);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA54_84 = input.LA(1);

                         
                        int index54_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_84);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA54_85 = input.LA(1);

                         
                        int index54_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_85);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA54_86 = input.LA(1);

                         
                        int index54_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_86);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA54_87 = input.LA(1);

                         
                        int index54_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_87);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA54_88 = input.LA(1);

                         
                        int index54_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_88);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA54_89 = input.LA(1);

                         
                        int index54_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_89);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA54_90 = input.LA(1);

                         
                        int index54_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_90);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA54_91 = input.LA(1);

                         
                        int index54_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_91);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA54_92 = input.LA(1);

                         
                        int index54_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_92);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA54_93 = input.LA(1);

                         
                        int index54_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_93);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA54_94 = input.LA(1);

                         
                        int index54_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_94);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA54_135 = input.LA(1);

                         
                        int index54_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index54_135);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 54, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA60_static {
    static final String DFA60_eotS =
        "\13\uffff";
    static final String DFA60_eofS =
        "\1\1\12\uffff";
    static final String DFA60_minS =
        "\1\46\1\uffff\4\45\4\0\1\uffff";
    static final String DFA60_maxS =
        "\1\u00b4\1\uffff\4\45\4\0\1\uffff";
    static final String DFA60_acceptS =
        "\1\uffff\1\2\10\uffff\1\1";
    static final String DFA60_specialS =
        "\6\uffff\1\0\1\2\1\1\1\3\1\uffff}>";
    static final String[] DFA60_transitionS = {
            "\176\1\1\2\1\3\1\5\1\4\15\1",
            "",
            "\1\6",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA60_eot = DFA.unpackEncodedString(DFA60_static.DFA60_eotS);
    static final short[] DFA60_eof = DFA.unpackEncodedString(DFA60_static.DFA60_eofS);
    static final char[] DFA60_min = DFA.unpackEncodedStringToUnsignedChars(DFA60_static.DFA60_minS);
    static final char[] DFA60_max = DFA.unpackEncodedStringToUnsignedChars(DFA60_static.DFA60_maxS);
    static final short[] DFA60_accept = DFA.unpackEncodedString(DFA60_static.DFA60_acceptS);
    static final short[] DFA60_special = DFA.unpackEncodedString(DFA60_static.DFA60_specialS);
    static final short[][] DFA60_transition;

    static {
        int numStates = DFA60_static.DFA60_transitionS.length;
        DFA60_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA60_transition[i] = DFA.unpackEncodedString(DFA60_static.DFA60_transitionS[i]);
        }
    }

    class DFA60 extends DFA {

        public DFA60(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 60;
            this.eot = DFA60_eot;
            this.eof = DFA60_eof;
            this.min = DFA60_min;
            this.max = DFA60_max;
            this.accept = DFA60_accept;
            this.special = DFA60_special;
            this.transition = DFA60_transition;
        }
        public String getDescription() {
            return "()* loopback of 217:59: ( adv )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA60_6 = input.LA(1);

                         
                        int index60_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index60_6);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA60_8 = input.LA(1);

                         
                        int index60_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index60_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA60_7 = input.LA(1);

                         
                        int index60_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index60_7);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA60_9 = input.LA(1);

                         
                        int index60_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index60_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 60, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA61_static {
    static final String DFA61_eotS =
        "\17\uffff";
    static final String DFA61_eofS =
        "\1\7\16\uffff";
    static final String DFA61_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA61_maxS =
        "\1\u00b4\6\45\1\uffff\6\0\1\uffff";
    static final String DFA61_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA61_specialS =
        "\10\uffff\1\2\1\0\1\5\1\4\1\1\1\3\1\uffff}>";
    static final String[] DFA61_transitionS = {
            "\2\7\1\5\1\6\3\7\1\4\151\7\1\1\1\2\1\3\33\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA61_eot = DFA.unpackEncodedString(DFA61_static.DFA61_eotS);
    static final short[] DFA61_eof = DFA.unpackEncodedString(DFA61_static.DFA61_eofS);
    static final char[] DFA61_min = DFA.unpackEncodedStringToUnsignedChars(DFA61_static.DFA61_minS);
    static final char[] DFA61_max = DFA.unpackEncodedStringToUnsignedChars(DFA61_static.DFA61_maxS);
    static final short[] DFA61_accept = DFA.unpackEncodedString(DFA61_static.DFA61_acceptS);
    static final short[] DFA61_special = DFA.unpackEncodedString(DFA61_static.DFA61_specialS);
    static final short[][] DFA61_transition;

    static {
        int numStates = DFA61_static.DFA61_transitionS.length;
        DFA61_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA61_transition[i] = DFA.unpackEncodedString(DFA61_static.DFA61_transitionS[i]);
        }
    }

    class DFA61 extends DFA {

        public DFA61(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 61;
            this.eot = DFA61_eot;
            this.eof = DFA61_eof;
            this.min = DFA61_min;
            this.max = DFA61_max;
            this.accept = DFA61_accept;
            this.special = DFA61_special;
            this.transition = DFA61_transition;
        }
        public String getDescription() {
            return "217:64: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA61_9 = input.LA(1);

                         
                        int index61_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index61_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA61_12 = input.LA(1);

                         
                        int index61_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index61_12);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA61_8 = input.LA(1);

                         
                        int index61_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index61_8);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA61_13 = input.LA(1);

                         
                        int index61_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index61_13);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA61_11 = input.LA(1);

                         
                        int index61_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index61_11);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA61_10 = input.LA(1);

                         
                        int index61_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index61_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 61, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA68_static {
    static final String DFA68_eotS =
        "\13\uffff";
    static final String DFA68_eofS =
        "\1\1\12\uffff";
    static final String DFA68_minS =
        "\1\46\1\uffff\4\45\4\0\1\uffff";
    static final String DFA68_maxS =
        "\1\u00b4\1\uffff\4\45\4\0\1\uffff";
    static final String DFA68_acceptS =
        "\1\uffff\1\2\10\uffff\1\1";
    static final String DFA68_specialS =
        "\6\uffff\1\1\1\3\1\0\1\2\1\uffff}>";
    static final String[] DFA68_transitionS = {
            "\176\1\1\2\1\3\1\5\1\4\15\1",
            "",
            "\1\6",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA68_eot = DFA.unpackEncodedString(DFA68_static.DFA68_eotS);
    static final short[] DFA68_eof = DFA.unpackEncodedString(DFA68_static.DFA68_eofS);
    static final char[] DFA68_min = DFA.unpackEncodedStringToUnsignedChars(DFA68_static.DFA68_minS);
    static final char[] DFA68_max = DFA.unpackEncodedStringToUnsignedChars(DFA68_static.DFA68_maxS);
    static final short[] DFA68_accept = DFA.unpackEncodedString(DFA68_static.DFA68_acceptS);
    static final short[] DFA68_special = DFA.unpackEncodedString(DFA68_static.DFA68_specialS);
    static final short[][] DFA68_transition;

    static {
        int numStates = DFA68_static.DFA68_transitionS.length;
        DFA68_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA68_transition[i] = DFA.unpackEncodedString(DFA68_static.DFA68_transitionS[i]);
        }
    }

    class DFA68 extends DFA {

        public DFA68(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 68;
            this.eot = DFA68_eot;
            this.eof = DFA68_eof;
            this.min = DFA68_min;
            this.max = DFA68_max;
            this.accept = DFA68_accept;
            this.special = DFA68_special;
            this.transition = DFA68_transition;
        }
        public String getDescription() {
            return "()* loopback of 218:57: ( adv )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA68_8 = input.LA(1);

                         
                        int index68_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index68_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA68_6 = input.LA(1);

                         
                        int index68_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index68_6);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA68_9 = input.LA(1);

                         
                        int index68_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index68_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA68_7 = input.LA(1);

                         
                        int index68_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index68_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 68, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA69_static {
    static final String DFA69_eotS =
        "\17\uffff";
    static final String DFA69_eofS =
        "\1\7\16\uffff";
    static final String DFA69_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA69_maxS =
        "\1\u00b4\6\45\1\uffff\6\0\1\uffff";
    static final String DFA69_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA69_specialS =
        "\10\uffff\1\4\1\3\1\2\1\1\1\5\1\0\1\uffff}>";
    static final String[] DFA69_transitionS = {
            "\2\7\1\5\1\6\3\7\1\4\151\7\1\1\1\2\1\3\33\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA69_eot = DFA.unpackEncodedString(DFA69_static.DFA69_eotS);
    static final short[] DFA69_eof = DFA.unpackEncodedString(DFA69_static.DFA69_eofS);
    static final char[] DFA69_min = DFA.unpackEncodedStringToUnsignedChars(DFA69_static.DFA69_minS);
    static final char[] DFA69_max = DFA.unpackEncodedStringToUnsignedChars(DFA69_static.DFA69_maxS);
    static final short[] DFA69_accept = DFA.unpackEncodedString(DFA69_static.DFA69_acceptS);
    static final short[] DFA69_special = DFA.unpackEncodedString(DFA69_static.DFA69_specialS);
    static final short[][] DFA69_transition;

    static {
        int numStates = DFA69_static.DFA69_transitionS.length;
        DFA69_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA69_transition[i] = DFA.unpackEncodedString(DFA69_static.DFA69_transitionS[i]);
        }
    }

    class DFA69 extends DFA {

        public DFA69(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 69;
            this.eot = DFA69_eot;
            this.eof = DFA69_eof;
            this.min = DFA69_min;
            this.max = DFA69_max;
            this.accept = DFA69_accept;
            this.special = DFA69_special;
            this.transition = DFA69_transition;
        }
        public String getDescription() {
            return "218:62: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA69_13 = input.LA(1);

                         
                        int index69_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index69_13);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA69_11 = input.LA(1);

                         
                        int index69_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index69_11);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA69_10 = input.LA(1);

                         
                        int index69_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index69_10);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA69_9 = input.LA(1);

                         
                        int index69_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index69_9);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA69_8 = input.LA(1);

                         
                        int index69_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index69_8);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA69_12 = input.LA(1);

                         
                        int index69_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index69_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 69, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA72_static {
    static final String DFA72_eotS =
        "\46\uffff";
    static final String DFA72_eofS =
        "\37\uffff\1\40\2\uffff\1\40\3\uffff";
    static final String DFA72_minS =
        "\1\127\12\uffff\1\45\23\uffff\1\46\1\uffff\1\45\1\46\1\45\1\0\1"+
        "\uffff";
    static final String DFA72_maxS =
        "\1\u0081\12\uffff\1\45\23\uffff\1\u00b4\1\uffff\1\45\1\u00b4\1\45"+
        "\1\0\1\uffff";
    static final String DFA72_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\uffff\1\15"+
        "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
        "\1\33\1\34\1\35\1\36\1\37\1\uffff\1\13\4\uffff\1\14";
    static final String DFA72_specialS =
        "\44\uffff\1\0\1\uffff}>";
    static final String[] DFA72_transitionS = {
            "\1\23\1\14\2\uffff\1\4\1\1\1\2\1\3\1\5\1\6\1\uffff\1\7\1\10"+
            "\1\uffff\1\11\1\uffff\1\12\1\13\1\15\1\16\1\uffff\1\17\1\uffff"+
            "\1\20\1\uffff\1\21\1\22\1\uffff\1\24\1\25\1\uffff\1\26\1\uffff"+
            "\1\27\1\30\1\31\1\uffff\1\32\1\33\1\uffff\1\34\1\35\1\36",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\37",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\153\40\1\41\43\40",
            "",
            "\1\42",
            "\72\40\1\43\124\40",
            "\1\44",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA72_eot = DFA.unpackEncodedString(DFA72_static.DFA72_eotS);
    static final short[] DFA72_eof = DFA.unpackEncodedString(DFA72_static.DFA72_eofS);
    static final char[] DFA72_min = DFA.unpackEncodedStringToUnsignedChars(DFA72_static.DFA72_minS);
    static final char[] DFA72_max = DFA.unpackEncodedStringToUnsignedChars(DFA72_static.DFA72_maxS);
    static final short[] DFA72_accept = DFA.unpackEncodedString(DFA72_static.DFA72_acceptS);
    static final short[] DFA72_special = DFA.unpackEncodedString(DFA72_static.DFA72_specialS);
    static final short[][] DFA72_transition;

    static {
        int numStates = DFA72_static.DFA72_transitionS.length;
        DFA72_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA72_transition[i] = DFA.unpackEncodedString(DFA72_static.DFA72_transitionS[i]);
        }
    }

    class DFA72 extends DFA {

        public DFA72(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 72;
            this.eot = DFA72_eot;
            this.eof = DFA72_eof;
            this.min = DFA72_min;
            this.max = DFA72_max;
            this.accept = DFA72_accept;
            this.special = DFA72_special;
            this.transition = DFA72_transition;
        }
        public String getDescription() {
            return "221:1: actionVerb : ( vbadd | vbcharge | vbcontain | vbdilute | vbdrop | vbfill | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | degassMultiVerb | vbsubject | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbsubmerge | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA72_36 = input.LA(1);

                         
                        int index72_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred165_ChemicalChunker()) ) {s = 37;}

                         
                        input.seek(index72_36);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 72, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA75_static {
    static final String DFA75_eotS =
        "\127\uffff";
    static final String DFA75_eofS =
        "\127\uffff";
    static final String DFA75_minS =
        "\1\46\2\uffff\21\0\1\uffff\3\0\1\uffff\4\0\1\uffff\2\0\67\uffff";
    static final String DFA75_maxS =
        "\1\u00b4\2\uffff\21\0\1\uffff\3\0\1\uffff\4\0\1\uffff\2\0\67\uffff";
    static final String DFA75_acceptS =
        "\1\uffff\1\1\1\2\21\uffff\1\10\10\uffff\1\11\2\uffff\1\13\1\15\1"+
        "\16\1\20\1\23\1\25\1\30\1\32\1\34\1\35\1\37\1\40\1\41\1\42\1\43"+
        "\1\44\1\45\1\46\1\47\1\52\1\53\1\54\1\55\1\56\1\60\1\61\1\62\5\uffff"+
        "\1\63\1\64\1\65\1\3\1\4\1\5\1\7\1\26\1\6\1\22\1\31\1\57\1\51\1\27"+
        "\1\12\1\36\1\17\1\14\1\21\1\24\1\50\1\66\1\33";
    static final String DFA75_specialS =
        "\3\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\uffff\1\21\1\22\1\23\1\uffff\1\24\1\25\1"+
        "\26\1\27\1\uffff\1\30\1\31\67\uffff}>";
    static final String[] DFA75_transitionS = {
            "\1\3\1\36\1\21\1\22\1\34\1\45\1\uffff\1\20\1\14\20\uffff\1\13"+
            "\1\44\1\uffff\1\50\1\uffff\1\32\1\51\1\60\1\12\1\46\1\7\1\47"+
            "\1\37\1\40\1\25\1\52\1\53\1\54\1\55\1\56\1\31\1\23\4\uffff\1"+
            "\26\1\33\11\uffff\1\24\1\uffff\1\57\4\uffff\1\63\1\uffff\1\64"+
            "\1\uffff\1\65\5\uffff\1\66\1\uffff\1\61\3\uffff\1\67\1\uffff"+
            "\1\43\1\62\3\uffff\1\10\2\uffff\1\5\5\uffff\1\11\1\uffff\1\35"+
            "\1\uffff\1\4\2\uffff\1\6\1\24\1\72\1\70\1\uffff\1\15\1\16\1"+
            "\17\1\100\1\uffff\1\27\1\41\1\42\1\101\1\72\1\102\1\1\1\2\4"+
            "\uffff\1\71\10\uffff\4\72",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA75_eot = DFA.unpackEncodedString(DFA75_static.DFA75_eotS);
    static final short[] DFA75_eof = DFA.unpackEncodedString(DFA75_static.DFA75_eofS);
    static final char[] DFA75_min = DFA.unpackEncodedStringToUnsignedChars(DFA75_static.DFA75_minS);
    static final char[] DFA75_max = DFA.unpackEncodedStringToUnsignedChars(DFA75_static.DFA75_maxS);
    static final short[] DFA75_accept = DFA.unpackEncodedString(DFA75_static.DFA75_acceptS);
    static final short[] DFA75_special = DFA.unpackEncodedString(DFA75_static.DFA75_specialS);
    static final short[][] DFA75_transition;

    static {
        int numStates = DFA75_static.DFA75_transitionS.length;
        DFA75_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA75_transition[i] = DFA.unpackEncodedString(DFA75_static.DFA75_transitionS[i]);
        }
    }

    class DFA75 extends DFA {

        public DFA75(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 75;
            this.eot = DFA75_eot;
            this.eof = DFA75_eof;
            this.min = DFA75_min;
            this.max = DFA75_max;
            this.accept = DFA75_accept;
            this.special = DFA75_special;
            this.transition = DFA75_transition;
        }
        public String getDescription() {
            return "229:1: nounStructure : ( prp | prp_poss | captionLabel | nnplabel | citation | cycles | molecule | apparatus | unnamedmolecule | nnstate | procedureNode | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | nntime | nnatmosphere | tmunicode | quantity | nnchementity | nntemp | nnph | nnflash | nngeneral | nnamount | nneq | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | squareBracketedReference | nndry | nnextract | nnfilter | nnprecipitate | nnremove | nnyield | fw | sym | clause | ls | nnps | pos | oscarase );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA75_3 = input.LA(1);

                         
                        int index75_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred196_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred197_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index75_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA75_4 = input.LA(1);

                         
                        int index75_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred201_ChemicalChunker()) ) {s = 20;}

                        else if ( ((synpred202_ChemicalChunker()||(synpred202_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 29;}

                        else if ( (synpred215_ChemicalChunker()) ) {s = 71;}

                         
                        input.seek(index75_4);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA75_5 = input.LA(1);

                         
                        int index75_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred201_ChemicalChunker()) ) {s = 20;}

                         
                        input.seek(index75_5);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA75_6 = input.LA(1);

                         
                        int index75_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred199_ChemicalChunker()) ) {s = 72;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred201_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred202_ChemicalChunker()) ) {s = 29;}

                        else if ( (synpred211_ChemicalChunker()) ) {s = 73;}

                        else if ( (synpred215_ChemicalChunker()) ) {s = 71;}

                         
                        input.seek(index75_6);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA75_7 = input.LA(1);

                         
                        int index75_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred200_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred201_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred202_ChemicalChunker()) ) {s = 29;}

                        else if ( (synpred215_ChemicalChunker()) ) {s = 71;}

                        else if ( (synpred218_ChemicalChunker()) ) {s = 74;}

                         
                        input.seek(index75_7);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA75_8 = input.LA(1);

                         
                        int index75_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred200_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred201_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred202_ChemicalChunker()) ) {s = 29;}

                        else if ( (synpred215_ChemicalChunker()) ) {s = 71;}

                        else if ( (synpred240_ChemicalChunker()) ) {s = 75;}

                         
                        input.seek(index75_8);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA75_9 = input.LA(1);

                         
                        int index75_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred200_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred201_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred202_ChemicalChunker()) ) {s = 29;}

                        else if ( (synpred234_ChemicalChunker()) ) {s = 76;}

                         
                        input.seek(index75_9);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA75_10 = input.LA(1);

                         
                        int index75_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred200_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred201_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred202_ChemicalChunker()) ) {s = 29;}

                        else if ( (synpred216_ChemicalChunker()) ) {s = 77;}

                         
                        input.seek(index75_10);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA75_11 = input.LA(1);

                         
                        int index75_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred200_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred201_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred202_ChemicalChunker()) ) {s = 29;}

                        else if ( (synpred203_ChemicalChunker()) ) {s = 78;}

                         
                        input.seek(index75_11);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA75_12 = input.LA(1);

                         
                        int index75_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred200_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred201_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred202_ChemicalChunker()) ) {s = 29;}

                         
                        input.seek(index75_12);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA75_13 = input.LA(1);

                         
                        int index75_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred200_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred201_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred202_ChemicalChunker()) ) {s = 29;}

                         
                        input.seek(index75_13);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA75_14 = input.LA(1);

                         
                        int index75_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred200_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred201_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred202_ChemicalChunker()) ) {s = 29;}

                         
                        input.seek(index75_14);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA75_15 = input.LA(1);

                         
                        int index75_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred200_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred201_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred202_ChemicalChunker()) ) {s = 29;}

                         
                        input.seek(index75_15);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA75_16 = input.LA(1);

                         
                        int index75_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred200_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred201_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred202_ChemicalChunker()) ) {s = 29;}

                         
                        input.seek(index75_16);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA75_17 = input.LA(1);

                         
                        int index75_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred200_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred201_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred202_ChemicalChunker()) ) {s = 29;}

                         
                        input.seek(index75_17);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA75_18 = input.LA(1);

                         
                        int index75_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred200_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred201_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred202_ChemicalChunker()) ) {s = 29;}

                         
                        input.seek(index75_18);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA75_19 = input.LA(1);

                         
                        int index75_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred200_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred201_ChemicalChunker()) ) {s = 20;}

                         
                        input.seek(index75_19);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA75_21 = input.LA(1);

                         
                        int index75_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred201_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 79;}

                         
                        input.seek(index75_21);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA75_22 = input.LA(1);

                         
                        int index75_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred201_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred208_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index75_22);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA75_23 = input.LA(1);

                         
                        int index75_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred201_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred204_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred205_ChemicalChunker()) ) {s = 81;}

                         
                        input.seek(index75_23);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA75_25 = input.LA(1);

                         
                        int index75_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_ChemicalChunker()) ) {s = 29;}

                        else if ( (synpred204_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 82;}

                         
                        input.seek(index75_25);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA75_26 = input.LA(1);

                         
                        int index75_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_ChemicalChunker()) ) {s = 29;}

                        else if ( (synpred213_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index75_26);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA75_27 = input.LA(1);

                         
                        int index75_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_ChemicalChunker()) ) {s = 29;}

                        else if ( (synpred233_ChemicalChunker()) ) {s = 84;}

                         
                        input.seek(index75_27);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA75_28 = input.LA(1);

                         
                        int index75_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_ChemicalChunker()) ) {s = 29;}

                        else if ( (true) ) {s = 85;}

                         
                        input.seek(index75_28);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA75_30 = input.LA(1);

                         
                        int index75_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_ChemicalChunker()) ) {s = 29;}

                        else if ( (synpred211_ChemicalChunker()) ) {s = 73;}

                         
                        input.seek(index75_30);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA75_31 = input.LA(1);

                         
                        int index75_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred220_ChemicalChunker()) ) {s = 86;}

                         
                        input.seek(index75_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 75, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA77_static {
    static final String DFA77_eotS =
        "\45\uffff";
    static final String DFA77_eofS =
        "\45\uffff";
    static final String DFA77_minS =
        "\1\50\36\0\6\uffff";
    static final String DFA77_maxS =
        "\1\u00a9\36\0\6\uffff";
    static final String DFA77_acceptS =
        "\37\uffff\1\2\1\3\1\1\1\6\1\5\1\4";
    static final String DFA77_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\6\uffff}>";
    static final String[] DFA77_transitionS = {
            "\1\12\1\13\3\uffff\1\11\1\uffff\1\16\1\17\1\15\1\23\1\24\1\32"+
            "\1\33\1\20\1\31\1\25\1\27\1\21\1\22\1\1\1\30\1\26\1\uffff\1"+
            "\37\7\uffff\1\40\111\uffff\1\36\1\35\2\uffff\1\14\1\6\1\7\1"+
            "\10\12\uffff\1\2\1\3\1\5\1\4\1\uffff\1\34",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA77_eot = DFA.unpackEncodedString(DFA77_static.DFA77_eotS);
    static final short[] DFA77_eof = DFA.unpackEncodedString(DFA77_static.DFA77_eofS);
    static final char[] DFA77_min = DFA.unpackEncodedStringToUnsignedChars(DFA77_static.DFA77_minS);
    static final char[] DFA77_max = DFA.unpackEncodedStringToUnsignedChars(DFA77_static.DFA77_maxS);
    static final short[] DFA77_accept = DFA.unpackEncodedString(DFA77_static.DFA77_acceptS);
    static final short[] DFA77_special = DFA.unpackEncodedString(DFA77_static.DFA77_specialS);
    static final short[][] DFA77_transition;

    static {
        int numStates = DFA77_static.DFA77_transitionS.length;
        DFA77_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA77_transition[i] = DFA.unpackEncodedString(DFA77_static.DFA77_transitionS[i]);
        }
    }

    class DFA77 extends DFA {

        public DFA77(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 77;
            this.eot = DFA77_eot;
            this.eof = DFA77_eof;
            this.min = DFA77_min;
            this.max = DFA77_max;
            this.accept = DFA77_accept;
            this.special = DFA77_special;
            this.transition = DFA77_transition;
        }
        public String getDescription() {
            return "234:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA77_1 = input.LA(1);

                         
                        int index77_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred249_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA77_2 = input.LA(1);

                         
                        int index77_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA77_3 = input.LA(1);

                         
                        int index77_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA77_4 = input.LA(1);

                         
                        int index77_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA77_5 = input.LA(1);

                         
                        int index77_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA77_6 = input.LA(1);

                         
                        int index77_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA77_7 = input.LA(1);

                         
                        int index77_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA77_8 = input.LA(1);

                         
                        int index77_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA77_9 = input.LA(1);

                         
                        int index77_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA77_10 = input.LA(1);

                         
                        int index77_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA77_11 = input.LA(1);

                         
                        int index77_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA77_12 = input.LA(1);

                         
                        int index77_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA77_13 = input.LA(1);

                         
                        int index77_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index77_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA77_14 = input.LA(1);

                         
                        int index77_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred252_ChemicalChunker()) ) {s = 35;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA77_15 = input.LA(1);

                         
                        int index77_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA77_16 = input.LA(1);

                         
                        int index77_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA77_17 = input.LA(1);

                         
                        int index77_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA77_18 = input.LA(1);

                         
                        int index77_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA77_19 = input.LA(1);

                         
                        int index77_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred251_ChemicalChunker()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA77_20 = input.LA(1);

                         
                        int index77_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_20);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA77_21 = input.LA(1);

                         
                        int index77_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_21);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA77_22 = input.LA(1);

                         
                        int index77_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_22);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA77_23 = input.LA(1);

                         
                        int index77_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_23);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA77_24 = input.LA(1);

                         
                        int index77_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_24);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA77_25 = input.LA(1);

                         
                        int index77_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_25);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA77_26 = input.LA(1);

                         
                        int index77_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_26);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA77_27 = input.LA(1);

                         
                        int index77_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_27);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA77_28 = input.LA(1);

                         
                        int index77_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index77_28);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA77_29 = input.LA(1);

                         
                        int index77_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index77_29);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA77_30 = input.LA(1);

                         
                        int index77_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred250_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index77_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 77, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA79_static {
    static final String DFA79_eotS =
        "\17\uffff";
    static final String DFA79_eofS =
        "\17\uffff";
    static final String DFA79_minS =
        "\1\50\1\uffff\6\45\1\uffff\6\0";
    static final String DFA79_maxS =
        "\1\u00a7\1\uffff\6\45\1\uffff\6\0";
    static final String DFA79_acceptS =
        "\1\uffff\1\2\6\uffff\1\1\6\uffff";
    static final String DFA79_specialS =
        "\11\uffff\1\1\1\4\1\0\1\3\1\2\1\5}>";
    static final String[] DFA79_transitionS = {
            "\1\6\1\7\3\uffff\1\5\1\1\20\uffff\1\1\7\uffff\1\1\1\uffff\1"+
            "\1\12\uffff\1\1\55\uffff\1\1\2\uffff\1\1\5\uffff\1\1\3\uffff"+
            "\1\1\2\uffff\1\1\4\uffff\1\2\1\3\1\4\12\uffff\4\10",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA79_eot = DFA.unpackEncodedString(DFA79_static.DFA79_eotS);
    static final short[] DFA79_eof = DFA.unpackEncodedString(DFA79_static.DFA79_eofS);
    static final char[] DFA79_min = DFA.unpackEncodedStringToUnsignedChars(DFA79_static.DFA79_minS);
    static final char[] DFA79_max = DFA.unpackEncodedStringToUnsignedChars(DFA79_static.DFA79_maxS);
    static final short[] DFA79_accept = DFA.unpackEncodedString(DFA79_static.DFA79_acceptS);
    static final short[] DFA79_special = DFA.unpackEncodedString(DFA79_static.DFA79_specialS);
    static final short[][] DFA79_transition;

    static {
        int numStates = DFA79_static.DFA79_transitionS.length;
        DFA79_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA79_transition[i] = DFA.unpackEncodedString(DFA79_static.DFA79_transitionS[i]);
        }
    }

    class DFA79 extends DFA {

        public DFA79(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 79;
            this.eot = DFA79_eot;
            this.eof = DFA79_eof;
            this.min = DFA79_min;
            this.max = DFA79_max;
            this.accept = DFA79_accept;
            this.special = DFA79_special;
            this.transition = DFA79_transition;
        }
        public String getDescription() {
            return "()* loopback of 240:16: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA79_11 = input.LA(1);

                         
                        int index79_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index79_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA79_9 = input.LA(1);

                         
                        int index79_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index79_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA79_13 = input.LA(1);

                         
                        int index79_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index79_13);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA79_12 = input.LA(1);

                         
                        int index79_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index79_12);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA79_10 = input.LA(1);

                         
                        int index79_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index79_10);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA79_14 = input.LA(1);

                         
                        int index79_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index79_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 79, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA81_static {
    static final String DFA81_eotS =
        "\27\uffff";
    static final String DFA81_eofS =
        "\27\uffff";
    static final String DFA81_minS =
        "\1\50\1\uffff\12\45\12\0\1\uffff";
    static final String DFA81_maxS =
        "\1\u00a9\1\uffff\12\45\12\0\1\uffff";
    static final String DFA81_acceptS =
        "\1\uffff\1\2\24\uffff\1\1";
    static final String DFA81_specialS =
        "\14\uffff\1\3\1\1\1\0\1\10\1\4\1\7\1\2\1\11\1\5\1\6\1\uffff}>";
    static final String[] DFA81_transitionS = {
            "\1\12\1\13\3\uffff\1\11\1\uffff\20\1\1\uffff\1\1\121\uffff\2"+
            "\1\2\uffff\1\1\1\6\1\7\1\10\12\uffff\1\2\1\3\1\5\1\4\1\uffff"+
            "\1\1",
            "",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_static.DFA81_eotS);
    static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_static.DFA81_eofS);
    static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_static.DFA81_minS);
    static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_static.DFA81_maxS);
    static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_static.DFA81_acceptS);
    static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_static.DFA81_specialS);
    static final short[][] DFA81_transition;

    static {
        int numStates = DFA81_static.DFA81_transitionS.length;
        DFA81_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA81_transition[i] = DFA.unpackEncodedString(DFA81_static.DFA81_transitionS[i]);
        }
    }

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = DFA81_eot;
            this.eof = DFA81_eof;
            this.min = DFA81_min;
            this.max = DFA81_max;
            this.accept = DFA81_accept;
            this.special = DFA81_special;
            this.transition = DFA81_transition;
        }
        public String getDescription() {
            return "()* loopback of 246:3: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA81_14 = input.LA(1);

                         
                        int index81_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_14);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA81_13 = input.LA(1);

                         
                        int index81_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_13);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA81_18 = input.LA(1);

                         
                        int index81_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_18);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA81_12 = input.LA(1);

                         
                        int index81_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_12);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA81_16 = input.LA(1);

                         
                        int index81_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_16);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA81_20 = input.LA(1);

                         
                        int index81_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_20);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA81_21 = input.LA(1);

                         
                        int index81_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_21);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA81_17 = input.LA(1);

                         
                        int index81_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_17);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA81_15 = input.LA(1);

                         
                        int index81_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_15);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA81_19 = input.LA(1);

                         
                        int index81_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 81, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA87_static {
    static final String DFA87_eotS =
        "\27\uffff";
    static final String DFA87_eofS =
        "\27\uffff";
    static final String DFA87_minS =
        "\1\50\12\45\1\uffff\12\0\1\uffff";
    static final String DFA87_maxS =
        "\1\u00a9\12\45\1\uffff\12\0\1\uffff";
    static final String DFA87_acceptS =
        "\13\uffff\1\2\12\uffff\1\1";
    static final String DFA87_specialS =
        "\14\uffff\1\2\1\4\1\11\1\5\1\6\1\3\1\1\1\7\1\10\1\0\1\uffff}>";
    static final String[] DFA87_transitionS = {
            "\1\11\1\12\3\uffff\1\10\1\uffff\20\13\11\uffff\1\13\111\uffff"+
            "\2\13\2\uffff\1\13\1\5\1\6\1\7\12\uffff\1\1\1\2\1\4\1\3\1\uffff"+
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_static.DFA87_eotS);
    static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_static.DFA87_eofS);
    static final char[] DFA87_min = DFA.unpackEncodedStringToUnsignedChars(DFA87_static.DFA87_minS);
    static final char[] DFA87_max = DFA.unpackEncodedStringToUnsignedChars(DFA87_static.DFA87_maxS);
    static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_static.DFA87_acceptS);
    static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_static.DFA87_specialS);
    static final short[][] DFA87_transition;

    static {
        int numStates = DFA87_static.DFA87_transitionS.length;
        DFA87_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA87_transition[i] = DFA.unpackEncodedString(DFA87_static.DFA87_transitionS[i]);
        }
    }

    class DFA87 extends DFA {

        public DFA87(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = DFA87_eot;
            this.eof = DFA87_eof;
            this.min = DFA87_min;
            this.max = DFA87_max;
            this.accept = DFA87_accept;
            this.special = DFA87_special;
            this.transition = DFA87_transition;
        }
        public String getDescription() {
            return "251:5: ( advAdj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA87_21 = input.LA(1);

                         
                        int index87_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index87_21);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA87_18 = input.LA(1);

                         
                        int index87_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index87_18);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA87_12 = input.LA(1);

                         
                        int index87_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index87_12);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA87_17 = input.LA(1);

                         
                        int index87_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index87_17);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA87_13 = input.LA(1);

                         
                        int index87_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index87_13);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA87_15 = input.LA(1);

                         
                        int index87_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index87_15);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA87_16 = input.LA(1);

                         
                        int index87_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index87_16);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA87_19 = input.LA(1);

                         
                        int index87_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index87_19);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA87_20 = input.LA(1);

                         
                        int index87_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index87_20);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA87_14 = input.LA(1);

                         
                        int index87_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index87_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 87, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA99_static {
    static final String DFA99_eotS =
        "\u0092\uffff";
    static final String DFA99_eofS =
        "\1\1\u0091\uffff";
    static final String DFA99_minS =
        "\1\46\4\uffff\6\0\1\uffff\2\0\4\uffff\1\0\1\uffff\15\0\161\uffff";
    static final String DFA99_maxS =
        "\1\u00b4\4\uffff\6\0\1\uffff\2\0\4\uffff\1\0\1\uffff\15\0\161\uffff";
    static final String DFA99_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA99_specialS =
        "\5\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\uffff\1\6\1\7\4\uffff\1\10\1"+
        "\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1"+
        "\24\1\25\161\uffff}>";
    static final String[] DFA99_transitionS = {
            "\2\1\1\11\1\12\3\1\1\10\1\35\20\1\1\34\7\1\1\33\1\1\1\27\3\1"+
            "\1\31\6\1\1\36\4\1\1\32\12\1\1\40\35\1\1\30\2\1\1\15\5\1\1\25"+
            "\3\1\1\24\1\1\1\14\1\22\1\26\3\1\1\5\1\6\1\7\2\1\1\37\30\1",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA99_eot = DFA.unpackEncodedString(DFA99_static.DFA99_eotS);
    static final short[] DFA99_eof = DFA.unpackEncodedString(DFA99_static.DFA99_eofS);
    static final char[] DFA99_min = DFA.unpackEncodedStringToUnsignedChars(DFA99_static.DFA99_minS);
    static final char[] DFA99_max = DFA.unpackEncodedStringToUnsignedChars(DFA99_static.DFA99_maxS);
    static final short[] DFA99_accept = DFA.unpackEncodedString(DFA99_static.DFA99_acceptS);
    static final short[] DFA99_special = DFA.unpackEncodedString(DFA99_static.DFA99_specialS);
    static final short[][] DFA99_transition;

    static {
        int numStates = DFA99_static.DFA99_transitionS.length;
        DFA99_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA99_transition[i] = DFA.unpackEncodedString(DFA99_static.DFA99_transitionS[i]);
        }
    }

    class DFA99 extends DFA {

        public DFA99(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 99;
            this.eot = DFA99_eot;
            this.eof = DFA99_eof;
            this.min = DFA99_min;
            this.max = DFA99_max;
            this.accept = DFA99_accept;
            this.special = DFA99_special;
            this.transition = DFA99_transition;
        }
        public String getDescription() {
            return "()* loopback of 272:14: ( ( conjunction )* apparatus )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA99_5 = input.LA(1);

                         
                        int index99_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_5);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA99_6 = input.LA(1);

                         
                        int index99_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_6);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA99_7 = input.LA(1);

                         
                        int index99_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_7);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA99_8 = input.LA(1);

                         
                        int index99_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA99_9 = input.LA(1);

                         
                        int index99_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_9);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA99_10 = input.LA(1);

                         
                        int index99_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_10);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA99_12 = input.LA(1);

                         
                        int index99_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_12);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA99_13 = input.LA(1);

                         
                        int index99_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_13);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA99_18 = input.LA(1);

                         
                        int index99_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_18);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA99_20 = input.LA(1);

                         
                        int index99_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_20);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA99_21 = input.LA(1);

                         
                        int index99_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_21);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA99_22 = input.LA(1);

                         
                        int index99_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_22);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA99_23 = input.LA(1);

                         
                        int index99_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_23);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA99_24 = input.LA(1);

                         
                        int index99_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_24);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA99_25 = input.LA(1);

                         
                        int index99_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_25);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA99_26 = input.LA(1);

                         
                        int index99_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_26);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA99_27 = input.LA(1);

                         
                        int index99_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_27);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA99_28 = input.LA(1);

                         
                        int index99_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_28);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA99_29 = input.LA(1);

                         
                        int index99_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_29);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA99_30 = input.LA(1);

                         
                        int index99_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_30);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA99_31 = input.LA(1);

                         
                        int index99_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_31);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA99_32 = input.LA(1);

                         
                        int index99_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index99_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 99, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA98_static {
    static final String DFA98_eotS =
        "\27\uffff";
    static final String DFA98_eofS =
        "\27\uffff";
    static final String DFA98_minS =
        "\1\50\15\uffff\1\0\10\uffff";
    static final String DFA98_maxS =
        "\1\u009c\15\uffff\1\0\10\uffff";
    static final String DFA98_acceptS =
        "\1\uffff\1\2\24\uffff\1\1";
    static final String DFA98_specialS =
        "\16\uffff\1\0\10\uffff}>";
    static final String[] DFA98_transitionS = {
            "\2\1\3\uffff\2\1\20\uffff\1\1\7\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\6\uffff\1\1\4\uffff\1\1\12\uffff\1\1\35\uffff\1\1\2\uffff"+
            "\1\16\5\uffff\1\1\3\uffff\1\1\1\uffff\1\26\2\1\3\uffff\3\1\2"+
            "\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA98_eot = DFA.unpackEncodedString(DFA98_static.DFA98_eotS);
    static final short[] DFA98_eof = DFA.unpackEncodedString(DFA98_static.DFA98_eofS);
    static final char[] DFA98_min = DFA.unpackEncodedStringToUnsignedChars(DFA98_static.DFA98_minS);
    static final char[] DFA98_max = DFA.unpackEncodedStringToUnsignedChars(DFA98_static.DFA98_maxS);
    static final short[] DFA98_accept = DFA.unpackEncodedString(DFA98_static.DFA98_acceptS);
    static final short[] DFA98_special = DFA.unpackEncodedString(DFA98_static.DFA98_specialS);
    static final short[][] DFA98_transition;

    static {
        int numStates = DFA98_static.DFA98_transitionS.length;
        DFA98_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA98_transition[i] = DFA.unpackEncodedString(DFA98_static.DFA98_transitionS[i]);
        }
    }

    class DFA98 extends DFA {

        public DFA98(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 98;
            this.eot = DFA98_eot;
            this.eof = DFA98_eof;
            this.min = DFA98_min;
            this.max = DFA98_max;
            this.accept = DFA98_accept;
            this.special = DFA98_special;
            this.transition = DFA98_transition;
        }
        public String getDescription() {
            return "()* loopback of 272:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA98_14 = input.LA(1);

                         
                        int index98_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index98_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 98, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA105_static {
    static final String DFA105_eotS =
        "\35\uffff";
    static final String DFA105_eofS =
        "\1\1\34\uffff";
    static final String DFA105_minS =
        "\1\50\1\uffff\23\0\10\uffff";
    static final String DFA105_maxS =
        "\1\u009c\1\uffff\23\0\10\uffff";
    static final String DFA105_acceptS =
        "\1\uffff\1\11\23\uffff\1\1\1\5\1\2\1\3\1\4\1\6\1\7\1\10";
    static final String DFA105_specialS =
        "\2\uffff\1\5\1\4\1\21\1\13\1\17\1\10\1\6\1\0\1\22\1\14\1\7\1\16"+
        "\1\11\1\12\1\20\1\3\1\15\1\2\1\1\10\uffff}>";
    static final String[] DFA105_transitionS = {
            "\1\12\1\13\3\uffff\1\11\1\22\20\uffff\1\21\7\uffff\1\20\1\uffff"+
            "\1\4\3\uffff\1\14\6\uffff\1\23\4\uffff\1\15\12\uffff\1\1\35"+
            "\uffff\1\5\2\uffff\1\16\5\uffff\1\17\3\uffff\1\2\2\uffff\1\3"+
            "\4\uffff\1\6\1\7\1\10\2\uffff\1\24",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA105_eot = DFA.unpackEncodedString(DFA105_static.DFA105_eotS);
    static final short[] DFA105_eof = DFA.unpackEncodedString(DFA105_static.DFA105_eofS);
    static final char[] DFA105_min = DFA.unpackEncodedStringToUnsignedChars(DFA105_static.DFA105_minS);
    static final char[] DFA105_max = DFA.unpackEncodedStringToUnsignedChars(DFA105_static.DFA105_maxS);
    static final short[] DFA105_accept = DFA.unpackEncodedString(DFA105_static.DFA105_acceptS);
    static final short[] DFA105_special = DFA.unpackEncodedString(DFA105_static.DFA105_specialS);
    static final short[][] DFA105_transition;

    static {
        int numStates = DFA105_static.DFA105_transitionS.length;
        DFA105_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA105_transition[i] = DFA.unpackEncodedString(DFA105_static.DFA105_transitionS[i]);
        }
    }

    class DFA105 extends DFA {

        public DFA105(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 105;
            this.eot = DFA105_eot;
            this.eof = DFA105_eof;
            this.min = DFA105_min;
            this.max = DFA105_max;
            this.accept = DFA105_accept;
            this.special = DFA105_special;
            this.transition = DFA105_transition;
        }
        public String getDescription() {
            return "()+ loopback of 279:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA105_9 = input.LA(1);

                         
                        int index105_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred284_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA105_20 = input.LA(1);

                         
                        int index105_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred287_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_20);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA105_19 = input.LA(1);

                         
                        int index105_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_19);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA105_17 = input.LA(1);

                         
                        int index105_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred286_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_17);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA105_3 = input.LA(1);

                         
                        int index105_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred284_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_3);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA105_2 = input.LA(1);

                         
                        int index105_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred284_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_2);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA105_8 = input.LA(1);

                         
                        int index105_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred284_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_8);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA105_12 = input.LA(1);

                         
                        int index105_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred282_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_12);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA105_7 = input.LA(1);

                         
                        int index105_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred284_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_7);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA105_14 = input.LA(1);

                         
                        int index105_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_14);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA105_15 = input.LA(1);

                         
                        int index105_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_15);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA105_5 = input.LA(1);

                         
                        int index105_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred284_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_5);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA105_11 = input.LA(1);

                         
                        int index105_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred284_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_11);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA105_18 = input.LA(1);

                         
                        int index105_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_18);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA105_13 = input.LA(1);

                         
                        int index105_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_ChemicalChunker()) ) {s = 25;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_13);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA105_6 = input.LA(1);

                         
                        int index105_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred284_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_6);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA105_16 = input.LA(1);

                         
                        int index105_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_16);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA105_4 = input.LA(1);

                         
                        int index105_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred284_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_4);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA105_10 = input.LA(1);

                         
                        int index105_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred284_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 105, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA107_static {
    static final String DFA107_eotS =
        "\17\uffff";
    static final String DFA107_eofS =
        "\1\7\16\uffff";
    static final String DFA107_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA107_maxS =
        "\1\u00b4\6\45\1\uffff\6\0\1\uffff";
    static final String DFA107_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA107_specialS =
        "\10\uffff\1\0\1\2\1\5\1\4\1\3\1\1\1\uffff}>";
    static final String[] DFA107_transitionS = {
            "\2\7\1\5\1\6\3\7\1\4\151\7\1\1\1\2\1\3\33\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA107_eot = DFA.unpackEncodedString(DFA107_static.DFA107_eotS);
    static final short[] DFA107_eof = DFA.unpackEncodedString(DFA107_static.DFA107_eofS);
    static final char[] DFA107_min = DFA.unpackEncodedStringToUnsignedChars(DFA107_static.DFA107_minS);
    static final char[] DFA107_max = DFA.unpackEncodedStringToUnsignedChars(DFA107_static.DFA107_maxS);
    static final short[] DFA107_accept = DFA.unpackEncodedString(DFA107_static.DFA107_acceptS);
    static final short[] DFA107_special = DFA.unpackEncodedString(DFA107_static.DFA107_specialS);
    static final short[][] DFA107_transition;

    static {
        int numStates = DFA107_static.DFA107_transitionS.length;
        DFA107_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA107_transition[i] = DFA.unpackEncodedString(DFA107_static.DFA107_transitionS[i]);
        }
    }

    class DFA107 extends DFA {

        public DFA107(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 107;
            this.eot = DFA107_eot;
            this.eof = DFA107_eof;
            this.min = DFA107_min;
            this.max = DFA107_max;
            this.accept = DFA107_accept;
            this.special = DFA107_special;
            this.transition = DFA107_transition;
        }
        public String getDescription() {
            return "281:55: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA107_8 = input.LA(1);

                         
                        int index107_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index107_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA107_13 = input.LA(1);

                         
                        int index107_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index107_13);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA107_9 = input.LA(1);

                         
                        int index107_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index107_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA107_12 = input.LA(1);

                         
                        int index107_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index107_12);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA107_11 = input.LA(1);

                         
                        int index107_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index107_11);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA107_10 = input.LA(1);

                         
                        int index107_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index107_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 107, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA109_static {
    static final String DFA109_eotS =
        "\u0093\uffff";
    static final String DFA109_eofS =
        "\1\11\u0092\uffff";
    static final String DFA109_minS =
        "\1\46\10\0\u008a\uffff";
    static final String DFA109_maxS =
        "\1\u00b4\10\0\u008a\uffff";
    static final String DFA109_acceptS =
        "\11\uffff\1\3\u0087\uffff\1\1\1\2";
    static final String DFA109_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\u008a\uffff}>";
    static final String[] DFA109_transitionS = {
            "\1\11\1\7\37\11\1\10\1\11\1\3\70\11\1\4\10\11\1\5\1\11\1\6\1"+
            "\11\1\1\2\11\1\2\42\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA109_eot = DFA.unpackEncodedString(DFA109_static.DFA109_eotS);
    static final short[] DFA109_eof = DFA.unpackEncodedString(DFA109_static.DFA109_eofS);
    static final char[] DFA109_min = DFA.unpackEncodedStringToUnsignedChars(DFA109_static.DFA109_minS);
    static final char[] DFA109_max = DFA.unpackEncodedStringToUnsignedChars(DFA109_static.DFA109_maxS);
    static final short[] DFA109_accept = DFA.unpackEncodedString(DFA109_static.DFA109_acceptS);
    static final short[] DFA109_special = DFA.unpackEncodedString(DFA109_static.DFA109_specialS);
    static final short[][] DFA109_transition;

    static {
        int numStates = DFA109_static.DFA109_transitionS.length;
        DFA109_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA109_transition[i] = DFA.unpackEncodedString(DFA109_static.DFA109_transitionS[i]);
        }
    }

    class DFA109 extends DFA {

        public DFA109(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 109;
            this.eot = DFA109_eot;
            this.eof = DFA109_eof;
            this.min = DFA109_min;
            this.max = DFA109_max;
            this.accept = DFA109_accept;
            this.special = DFA109_special;
            this.transition = DFA109_transition;
        }
        public String getDescription() {
            return "281:69: ( numericReferenceOrQuantity | nnchementity )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA109_1 = input.LA(1);

                         
                        int index109_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred292_ChemicalChunker()||(synpred292_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index109_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA109_2 = input.LA(1);

                         
                        int index109_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index109_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA109_3 = input.LA(1);

                         
                        int index109_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index109_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA109_4 = input.LA(1);

                         
                        int index109_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index109_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA109_5 = input.LA(1);

                         
                        int index109_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index109_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA109_6 = input.LA(1);

                         
                        int index109_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index109_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA109_7 = input.LA(1);

                         
                        int index109_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index109_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA109_8 = input.LA(1);

                         
                        int index109_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred293_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index109_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 109, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA110_static {
    static final String DFA110_eotS =
        "\u0092\uffff";
    static final String DFA110_eofS =
        "\1\1\u0091\uffff";
    static final String DFA110_minS =
        "\1\46\23\uffff\4\0\172\uffff";
    static final String DFA110_maxS =
        "\1\u00b4\23\uffff\4\0\172\uffff";
    static final String DFA110_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA110_specialS =
        "\24\uffff\1\0\1\1\1\2\1\3\172\uffff}>";
    static final String[] DFA110_transitionS = {
            "\43\1\1\26\70\1\1\27\14\1\1\24\2\1\1\25\42\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA110_eot = DFA.unpackEncodedString(DFA110_static.DFA110_eotS);
    static final short[] DFA110_eof = DFA.unpackEncodedString(DFA110_static.DFA110_eofS);
    static final char[] DFA110_min = DFA.unpackEncodedStringToUnsignedChars(DFA110_static.DFA110_minS);
    static final char[] DFA110_max = DFA.unpackEncodedStringToUnsignedChars(DFA110_static.DFA110_maxS);
    static final short[] DFA110_accept = DFA.unpackEncodedString(DFA110_static.DFA110_acceptS);
    static final short[] DFA110_special = DFA.unpackEncodedString(DFA110_static.DFA110_specialS);
    static final short[][] DFA110_transition;

    static {
        int numStates = DFA110_static.DFA110_transitionS.length;
        DFA110_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA110_transition[i] = DFA.unpackEncodedString(DFA110_static.DFA110_transitionS[i]);
        }
    }

    class DFA110 extends DFA {

        public DFA110(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 110;
            this.eot = DFA110_eot;
            this.eof = DFA110_eof;
            this.min = DFA110_min;
            this.max = DFA110_max;
            this.accept = DFA110_accept;
            this.special = DFA110_special;
            this.transition = DFA110_transition;
        }
        public String getDescription() {
            return "()* loopback of 281:115: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA110_20 = input.LA(1);

                         
                        int index110_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index110_20);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA110_21 = input.LA(1);

                         
                        int index110_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index110_21);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA110_22 = input.LA(1);

                         
                        int index110_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index110_22);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA110_23 = input.LA(1);

                         
                        int index110_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index110_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 110, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA111_static {
    static final String DFA111_eotS =
        "\u0092\uffff";
    static final String DFA111_eofS =
        "\1\5\u0091\uffff";
    static final String DFA111_minS =
        "\1\46\4\0\u008d\uffff";
    static final String DFA111_maxS =
        "\1\u00b4\4\0\u008d\uffff";
    static final String DFA111_acceptS =
        "\5\uffff\1\2\u008b\uffff\1\1";
    static final String DFA111_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008d\uffff}>";
    static final String[] DFA111_transitionS = {
            "\22\5\1\2\2\5\1\1\101\5\1\4\3\5\1\3\63\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA111_eot = DFA.unpackEncodedString(DFA111_static.DFA111_eotS);
    static final short[] DFA111_eof = DFA.unpackEncodedString(DFA111_static.DFA111_eofS);
    static final char[] DFA111_min = DFA.unpackEncodedStringToUnsignedChars(DFA111_static.DFA111_minS);
    static final char[] DFA111_max = DFA.unpackEncodedStringToUnsignedChars(DFA111_static.DFA111_maxS);
    static final short[] DFA111_accept = DFA.unpackEncodedString(DFA111_static.DFA111_acceptS);
    static final short[] DFA111_special = DFA.unpackEncodedString(DFA111_static.DFA111_specialS);
    static final short[][] DFA111_transition;

    static {
        int numStates = DFA111_static.DFA111_transitionS.length;
        DFA111_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA111_transition[i] = DFA.unpackEncodedString(DFA111_static.DFA111_transitionS[i]);
        }
    }

    class DFA111 extends DFA {

        public DFA111(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 111;
            this.eot = DFA111_eot;
            this.eof = DFA111_eof;
            this.min = DFA111_min;
            this.max = DFA111_max;
            this.accept = DFA111_accept;
            this.special = DFA111_special;
            this.transition = DFA111_transition;
        }
        public String getDescription() {
            return "281:125: ( fromProcedure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA111_1 = input.LA(1);

                         
                        int index111_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index111_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA111_2 = input.LA(1);

                         
                        int index111_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred295_ChemicalChunker()&&(precededByProduct(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index111_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA111_3 = input.LA(1);

                         
                        int index111_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred295_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index111_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA111_4 = input.LA(1);

                         
                        int index111_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred295_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index111_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 111, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA113_static {
    static final String DFA113_eotS =
        "\13\uffff";
    static final String DFA113_eofS =
        "\1\4\5\uffff\1\4\4\uffff";
    static final String DFA113_minS =
        "\1\46\3\45\1\uffff\1\0\1\46\1\0\1\uffff\1\45\1\0";
    static final String DFA113_maxS =
        "\1\u00b4\3\45\1\uffff\1\0\1\u00b4\1\0\1\uffff\1\45\1\0";
    static final String DFA113_acceptS =
        "\4\uffff\1\2\3\uffff\1\1\2\uffff";
    static final String DFA113_specialS =
        "\5\uffff\1\1\1\uffff\1\0\2\uffff\1\2}>";
    static final String[] DFA113_transitionS = {
            "\136\4\1\2\1\4\1\3\1\4\1\1\54\4",
            "\1\5",
            "\1\6",
            "\1\7",
            "",
            "\1\uffff",
            "\56\4\1\11\140\4",
            "\1\uffff",
            "",
            "\1\12",
            "\1\uffff"
    };
    }

    static final short[] DFA113_eot = DFA.unpackEncodedString(DFA113_static.DFA113_eotS);
    static final short[] DFA113_eof = DFA.unpackEncodedString(DFA113_static.DFA113_eofS);
    static final char[] DFA113_min = DFA.unpackEncodedStringToUnsignedChars(DFA113_static.DFA113_minS);
    static final char[] DFA113_max = DFA.unpackEncodedStringToUnsignedChars(DFA113_static.DFA113_maxS);
    static final short[] DFA113_accept = DFA.unpackEncodedString(DFA113_static.DFA113_acceptS);
    static final short[] DFA113_special = DFA.unpackEncodedString(DFA113_static.DFA113_specialS);
    static final short[][] DFA113_transition;

    static {
        int numStates = DFA113_static.DFA113_transitionS.length;
        DFA113_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA113_transition[i] = DFA.unpackEncodedString(DFA113_static.DFA113_transitionS[i]);
        }
    }

    class DFA113 extends DFA {

        public DFA113(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 113;
            this.eot = DFA113_eot;
            this.eof = DFA113_eof;
            this.min = DFA113_min;
            this.max = DFA113_max;
            this.accept = DFA113_accept;
            this.special = DFA113_special;
            this.transition = DFA113_transition;
        }
        public String getDescription() {
            return "283:35: ( afterOscarCompoundStructure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA113_7 = input.LA(1);

                         
                        int index113_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index113_7);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA113_5 = input.LA(1);

                         
                        int index113_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index113_5);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA113_10 = input.LA(1);

                         
                        int index113_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index113_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 113, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA123_static {
    static final String DFA123_eotS =
        "\22\uffff";
    static final String DFA123_eofS =
        "\22\uffff";
    static final String DFA123_minS =
        "\1\50\6\0\13\uffff";
    static final String DFA123_maxS =
        "\1\u0099\6\0\13\uffff";
    static final String DFA123_acceptS =
        "\7\uffff\1\2\1\uffff\1\3\7\uffff\1\1";
    static final String DFA123_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\13\uffff}>";
    static final String[] DFA123_transitionS = {
            "\2\11\3\uffff\2\11\20\uffff\1\7\7\uffff\1\7\1\uffff\1\3\12\uffff"+
            "\1\11\55\uffff\1\4\2\uffff\1\5\5\uffff\1\6\3\uffff\1\1\2\uffff"+
            "\1\2\4\uffff\3\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA123_eot = DFA.unpackEncodedString(DFA123_static.DFA123_eotS);
    static final short[] DFA123_eof = DFA.unpackEncodedString(DFA123_static.DFA123_eofS);
    static final char[] DFA123_min = DFA.unpackEncodedStringToUnsignedChars(DFA123_static.DFA123_minS);
    static final char[] DFA123_max = DFA.unpackEncodedStringToUnsignedChars(DFA123_static.DFA123_maxS);
    static final short[] DFA123_accept = DFA.unpackEncodedString(DFA123_static.DFA123_acceptS);
    static final short[] DFA123_special = DFA.unpackEncodedString(DFA123_static.DFA123_specialS);
    static final short[][] DFA123_transition;

    static {
        int numStates = DFA123_static.DFA123_transitionS.length;
        DFA123_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA123_transition[i] = DFA.unpackEncodedString(DFA123_static.DFA123_transitionS[i]);
        }
    }

    class DFA123 extends DFA {

        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = DFA123_eot;
            this.eof = DFA123_eof;
            this.min = DFA123_min;
            this.max = DFA123_max;
            this.accept = DFA123_accept;
            this.special = DFA123_special;
            this.transition = DFA123_transition;
        }
        public String getDescription() {
            return "290:18: ( moleculeamount3 | moleculeamount1 | moleculeamount2 )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA123_1 = input.LA(1);

                         
                        int index123_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred313_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index123_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA123_2 = input.LA(1);

                         
                        int index123_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred313_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index123_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA123_3 = input.LA(1);

                         
                        int index123_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred313_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index123_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA123_4 = input.LA(1);

                         
                        int index123_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred313_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index123_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA123_5 = input.LA(1);

                         
                        int index123_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred313_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index123_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA123_6 = input.LA(1);

                         
                        int index123_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred313_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index123_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 123, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA124_static {
    static final String DFA124_eotS =
        "\43\uffff";
    static final String DFA124_eofS =
        "\1\2\2\uffff\1\2\5\uffff\3\2\1\uffff\1\2\10\uffff\6\2\4\uffff\3"+
        "\2";
    static final String DFA124_minS =
        "\1\46\1\45\1\uffff\1\46\5\45\3\46\1\0\1\46\3\45\1\uffff\4\45\6\46"+
        "\1\0\3\45\3\46";
    static final String DFA124_maxS =
        "\1\u00b4\1\45\1\uffff\1\u00b4\5\45\3\u00b4\1\0\1\u00b4\3\45\1\uffff"+
        "\4\45\6\u00b4\1\0\3\45\3\u00b4";
    static final String DFA124_acceptS =
        "\2\uffff\1\2\16\uffff\1\1\21\uffff";
    static final String DFA124_specialS =
        "\14\uffff\1\1\17\uffff\1\0\6\uffff}>";
    static final String[] DFA124_transitionS = {
            "\11\2\1\1\u0085\2",
            "\1\3",
            "",
            "\2\2\1\6\4\2\1\5\21\2\1\7\123\2\1\10\3\2\1\4\35\2",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\2\2\1\20\4\2\1\17\21\2\1\7\127\2\1\16\35\2",
            "\2\2\1\20\4\2\1\17\21\2\1\7\127\2\1\16\35\2",
            "\2\2\1\20\4\2\1\17\21\2\1\7\127\2\1\16\35\2",
            "\1\uffff",
            "\2\2\1\24\4\2\1\23\21\2\1\25\127\2\1\22\35\2",
            "\1\26",
            "\1\27",
            "\1\30",
            "",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "\2\2\1\20\4\2\1\17\21\2\1\7\127\2\1\16\35\2",
            "\2\2\1\20\4\2\1\17\21\2\1\7\127\2\1\16\35\2",
            "\2\2\1\20\4\2\1\17\21\2\1\7\127\2\1\16\35\2",
            "\2\2\1\37\4\2\1\36\21\2\1\25\127\2\1\35\35\2",
            "\2\2\1\37\4\2\1\36\21\2\1\25\127\2\1\35\35\2",
            "\2\2\1\37\4\2\1\36\21\2\1\25\127\2\1\35\35\2",
            "\1\uffff",
            "\1\40",
            "\1\41",
            "\1\42",
            "\2\2\1\37\4\2\1\36\21\2\1\25\127\2\1\35\35\2",
            "\2\2\1\37\4\2\1\36\21\2\1\25\127\2\1\35\35\2",
            "\2\2\1\37\4\2\1\36\21\2\1\25\127\2\1\35\35\2"
    };
    }

    static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_static.DFA124_eotS);
    static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_static.DFA124_eofS);
    static final char[] DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_static.DFA124_minS);
    static final char[] DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_static.DFA124_maxS);
    static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_static.DFA124_acceptS);
    static final short[] DFA124_special = DFA.unpackEncodedString(DFA124_static.DFA124_specialS);
    static final short[][] DFA124_transition;

    static {
        int numStates = DFA124_static.DFA124_transitionS.length;
        DFA124_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA124_transition[i] = DFA.unpackEncodedString(DFA124_static.DFA124_transitionS[i]);
        }
    }

    class DFA124 extends DFA {

        public DFA124(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = DFA124_eot;
            this.eof = DFA124_eof;
            this.min = DFA124_min;
            this.max = DFA124_max;
            this.accept = DFA124_accept;
            this.special = DFA124_special;
            this.transition = DFA124_transition;
        }
        public String getDescription() {
            return "290:71: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA124_28 = input.LA(1);

                         
                        int index124_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index124_28);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA124_12 = input.LA(1);

                         
                        int index124_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index124_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 124, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA127_static {
    static final String DFA127_eotS =
        "\15\uffff";
    static final String DFA127_eofS =
        "\15\uffff";
    static final String DFA127_minS =
        "\1\50\2\uffff\1\0\11\uffff";
    static final String DFA127_maxS =
        "\1\u0099\2\uffff\1\0\11\uffff";
    static final String DFA127_acceptS =
        "\1\uffff\1\1\3\uffff\1\2\7\uffff";
    static final String DFA127_specialS =
        "\3\uffff\1\0\11\uffff}>";
    static final String[] DFA127_transitionS = {
            "\2\5\3\uffff\2\5\45\uffff\1\5\60\uffff\1\1\5\uffff\1\1\3\uffff"+
            "\1\3\2\uffff\1\1\4\uffff\3\5",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA127_eot = DFA.unpackEncodedString(DFA127_static.DFA127_eotS);
    static final short[] DFA127_eof = DFA.unpackEncodedString(DFA127_static.DFA127_eofS);
    static final char[] DFA127_min = DFA.unpackEncodedStringToUnsignedChars(DFA127_static.DFA127_minS);
    static final char[] DFA127_max = DFA.unpackEncodedStringToUnsignedChars(DFA127_static.DFA127_maxS);
    static final short[] DFA127_accept = DFA.unpackEncodedString(DFA127_static.DFA127_acceptS);
    static final short[] DFA127_special = DFA.unpackEncodedString(DFA127_static.DFA127_specialS);
    static final short[][] DFA127_transition;

    static {
        int numStates = DFA127_static.DFA127_transitionS.length;
        DFA127_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA127_transition[i] = DFA.unpackEncodedString(DFA127_static.DFA127_transitionS[i]);
        }
    }

    class DFA127 extends DFA {

        public DFA127(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 127;
            this.eot = DFA127_eot;
            this.eof = DFA127_eof;
            this.min = DFA127_min;
            this.max = DFA127_max;
            this.accept = DFA127_accept;
            this.special = DFA127_special;
            this.transition = DFA127_transition;
        }
        public String getDescription() {
            return "293:78: ( bracketedContentInMol )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA127_3 = input.LA(1);

                         
                        int index127_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_ChemicalChunker()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index127_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 127, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA133_static {
    static final String DFA133_eotS =
        "\u0092\uffff";
    static final String DFA133_eofS =
        "\1\2\u0091\uffff";
    static final String DFA133_minS =
        "\1\46\1\0\14\uffff\6\0\3\uffff\2\0\171\uffff";
    static final String DFA133_maxS =
        "\1\u00b4\1\0\14\uffff\6\0\3\uffff\2\0\171\uffff";
    static final String DFA133_acceptS =
        "\2\uffff\1\2\u008e\uffff\1\1";
    static final String DFA133_specialS =
        "\1\uffff\1\0\14\uffff\1\1\1\2\1\3\1\4\1\5\1\6\3\uffff\1\7\1\10\171"+
        "\uffff}>";
    static final String[] DFA133_transitionS = {
            "\2\2\1\22\1\23\3\2\1\21\1\27\45\2\1\30\72\2\1\1\7\2\1\16\1\17"+
            "\1\20\33\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA133_eot = DFA.unpackEncodedString(DFA133_static.DFA133_eotS);
    static final short[] DFA133_eof = DFA.unpackEncodedString(DFA133_static.DFA133_eofS);
    static final char[] DFA133_min = DFA.unpackEncodedStringToUnsignedChars(DFA133_static.DFA133_minS);
    static final char[] DFA133_max = DFA.unpackEncodedStringToUnsignedChars(DFA133_static.DFA133_maxS);
    static final short[] DFA133_accept = DFA.unpackEncodedString(DFA133_static.DFA133_acceptS);
    static final short[] DFA133_special = DFA.unpackEncodedString(DFA133_static.DFA133_specialS);
    static final short[][] DFA133_transition;

    static {
        int numStates = DFA133_static.DFA133_transitionS.length;
        DFA133_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA133_transition[i] = DFA.unpackEncodedString(DFA133_static.DFA133_transitionS[i]);
        }
    }

    class DFA133 extends DFA {

        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = DFA133_eot;
            this.eof = DFA133_eof;
            this.min = DFA133_min;
            this.max = DFA133_max;
            this.accept = DFA133_accept;
            this.special = DFA133_special;
            this.transition = DFA133_transition;
        }
        public String getDescription() {
            return "()+ loopback of 296:100: ( oscarCompound )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA133_1 = input.LA(1);

                         
                        int index133_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index133_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA133_14 = input.LA(1);

                         
                        int index133_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index133_14);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA133_15 = input.LA(1);

                         
                        int index133_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index133_15);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA133_16 = input.LA(1);

                         
                        int index133_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index133_16);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA133_17 = input.LA(1);

                         
                        int index133_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index133_17);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA133_18 = input.LA(1);

                         
                        int index133_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index133_18);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA133_19 = input.LA(1);

                         
                        int index133_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index133_19);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA133_23 = input.LA(1);

                         
                        int index133_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index133_23);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA133_24 = input.LA(1);

                         
                        int index133_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index133_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 133, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA134_static {
    static final String DFA134_eotS =
        "\17\uffff";
    static final String DFA134_eofS =
        "\17\uffff";
    static final String DFA134_minS =
        "\1\50\10\uffff\2\0\4\uffff";
    static final String DFA134_maxS =
        "\1\u0099\10\uffff\2\0\4\uffff";
    static final String DFA134_acceptS =
        "\1\uffff\1\3\11\uffff\1\1\1\uffff\1\2\1\uffff";
    static final String DFA134_specialS =
        "\11\uffff\1\0\1\1\4\uffff}>";
    static final String[] DFA134_transitionS = {
            "\2\1\3\uffff\2\1\32\uffff\1\13\12\uffff\1\1\55\uffff\1\13\2"+
            "\uffff\1\15\5\uffff\1\15\3\uffff\1\11\2\uffff\1\12\4\uffff\3"+
            "\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA134_eot = DFA.unpackEncodedString(DFA134_static.DFA134_eotS);
    static final short[] DFA134_eof = DFA.unpackEncodedString(DFA134_static.DFA134_eofS);
    static final char[] DFA134_min = DFA.unpackEncodedStringToUnsignedChars(DFA134_static.DFA134_minS);
    static final char[] DFA134_max = DFA.unpackEncodedStringToUnsignedChars(DFA134_static.DFA134_maxS);
    static final short[] DFA134_accept = DFA.unpackEncodedString(DFA134_static.DFA134_acceptS);
    static final short[] DFA134_special = DFA.unpackEncodedString(DFA134_static.DFA134_specialS);
    static final short[][] DFA134_transition;

    static {
        int numStates = DFA134_static.DFA134_transitionS.length;
        DFA134_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA134_transition[i] = DFA.unpackEncodedString(DFA134_static.DFA134_transitionS[i]);
        }
    }

    class DFA134 extends DFA {

        public DFA134(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = DFA134_eot;
            this.eof = DFA134_eof;
            this.min = DFA134_min;
            this.max = DFA134_max;
            this.accept = DFA134_accept;
            this.special = DFA134_special;
            this.transition = DFA134_transition;
        }
        public String getDescription() {
            return "()* loopback of 299:3: ( quantity | bracketedContentInMol )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA134_9 = input.LA(1);

                         
                        int index134_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_ChemicalChunker()) ) {s = 11;}

                        else if ( (synpred330_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index134_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA134_10 = input.LA(1);

                         
                        int index134_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_ChemicalChunker()) ) {s = 11;}

                        else if ( (synpred330_ChemicalChunker()) ) {s = 13;}

                         
                        input.seek(index134_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 134, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA135_static {
    static final String DFA135_eotS =
        "\14\uffff";
    static final String DFA135_eofS =
        "\1\2\13\uffff";
    static final String DFA135_minS =
        "\1\46\1\0\1\uffff\10\0\1\uffff";
    static final String DFA135_maxS =
        "\1\u00b4\1\0\1\uffff\10\0\1\uffff";
    static final String DFA135_acceptS =
        "\2\uffff\1\2\10\uffff\1\1";
    static final String DFA135_specialS =
        "\1\uffff\1\7\1\uffff\1\3\1\10\1\1\1\2\1\5\1\4\1\0\1\6\1\uffff}>";
    static final String[] DFA135_transitionS = {
            "\2\2\1\7\1\10\3\2\1\6\1\11\45\2\1\12\72\2\1\1\7\2\1\3\1\4\1"+
            "\5\33\2",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA135_eot = DFA.unpackEncodedString(DFA135_static.DFA135_eotS);
    static final short[] DFA135_eof = DFA.unpackEncodedString(DFA135_static.DFA135_eofS);
    static final char[] DFA135_min = DFA.unpackEncodedStringToUnsignedChars(DFA135_static.DFA135_minS);
    static final char[] DFA135_max = DFA.unpackEncodedStringToUnsignedChars(DFA135_static.DFA135_maxS);
    static final short[] DFA135_accept = DFA.unpackEncodedString(DFA135_static.DFA135_acceptS);
    static final short[] DFA135_special = DFA.unpackEncodedString(DFA135_static.DFA135_specialS);
    static final short[][] DFA135_transition;

    static {
        int numStates = DFA135_static.DFA135_transitionS.length;
        DFA135_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA135_transition[i] = DFA.unpackEncodedString(DFA135_static.DFA135_transitionS[i]);
        }
    }

    class DFA135 extends DFA {

        public DFA135(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 135;
            this.eot = DFA135_eot;
            this.eof = DFA135_eof;
            this.min = DFA135_min;
            this.max = DFA135_max;
            this.accept = DFA135_accept;
            this.special = DFA135_special;
            this.transition = DFA135_transition;
        }
        public String getDescription() {
            return "()+ loopback of 299:37: ( oscarCompound )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA135_9 = input.LA(1);

                         
                        int index135_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred331_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index135_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA135_5 = input.LA(1);

                         
                        int index135_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred331_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index135_5);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA135_6 = input.LA(1);

                         
                        int index135_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred331_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index135_6);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA135_3 = input.LA(1);

                         
                        int index135_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred331_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index135_3);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA135_8 = input.LA(1);

                         
                        int index135_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred331_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index135_8);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA135_7 = input.LA(1);

                         
                        int index135_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred331_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index135_7);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA135_10 = input.LA(1);

                         
                        int index135_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred331_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index135_10);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA135_1 = input.LA(1);

                         
                        int index135_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred331_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index135_1);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA135_4 = input.LA(1);

                         
                        int index135_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred331_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index135_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 135, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA137_static {
    static final String DFA137_eotS =
        "\u0095\uffff";
    static final String DFA137_eofS =
        "\1\1\u0094\uffff";
    static final String DFA137_minS =
        "\1\46\3\uffff\1\0\13\uffff\5\0\u0080\uffff";
    static final String DFA137_maxS =
        "\1\u00b4\3\uffff\1\0\13\uffff\5\0\u0080\uffff";
    static final String DFA137_acceptS =
        "\1\uffff\1\5\u008f\uffff\1\1\1\3\1\4\1\2";
    static final String DFA137_specialS =
        "\4\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\1\5\u0080\uffff}>";
    static final String[] DFA137_transitionS = {
            "\43\1\1\22\70\1\1\23\2\1\1\4\5\1\1\24\3\1\1\20\2\1\1\21\42\1",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA137_eot = DFA.unpackEncodedString(DFA137_static.DFA137_eotS);
    static final short[] DFA137_eof = DFA.unpackEncodedString(DFA137_static.DFA137_eofS);
    static final char[] DFA137_min = DFA.unpackEncodedStringToUnsignedChars(DFA137_static.DFA137_minS);
    static final char[] DFA137_max = DFA.unpackEncodedStringToUnsignedChars(DFA137_static.DFA137_maxS);
    static final short[] DFA137_accept = DFA.unpackEncodedString(DFA137_static.DFA137_acceptS);
    static final short[] DFA137_special = DFA.unpackEncodedString(DFA137_static.DFA137_specialS);
    static final short[][] DFA137_transition;

    static {
        int numStates = DFA137_static.DFA137_transitionS.length;
        DFA137_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA137_transition[i] = DFA.unpackEncodedString(DFA137_static.DFA137_transitionS[i]);
        }
    }

    class DFA137 extends DFA {

        public DFA137(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 137;
            this.eot = DFA137_eot;
            this.eof = DFA137_eof;
            this.min = DFA137_min;
            this.max = DFA137_max;
            this.accept = DFA137_accept;
            this.special = DFA137_special;
            this.transition = DFA137_transition;
        }
        public String getDescription() {
            return "()* loopback of 301:34: ( citation | quantity | comma ( quantity1Node | citationStructure ) | bracketedContentInMol )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA137_4 = input.LA(1);

                         
                        int index137_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred332_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred335_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred336_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index137_4);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA137_16 = input.LA(1);

                         
                        int index137_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred332_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred333_ChemicalChunker()) ) {s = 148;}

                        else if ( (synpred336_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index137_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA137_17 = input.LA(1);

                         
                        int index137_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 148;}

                        else if ( (synpred336_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index137_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA137_18 = input.LA(1);

                         
                        int index137_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 148;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index137_18);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA137_19 = input.LA(1);

                         
                        int index137_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 148;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index137_19);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA137_20 = input.LA(1);

                         
                        int index137_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred336_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index137_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 137, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA138_static {
    static final String DFA138_eotS =
        "\43\uffff";
    static final String DFA138_eofS =
        "\1\2\2\uffff\1\2\5\uffff\3\2\1\uffff\1\2\10\uffff\6\2\4\uffff\3"+
        "\2";
    static final String DFA138_minS =
        "\1\46\1\45\1\uffff\1\46\5\45\3\46\1\0\1\46\3\45\1\uffff\4\45\6\46"+
        "\1\0\3\45\3\46";
    static final String DFA138_maxS =
        "\1\u00b4\1\45\1\uffff\1\u00b4\5\45\3\u00b4\1\0\1\u00b4\3\45\1\uffff"+
        "\4\45\6\u00b4\1\0\3\45\3\u00b4";
    static final String DFA138_acceptS =
        "\2\uffff\1\2\16\uffff\1\1\21\uffff";
    static final String DFA138_specialS =
        "\14\uffff\1\1\17\uffff\1\0\6\uffff}>";
    static final String[] DFA138_transitionS = {
            "\11\2\1\1\u0085\2",
            "\1\3",
            "",
            "\2\2\1\6\4\2\1\5\21\2\1\7\123\2\1\10\3\2\1\4\35\2",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\2\2\1\20\4\2\1\17\21\2\1\7\127\2\1\16\35\2",
            "\2\2\1\20\4\2\1\17\21\2\1\7\127\2\1\16\35\2",
            "\2\2\1\20\4\2\1\17\21\2\1\7\127\2\1\16\35\2",
            "\1\uffff",
            "\2\2\1\24\4\2\1\23\21\2\1\25\127\2\1\22\35\2",
            "\1\26",
            "\1\27",
            "\1\30",
            "",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "\2\2\1\20\4\2\1\17\21\2\1\7\127\2\1\16\35\2",
            "\2\2\1\20\4\2\1\17\21\2\1\7\127\2\1\16\35\2",
            "\2\2\1\20\4\2\1\17\21\2\1\7\127\2\1\16\35\2",
            "\2\2\1\37\4\2\1\36\21\2\1\25\127\2\1\35\35\2",
            "\2\2\1\37\4\2\1\36\21\2\1\25\127\2\1\35\35\2",
            "\2\2\1\37\4\2\1\36\21\2\1\25\127\2\1\35\35\2",
            "\1\uffff",
            "\1\40",
            "\1\41",
            "\1\42",
            "\2\2\1\37\4\2\1\36\21\2\1\25\127\2\1\35\35\2",
            "\2\2\1\37\4\2\1\36\21\2\1\25\127\2\1\35\35\2",
            "\2\2\1\37\4\2\1\36\21\2\1\25\127\2\1\35\35\2"
    };
    }

    static final short[] DFA138_eot = DFA.unpackEncodedString(DFA138_static.DFA138_eotS);
    static final short[] DFA138_eof = DFA.unpackEncodedString(DFA138_static.DFA138_eofS);
    static final char[] DFA138_min = DFA.unpackEncodedStringToUnsignedChars(DFA138_static.DFA138_minS);
    static final char[] DFA138_max = DFA.unpackEncodedStringToUnsignedChars(DFA138_static.DFA138_maxS);
    static final short[] DFA138_accept = DFA.unpackEncodedString(DFA138_static.DFA138_acceptS);
    static final short[] DFA138_special = DFA.unpackEncodedString(DFA138_static.DFA138_specialS);
    static final short[][] DFA138_transition;

    static {
        int numStates = DFA138_static.DFA138_transitionS.length;
        DFA138_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA138_transition[i] = DFA.unpackEncodedString(DFA138_static.DFA138_transitionS[i]);
        }
    }

    class DFA138 extends DFA {

        public DFA138(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 138;
            this.eot = DFA138_eot;
            this.eof = DFA138_eof;
            this.min = DFA138_min;
            this.max = DFA138_max;
            this.accept = DFA138_accept;
            this.special = DFA138_special;
            this.transition = DFA138_transition;
        }
        public String getDescription() {
            return "307:68: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA138_28 = input.LA(1);

                         
                        int index138_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index138_28);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA138_12 = input.LA(1);

                         
                        int index138_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index138_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 138, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA140_static {
    static final String DFA140_eotS =
        "\56\uffff";
    static final String DFA140_eofS =
        "\56\uffff";
    static final String DFA140_minS =
        "\1\47\2\45\1\uffff\4\45\1\uffff\1\45\1\uffff\1\47\1\54\4\50\1\47"+
        "\6\45\1\54\1\47\2\0\1\47\1\0\5\45\2\u008c\1\54\2\u0090\3\45\3\0";
    static final String DFA140_maxS =
        "\1\u0099\2\45\1\uffff\4\45\1\uffff\1\45\1\uffff\1\u0092\1\u009c"+
        "\3\u0099\1\u0097\1\u0092\6\45\1\u009c\1\u0092\2\0\1\u0092\1\0\5"+
        "\45\2\u008c\1\u009c\2\u0090\3\45\3\0";
    static final String DFA140_acceptS =
        "\3\uffff\1\1\4\uffff\1\2\1\uffff\1\3\43\uffff";
    static final String DFA140_specialS =
        "\32\uffff\1\1\1\4\1\uffff\1\3\15\uffff\1\2\1\0\1\5}>";
    static final String[] DFA140_transitionS = {
            "\1\12\1\6\1\12\1\10\2\uffff\1\5\1\7\20\uffff\1\10\4\uffff\1"+
            "\10\2\uffff\1\11\1\uffff\1\3\11\uffff\1\10\6\uffff\1\10\47\uffff"+
            "\1\3\10\uffff\1\12\1\uffff\1\12\1\uffff\1\1\2\uffff\1\2\4\uffff"+
            "\1\4\2\12",
            "\1\13",
            "\1\14",
            "",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "",
            "\1\21",
            "",
            "\1\12\41\uffff\1\3\70\uffff\1\3\12\uffff\1\12\4\uffff\1\22",
            "\1\3\2\uffff\1\10\21\uffff\3\3\1\uffff\2\3\2\uffff\1\10\70"+
            "\uffff\1\10\7\uffff\1\3\2\uffff\1\12\1\uffff\1\10\2\uffff\1"+
            "\10\11\uffff\1\3",
            "\1\6\1\12\1\10\2\uffff\1\5\1\7\20\uffff\1\10\4\uffff\1\10\2"+
            "\uffff\1\11\13\uffff\1\10\6\uffff\1\10\74\uffff\1\4\2\12",
            "\1\6\1\12\1\10\2\uffff\1\5\1\7\20\uffff\1\10\4\uffff\1\10\2"+
            "\uffff\1\11\13\uffff\1\10\6\uffff\1\10\74\uffff\1\4\2\12",
            "\1\6\1\12\1\10\2\uffff\1\5\1\7\20\uffff\1\10\4\uffff\1\10\2"+
            "\uffff\1\11\13\uffff\1\10\6\uffff\1\10\74\uffff\1\4\2\12",
            "\1\10\1\uffff\1\10\2\uffff\2\10\20\uffff\1\10\4\uffff\1\10"+
            "\2\uffff\1\12\13\uffff\1\10\6\uffff\1\10\74\uffff\1\10",
            "\1\27\7\uffff\1\10\10\uffff\1\10\2\uffff\1\10\15\uffff\1\10"+
            "\63\uffff\1\10\3\uffff\2\10\10\uffff\1\23\1\uffff\1\25\1\uffff"+
            "\1\26\2\uffff\1\24",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "\1\35",
            "\1\3\24\uffff\3\3\1\uffff\2\3\103\uffff\1\3\2\uffff\1\12\2"+
            "\uffff\1\12\13\uffff\1\3",
            "\1\37\152\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\41\41\uffff\1\10\70\uffff\1\10\12\uffff\1\42\4\uffff\1\40",
            "\1\uffff",
            "\1\43",
            "\1\44",
            "\1\45",
            "\1\46",
            "\1\47",
            "\1\50",
            "\1\50",
            "\1\10\24\uffff\3\10\1\uffff\2\10\103\uffff\1\10\2\uffff\1\42"+
            "\2\uffff\1\51\13\uffff\1\10",
            "\1\51",
            "\1\52",
            "\1\53",
            "\1\54",
            "\1\55",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA140_eot = DFA.unpackEncodedString(DFA140_static.DFA140_eotS);
    static final short[] DFA140_eof = DFA.unpackEncodedString(DFA140_static.DFA140_eofS);
    static final char[] DFA140_min = DFA.unpackEncodedStringToUnsignedChars(DFA140_static.DFA140_minS);
    static final char[] DFA140_max = DFA.unpackEncodedStringToUnsignedChars(DFA140_static.DFA140_maxS);
    static final short[] DFA140_accept = DFA.unpackEncodedString(DFA140_static.DFA140_acceptS);
    static final short[] DFA140_special = DFA.unpackEncodedString(DFA140_static.DFA140_specialS);
    static final short[][] DFA140_transition;

    static {
        int numStates = DFA140_static.DFA140_transitionS.length;
        DFA140_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA140_transition[i] = DFA.unpackEncodedString(DFA140_static.DFA140_transitionS[i]);
        }
    }

    class DFA140 extends DFA {

        public DFA140(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 140;
            this.eot = DFA140_eot;
            this.eof = DFA140_eof;
            this.min = DFA140_min;
            this.max = DFA140_max;
            this.accept = DFA140_accept;
            this.special = DFA140_special;
            this.transition = DFA140_transition;
        }
        public String getDescription() {
            return "309:1: unnamedmoleculeDescriptionStart : ( quantityOf ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule ) | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA140_44 = input.LA(1);

                         
                        int index140_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index140_44);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA140_26 = input.LA(1);

                         
                        int index140_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index140_26);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA140_43 = input.LA(1);

                         
                        int index140_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index140_43);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA140_29 = input.LA(1);

                         
                        int index140_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index140_29);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA140_27 = input.LA(1);

                         
                        int index140_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index140_27);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA140_45 = input.LA(1);

                         
                        int index140_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index140_45);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 140, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA139_static {
    static final String DFA139_eotS =
        "\25\uffff";
    static final String DFA139_eofS =
        "\25\uffff";
    static final String DFA139_minS =
        "\1\47\13\0\11\uffff";
    static final String DFA139_maxS =
        "\1\u0099\13\0\11\uffff";
    static final String DFA139_acceptS =
        "\14\uffff\1\3\6\uffff\1\1\1\2";
    static final String DFA139_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\11\uffff}>";
    static final String[] DFA139_transitionS = {
            "\1\14\1\4\1\14\1\12\2\uffff\1\3\1\5\20\uffff\1\6\4\uffff\1\10"+
            "\2\uffff\1\13\13\uffff\1\7\6\uffff\1\11\60\uffff\1\14\1\uffff"+
            "\1\14\1\uffff\1\14\2\uffff\1\1\4\uffff\1\2\2\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA139_eot = DFA.unpackEncodedString(DFA139_static.DFA139_eotS);
    static final short[] DFA139_eof = DFA.unpackEncodedString(DFA139_static.DFA139_eofS);
    static final char[] DFA139_min = DFA.unpackEncodedStringToUnsignedChars(DFA139_static.DFA139_minS);
    static final char[] DFA139_max = DFA.unpackEncodedStringToUnsignedChars(DFA139_static.DFA139_maxS);
    static final short[] DFA139_accept = DFA.unpackEncodedString(DFA139_static.DFA139_acceptS);
    static final short[] DFA139_special = DFA.unpackEncodedString(DFA139_static.DFA139_specialS);
    static final short[][] DFA139_transition;

    static {
        int numStates = DFA139_static.DFA139_transitionS.length;
        DFA139_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA139_transition[i] = DFA.unpackEncodedString(DFA139_static.DFA139_transitionS[i]);
        }
    }

    class DFA139 extends DFA {

        public DFA139(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 139;
            this.eot = DFA139_eot;
            this.eof = DFA139_eof;
            this.min = DFA139_min;
            this.max = DFA139_max;
            this.accept = DFA139_accept;
            this.special = DFA139_special;
            this.transition = DFA139_transition;
        }
        public String getDescription() {
            return "310:15: ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA139_1 = input.LA(1);

                         
                        int index139_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred339_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index139_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA139_2 = input.LA(1);

                         
                        int index139_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred339_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index139_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA139_3 = input.LA(1);

                         
                        int index139_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred339_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index139_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA139_4 = input.LA(1);

                         
                        int index139_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred339_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index139_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA139_5 = input.LA(1);

                         
                        int index139_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred339_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index139_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA139_6 = input.LA(1);

                         
                        int index139_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred339_ChemicalChunker()) ) {s = 20;}

                         
                        input.seek(index139_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA139_7 = input.LA(1);

                         
                        int index139_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred339_ChemicalChunker()) ) {s = 20;}

                         
                        input.seek(index139_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA139_8 = input.LA(1);

                         
                        int index139_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred339_ChemicalChunker()) ) {s = 20;}

                         
                        input.seek(index139_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA139_9 = input.LA(1);

                         
                        int index139_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred339_ChemicalChunker()) ) {s = 20;}

                         
                        input.seek(index139_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA139_10 = input.LA(1);

                         
                        int index139_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred339_ChemicalChunker()) ) {s = 20;}

                         
                        input.seek(index139_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA139_11 = input.LA(1);

                         
                        int index139_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred339_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index139_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 139, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA141_static {
    static final String DFA141_eotS =
        "\31\uffff";
    static final String DFA141_eofS =
        "\5\uffff\1\1\23\uffff";
    static final String DFA141_minS =
        "\1\47\1\uffff\2\45\1\uffff\1\46\1\47\11\45\10\0\1\54";
    static final String DFA141_maxS =
        "\1\u0099\1\uffff\2\45\1\uffff\1\u00b4\1\u0092\11\45\10\0\1\u009c";
    static final String DFA141_acceptS =
        "\1\uffff\1\2\2\uffff\1\1\24\uffff";
    static final String DFA141_specialS =
        "\20\uffff\1\7\1\5\1\2\1\1\1\4\1\3\1\6\1\0\1\uffff}>";
    static final String[] DFA141_transitionS = {
            "\4\1\2\uffff\2\1\11\uffff\1\1\6\uffff\1\1\4\uffff\1\1\2\uffff"+
            "\1\1\1\uffff\1\4\11\uffff\1\1\6\uffff\1\1\47\uffff\1\4\10\uffff"+
            "\1\1\1\uffff\2\1\1\3\2\uffff\1\2\1\1\3\uffff\3\1",
            "",
            "\1\5",
            "\1\6",
            "",
            "\6\1\1\13\24\1\1\16\1\7\1\14\1\1\1\15\1\12\103\1\1\11\21\1"+
            "\1\10\30\1",
            "\1\1\41\uffff\1\4\70\uffff\1\4\12\uffff\1\1\4\uffff\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\4\24\uffff\3\4\1\uffff\2\4\103\uffff\1\4\2\uffff\1\1\2\uffff"+
            "\1\1\13\uffff\1\4"
    };
    }

    static final short[] DFA141_eot = DFA.unpackEncodedString(DFA141_static.DFA141_eotS);
    static final short[] DFA141_eof = DFA.unpackEncodedString(DFA141_static.DFA141_eofS);
    static final char[] DFA141_min = DFA.unpackEncodedStringToUnsignedChars(DFA141_static.DFA141_minS);
    static final char[] DFA141_max = DFA.unpackEncodedStringToUnsignedChars(DFA141_static.DFA141_maxS);
    static final short[] DFA141_accept = DFA.unpackEncodedString(DFA141_static.DFA141_acceptS);
    static final short[] DFA141_special = DFA.unpackEncodedString(DFA141_static.DFA141_specialS);
    static final short[][] DFA141_transition;

    static {
        int numStates = DFA141_static.DFA141_transitionS.length;
        DFA141_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA141_transition[i] = DFA.unpackEncodedString(DFA141_static.DFA141_transitionS[i]);
        }
    }

    class DFA141 extends DFA {

        public DFA141(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 141;
            this.eot = DFA141_eot;
            this.eof = DFA141_eof;
            this.min = DFA141_min;
            this.max = DFA141_max;
            this.accept = DFA141_accept;
            this.special = DFA141_special;
            this.transition = DFA141_transition;
        }
        public String getDescription() {
            return "()+ loopback of 313:4: ( quantity )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA141_23 = input.LA(1);

                         
                        int index141_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index141_23);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA141_19 = input.LA(1);

                         
                        int index141_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index141_19);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA141_18 = input.LA(1);

                         
                        int index141_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index141_18);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA141_21 = input.LA(1);

                         
                        int index141_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index141_21);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA141_20 = input.LA(1);

                         
                        int index141_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index141_20);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA141_17 = input.LA(1);

                         
                        int index141_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index141_17);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA141_22 = input.LA(1);

                         
                        int index141_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index141_22);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA141_16 = input.LA(1);

                         
                        int index141_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index141_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 141, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA144_static {
    static final String DFA144_eotS =
        "\u0092\uffff";
    static final String DFA144_eofS =
        "\1\1\u0091\uffff";
    static final String DFA144_minS =
        "\1\46\5\uffff\1\0\1\uffff\3\0\u0087\uffff";
    static final String DFA144_maxS =
        "\1\u00b4\5\uffff\1\0\1\uffff\3\0\u0087\uffff";
    static final String DFA144_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA144_specialS =
        "\6\uffff\1\0\1\uffff\1\1\1\2\1\3\u0087\uffff}>";
    static final String[] DFA144_transitionS = {
            "\43\1\1\11\70\1\1\12\14\1\1\6\2\1\1\10\42\1",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA144_eot = DFA.unpackEncodedString(DFA144_static.DFA144_eotS);
    static final short[] DFA144_eof = DFA.unpackEncodedString(DFA144_static.DFA144_eofS);
    static final char[] DFA144_min = DFA.unpackEncodedStringToUnsignedChars(DFA144_static.DFA144_minS);
    static final char[] DFA144_max = DFA.unpackEncodedStringToUnsignedChars(DFA144_static.DFA144_maxS);
    static final short[] DFA144_accept = DFA.unpackEncodedString(DFA144_static.DFA144_acceptS);
    static final short[] DFA144_special = DFA.unpackEncodedString(DFA144_static.DFA144_specialS);
    static final short[][] DFA144_transition;

    static {
        int numStates = DFA144_static.DFA144_transitionS.length;
        DFA144_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA144_transition[i] = DFA.unpackEncodedString(DFA144_static.DFA144_transitionS[i]);
        }
    }

    class DFA144 extends DFA {

        public DFA144(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 144;
            this.eot = DFA144_eot;
            this.eof = DFA144_eof;
            this.min = DFA144_min;
            this.max = DFA144_max;
            this.accept = DFA144_accept;
            this.special = DFA144_special;
            this.transition = DFA144_transition;
        }
        public String getDescription() {
            return "()* loopback of 316:29: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA144_6 = input.LA(1);

                         
                        int index144_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred346_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index144_6);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA144_8 = input.LA(1);

                         
                        int index144_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred346_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index144_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA144_9 = input.LA(1);

                         
                        int index144_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred346_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index144_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA144_10 = input.LA(1);

                         
                        int index144_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred346_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index144_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 144, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA145_static {
    static final String DFA145_eotS =
        "\43\uffff";
    static final String DFA145_eofS =
        "\1\2\2\uffff\1\2\5\uffff\3\2\1\uffff\1\2\10\uffff\6\2\4\uffff\3"+
        "\2";
    static final String DFA145_minS =
        "\1\46\1\45\1\uffff\1\46\5\45\3\46\1\0\1\46\3\45\1\uffff\4\45\6\46"+
        "\1\0\3\45\3\46";
    static final String DFA145_maxS =
        "\1\u00b4\1\45\1\uffff\1\u00b4\5\45\3\u00b4\1\0\1\u00b4\3\45\1\uffff"+
        "\4\45\6\u00b4\1\0\3\45\3\u00b4";
    static final String DFA145_acceptS =
        "\2\uffff\1\2\16\uffff\1\1\21\uffff";
    static final String DFA145_specialS =
        "\14\uffff\1\0\17\uffff\1\1\6\uffff}>";
    static final String[] DFA145_transitionS = {
            "\11\2\1\1\u0085\2",
            "\1\3",
            "",
            "\2\2\1\6\4\2\1\5\21\2\1\7\123\2\1\10\3\2\1\4\35\2",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\2\2\1\20\4\2\1\17\21\2\1\7\127\2\1\16\35\2",
            "\2\2\1\20\4\2\1\17\21\2\1\7\127\2\1\16\35\2",
            "\2\2\1\20\4\2\1\17\21\2\1\7\127\2\1\16\35\2",
            "\1\uffff",
            "\2\2\1\24\4\2\1\23\21\2\1\25\127\2\1\22\35\2",
            "\1\26",
            "\1\27",
            "\1\30",
            "",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "\2\2\1\20\4\2\1\17\21\2\1\7\127\2\1\16\35\2",
            "\2\2\1\20\4\2\1\17\21\2\1\7\127\2\1\16\35\2",
            "\2\2\1\20\4\2\1\17\21\2\1\7\127\2\1\16\35\2",
            "\2\2\1\37\4\2\1\36\21\2\1\25\127\2\1\35\35\2",
            "\2\2\1\37\4\2\1\36\21\2\1\25\127\2\1\35\35\2",
            "\2\2\1\37\4\2\1\36\21\2\1\25\127\2\1\35\35\2",
            "\1\uffff",
            "\1\40",
            "\1\41",
            "\1\42",
            "\2\2\1\37\4\2\1\36\21\2\1\25\127\2\1\35\35\2",
            "\2\2\1\37\4\2\1\36\21\2\1\25\127\2\1\35\35\2",
            "\2\2\1\37\4\2\1\36\21\2\1\25\127\2\1\35\35\2"
    };
    }

    static final short[] DFA145_eot = DFA.unpackEncodedString(DFA145_static.DFA145_eotS);
    static final short[] DFA145_eof = DFA.unpackEncodedString(DFA145_static.DFA145_eofS);
    static final char[] DFA145_min = DFA.unpackEncodedStringToUnsignedChars(DFA145_static.DFA145_minS);
    static final char[] DFA145_max = DFA.unpackEncodedStringToUnsignedChars(DFA145_static.DFA145_maxS);
    static final short[] DFA145_accept = DFA.unpackEncodedString(DFA145_static.DFA145_acceptS);
    static final short[] DFA145_special = DFA.unpackEncodedString(DFA145_static.DFA145_specialS);
    static final short[][] DFA145_transition;

    static {
        int numStates = DFA145_static.DFA145_transitionS.length;
        DFA145_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA145_transition[i] = DFA.unpackEncodedString(DFA145_static.DFA145_transitionS[i]);
        }
    }

    class DFA145 extends DFA {

        public DFA145(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 145;
            this.eot = DFA145_eot;
            this.eof = DFA145_eof;
            this.min = DFA145_min;
            this.max = DFA145_max;
            this.accept = DFA145_accept;
            this.special = DFA145_special;
            this.transition = DFA145_transition;
        }
        public String getDescription() {
            return "316:39: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA145_12 = input.LA(1);

                         
                        int index145_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred347_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index145_12);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA145_28 = input.LA(1);

                         
                        int index145_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred347_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index145_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 145, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA146_static {
    static final String DFA146_eotS =
        "\u0092\uffff";
    static final String DFA146_eofS =
        "\1\5\u0091\uffff";
    static final String DFA146_minS =
        "\1\46\4\0\u008d\uffff";
    static final String DFA146_maxS =
        "\1\u00b4\4\0\u008d\uffff";
    static final String DFA146_acceptS =
        "\5\uffff\1\2\u008b\uffff\1\1";
    static final String DFA146_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008d\uffff}>";
    static final String[] DFA146_transitionS = {
            "\22\5\1\2\2\5\1\1\101\5\1\4\3\5\1\3\63\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA146_eot = DFA.unpackEncodedString(DFA146_static.DFA146_eotS);
    static final short[] DFA146_eof = DFA.unpackEncodedString(DFA146_static.DFA146_eofS);
    static final char[] DFA146_min = DFA.unpackEncodedStringToUnsignedChars(DFA146_static.DFA146_minS);
    static final char[] DFA146_max = DFA.unpackEncodedStringToUnsignedChars(DFA146_static.DFA146_maxS);
    static final short[] DFA146_accept = DFA.unpackEncodedString(DFA146_static.DFA146_acceptS);
    static final short[] DFA146_special = DFA.unpackEncodedString(DFA146_static.DFA146_specialS);
    static final short[][] DFA146_transition;

    static {
        int numStates = DFA146_static.DFA146_transitionS.length;
        DFA146_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA146_transition[i] = DFA.unpackEncodedString(DFA146_static.DFA146_transitionS[i]);
        }
    }

    class DFA146 extends DFA {

        public DFA146(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = DFA146_eot;
            this.eof = DFA146_eof;
            this.min = DFA146_min;
            this.max = DFA146_max;
            this.accept = DFA146_accept;
            this.special = DFA146_special;
            this.transition = DFA146_transition;
        }
        public String getDescription() {
            return "316:49: ( fromProcedure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA146_1 = input.LA(1);

                         
                        int index146_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred348_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index146_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA146_2 = input.LA(1);

                         
                        int index146_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred348_ChemicalChunker()&&(precededByProduct(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index146_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA146_3 = input.LA(1);

                         
                        int index146_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred348_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index146_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA146_4 = input.LA(1);

                         
                        int index146_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred348_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index146_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 146, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA150_static {
    static final String DFA150_eotS =
        "\u0092\uffff";
    static final String DFA150_eofS =
        "\1\1\u0091\uffff";
    static final String DFA150_minS =
        "\1\46\5\uffff\1\0\1\uffff\3\0\u0087\uffff";
    static final String DFA150_maxS =
        "\1\u00b4\5\uffff\1\0\1\uffff\3\0\u0087\uffff";
    static final String DFA150_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA150_specialS =
        "\6\uffff\1\0\1\uffff\1\1\1\2\1\3\u0087\uffff}>";
    static final String[] DFA150_transitionS = {
            "\43\1\1\11\70\1\1\12\14\1\1\6\2\1\1\10\42\1",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA150_eot = DFA.unpackEncodedString(DFA150_static.DFA150_eotS);
    static final short[] DFA150_eof = DFA.unpackEncodedString(DFA150_static.DFA150_eofS);
    static final char[] DFA150_min = DFA.unpackEncodedStringToUnsignedChars(DFA150_static.DFA150_minS);
    static final char[] DFA150_max = DFA.unpackEncodedStringToUnsignedChars(DFA150_static.DFA150_maxS);
    static final short[] DFA150_accept = DFA.unpackEncodedString(DFA150_static.DFA150_acceptS);
    static final short[] DFA150_special = DFA.unpackEncodedString(DFA150_static.DFA150_specialS);
    static final short[][] DFA150_transition;

    static {
        int numStates = DFA150_static.DFA150_transitionS.length;
        DFA150_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA150_transition[i] = DFA.unpackEncodedString(DFA150_static.DFA150_transitionS[i]);
        }
    }

    class DFA150 extends DFA {

        public DFA150(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 150;
            this.eot = DFA150_eot;
            this.eof = DFA150_eof;
            this.min = DFA150_min;
            this.max = DFA150_max;
            this.accept = DFA150_accept;
            this.special = DFA150_special;
            this.transition = DFA150_transition;
        }
        public String getDescription() {
            return "()* loopback of 319:148: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA150_6 = input.LA(1);

                         
                        int index150_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred353_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index150_6);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA150_8 = input.LA(1);

                         
                        int index150_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred353_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index150_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA150_9 = input.LA(1);

                         
                        int index150_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred353_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index150_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA150_10 = input.LA(1);

                         
                        int index150_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred353_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index150_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 150, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA151_static {
    static final String DFA151_eotS =
        "\43\uffff";
    static final String DFA151_eofS =
        "\1\2\2\uffff\1\2\5\uffff\3\2\1\uffff\1\2\10\uffff\6\2\4\uffff\3"+
        "\2";
    static final String DFA151_minS =
        "\1\46\1\45\1\uffff\1\46\5\45\3\46\1\0\1\46\3\45\1\uffff\4\45\6\46"+
        "\1\0\3\45\3\46";
    static final String DFA151_maxS =
        "\1\u00b4\1\45\1\uffff\1\u00b4\5\45\3\u00b4\1\0\1\u00b4\3\45\1\uffff"+
        "\4\45\6\u00b4\1\0\3\45\3\u00b4";
    static final String DFA151_acceptS =
        "\2\uffff\1\2\16\uffff\1\1\21\uffff";
    static final String DFA151_specialS =
        "\14\uffff\1\0\17\uffff\1\1\6\uffff}>";
    static final String[] DFA151_transitionS = {
            "\11\2\1\1\u0085\2",
            "\1\3",
            "",
            "\2\2\1\6\4\2\1\5\21\2\1\7\123\2\1\10\3\2\1\4\35\2",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\2\2\1\20\4\2\1\17\21\2\1\7\127\2\1\16\35\2",
            "\2\2\1\20\4\2\1\17\21\2\1\7\127\2\1\16\35\2",
            "\2\2\1\20\4\2\1\17\21\2\1\7\127\2\1\16\35\2",
            "\1\uffff",
            "\2\2\1\24\4\2\1\23\21\2\1\25\127\2\1\22\35\2",
            "\1\26",
            "\1\27",
            "\1\30",
            "",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "\2\2\1\20\4\2\1\17\21\2\1\7\127\2\1\16\35\2",
            "\2\2\1\20\4\2\1\17\21\2\1\7\127\2\1\16\35\2",
            "\2\2\1\20\4\2\1\17\21\2\1\7\127\2\1\16\35\2",
            "\2\2\1\37\4\2\1\36\21\2\1\25\127\2\1\35\35\2",
            "\2\2\1\37\4\2\1\36\21\2\1\25\127\2\1\35\35\2",
            "\2\2\1\37\4\2\1\36\21\2\1\25\127\2\1\35\35\2",
            "\1\uffff",
            "\1\40",
            "\1\41",
            "\1\42",
            "\2\2\1\37\4\2\1\36\21\2\1\25\127\2\1\35\35\2",
            "\2\2\1\37\4\2\1\36\21\2\1\25\127\2\1\35\35\2",
            "\2\2\1\37\4\2\1\36\21\2\1\25\127\2\1\35\35\2"
    };
    }

    static final short[] DFA151_eot = DFA.unpackEncodedString(DFA151_static.DFA151_eotS);
    static final short[] DFA151_eof = DFA.unpackEncodedString(DFA151_static.DFA151_eofS);
    static final char[] DFA151_min = DFA.unpackEncodedStringToUnsignedChars(DFA151_static.DFA151_minS);
    static final char[] DFA151_max = DFA.unpackEncodedStringToUnsignedChars(DFA151_static.DFA151_maxS);
    static final short[] DFA151_accept = DFA.unpackEncodedString(DFA151_static.DFA151_acceptS);
    static final short[] DFA151_special = DFA.unpackEncodedString(DFA151_static.DFA151_specialS);
    static final short[][] DFA151_transition;

    static {
        int numStates = DFA151_static.DFA151_transitionS.length;
        DFA151_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA151_transition[i] = DFA.unpackEncodedString(DFA151_static.DFA151_transitionS[i]);
        }
    }

    class DFA151 extends DFA {

        public DFA151(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 151;
            this.eot = DFA151_eot;
            this.eof = DFA151_eof;
            this.min = DFA151_min;
            this.max = DFA151_max;
            this.accept = DFA151_accept;
            this.special = DFA151_special;
            this.transition = DFA151_transition;
        }
        public String getDescription() {
            return "319:158: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA151_12 = input.LA(1);

                         
                        int index151_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_12);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA151_28 = input.LA(1);

                         
                        int index151_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 151, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA152_static {
    static final String DFA152_eotS =
        "\u0092\uffff";
    static final String DFA152_eofS =
        "\1\5\u0091\uffff";
    static final String DFA152_minS =
        "\1\46\4\0\u008d\uffff";
    static final String DFA152_maxS =
        "\1\u00b4\4\0\u008d\uffff";
    static final String DFA152_acceptS =
        "\5\uffff\1\2\u008b\uffff\1\1";
    static final String DFA152_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008d\uffff}>";
    static final String[] DFA152_transitionS = {
            "\22\5\1\2\2\5\1\1\101\5\1\4\3\5\1\3\63\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA152_eot = DFA.unpackEncodedString(DFA152_static.DFA152_eotS);
    static final short[] DFA152_eof = DFA.unpackEncodedString(DFA152_static.DFA152_eofS);
    static final char[] DFA152_min = DFA.unpackEncodedStringToUnsignedChars(DFA152_static.DFA152_minS);
    static final char[] DFA152_max = DFA.unpackEncodedStringToUnsignedChars(DFA152_static.DFA152_maxS);
    static final short[] DFA152_accept = DFA.unpackEncodedString(DFA152_static.DFA152_acceptS);
    static final short[] DFA152_special = DFA.unpackEncodedString(DFA152_static.DFA152_specialS);
    static final short[][] DFA152_transition;

    static {
        int numStates = DFA152_static.DFA152_transitionS.length;
        DFA152_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA152_transition[i] = DFA.unpackEncodedString(DFA152_static.DFA152_transitionS[i]);
        }
    }

    class DFA152 extends DFA {

        public DFA152(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 152;
            this.eot = DFA152_eot;
            this.eof = DFA152_eof;
            this.min = DFA152_min;
            this.max = DFA152_max;
            this.accept = DFA152_accept;
            this.special = DFA152_special;
            this.transition = DFA152_transition;
        }
        public String getDescription() {
            return "319:168: ( fromProcedure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA152_1 = input.LA(1);

                         
                        int index152_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index152_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA152_2 = input.LA(1);

                         
                        int index152_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred355_ChemicalChunker()&&(precededByProduct(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index152_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA152_3 = input.LA(1);

                         
                        int index152_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred355_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index152_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA152_4 = input.LA(1);

                         
                        int index152_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred355_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index152_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 152, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA153_static {
    static final String DFA153_eotS =
        "\u0092\uffff";
    static final String DFA153_eofS =
        "\1\1\u0091\uffff";
    static final String DFA153_minS =
        "\1\46\5\uffff\1\0\1\uffff\3\0\u0087\uffff";
    static final String DFA153_maxS =
        "\1\u00b4\5\uffff\1\0\1\uffff\3\0\u0087\uffff";
    static final String DFA153_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA153_specialS =
        "\6\uffff\1\0\1\uffff\1\1\1\2\1\3\u0087\uffff}>";
    static final String[] DFA153_transitionS = {
            "\43\1\1\11\70\1\1\12\14\1\1\6\2\1\1\10\42\1",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA153_eot = DFA.unpackEncodedString(DFA153_static.DFA153_eotS);
    static final short[] DFA153_eof = DFA.unpackEncodedString(DFA153_static.DFA153_eofS);
    static final char[] DFA153_min = DFA.unpackEncodedStringToUnsignedChars(DFA153_static.DFA153_minS);
    static final char[] DFA153_max = DFA.unpackEncodedStringToUnsignedChars(DFA153_static.DFA153_maxS);
    static final short[] DFA153_accept = DFA.unpackEncodedString(DFA153_static.DFA153_acceptS);
    static final short[] DFA153_special = DFA.unpackEncodedString(DFA153_static.DFA153_specialS);
    static final short[][] DFA153_transition;

    static {
        int numStates = DFA153_static.DFA153_transitionS.length;
        DFA153_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA153_transition[i] = DFA.unpackEncodedString(DFA153_static.DFA153_transitionS[i]);
        }
    }

    class DFA153 extends DFA {

        public DFA153(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 153;
            this.eot = DFA153_eot;
            this.eof = DFA153_eof;
            this.min = DFA153_min;
            this.max = DFA153_max;
            this.accept = DFA153_accept;
            this.special = DFA153_special;
            this.transition = DFA153_transition;
        }
        public String getDescription() {
            return "()* loopback of 322:37: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA153_6 = input.LA(1);

                         
                        int index153_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index153_6);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA153_8 = input.LA(1);

                         
                        int index153_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index153_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA153_9 = input.LA(1);

                         
                        int index153_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index153_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA153_10 = input.LA(1);

                         
                        int index153_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index153_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 153, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA154_static {
    static final String DFA154_eotS =
        "\43\uffff";
    static final String DFA154_eofS =
        "\1\2\2\uffff\1\2\5\uffff\3\2\1\uffff\1\2\10\uffff\6\2\4\uffff\3"+
        "\2";
    static final String DFA154_minS =
        "\1\46\1\45\1\uffff\1\46\5\45\3\46\1\0\1\46\3\45\1\uffff\4\45\6\46"+
        "\1\0\3\45\3\46";
    static final String DFA154_maxS =
        "\1\u00b4\1\45\1\uffff\1\u00b4\5\45\3\u00b4\1\0\1\u00b4\3\45\1\uffff"+
        "\4\45\6\u00b4\1\0\3\45\3\u00b4";
    static final String DFA154_acceptS =
        "\2\uffff\1\2\16\uffff\1\1\21\uffff";
    static final String DFA154_specialS =
        "\14\uffff\1\0\17\uffff\1\1\6\uffff}>";
    static final String[] DFA154_transitionS = {
            "\11\2\1\1\u0085\2",
            "\1\3",
            "",
            "\2\2\1\6\4\2\1\5\21\2\1\7\123\2\1\10\3\2\1\4\35\2",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\2\2\1\20\4\2\1\17\21\2\1\7\127\2\1\16\35\2",
            "\2\2\1\20\4\2\1\17\21\2\1\7\127\2\1\16\35\2",
            "\2\2\1\20\4\2\1\17\21\2\1\7\127\2\1\16\35\2",
            "\1\uffff",
            "\2\2\1\24\4\2\1\23\21\2\1\25\127\2\1\22\35\2",
            "\1\26",
            "\1\27",
            "\1\30",
            "",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "\2\2\1\20\4\2\1\17\21\2\1\7\127\2\1\16\35\2",
            "\2\2\1\20\4\2\1\17\21\2\1\7\127\2\1\16\35\2",
            "\2\2\1\20\4\2\1\17\21\2\1\7\127\2\1\16\35\2",
            "\2\2\1\37\4\2\1\36\21\2\1\25\127\2\1\35\35\2",
            "\2\2\1\37\4\2\1\36\21\2\1\25\127\2\1\35\35\2",
            "\2\2\1\37\4\2\1\36\21\2\1\25\127\2\1\35\35\2",
            "\1\uffff",
            "\1\40",
            "\1\41",
            "\1\42",
            "\2\2\1\37\4\2\1\36\21\2\1\25\127\2\1\35\35\2",
            "\2\2\1\37\4\2\1\36\21\2\1\25\127\2\1\35\35\2",
            "\2\2\1\37\4\2\1\36\21\2\1\25\127\2\1\35\35\2"
    };
    }

    static final short[] DFA154_eot = DFA.unpackEncodedString(DFA154_static.DFA154_eotS);
    static final short[] DFA154_eof = DFA.unpackEncodedString(DFA154_static.DFA154_eofS);
    static final char[] DFA154_min = DFA.unpackEncodedStringToUnsignedChars(DFA154_static.DFA154_minS);
    static final char[] DFA154_max = DFA.unpackEncodedStringToUnsignedChars(DFA154_static.DFA154_maxS);
    static final short[] DFA154_accept = DFA.unpackEncodedString(DFA154_static.DFA154_acceptS);
    static final short[] DFA154_special = DFA.unpackEncodedString(DFA154_static.DFA154_specialS);
    static final short[][] DFA154_transition;

    static {
        int numStates = DFA154_static.DFA154_transitionS.length;
        DFA154_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA154_transition[i] = DFA.unpackEncodedString(DFA154_static.DFA154_transitionS[i]);
        }
    }

    class DFA154 extends DFA {

        public DFA154(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 154;
            this.eot = DFA154_eot;
            this.eof = DFA154_eof;
            this.min = DFA154_min;
            this.max = DFA154_max;
            this.accept = DFA154_accept;
            this.special = DFA154_special;
            this.transition = DFA154_transition;
        }
        public String getDescription() {
            return "322:47: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA154_12 = input.LA(1);

                         
                        int index154_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred357_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index154_12);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA154_28 = input.LA(1);

                         
                        int index154_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred357_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index154_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 154, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA155_static {
    static final String DFA155_eotS =
        "\u0092\uffff";
    static final String DFA155_eofS =
        "\1\5\u0091\uffff";
    static final String DFA155_minS =
        "\1\46\4\0\u008d\uffff";
    static final String DFA155_maxS =
        "\1\u00b4\4\0\u008d\uffff";
    static final String DFA155_acceptS =
        "\5\uffff\1\2\u008b\uffff\1\1";
    static final String DFA155_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008d\uffff}>";
    static final String[] DFA155_transitionS = {
            "\22\5\1\2\2\5\1\1\101\5\1\4\3\5\1\3\63\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA155_eot = DFA.unpackEncodedString(DFA155_static.DFA155_eotS);
    static final short[] DFA155_eof = DFA.unpackEncodedString(DFA155_static.DFA155_eofS);
    static final char[] DFA155_min = DFA.unpackEncodedStringToUnsignedChars(DFA155_static.DFA155_minS);
    static final char[] DFA155_max = DFA.unpackEncodedStringToUnsignedChars(DFA155_static.DFA155_maxS);
    static final short[] DFA155_accept = DFA.unpackEncodedString(DFA155_static.DFA155_acceptS);
    static final short[] DFA155_special = DFA.unpackEncodedString(DFA155_static.DFA155_specialS);
    static final short[][] DFA155_transition;

    static {
        int numStates = DFA155_static.DFA155_transitionS.length;
        DFA155_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA155_transition[i] = DFA.unpackEncodedString(DFA155_static.DFA155_transitionS[i]);
        }
    }

    class DFA155 extends DFA {

        public DFA155(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 155;
            this.eot = DFA155_eot;
            this.eof = DFA155_eof;
            this.min = DFA155_min;
            this.max = DFA155_max;
            this.accept = DFA155_accept;
            this.special = DFA155_special;
            this.transition = DFA155_transition;
        }
        public String getDescription() {
            return "322:57: ( fromProcedure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA155_1 = input.LA(1);

                         
                        int index155_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred358_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index155_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA155_2 = input.LA(1);

                         
                        int index155_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred358_ChemicalChunker()&&(precededByProduct(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index155_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA155_3 = input.LA(1);

                         
                        int index155_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred358_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index155_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA155_4 = input.LA(1);

                         
                        int index155_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred358_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index155_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 155, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA157_static {
    static final String DFA157_eotS =
        "\u0092\uffff";
    static final String DFA157_eofS =
        "\1\10\u0091\uffff";
    static final String DFA157_minS =
        "\1\46\7\0\u008a\uffff";
    static final String DFA157_maxS =
        "\1\u00b4\7\0\u008a\uffff";
    static final String DFA157_acceptS =
        "\10\uffff\1\2\u0088\uffff\1\1";
    static final String DFA157_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\u008a\uffff}>";
    static final String[] DFA157_transitionS = {
            "\1\10\1\7\41\10\1\3\70\10\1\4\10\10\1\5\1\10\1\6\1\10\1\1\2"+
            "\10\1\2\42\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA157_eot = DFA.unpackEncodedString(DFA157_static.DFA157_eotS);
    static final short[] DFA157_eof = DFA.unpackEncodedString(DFA157_static.DFA157_eofS);
    static final char[] DFA157_min = DFA.unpackEncodedStringToUnsignedChars(DFA157_static.DFA157_minS);
    static final char[] DFA157_max = DFA.unpackEncodedStringToUnsignedChars(DFA157_static.DFA157_maxS);
    static final short[] DFA157_accept = DFA.unpackEncodedString(DFA157_static.DFA157_acceptS);
    static final short[] DFA157_special = DFA.unpackEncodedString(DFA157_static.DFA157_specialS);
    static final short[][] DFA157_transition;

    static {
        int numStates = DFA157_static.DFA157_transitionS.length;
        DFA157_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA157_transition[i] = DFA.unpackEncodedString(DFA157_static.DFA157_transitionS[i]);
        }
    }

    class DFA157 extends DFA {

        public DFA157(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 157;
            this.eot = DFA157_eot;
            this.eof = DFA157_eof;
            this.min = DFA157_min;
            this.max = DFA157_max;
            this.accept = DFA157_accept;
            this.special = DFA157_special;
            this.transition = DFA157_transition;
        }
        public String getDescription() {
            return "325:82: ( numericReferenceOrQuantity )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA157_1 = input.LA(1);

                         
                        int index157_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred361_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||synpred361_ChemicalChunker())) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index157_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA157_2 = input.LA(1);

                         
                        int index157_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred361_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index157_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA157_3 = input.LA(1);

                         
                        int index157_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred361_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index157_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA157_4 = input.LA(1);

                         
                        int index157_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred361_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index157_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA157_5 = input.LA(1);

                         
                        int index157_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred361_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index157_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA157_6 = input.LA(1);

                         
                        int index157_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred361_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index157_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA157_7 = input.LA(1);

                         
                        int index157_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred361_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index157_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 157, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA160_static {
    static final String DFA160_eotS =
        "\u0092\uffff";
    static final String DFA160_eofS =
        "\1\10\u0091\uffff";
    static final String DFA160_minS =
        "\1\46\7\0\u008a\uffff";
    static final String DFA160_maxS =
        "\1\u00b4\7\0\u008a\uffff";
    static final String DFA160_acceptS =
        "\10\uffff\1\2\u0088\uffff\1\1";
    static final String DFA160_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\u008a\uffff}>";
    static final String[] DFA160_transitionS = {
            "\1\10\1\7\41\10\1\3\70\10\1\4\10\10\1\5\1\10\1\6\1\10\1\1\2"+
            "\10\1\2\42\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA160_eot = DFA.unpackEncodedString(DFA160_static.DFA160_eotS);
    static final short[] DFA160_eof = DFA.unpackEncodedString(DFA160_static.DFA160_eofS);
    static final char[] DFA160_min = DFA.unpackEncodedStringToUnsignedChars(DFA160_static.DFA160_minS);
    static final char[] DFA160_max = DFA.unpackEncodedStringToUnsignedChars(DFA160_static.DFA160_maxS);
    static final short[] DFA160_accept = DFA.unpackEncodedString(DFA160_static.DFA160_acceptS);
    static final short[] DFA160_special = DFA.unpackEncodedString(DFA160_static.DFA160_specialS);
    static final short[][] DFA160_transition;

    static {
        int numStates = DFA160_static.DFA160_transitionS.length;
        DFA160_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA160_transition[i] = DFA.unpackEncodedString(DFA160_static.DFA160_transitionS[i]);
        }
    }

    class DFA160 extends DFA {

        public DFA160(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 160;
            this.eot = DFA160_eot;
            this.eof = DFA160_eof;
            this.min = DFA160_min;
            this.max = DFA160_max;
            this.accept = DFA160_accept;
            this.special = DFA160_special;
            this.transition = DFA160_transition;
        }
        public String getDescription() {
            return "328:66: ( numericReferenceOrQuantity )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA160_1 = input.LA(1);

                         
                        int index160_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred364_ChemicalChunker()||(synpred364_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index160_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA160_2 = input.LA(1);

                         
                        int index160_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred364_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index160_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA160_3 = input.LA(1);

                         
                        int index160_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred364_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index160_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA160_4 = input.LA(1);

                         
                        int index160_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred364_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index160_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA160_5 = input.LA(1);

                         
                        int index160_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred364_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index160_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA160_6 = input.LA(1);

                         
                        int index160_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred364_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index160_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA160_7 = input.LA(1);

                         
                        int index160_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred364_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index160_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 160, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA165_static {
    static final String DFA165_eotS =
        "\11\uffff";
    static final String DFA165_eofS =
        "\11\uffff";
    static final String DFA165_minS =
        "\1\50\3\45\2\uffff\3\50";
    static final String DFA165_maxS =
        "\1\u0097\3\45\2\uffff\3\u0097";
    static final String DFA165_acceptS =
        "\4\uffff\1\1\1\2\3\uffff";
    static final String DFA165_specialS =
        "\11\uffff}>";
    static final String[] DFA165_transitionS = {
            "\1\3\1\uffff\1\4\2\uffff\1\2\1\4\20\uffff\1\4\4\uffff\1\4\2"+
            "\uffff\1\5\13\uffff\1\4\6\uffff\1\4\74\uffff\1\1",
            "\1\6",
            "\1\7",
            "\1\10",
            "",
            "",
            "\1\3\1\uffff\1\4\2\uffff\1\2\1\4\20\uffff\1\4\4\uffff\1\4\2"+
            "\uffff\1\5\13\uffff\1\4\6\uffff\1\4\74\uffff\1\1",
            "\1\3\1\uffff\1\4\2\uffff\1\2\1\4\20\uffff\1\4\4\uffff\1\4\2"+
            "\uffff\1\5\13\uffff\1\4\6\uffff\1\4\74\uffff\1\1",
            "\1\3\1\uffff\1\4\2\uffff\1\2\1\4\20\uffff\1\4\4\uffff\1\4\2"+
            "\uffff\1\5\13\uffff\1\4\6\uffff\1\4\74\uffff\1\1"
    };
    }

    static final short[] DFA165_eot = DFA.unpackEncodedString(DFA165_static.DFA165_eotS);
    static final short[] DFA165_eof = DFA.unpackEncodedString(DFA165_static.DFA165_eofS);
    static final char[] DFA165_min = DFA.unpackEncodedStringToUnsignedChars(DFA165_static.DFA165_minS);
    static final char[] DFA165_max = DFA.unpackEncodedStringToUnsignedChars(DFA165_static.DFA165_maxS);
    static final short[] DFA165_accept = DFA.unpackEncodedString(DFA165_static.DFA165_acceptS);
    static final short[] DFA165_special = DFA.unpackEncodedString(DFA165_static.DFA165_specialS);
    static final short[][] DFA165_transition;

    static {
        int numStates = DFA165_static.DFA165_transitionS.length;
        DFA165_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA165_transition[i] = DFA.unpackEncodedString(DFA165_static.DFA165_transitionS[i]);
        }
    }

    class DFA165 extends DFA {

        public DFA165(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 165;
            this.eot = DFA165_eot;
            this.eof = DFA165_eof;
            this.min = DFA165_min;
            this.max = DFA165_max;
            this.accept = DFA165_accept;
            this.special = DFA165_special;
            this.transition = DFA165_transition;
        }
        public String getDescription() {
            return "330:1: potentialUnnamedMoleculeStructureNN : ( ( jj | jjchem | oscarcj | jjcomp )* ( nnstate | referenceToExampleCompound | nnatmosphere | nnmixture | oscarase ) | ( jj | jjchem | oscarcj )* nnchementity );";
        }
    }
    static class DFA166_static {
    static final String DFA166_eotS =
        "\103\uffff";
    static final String DFA166_eofS =
        "\6\uffff\1\4\12\uffff\1\4\12\uffff\3\4\15\uffff\1\4\6\uffff\1\4"+
        "\1\uffff\2\4\2\uffff\2\4\4\uffff\1\4\1\uffff\1\4\1\uffff";
    static final String DFA166_minS =
        "\1\47\2\45\2\uffff\1\47\1\46\11\45\1\54\1\46\7\0\3\45\3\46\14\45"+
        "\1\0\1\46\6\0\1\46\1\0\2\46\2\45\2\46\4\45\1\46\1\0\1\46\1\0";
    static final String DFA166_maxS =
        "\1\u0092\2\45\2\uffff\1\u0092\1\u00b4\11\45\1\u009c\1\u00b4\7\0"+
        "\3\45\3\u00b4\14\45\1\0\1\u00b4\6\0\1\u00b4\1\0\2\u00b4\2\45\2\u00b4"+
        "\4\45\1\u00b4\1\0\1\u00b4\1\0";
    static final String DFA166_acceptS =
        "\3\uffff\1\1\1\2\76\uffff";
    static final String DFA166_specialS =
        "\22\uffff\1\7\1\6\1\12\1\20\1\15\1\0\1\1\22\uffff\1\17\1\uffff\1"+
        "\14\1\5\1\2\1\10\1\11\1\3\1\uffff\1\4\13\uffff\1\16\1\uffff\1\13}>";
    static final String[] DFA166_transitionS = {
            "\1\4\41\uffff\1\3\70\uffff\1\3\10\uffff\1\4\1\uffff\1\4\1\uffff"+
            "\1\1\2\uffff\1\2",
            "\1\5",
            "\1\6",
            "",
            "",
            "\1\4\41\uffff\1\3\70\uffff\1\3\12\uffff\1\4\4\uffff\1\7",
            "\6\4\1\16\24\4\1\12\1\14\1\17\1\4\1\15\1\13\103\4\1\11\21\4"+
            "\1\10\30\4",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\3\24\uffff\3\3\1\uffff\2\3\103\uffff\1\3\2\uffff\1\4\2\uffff"+
            "\1\4\13\uffff\1\3",
            "\43\4\1\32\70\4\1\33\7\4\1\11\7\4\1\31\42\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\34",
            "\1\35",
            "\1\36",
            "\6\4\1\46\24\4\1\37\1\44\1\43\1\4\1\45\1\42\103\4\1\41\21\4"+
            "\1\40\30\4",
            "\154\4\1\50\25\4\1\47\14\4",
            "\22\4\1\51\113\4\1\52\60\4",
            "\1\53",
            "\1\54",
            "\1\55",
            "\1\56",
            "\1\57",
            "\1\60",
            "\1\61",
            "\1\62",
            "\1\63",
            "\1\64",
            "\1\65",
            "\1\66",
            "\1\uffff",
            "\144\4\1\41\52\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\154\4\1\50\42\4",
            "\1\uffff",
            "\154\4\1\67\42\4",
            "\154\4\1\70\42\4",
            "\1\71",
            "\1\72",
            "\144\4\1\74\21\4\1\73\30\4",
            "\144\4\1\76\21\4\1\75\30\4",
            "\1\77",
            "\1\100",
            "\1\101",
            "\1\102",
            "\144\4\1\74\52\4",
            "\1\uffff",
            "\144\4\1\76\52\4",
            "\1\uffff"
    };
    }

    static final short[] DFA166_eot = DFA.unpackEncodedString(DFA166_static.DFA166_eotS);
    static final short[] DFA166_eof = DFA.unpackEncodedString(DFA166_static.DFA166_eofS);
    static final char[] DFA166_min = DFA.unpackEncodedStringToUnsignedChars(DFA166_static.DFA166_minS);
    static final char[] DFA166_max = DFA.unpackEncodedStringToUnsignedChars(DFA166_static.DFA166_maxS);
    static final short[] DFA166_accept = DFA.unpackEncodedString(DFA166_static.DFA166_acceptS);
    static final short[] DFA166_special = DFA.unpackEncodedString(DFA166_static.DFA166_specialS);
    static final short[][] DFA166_transition;

    static {
        int numStates = DFA166_static.DFA166_transitionS.length;
        DFA166_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA166_transition[i] = DFA.unpackEncodedString(DFA166_static.DFA166_transitionS[i]);
        }
    }

    class DFA166 extends DFA {

        public DFA166(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 166;
            this.eot = DFA166_eot;
            this.eof = DFA166_eof;
            this.min = DFA166_min;
            this.max = DFA166_max;
            this.accept = DFA166_accept;
            this.special = DFA166_special;
            this.transition = DFA166_transition;
        }
        public String getDescription() {
            return "334:1: numericReferenceOrQuantity : ( quantity | numericOrIdentifierCompoundReference );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA166_23 = input.LA(1);

                         
                        int index166_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred377_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_23);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA166_24 = input.LA(1);

                         
                        int index166_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred377_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_24);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA166_47 = input.LA(1);

                         
                        int index166_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred377_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_47);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA166_50 = input.LA(1);

                         
                        int index166_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred377_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_50);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA166_52 = input.LA(1);

                         
                        int index166_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred377_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_52);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA166_46 = input.LA(1);

                         
                        int index166_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred377_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_46);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA166_19 = input.LA(1);

                         
                        int index166_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred377_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_19);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA166_18 = input.LA(1);

                         
                        int index166_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred377_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_18);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA166_48 = input.LA(1);

                         
                        int index166_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred377_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_48);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA166_49 = input.LA(1);

                         
                        int index166_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred377_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_49);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA166_20 = input.LA(1);

                         
                        int index166_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred377_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_20);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA166_66 = input.LA(1);

                         
                        int index166_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred377_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_66);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA166_45 = input.LA(1);

                         
                        int index166_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred377_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_45);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA166_22 = input.LA(1);

                         
                        int index166_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred377_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_22);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA166_64 = input.LA(1);

                         
                        int index166_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred377_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_64);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA166_43 = input.LA(1);

                         
                        int index166_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred377_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_43);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA166_21 = input.LA(1);

                         
                        int index166_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred377_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 166, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA169_static {
    static final String DFA169_eotS =
        "\u0092\uffff";
    static final String DFA169_eofS =
        "\1\1\u0091\uffff";
    static final String DFA169_minS =
        "\1\46\16\uffff\4\0\177\uffff";
    static final String DFA169_maxS =
        "\1\u00b4\16\uffff\4\0\177\uffff";
    static final String DFA169_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA169_specialS =
        "\17\uffff\1\0\1\1\1\2\1\3\177\uffff}>";
    static final String[] DFA169_transitionS = {
            "\43\1\1\21\70\1\1\22\14\1\1\17\2\1\1\20\42\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA169_eot = DFA.unpackEncodedString(DFA169_static.DFA169_eotS);
    static final short[] DFA169_eof = DFA.unpackEncodedString(DFA169_static.DFA169_eofS);
    static final char[] DFA169_min = DFA.unpackEncodedStringToUnsignedChars(DFA169_static.DFA169_minS);
    static final char[] DFA169_max = DFA.unpackEncodedStringToUnsignedChars(DFA169_static.DFA169_maxS);
    static final short[] DFA169_accept = DFA.unpackEncodedString(DFA169_static.DFA169_acceptS);
    static final short[] DFA169_special = DFA.unpackEncodedString(DFA169_static.DFA169_specialS);
    static final short[][] DFA169_transition;

    static {
        int numStates = DFA169_static.DFA169_transitionS.length;
        DFA169_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA169_transition[i] = DFA.unpackEncodedString(DFA169_static.DFA169_transitionS[i]);
        }
    }

    class DFA169 extends DFA {

        public DFA169(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 169;
            this.eot = DFA169_eot;
            this.eof = DFA169_eof;
            this.min = DFA169_min;
            this.max = DFA169_max;
            this.accept = DFA169_accept;
            this.special = DFA169_special;
            this.transition = DFA169_transition;
        }
        public String getDescription() {
            return "()* loopback of 338:42: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA169_15 = input.LA(1);

                         
                        int index169_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred382_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index169_15);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA169_16 = input.LA(1);

                         
                        int index169_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred382_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index169_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA169_17 = input.LA(1);

                         
                        int index169_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred382_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index169_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA169_18 = input.LA(1);

                         
                        int index169_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred382_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index169_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 169, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA171_static {
    static final String DFA171_eotS =
        "\u0092\uffff";
    static final String DFA171_eofS =
        "\1\1\u0091\uffff";
    static final String DFA171_minS =
        "\1\46\1\uffff\2\0\u008e\uffff";
    static final String DFA171_maxS =
        "\1\u00b4\1\uffff\2\0\u008e\uffff";
    static final String DFA171_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA171_specialS =
        "\2\uffff\1\0\1\1\u008e\uffff}>";
    static final String[] DFA171_transitionS = {
            "\137\1\1\3\13\1\1\2\43\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA171_eot = DFA.unpackEncodedString(DFA171_static.DFA171_eotS);
    static final short[] DFA171_eof = DFA.unpackEncodedString(DFA171_static.DFA171_eofS);
    static final char[] DFA171_min = DFA.unpackEncodedStringToUnsignedChars(DFA171_static.DFA171_minS);
    static final char[] DFA171_max = DFA.unpackEncodedStringToUnsignedChars(DFA171_static.DFA171_maxS);
    static final short[] DFA171_accept = DFA.unpackEncodedString(DFA171_static.DFA171_acceptS);
    static final short[] DFA171_special = DFA.unpackEncodedString(DFA171_static.DFA171_specialS);
    static final short[][] DFA171_transition;

    static {
        int numStates = DFA171_static.DFA171_transitionS.length;
        DFA171_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA171_transition[i] = DFA.unpackEncodedString(DFA171_static.DFA171_transitionS[i]);
        }
    }

    class DFA171 extends DFA {

        public DFA171(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 171;
            this.eot = DFA171_eot;
            this.eof = DFA171_eof;
            this.min = DFA171_min;
            this.max = DFA171_max;
            this.accept = DFA171_accept;
            this.special = DFA171_special;
            this.transition = DFA171_transition;
        }
        public String getDescription() {
            return "()* loopback of 352:35: ( conjunction allIdentifierTypes )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA171_2 = input.LA(1);

                         
                        int index171_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index171_2);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA171_3 = input.LA(1);

                         
                        int index171_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index171_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 171, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA176_static {
    static final String DFA176_eotS =
        "\u0092\uffff";
    static final String DFA176_eofS =
        "\1\1\u0091\uffff";
    static final String DFA176_minS =
        "\1\46\2\uffff\1\0\u008e\uffff";
    static final String DFA176_maxS =
        "\1\u00b4\2\uffff\1\0\u008e\uffff";
    static final String DFA176_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA176_specialS =
        "\3\uffff\1\0\u008e\uffff}>";
    static final String[] DFA176_transitionS = {
            "\137\1\1\3\57\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA176_eot = DFA.unpackEncodedString(DFA176_static.DFA176_eotS);
    static final short[] DFA176_eof = DFA.unpackEncodedString(DFA176_static.DFA176_eofS);
    static final char[] DFA176_min = DFA.unpackEncodedStringToUnsignedChars(DFA176_static.DFA176_minS);
    static final char[] DFA176_max = DFA.unpackEncodedStringToUnsignedChars(DFA176_static.DFA176_maxS);
    static final short[] DFA176_accept = DFA.unpackEncodedString(DFA176_static.DFA176_acceptS);
    static final short[] DFA176_special = DFA.unpackEncodedString(DFA176_static.DFA176_specialS);
    static final short[][] DFA176_transition;

    static {
        int numStates = DFA176_static.DFA176_transitionS.length;
        DFA176_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA176_transition[i] = DFA.unpackEncodedString(DFA176_static.DFA176_transitionS[i]);
        }
    }

    class DFA176 extends DFA {

        public DFA176(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 176;
            this.eot = DFA176_eot;
            this.eof = DFA176_eof;
            this.min = DFA176_min;
            this.max = DFA176_max;
            this.accept = DFA176_accept;
            this.special = DFA176_special;
            this.transition = DFA176_transition;
        }
        public String getDescription() {
            return "()* loopback of 364:18: ( comma measurements )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA176_3 = input.LA(1);

                         
                        int index176_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index176_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 176, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA180_static {
    static final String DFA180_eotS =
        "\u0092\uffff";
    static final String DFA180_eofS =
        "\1\4\u0091\uffff";
    static final String DFA180_minS =
        "\1\46\3\0\u008e\uffff";
    static final String DFA180_maxS =
        "\1\u00b4\3\0\u008e\uffff";
    static final String DFA180_acceptS =
        "\4\uffff\1\2\u008c\uffff\1\1";
    static final String DFA180_specialS =
        "\1\uffff\1\0\1\1\1\2\u008e\uffff}>";
    static final String[] DFA180_transitionS = {
            "\43\4\1\2\70\4\1\3\17\4\1\1\42\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA180_eot = DFA.unpackEncodedString(DFA180_static.DFA180_eotS);
    static final short[] DFA180_eof = DFA.unpackEncodedString(DFA180_static.DFA180_eofS);
    static final char[] DFA180_min = DFA.unpackEncodedStringToUnsignedChars(DFA180_static.DFA180_minS);
    static final char[] DFA180_max = DFA.unpackEncodedStringToUnsignedChars(DFA180_static.DFA180_maxS);
    static final short[] DFA180_accept = DFA.unpackEncodedString(DFA180_static.DFA180_acceptS);
    static final short[] DFA180_special = DFA.unpackEncodedString(DFA180_static.DFA180_specialS);
    static final short[][] DFA180_transition;

    static {
        int numStates = DFA180_static.DFA180_transitionS.length;
        DFA180_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA180_transition[i] = DFA.unpackEncodedString(DFA180_static.DFA180_transitionS[i]);
        }
    }

    class DFA180 extends DFA {

        public DFA180(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 180;
            this.eot = DFA180_eot;
            this.eof = DFA180_eof;
            this.min = DFA180_min;
            this.max = DFA180_max;
            this.accept = DFA180_accept;
            this.special = DFA180_special;
            this.transition = DFA180_transition;
        }
        public String getDescription() {
            return "368:25: ( measurementtypes )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA180_1 = input.LA(1);

                         
                        int index180_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred393_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index180_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA180_2 = input.LA(1);

                         
                        int index180_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred393_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index180_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA180_3 = input.LA(1);

                         
                        int index180_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred393_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index180_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 180, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA181_static {
    static final String DFA181_eotS =
        "\27\uffff";
    static final String DFA181_eofS =
        "\15\uffff\1\20\3\uffff\1\20\2\uffff\1\20\2\uffff";
    static final String DFA181_minS =
        "\1\111\1\45\2\uffff\1\101\1\uffff\2\45\4\uffff\1\u008a\1\46\2\45"+
        "\1\uffff\1\46\1\0\1\45\1\46\1\45\1\0";
    static final String DFA181_maxS =
        "\1\u0092\1\45\2\uffff\1\u009c\1\uffff\2\45\4\uffff\1\u008a\1\u00b4"+
        "\2\45\1\uffff\1\u00b4\1\0\1\45\1\u00b4\1\45\1\0";
    static final String DFA181_acceptS =
        "\2\uffff\1\5\1\7\1\uffff\1\2\2\uffff\1\4\1\6\1\1\1\3\4\uffff\1\10"+
        "\6\uffff";
    static final String DFA181_specialS =
        "\22\uffff\1\0\3\uffff\1\1}>";
    static final String[] DFA181_transitionS = {
            "\1\2\70\uffff\1\3\17\uffff\1\1",
            "\1\4",
            "",
            "",
            "\1\13\1\5\1\12\1\uffff\1\11\1\10\103\uffff\1\7\21\uffff\1\6",
            "",
            "\1\14",
            "\1\15",
            "",
            "",
            "",
            "",
            "\1\7",
            "\134\20\1\17\5\20\1\16\54\20",
            "\1\21",
            "\1\22",
            "",
            "\154\20\1\23\42\20",
            "\1\uffff",
            "\1\24",
            "\144\20\1\25\52\20",
            "\1\26",
            "\1\uffff"
    };
    }

    static final short[] DFA181_eot = DFA.unpackEncodedString(DFA181_static.DFA181_eotS);
    static final short[] DFA181_eof = DFA.unpackEncodedString(DFA181_static.DFA181_eofS);
    static final char[] DFA181_min = DFA.unpackEncodedStringToUnsignedChars(DFA181_static.DFA181_minS);
    static final char[] DFA181_max = DFA.unpackEncodedStringToUnsignedChars(DFA181_static.DFA181_maxS);
    static final short[] DFA181_accept = DFA.unpackEncodedString(DFA181_static.DFA181_acceptS);
    static final short[] DFA181_special = DFA.unpackEncodedString(DFA181_static.DFA181_specialS);
    static final short[][] DFA181_transition;

    static {
        int numStates = DFA181_static.DFA181_transitionS.length;
        DFA181_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA181_transition[i] = DFA.unpackEncodedString(DFA181_static.DFA181_transitionS[i]);
        }
    }

    class DFA181 extends DFA {

        public DFA181(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 181;
            this.eot = DFA181_eot;
            this.eof = DFA181_eof;
            this.min = DFA181_min;
            this.max = DFA181_max;
            this.accept = DFA181_accept;
            this.special = DFA181_special;
            this.transition = DFA181_transition;
        }
        public String getDescription() {
            return "369:1: measurementtypes : ( molar | amount | mass | volume | logHydrogenActivity | equivalent | yield | percent );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA181_18 = input.LA(1);

                         
                        int index181_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index181_18);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA181_22 = input.LA(1);

                         
                        int index181_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index181_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 181, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA189_static {
    static final String DFA189_eotS =
        "\u0088\uffff";
    static final String DFA189_eofS =
        "\u0088\uffff";
    static final String DFA189_minS =
        "\1\46\34\uffff\1\0\20\uffff\3\0\2\uffff\1\0\3\uffff\6\0\13\uffff"+
        "\1\0\77\uffff";
    static final String DFA189_maxS =
        "\1\u00b4\34\uffff\1\0\20\uffff\3\0\2\uffff\1\0\3\uffff\6\0\13\uffff"+
        "\1\0\77\uffff";
    static final String DFA189_acceptS =
        "\1\uffff\1\16\1\uffff\1\1\47\uffff\1\2\100\uffff\1\4\1\5\1\6\1\7"+
        "\21\uffff\1\11\1\13\1\14\1\3\1\10\1\15\1\12";
    static final String DFA189_specialS =
        "\35\uffff\1\0\20\uffff\1\1\1\2\1\3\2\uffff\1\4\3\uffff\1\5\1\6\1"+
        "\7\1\10\1\11\1\12\13\uffff\1\13\77\uffff}>";
    static final String[] DFA189_transitionS = {
            "\1\53\1\110\1\73\1\74\2\53\1\uffff\1\72\1\53\20\157\2\53\1\uffff"+
            "\1\53\1\uffff\21\53\4\3\2\53\11\3\1\53\1\3\1\53\4\3\1\53\1\3"+
            "\1\53\1\3\1\53\5\3\1\53\1\3\1\53\3\3\1\53\1\3\1\35\1\53\3\3"+
            "\1\53\1\uffff\1\u0082\1\57\2\uffff\1\156\1\u0083\1\155\1\63"+
            "\1\1\1\53\1\uffff\1\56\1\1\1\u0081\1\60\3\53\1\157\1\67\1\70"+
            "\1\71\1\53\1\154\10\53\4\uffff\1\53\1\157\1\uffff\6\3\4\53",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA189_eot = DFA.unpackEncodedString(DFA189_static.DFA189_eotS);
    static final short[] DFA189_eof = DFA.unpackEncodedString(DFA189_static.DFA189_eofS);
    static final char[] DFA189_min = DFA.unpackEncodedStringToUnsignedChars(DFA189_static.DFA189_minS);
    static final char[] DFA189_max = DFA.unpackEncodedStringToUnsignedChars(DFA189_static.DFA189_maxS);
    static final short[] DFA189_accept = DFA.unpackEncodedString(DFA189_static.DFA189_acceptS);
    static final short[] DFA189_special = DFA.unpackEncodedString(DFA189_static.DFA189_specialS);
    static final short[][] DFA189_transition;

    static {
        int numStates = DFA189_static.DFA189_transitionS.length;
        DFA189_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA189_transition[i] = DFA.unpackEncodedString(DFA189_static.DFA189_transitionS[i]);
        }
    }

    class DFA189 extends DFA {

        public DFA189(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 189;
            this.eot = DFA189_eot;
            this.eof = DFA189_eof;
            this.min = DFA189_min;
            this.max = DFA189_max;
            this.accept = DFA189_accept;
            this.special = DFA189_special;
            this.transition = DFA189_transition;
        }
        public String getDescription() {
            return "()+ loopback of 388:27: ( verb | noun | bracketedContent | md | percentsign | dash | inAll | ratio | conjunction | adj | colon | stop | numeric )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA189_29 = input.LA(1);

                         
                        int index189_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred409_ChemicalChunker()) ) {s = 3;}

                        else if ( (synpred410_ChemicalChunker()) ) {s = 43;}

                         
                        input.seek(index189_29);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA189_46 = input.LA(1);

                         
                        int index189_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred410_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||synpred410_ChemicalChunker())) ) {s = 43;}

                        else if ( (synpred411_ChemicalChunker()) ) {s = 132;}

                         
                        input.seek(index189_46);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA189_47 = input.LA(1);

                         
                        int index189_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred410_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred411_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index189_47);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA189_48 = input.LA(1);

                         
                        int index189_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred410_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred411_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred421_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index189_48);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA189_51 = input.LA(1);

                         
                        int index189_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred410_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred411_ChemicalChunker()) ) {s = 132;}

                         
                        input.seek(index189_51);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA189_55 = input.LA(1);

                         
                        int index189_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred410_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred418_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index189_55);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA189_56 = input.LA(1);

                         
                        int index189_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred410_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred418_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index189_56);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA189_57 = input.LA(1);

                         
                        int index189_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred410_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred418_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index189_57);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA189_58 = input.LA(1);

                         
                        int index189_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred410_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred418_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index189_58);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA189_59 = input.LA(1);

                         
                        int index189_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred410_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred418_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index189_59);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA189_60 = input.LA(1);

                         
                        int index189_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred410_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred418_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index189_60);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA189_72 = input.LA(1);

                         
                        int index189_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred410_ChemicalChunker()) ) {s = 43;}

                        else if ( (synpred421_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index189_72);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 189, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA196_static {
    static final String DFA196_eotS =
        "\13\uffff";
    static final String DFA196_eofS =
        "\13\uffff";
    static final String DFA196_minS =
        "\1\46\1\45\1\uffff\1\46\3\45\3\0\1\uffff";
    static final String DFA196_maxS =
        "\1\u00b4\1\45\1\uffff\1\u00b4\3\45\3\0\1\uffff";
    static final String DFA196_acceptS =
        "\2\uffff\1\2\7\uffff\1\1";
    static final String DFA196_specialS =
        "\7\uffff\1\0\1\2\1\1\1\uffff}>";
    static final String[] DFA196_transitionS = {
            "\6\2\1\uffff\24\2\1\uffff\1\2\1\uffff\77\2\1\uffff\2\2\2\uffff"+
            "\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\1\21\2\4\uffff\2\2\1"+
            "\uffff\12\2",
            "\1\3",
            "",
            "\135\2\1\uffff\1\4\1\5\2\uffff\1\2\1\6\4\2\1\uffff\25\2\4\uffff"+
            "\2\2\1\uffff\12\2",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA196_eot = DFA.unpackEncodedString(DFA196_static.DFA196_eotS);
    static final short[] DFA196_eof = DFA.unpackEncodedString(DFA196_static.DFA196_eofS);
    static final char[] DFA196_min = DFA.unpackEncodedStringToUnsignedChars(DFA196_static.DFA196_minS);
    static final char[] DFA196_max = DFA.unpackEncodedStringToUnsignedChars(DFA196_static.DFA196_maxS);
    static final short[] DFA196_accept = DFA.unpackEncodedString(DFA196_static.DFA196_acceptS);
    static final short[] DFA196_special = DFA.unpackEncodedString(DFA196_static.DFA196_specialS);
    static final short[][] DFA196_transition;

    static {
        int numStates = DFA196_static.DFA196_transitionS.length;
        DFA196_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA196_transition[i] = DFA.unpackEncodedString(DFA196_static.DFA196_transitionS[i]);
        }
    }

    class DFA196 extends DFA {

        public DFA196(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 196;
            this.eot = DFA196_eot;
            this.eof = DFA196_eof;
            this.min = DFA196_min;
            this.max = DFA196_max;
            this.accept = DFA196_accept;
            this.special = DFA196_special;
            this.transition = DFA196_transition;
        }
        public String getDescription() {
            return "393:1: bracketedContentInMolContents1 : ( numberCompoundReference ( comma | colon | {...}? stop ) | bracketedContentInMolContentsAlwaysAllowed );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA196_7 = input.LA(1);

                         
                        int index196_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred429_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index196_7);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA196_9 = input.LA(1);

                         
                        int index196_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred429_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index196_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA196_8 = input.LA(1);

                         
                        int index196_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred429_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index196_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 196, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA198_static {
    static final String DFA198_eotS =
        "\u0089\uffff";
    static final String DFA198_eofS =
        "\u0089\uffff";
    static final String DFA198_minS =
        "\1\46\32\uffff\1\0\15\uffff\17\0\25\uffff\1\0\73\uffff";
    static final String DFA198_maxS =
        "\1\u00b4\32\uffff\1\0\15\uffff\17\0\25\uffff\1\0\73\uffff";
    static final String DFA198_acceptS =
        "\1\uffff\1\1\66\uffff\1\7\1\10\1\11\1\12\22\uffff\1\15\1\16\1\17"+
        "\60\uffff\1\2\1\4\1\5\1\6\1\20\1\3\1\14\1\13";
    static final String DFA198_specialS =
        "\33\uffff\1\0\15\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\25\uffff\1\20\73\uffff}>";
    static final String[] DFA198_transitionS = {
            "\1\120\1\67\1\61\1\62\2\120\1\uffff\1\60\1\54\20\73\2\120\1"+
            "\uffff\1\120\1\uffff\5\120\1\52\12\120\1\63\4\1\2\120\11\1\1"+
            "\120\1\1\1\120\4\1\1\120\1\1\1\120\1\1\1\120\5\1\1\120\1\1\1"+
            "\120\3\1\1\120\1\1\1\33\1\120\3\1\1\53\1\uffff\1\116\1\115\2"+
            "\uffff\1\72\1\117\1\71\1\65\1\uffff\1\66\1\uffff\1\64\2\uffff"+
            "\1\51\3\120\1\73\1\55\1\56\1\57\1\120\1\70\10\120\4\uffff\1"+
            "\120\1\73\1\uffff\6\1\4\120",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA198_eot = DFA.unpackEncodedString(DFA198_static.DFA198_eotS);
    static final short[] DFA198_eof = DFA.unpackEncodedString(DFA198_static.DFA198_eofS);
    static final char[] DFA198_min = DFA.unpackEncodedStringToUnsignedChars(DFA198_static.DFA198_minS);
    static final char[] DFA198_max = DFA.unpackEncodedStringToUnsignedChars(DFA198_static.DFA198_maxS);
    static final short[] DFA198_accept = DFA.unpackEncodedString(DFA198_static.DFA198_acceptS);
    static final short[] DFA198_special = DFA.unpackEncodedString(DFA198_static.DFA198_specialS);
    static final short[][] DFA198_transition;

    static {
        int numStates = DFA198_static.DFA198_transitionS.length;
        DFA198_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA198_transition[i] = DFA.unpackEncodedString(DFA198_static.DFA198_transitionS[i]);
        }
    }

    class DFA198 extends DFA {

        public DFA198(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 198;
            this.eot = DFA198_eot;
            this.eof = DFA198_eof;
            this.min = DFA198_min;
            this.max = DFA198_max;
            this.accept = DFA198_accept;
            this.special = DFA198_special;
            this.transition = DFA198_transition;
        }
        public String getDescription() {
            return "395:1: bracketedContentInMolContentsAlwaysAllowed : ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | ratio | cd | md | percentsign | dash | inAll | comma | adj | colon | stop | noun | bracketedContentInMol );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA198_27 = input.LA(1);

                         
                        int index198_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred431_ChemicalChunker()) ) {s = 1;}

                        else if ( (synpred445_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index198_27);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA198_41 = input.LA(1);

                         
                        int index198_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred432_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred434_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred435_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred436_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred445_ChemicalChunker()) ) {s = 80;}

                        else if ( (true) ) {s = 133;}

                         
                        input.seek(index198_41);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA198_42 = input.LA(1);

                         
                        int index198_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred432_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred445_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index198_42);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA198_43 = input.LA(1);

                         
                        int index198_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred432_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred445_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index198_43);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA198_44 = input.LA(1);

                         
                        int index198_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred433_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred445_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index198_44);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA198_45 = input.LA(1);

                         
                        int index198_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred433_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred442_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred445_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index198_45);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA198_46 = input.LA(1);

                         
                        int index198_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred433_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred442_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred445_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index198_46);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA198_47 = input.LA(1);

                         
                        int index198_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred433_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred442_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred445_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index198_47);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA198_48 = input.LA(1);

                         
                        int index198_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred433_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred442_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred445_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index198_48);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA198_49 = input.LA(1);

                         
                        int index198_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred433_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred442_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred445_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index198_49);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA198_50 = input.LA(1);

                         
                        int index198_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred433_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred442_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred445_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index198_50);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA198_51 = input.LA(1);

                         
                        int index198_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred433_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred445_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index198_51);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA198_52 = input.LA(1);

                         
                        int index198_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred433_ChemicalChunker()) ) {s = 134;}

                        else if ( ((synpred434_ChemicalChunker()||(synpred434_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 130;}

                        else if ( ((synpred445_ChemicalChunker()||(synpred445_ChemicalChunker()&&(notFollowedByBracketedYear(input))))) ) {s = 80;}

                        else if ( (true) ) {s = 133;}

                         
                        input.seek(index198_52);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA198_53 = input.LA(1);

                         
                        int index198_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred434_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred445_ChemicalChunker()) ) {s = 80;}

                        else if ( (true) ) {s = 133;}

                         
                        input.seek(index198_53);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA198_54 = input.LA(1);

                         
                        int index198_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred434_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred445_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index198_54);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA198_55 = input.LA(1);

                         
                        int index198_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred434_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred445_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index198_55);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA198_77 = input.LA(1);

                         
                        int index198_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred441_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred445_ChemicalChunker()) ) {s = 80;}

                        else if ( (true) ) {s = 133;}

                         
                        input.seek(index198_77);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 198, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA203_static {
    static final String DFA203_eotS =
        "\u0092\uffff";
    static final String DFA203_eofS =
        "\1\6\u0091\uffff";
    static final String DFA203_minS =
        "\1\46\5\0\u008c\uffff";
    static final String DFA203_maxS =
        "\1\u00b4\5\0\u008c\uffff";
    static final String DFA203_acceptS =
        "\6\uffff\1\2\u008a\uffff\1\1";
    static final String DFA203_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\u008c\uffff}>";
    static final String[] DFA203_transitionS = {
            "\1\6\1\5\143\6\1\1\1\6\1\3\1\6\1\4\2\6\1\2\42\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA203_eot = DFA.unpackEncodedString(DFA203_static.DFA203_eotS);
    static final short[] DFA203_eof = DFA.unpackEncodedString(DFA203_static.DFA203_eofS);
    static final char[] DFA203_min = DFA.unpackEncodedStringToUnsignedChars(DFA203_static.DFA203_minS);
    static final char[] DFA203_max = DFA.unpackEncodedStringToUnsignedChars(DFA203_static.DFA203_maxS);
    static final short[] DFA203_accept = DFA.unpackEncodedString(DFA203_static.DFA203_acceptS);
    static final short[] DFA203_special = DFA.unpackEncodedString(DFA203_static.DFA203_specialS);
    static final short[][] DFA203_transition;

    static {
        int numStates = DFA203_static.DFA203_transitionS.length;
        DFA203_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA203_transition[i] = DFA.unpackEncodedString(DFA203_static.DFA203_transitionS[i]);
        }
    }

    class DFA203 extends DFA {

        public DFA203(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 203;
            this.eot = DFA203_eot;
            this.eof = DFA203_eof;
            this.min = DFA203_min;
            this.max = DFA203_max;
            this.accept = DFA203_accept;
            this.special = DFA203_special;
            this.transition = DFA203_transition;
        }
        public String getDescription() {
            return "402:31: ( allIdentifierTypes )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA203_1 = input.LA(1);

                         
                        int index203_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred453_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index203_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA203_2 = input.LA(1);

                         
                        int index203_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred453_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index203_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA203_3 = input.LA(1);

                         
                        int index203_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred453_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index203_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA203_4 = input.LA(1);

                         
                        int index203_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred453_ChemicalChunker()&&(notFollowedByBracketedYear(input)))||synpred453_ChemicalChunker())) ) {s = 145;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index203_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA203_5 = input.LA(1);

                         
                        int index203_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred453_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index203_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 203, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA206_static {
    static final String DFA206_eotS =
        "\u0093\uffff";
    static final String DFA206_eofS =
        "\1\1\u0092\uffff";
    static final String DFA206_minS =
        "\1\46\2\uffff\1\0\13\uffff\1\0\10\uffff\1\0\16\uffff\1\0\41\uffff"+
        "\1\0\1\uffff\1\0\13\uffff\1\0\73\uffff";
    static final String DFA206_maxS =
        "\1\u00b4\2\uffff\1\0\13\uffff\1\0\10\uffff\1\0\16\uffff\1\0\41\uffff"+
        "\1\0\1\uffff\1\0\13\uffff\1\0\73\uffff";
    static final String DFA206_acceptS =
        "\1\uffff\1\3\u008f\uffff\1\1\1\2";
    static final String DFA206_specialS =
        "\3\uffff\1\0\13\uffff\1\1\10\uffff\1\2\16\uffff\1\3\41\uffff\1\4"+
        "\1\uffff\1\5\13\uffff\1\6\73\uffff}>";
    static final String[] DFA206_transitionS = {
            "\22\1\1\111\2\1\1\127\20\1\1\47\6\1\1\30\60\1\1\113\1\3\11\1"+
            "\1\17\45\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA206_eot = DFA.unpackEncodedString(DFA206_static.DFA206_eotS);
    static final short[] DFA206_eof = DFA.unpackEncodedString(DFA206_static.DFA206_eofS);
    static final char[] DFA206_min = DFA.unpackEncodedStringToUnsignedChars(DFA206_static.DFA206_minS);
    static final char[] DFA206_max = DFA.unpackEncodedStringToUnsignedChars(DFA206_static.DFA206_maxS);
    static final short[] DFA206_accept = DFA.unpackEncodedString(DFA206_static.DFA206_acceptS);
    static final short[] DFA206_special = DFA.unpackEncodedString(DFA206_static.DFA206_specialS);
    static final short[][] DFA206_transition;

    static {
        int numStates = DFA206_static.DFA206_transitionS.length;
        DFA206_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA206_transition[i] = DFA.unpackEncodedString(DFA206_static.DFA206_transitionS[i]);
        }
    }

    class DFA206 extends DFA {

        public DFA206(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 206;
            this.eot = DFA206_eot;
            this.eof = DFA206_eof;
            this.min = DFA206_min;
            this.max = DFA206_max;
            this.accept = DFA206_accept;
            this.special = DFA206_special;
            this.transition = DFA206_transition;
        }
        public String getDescription() {
            return "()* loopback of 402:83: ( ( comma | colon | inof | infrom )? submethod | lrb submethod rrb )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA206_3 = input.LA(1);

                         
                        int index206_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred459_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index206_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA206_15 = input.LA(1);

                         
                        int index206_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred460_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index206_15);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA206_24 = input.LA(1);

                         
                        int index206_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred459_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index206_24);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA206_39 = input.LA(1);

                         
                        int index206_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred459_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index206_39);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA206_73 = input.LA(1);

                         
                        int index206_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred459_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index206_73);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA206_75 = input.LA(1);

                         
                        int index206_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred459_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index206_75);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA206_87 = input.LA(1);

                         
                        int index206_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred459_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index206_87);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 206, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA231_static {
    static final String DFA231_eotS =
        "\110\uffff";
    static final String DFA231_eofS =
        "\110\uffff";
    static final String DFA231_minS =
        "\1\46\17\uffff\1\0\67\uffff";
    static final String DFA231_maxS =
        "\1\u00b4\17\uffff\1\0\67\uffff";
    static final String DFA231_acceptS =
        "\1\uffff\1\2\105\uffff\1\1";
    static final String DFA231_specialS =
        "\20\uffff\1\0\67\uffff}>";
    static final String[] DFA231_transitionS = {
            "\6\1\1\uffff\2\1\20\uffff\2\1\1\uffff\1\1\1\uffff\21\1\4\uffff"+
            "\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff"+
            "\1\1\2\uffff\1\20\5\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\107\4\1\1\uffff\4\1\1\uffff\15\1\10\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA231_eot = DFA.unpackEncodedString(DFA231_static.DFA231_eotS);
    static final short[] DFA231_eof = DFA.unpackEncodedString(DFA231_static.DFA231_eofS);
    static final char[] DFA231_min = DFA.unpackEncodedStringToUnsignedChars(DFA231_static.DFA231_minS);
    static final char[] DFA231_max = DFA.unpackEncodedStringToUnsignedChars(DFA231_static.DFA231_maxS);
    static final short[] DFA231_accept = DFA.unpackEncodedString(DFA231_static.DFA231_acceptS);
    static final short[] DFA231_special = DFA.unpackEncodedString(DFA231_static.DFA231_specialS);
    static final short[][] DFA231_transition;

    static {
        int numStates = DFA231_static.DFA231_transitionS.length;
        DFA231_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA231_transition[i] = DFA.unpackEncodedString(DFA231_static.DFA231_transitionS[i]);
        }
    }

    class DFA231 extends DFA {

        public DFA231(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 231;
            this.eot = DFA231_eot;
            this.eof = DFA231_eof;
            this.min = DFA231_min;
            this.max = DFA231_max;
            this.accept = DFA231_accept;
            this.special = DFA231_special;
            this.transition = DFA231_transition;
        }
        public String getDescription() {
            return "()* loopback of 198:35: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA231_16 = input.LA(1);

                         
                        int index231_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index231_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 231, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA238_static {
    static final String DFA238_eotS =
        "\27\uffff";
    static final String DFA238_eofS =
        "\27\uffff";
    static final String DFA238_minS =
        "\1\50\15\uffff\1\0\10\uffff";
    static final String DFA238_maxS =
        "\1\u009c\15\uffff\1\0\10\uffff";
    static final String DFA238_acceptS =
        "\1\uffff\1\2\24\uffff\1\1";
    static final String DFA238_specialS =
        "\16\uffff\1\0\10\uffff}>";
    static final String[] DFA238_transitionS = {
            "\2\1\3\uffff\2\1\20\uffff\1\1\7\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\6\uffff\1\1\4\uffff\1\1\12\uffff\1\1\35\uffff\1\1\2\uffff"+
            "\1\16\5\uffff\1\1\3\uffff\1\1\1\uffff\1\26\2\1\3\uffff\3\1\2"+
            "\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA238_eot = DFA.unpackEncodedString(DFA238_static.DFA238_eotS);
    static final short[] DFA238_eof = DFA.unpackEncodedString(DFA238_static.DFA238_eofS);
    static final char[] DFA238_min = DFA.unpackEncodedStringToUnsignedChars(DFA238_static.DFA238_minS);
    static final char[] DFA238_max = DFA.unpackEncodedStringToUnsignedChars(DFA238_static.DFA238_maxS);
    static final short[] DFA238_accept = DFA.unpackEncodedString(DFA238_static.DFA238_acceptS);
    static final short[] DFA238_special = DFA.unpackEncodedString(DFA238_static.DFA238_specialS);
    static final short[][] DFA238_transition;

    static {
        int numStates = DFA238_static.DFA238_transitionS.length;
        DFA238_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA238_transition[i] = DFA.unpackEncodedString(DFA238_static.DFA238_transitionS[i]);
        }
    }

    class DFA238 extends DFA {

        public DFA238(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 238;
            this.eot = DFA238_eot;
            this.eof = DFA238_eof;
            this.min = DFA238_min;
            this.max = DFA238_max;
            this.accept = DFA238_accept;
            this.special = DFA238_special;
            this.transition = DFA238_transition;
        }
        public String getDescription() {
            return "()* loopback of 272:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA238_14 = input.LA(1);

                         
                        int index238_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index238_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 238, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    static class FOLLOW_sentence_in_document202_static {
    public static final BitSet FOLLOW_sentence_in_document202 = new BitSet(new long[]{0xFFFFFFC000000002L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFDFFL});

    }static class FOLLOW_procedureNounPhrase_in_sentence222_static {
    public static final BitSet FOLLOW_procedureNounPhrase_in_sentence222 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});

    }static class FOLLOW_sentenceStructure_in_sentence227_static {
    public static final BitSet FOLLOW_sentenceStructure_in_sentence227 = new BitSet(new long[]{0xFFFFFFC000000002L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});

    }static class FOLLOW_unmatchedPhrase_in_sentence229_static {
    public static final BitSet FOLLOW_unmatchedPhrase_in_sentence229 = new BitSet(new long[]{0xFFFFFFC000000002L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});

    }static class FOLLOW_stop_in_sentence234_static {
    public static final BitSet FOLLOW_stop_in_sentence234 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});

    }static class FOLLOW_nounphrase_in_sentenceStructure244_static {
    public static final BitSet FOLLOW_nounphrase_in_sentenceStructure244 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEE8BFL});

    }static class FOLLOW_verbphrase_in_sentenceStructure246_static {
    public static final BitSet FOLLOW_verbphrase_in_sentenceStructure246 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEE8BFL});

    }static class FOLLOW_prepphrase_in_sentenceStructure248_static {
    public static final BitSet FOLLOW_prepphrase_in_sentenceStructure248 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEE8BFL});

    }static class FOLLOW_prepphraseAfter_in_sentenceStructure250_static {
    public static final BitSet FOLLOW_prepphraseAfter_in_sentenceStructure250 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEE8BFL});

    }static class FOLLOW_advAdj_in_sentenceStructure255_static {
    public static final BitSet FOLLOW_advAdj_in_sentenceStructure255 = new BitSet(new long[]{0x0000230000000002L,0x0000000000000000L,0x000000F003820038L});

    }static class FOLLOW_colon_in_sentenceStructure257_static {
    public static final BitSet FOLLOW_colon_in_sentenceStructure257 = new BitSet(new long[]{0x0000230000000002L,0x0000000000000000L,0x000000F003820038L});

    }static class FOLLOW_conjunction_in_sentenceStructure262_static {
    public static final BitSet FOLLOW_conjunction_in_sentenceStructure262 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020028L});

    }static class FOLLOW_rbconj_in_sentenceStructure264_static {
    public static final BitSet FOLLOW_rbconj_in_sentenceStructure264 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020028L});

    }static class FOLLOW_comma_in_sentenceStructure266_static {
    public static final BitSet FOLLOW_comma_in_sentenceStructure266 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020028L});

    }static class FOLLOW_unmatchedToken_in_unmatchedPhrase278_static {
    public static final BitSet FOLLOW_unmatchedToken_in_unmatchedPhrase278 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_unmatchedToken297_static {
    public static final BitSet FOLLOW_numeric_in_unmatchedToken297 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_unmatchedToken299_static {
    public static final BitSet FOLLOW_advAdj_in_unmatchedToken299 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_tmunicode_in_unmatchedToken301_static {
    public static final BitSet FOLLOW_tmunicode_in_unmatchedToken301 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdunicode_in_unmatchedToken303_static {
    public static final BitSet FOLLOW_cdunicode_in_unmatchedToken303 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjcomp_in_unmatchedToken305_static {
    public static final BitSet FOLLOW_jjcomp_in_unmatchedToken305 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_unmatchedToken307_static {
    public static final BitSet FOLLOW_inAll_in_unmatchedToken307 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_unmatchedToken311_static {
    public static final BitSet FOLLOW_nnexample_in_unmatchedToken311 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_unmatchedToken313_static {
    public static final BitSet FOLLOW_nnstate_in_unmatchedToken313 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_unmatchedToken315_static {
    public static final BitSet FOLLOW_nntime_in_unmatchedToken315 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmass_in_unmatchedToken317_static {
    public static final BitSet FOLLOW_nnmass_in_unmatchedToken317 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmolar_in_unmatchedToken319_static {
    public static final BitSet FOLLOW_nnmolar_in_unmatchedToken319 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnamount_in_unmatchedToken321_static {
    public static final BitSet FOLLOW_nnamount_in_unmatchedToken321 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_unmatchedToken323_static {
    public static final BitSet FOLLOW_nnatmosphere_in_unmatchedToken323 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nneq_in_unmatchedToken325_static {
    public static final BitSet FOLLOW_nneq_in_unmatchedToken325 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvol_in_unmatchedToken327_static {
    public static final BitSet FOLLOW_nnvol_in_unmatchedToken327 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_unmatchedToken329_static {
    public static final BitSet FOLLOW_nnchementity_in_unmatchedToken329 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_unmatchedToken331_static {
    public static final BitSet FOLLOW_nntemp_in_unmatchedToken331 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_unmatchedToken333_static {
    public static final BitSet FOLLOW_nnph_in_unmatchedToken333 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnflash_in_unmatchedToken335_static {
    public static final BitSet FOLLOW_nnflash_in_unmatchedToken335 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_unmatchedToken337_static {
    public static final BitSet FOLLOW_nngeneral_in_unmatchedToken337 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmethod_in_unmatchedToken339_static {
    public static final BitSet FOLLOW_nnmethod_in_unmatchedToken339 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_unmatchedToken341_static {
    public static final BitSet FOLLOW_nnpressure_in_unmatchedToken341 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncolumn_in_unmatchedToken343_static {
    public static final BitSet FOLLOW_nncolumn_in_unmatchedToken343 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchromatography_in_unmatchedToken345_static {
    public static final BitSet FOLLOW_nnchromatography_in_unmatchedToken345 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvacuum_in_unmatchedToken347_static {
    public static final BitSet FOLLOW_nnvacuum_in_unmatchedToken347 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncycle_in_unmatchedToken349_static {
    public static final BitSet FOLLOW_nncycle_in_unmatchedToken349 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntimes_in_unmatchedToken351_static {
    public static final BitSet FOLLOW_nntimes_in_unmatchedToken351 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_unmatchedToken355_static {
    public static final BitSet FOLLOW_oscarcm_in_unmatchedToken355 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_unmatchedToken357_static {
    public static final BitSet FOLLOW_oscarase_in_unmatchedToken357 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_unmatchedToken359_static {
    public static final BitSet FOLLOW_verb_in_unmatchedToken359 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_unmatchedToken361_static {
    public static final BitSet FOLLOW_nnadd_in_unmatchedToken361 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_unmatchedToken363_static {
    public static final BitSet FOLLOW_nnmixture_in_unmatchedToken363 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnapparatus_in_unmatchedToken365_static {
    public static final BitSet FOLLOW_nnapparatus_in_unmatchedToken365 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnconcentrate_in_unmatchedToken367_static {
    public static final BitSet FOLLOW_nnconcentrate_in_unmatchedToken367 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nndry_in_unmatchedToken369_static {
    public static final BitSet FOLLOW_nndry_in_unmatchedToken369 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnextract_in_unmatchedToken371_static {
    public static final BitSet FOLLOW_nnextract_in_unmatchedToken371 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnfilter_in_unmatchedToken373_static {
    public static final BitSet FOLLOW_nnfilter_in_unmatchedToken373 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnprecipitate_in_unmatchedToken375_static {
    public static final BitSet FOLLOW_nnprecipitate_in_unmatchedToken375 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpurify_in_unmatchedToken377_static {
    public static final BitSet FOLLOW_nnpurify_in_unmatchedToken377 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnremove_in_unmatchedToken379_static {
    public static final BitSet FOLLOW_nnremove_in_unmatchedToken379 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnsynthesize_in_unmatchedToken381_static {
    public static final BitSet FOLLOW_nnsynthesize_in_unmatchedToken381 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_unmatchedToken383_static {
    public static final BitSet FOLLOW_nnyield_in_unmatchedToken383 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_unmatchedToken385_static {
    public static final BitSet FOLLOW_colon_in_unmatchedToken385 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apost_in_unmatchedToken387_static {
    public static final BitSet FOLLOW_apost_in_unmatchedToken387 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_unmatchedToken389_static {
    public static final BitSet FOLLOW_neg_in_unmatchedToken389 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_unmatchedToken391_static {
    public static final BitSet FOLLOW_dash_in_unmatchedToken391 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percentsign_in_unmatchedToken393_static {
    public static final BitSet FOLLOW_percentsign_in_unmatchedToken393 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_unmatchedToken395_static {
    public static final BitSet FOLLOW_lsqb_in_unmatchedToken395 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rsqb_in_unmatchedToken397_static {
    public static final BitSet FOLLOW_rsqb_in_unmatchedToken397 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_unmatchedToken399_static {
    public static final BitSet FOLLOW_lrb_in_unmatchedToken399 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rrb_in_unmatchedToken401_static {
    public static final BitSet FOLLOW_rrb_in_unmatchedToken401 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_unmatchedToken405_static {
    public static final BitSet FOLLOW_cc_in_unmatchedToken405 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_unmatchedToken407_static {
    public static final BitSet FOLLOW_dt_in_unmatchedToken407 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dtTHE_in_unmatchedToken409_static {
    public static final BitSet FOLLOW_dtTHE_in_unmatchedToken409 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_unmatchedToken411_static {
    public static final BitSet FOLLOW_fw_in_unmatchedToken411 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_unmatchedToken413_static {
    public static final BitSet FOLLOW_md_in_unmatchedToken413 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_unmatchedToken415_static {
    public static final BitSet FOLLOW_nn_in_unmatchedToken415 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nns_in_unmatchedToken417_static {
    public static final BitSet FOLLOW_nns_in_unmatchedToken417 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_unmatchedToken419_static {
    public static final BitSet FOLLOW_nnp_in_unmatchedToken419 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_in_unmatchedToken421_static {
    public static final BitSet FOLLOW_prp_in_unmatchedToken421 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_poss_in_unmatchedToken423_static {
    public static final BitSet FOLLOW_prp_poss_in_unmatchedToken423 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbconj_in_unmatchedToken425_static {
    public static final BitSet FOLLOW_rbconj_in_unmatchedToken425 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_unmatchedToken427_static {
    public static final BitSet FOLLOW_sym_in_unmatchedToken427 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_uh_in_unmatchedToken429_static {
    public static final BitSet FOLLOW_uh_in_unmatchedToken429 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_clause_in_unmatchedToken431_static {
    public static final BitSet FOLLOW_clause_in_unmatchedToken431 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_unmatchedToken433_static {
    public static final BitSet FOLLOW_comma_in_unmatchedToken433 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ls_in_unmatchedToken435_static {
    public static final BitSet FOLLOW_ls_in_unmatchedToken435 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnps_in_unmatchedToken437_static {
    public static final BitSet FOLLOW_nnps_in_unmatchedToken437 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pos_in_unmatchedToken439_static {
    public static final BitSet FOLLOW_pos_in_unmatchedToken439 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnidentifier_in_unmatchedToken441_static {
    public static final BitSet FOLLOW_nnidentifier_in_unmatchedToken441 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_headingProcedure_in_procedureNounPhrase454_static {
    public static final BitSet FOLLOW_headingProcedure_in_procedureNounPhrase454 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_headingProcedureRequiringTerminator_in_headingProcedure473_static {
    public static final BitSet FOLLOW_headingProcedureRequiringTerminator_in_headingProcedure473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010210L});

    }static class FOLLOW_headingProcedureTerminators_in_headingProcedure475_static {
    public static final BitSet FOLLOW_headingProcedureTerminators_in_headingProcedure475 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedHeadingProcedure_in_headingProcedure479_static {
    public static final BitSet FOLLOW_bracketedHeadingProcedure_in_headingProcedure479 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010210L});

    }static class FOLLOW_headingProcedureTerminators_in_headingProcedure481_static {
    public static final BitSet FOLLOW_headingProcedureTerminators_in_headingProcedure481 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnidentifier_in_headingProcedureRequiringTerminator492_static {
    public static final BitSet FOLLOW_nnidentifier_in_headingProcedureRequiringTerminator492 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_headingProcedureRequiringTerminator494_static {
    public static final BitSet FOLLOW_numeric_in_headingProcedureRequiringTerminator494 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedIdentifier_in_bracketedHeadingProcedure517_static {
    public static final BitSet FOLLOW_bracketedIdentifier_in_bracketedHeadingProcedure517 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedNumeric_in_bracketedHeadingProcedure521_static {
    public static final BitSet FOLLOW_bracketedNumeric_in_bracketedHeadingProcedure521 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_bracketedHeadingProcedure525_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_bracketedHeadingProcedure525 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rrb_in_headingProcedureTerminators554_static {
    public static final BitSet FOLLOW_rrb_in_headingProcedureTerminators554 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_headingProcedureTerminators556_static {
    public static final BitSet FOLLOW_stop_in_headingProcedureTerminators556 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_headingProcedureTerminators558_static {
    public static final BitSet FOLLOW_colon_in_headingProcedureTerminators558 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure_in_nounphrase567_static {
    public static final BitSet FOLLOW_nounphraseStructure_in_nounphrase567 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure1_in_nounphraseStructure586_static {
    public static final BitSet FOLLOW_nounphraseStructure1_in_nounphraseStructure586 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure2_in_nounphraseStructure588_static {
    public static final BitSet FOLLOW_nounphraseStructure2_in_nounphraseStructure588 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_multiApparatus_in_nounphraseStructure1597_static {
    public static final BitSet FOLLOW_multiApparatus_in_nounphraseStructure1597 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dtTHE_in_nounphraseStructure2614_static {
    public static final BitSet FOLLOW_dtTHE_in_nounphraseStructure2614 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_dt_in_nounphraseStructure2617_static {
    public static final BitSet FOLLOW_dt_in_nounphraseStructure2617 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_nounphraseContent_in_nounphraseStructure2620_static {
    public static final BitSet FOLLOW_nounphraseContent_in_nounphraseStructure2620 = new BitSet(new long[]{0x81046FC000000002L,0x68A0A850061FFFF5L,0x001E01FFF7BEE824L});

    }static class FOLLOW_conjunction_in_nounphraseStructure2624_static {
    public static final BitSet FOLLOW_conjunction_in_nounphraseStructure2624 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BEE824L});

    }static class FOLLOW_nounphraseContent_in_nounphraseStructure2627_static {
    public static final BitSet FOLLOW_nounphraseContent_in_nounphraseStructure2627 = new BitSet(new long[]{0x81046FC000000002L,0x68A0A850061FFFF5L,0x001E01FFF7BEE824L});

    }static class FOLLOW_prepphraseOf_in_nounphraseStructure2634_static {
    public static final BitSet FOLLOW_prepphraseOf_in_nounphraseStructure2634 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_nounphraseStructure2637_static {
    public static final BitSet FOLLOW_prepphraseIN_in_nounphraseStructure2637 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_nounphraseContent649_static {
    public static final BitSet FOLLOW_advAdj_in_nounphraseContent649 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_dissolvePhrase_in_nounphraseContent654_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseContent654 = new BitSet(new long[]{0x80006FC000000002L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_ratioOrBracketedRatio_in_nounphraseContent656_static {
    public static final BitSet FOLLOW_ratioOrBracketedRatio_in_nounphraseContent656 = new BitSet(new long[]{0x80006FC000000002L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_noun_in_nounphraseContent658_static {
    public static final BitSet FOLLOW_noun_in_nounphraseContent658 = new BitSet(new long[]{0x80006FC000000002L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_numeric_in_nounphraseContent660_static {
    public static final BitSet FOLLOW_numeric_in_nounphraseContent660 = new BitSet(new long[]{0x80006FC000000002L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_bracketedContent_in_nounphraseContent662_static {
    public static final BitSet FOLLOW_bracketedContent_in_nounphraseContent662 = new BitSet(new long[]{0x80006FC000000002L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_dissolveStructure_in_dissolvePhrase674_static {
    public static final BitSet FOLLOW_dissolveStructure_in_dissolvePhrase674 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_dissolvePhrase676_static {
    public static final BitSet FOLLOW_lrb_in_dissolvePhrase676 = new BitSet(new long[]{0x8000678000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_dissolveStructure_in_dissolvePhrase678_static {
    public static final BitSet FOLLOW_dissolveStructure_in_dissolvePhrase678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_dissolvePhrase680_static {
    public static final BitSet FOLLOW_rrb_in_dissolvePhrase680 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_dissolveStructure705_static {
    public static final BitSet FOLLOW_adj_in_dissolveStructure705 = new BitSet(new long[]{0x8000678000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_nnp_in_dissolveStructure709_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nnchementity_in_dissolveStructure711_static {
    public static final BitSet FOLLOW_nnchementity_in_dissolveStructure711 = new BitSet(new long[]{0x0004000000000000L});

    }static class FOLLOW_nnp_in_dissolveStructure714_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure714 = new BitSet(new long[]{0x8000678000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_molecule_in_dissolveStructure717_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure717 = new BitSet(new long[]{0x0004000000000000L});

    }static class FOLLOW_unnamedmolecule_in_dissolveStructure719_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure719 = new BitSet(new long[]{0x0004000000000000L});

    }static class FOLLOW_inMolecule_in_dissolveStructure723_static {
    public static final BitSet FOLLOW_inMolecule_in_dissolveStructure723 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020020L});

    }static class FOLLOW_conjunction_in_dissolveStructure726_static {
    public static final BitSet FOLLOW_conjunction_in_dissolveStructure726 = new BitSet(new long[]{0x8000638000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_molecule_in_dissolveStructure728_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure728 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020020L});

    }static class FOLLOW_inin_in_inMolecule740_static {
    public static final BitSet FOLLOW_inin_in_inMolecule740 = new BitSet(new long[]{0x8000678000000000L,0x0000000004180290L,0x000000004384E824L});

    }static class FOLLOW_dtTHE_in_inMolecule742_static {
    public static final BitSet FOLLOW_dtTHE_in_inMolecule742 = new BitSet(new long[]{0x8000678000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_adj_in_inMolecule745_static {
    public static final BitSet FOLLOW_adj_in_inMolecule745 = new BitSet(new long[]{0x8000678000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_nnp_in_inMolecule748_static {
    public static final BitSet FOLLOW_nnp_in_inMolecule748 = new BitSet(new long[]{0x8000678000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_molecule_in_inMolecule752_static {
    public static final BitSet FOLLOW_molecule_in_inMolecule752 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_inMolecule754_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_inMolecule754 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verbphraseStructure_in_verbphrase764_static {
    public static final BitSet FOLLOW_verbphraseStructure_in_verbphrase764 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_verbphraseStructure783_static {
    public static final BitSet FOLLOW_dt_in_verbphraseStructure783 = new BitSet(new long[]{0x7FFFA30000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_to_in_verbphraseStructure786_static {
    public static final BitSet FOLLOW_to_in_verbphraseStructure786 = new BitSet(new long[]{0x7FFFA30000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_inAll_in_verbphraseStructure789_static {
    public static final BitSet FOLLOW_inAll_in_verbphraseStructure789 = new BitSet(new long[]{0x7FFFA30000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_inafter_in_verbphraseStructure792_static {
    public static final BitSet FOLLOW_inafter_in_verbphraseStructure792 = new BitSet(new long[]{0x7FFFA30000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_md_in_verbphraseStructure795_static {
    public static final BitSet FOLLOW_md_in_verbphraseStructure795 = new BitSet(new long[]{0x7FFFA30000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_rbconj_in_verbphraseStructure798_static {
    public static final BitSet FOLLOW_rbconj_in_verbphraseStructure798 = new BitSet(new long[]{0x7FFFA30000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_adv_in_verbphraseStructure801_static {
    public static final BitSet FOLLOW_adv_in_verbphraseStructure801 = new BitSet(new long[]{0x7FFFA30000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_adj_in_verbphraseStructure804_static {
    public static final BitSet FOLLOW_adj_in_verbphraseStructure804 = new BitSet(new long[]{0x7FFFA30000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_actionVerb_in_verbphraseStructure808_static {
    public static final BitSet FOLLOW_actionVerb_in_verbphraseStructure808 = new BitSet(new long[]{0x7FFFA30000000002L,0x0000000000000101L,0x000002F00BCE00A0L});

    }static class FOLLOW_md_in_verbphraseStructure810_static {
    public static final BitSet FOLLOW_md_in_verbphraseStructure810 = new BitSet(new long[]{0x7FFFA30000000002L,0x0000000000000101L,0x000002F00BCE00A0L});

    }static class FOLLOW_adv_in_verbphraseStructure813_static {
    public static final BitSet FOLLOW_adv_in_verbphraseStructure813 = new BitSet(new long[]{0x7FFFA30000000002L,0x0000000000000101L,0x000002F003CE00A0L});

    }static class FOLLOW_adj_in_verbphraseStructure816_static {
    public static final BitSet FOLLOW_adj_in_verbphraseStructure816 = new BitSet(new long[]{0x7FFFA30000000002L,0x0000000000000101L,0x000002F003CE00A0L});

    }static class FOLLOW_neg_in_verbphraseStructure819_static {
    public static final BitSet FOLLOW_neg_in_verbphraseStructure819 = new BitSet(new long[]{0x7FFFA30000000002L,0x0000000000000101L,0x000002F003CE00A0L});

    }static class FOLLOW_otherVerb_in_verbphraseStructure825_static {
    public static final BitSet FOLLOW_otherVerb_in_verbphraseStructure825 = new BitSet(new long[]{0x7FFFA30000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_md_in_verbphraseStructure827_static {
    public static final BitSet FOLLOW_md_in_verbphraseStructure827 = new BitSet(new long[]{0x7FFFA30000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_adv_in_verbphraseStructure830_static {
    public static final BitSet FOLLOW_adv_in_verbphraseStructure830 = new BitSet(new long[]{0x7FFFA30000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_adj_in_verbphraseStructure833_static {
    public static final BitSet FOLLOW_adj_in_verbphraseStructure833 = new BitSet(new long[]{0x7FFFA30000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_neg_in_verbphraseStructure836_static {
    public static final BitSet FOLLOW_neg_in_verbphraseStructure836 = new BitSet(new long[]{0x7FFFA30000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_otherVerbStructure_in_verbphraseStructure839_static {
    public static final BitSet FOLLOW_otherVerbStructure_in_verbphraseStructure839 = new BitSet(new long[]{0x7FFFA30000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_actionVerbStructure_in_verbphraseStructure842_static {
    public static final BitSet FOLLOW_actionVerbStructure_in_verbphraseStructure842 = new BitSet(new long[]{0x7FFFA30000000002L,0x0000000000000101L,0x000002F003CE00A0L});

    }static class FOLLOW_inoff_in_verbphraseStructure846_static {
    public static final BitSet FOLLOW_inoff_in_verbphraseStructure846 = new BitSet(new long[]{0x7FFFA30000000002L,0x0000000000000101L,0x000002F003CE00A0L});

    }static class FOLLOW_cc_in_verbphraseStructure850_static {
    public static final BitSet FOLLOW_cc_in_verbphraseStructure850 = new BitSet(new long[]{0x7FFFA30000000000L,0x0000000000000101L,0x000002F003CC00A0L});

    }static class FOLLOW_comma_in_verbphraseStructure853_static {
    public static final BitSet FOLLOW_comma_in_verbphraseStructure853 = new BitSet(new long[]{0x7FFFA30000000000L,0x0000000000000101L,0x000002F003CC0080L});

    }static class FOLLOW_prepphrase_in_verbphraseStructure856_static {
    public static final BitSet FOLLOW_prepphrase_in_verbphraseStructure856 = new BitSet(new long[]{0x7FFFA30000000002L,0x0000000000000101L,0x000002F003CE00A0L});

    }static class FOLLOW_md_in_actionVerbStructure866_static {
    public static final BitSet FOLLOW_md_in_actionVerbStructure866 = new BitSet(new long[]{0x0000230000000000L,0xB75B57ADF9800000L,0x000000F00B80000BL});

    }static class FOLLOW_rbconj_in_actionVerbStructure869_static {
    public static final BitSet FOLLOW_rbconj_in_actionVerbStructure869 = new BitSet(new long[]{0x0000230000000000L,0xB75B57ADF9800000L,0x000000F003800003L});

    }static class FOLLOW_adv_in_actionVerbStructure872_static {
    public static final BitSet FOLLOW_adv_in_actionVerbStructure872 = new BitSet(new long[]{0x0000230000000000L,0xB75B57ADF9800000L,0x000000F003800003L});

    }static class FOLLOW_adj_in_actionVerbStructure875_static {
    public static final BitSet FOLLOW_adj_in_actionVerbStructure875 = new BitSet(new long[]{0x0000000000000000L,0xB75B57ADF9800000L,0x0000000000000003L});

    }static class FOLLOW_actionVerb_in_actionVerbStructure878_static {
    public static final BitSet FOLLOW_actionVerb_in_actionVerbStructure878 = new BitSet(new long[]{0x0000230000000002L,0x0000000000000000L,0x000000F00B800080L});

    }static class FOLLOW_md_in_actionVerbStructure880_static {
    public static final BitSet FOLLOW_md_in_actionVerbStructure880 = new BitSet(new long[]{0x0000230000000002L,0x0000000000000000L,0x000000F00B800080L});

    }static class FOLLOW_adv_in_actionVerbStructure883_static {
    public static final BitSet FOLLOW_adv_in_actionVerbStructure883 = new BitSet(new long[]{0x0000230000000002L,0x0000000000000000L,0x000000F003800080L});

    }static class FOLLOW_adj_in_actionVerbStructure886_static {
    public static final BitSet FOLLOW_adj_in_actionVerbStructure886 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_neg_in_actionVerbStructure889_static {
    public static final BitSet FOLLOW_neg_in_actionVerbStructure889 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_otherVerbStructure897_static {
    public static final BitSet FOLLOW_md_in_otherVerbStructure897 = new BitSet(new long[]{0x7FFFA30000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_rbconj_in_otherVerbStructure900_static {
    public static final BitSet FOLLOW_rbconj_in_otherVerbStructure900 = new BitSet(new long[]{0x7FFFA30000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_adv_in_otherVerbStructure903_static {
    public static final BitSet FOLLOW_adv_in_otherVerbStructure903 = new BitSet(new long[]{0x7FFFA30000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_adj_in_otherVerbStructure906_static {
    public static final BitSet FOLLOW_adj_in_otherVerbStructure906 = new BitSet(new long[]{0x7FFFA30000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_otherVerb_in_otherVerbStructure909_static {
    public static final BitSet FOLLOW_otherVerb_in_otherVerbStructure909 = new BitSet(new long[]{0x0000230000000002L,0x0000000000000000L,0x000000F00B800080L});

    }static class FOLLOW_md_in_otherVerbStructure911_static {
    public static final BitSet FOLLOW_md_in_otherVerbStructure911 = new BitSet(new long[]{0x0000230000000002L,0x0000000000000000L,0x000000F00B800080L});

    }static class FOLLOW_adv_in_otherVerbStructure914_static {
    public static final BitSet FOLLOW_adv_in_otherVerbStructure914 = new BitSet(new long[]{0x0000230000000002L,0x0000000000000000L,0x000000F003800080L});

    }static class FOLLOW_adj_in_otherVerbStructure917_static {
    public static final BitSet FOLLOW_adj_in_otherVerbStructure917 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_neg_in_otherVerbStructure920_static {
    public static final BitSet FOLLOW_neg_in_otherVerbStructure920 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_actionVerb_in_verb929_static {
    public static final BitSet FOLLOW_actionVerb_in_verb929 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_otherVerb_in_verb933_static {
    public static final BitSet FOLLOW_otherVerb_in_verb933 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbadd_in_actionVerb940_static {
    public static final BitSet FOLLOW_vbadd_in_actionVerb940 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcharge_in_actionVerb942_static {
    public static final BitSet FOLLOW_vbcharge_in_actionVerb942 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcontain_in_actionVerb944_static {
    public static final BitSet FOLLOW_vbcontain_in_actionVerb944 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdilute_in_actionVerb946_static {
    public static final BitSet FOLLOW_vbdilute_in_actionVerb946 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdrop_in_actionVerb948_static {
    public static final BitSet FOLLOW_vbdrop_in_actionVerb948 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbfill_in_actionVerb950_static {
    public static final BitSet FOLLOW_vbfill_in_actionVerb950 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbtreat_in_actionVerb952_static {
    public static final BitSet FOLLOW_vbtreat_in_actionVerb952 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbapparatus_in_actionVerb954_static {
    public static final BitSet FOLLOW_vbapparatus_in_actionVerb954 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbconcentrate_in_actionVerb956_static {
    public static final BitSet FOLLOW_vbconcentrate_in_actionVerb956 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcool_in_actionVerb958_static {
    public static final BitSet FOLLOW_vbcool_in_actionVerb958 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_actionVerb960_static {
    public static final BitSet FOLLOW_vbdegass_in_actionVerb960 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_degassMultiVerb_in_actionVerb962_static {
    public static final BitSet FOLLOW_degassMultiVerb_in_actionVerb962 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsubject_in_actionVerb964_static {
    public static final BitSet FOLLOW_vbsubject_in_actionVerb964 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdissolve_in_actionVerb966_static {
    public static final BitSet FOLLOW_vbdissolve_in_actionVerb966 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdry_in_actionVerb968_static {
    public static final BitSet FOLLOW_vbdry_in_actionVerb968 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbextract_in_actionVerb970_static {
    public static final BitSet FOLLOW_vbextract_in_actionVerb970 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbfilter_in_actionVerb972_static {
    public static final BitSet FOLLOW_vbfilter_in_actionVerb972 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbheat_in_actionVerb974_static {
    public static final BitSet FOLLOW_vbheat_in_actionVerb974 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbincrease_in_actionVerb976_static {
    public static final BitSet FOLLOW_vbincrease_in_actionVerb976 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsubmerge_in_actionVerb978_static {
    public static final BitSet FOLLOW_vbsubmerge_in_actionVerb978 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbpartition_in_actionVerb980_static {
    public static final BitSet FOLLOW_vbpartition_in_actionVerb980 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbprecipitate_in_actionVerb982_static {
    public static final BitSet FOLLOW_vbprecipitate_in_actionVerb982 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbpurify_in_actionVerb984_static {
    public static final BitSet FOLLOW_vbpurify_in_actionVerb984 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbquench_in_actionVerb986_static {
    public static final BitSet FOLLOW_vbquench_in_actionVerb986 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbrecover_in_actionVerb988_static {
    public static final BitSet FOLLOW_vbrecover_in_actionVerb988 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbremove_in_actionVerb990_static {
    public static final BitSet FOLLOW_vbremove_in_actionVerb990 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbstir_in_actionVerb992_static {
    public static final BitSet FOLLOW_vbstir_in_actionVerb992 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsynthesize_in_actionVerb994_static {
    public static final BitSet FOLLOW_vbsynthesize_in_actionVerb994 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbwait_in_actionVerb996_static {
    public static final BitSet FOLLOW_vbwait_in_actionVerb996 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbwash_in_actionVerb998_static {
    public static final BitSet FOLLOW_vbwash_in_actionVerb998 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbyield_in_actionVerb1000_static {
    public static final BitSet FOLLOW_vbyield_in_actionVerb1000 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vb_in_otherVerb1007_static {
    public static final BitSet FOLLOW_vb_in_otherVerb1007 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbd_in_otherVerb1009_static {
    public static final BitSet FOLLOW_vbd_in_otherVerb1009 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbg_in_otherVerb1011_static {
    public static final BitSet FOLLOW_vbg_in_otherVerb1011 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbn_in_otherVerb1013_static {
    public static final BitSet FOLLOW_vbn_in_otherVerb1013 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbp_in_otherVerb1015_static {
    public static final BitSet FOLLOW_vbp_in_otherVerb1015 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbz_in_otherVerb1017_static {
    public static final BitSet FOLLOW_vbz_in_otherVerb1017 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbchange_in_otherVerb1019_static {
    public static final BitSet FOLLOW_vbchange_in_otherVerb1019 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbimmerse_in_otherVerb1021_static {
    public static final BitSet FOLLOW_vbimmerse_in_otherVerb1021 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsuspend_in_otherVerb1023_static {
    public static final BitSet FOLLOW_vbsuspend_in_otherVerb1023 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbuse_in_otherVerb1025_static {
    public static final BitSet FOLLOW_vbuse_in_otherVerb1025 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_degassMultiVerb1034_static {
    public static final BitSet FOLLOW_vbdegass_in_degassMultiVerb1034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_cc_in_degassMultiVerb1036_static {
    public static final BitSet FOLLOW_cc_in_degassMultiVerb1036 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});

    }static class FOLLOW_vbfill_in_degassMultiVerb1038_static {
    public static final BitSet FOLLOW_vbfill_in_degassMultiVerb1038 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounStructure_in_noun1047_static {
    public static final BitSet FOLLOW_nounStructure_in_noun1047 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_noun1050_static {
    public static final BitSet FOLLOW_dash_in_noun1050 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_nounStructure_in_noun1052_static {
    public static final BitSet FOLLOW_nounStructure_in_noun1052 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_prp_in_nounStructure1063_static {
    public static final BitSet FOLLOW_prp_in_nounStructure1063 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_poss_in_nounStructure1065_static {
    public static final BitSet FOLLOW_prp_poss_in_nounStructure1065 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_captionLabel_in_nounStructure1067_static {
    public static final BitSet FOLLOW_captionLabel_in_nounStructure1067 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnplabel_in_nounStructure1069_static {
    public static final BitSet FOLLOW_nnplabel_in_nounStructure1069 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_nounStructure1071_static {
    public static final BitSet FOLLOW_citation_in_nounStructure1071 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycles_in_nounStructure1073_static {
    public static final BitSet FOLLOW_cycles_in_nounStructure1073 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_nounStructure1075_static {
    public static final BitSet FOLLOW_molecule_in_nounStructure1075 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_nounStructure1077_static {
    public static final BitSet FOLLOW_apparatus_in_nounStructure1077 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_nounStructure1079_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_nounStructure1079 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_nounStructure1081_static {
    public static final BitSet FOLLOW_nnstate_in_nounStructure1081 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_procedureNode_in_nounStructure1083_static {
    public static final BitSet FOLLOW_procedureNode_in_nounStructure1083 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_nounStructure1085_static {
    public static final BitSet FOLLOW_nn_in_nounStructure1085 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nns_in_nounStructure1087_static {
    public static final BitSet FOLLOW_nns_in_nounStructure1087 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_nounStructure1089_static {
    public static final BitSet FOLLOW_nnp_in_nounStructure1089 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_nounStructure1091_static {
    public static final BitSet FOLLOW_nnadd_in_nounStructure1091 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_preparationphrase_in_nounStructure1093_static {
    public static final BitSet FOLLOW_preparationphrase_in_nounStructure1093 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_nounStructure1095_static {
    public static final BitSet FOLLOW_nnexample_in_nounStructure1095 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_range_in_nounStructure1097_static {
    public static final BitSet FOLLOW_range_in_nounStructure1097 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_nounStructure1099_static {
    public static final BitSet FOLLOW_nntime_in_nounStructure1099 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_nounStructure1101_static {
    public static final BitSet FOLLOW_nnatmosphere_in_nounStructure1101 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_tmunicode_in_nounStructure1103_static {
    public static final BitSet FOLLOW_tmunicode_in_nounStructure1103 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_nounStructure1105_static {
    public static final BitSet FOLLOW_quantity_in_nounStructure1105 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_nounStructure1107_static {
    public static final BitSet FOLLOW_nnchementity_in_nounStructure1107 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_nounStructure1109_static {
    public static final BitSet FOLLOW_nntemp_in_nounStructure1109 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_nounStructure1111_static {
    public static final BitSet FOLLOW_nnph_in_nounStructure1111 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnflash_in_nounStructure1113_static {
    public static final BitSet FOLLOW_nnflash_in_nounStructure1113 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_nounStructure1115_static {
    public static final BitSet FOLLOW_nngeneral_in_nounStructure1115 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnamount_in_nounStructure1117_static {
    public static final BitSet FOLLOW_nnamount_in_nounStructure1117 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nneq_in_nounStructure1119_static {
    public static final BitSet FOLLOW_nneq_in_nounStructure1119 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_nounStructure1121_static {
    public static final BitSet FOLLOW_nnpressure_in_nounStructure1121 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncolumn_in_nounStructure1123_static {
    public static final BitSet FOLLOW_nncolumn_in_nounStructure1123 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchromatography_in_nounStructure1125_static {
    public static final BitSet FOLLOW_nnchromatography_in_nounStructure1125 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvacuum_in_nounStructure1127_static {
    public static final BitSet FOLLOW_nnvacuum_in_nounStructure1127 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncycle_in_nounStructure1129_static {
    public static final BitSet FOLLOW_nncycle_in_nounStructure1129 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntimes_in_nounStructure1131_static {
    public static final BitSet FOLLOW_nntimes_in_nounStructure1131 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnconcentrate_in_nounStructure1133_static {
    public static final BitSet FOLLOW_nnconcentrate_in_nounStructure1133 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvol_in_nounStructure1135_static {
    public static final BitSet FOLLOW_nnvol_in_nounStructure1135 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpurify_in_nounStructure1137_static {
    public static final BitSet FOLLOW_nnpurify_in_nounStructure1137 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnsynthesize_in_nounStructure1139_static {
    public static final BitSet FOLLOW_nnsynthesize_in_nounStructure1139 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_nounStructure1141_static {
    public static final BitSet FOLLOW_nnmixture_in_nounStructure1141 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_nounStructure1143_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_nounStructure1143 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nndry_in_nounStructure1145_static {
    public static final BitSet FOLLOW_nndry_in_nounStructure1145 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnextract_in_nounStructure1147_static {
    public static final BitSet FOLLOW_nnextract_in_nounStructure1147 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnfilter_in_nounStructure1149_static {
    public static final BitSet FOLLOW_nnfilter_in_nounStructure1149 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnprecipitate_in_nounStructure1151_static {
    public static final BitSet FOLLOW_nnprecipitate_in_nounStructure1151 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnremove_in_nounStructure1153_static {
    public static final BitSet FOLLOW_nnremove_in_nounStructure1153 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_nounStructure1155_static {
    public static final BitSet FOLLOW_nnyield_in_nounStructure1155 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_nounStructure1157_static {
    public static final BitSet FOLLOW_fw_in_nounStructure1157 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_nounStructure1159_static {
    public static final BitSet FOLLOW_sym_in_nounStructure1159 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_clause_in_nounStructure1161_static {
    public static final BitSet FOLLOW_clause_in_nounStructure1161 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ls_in_nounStructure1163_static {
    public static final BitSet FOLLOW_ls_in_nounStructure1163 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnps_in_nounStructure1165_static {
    public static final BitSet FOLLOW_nnps_in_nounStructure1165 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pos_in_nounStructure1167_static {
    public static final BitSet FOLLOW_pos_in_nounStructure1167 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_nounStructure1169_static {
    public static final BitSet FOLLOW_oscarase_in_nounStructure1169 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_prepphrase1181_static {
    public static final BitSet FOLLOW_neg_in_prepphrase1181 = new BitSet(new long[]{0x7FFFA30000000000L,0x0000000000000101L,0x000002F003CC0080L});

    }static class FOLLOW_prepphraseAtmosphere_in_prepphrase1185_static {
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_prepphrase1185 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTime_in_prepphrase1187_static {
    public static final BitSet FOLLOW_prepphraseTime_in_prepphrase1187 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTemp_in_prepphrase1189_static {
    public static final BitSet FOLLOW_prepphraseTemp_in_prepphrase1189 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_prepphrase1191_static {
    public static final BitSet FOLLOW_prepphraseIN_in_prepphrase1191 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseRole_in_prepphrase1193_static {
    public static final BitSet FOLLOW_prepphraseRole_in_prepphrase1193 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseOther_in_prepphrase1195_static {
    public static final BitSet FOLLOW_prepphraseOther_in_prepphrase1195 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1207_static {
    public static final BitSet FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1207 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_prepphraseAtmosphereContent1227_static {
    public static final BitSet FOLLOW_inunder_in_prepphraseAtmosphereContent1227 = new BitSet(new long[]{0x8000638000000000L,0x0000000000100280L,0x000000F0038CA824L});

    }static class FOLLOW_dt_in_prepphraseAtmosphereContent1230_static {
    public static final BitSet FOLLOW_dt_in_prepphraseAtmosphereContent1230 = new BitSet(new long[]{0x8000638000000000L,0x0000000000100280L,0x000000F00384A824L});

    }static class FOLLOW_advAdj_in_prepphraseAtmosphereContent1233_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseAtmosphereContent1233 = new BitSet(new long[]{0x8000638000000000L,0x0000000000100280L,0x000000F00384A824L});

    }static class FOLLOW_molecule_in_prepphraseAtmosphereContent1236_static {
    public static final BitSet FOLLOW_molecule_in_prepphraseAtmosphereContent1236 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});

    }static class FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1238_static {
    public static final BitSet FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1238 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1248_static {
    public static final BitSet FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1248 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepPhraseTimeStructure1266_static {
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1266 = new BitSet(new long[]{0x7FFFA30000000000L,0x0000000000000001L,0x000002F003CC0000L});

    }static class FOLLOW_inAll_in_prepPhraseTimeStructure1269_static {
    public static final BitSet FOLLOW_inAll_in_prepPhraseTimeStructure1269 = new BitSet(new long[]{0x0000230000000000L,0x0000000000000001L,0x000000F0038C0000L});

    }static class FOLLOW_dt_in_prepPhraseTimeStructure1273_static {
    public static final BitSet FOLLOW_dt_in_prepPhraseTimeStructure1273 = new BitSet(new long[]{0x0000230000000000L,0x0000000000000001L,0x000000F003840000L});

    }static class FOLLOW_advAdj_in_prepPhraseTimeStructure1276_static {
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1276 = new BitSet(new long[]{0x0000230000000000L,0x0000000000000001L,0x000000F003840000L});

    }static class FOLLOW_cd_in_prepPhraseTimeStructure1279_static {
    public static final BitSet FOLLOW_cd_in_prepPhraseTimeStructure1279 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_nntime_in_prepPhraseTimeStructure1282_static {
    public static final BitSet FOLLOW_nntime_in_prepPhraseTimeStructure1282 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000001L});

    }static class FOLLOW_prepphraseTempContent_in_prepphraseTemp1292_static {
    public static final BitSet FOLLOW_prepphraseTempContent_in_prepphraseTemp1292 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseTempContent1313_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1313 = new BitSet(new long[]{0x7FFFA30000000000L,0x0000000000000100L,0x000002F003CC0000L});

    }static class FOLLOW_inAll_in_prepphraseTempContent1316_static {
    public static final BitSet FOLLOW_inAll_in_prepphraseTempContent1316 = new BitSet(new long[]{0x0000230000000000L,0x0000000000000100L,0x000000F0038C0000L});

    }static class FOLLOW_dt_in_prepphraseTempContent1319_static {
    public static final BitSet FOLLOW_dt_in_prepphraseTempContent1319 = new BitSet(new long[]{0x0000230000000000L,0x0000000000000100L,0x000000F003840000L});

    }static class FOLLOW_advAdj_in_prepphraseTempContent1322_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0000000000040000L});

    }static class FOLLOW_cd_in_prepphraseTempContent1325_static {
    public static final BitSet FOLLOW_cd_in_prepphraseTempContent1325 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_nntemp_in_prepphraseTempContent1328_static {
    public static final BitSet FOLLOW_nntemp_in_prepphraseTempContent1328 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});

    }static class FOLLOW_inin_in_prepphraseIN1337_static {
    public static final BitSet FOLLOW_inin_in_prepphraseIN1337 = new BitSet(new long[]{0x8000638000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_molecule_in_prepphraseIN1339_static {
    public static final BitSet FOLLOW_molecule_in_prepphraseIN1339 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_prepphraseRole1360_static {
    public static final BitSet FOLLOW_inas_in_prepphraseRole1360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L,0x0000000000080000L});

    }static class FOLLOW_dt_in_prepphraseRole1362_static {
    public static final BitSet FOLLOW_dt_in_prepphraseRole1362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nnchementity_in_prepphraseRole1365_static {
    public static final BitSet FOLLOW_nnchementity_in_prepphraseRole1365 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseOther1388_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseOther1388 = new BitSet(new long[]{0x7FFFA30000000000L,0x0000000000000101L,0x000002F003CC0080L});

    }static class FOLLOW_inMost_in_prepphraseOther1391_static {
    public static final BitSet FOLLOW_inMost_in_prepphraseOther1391 = new BitSet(new long[]{0xFFFFEFC000000000L,0x68A0A850061FFFF5L,0x001E03FFF7FCE8A4L});

    }static class FOLLOW_nounphrase_in_prepphraseOther1395_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOther1395 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_prepphraseOf1421_static {
    public static final BitSet FOLLOW_inof_in_prepphraseOf1421 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_nounphrase_in_prepphraseOf1424_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOf1424 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseAfter1446_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseAfter1446 = new BitSet(new long[]{0x0002000000000000L});

    }static class FOLLOW_inafter_in_prepphraseAfter1449_static {
    public static final BitSet FOLLOW_inafter_in_prepphraseAfter1449 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_nounphrase_in_prepphraseAfter1452_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseAfter1452 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsynthesize_in_preparationphrase1477_static {
    public static final BitSet FOLLOW_vbsynthesize_in_preparationphrase1477 = new BitSet(new long[]{0x0000800000000000L});

    }static class FOLLOW_inas_in_preparationphrase1479_static {
    public static final BitSet FOLLOW_inas_in_preparationphrase1479 = new BitSet(new long[]{0x7FFFA30000000000L,0x0000000000080101L,0x000002F003CC0080L});

    }static class FOLLOW_nnexample_in_preparationphrase1482_static {
    public static final BitSet FOLLOW_nnexample_in_preparationphrase1482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_preparationphrase1484_static {
    public static final BitSet FOLLOW_cd_in_preparationphrase1484 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphrase_in_preparationphrase1487_static {
    public static final BitSet FOLLOW_prepphrase_in_preparationphrase1487 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_multiApparatus1498_static {
    public static final BitSet FOLLOW_apparatus_in_multiApparatus1498 = new BitSet(new long[]{0x8000638000000002L,0x0000001002102280L,0x00000000138EA824L});

    }static class FOLLOW_conjunction_in_multiApparatus1501_static {
    public static final BitSet FOLLOW_conjunction_in_multiApparatus1501 = new BitSet(new long[]{0x8000638000000000L,0x0000001002102280L,0x00000000138EA824L});

    }static class FOLLOW_apparatus_in_multiApparatus1504_static {
    public static final BitSet FOLLOW_apparatus_in_multiApparatus1504 = new BitSet(new long[]{0x8000638000000002L,0x0000001002102280L,0x00000000138EA824L});

    }static class FOLLOW_dt_in_apparatus1515_static {
    public static final BitSet FOLLOW_dt_in_apparatus1515 = new BitSet(new long[]{0x8000638000000000L,0x0000001002102280L,0x00000000138CA824L});

    }static class FOLLOW_preapparatus_in_apparatus1518_static {
    public static final BitSet FOLLOW_preapparatus_in_apparatus1518 = new BitSet(new long[]{0x8000638000000000L,0x0000001002102280L,0x00000000138CA824L});

    }static class FOLLOW_nnApp_in_apparatus1521_static {
    public static final BitSet FOLLOW_nnApp_in_apparatus1521 = new BitSet(new long[]{0x8000638000000002L,0x0000001002102280L,0x00000000138CA824L});

    }static class FOLLOW_nnapparatus_in_nnApp1548_static {
    public static final BitSet FOLLOW_nnapparatus_in_nnApp1548 = new BitSet(new long[]{0x8000638000000002L,0x0000001002102280L,0x00000000138CA924L});

    }static class FOLLOW_dash_in_nnApp1552_static {
    public static final BitSet FOLLOW_dash_in_nnApp1552 = new BitSet(new long[]{0x8000638000000000L,0x0000001002102280L,0x00000000138CA824L});

    }static class FOLLOW_nnapparatus_in_nnApp1554_static {
    public static final BitSet FOLLOW_nnapparatus_in_nnApp1554 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_quantity_in_preapparatus1568_static {
    public static final BitSet FOLLOW_quantity_in_preapparatus1568 = new BitSet(new long[]{0x8000638000000002L,0x0000000002102280L,0x000000001384A824L});

    }static class FOLLOW_adj_in_preapparatus1570_static {
    public static final BitSet FOLLOW_adj_in_preapparatus1570 = new BitSet(new long[]{0x8000638000000002L,0x0000000002102280L,0x000000001384A824L});

    }static class FOLLOW_nnpressure_in_preapparatus1572_static {
    public static final BitSet FOLLOW_nnpressure_in_preapparatus1572 = new BitSet(new long[]{0x8000638000000002L,0x0000000002102280L,0x000000001384A824L});

    }static class FOLLOW_nnadd_in_preapparatus1574_static {
    public static final BitSet FOLLOW_nnadd_in_preapparatus1574 = new BitSet(new long[]{0x8000638000000002L,0x0000000002102280L,0x000000001384A824L});

    }static class FOLLOW_molecule_in_preapparatus1576_static {
    public static final BitSet FOLLOW_molecule_in_preapparatus1576 = new BitSet(new long[]{0x8000638000000002L,0x0000000002102280L,0x000000001384A824L});

    }static class FOLLOW_nnchementity_in_preapparatus1578_static {
    public static final BitSet FOLLOW_nnchementity_in_preapparatus1578 = new BitSet(new long[]{0x8000638000000002L,0x0000000002102280L,0x000000001384A824L});

    }static class FOLLOW_nnstate_in_preapparatus1580_static {
    public static final BitSet FOLLOW_nnstate_in_preapparatus1580 = new BitSet(new long[]{0x8000638000000002L,0x0000000002102280L,0x000000001384A824L});

    }static class FOLLOW_nn_in_preapparatus1582_static {
    public static final BitSet FOLLOW_nn_in_preapparatus1582 = new BitSet(new long[]{0x8000638000000002L,0x0000000002102280L,0x000000001384A824L});

    }static class FOLLOW_jjcomp_in_oscarCompound1595_static {
    public static final BitSet FOLLOW_jjcomp_in_oscarCompound1595 = new BitSet(new long[]{0x8000638000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_adj_in_oscarCompound1597_static {
    public static final BitSet FOLLOW_adj_in_oscarCompound1597 = new BitSet(new long[]{0x8000638000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_oscarCompoundStructure_in_oscarCompound1601_static {
    public static final BitSet FOLLOW_oscarCompoundStructure_in_oscarCompound1601 = new BitSet(new long[]{0x8900678000000002L,0xB75B57ADFD980290L,0x000000004384A827L});

    }static class FOLLOW_adj_in_oscarCompound1603_static {
    public static final BitSet FOLLOW_adj_in_oscarCompound1603 = new BitSet(new long[]{0x8900678000000002L,0xB75B57ADFD980290L,0x000000004384A827L});

    }static class FOLLOW_nnstate_in_oscarCompound1606_static {
    public static final BitSet FOLLOW_nnstate_in_oscarCompound1606 = new BitSet(new long[]{0x8900678000000002L,0xB75B57ADFD980290L,0x000000004384A827L});

    }static class FOLLOW_numericReferenceOrQuantity_in_oscarCompound1610_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_oscarCompound1610 = new BitSet(new long[]{0x0900000000000002L,0xB75B57ADF9800200L,0x0000000000048007L});

    }static class FOLLOW_nnchementity_in_oscarCompound1614_static {
    public static final BitSet FOLLOW_nnchementity_in_oscarCompound1614 = new BitSet(new long[]{0x0900000000000002L,0xB75B57ADF9800200L,0x0000000000048007L});

    }static class FOLLOW_quantity_in_oscarCompound1619_static {
    public static final BitSet FOLLOW_quantity_in_oscarCompound1619 = new BitSet(new long[]{0x0900000000000002L,0xB75B57ADF9800200L,0x0000000000048007L});

    }static class FOLLOW_fromProcedure_in_oscarCompound1622_static {
    public static final BitSet FOLLOW_fromProcedure_in_oscarCompound1622 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_oscarCompoundStructure1631_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompoundStructure1631 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L,0x0000000000000150L});

    }static class FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1634_static {
    public static final BitSet FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1634 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1639_static {
    public static final BitSet FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1639 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_afterOscarCompoundStructure1662_static {
    public static final BitSet FOLLOW_dash_in_afterOscarCompoundStructure1662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_afterOscarCompoundStructure1664_static {
    public static final BitSet FOLLOW_oscarcm_in_afterOscarCompoundStructure1664 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_afterOscarCompoundStructure1669_static {
    public static final BitSet FOLLOW_dash_in_afterOscarCompoundStructure1669 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_afterOscarCompoundStructure1688_static {
    public static final BitSet FOLLOW_colon_in_afterOscarCompoundStructure1688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_afterOscarCompoundStructure1690_static {
    public static final BitSet FOLLOW_oscarcm_in_afterOscarCompoundStructure1690 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L,0x0000000000000010L});

    }static class FOLLOW_dash_in_afterOscarCompoundStructure1696_static {
    public static final BitSet FOLLOW_dash_in_afterOscarCompoundStructure1696 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000140L});

    }static class FOLLOW_apost_in_afterOscarCompoundStructure1698_static {
    public static final BitSet FOLLOW_apost_in_afterOscarCompoundStructure1698 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000140L});

    }static class FOLLOW_lrb_in_bracketedOscarCompoundStructure1707_static {
    public static final BitSet FOLLOW_lrb_in_bracketedOscarCompoundStructure1707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1710_static {
    public static final BitSet FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1710 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_bracketedOscarCompoundStructure1713_static {
    public static final BitSet FOLLOW_rrb_in_bracketedOscarCompoundStructure1713 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount_in_molecule1723_static {
    public static final BitSet FOLLOW_moleculeamount_in_molecule1723 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount3_in_moleculeamount1741_static {
    public static final BitSet FOLLOW_moleculeamount3_in_moleculeamount1741 = new BitSet(new long[]{0x0000800000000002L});

    }static class FOLLOW_moleculeamount1_in_moleculeamount1744_static {
    public static final BitSet FOLLOW_moleculeamount1_in_moleculeamount1744 = new BitSet(new long[]{0x0000800000000002L});

    }static class FOLLOW_moleculeamount2_in_moleculeamount1748_static {
    public static final BitSet FOLLOW_moleculeamount2_in_moleculeamount1748 = new BitSet(new long[]{0x0000800000000002L});

    }static class FOLLOW_asAstate_in_moleculeamount1751_static {
    public static final BitSet FOLLOW_asAstate_in_moleculeamount1751 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_moleculeamount31762_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount31762 = new BitSet(new long[]{0x0100008000000000L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_bracketedContentInMol_in_moleculeamount31764_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_moleculeamount31764 = new BitSet(new long[]{0x0100008000000000L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_inof_in_moleculeamount31768_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount31768 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000000CC000L});

    }static class FOLLOW_dtTHE_in_moleculeamount31771_static {
    public static final BitSet FOLLOW_dtTHE_in_moleculeamount31771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000048000L});

    }static class FOLLOW_dt_in_moleculeamount31775_static {
    public static final BitSet FOLLOW_dt_in_moleculeamount31775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000048000L});

    }static class FOLLOW_ratioOrBracketedRatio_in_moleculeamount31779_static {
    public static final BitSet FOLLOW_ratioOrBracketedRatio_in_moleculeamount31779 = new BitSet(new long[]{0x8000638000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_bracketedContentInMol_in_moleculeamount31781_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_moleculeamount31781 = new BitSet(new long[]{0x8000638000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_oscarCompound_in_moleculeamount31784_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount31784 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_moleculeamount11794_static {
    public static final BitSet FOLLOW_nnchementity_in_moleculeamount11794 = new BitSet(new long[]{0x0000008000000000L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_nnstate_in_moleculeamount11798_static {
    public static final BitSet FOLLOW_nnstate_in_moleculeamount11798 = new BitSet(new long[]{0x0000008000000000L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_quantity_in_moleculeamount11803_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount11803 = new BitSet(new long[]{0x0100008000000000L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_bracketedContentInMol_in_moleculeamount11805_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_moleculeamount11805 = new BitSet(new long[]{0x0100008000000000L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_inof_in_moleculeamount11809_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount11809 = new BitSet(new long[]{0x8000638000000000L,0x0000000000100280L,0x00000000038CE824L});

    }static class FOLLOW_quantity_in_moleculeamount11812_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount11812 = new BitSet(new long[]{0x8100638000000000L,0x0000000000100280L,0x00000000038CE824L});

    }static class FOLLOW_inof_in_moleculeamount11814_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount11814 = new BitSet(new long[]{0x8000638000000000L,0x0000000000100280L,0x00000000038CE824L});

    }static class FOLLOW_dtTHE_in_moleculeamount11820_static {
    public static final BitSet FOLLOW_dtTHE_in_moleculeamount11820 = new BitSet(new long[]{0x8000638000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_dt_in_moleculeamount11824_static {
    public static final BitSet FOLLOW_dt_in_moleculeamount11824 = new BitSet(new long[]{0x8000638000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_oscarCompound_in_moleculeamount11828_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount11828 = new BitSet(new long[]{0x8000638000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11831_static {
    public static final BitSet FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11831 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_moleculeamount21840_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount21840 = new BitSet(new long[]{0x8000638000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_bracketedContentInMol_in_moleculeamount21842_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_moleculeamount21842 = new BitSet(new long[]{0x8000638000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_oscarCompound_in_moleculeamount21846_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount21846 = new BitSet(new long[]{0x8000638000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21849_static {
    public static final BitSet FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21849 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_afterCompoundCitationOrQuantity1857_static {
    public static final BitSet FOLLOW_citation_in_afterCompoundCitationOrQuantity1857 = new BitSet(new long[]{0x0000008000000002L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_quantity_in_afterCompoundCitationOrQuantity1859_static {
    public static final BitSet FOLLOW_quantity_in_afterCompoundCitationOrQuantity1859 = new BitSet(new long[]{0x0000008000000002L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_comma_in_afterCompoundCitationOrQuantity1861_static {
    public static final BitSet FOLLOW_comma_in_afterCompoundCitationOrQuantity1861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1864_static {
    public static final BitSet FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1864 = new BitSet(new long[]{0x0000008000000002L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1866_static {
    public static final BitSet FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1866 = new BitSet(new long[]{0x0000008000000002L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_bracketedContentInMol_in_afterCompoundCitationOrQuantity1869_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_afterCompoundCitationOrQuantity1869 = new BitSet(new long[]{0x0000008000000002L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1880_static {
    public static final BitSet FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1880 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeDescriptionStart_in_unnamedmoleculeDescription1897_static {
    public static final BitSet FOLLOW_unnamedmoleculeDescriptionStart_in_unnamedmoleculeDescription1897 = new BitSet(new long[]{0x0000808000000000L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_afterCompoundCitationOrQuantity_in_unnamedmoleculeDescription1899_static {
    public static final BitSet FOLLOW_afterCompoundCitationOrQuantity_in_unnamedmoleculeDescription1899 = new BitSet(new long[]{0x0000800000000002L});

    }static class FOLLOW_asAstate_in_unnamedmoleculeDescription1901_static {
    public static final BitSet FOLLOW_asAstate_in_unnamedmoleculeDescription1901 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantityOf_in_unnamedmoleculeDescriptionStart1911_static {
    public static final BitSet FOLLOW_quantityOf_in_unnamedmoleculeDescriptionStart1911 = new BitSet(new long[]{0x8000678000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount1_in_unnamedmoleculeDescriptionStart1914_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount1_in_unnamedmoleculeDescriptionStart1914 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1918_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1918 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1922_static {
    public static final BitSet FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1922 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1928_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1928 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1932_static {
    public static final BitSet FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1932 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_quantityOf1941_static {
    public static final BitSet FOLLOW_quantity_in_quantityOf1941 = new BitSet(new long[]{0x0100000000000002L,0x0000000000000200L,0x00000000000CC004L});

    }static class FOLLOW_inof_in_quantityOf1944_static {
    public static final BitSet FOLLOW_inof_in_quantityOf1944 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000084000L});

    }static class FOLLOW_dtTHE_in_quantityOf1948_static {
    public static final BitSet FOLLOW_dtTHE_in_quantityOf1948 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_quantityOf1952_static {
    public static final BitSet FOLLOW_dt_in_quantityOf1952 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMolecule_in_potentialUnnamedMoleculeAmount11963_static {
    public static final BitSet FOLLOW_potentialUnnamedMolecule_in_potentialUnnamedMoleculeAmount11963 = new BitSet(new long[]{0x0900800000000002L,0xB75B57ADF9800200L,0x0000000000048007L});

    }static class FOLLOW_quantity_in_potentialUnnamedMoleculeAmount11965_static {
    public static final BitSet FOLLOW_quantity_in_potentialUnnamedMoleculeAmount11965 = new BitSet(new long[]{0x0900800000000002L,0xB75B57ADF9800200L,0x0000000000048007L});

    }static class FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount11968_static {
    public static final BitSet FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount11968 = new BitSet(new long[]{0x0900000000000002L,0xB75B57ADF9800000L,0x0000000000000003L});

    }static class FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount11971_static {
    public static final BitSet FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount11971 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numberCompoundReference_in_potentialUnnamedMoleculeAmount21982_static {
    public static final BitSet FOLLOW_numberCompoundReference_in_potentialUnnamedMoleculeAmount21982 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21985_static {
    public static final BitSet FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21985 = new BitSet(new long[]{0x0900800000000002L,0xB75B57ADF9800200L,0x0000000000048007L});

    }static class FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21989_static {
    public static final BitSet FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21989 = new BitSet(new long[]{0x0900800000000002L,0xB75B57ADF9800200L,0x0000000000048007L});

    }static class FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMoleculeAmount21995_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMoleculeAmount21995 = new BitSet(new long[]{0x8900E78000000000L,0xB75B57ADFD980290L,0x000000004384A827L});

    }static class FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMoleculeAmount21998_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMoleculeAmount21998 = new BitSet(new long[]{0x0900800000000002L,0xB75B57ADF9800200L,0x0000000000048007L});

    }static class FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount22002_static {
    public static final BitSet FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount22002 = new BitSet(new long[]{0x0900800000000002L,0xB75B57ADF9800200L,0x0000000000048007L});

    }static class FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount22006_static {
    public static final BitSet FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount22006 = new BitSet(new long[]{0x0900800000000002L,0xB75B57ADF9800200L,0x0000000000048007L});

    }static class FOLLOW_quantity_in_potentialUnnamedMoleculeAmount22011_static {
    public static final BitSet FOLLOW_quantity_in_potentialUnnamedMoleculeAmount22011 = new BitSet(new long[]{0x0900800000000002L,0xB75B57ADF9800200L,0x0000000000048007L});

    }static class FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount22014_static {
    public static final BitSet FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount22014 = new BitSet(new long[]{0x0900000000000002L,0xB75B57ADF9800000L,0x0000000000000003L});

    }static class FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount22017_static {
    public static final BitSet FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount22017 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_definiteUnnamedMoleculeStructure_in_definiteUnnamedMolecule2027_static {
    public static final BitSet FOLLOW_definiteUnnamedMoleculeStructure_in_definiteUnnamedMolecule2027 = new BitSet(new long[]{0x0900800000000002L,0xB75B57ADF9800200L,0x0000000000048007L});

    }static class FOLLOW_quantity_in_definiteUnnamedMolecule2029_static {
    public static final BitSet FOLLOW_quantity_in_definiteUnnamedMolecule2029 = new BitSet(new long[]{0x0900800000000002L,0xB75B57ADF9800200L,0x0000000000048007L});

    }static class FOLLOW_asAstate_in_definiteUnnamedMolecule2032_static {
    public static final BitSet FOLLOW_asAstate_in_definiteUnnamedMolecule2032 = new BitSet(new long[]{0x0900000000000002L,0xB75B57ADF9800000L,0x0000000000000003L});

    }static class FOLLOW_fromProcedure_in_definiteUnnamedMolecule2035_static {
    public static final BitSet FOLLOW_fromProcedure_in_definiteUnnamedMolecule2035 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_definiteUnnamedMoleculeStructure2045_static {
    public static final BitSet FOLLOW_adj_in_definiteUnnamedMoleculeStructure2045 = new BitSet(new long[]{0x0000630000000000L,0x0000000000000080L,0x0000000003800000L});

    }static class FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure2049_static {
    public static final BitSet FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure2049 = new BitSet(new long[]{0x8000678000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_numericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure2051_static {
    public static final BitSet FOLLOW_numericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure2051 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjcomp_in_definiteUnnamedMoleculeStructure2055_static {
    public static final BitSet FOLLOW_jjcomp_in_definiteUnnamedMoleculeStructure2055 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure2057_static {
    public static final BitSet FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure2057 = new BitSet(new long[]{0x8000678000000002L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_numericReferenceOrQuantity_in_definiteUnnamedMoleculeStructure2059_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_definiteUnnamedMoleculeStructure2059 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_alphanumericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure2065_static {
    public static final BitSet FOLLOW_alphanumericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure2065 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numberCompoundReference_in_potentialUnnamedMolecule2074_static {
    public static final BitSet FOLLOW_numberCompoundReference_in_potentialUnnamedMolecule2074 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMolecule2078_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMolecule2078 = new BitSet(new long[]{0x8000678000000002L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMolecule2080_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMolecule2080 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2093_static {
    public static final BitSet FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2093 = new BitSet(new long[]{0x8000650000000000L,0x0000000004080010L,0x0000000000800000L});

    }static class FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2095_static {
    public static final BitSet FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2095 = new BitSet(new long[]{0x8000650000000000L,0x0000000004080010L,0x0000000000800000L});

    }static class FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN2097_static {
    public static final BitSet FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN2097 = new BitSet(new long[]{0x8000650000000000L,0x0000000004080010L,0x0000000000800000L});

    }static class FOLLOW_jjcomp_in_potentialUnnamedMoleculeStructureNN2099_static {
    public static final BitSet FOLLOW_jjcomp_in_potentialUnnamedMoleculeStructureNN2099 = new BitSet(new long[]{0x8000650000000000L,0x0000000004080010L,0x0000000000800000L});

    }static class FOLLOW_nnstate_in_potentialUnnamedMoleculeStructureNN2104_static {
    public static final BitSet FOLLOW_nnstate_in_potentialUnnamedMoleculeStructureNN2104 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_referenceToExampleCompound_in_potentialUnnamedMoleculeStructureNN2106_static {
    public static final BitSet FOLLOW_referenceToExampleCompound_in_potentialUnnamedMoleculeStructureNN2106 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_potentialUnnamedMoleculeStructureNN2108_static {
    public static final BitSet FOLLOW_nnatmosphere_in_potentialUnnamedMoleculeStructureNN2108 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_potentialUnnamedMoleculeStructureNN2110_static {
    public static final BitSet FOLLOW_nnmixture_in_potentialUnnamedMoleculeStructureNN2110 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_potentialUnnamedMoleculeStructureNN2112_static {
    public static final BitSet FOLLOW_oscarase_in_potentialUnnamedMoleculeStructureNN2112 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2118_static {
    public static final BitSet FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2118 = new BitSet(new long[]{0x0000210000000000L,0x0000000000000080L,0x0000000000800000L});

    }static class FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2120_static {
    public static final BitSet FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2120 = new BitSet(new long[]{0x0000210000000000L,0x0000000000000080L,0x0000000000800000L});

    }static class FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN2122_static {
    public static final BitSet FOLLOW_oscarcj_in_potentialUnnamedMoleculeStructureNN2122 = new BitSet(new long[]{0x0000210000000000L,0x0000000000000080L,0x0000000000800000L});

    }static class FOLLOW_nnchementity_in_potentialUnnamedMoleculeStructureNN2126_static {
    public static final BitSet FOLLOW_nnchementity_in_potentialUnnamedMoleculeStructureNN2126 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_numericReferenceOrQuantity2136_static {
    public static final BitSet FOLLOW_quantity_in_numericReferenceOrQuantity2136 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericOrIdentifierCompoundReference_in_numericReferenceOrQuantity2140_static {
    public static final BitSet FOLLOW_numericOrIdentifierCompoundReference_in_numericReferenceOrQuantity2140 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_asAstate2149_static {
    public static final BitSet FOLLOW_inas_in_asAstate2149 = new BitSet(new long[]{0x8000210000000000L,0x0000000000000000L,0x0000000000880000L});

    }static class FOLLOW_dt_in_asAstate2151_static {
    public static final BitSet FOLLOW_dt_in_asAstate2151 = new BitSet(new long[]{0x8000210000000000L,0x0000000000000000L,0x0000000000800000L});

    }static class FOLLOW_jj_in_asAstate2155_static {
    public static final BitSet FOLLOW_jj_in_asAstate2155 = new BitSet(new long[]{0x8000210000000000L,0x0000000000000000L,0x0000000000800000L});

    }static class FOLLOW_jjchem_in_asAstate2157_static {
    public static final BitSet FOLLOW_jjchem_in_asAstate2157 = new BitSet(new long[]{0x8000210000000000L,0x0000000000000000L,0x0000000000800000L});

    }static class FOLLOW_oscarcj_in_asAstate2159_static {
    public static final BitSet FOLLOW_oscarcj_in_asAstate2159 = new BitSet(new long[]{0x8000210000000000L,0x0000000000000000L,0x0000000000800000L});

    }static class FOLLOW_nnstate_in_asAstate2163_static {
    public static final BitSet FOLLOW_nnstate_in_asAstate2163 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_quantity_in_asAstate2165_static {
    public static final BitSet FOLLOW_quantity_in_asAstate2165 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_allIdentifierTypesOtherThanCD_in_alphanumericOrIdentifierCompoundReference2176_static {
    public static final BitSet FOLLOW_allIdentifierTypesOtherThanCD_in_alphanumericOrIdentifierCompoundReference2176 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_numberCompoundReference2195_static {
    public static final BitSet FOLLOW_cd_in_numberCompoundReference2195 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_allIdentifierTypes_in_numericOrIdentifierCompoundReference2216_static {
    public static final BitSet FOLLOW_allIdentifierTypes_in_numericOrIdentifierCompoundReference2216 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_captionLabelContent_in_captionLabel2236_static {
    public static final BitSet FOLLOW_captionLabelContent_in_captionLabel2236 = new BitSet(new long[]{0x0000004000000002L});

    }static class FOLLOW_nnplabel_in_captionLabelContent2257_static {
    public static final BitSet FOLLOW_nnplabel_in_captionLabelContent2257 = new BitSet(new long[]{0x8000678000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_allIdentifierTypes_in_captionLabelContent2259_static {
    public static final BitSet FOLLOW_allIdentifierTypes_in_captionLabelContent2259 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020020L});

    }static class FOLLOW_conjunction_in_captionLabelContent2262_static {
    public static final BitSet FOLLOW_conjunction_in_captionLabelContent2262 = new BitSet(new long[]{0x8000678000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_allIdentifierTypes_in_captionLabelContent2264_static {
    public static final BitSet FOLLOW_allIdentifierTypes_in_captionLabelContent2264 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020020L});

    }static class FOLLOW_quantity1Node_in_quantity2278_static {
    public static final BitSet FOLLOW_quantity1Node_in_quantity2278 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_quantity2280_static {
    public static final BitSet FOLLOW_quantity2Node_in_quantity2280 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity1_in_quantity1Node2289_static {
    public static final BitSet FOLLOW_quantity1_in_quantity1Node2289 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_quantity12309_static {
    public static final BitSet FOLLOW_lrb_in_quantity12309 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_measurements_in_quantity12311_static {
    public static final BitSet FOLLOW_measurements_in_quantity12311 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010220L});

    }static class FOLLOW_comma_in_quantity12314_static {
    public static final BitSet FOLLOW_comma_in_quantity12314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_measurements_in_quantity12317_static {
    public static final BitSet FOLLOW_measurements_in_quantity12317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010220L});

    }static class FOLLOW_comma_in_quantity12322_static {
    public static final BitSet FOLLOW_comma_in_quantity12322 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});

    }static class FOLLOW_preparationphrase_in_quantity12324_static {
    public static final BitSet FOLLOW_preparationphrase_in_quantity12324 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010220L});

    }static class FOLLOW_stop_in_quantity12329_static {
    public static final BitSet FOLLOW_stop_in_quantity12329 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});

    }static class FOLLOW_preparationphrase_in_quantity12331_static {
    public static final BitSet FOLLOW_preparationphrase_in_quantity12331 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010200L});

    }static class FOLLOW_rrb_in_quantity12336_static {
    public static final BitSet FOLLOW_rrb_in_quantity12336 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2_in_quantity2Node2344_static {
    public static final BitSet FOLLOW_quantity2_in_quantity2Node2344 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurements_in_quantity22365_static {
    public static final BitSet FOLLOW_measurements_in_quantity22365 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_comma_in_quantity22368_static {
    public static final BitSet FOLLOW_comma_in_quantity22368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_measurements_in_quantity22371_static {
    public static final BitSet FOLLOW_measurements_in_quantity22371 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_cd_in_measurements2384_static {
    public static final BitSet FOLLOW_cd_in_measurements2384 = new BitSet(new long[]{0x8000638000000000L,0x0000000002102280L,0x000000001384A824L});

    }static class FOLLOW_nn_in_measurements2386_static {
    public static final BitSet FOLLOW_nn_in_measurements2386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_multiple_in_measurements2391_static {
    public static final BitSet FOLLOW_multiple_in_measurements2391 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000080000L});

    }static class FOLLOW_measurementtypes_in_measurements2393_static {
    public static final BitSet FOLLOW_measurementtypes_in_measurements2393 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000080000L});

    }static class FOLLOW_dt_in_measurements2396_static {
    public static final BitSet FOLLOW_dt_in_measurements2396 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_multiple2404_static {
    public static final BitSet FOLLOW_cd_in_multiple2404 = new BitSet(new long[]{0x0000100000000000L});

    }static class FOLLOW_cdunicode_in_multiple2406_static {
    public static final BitSet FOLLOW_cdunicode_in_multiple2406 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_measurementtypes_in_multiple2408_static {
    public static final BitSet FOLLOW_measurementtypes_in_multiple2408 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molar_in_measurementtypes2433_static {
    public static final BitSet FOLLOW_molar_in_measurementtypes2433 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_amount_in_measurementtypes2435_static {
    public static final BitSet FOLLOW_amount_in_measurementtypes2435 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mass_in_measurementtypes2437_static {
    public static final BitSet FOLLOW_mass_in_measurementtypes2437 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_volume_in_measurementtypes2439_static {
    public static final BitSet FOLLOW_volume_in_measurementtypes2439 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_logHydrogenActivity_in_measurementtypes2441_static {
    public static final BitSet FOLLOW_logHydrogenActivity_in_measurementtypes2441 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_equivalent_in_measurementtypes2443_static {
    public static final BitSet FOLLOW_equivalent_in_measurementtypes2443 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield_in_measurementtypes2445_static {
    public static final BitSet FOLLOW_yield_in_measurementtypes2445 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percent_in_measurementtypes2447_static {
    public static final BitSet FOLLOW_percent_in_measurementtypes2447 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_molar2455_static {
    public static final BitSet FOLLOW_cd_in_molar2455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_nnmolar_in_molar2457_static {
    public static final BitSet FOLLOW_nnmolar_in_molar2457 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_amount2477_static {
    public static final BitSet FOLLOW_cd_in_amount2477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});

    }static class FOLLOW_nnamount_in_amount2479_static {
    public static final BitSet FOLLOW_nnamount_in_amount2479 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_mass2499_static {
    public static final BitSet FOLLOW_cd_in_mass2499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});

    }static class FOLLOW_nnmass_in_mass2501_static {
    public static final BitSet FOLLOW_nnmass_in_mass2501 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_volume2520_static {
    public static final BitSet FOLLOW_cd_in_volume2520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_nnvol_in_volume2522_static {
    public static final BitSet FOLLOW_nnvol_in_volume2522 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_logHydrogenActivity2542_static {
    public static final BitSet FOLLOW_nnph_in_logHydrogenActivity2542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000040000L});

    }static class FOLLOW_sym_in_logHydrogenActivity2544_static {
    public static final BitSet FOLLOW_sym_in_logHydrogenActivity2544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_logHydrogenActivity2547_static {
    public static final BitSet FOLLOW_cd_in_logHydrogenActivity2547 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_equivalent2567_static {
    public static final BitSet FOLLOW_cd_in_equivalent2567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_nneq_in_equivalent2569_static {
    public static final BitSet FOLLOW_nneq_in_equivalent2569 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield1_in_yield2586_static {
    public static final BitSet FOLLOW_yield1_in_yield2586 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield2_in_yield2597_static {
    public static final BitSet FOLLOW_yield2_in_yield2597 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_yield12611_static {
    public static final BitSet FOLLOW_nnyield_in_yield12611 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_inof_in_yield12614_static {
    public static final BitSet FOLLOW_inof_in_yield12614 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040004L});

    }static class FOLLOW_colon_in_yield12616_static {
    public static final BitSet FOLLOW_colon_in_yield12616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040004L});

    }static class FOLLOW_percent_in_yield12619_static {
    public static final BitSet FOLLOW_percent_in_yield12619 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percent_in_yield22625_static {
    public static final BitSet FOLLOW_percent_in_yield22625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});

    }static class FOLLOW_nnyield_in_yield22627_static {
    public static final BitSet FOLLOW_nnyield_in_yield22627 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_percent2635_static {
    public static final BitSet FOLLOW_cd_in_percent2635 = new BitSet(new long[]{0x8000638000000000L,0x0000000002102280L,0x000000001384AC24L});

    }static class FOLLOW_nn_in_percent2637_static {
    public static final BitSet FOLLOW_nn_in_percent2637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_percentsign_in_percent2640_static {
    public static final BitSet FOLLOW_percentsign_in_percent2640 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_percent2644_static {
    public static final BitSet FOLLOW_dash_in_percent2644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_percent2646_static {
    public static final BitSet FOLLOW_cd_in_percent2646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_percentsign_in_percent2648_static {
    public static final BitSet FOLLOW_percentsign_in_percent2648 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_bracketedContent2682_static {
    public static final BitSet FOLLOW_ratio_in_bracketedContent2682 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_bracketedContent1_in_bracketedContent2687_static {
    public static final BitSet FOLLOW_bracketedContent1_in_bracketedContent2687 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContent2_in_bracketedContent2689_static {
    public static final BitSet FOLLOW_bracketedContent2_in_bracketedContent2689 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContent3_in_bracketedContent2691_static {
    public static final BitSet FOLLOW_bracketedContent3_in_bracketedContent2691 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_bracketedContent12716_static {
    public static final BitSet FOLLOW_comma_in_bracketedContent12716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_lrb_in_bracketedContent12718_static {
    public static final BitSet FOLLOW_lrb_in_bracketedContent12718 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_bracketedContentContents_in_bracketedContent12720_static {
    public static final BitSet FOLLOW_bracketedContentContents_in_bracketedContent12720 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_bracketedContent12722_static {
    public static final BitSet FOLLOW_rrb_in_bracketedContent12722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_comma_in_bracketedContent12724_static {
    public static final BitSet FOLLOW_comma_in_bracketedContent12724 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_bracketedContent22730_static {
    public static final BitSet FOLLOW_lrb_in_bracketedContent22730 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_bracketedContentContents_in_bracketedContent22732_static {
    public static final BitSet FOLLOW_bracketedContentContents_in_bracketedContent22732 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_bracketedContent22734_static {
    public static final BitSet FOLLOW_rrb_in_bracketedContent22734 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_bracketedContent32740_static {
    public static final BitSet FOLLOW_lsqb_in_bracketedContent32740 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_bracketedContentContents_in_bracketedContent32742_static {
    public static final BitSet FOLLOW_bracketedContentContents_in_bracketedContent32742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_rsqb_in_bracketedContent32744_static {
    public static final BitSet FOLLOW_rsqb_in_bracketedContent32744 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_bracketedContentContents2751_static {
    public static final BitSet FOLLOW_verb_in_bracketedContentContents2751 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_noun_in_bracketedContentContents2753_static {
    public static final BitSet FOLLOW_noun_in_bracketedContentContents2753 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_bracketedContent_in_bracketedContentContents2755_static {
    public static final BitSet FOLLOW_bracketedContent_in_bracketedContentContents2755 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_md_in_bracketedContentContents2757_static {
    public static final BitSet FOLLOW_md_in_bracketedContentContents2757 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_percentsign_in_bracketedContentContents2759_static {
    public static final BitSet FOLLOW_percentsign_in_bracketedContentContents2759 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_dash_in_bracketedContentContents2761_static {
    public static final BitSet FOLLOW_dash_in_bracketedContentContents2761 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_inAll_in_bracketedContentContents2763_static {
    public static final BitSet FOLLOW_inAll_in_bracketedContentContents2763 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_ratio_in_bracketedContentContents2765_static {
    public static final BitSet FOLLOW_ratio_in_bracketedContentContents2765 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_conjunction_in_bracketedContentContents2767_static {
    public static final BitSet FOLLOW_conjunction_in_bracketedContentContents2767 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_adj_in_bracketedContentContents2769_static {
    public static final BitSet FOLLOW_adj_in_bracketedContentContents2769 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_colon_in_bracketedContentContents2771_static {
    public static final BitSet FOLLOW_colon_in_bracketedContentContents2771 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_stop_in_bracketedContentContents2773_static {
    public static final BitSet FOLLOW_stop_in_bracketedContentContents2773 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_numeric_in_bracketedContentContents2775_static {
    public static final BitSet FOLLOW_numeric_in_bracketedContentContents2775 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEEF3FL});

    }static class FOLLOW_ratio_in_bracketedContentInMol2784_static {
    public static final BitSet FOLLOW_ratio_in_bracketedContentInMol2784 = new BitSet(new long[]{0x0000008000000000L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_bracketedContentInMolStructure1_in_bracketedContentInMol2789_static {
    public static final BitSet FOLLOW_bracketedContentInMolStructure1_in_bracketedContentInMol2789 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMolStructure2_in_bracketedContentInMol2791_static {
    public static final BitSet FOLLOW_bracketedContentInMolStructure2_in_bracketedContentInMol2791 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_bracketedContentInMolStructure12813_static {
    public static final BitSet FOLLOW_comma_in_bracketedContentInMolStructure12813 = new BitSet(new long[]{0x0000008000000000L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_bracketedContentInMolStructure2_in_bracketedContentInMolStructure12815_static {
    public static final BitSet FOLLOW_bracketedContentInMolStructure2_in_bracketedContentInMolStructure12815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_comma_in_bracketedContentInMolStructure12817_static {
    public static final BitSet FOLLOW_comma_in_bracketedContentInMolStructure12817 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_bracketedContentInMolStructure22823_static {
    public static final BitSet FOLLOW_lrb_in_bracketedContentInMolStructure22823 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_bracketedContentInMolContents1_in_bracketedContentInMolStructure22825_static {
    public static final BitSet FOLLOW_bracketedContentInMolContents1_in_bracketedContentInMolStructure22825 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFFAF3FL});

    }static class FOLLOW_bracketedContentInMolContents2_in_bracketedContentInMolStructure22827_static {
    public static final BitSet FOLLOW_bracketedContentInMolContents2_in_bracketedContentInMolStructure22827 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFFAF3FL});

    }static class FOLLOW_rrb_in_bracketedContentInMolStructure22830_static {
    public static final BitSet FOLLOW_rrb_in_bracketedContentInMolStructure22830 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_bracketedContentInMolStructure22832_static {
    public static final BitSet FOLLOW_lsqb_in_bracketedContentInMolStructure22832 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_bracketedContentInMolContents1_in_bracketedContentInMolStructure22834_static {
    public static final BitSet FOLLOW_bracketedContentInMolContents1_in_bracketedContentInMolStructure22834 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEBF3FL});

    }static class FOLLOW_bracketedContentInMolContents2_in_bracketedContentInMolStructure22836_static {
    public static final BitSet FOLLOW_bracketedContentInMolContents2_in_bracketedContentInMolStructure22836 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEBF3FL});

    }static class FOLLOW_rsqb_in_bracketedContentInMolStructure22839_static {
    public static final BitSet FOLLOW_rsqb_in_bracketedContentInMolStructure22839 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numberCompoundReference_in_bracketedContentInMolContents12845_static {
    public static final BitSet FOLLOW_numberCompoundReference_in_bracketedContentInMolContents12845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000230L});

    }static class FOLLOW_comma_in_bracketedContentInMolContents12848_static {
    public static final BitSet FOLLOW_comma_in_bracketedContentInMolContents12848 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_bracketedContentInMolContents12852_static {
    public static final BitSet FOLLOW_colon_in_bracketedContentInMolContents12852 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_bracketedContentInMolContents12858_static {
    public static final BitSet FOLLOW_stop_in_bracketedContentInMolContents12858 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMolContentsAlwaysAllowed_in_bracketedContentInMolContents12861_static {
    public static final BitSet FOLLOW_bracketedContentInMolContentsAlwaysAllowed_in_bracketedContentInMolContents12861 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_bracketedContentInMolContents22867_static {
    public static final BitSet FOLLOW_cc_in_bracketedContentInMolContents22867 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMolContentsAlwaysAllowed_in_bracketedContentInMolContents22871_static {
    public static final BitSet FOLLOW_bracketedContentInMolContentsAlwaysAllowed_in_bracketedContentInMolContents22871 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_bracketedContentInMolContentsAlwaysAllowed2878_static {
    public static final BitSet FOLLOW_verb_in_bracketedContentInMolContentsAlwaysAllowed2878 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_bracketedContentInMolContentsAlwaysAllowed2880_static {
    public static final BitSet FOLLOW_quantity2Node_in_bracketedContentInMolContentsAlwaysAllowed2880 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_bracketedContentInMolContentsAlwaysAllowed2882_static {
    public static final BitSet FOLLOW_oscarCompound_in_bracketedContentInMolContentsAlwaysAllowed2882 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_alphanumericOrIdentifierCompoundReference_in_bracketedContentInMolContentsAlwaysAllowed2884_static {
    public static final BitSet FOLLOW_alphanumericOrIdentifierCompoundReference_in_bracketedContentInMolContentsAlwaysAllowed2884 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_bracketedContentInMolContentsAlwaysAllowed2886_static {
    public static final BitSet FOLLOW_ratio_in_bracketedContentInMolContentsAlwaysAllowed2886 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_bracketedContentInMolContentsAlwaysAllowed2888_static {
    public static final BitSet FOLLOW_cd_in_bracketedContentInMolContentsAlwaysAllowed2888 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_bracketedContentInMolContentsAlwaysAllowed2890_static {
    public static final BitSet FOLLOW_md_in_bracketedContentInMolContentsAlwaysAllowed2890 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percentsign_in_bracketedContentInMolContentsAlwaysAllowed2892_static {
    public static final BitSet FOLLOW_percentsign_in_bracketedContentInMolContentsAlwaysAllowed2892 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_bracketedContentInMolContentsAlwaysAllowed2894_static {
    public static final BitSet FOLLOW_dash_in_bracketedContentInMolContentsAlwaysAllowed2894 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_bracketedContentInMolContentsAlwaysAllowed2896_static {
    public static final BitSet FOLLOW_inAll_in_bracketedContentInMolContentsAlwaysAllowed2896 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_bracketedContentInMolContentsAlwaysAllowed2898_static {
    public static final BitSet FOLLOW_comma_in_bracketedContentInMolContentsAlwaysAllowed2898 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_bracketedContentInMolContentsAlwaysAllowed2900_static {
    public static final BitSet FOLLOW_adj_in_bracketedContentInMolContentsAlwaysAllowed2900 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_bracketedContentInMolContentsAlwaysAllowed2902_static {
    public static final BitSet FOLLOW_colon_in_bracketedContentInMolContentsAlwaysAllowed2902 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_bracketedContentInMolContentsAlwaysAllowed2904_static {
    public static final BitSet FOLLOW_stop_in_bracketedContentInMolContentsAlwaysAllowed2904 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_bracketedContentInMolContentsAlwaysAllowed2906_static {
    public static final BitSet FOLLOW_noun_in_bracketedContentInMolContentsAlwaysAllowed2906 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMol_in_bracketedContentInMolContentsAlwaysAllowed2908_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_bracketedContentInMolContentsAlwaysAllowed2908 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infrom_in_fromProcedure2916_static {
    public static final BitSet FOLLOW_infrom_in_fromProcedure2916 = new BitSet(new long[]{0x8000638000000000L,0x0000000002183A80L,0x000000001384A824L});

    }static class FOLLOW_inof_in_fromProcedure2922_static {
    public static final BitSet FOLLOW_inof_in_fromProcedure2922 = new BitSet(new long[]{0x8000638000000000L,0x0000000002183A80L,0x000000001384A824L});

    }static class FOLLOW_vbyield_in_fromProcedure2929_static {
    public static final BitSet FOLLOW_vbyield_in_fromProcedure2929 = new BitSet(new long[]{0x0844000000000000L});

    }static class FOLLOW_vbsynthesize_in_fromProcedure2931_static {
    public static final BitSet FOLLOW_vbsynthesize_in_fromProcedure2931 = new BitSet(new long[]{0x0844000000000000L});

    }static class FOLLOW_inin_in_fromProcedure2935_static {
    public static final BitSet FOLLOW_inin_in_fromProcedure2935 = new BitSet(new long[]{0x8000638000000000L,0x0000000002183A80L,0x000000001384A824L});

    }static class FOLLOW_inby_in_fromProcedure2937_static {
    public static final BitSet FOLLOW_inby_in_fromProcedure2937 = new BitSet(new long[]{0x8000638000000000L,0x0000000002183A80L,0x000000001384A824L});

    }static class FOLLOW_infrom_in_fromProcedure2939_static {
    public static final BitSet FOLLOW_infrom_in_fromProcedure2939 = new BitSet(new long[]{0x8000638000000000L,0x0000000002183A80L,0x000000001384A824L});

    }static class FOLLOW_procedureNode_in_fromProcedure2943_static {
    public static final BitSet FOLLOW_procedureNode_in_fromProcedure2943 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_method_in_procedureNode2950_static {
    public static final BitSet FOLLOW_method_in_procedureNode2950 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_method2971_static {
    public static final BitSet FOLLOW_nngeneral_in_method2971 = new BitSet(new long[]{0x8000638000000000L,0x0000000002103A80L,0x000000001384A824L});

    }static class FOLLOW_nn_in_method2973_static {
    public static final BitSet FOLLOW_nn_in_method2973 = new BitSet(new long[]{0x8000638000000000L,0x0000000002103A80L,0x000000001384A824L});

    }static class FOLLOW_nnmethod_in_method2977_static {
    public static final BitSet FOLLOW_nnmethod_in_method2977 = new BitSet(new long[]{0x8900678000000002L,0x0000000006183A90L,0x000000005384A834L});

    }static class FOLLOW_allIdentifierTypes_in_method2979_static {
    public static final BitSet FOLLOW_allIdentifierTypes_in_method2979 = new BitSet(new long[]{0x8900638000000002L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_nnexample_in_method2984_static {
    public static final BitSet FOLLOW_nnexample_in_method2984 = new BitSet(new long[]{0x8000678000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_allIdentifierTypes_in_method2986_static {
    public static final BitSet FOLLOW_allIdentifierTypes_in_method2986 = new BitSet(new long[]{0x8900638000000002L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_comma_in_method2992_static {
    public static final BitSet FOLLOW_comma_in_method2992 = new BitSet(new long[]{0x8900638000000000L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_colon_in_method2995_static {
    public static final BitSet FOLLOW_colon_in_method2995 = new BitSet(new long[]{0x8900638000000000L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_inof_in_method2998_static {
    public static final BitSet FOLLOW_inof_in_method2998 = new BitSet(new long[]{0x8900638000000000L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_infrom_in_method3002_static {
    public static final BitSet FOLLOW_infrom_in_method3002 = new BitSet(new long[]{0x8900638000000000L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_submethod_in_method3006_static {
    public static final BitSet FOLLOW_submethod_in_method3006 = new BitSet(new long[]{0x8900638000000002L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_lrb_in_method3010_static {
    public static final BitSet FOLLOW_lrb_in_method3010 = new BitSet(new long[]{0x8900638000000000L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_submethod_in_method3012_static {
    public static final BitSet FOLLOW_submethod_in_method3012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_method3014_static {
    public static final BitSet FOLLOW_rrb_in_method3014 = new BitSet(new long[]{0x8900638000000002L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_nnmethod_in_submethod3025_static {
    public static final BitSet FOLLOW_nnmethod_in_submethod3025 = new BitSet(new long[]{0x8000678000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_nnexample_in_submethod3027_static {
    public static final BitSet FOLLOW_nnexample_in_submethod3027 = new BitSet(new long[]{0x8000678000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_allIdentifierTypes_in_submethod3030_static {
    public static final BitSet FOLLOW_allIdentifierTypes_in_submethod3030 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_referenceToExampleCompound3039_static {
    public static final BitSet FOLLOW_nnexample_in_referenceToExampleCompound3039 = new BitSet(new long[]{0x8000678000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_allIdentifierTypes_in_referenceToExampleCompound3041_static {
    public static final BitSet FOLLOW_allIdentifierTypes_in_referenceToExampleCompound3041 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_advAdj3059_static {
    public static final BitSet FOLLOW_adv_in_advAdj3059 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_advAdj3061_static {
    public static final BitSet FOLLOW_adj_in_advAdj3061 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_range3068_static {
    public static final BitSet FOLLOW_numeric_in_range3068 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_range3070_static {
    public static final BitSet FOLLOW_dash_in_range3070 = new BitSet(new long[]{0x0000008000000000L,0x0000000000000000L,0x0000000000042000L});

    }static class FOLLOW_numeric_in_range3072_static {
    public static final BitSet FOLLOW_numeric_in_range3072 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycleStructure_in_cycles3079_static {
    public static final BitSet FOLLOW_cycleStructure_in_cycles3079 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_cycleStructure3096_static {
    public static final BitSet FOLLOW_cd_in_cycleStructure3096 = new BitSet(new long[]{0x8000638000000000L,0x0000000002122280L,0x000000001384A824L});

    }static class FOLLOW_dashNN_in_cycleStructure3098_static {
    public static final BitSet FOLLOW_dashNN_in_cycleStructure3098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_nncycle_in_cycleStructure3101_static {
    public static final BitSet FOLLOW_nncycle_in_cycleStructure3101 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_dashNN3109_static {
    public static final BitSet FOLLOW_adj_in_dashNN3109 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_nn_in_dashNN3111_static {
    public static final BitSet FOLLOW_nn_in_dashNN3111 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_cd_in_dashNN3113_static {
    public static final BitSet FOLLOW_cd_in_dashNN3113 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_dashNN3117_static {
    public static final BitSet FOLLOW_dash_in_dashNN3117 = new BitSet(new long[]{0x8000638000000000L,0x0000000002102280L,0x000000001384A824L});

    }static class FOLLOW_adj_in_dashNN3120_static {
    public static final BitSet FOLLOW_adj_in_dashNN3120 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_nn_in_dashNN3122_static {
    public static final BitSet FOLLOW_nn_in_dashNN3122 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_cd_in_dashNN3124_static {
    public static final BitSet FOLLOW_cd_in_dashNN3124 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_lrb_in_ratioOrBracketedRatio3135_static {
    public static final BitSet FOLLOW_lrb_in_ratioOrBracketedRatio3135 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_ratio_in_ratioOrBracketedRatio3137_static {
    public static final BitSet FOLLOW_ratio_in_ratioOrBracketedRatio3137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_ratioOrBracketedRatio3139_static {
    public static final BitSet FOLLOW_rrb_in_ratioOrBracketedRatio3139 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_ratioOrBracketedRatio3143_static {
    public static final BitSet FOLLOW_ratio_in_ratioOrBracketedRatio3143 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdRatio_in_ratio3150_static {
    public static final BitSet FOLLOW_cdRatio_in_ratio3150 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_cdRatio3165_static {
    public static final BitSet FOLLOW_cd_in_cdRatio3165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_colon_in_cdRatio3168_static {
    public static final BitSet FOLLOW_colon_in_cdRatio3168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_cdRatio3170_static {
    public static final BitSet FOLLOW_cd_in_cdRatio3170 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_citationStructure_in_citation3182_static {
    public static final BitSet FOLLOW_citationStructure_in_citation3182 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_citation3184_static {
    public static final BitSet FOLLOW_comma_in_citation3184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_citationContent_in_citation3186_static {
    public static final BitSet FOLLOW_citationContent_in_citation3186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_comma_in_citation3188_static {
    public static final BitSet FOLLOW_comma_in_citation3188 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citationContent_in_citationStructure3196_static {
    public static final BitSet FOLLOW_citationContent_in_citationStructure3196 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_citationContent3212_static {
    public static final BitSet FOLLOW_lrb_in_citationContent3212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_nnp_in_citationContent3215_static {
    public static final BitSet FOLLOW_nnp_in_citationContent3215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_fw_in_citationContent3217_static {
    public static final BitSet FOLLOW_fw_in_citationContent3217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_cd_in_citationContent3219_static {
    public static final BitSet FOLLOW_cd_in_citationContent3219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_conjunction_in_citationContent3221_static {
    public static final BitSet FOLLOW_conjunction_in_citationContent3221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_nnp_in_citationContent3225_static {
    public static final BitSet FOLLOW_nnp_in_citationContent3225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040270020L});

    }static class FOLLOW_fw_in_citationContent3227_static {
    public static final BitSet FOLLOW_fw_in_citationContent3227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040270020L});

    }static class FOLLOW_cd_in_citationContent3229_static {
    public static final BitSet FOLLOW_cd_in_citationContent3229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040270020L});

    }static class FOLLOW_conjunction_in_citationContent3231_static {
    public static final BitSet FOLLOW_conjunction_in_citationContent3231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040270020L});

    }static class FOLLOW_rrb_in_citationContent3235_static {
    public static final BitSet FOLLOW_rrb_in_citationContent3235 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_allIdentifierTypesOtherThanCD_in_allIdentifierTypes3245_static {
    public static final BitSet FOLLOW_allIdentifierTypesOtherThanCD_in_allIdentifierTypes3245 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_allIdentifierTypes3249_static {
    public static final BitSet FOLLOW_cd_in_allIdentifierTypes3249 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_allIdentifierTypesOtherThanCD3258_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_allIdentifierTypesOtherThanCD3258 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_allIdentifierTypesOtherThanCD3260_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_allIdentifierTypesOtherThanCD3260 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_allIdentifierTypesOtherThanCD3262_static {
    public static final BitSet FOLLOW_cdAlphanum_in_allIdentifierTypesOtherThanCD3262 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedNumeric_in_allIdentifierTypesOtherThanCD3265_static {
    public static final BitSet FOLLOW_bracketedNumeric_in_allIdentifierTypesOtherThanCD3265 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_numericOrBracketedNumeric3273_static {
    public static final BitSet FOLLOW_numeric_in_numericOrBracketedNumeric3273 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric3277_static {
    public static final BitSet FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric3277 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_bracketedNumeric3285_static {
    public static final BitSet FOLLOW_lrb_in_bracketedNumeric3285 = new BitSet(new long[]{0x0000008000000000L,0x0000000000000000L,0x0000000000042000L});

    }static class FOLLOW_numeric_in_bracketedNumeric3287_static {
    public static final BitSet FOLLOW_numeric_in_bracketedNumeric3287 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_bracketedNumeric3289_static {
    public static final BitSet FOLLOW_rrb_in_bracketedNumeric3289 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_squareBracketedReference3296_static {
    public static final BitSet FOLLOW_lsqb_in_squareBracketedReference3296 = new BitSet(new long[]{0x0000008000000000L,0x0000000000000000L,0x0000000000042000L});

    }static class FOLLOW_numeric_in_squareBracketedReference3298_static {
    public static final BitSet FOLLOW_numeric_in_squareBracketedReference3298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_rsqb_in_squareBracketedReference3300_static {
    public static final BitSet FOLLOW_rsqb_in_squareBracketedReference3300 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_identifierOrBracketedIdentifier3307_static {
    public static final BitSet FOLLOW_cd_in_identifierOrBracketedIdentifier3307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});

    }static class FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier3310_static {
    public static final BitSet FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier3310 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier3314_static {
    public static final BitSet FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier3314 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_bracketedIdentifier3322_static {
    public static final BitSet FOLLOW_lrb_in_bracketedIdentifier3322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000042000L});

    }static class FOLLOW_cd_in_bracketedIdentifier3324_static {
    public static final BitSet FOLLOW_cd_in_bracketedIdentifier3324 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});

    }static class FOLLOW_nnidentifier_in_bracketedIdentifier3327_static {
    public static final BitSet FOLLOW_nnidentifier_in_bracketedIdentifier3327 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_bracketedIdentifier3329_static {
    public static final BitSet FOLLOW_rrb_in_bracketedIdentifier3329 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_adj3337_static {
    public static final BitSet FOLLOW_jj_in_adj3337 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjr_in_adj3339_static {
    public static final BitSet FOLLOW_jjr_in_adj3339 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjs_in_adj3341_static {
    public static final BitSet FOLLOW_jjs_in_adj3341 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjchem_in_adj3343_static {
    public static final BitSet FOLLOW_jjchem_in_adj3343 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcj_in_adj3345_static {
    public static final BitSet FOLLOW_oscarcj_in_adj3345 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarrn_in_adj3347_static {
    public static final BitSet FOLLOW_oscarrn_in_adj3347 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rb_in_adv3354_static {
    public static final BitSet FOLLOW_rb_in_adv3354 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbr_in_adv3356_static {
    public static final BitSet FOLLOW_rbr_in_adv3356 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rp_in_adv3358_static {
    public static final BitSet FOLLOW_rp_in_adv3358 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbs_in_adv3360_static {
    public static final BitSet FOLLOW_rbs_in_adv3360 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wdt_in_clause3367_static {
    public static final BitSet FOLLOW_wdt_in_clause3367 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wp_poss_in_clause3369_static {
    public static final BitSet FOLLOW_wp_poss_in_clause3369 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wrb_in_clause3371_static {
    public static final BitSet FOLLOW_wrb_in_clause3371 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ex_in_clause3373_static {
    public static final BitSet FOLLOW_ex_in_clause3373 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pdt_in_clause3375_static {
    public static final BitSet FOLLOW_pdt_in_clause3375 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wp_in_clause3377_static {
    public static final BitSet FOLLOW_wp_in_clause3377 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_conjunction3384_static {
    public static final BitSet FOLLOW_cc_in_conjunction3384 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_conjunction3386_static {
    public static final BitSet FOLLOW_comma_in_conjunction3386 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_in_in_inAll3393_static {
    public static final BitSet FOLLOW_in_in_inAll3393 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inafter_in_inAll3395_static {
    public static final BitSet FOLLOW_inafter_in_inAll3395 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_inAll3397_static {
    public static final BitSet FOLLOW_inas_in_inAll3397 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inbefore_in_inAll3399_static {
    public static final BitSet FOLLOW_inbefore_in_inAll3399 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inby_in_inAll3401_static {
    public static final BitSet FOLLOW_inby_in_inAll3401 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infor_in_inAll3403_static {
    public static final BitSet FOLLOW_infor_in_inAll3403 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infrom_in_inAll3405_static {
    public static final BitSet FOLLOW_infrom_in_inAll3405 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_inAll3407_static {
    public static final BitSet FOLLOW_inin_in_inAll3407 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ininto_in_inAll3409_static {
    public static final BitSet FOLLOW_ininto_in_inAll3409 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_inAll3411_static {
    public static final BitSet FOLLOW_inof_in_inAll3411 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_inAll3413_static {
    public static final BitSet FOLLOW_inoff_in_inAll3413 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inon_in_inAll3415_static {
    public static final BitSet FOLLOW_inon_in_inAll3415 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inover_in_inAll3417_static {
    public static final BitSet FOLLOW_inover_in_inAll3417 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_inAll3419_static {
    public static final BitSet FOLLOW_inunder_in_inAll3419 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_invia_in_inAll3421_static {
    public static final BitSet FOLLOW_invia_in_inAll3421 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwith_in_inAll3423_static {
    public static final BitSet FOLLOW_inwith_in_inAll3423 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwithout_in_inAll3425_static {
    public static final BitSet FOLLOW_inwithout_in_inAll3425 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_inAll3427_static {
    public static final BitSet FOLLOW_to_in_inAll3427 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_in_in_inMost3434_static {
    public static final BitSet FOLLOW_in_in_inMost3434 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_inMost3436_static {
    public static final BitSet FOLLOW_inas_in_inMost3436 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inbefore_in_inMost3438_static {
    public static final BitSet FOLLOW_inbefore_in_inMost3438 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inby_in_inMost3440_static {
    public static final BitSet FOLLOW_inby_in_inMost3440 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infor_in_inMost3442_static {
    public static final BitSet FOLLOW_infor_in_inMost3442 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infrom_in_inMost3444_static {
    public static final BitSet FOLLOW_infrom_in_inMost3444 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_inMost3446_static {
    public static final BitSet FOLLOW_inin_in_inMost3446 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ininto_in_inMost3448_static {
    public static final BitSet FOLLOW_ininto_in_inMost3448 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_inMost3450_static {
    public static final BitSet FOLLOW_inof_in_inMost3450 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_inMost3452_static {
    public static final BitSet FOLLOW_inoff_in_inMost3452 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inon_in_inMost3454_static {
    public static final BitSet FOLLOW_inon_in_inMost3454 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inover_in_inMost3456_static {
    public static final BitSet FOLLOW_inover_in_inMost3456 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_inMost3458_static {
    public static final BitSet FOLLOW_inunder_in_inMost3458 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_invia_in_inMost3460_static {
    public static final BitSet FOLLOW_invia_in_inMost3460 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwith_in_inMost3462_static {
    public static final BitSet FOLLOW_inwith_in_inMost3462 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwithout_in_inMost3464_static {
    public static final BitSet FOLLOW_inwithout_in_inMost3464 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_inMost3466_static {
    public static final BitSet FOLLOW_to_in_inMost3466 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_numeric3473_static {
    public static final BitSet FOLLOW_cd_in_numeric3473 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_numeric3475_static {
    public static final BitSet FOLLOW_cdAlphanum_in_numeric3475 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_38_in_nnplabel3484_static {
    public static final BitSet FOLLOW_38_in_nnplabel3484 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnplabel3486_static {
    public static final BitSet FOLLOW_TOKEN_in_nnplabel3486 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_39_in_cdAlphanum3500_static {
    public static final BitSet FOLLOW_39_in_cdAlphanum3500 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cdAlphanum3502_static {
    public static final BitSet FOLLOW_TOKEN_in_cdAlphanum3502 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_40_in_oscarcj3515_static {
    public static final BitSet FOLLOW_40_in_oscarcj3515 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarcj3517_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarcj3517 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_41_in_oscarrn3530_static {
    public static final BitSet FOLLOW_41_in_oscarrn3530 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarrn3532_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarrn3532 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_42_in_oscarase3545_static {
    public static final BitSet FOLLOW_42_in_oscarase3545 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarase3547_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarase3547 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_43_in_tmunicode3560_static {
    public static final BitSet FOLLOW_43_in_tmunicode3560 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_tmunicode3562_static {
    public static final BitSet FOLLOW_TOKEN_in_tmunicode3562 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_44_in_cdunicode3575_static {
    public static final BitSet FOLLOW_44_in_cdunicode3575 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cdunicode3577_static {
    public static final BitSet FOLLOW_TOKEN_in_cdunicode3577 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_45_in_jjchem3590_static {
    public static final BitSet FOLLOW_45_in_jjchem3590 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjchem3592_static {
    public static final BitSet FOLLOW_TOKEN_in_jjchem3592 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_46_in_jjcomp3605_static {
    public static final BitSet FOLLOW_46_in_jjcomp3605 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjcomp3607_static {
    public static final BitSet FOLLOW_TOKEN_in_jjcomp3607 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_47_in_inas3621_static {
    public static final BitSet FOLLOW_47_in_inas3621 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inas3623_static {
    public static final BitSet FOLLOW_TOKEN_in_inas3623 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_48_in_inbefore3636_static {
    public static final BitSet FOLLOW_48_in_inbefore3636 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inbefore3638_static {
    public static final BitSet FOLLOW_TOKEN_in_inbefore3638 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_49_in_inafter3651_static {
    public static final BitSet FOLLOW_49_in_inafter3651 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inafter3653_static {
    public static final BitSet FOLLOW_TOKEN_in_inafter3653 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_50_in_inin3666_static {
    public static final BitSet FOLLOW_50_in_inin3666 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inin3668_static {
    public static final BitSet FOLLOW_TOKEN_in_inin3668 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_51_in_ininto3681_static {
    public static final BitSet FOLLOW_51_in_ininto3681 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_ininto3683_static {
    public static final BitSet FOLLOW_TOKEN_in_ininto3683 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_52_in_inwith3696_static {
    public static final BitSet FOLLOW_52_in_inwith3696 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inwith3698_static {
    public static final BitSet FOLLOW_TOKEN_in_inwith3698 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_53_in_inwithout3711_static {
    public static final BitSet FOLLOW_53_in_inwithout3711 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inwithout3713_static {
    public static final BitSet FOLLOW_TOKEN_in_inwithout3713 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_54_in_inby3726_static {
    public static final BitSet FOLLOW_54_in_inby3726 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inby3728_static {
    public static final BitSet FOLLOW_TOKEN_in_inby3728 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_55_in_invia3741_static {
    public static final BitSet FOLLOW_55_in_invia3741 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_invia3743_static {
    public static final BitSet FOLLOW_TOKEN_in_invia3743 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_56_in_inof3756_static {
    public static final BitSet FOLLOW_56_in_inof3756 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inof3758_static {
    public static final BitSet FOLLOW_TOKEN_in_inof3758 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_57_in_inon3771_static {
    public static final BitSet FOLLOW_57_in_inon3771 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inon3773_static {
    public static final BitSet FOLLOW_TOKEN_in_inon3773 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_58_in_infor3786_static {
    public static final BitSet FOLLOW_58_in_infor3786 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_infor3788_static {
    public static final BitSet FOLLOW_TOKEN_in_infor3788 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_59_in_infrom3801_static {
    public static final BitSet FOLLOW_59_in_infrom3801 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_infrom3803_static {
    public static final BitSet FOLLOW_TOKEN_in_infrom3803 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_60_in_inunder3816_static {
    public static final BitSet FOLLOW_60_in_inunder3816 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inunder3818_static {
    public static final BitSet FOLLOW_TOKEN_in_inunder3818 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_61_in_inover3831_static {
    public static final BitSet FOLLOW_61_in_inover3831 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inover3833_static {
    public static final BitSet FOLLOW_TOKEN_in_inover3833 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_62_in_inoff3846_static {
    public static final BitSet FOLLOW_62_in_inoff3846 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inoff3848_static {
    public static final BitSet FOLLOW_TOKEN_in_inoff3848 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_63_in_nnstate3863_static {
    public static final BitSet FOLLOW_63_in_nnstate3863 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnstate3865_static {
    public static final BitSet FOLLOW_TOKEN_in_nnstate3865 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_64_in_nntime3878_static {
    public static final BitSet FOLLOW_64_in_nntime3878 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nntime3880_static {
    public static final BitSet FOLLOW_TOKEN_in_nntime3880 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_65_in_nnmass3893_static {
    public static final BitSet FOLLOW_65_in_nnmass3893 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmass3895_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmass3895 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_66_in_nnamount3908_static {
    public static final BitSet FOLLOW_66_in_nnamount3908 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnamount3910_static {
    public static final BitSet FOLLOW_TOKEN_in_nnamount3910 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_67_in_nnmolar3923_static {
    public static final BitSet FOLLOW_67_in_nnmolar3923 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmolar3925_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmolar3925 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_68_in_nnatmosphere3938_static {
    public static final BitSet FOLLOW_68_in_nnatmosphere3938 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnatmosphere3940_static {
    public static final BitSet FOLLOW_TOKEN_in_nnatmosphere3940 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_69_in_nneq3953_static {
    public static final BitSet FOLLOW_69_in_nneq3953 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nneq3955_static {
    public static final BitSet FOLLOW_TOKEN_in_nneq3955 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_70_in_nnvol3968_static {
    public static final BitSet FOLLOW_70_in_nnvol3968 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnvol3970_static {
    public static final BitSet FOLLOW_TOKEN_in_nnvol3970 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_71_in_nnchementity3983_static {
    public static final BitSet FOLLOW_71_in_nnchementity3983 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnchementity3985_static {
    public static final BitSet FOLLOW_TOKEN_in_nnchementity3985 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_72_in_nntemp3998_static {
    public static final BitSet FOLLOW_72_in_nntemp3998 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nntemp4000_static {
    public static final BitSet FOLLOW_TOKEN_in_nntemp4000 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_73_in_nnph4013_static {
    public static final BitSet FOLLOW_73_in_nnph4013 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnph4015_static {
    public static final BitSet FOLLOW_TOKEN_in_nnph4015 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_74_in_nnflash4028_static {
    public static final BitSet FOLLOW_74_in_nnflash4028 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnflash4030_static {
    public static final BitSet FOLLOW_TOKEN_in_nnflash4030 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_75_in_nngeneral4043_static {
    public static final BitSet FOLLOW_75_in_nngeneral4043 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nngeneral4045_static {
    public static final BitSet FOLLOW_TOKEN_in_nngeneral4045 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_76_in_nnmethod4058_static {
    public static final BitSet FOLLOW_76_in_nnmethod4058 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmethod4060_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmethod4060 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_77_in_nnpressure4073_static {
    public static final BitSet FOLLOW_77_in_nnpressure4073 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnpressure4075_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpressure4075 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_78_in_nncolumn4088_static {
    public static final BitSet FOLLOW_78_in_nncolumn4088 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nncolumn4090_static {
    public static final BitSet FOLLOW_TOKEN_in_nncolumn4090 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_79_in_nnchromatography4103_static {
    public static final BitSet FOLLOW_79_in_nnchromatography4103 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnchromatography4105_static {
    public static final BitSet FOLLOW_TOKEN_in_nnchromatography4105 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_80_in_nnvacuum4118_static {
    public static final BitSet FOLLOW_80_in_nnvacuum4118 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnvacuum4120_static {
    public static final BitSet FOLLOW_TOKEN_in_nnvacuum4120 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_81_in_nncycle4133_static {
    public static final BitSet FOLLOW_81_in_nncycle4133 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nncycle4135_static {
    public static final BitSet FOLLOW_TOKEN_in_nncycle4135 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_82_in_nntimes4148_static {
    public static final BitSet FOLLOW_82_in_nntimes4148 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nntimes4150_static {
    public static final BitSet FOLLOW_TOKEN_in_nntimes4150 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_83_in_nnexample4163_static {
    public static final BitSet FOLLOW_83_in_nnexample4163 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnexample4165_static {
    public static final BitSet FOLLOW_TOKEN_in_nnexample4165 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_84_in_oscarcm4180_static {
    public static final BitSet FOLLOW_84_in_oscarcm4180 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarcm4182_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarcm4182 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_85_in_vbuse4197_static {
    public static final BitSet FOLLOW_85_in_vbuse4197 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbuse4199_static {
    public static final BitSet FOLLOW_TOKEN_in_vbuse4199 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_86_in_vbchange4212_static {
    public static final BitSet FOLLOW_86_in_vbchange4212 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbchange4214_static {
    public static final BitSet FOLLOW_TOKEN_in_vbchange4214 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_87_in_vbsubmerge4227_static {
    public static final BitSet FOLLOW_87_in_vbsubmerge4227 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsubmerge4229_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsubmerge4229 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_88_in_vbsubject4242_static {
    public static final BitSet FOLLOW_88_in_vbsubject4242 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsubject4244_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsubject4244 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_89_in_nnadd4259_static {
    public static final BitSet FOLLOW_89_in_nnadd4259 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnadd4261_static {
    public static final BitSet FOLLOW_TOKEN_in_nnadd4261 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_90_in_nnmixture4274_static {
    public static final BitSet FOLLOW_90_in_nnmixture4274 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmixture4276_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmixture4276 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_91_in_vbdilute4289_static {
    public static final BitSet FOLLOW_91_in_vbdilute4289 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdilute4291_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdilute4291 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_92_in_vbadd4304_static {
    public static final BitSet FOLLOW_92_in_vbadd4304 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbadd4306_static {
    public static final BitSet FOLLOW_TOKEN_in_vbadd4306 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_93_in_vbcharge4319_static {
    public static final BitSet FOLLOW_93_in_vbcharge4319 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbcharge4321_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcharge4321 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_94_in_vbcontain4334_static {
    public static final BitSet FOLLOW_94_in_vbcontain4334 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbcontain4336_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcontain4336 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_95_in_vbdrop4349_static {
    public static final BitSet FOLLOW_95_in_vbdrop4349 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdrop4351_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdrop4351 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_96_in_vbfill4364_static {
    public static final BitSet FOLLOW_96_in_vbfill4364 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbfill4366_static {
    public static final BitSet FOLLOW_TOKEN_in_vbfill4366 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_97_in_vbsuspend4379_static {
    public static final BitSet FOLLOW_97_in_vbsuspend4379 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsuspend4381_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsuspend4381 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_98_in_vbtreat4394_static {
    public static final BitSet FOLLOW_98_in_vbtreat4394 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbtreat4396_static {
    public static final BitSet FOLLOW_TOKEN_in_vbtreat4396 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_99_in_vbapparatus4411_static {
    public static final BitSet FOLLOW_99_in_vbapparatus4411 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbapparatus4413_static {
    public static final BitSet FOLLOW_TOKEN_in_vbapparatus4413 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_100_in_nnapparatus4426_static {
    public static final BitSet FOLLOW_100_in_nnapparatus4426 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnapparatus4428_static {
    public static final BitSet FOLLOW_TOKEN_in_nnapparatus4428 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_101_in_vbconcentrate4443_static {
    public static final BitSet FOLLOW_101_in_vbconcentrate4443 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbconcentrate4445_static {
    public static final BitSet FOLLOW_TOKEN_in_vbconcentrate4445 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_102_in_nnconcentrate4458_static {
    public static final BitSet FOLLOW_102_in_nnconcentrate4458 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnconcentrate4460_static {
    public static final BitSet FOLLOW_TOKEN_in_nnconcentrate4460 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_103_in_vbcool4475_static {
    public static final BitSet FOLLOW_103_in_vbcool4475 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbcool4477_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcool4477 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_104_in_vbdegass4492_static {
    public static final BitSet FOLLOW_104_in_vbdegass4492 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdegass4494_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdegass4494 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_105_in_vbdissolve4509_static {
    public static final BitSet FOLLOW_105_in_vbdissolve4509 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdissolve4511_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdissolve4511 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_106_in_vbdry4526_static {
    public static final BitSet FOLLOW_106_in_vbdry4526 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdry4528_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdry4528 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_107_in_nndry4541_static {
    public static final BitSet FOLLOW_107_in_nndry4541 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nndry4543_static {
    public static final BitSet FOLLOW_TOKEN_in_nndry4543 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_108_in_vbextract4558_static {
    public static final BitSet FOLLOW_108_in_vbextract4558 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbextract4560_static {
    public static final BitSet FOLLOW_TOKEN_in_vbextract4560 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_109_in_nnextract4573_static {
    public static final BitSet FOLLOW_109_in_nnextract4573 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnextract4575_static {
    public static final BitSet FOLLOW_TOKEN_in_nnextract4575 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_110_in_vbfilter4590_static {
    public static final BitSet FOLLOW_110_in_vbfilter4590 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbfilter4592_static {
    public static final BitSet FOLLOW_TOKEN_in_vbfilter4592 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_111_in_nnfilter4605_static {
    public static final BitSet FOLLOW_111_in_nnfilter4605 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnfilter4607_static {
    public static final BitSet FOLLOW_TOKEN_in_nnfilter4607 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_112_in_vbheat4622_static {
    public static final BitSet FOLLOW_112_in_vbheat4622 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbheat4624_static {
    public static final BitSet FOLLOW_TOKEN_in_vbheat4624 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_113_in_vbincrease4637_static {
    public static final BitSet FOLLOW_113_in_vbincrease4637 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbincrease4639_static {
    public static final BitSet FOLLOW_TOKEN_in_vbincrease4639 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_114_in_vbimmerse4654_static {
    public static final BitSet FOLLOW_114_in_vbimmerse4654 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbimmerse4656_static {
    public static final BitSet FOLLOW_TOKEN_in_vbimmerse4656 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_115_in_vbpartition4671_static {
    public static final BitSet FOLLOW_115_in_vbpartition4671 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbpartition4673_static {
    public static final BitSet FOLLOW_TOKEN_in_vbpartition4673 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_116_in_vbprecipitate4688_static {
    public static final BitSet FOLLOW_116_in_vbprecipitate4688 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbprecipitate4690_static {
    public static final BitSet FOLLOW_TOKEN_in_vbprecipitate4690 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_117_in_nnprecipitate4703_static {
    public static final BitSet FOLLOW_117_in_nnprecipitate4703 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnprecipitate4705_static {
    public static final BitSet FOLLOW_TOKEN_in_nnprecipitate4705 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_118_in_vbpurify4720_static {
    public static final BitSet FOLLOW_118_in_vbpurify4720 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbpurify4722_static {
    public static final BitSet FOLLOW_TOKEN_in_vbpurify4722 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_119_in_nnpurify4735_static {
    public static final BitSet FOLLOW_119_in_nnpurify4735 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnpurify4737_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpurify4737 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_120_in_vbquench4752_static {
    public static final BitSet FOLLOW_120_in_vbquench4752 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbquench4754_static {
    public static final BitSet FOLLOW_TOKEN_in_vbquench4754 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_121_in_vbrecover4769_static {
    public static final BitSet FOLLOW_121_in_vbrecover4769 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbrecover4771_static {
    public static final BitSet FOLLOW_TOKEN_in_vbrecover4771 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_122_in_vbremove4786_static {
    public static final BitSet FOLLOW_122_in_vbremove4786 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbremove4788_static {
    public static final BitSet FOLLOW_TOKEN_in_vbremove4788 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_123_in_nnremove4801_static {
    public static final BitSet FOLLOW_123_in_nnremove4801 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnremove4803_static {
    public static final BitSet FOLLOW_TOKEN_in_nnremove4803 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_124_in_vbstir4818_static {
    public static final BitSet FOLLOW_124_in_vbstir4818 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbstir4820_static {
    public static final BitSet FOLLOW_TOKEN_in_vbstir4820 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_125_in_vbsynthesize4835_static {
    public static final BitSet FOLLOW_125_in_vbsynthesize4835 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsynthesize4837_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsynthesize4837 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_126_in_nnsynthesize4850_static {
    public static final BitSet FOLLOW_126_in_nnsynthesize4850 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnsynthesize4852_static {
    public static final BitSet FOLLOW_TOKEN_in_nnsynthesize4852 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_127_in_vbwait4867_static {
    public static final BitSet FOLLOW_127_in_vbwait4867 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbwait4869_static {
    public static final BitSet FOLLOW_TOKEN_in_vbwait4869 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_128_in_vbwash4884_static {
    public static final BitSet FOLLOW_128_in_vbwash4884 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbwash4886_static {
    public static final BitSet FOLLOW_TOKEN_in_vbwash4886 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_129_in_vbyield4901_static {
    public static final BitSet FOLLOW_129_in_vbyield4901 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbyield4903_static {
    public static final BitSet FOLLOW_TOKEN_in_vbyield4903 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_130_in_nnyield4918_static {
    public static final BitSet FOLLOW_130_in_nnyield4918 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnyield4920_static {
    public static final BitSet FOLLOW_TOKEN_in_nnyield4920 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_131_in_rbconj4936_static {
    public static final BitSet FOLLOW_131_in_rbconj4936 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rbconj4938_static {
    public static final BitSet FOLLOW_TOKEN_in_rbconj4938 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_132_in_colon4951_static {
    public static final BitSet FOLLOW_132_in_colon4951 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_colon4953_static {
    public static final BitSet FOLLOW_TOKEN_in_colon4953 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_133_in_comma4966_static {
    public static final BitSet FOLLOW_133_in_comma4966 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_comma4968_static {
    public static final BitSet FOLLOW_TOKEN_in_comma4968 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_134_in_apost4981_static {
    public static final BitSet FOLLOW_134_in_apost4981 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_apost4983_static {
    public static final BitSet FOLLOW_TOKEN_in_apost4983 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_135_in_neg4996_static {
    public static final BitSet FOLLOW_135_in_neg4996 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_neg4998_static {
    public static final BitSet FOLLOW_TOKEN_in_neg4998 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_136_in_dash5011_static {
    public static final BitSet FOLLOW_136_in_dash5011 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_dash5013_static {
    public static final BitSet FOLLOW_TOKEN_in_dash5013 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_137_in_stop5026_static {
    public static final BitSet FOLLOW_137_in_stop5026 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_stop5028_static {
    public static final BitSet FOLLOW_TOKEN_in_stop5028 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_138_in_percentsign5041_static {
    public static final BitSet FOLLOW_138_in_percentsign5041 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_percentsign5043_static {
    public static final BitSet FOLLOW_TOKEN_in_percentsign5043 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_139_in_lsqb5056_static {
    public static final BitSet FOLLOW_139_in_lsqb5056 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_lsqb5058_static {
    public static final BitSet FOLLOW_TOKEN_in_lsqb5058 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_140_in_rsqb5071_static {
    public static final BitSet FOLLOW_140_in_rsqb5071 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rsqb5073_static {
    public static final BitSet FOLLOW_TOKEN_in_rsqb5073 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_141_in_nnidentifier5087_static {
    public static final BitSet FOLLOW_141_in_nnidentifier5087 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnidentifier5089_static {
    public static final BitSet FOLLOW_TOKEN_in_nnidentifier5089 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_142_in_dtTHE5104_static {
    public static final BitSet FOLLOW_142_in_dtTHE5104 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_dtTHE5106_static {
    public static final BitSet FOLLOW_TOKEN_in_dtTHE5106 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_143_in_lrb5120_static {
    public static final BitSet FOLLOW_143_in_lrb5120 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_lrb5122_static {
    public static final BitSet FOLLOW_TOKEN_in_lrb5122 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_144_in_rrb5135_static {
    public static final BitSet FOLLOW_144_in_rrb5135 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rrb5137_static {
    public static final BitSet FOLLOW_TOKEN_in_rrb5137 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_145_in_cc5154_static {
    public static final BitSet FOLLOW_145_in_cc5154 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cc5156_static {
    public static final BitSet FOLLOW_TOKEN_in_cc5156 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_146_in_cd5171_static {
    public static final BitSet FOLLOW_146_in_cd5171 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cd5173_static {
    public static final BitSet FOLLOW_TOKEN_in_cd5173 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_147_in_dt5188_static {
    public static final BitSet FOLLOW_147_in_dt5188 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_dt5190_static {
    public static final BitSet FOLLOW_TOKEN_in_dt5190 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_148_in_ex5205_static {
    public static final BitSet FOLLOW_148_in_ex5205 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_ex5207_static {
    public static final BitSet FOLLOW_TOKEN_in_ex5207 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_149_in_fw5222_static {
    public static final BitSet FOLLOW_149_in_fw5222 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_fw5224_static {
    public static final BitSet FOLLOW_TOKEN_in_fw5224 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_150_in_in5239_static {
    public static final BitSet FOLLOW_150_in_in5239 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_in5241_static {
    public static final BitSet FOLLOW_TOKEN_in_in5241 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_151_in_jj5256_static {
    public static final BitSet FOLLOW_151_in_jj5256 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jj5258_static {
    public static final BitSet FOLLOW_TOKEN_in_jj5258 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_152_in_jjr5273_static {
    public static final BitSet FOLLOW_152_in_jjr5273 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjr5275_static {
    public static final BitSet FOLLOW_TOKEN_in_jjr5275 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_153_in_jjs5290_static {
    public static final BitSet FOLLOW_153_in_jjs5290 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjs5292_static {
    public static final BitSet FOLLOW_TOKEN_in_jjs5292 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_154_in_ls5307_static {
    public static final BitSet FOLLOW_154_in_ls5307 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_ls5309_static {
    public static final BitSet FOLLOW_TOKEN_in_ls5309 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_155_in_md5324_static {
    public static final BitSet FOLLOW_155_in_md5324 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_md5326_static {
    public static final BitSet FOLLOW_TOKEN_in_md5326 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_156_in_nn5341_static {
    public static final BitSet FOLLOW_156_in_nn5341 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nn5343_static {
    public static final BitSet FOLLOW_TOKEN_in_nn5343 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_157_in_nns5358_static {
    public static final BitSet FOLLOW_157_in_nns5358 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nns5360_static {
    public static final BitSet FOLLOW_TOKEN_in_nns5360 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_158_in_nnp5375_static {
    public static final BitSet FOLLOW_158_in_nnp5375 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnp5377_static {
    public static final BitSet FOLLOW_TOKEN_in_nnp5377 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_159_in_nnps5392_static {
    public static final BitSet FOLLOW_159_in_nnps5392 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnps5394_static {
    public static final BitSet FOLLOW_TOKEN_in_nnps5394 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_160_in_pdt5409_static {
    public static final BitSet FOLLOW_160_in_pdt5409 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_pdt5411_static {
    public static final BitSet FOLLOW_TOKEN_in_pdt5411 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_161_in_pos5426_static {
    public static final BitSet FOLLOW_161_in_pos5426 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_pos5428_static {
    public static final BitSet FOLLOW_TOKEN_in_pos5428 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_162_in_prp5443_static {
    public static final BitSet FOLLOW_162_in_prp5443 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_prp5445_static {
    public static final BitSet FOLLOW_TOKEN_in_prp5445 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_163_in_prp_poss5460_static {
    public static final BitSet FOLLOW_163_in_prp_poss5460 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_prp_poss5462_static {
    public static final BitSet FOLLOW_TOKEN_in_prp_poss5462 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_164_in_rb5477_static {
    public static final BitSet FOLLOW_164_in_rb5477 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rb5479_static {
    public static final BitSet FOLLOW_TOKEN_in_rb5479 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_165_in_rbr5494_static {
    public static final BitSet FOLLOW_165_in_rbr5494 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rbr5496_static {
    public static final BitSet FOLLOW_TOKEN_in_rbr5496 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_166_in_rbs5511_static {
    public static final BitSet FOLLOW_166_in_rbs5511 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rbs5513_static {
    public static final BitSet FOLLOW_TOKEN_in_rbs5513 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_167_in_rp5528_static {
    public static final BitSet FOLLOW_167_in_rp5528 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rp5530_static {
    public static final BitSet FOLLOW_TOKEN_in_rp5530 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_168_in_sym5545_static {
    public static final BitSet FOLLOW_168_in_sym5545 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_sym5547_static {
    public static final BitSet FOLLOW_TOKEN_in_sym5547 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_169_in_to5562_static {
    public static final BitSet FOLLOW_169_in_to5562 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_to5564_static {
    public static final BitSet FOLLOW_TOKEN_in_to5564 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_170_in_uh5579_static {
    public static final BitSet FOLLOW_170_in_uh5579 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_uh5581_static {
    public static final BitSet FOLLOW_TOKEN_in_uh5581 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_171_in_vb5596_static {
    public static final BitSet FOLLOW_171_in_vb5596 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vb5598_static {
    public static final BitSet FOLLOW_TOKEN_in_vb5598 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_172_in_vbd5613_static {
    public static final BitSet FOLLOW_172_in_vbd5613 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbd5615_static {
    public static final BitSet FOLLOW_TOKEN_in_vbd5615 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_173_in_vbg5630_static {
    public static final BitSet FOLLOW_173_in_vbg5630 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbg5632_static {
    public static final BitSet FOLLOW_TOKEN_in_vbg5632 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_174_in_vbn5647_static {
    public static final BitSet FOLLOW_174_in_vbn5647 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbn5649_static {
    public static final BitSet FOLLOW_TOKEN_in_vbn5649 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_175_in_vbp5664_static {
    public static final BitSet FOLLOW_175_in_vbp5664 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbp5666_static {
    public static final BitSet FOLLOW_TOKEN_in_vbp5666 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_176_in_vbz5681_static {
    public static final BitSet FOLLOW_176_in_vbz5681 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbz5683_static {
    public static final BitSet FOLLOW_TOKEN_in_vbz5683 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_177_in_wdt5698_static {
    public static final BitSet FOLLOW_177_in_wdt5698 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wdt5700_static {
    public static final BitSet FOLLOW_TOKEN_in_wdt5700 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_178_in_wp5715_static {
    public static final BitSet FOLLOW_178_in_wp5715 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wp5717_static {
    public static final BitSet FOLLOW_TOKEN_in_wp5717 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_179_in_wp_poss5732_static {
    public static final BitSet FOLLOW_179_in_wp_poss5732 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wp_poss5734_static {
    public static final BitSet FOLLOW_TOKEN_in_wp_poss5734 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_180_in_wrb5749_static {
    public static final BitSet FOLLOW_180_in_wrb5749 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wrb5751_static {
    public static final BitSet FOLLOW_TOKEN_in_wrb5751 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_procedureNounPhrase_in_synpred2_ChemicalChunker222_static {
    public static final BitSet FOLLOW_procedureNounPhrase_in_synpred2_ChemicalChunker222 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sentenceStructure_in_synpred3_ChemicalChunker227_static {
    public static final BitSet FOLLOW_sentenceStructure_in_synpred3_ChemicalChunker227 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unmatchedPhrase_in_synpred4_ChemicalChunker229_static {
    public static final BitSet FOLLOW_unmatchedPhrase_in_synpred4_ChemicalChunker229 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphrase_in_synpred6_ChemicalChunker244_static {
    public static final BitSet FOLLOW_nounphrase_in_synpred6_ChemicalChunker244 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verbphrase_in_synpred7_ChemicalChunker246_static {
    public static final BitSet FOLLOW_verbphrase_in_synpred7_ChemicalChunker246 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphrase_in_synpred8_ChemicalChunker248_static {
    public static final BitSet FOLLOW_prepphrase_in_synpred8_ChemicalChunker248 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAfter_in_synpred9_ChemicalChunker250_static {
    public static final BitSet FOLLOW_prepphraseAfter_in_synpred9_ChemicalChunker250 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred10_ChemicalChunker255_static {
    public static final BitSet FOLLOW_advAdj_in_synpred10_ChemicalChunker255 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred11_ChemicalChunker257_static {
    public static final BitSet FOLLOW_colon_in_synpred11_ChemicalChunker257 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred12_ChemicalChunker262_static {
    public static final BitSet FOLLOW_conjunction_in_synpred12_ChemicalChunker262 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbconj_in_synpred13_ChemicalChunker264_static {
    public static final BitSet FOLLOW_rbconj_in_synpred13_ChemicalChunker264 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred14_ChemicalChunker266_static {
    public static final BitSet FOLLOW_comma_in_synpred14_ChemicalChunker266 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_headingProcedureTerminators_in_synpred85_ChemicalChunker481_static {
    public static final BitSet FOLLOW_headingProcedureTerminators_in_synpred85_ChemicalChunker481 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure1_in_synpred91_ChemicalChunker586_static {
    public static final BitSet FOLLOW_nounphraseStructure1_in_synpred91_ChemicalChunker586 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_synpred93_ChemicalChunker617_static {
    public static final BitSet FOLLOW_dt_in_synpred93_ChemicalChunker617 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred94_ChemicalChunker624_static {
    public static final BitSet FOLLOW_conjunction_in_synpred94_ChemicalChunker624 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred95_ChemicalChunker624_static {
    public static final BitSet FOLLOW_conjunction_in_synpred95_ChemicalChunker624 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BEE824L});

    }static class FOLLOW_nounphraseContent_in_synpred95_ChemicalChunker627_static {
    public static final BitSet FOLLOW_nounphraseContent_in_synpred95_ChemicalChunker627 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseOf_in_synpred96_ChemicalChunker634_static {
    public static final BitSet FOLLOW_prepphraseOf_in_synpred96_ChemicalChunker634 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_synpred97_ChemicalChunker637_static {
    public static final BitSet FOLLOW_prepphraseIN_in_synpred97_ChemicalChunker637 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred98_ChemicalChunker649_static {
    public static final BitSet FOLLOW_advAdj_in_synpred98_ChemicalChunker649 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolvePhrase_in_synpred99_ChemicalChunker654_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred99_ChemicalChunker654 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratioOrBracketedRatio_in_synpred100_ChemicalChunker656_static {
    public static final BitSet FOLLOW_ratioOrBracketedRatio_in_synpred100_ChemicalChunker656 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred101_ChemicalChunker658_static {
    public static final BitSet FOLLOW_noun_in_synpred101_ChemicalChunker658 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_synpred102_ChemicalChunker660_static {
    public static final BitSet FOLLOW_numeric_in_synpred102_ChemicalChunker660 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContent_in_synpred103_ChemicalChunker662_static {
    public static final BitSet FOLLOW_bracketedContent_in_synpred103_ChemicalChunker662 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolveStructure_in_synpred104_ChemicalChunker674_static {
    public static final BitSet FOLLOW_dissolveStructure_in_synpred104_ChemicalChunker674 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred105_ChemicalChunker705_static {
    public static final BitSet FOLLOW_adj_in_synpred105_ChemicalChunker705 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred108_ChemicalChunker717_static {
    public static final BitSet FOLLOW_molecule_in_synpred108_ChemicalChunker717 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred109_ChemicalChunker726_static {
    public static final BitSet FOLLOW_conjunction_in_synpred109_ChemicalChunker726 = new BitSet(new long[]{0x8000638000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_molecule_in_synpred109_ChemicalChunker728_static {
    public static final BitSet FOLLOW_molecule_in_synpred109_ChemicalChunker728 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred111_ChemicalChunker745_static {
    public static final BitSet FOLLOW_adj_in_synpred111_ChemicalChunker745 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred113_ChemicalChunker752_static {
    public static final BitSet FOLLOW_molecule_in_synpred113_ChemicalChunker752 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_synpred115_ChemicalChunker786_static {
    public static final BitSet FOLLOW_to_in_synpred115_ChemicalChunker786 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_synpred116_ChemicalChunker789_static {
    public static final BitSet FOLLOW_inAll_in_synpred116_ChemicalChunker789 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_synpred122_ChemicalChunker810_static {
    public static final BitSet FOLLOW_md_in_synpred122_ChemicalChunker810 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_synpred123_ChemicalChunker813_static {
    public static final BitSet FOLLOW_adv_in_synpred123_ChemicalChunker813 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred124_ChemicalChunker816_static {
    public static final BitSet FOLLOW_adj_in_synpred124_ChemicalChunker816 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_synpred125_ChemicalChunker819_static {
    public static final BitSet FOLLOW_neg_in_synpred125_ChemicalChunker819 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_synpred127_ChemicalChunker827_static {
    public static final BitSet FOLLOW_md_in_synpred127_ChemicalChunker827 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_synpred128_ChemicalChunker830_static {
    public static final BitSet FOLLOW_adv_in_synpred128_ChemicalChunker830 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred129_ChemicalChunker833_static {
    public static final BitSet FOLLOW_adj_in_synpred129_ChemicalChunker833 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_synpred130_ChemicalChunker836_static {
    public static final BitSet FOLLOW_neg_in_synpred130_ChemicalChunker836 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_otherVerbStructure_in_synpred131_ChemicalChunker839_static {
    public static final BitSet FOLLOW_otherVerbStructure_in_synpred131_ChemicalChunker839 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_actionVerbStructure_in_synpred132_ChemicalChunker842_static {
    public static final BitSet FOLLOW_actionVerbStructure_in_synpred132_ChemicalChunker842 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_synpred133_ChemicalChunker846_static {
    public static final BitSet FOLLOW_inoff_in_synpred133_ChemicalChunker846 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_synpred136_ChemicalChunker850_static {
    public static final BitSet FOLLOW_cc_in_synpred136_ChemicalChunker850 = new BitSet(new long[]{0x7FFFA30000000000L,0x0000000000000101L,0x000002F003CC00A0L});

    }static class FOLLOW_comma_in_synpred136_ChemicalChunker853_static {
    public static final BitSet FOLLOW_comma_in_synpred136_ChemicalChunker853 = new BitSet(new long[]{0x7FFFA30000000000L,0x0000000000000101L,0x000002F003CC0080L});

    }static class FOLLOW_prepphrase_in_synpred136_ChemicalChunker856_static {
    public static final BitSet FOLLOW_prepphrase_in_synpred136_ChemicalChunker856 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_synpred141_ChemicalChunker880_static {
    public static final BitSet FOLLOW_md_in_synpred141_ChemicalChunker880 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_synpred142_ChemicalChunker883_static {
    public static final BitSet FOLLOW_adv_in_synpred142_ChemicalChunker883 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred143_ChemicalChunker886_static {
    public static final BitSet FOLLOW_adj_in_synpred143_ChemicalChunker886 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_synpred144_ChemicalChunker889_static {
    public static final BitSet FOLLOW_neg_in_synpred144_ChemicalChunker889 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_synpred149_ChemicalChunker911_static {
    public static final BitSet FOLLOW_md_in_synpred149_ChemicalChunker911 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_synpred150_ChemicalChunker914_static {
    public static final BitSet FOLLOW_adv_in_synpred150_ChemicalChunker914 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred151_ChemicalChunker917_static {
    public static final BitSet FOLLOW_adj_in_synpred151_ChemicalChunker917 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_synpred152_ChemicalChunker920_static {
    public static final BitSet FOLLOW_neg_in_synpred152_ChemicalChunker920 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_synpred164_ChemicalChunker960_static {
    public static final BitSet FOLLOW_vbdegass_in_synpred164_ChemicalChunker960 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_degassMultiVerb_in_synpred165_ChemicalChunker962_static {
    public static final BitSet FOLLOW_degassMultiVerb_in_synpred165_ChemicalChunker962 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred193_ChemicalChunker1050_static {
    public static final BitSet FOLLOW_dash_in_synpred193_ChemicalChunker1050 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_nounStructure_in_synpred193_ChemicalChunker1052_static {
    public static final BitSet FOLLOW_nounStructure_in_synpred193_ChemicalChunker1052 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_captionLabel_in_synpred196_ChemicalChunker1067_static {
    public static final BitSet FOLLOW_captionLabel_in_synpred196_ChemicalChunker1067 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnplabel_in_synpred197_ChemicalChunker1069_static {
    public static final BitSet FOLLOW_nnplabel_in_synpred197_ChemicalChunker1069 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred198_ChemicalChunker1071_static {
    public static final BitSet FOLLOW_citation_in_synpred198_ChemicalChunker1071 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycles_in_synpred199_ChemicalChunker1073_static {
    public static final BitSet FOLLOW_cycles_in_synpred199_ChemicalChunker1073 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred200_ChemicalChunker1075_static {
    public static final BitSet FOLLOW_molecule_in_synpred200_ChemicalChunker1075 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_synpred201_ChemicalChunker1077_static {
    public static final BitSet FOLLOW_apparatus_in_synpred201_ChemicalChunker1077 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred202_ChemicalChunker1079_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred202_ChemicalChunker1079 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_synpred203_ChemicalChunker1081_static {
    public static final BitSet FOLLOW_nnstate_in_synpred203_ChemicalChunker1081 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_procedureNode_in_synpred204_ChemicalChunker1083_static {
    public static final BitSet FOLLOW_procedureNode_in_synpred204_ChemicalChunker1083 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred205_ChemicalChunker1085_static {
    public static final BitSet FOLLOW_nn_in_synpred205_ChemicalChunker1085 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_synpred208_ChemicalChunker1091_static {
    public static final BitSet FOLLOW_nnadd_in_synpred208_ChemicalChunker1091 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_synpred210_ChemicalChunker1095_static {
    public static final BitSet FOLLOW_nnexample_in_synpred210_ChemicalChunker1095 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_range_in_synpred211_ChemicalChunker1097_static {
    public static final BitSet FOLLOW_range_in_synpred211_ChemicalChunker1097 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_synpred213_ChemicalChunker1101_static {
    public static final BitSet FOLLOW_nnatmosphere_in_synpred213_ChemicalChunker1101 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred215_ChemicalChunker1105_static {
    public static final BitSet FOLLOW_quantity_in_synpred215_ChemicalChunker1105 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred216_ChemicalChunker1107_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred216_ChemicalChunker1107 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_synpred218_ChemicalChunker1111_static {
    public static final BitSet FOLLOW_nnph_in_synpred218_ChemicalChunker1111 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_synpred220_ChemicalChunker1115_static {
    public static final BitSet FOLLOW_nngeneral_in_synpred220_ChemicalChunker1115 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_synpred223_ChemicalChunker1121_static {
    public static final BitSet FOLLOW_nnpressure_in_synpred223_ChemicalChunker1121 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_synpred233_ChemicalChunker1141_static {
    public static final BitSet FOLLOW_nnmixture_in_synpred233_ChemicalChunker1141 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_synpred234_ChemicalChunker1143_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_synpred234_ChemicalChunker1143 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_synpred240_ChemicalChunker1155_static {
    public static final BitSet FOLLOW_nnyield_in_synpred240_ChemicalChunker1155 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAtmosphere_in_synpred248_ChemicalChunker1185_static {
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_synpred248_ChemicalChunker1185 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTime_in_synpred249_ChemicalChunker1187_static {
    public static final BitSet FOLLOW_prepphraseTime_in_synpred249_ChemicalChunker1187 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTemp_in_synpred250_ChemicalChunker1189_static {
    public static final BitSet FOLLOW_prepphraseTemp_in_synpred250_ChemicalChunker1189 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_synpred251_ChemicalChunker1191_static {
    public static final BitSet FOLLOW_prepphraseIN_in_synpred251_ChemicalChunker1191 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseRole_in_synpred252_ChemicalChunker1193_static {
    public static final BitSet FOLLOW_prepphraseRole_in_synpred252_ChemicalChunker1193 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred254_ChemicalChunker1233_static {
    public static final BitSet FOLLOW_advAdj_in_synpred254_ChemicalChunker1233 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_synpred255_ChemicalChunker1238_static {
    public static final BitSet FOLLOW_nnatmosphere_in_synpred255_ChemicalChunker1238 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred256_ChemicalChunker1266_static {
    public static final BitSet FOLLOW_advAdj_in_synpred256_ChemicalChunker1266 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_synpred261_ChemicalChunker1282_static {
    public static final BitSet FOLLOW_nntime_in_synpred261_ChemicalChunker1282 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred262_ChemicalChunker1313_static {
    public static final BitSet FOLLOW_advAdj_in_synpred262_ChemicalChunker1313 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_synpred267_ChemicalChunker1328_static {
    public static final BitSet FOLLOW_nntemp_in_synpred267_ChemicalChunker1328 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred273_ChemicalChunker1501_static {
    public static final BitSet FOLLOW_conjunction_in_synpred273_ChemicalChunker1501 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred274_ChemicalChunker1501_static {
    public static final BitSet FOLLOW_conjunction_in_synpred274_ChemicalChunker1501 = new BitSet(new long[]{0x8000638000000000L,0x0000001002102280L,0x00000000138EA824L});

    }static class FOLLOW_apparatus_in_synpred274_ChemicalChunker1504_static {
    public static final BitSet FOLLOW_apparatus_in_synpred274_ChemicalChunker1504 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnApp_in_synpred277_ChemicalChunker1521_static {
    public static final BitSet FOLLOW_nnApp_in_synpred277_ChemicalChunker1521 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnapparatus_in_synpred278_ChemicalChunker1548_static {
    public static final BitSet FOLLOW_nnapparatus_in_synpred278_ChemicalChunker1548 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred279_ChemicalChunker1552_static {
    public static final BitSet FOLLOW_dash_in_synpred279_ChemicalChunker1552 = new BitSet(new long[]{0x8000638000000000L,0x0000001002102280L,0x00000000138CA824L});

    }static class FOLLOW_nnapparatus_in_synpred279_ChemicalChunker1554_static {
    public static final BitSet FOLLOW_nnapparatus_in_synpred279_ChemicalChunker1554 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred280_ChemicalChunker1568_static {
    public static final BitSet FOLLOW_quantity_in_synpred280_ChemicalChunker1568 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred281_ChemicalChunker1570_static {
    public static final BitSet FOLLOW_adj_in_synpred281_ChemicalChunker1570 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_synpred282_ChemicalChunker1572_static {
    public static final BitSet FOLLOW_nnpressure_in_synpred282_ChemicalChunker1572 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_synpred283_ChemicalChunker1574_static {
    public static final BitSet FOLLOW_nnadd_in_synpred283_ChemicalChunker1574 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred284_ChemicalChunker1576_static {
    public static final BitSet FOLLOW_molecule_in_synpred284_ChemicalChunker1576 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred285_ChemicalChunker1578_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred285_ChemicalChunker1578 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_synpred286_ChemicalChunker1580_static {
    public static final BitSet FOLLOW_nnstate_in_synpred286_ChemicalChunker1580 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred287_ChemicalChunker1582_static {
    public static final BitSet FOLLOW_nn_in_synpred287_ChemicalChunker1582 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred290_ChemicalChunker1603_static {
    public static final BitSet FOLLOW_adj_in_synpred290_ChemicalChunker1603 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_synpred291_ChemicalChunker1606_static {
    public static final BitSet FOLLOW_nnstate_in_synpred291_ChemicalChunker1606 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericReferenceOrQuantity_in_synpred292_ChemicalChunker1610_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_synpred292_ChemicalChunker1610 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred293_ChemicalChunker1614_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred293_ChemicalChunker1614 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred294_ChemicalChunker1619_static {
    public static final BitSet FOLLOW_quantity_in_synpred294_ChemicalChunker1619 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_synpred295_ChemicalChunker1622_static {
    public static final BitSet FOLLOW_fromProcedure_in_synpred295_ChemicalChunker1622 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_synpred296_ChemicalChunker1631_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred296_ChemicalChunker1631 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_afterOscarCompoundStructure_in_synpred297_ChemicalChunker1634_static {
    public static final BitSet FOLLOW_afterOscarCompoundStructure_in_synpred297_ChemicalChunker1634 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_synpred299_ChemicalChunker1664_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred299_ChemicalChunker1664 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred300_ChemicalChunker1662_static {
    public static final BitSet FOLLOW_dash_in_synpred300_ChemicalChunker1662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_synpred300_ChemicalChunker1664_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred300_ChemicalChunker1664 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});

    }static class FOLLOW_dash_in_synpred301_ChemicalChunker1669_static {
    public static final BitSet FOLLOW_dash_in_synpred301_ChemicalChunker1669 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred302_ChemicalChunker1662_static {
    public static final BitSet FOLLOW_dash_in_synpred302_ChemicalChunker1662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_synpred302_ChemicalChunker1664_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred302_ChemicalChunker1664 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_synpred302_ChemicalChunker1669_static {
    public static final BitSet FOLLOW_dash_in_synpred302_ChemicalChunker1669 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred306_ChemicalChunker1674_static {
    public static final BitSet FOLLOW_colon_in_synpred306_ChemicalChunker1674 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_synpred306_ChemicalChunker1676_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred306_ChemicalChunker1676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000048010L});

    }static class FOLLOW_lrb_in_synpred306_ChemicalChunker1681_static {
    public static final BitSet FOLLOW_lrb_in_synpred306_ChemicalChunker1681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_ratio_in_synpred306_ChemicalChunker1684_static {
    public static final BitSet FOLLOW_ratio_in_synpred306_ChemicalChunker1684 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_synpred307_ChemicalChunker1690_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred307_ChemicalChunker1690 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred308_ChemicalChunker1688_static {
    public static final BitSet FOLLOW_colon_in_synpred308_ChemicalChunker1688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_synpred308_ChemicalChunker1690_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred308_ChemicalChunker1690 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});

    }static class FOLLOW_dash_in_synpred309_ChemicalChunker1696_static {
    public static final BitSet FOLLOW_dash_in_synpred309_ChemicalChunker1696 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apost_in_synpred310_ChemicalChunker1698_static {
    public static final BitSet FOLLOW_apost_in_synpred310_ChemicalChunker1698 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount3_in_synpred312_ChemicalChunker1741_static {
    public static final BitSet FOLLOW_moleculeamount3_in_synpred312_ChemicalChunker1741 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount1_in_synpred313_ChemicalChunker1744_static {
    public static final BitSet FOLLOW_moleculeamount1_in_synpred313_ChemicalChunker1744 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred314_ChemicalChunker1751_static {
    public static final BitSet FOLLOW_asAstate_in_synpred314_ChemicalChunker1751 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred315_ChemicalChunker1762_static {
    public static final BitSet FOLLOW_quantity_in_synpred315_ChemicalChunker1762 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMol_in_synpred316_ChemicalChunker1764_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_synpred316_ChemicalChunker1764 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMol_in_synpred319_ChemicalChunker1781_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_synpred319_ChemicalChunker1781 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred322_ChemicalChunker1803_static {
    public static final BitSet FOLLOW_quantity_in_synpred322_ChemicalChunker1803 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMol_in_synpred323_ChemicalChunker1805_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_synpred323_ChemicalChunker1805 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred328_ChemicalChunker1828_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred328_ChemicalChunker1828 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred329_ChemicalChunker1840_static {
    public static final BitSet FOLLOW_quantity_in_synpred329_ChemicalChunker1840 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMol_in_synpred330_ChemicalChunker1842_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_synpred330_ChemicalChunker1842 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred331_ChemicalChunker1846_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred331_ChemicalChunker1846 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred332_ChemicalChunker1857_static {
    public static final BitSet FOLLOW_citation_in_synpred332_ChemicalChunker1857 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred333_ChemicalChunker1859_static {
    public static final BitSet FOLLOW_quantity_in_synpred333_ChemicalChunker1859 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred335_ChemicalChunker1861_static {
    public static final BitSet FOLLOW_comma_in_synpred335_ChemicalChunker1861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_quantity1Node_in_synpred335_ChemicalChunker1864_static {
    public static final BitSet FOLLOW_quantity1Node_in_synpred335_ChemicalChunker1864 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citationStructure_in_synpred335_ChemicalChunker1866_static {
    public static final BitSet FOLLOW_citationStructure_in_synpred335_ChemicalChunker1866 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContentInMol_in_synpred336_ChemicalChunker1869_static {
    public static final BitSet FOLLOW_bracketedContentInMol_in_synpred336_ChemicalChunker1869 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred337_ChemicalChunker1901_static {
    public static final BitSet FOLLOW_asAstate_in_synpred337_ChemicalChunker1901 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred338_ChemicalChunker1914_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred338_ChemicalChunker1914 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred339_ChemicalChunker1918_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred339_ChemicalChunker1918 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred341_ChemicalChunker1928_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred341_ChemicalChunker1928 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred342_ChemicalChunker1941_static {
    public static final BitSet FOLLOW_quantity_in_synpred342_ChemicalChunker1941 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred346_ChemicalChunker1965_static {
    public static final BitSet FOLLOW_quantity_in_synpred346_ChemicalChunker1965 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred347_ChemicalChunker1968_static {
    public static final BitSet FOLLOW_asAstate_in_synpred347_ChemicalChunker1968 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_synpred348_ChemicalChunker1971_static {
    public static final BitSet FOLLOW_fromProcedure_in_synpred348_ChemicalChunker1971 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred353_ChemicalChunker2011_static {
    public static final BitSet FOLLOW_quantity_in_synpred353_ChemicalChunker2011 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred354_ChemicalChunker2014_static {
    public static final BitSet FOLLOW_asAstate_in_synpred354_ChemicalChunker2014 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_synpred355_ChemicalChunker2017_static {
    public static final BitSet FOLLOW_fromProcedure_in_synpred355_ChemicalChunker2017 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred356_ChemicalChunker2029_static {
    public static final BitSet FOLLOW_quantity_in_synpred356_ChemicalChunker2029 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred357_ChemicalChunker2032_static {
    public static final BitSet FOLLOW_asAstate_in_synpred357_ChemicalChunker2032 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_synpred358_ChemicalChunker2035_static {
    public static final BitSet FOLLOW_fromProcedure_in_synpred358_ChemicalChunker2035 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericReferenceOrQuantity_in_synpred361_ChemicalChunker2059_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_synpred361_ChemicalChunker2059 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericReferenceOrQuantity_in_synpred364_ChemicalChunker2080_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_synpred364_ChemicalChunker2080 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred377_ChemicalChunker2136_static {
    public static final BitSet FOLLOW_quantity_in_synpred377_ChemicalChunker2136 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred382_ChemicalChunker2165_static {
    public static final BitSet FOLLOW_quantity_in_synpred382_ChemicalChunker2165 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_captionLabelContent_in_synpred383_ChemicalChunker2236_static {
    public static final BitSet FOLLOW_captionLabelContent_in_synpred383_ChemicalChunker2236 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred384_ChemicalChunker2262_static {
    public static final BitSet FOLLOW_conjunction_in_synpred384_ChemicalChunker2262 = new BitSet(new long[]{0x8000678000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_allIdentifierTypes_in_synpred384_ChemicalChunker2264_static {
    public static final BitSet FOLLOW_allIdentifierTypes_in_synpred384_ChemicalChunker2264 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred389_ChemicalChunker2368_static {
    public static final BitSet FOLLOW_comma_in_synpred389_ChemicalChunker2368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_measurements_in_synpred389_ChemicalChunker2371_static {
    public static final BitSet FOLLOW_measurements_in_synpred389_ChemicalChunker2371 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_synpred392_ChemicalChunker2396_static {
    public static final BitSet FOLLOW_dt_in_synpred392_ChemicalChunker2396 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurementtypes_in_synpred393_ChemicalChunker2408_static {
    public static final BitSet FOLLOW_measurementtypes_in_synpred393_ChemicalChunker2408 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield_in_synpred400_ChemicalChunker2445_static {
    public static final BitSet FOLLOW_yield_in_synpred400_ChemicalChunker2445 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred405_ChemicalChunker2644_static {
    public static final BitSet FOLLOW_dash_in_synpred405_ChemicalChunker2644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_synpred405_ChemicalChunker2646_static {
    public static final BitSet FOLLOW_cd_in_synpred405_ChemicalChunker2646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_percentsign_in_synpred405_ChemicalChunker2648_static {
    public static final BitSet FOLLOW_percentsign_in_synpred405_ChemicalChunker2648 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred409_ChemicalChunker2751_static {
    public static final BitSet FOLLOW_verb_in_synpred409_ChemicalChunker2751 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred410_ChemicalChunker2753_static {
    public static final BitSet FOLLOW_noun_in_synpred410_ChemicalChunker2753 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedContent_in_synpred411_ChemicalChunker2755_static {
    public static final BitSet FOLLOW_bracketedContent_in_synpred411_ChemicalChunker2755 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_synpred416_ChemicalChunker2765_static {
    public static final BitSet FOLLOW_ratio_in_synpred416_ChemicalChunker2765 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred417_ChemicalChunker2767_static {
    public static final BitSet FOLLOW_conjunction_in_synpred417_ChemicalChunker2767 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred418_ChemicalChunker2769_static {
    public static final BitSet FOLLOW_adj_in_synpred418_ChemicalChunker2769 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_synpred421_ChemicalChunker2775_static {
    public static final BitSet FOLLOW_numeric_in_synpred421_ChemicalChunker2775 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numberCompoundReference_in_synpred429_ChemicalChunker2845_static {
    public static final BitSet FOLLOW_numberCompoundReference_in_synpred429_ChemicalChunker2845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000230L});

    }static class FOLLOW_comma_in_synpred429_ChemicalChunker2848_static {
    public static final BitSet FOLLOW_comma_in_synpred429_ChemicalChunker2848 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred429_ChemicalChunker2852_static {
    public static final BitSet FOLLOW_colon_in_synpred429_ChemicalChunker2852 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_synpred429_ChemicalChunker2858_static {
    public static final BitSet FOLLOW_stop_in_synpred429_ChemicalChunker2858 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred431_ChemicalChunker2878_static {
    public static final BitSet FOLLOW_verb_in_synpred431_ChemicalChunker2878 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_synpred432_ChemicalChunker2880_static {
    public static final BitSet FOLLOW_quantity2Node_in_synpred432_ChemicalChunker2880 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred433_ChemicalChunker2882_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred433_ChemicalChunker2882 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred434_ChemicalChunker2884_static {
    public static final BitSet FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred434_ChemicalChunker2884 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_synpred435_ChemicalChunker2886_static {
    public static final BitSet FOLLOW_ratio_in_synpred435_ChemicalChunker2886 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred436_ChemicalChunker2888_static {
    public static final BitSet FOLLOW_cd_in_synpred436_ChemicalChunker2888 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred441_ChemicalChunker2898_static {
    public static final BitSet FOLLOW_comma_in_synpred441_ChemicalChunker2898 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred442_ChemicalChunker2900_static {
    public static final BitSet FOLLOW_adj_in_synpred442_ChemicalChunker2900 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred445_ChemicalChunker2906_static {
    public static final BitSet FOLLOW_noun_in_synpred445_ChemicalChunker2906 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_allIdentifierTypes_in_synpred453_ChemicalChunker2979_static {
    public static final BitSet FOLLOW_allIdentifierTypes_in_synpred453_ChemicalChunker2979 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred459_ChemicalChunker2992_static {
    public static final BitSet FOLLOW_comma_in_synpred459_ChemicalChunker2992 = new BitSet(new long[]{0x8900638000000000L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_colon_in_synpred459_ChemicalChunker2995_static {
    public static final BitSet FOLLOW_colon_in_synpred459_ChemicalChunker2995 = new BitSet(new long[]{0x8900638000000000L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_inof_in_synpred459_ChemicalChunker2998_static {
    public static final BitSet FOLLOW_inof_in_synpred459_ChemicalChunker2998 = new BitSet(new long[]{0x8900638000000000L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_infrom_in_synpred459_ChemicalChunker3002_static {
    public static final BitSet FOLLOW_infrom_in_synpred459_ChemicalChunker3002 = new BitSet(new long[]{0x8900638000000000L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_submethod_in_synpred459_ChemicalChunker3006_static {
    public static final BitSet FOLLOW_submethod_in_synpred459_ChemicalChunker3006 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_synpred460_ChemicalChunker3010_static {
    public static final BitSet FOLLOW_lrb_in_synpred460_ChemicalChunker3010 = new BitSet(new long[]{0x8900638000000000L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_submethod_in_synpred460_ChemicalChunker3012_static {
    public static final BitSet FOLLOW_submethod_in_synpred460_ChemicalChunker3012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_synpred460_ChemicalChunker3014_static {
    public static final BitSet FOLLOW_rrb_in_synpred460_ChemicalChunker3014 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred470_ChemicalChunker3168_static {
    public static final BitSet FOLLOW_colon_in_synpred470_ChemicalChunker3168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_synpred470_ChemicalChunker3170_static {
    public static final BitSet FOLLOW_cd_in_synpred470_ChemicalChunker3170 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_allIdentifierTypesOtherThanCD_in_synpred479_ChemicalChunker3245_static {
    public static final BitSet FOLLOW_allIdentifierTypesOtherThanCD_in_synpred479_ChemicalChunker3245 = new BitSet(new long[]{0x0000000000000002L});

    }
}