// $ANTLR 3.2 Sep 23, 2009 14:05:07 uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g 2011-07-19 16:24:31

    package uk.ac.cam.ch.wwmm.pregenerated;
 

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class ChemicalChunkerParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Sentence", "Unmatched", "NounPhrase", "MultipleApparatus", "DissolvePhrase", "VerbPhrase", "CYCLES", "RATIO", "CITATION", "MIXTURE", "PrepPhrase", "TimePhrase", "RolePrepPhrase", "AtmospherePhrase", "TempPhrase", "AMOUNT", "MASS", "PERCENT", "VOLUME", "MOLAR", "PH", "EQUIVALENT", "YIELD", "APPARATUS", "MULTIPLE", "OSCARCM", "MOLECULE", "UNNAMEDMOLECULE", "QUANTITY", "OSCARONT", "PROCEDURE", "REFERENCETOCOMPOUND", "WS", "TOKEN", "'CD-ALPHANUM'", "'OSCAR-CJ'", "'OSCAR-RN'", "'OSCAR-ASE'", "'OSCAR-ONT'", "'TM-UNICODE'", "'CD-UNICODE'", "'JJ-CHEM'", "'JJ-COMPOUND'", "'IN-AS'", "'IN-BEFORE'", "'IN-AFTER'", "'IN-IN'", "'IN-INTO'", "'IN-WITH'", "'IN-WITHOUT'", "'IN-BY'", "'IN-VIA'", "'IN-OF'", "'IN-ON'", "'IN-FOR'", "'IN-FROM'", "'IN-UNDER'", "'IN-OVER'", "'IN-OFF'", "'NN-STATE'", "'NN-TIME'", "'NN-MASS'", "'NN-AMOUNT'", "'NN-MOLAR'", "'NN-ATMOSPHERE'", "'NN-EQ'", "'NN-VOL'", "'NN-CHEMENTITY'", "'NN-TEMP'", "'NN-PH'", "'NN-FLASH'", "'NN-GENERAL'", "'NN-METHOD'", "'NN-PRESSURE'", "'NN-COLUMN'", "'NN-CHROMATOGRAPHY'", "'NN-VACUUM'", "'NN-CYCLE'", "'NN-TIMES'", "'NN-EXAMPLE'", "'OSCAR-CM'", "'VB-USE'", "'VB-CHANGE'", "'VB-SUBMERGE'", "'VB-SUBJECT'", "'NN-ADD'", "'NN-MIXTURE'", "'VB-DILUTE'", "'VB-ADD'", "'VB-CHARGE'", "'VB-CONTAIN'", "'VB-DROP'", "'VB-FILL'", "'VB-SUSPEND'", "'VB-TREAT'", "'VB-APPARATUS'", "'NN-APPARATUS'", "'VB-CONCENTRATE'", "'NN-CONCENTRATE'", "'VB-COOL'", "'VB-DEGASS'", "'VB-DISSOLVE'", "'VB-DRY'", "'NN-DRY'", "'VB-EXTRACT'", "'NN-EXTRACT'", "'VB-FILTER'", "'NN-FILTER'", "'VB-HEAT'", "'VB-INCREASE'", "'VB-IMMERSE'", "'VB-PARTITION'", "'VB-PRECIPITATE'", "'NN-PRECIPITATE'", "'VB-PURIFY'", "'NN-PURIFY'", "'VB-QUENCH'", "'VB-RECOVER'", "'VB-REMOVE'", "'NN-REMOVE'", "'VB-STIR'", "'VB-SYNTHESIZE'", "'NN-SYNTHESIZE'", "'VB-WAIT'", "'VB-WASH'", "'VB-YIELD'", "'NN-YIELD'", "'RB-CONJ'", "'COLON'", "'COMMA'", "'APOST'", "'NEG'", "'DASH'", "'STOP'", "'NN-PERCENT'", "'LSQB'", "'RSQB'", "'NN-IDENTIFIER'", "'DT-THE'", "'-LRB-'", "'-RRB-'", "'CC'", "'CD'", "'DT'", "'EX'", "'FW'", "'IN'", "'JJ'", "'JJR'", "'JJS'", "'LS'", "'MD'", "'NN'", "'NNS'", "'NNP'", "'NNPS'", "'PDT'", "'POS'", "'PRP'", "'PRP$'", "'RB'", "'RBR'", "'RBS'", "'RP'", "'SYM'", "'TO'", "'UH'", "'VB'", "'VBD'", "'VBG'", "'VBN'", "'VBP'", "'VBZ'", "'WDT'", "'WP'", "'WP$'", "'WRB'"
    };
    public static final int DissolvePhrase=8;
    public static final int T__159=159;
    public static final int T__158=158;
    public static final int T__160=160;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int EOF=-1;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int QUANTITY=32;
    public static final int T__161=161;
    public static final int TOKEN=37;
    public static final int T__162=162;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int CYCLES=10;
    public static final int T__92=92;
    public static final int T__148=148;
    public static final int T__147=147;
    public static final int T__90=90;
    public static final int T__149=149;
    public static final int AMOUNT=19;
    public static final int T__154=154;
    public static final int CITATION=12;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__99=99;
    public static final int T__150=150;
    public static final int T__98=98;
    public static final int T__151=151;
    public static final int T__97=97;
    public static final int OSCARONT=33;
    public static final int T__152=152;
    public static final int T__96=96;
    public static final int T__153=153;
    public static final int T__95=95;
    public static final int T__139=139;
    public static final int T__138=138;
    public static final int T__137=137;
    public static final int T__136=136;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int MultipleApparatus=7;
    public static final int APPARATUS=27;
    public static final int T__141=141;
    public static final int T__85=85;
    public static final int T__142=142;
    public static final int T__84=84;
    public static final int T__87=87;
    public static final int T__140=140;
    public static final int T__86=86;
    public static final int T__145=145;
    public static final int T__89=89;
    public static final int MOLAR=23;
    public static final int TimePhrase=15;
    public static final int T__146=146;
    public static final int T__88=88;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int PrepPhrase=14;
    public static final int T__126=126;
    public static final int T__125=125;
    public static final int T__128=128;
    public static final int T__127=127;
    public static final int WS=36;
    public static final int T__71=71;
    public static final int T__129=129;
    public static final int T__72=72;
    public static final int RATIO=11;
    public static final int T__70=70;
    public static final int PH=24;
    public static final int T__76=76;
    public static final int T__75=75;
    public static final int AtmospherePhrase=17;
    public static final int T__130=130;
    public static final int T__74=74;
    public static final int T__131=131;
    public static final int T__73=73;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__79=79;
    public static final int T__134=134;
    public static final int T__78=78;
    public static final int T__135=135;
    public static final int T__77=77;
    public static final int T__68=68;
    public static final int NounPhrase=6;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int TempPhrase=18;
    public static final int T__65=65;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int VerbPhrase=9;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int T__123=123;
    public static final int T__122=122;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int UNNAMEDMOLECULE=31;
    public static final int REFERENCETOCOMPOUND=35;
    public static final int T__61=61;
    public static final int T__60=60;
    public static final int MULTIPLE=28;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int MOLECULE=30;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__59=59;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int YIELD=26;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int T__112=112;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int Unmatched=5;
    public static final int T__43=43;
    public static final int RolePrepPhrase=16;
    public static final int T__40=40;
    public static final int T__41=41;
    public static final int T__46=46;
    public static final int T__47=47;
    public static final int PERCENT=21;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__180=180;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int EQUIVALENT=25;
    public static final int PROCEDURE=34;
    public static final int T__175=175;
    public static final int MIXTURE=13;
    public static final int T__174=174;
    public static final int T__173=173;
    public static final int T__172=172;
    public static final int T__179=179;
    public static final int T__178=178;
    public static final int T__177=177;
    public static final int T__176=176;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int VOLUME=22;
    public static final int T__171=171;
    public static final int T__170=170;
    public static final int Sentence=4;
    public static final int T__169=169;
    public static final int OSCARCM=29;
    public static final int MASS=20;

    // delegates
    // delegators


        public ChemicalChunkerParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public ChemicalChunkerParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[744+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return ChemicalChunkerParser.tokenNames; }
    public String getGrammarFileName() { return "uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g"; }


    public boolean numberLooksLikeAReferenceToACompound(TokenStream stream){
    	Token previousTokenType = stream.LT(-2);
    	if (previousTokenType !=null && previousTokenType.getText().equals("IN-OF")){
    		String nextTokenText= stream.LT(3).getText();
    		if ("-LRB-".equals(nextTokenText) || "STOP".equals(nextTokenText) || "COMMA".equals(nextTokenText)){
    			return true;
    		}
    	}
    	return false;
    }

    public boolean followedByNumberWhichIsNotAReference(TokenStream stream){
    	if ("CD".equals(input.LT(1).getText())){
    		String tokenTypeFollowingTheCD = stream.LT(3).getText();
    		if ("NN-TIMES".equals(tokenTypeFollowingTheCD) || "COLON".equals(tokenTypeFollowingTheCD)){
    			return true;
    		}
    	}
    	return false;
    }


    public static class document_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "document"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:1: document : ( sentences )+ -> ( ^( Sentence sentences ) )+ ;
    public final ChemicalChunkerParser.document_return document() throws RecognitionException {
        ChemicalChunkerParser.document_return retval = new ChemicalChunkerParser.document_return();
        retval.start = input.LT(1);
        int document_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.sentences_return sentences1 = null;


        RewriteRuleSubtreeStream stream_sentences=new RewriteRuleSubtreeStream(adaptor,"rule sentences");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:9: ( ( sentences )+ -> ( ^( Sentence sentences ) )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:11: ( sentences )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:11: ( sentences )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                switch ( input.LA(1) ) {
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 117:
                case 118:
                case 119:
                case 120:
                case 121:
                case 122:
                case 123:
                case 124:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 130:
                case 131:
                case 132:
                case 133:
                case 134:
                case 135:
                case 136:
                case 138:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 158:
                case 159:
                case 160:
                case 161:
                case 162:
                case 163:
                case 164:
                case 165:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 180:
                    {
                    alt1=1;
                    }
                    break;

                }

                switch (alt1) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: sentences
            	    {
            	    pushFollow(FOLLOW_sentences_in_document202_static.FOLLOW_sentences_in_document202);
            	    sentences1=sentences();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sentences.add(sentences1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);



            // AST REWRITE
            // elements: sentences
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 79:21: -> ( ^( Sentence sentences ) )+
            {
                if ( !(stream_sentences.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_sentences.hasNext() ) {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:24: ^( Sentence sentences )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Sentence, "Sentence"), root_1);

                    adaptor.addChild(root_1, stream_sentences.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_sentences.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, document_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "document"

    public static class sentences_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentences"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:1: sentences : ( sentenceStructure | unmatchedPhrase )+ ( stop )* ;
    public final ChemicalChunkerParser.sentences_return sentences() throws RecognitionException {
        ChemicalChunkerParser.sentences_return retval = new ChemicalChunkerParser.sentences_return();
        retval.start = input.LT(1);
        int sentences_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.sentenceStructure_return sentenceStructure2 = null;

        ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase3 = null;

        ChemicalChunkerParser.stop_return stop4 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:10: ( ( sentenceStructure | unmatchedPhrase )+ ( stop )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:13: ( sentenceStructure | unmatchedPhrase )+ ( stop )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:13: ( sentenceStructure | unmatchedPhrase )+
            int cnt2=0;
            loop2:
            do {
                int alt2=3;
                alt2 = dfa2.predict(input);
                switch (alt2) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:14: sentenceStructure
            	    {
            	    pushFollow(FOLLOW_sentenceStructure_in_sentences223_static.FOLLOW_sentenceStructure_in_sentences223);
            	    sentenceStructure2=sentenceStructure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentenceStructure2.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:32: unmatchedPhrase
            	    {
            	    pushFollow(FOLLOW_unmatchedPhrase_in_sentences225_static.FOLLOW_unmatchedPhrase_in_sentences225);
            	    unmatchedPhrase3=unmatchedPhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unmatchedPhrase3.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt2 >= 1 ) break loop2;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(2, input);
                        throw eee;
                }
                cnt2++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:50: ( stop )*
            loop3:
            do {
                int alt3=2;
                switch ( input.LA(1) ) {
                case 137:
                    {
                    alt3=1;
                    }
                    break;

                }

                switch (alt3) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_sentences229_static.FOLLOW_stop_in_sentences229);
            	    stop4=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop4.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, sentences_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sentences"

    public static class sentenceStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentenceStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:1: sentenceStructure : ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )* ;
    public final ChemicalChunkerParser.sentenceStructure_return sentenceStructure() throws RecognitionException {
        ChemicalChunkerParser.sentenceStructure_return retval = new ChemicalChunkerParser.sentenceStructure_return();
        retval.start = input.LT(1);
        int sentenceStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase5 = null;

        ChemicalChunkerParser.verbphrase_return verbphrase6 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase7 = null;

        ChemicalChunkerParser.prepphraseAfter_return prepphraseAfter8 = null;

        ChemicalChunkerParser.advAdj_return advAdj9 = null;

        ChemicalChunkerParser.colon_return colon10 = null;

        ChemicalChunkerParser.conjunction_return conjunction11 = null;

        ChemicalChunkerParser.rbconj_return rbconj12 = null;

        ChemicalChunkerParser.comma_return comma13 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:18: ( ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+
            int cnt4=0;
            loop4:
            do {
                int alt4=5;
                alt4 = dfa4.predict(input);
                switch (alt4) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:22: nounphrase
            	    {
            	    pushFollow(FOLLOW_nounphrase_in_sentenceStructure239_static.FOLLOW_nounphrase_in_sentenceStructure239);
            	    nounphrase5=nounphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphrase5.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:33: verbphrase
            	    {
            	    pushFollow(FOLLOW_verbphrase_in_sentenceStructure241_static.FOLLOW_verbphrase_in_sentenceStructure241);
            	    verbphrase6=verbphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verbphrase6.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:44: prepphrase
            	    {
            	    pushFollow(FOLLOW_prepphrase_in_sentenceStructure243_static.FOLLOW_prepphrase_in_sentenceStructure243);
            	    prepphrase7=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase7.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:55: prepphraseAfter
            	    {
            	    pushFollow(FOLLOW_prepphraseAfter_in_sentenceStructure245_static.FOLLOW_prepphraseAfter_in_sentenceStructure245);
            	    prepphraseAfter8=prepphraseAfter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAfter8.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt4 >= 1 ) break loop4;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(4, input);
                        throw eee;
                }
                cnt4++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:73: ( advAdj | colon )*
            loop5:
            do {
                int alt5=3;
                alt5 = dfa5.predict(input);
                switch (alt5) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:74: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_sentenceStructure250_static.FOLLOW_advAdj_in_sentenceStructure250);
            	    advAdj9=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj9.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:81: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_sentenceStructure252_static.FOLLOW_colon_in_sentenceStructure252);
            	    colon10=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon10.getTree());

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:89: ( conjunction | rbconj | comma )*
            loop6:
            do {
                int alt6=4;
                alt6 = dfa6.predict(input);
                switch (alt6) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:90: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_sentenceStructure257_static.FOLLOW_conjunction_in_sentenceStructure257);
            	    conjunction11=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction11.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:102: rbconj
            	    {
            	    pushFollow(FOLLOW_rbconj_in_sentenceStructure259_static.FOLLOW_rbconj_in_sentenceStructure259);
            	    rbconj12=rbconj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj12.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:109: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_sentenceStructure261_static.FOLLOW_comma_in_sentenceStructure261);
            	    comma13=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma13.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, sentenceStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sentenceStructure"

    public static class unmatchedPhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedPhrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:1: unmatchedPhrase : unmatchedToken -> ^( Unmatched unmatchedToken ) ;
    public final ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase() throws RecognitionException {
        ChemicalChunkerParser.unmatchedPhrase_return retval = new ChemicalChunkerParser.unmatchedPhrase_return();
        retval.start = input.LT(1);
        int unmatchedPhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unmatchedToken_return unmatchedToken14 = null;


        RewriteRuleSubtreeStream stream_unmatchedToken=new RewriteRuleSubtreeStream(adaptor,"rule unmatchedToken");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:86:2: ( unmatchedToken -> ^( Unmatched unmatchedToken ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:86:5: unmatchedToken
            {
            pushFollow(FOLLOW_unmatchedToken_in_unmatchedPhrase273_static.FOLLOW_unmatchedToken_in_unmatchedPhrase273);
            unmatchedToken14=unmatchedToken();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unmatchedToken.add(unmatchedToken14.getTree());


            // AST REWRITE
            // elements: unmatchedToken
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 86:20: -> ^( Unmatched unmatchedToken )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:86:23: ^( Unmatched unmatchedToken )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Unmatched, "Unmatched"), root_1);

                adaptor.addChild(root_1, stream_unmatchedToken.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, unmatchedPhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unmatchedPhrase"

    public static class unmatchedToken_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedToken"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:1: unmatchedToken : ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier ) ;
    public final ChemicalChunkerParser.unmatchedToken_return unmatchedToken() throws RecognitionException {
        ChemicalChunkerParser.unmatchedToken_return retval = new ChemicalChunkerParser.unmatchedToken_return();
        retval.start = input.LT(1);
        int unmatchedToken_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric15 = null;

        ChemicalChunkerParser.advAdj_return advAdj16 = null;

        ChemicalChunkerParser.tmunicode_return tmunicode17 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode18 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp19 = null;

        ChemicalChunkerParser.inAll_return inAll20 = null;

        ChemicalChunkerParser.nnexample_return nnexample21 = null;

        ChemicalChunkerParser.nnstate_return nnstate22 = null;

        ChemicalChunkerParser.nntime_return nntime23 = null;

        ChemicalChunkerParser.nnmass_return nnmass24 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar25 = null;

        ChemicalChunkerParser.nnamount_return nnamount26 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere27 = null;

        ChemicalChunkerParser.nneq_return nneq28 = null;

        ChemicalChunkerParser.nnvol_return nnvol29 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity30 = null;

        ChemicalChunkerParser.nntemp_return nntemp31 = null;

        ChemicalChunkerParser.nnph_return nnph32 = null;

        ChemicalChunkerParser.nnflash_return nnflash33 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral34 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod35 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure36 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn37 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography38 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum39 = null;

        ChemicalChunkerParser.nncycle_return nncycle40 = null;

        ChemicalChunkerParser.nntimes_return nntimes41 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm42 = null;

        ChemicalChunkerParser.oscaronts_return oscaronts43 = null;

        ChemicalChunkerParser.oscarase_return oscarase44 = null;

        ChemicalChunkerParser.verb_return verb45 = null;

        ChemicalChunkerParser.nnadd_return nnadd46 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture47 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus48 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate49 = null;

        ChemicalChunkerParser.nndry_return nndry50 = null;

        ChemicalChunkerParser.nnextract_return nnextract51 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter52 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate53 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify54 = null;

        ChemicalChunkerParser.nnremove_return nnremove55 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize56 = null;

        ChemicalChunkerParser.nnyield_return nnyield57 = null;

        ChemicalChunkerParser.colon_return colon58 = null;

        ChemicalChunkerParser.apost_return apost59 = null;

        ChemicalChunkerParser.neg_return neg60 = null;

        ChemicalChunkerParser.dash_return dash61 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent62 = null;

        ChemicalChunkerParser.lsqb_return lsqb63 = null;

        ChemicalChunkerParser.rsqb_return rsqb64 = null;

        ChemicalChunkerParser.lrb_return lrb65 = null;

        ChemicalChunkerParser.rrb_return rrb66 = null;

        ChemicalChunkerParser.cc_return cc67 = null;

        ChemicalChunkerParser.dt_return dt68 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE69 = null;

        ChemicalChunkerParser.fw_return fw70 = null;

        ChemicalChunkerParser.md_return md71 = null;

        ChemicalChunkerParser.nn_return nn72 = null;

        ChemicalChunkerParser.nns_return nns73 = null;

        ChemicalChunkerParser.nnp_return nnp74 = null;

        ChemicalChunkerParser.prp_return prp75 = null;

        ChemicalChunkerParser.prp_poss_return prp_poss76 = null;

        ChemicalChunkerParser.rbconj_return rbconj77 = null;

        ChemicalChunkerParser.sym_return sym78 = null;

        ChemicalChunkerParser.uh_return uh79 = null;

        ChemicalChunkerParser.clause_return clause80 = null;

        ChemicalChunkerParser.comma_return comma81 = null;

        ChemicalChunkerParser.ls_return ls82 = null;

        ChemicalChunkerParser.nnps_return nnps83 = null;

        ChemicalChunkerParser.pos_return pos84 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier85 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:2: ( ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:4: ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:4: ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier )
            int alt7=71;
            switch ( input.LA(1) ) {
            case 38:
            case 146:
                {
                alt7=1;
                }
                break;
            case 39:
            case 40:
            case 45:
            case 151:
            case 152:
            case 153:
            case 164:
            case 165:
            case 166:
            case 167:
                {
                alt7=2;
                }
                break;
            case 43:
                {
                alt7=3;
                }
                break;
            case 44:
                {
                alt7=4;
                }
                break;
            case 46:
                {
                alt7=5;
                }
                break;
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 150:
            case 169:
                {
                alt7=6;
                }
                break;
            case 83:
                {
                alt7=7;
                }
                break;
            case 63:
                {
                alt7=8;
                }
                break;
            case 64:
                {
                alt7=9;
                }
                break;
            case 65:
                {
                alt7=10;
                }
                break;
            case 67:
                {
                alt7=11;
                }
                break;
            case 66:
                {
                alt7=12;
                }
                break;
            case 68:
                {
                alt7=13;
                }
                break;
            case 69:
                {
                alt7=14;
                }
                break;
            case 70:
                {
                alt7=15;
                }
                break;
            case 71:
                {
                alt7=16;
                }
                break;
            case 72:
                {
                alt7=17;
                }
                break;
            case 73:
                {
                alt7=18;
                }
                break;
            case 74:
                {
                alt7=19;
                }
                break;
            case 75:
                {
                alt7=20;
                }
                break;
            case 76:
                {
                alt7=21;
                }
                break;
            case 77:
                {
                alt7=22;
                }
                break;
            case 78:
                {
                alt7=23;
                }
                break;
            case 79:
                {
                alt7=24;
                }
                break;
            case 80:
                {
                alt7=25;
                }
                break;
            case 81:
                {
                alt7=26;
                }
                break;
            case 82:
                {
                alt7=27;
                }
                break;
            case 84:
                {
                alt7=28;
                }
                break;
            case 42:
                {
                alt7=29;
                }
                break;
            case 41:
                {
                alt7=30;
                }
                break;
            case 85:
            case 86:
            case 87:
            case 88:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 110:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 118:
            case 120:
            case 121:
            case 122:
            case 124:
            case 125:
            case 127:
            case 128:
            case 129:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
                {
                alt7=31;
                }
                break;
            case 89:
                {
                alt7=32;
                }
                break;
            case 90:
                {
                alt7=33;
                }
                break;
            case 100:
                {
                alt7=34;
                }
                break;
            case 102:
                {
                alt7=35;
                }
                break;
            case 107:
                {
                alt7=36;
                }
                break;
            case 109:
                {
                alt7=37;
                }
                break;
            case 111:
                {
                alt7=38;
                }
                break;
            case 117:
                {
                alt7=39;
                }
                break;
            case 119:
                {
                alt7=40;
                }
                break;
            case 123:
                {
                alt7=41;
                }
                break;
            case 126:
                {
                alt7=42;
                }
                break;
            case 130:
                {
                alt7=43;
                }
                break;
            case 132:
                {
                alt7=44;
                }
                break;
            case 134:
                {
                alt7=45;
                }
                break;
            case 135:
                {
                alt7=46;
                }
                break;
            case 136:
                {
                alt7=47;
                }
                break;
            case 138:
                {
                alt7=48;
                }
                break;
            case 139:
                {
                alt7=49;
                }
                break;
            case 140:
                {
                alt7=50;
                }
                break;
            case 143:
                {
                alt7=51;
                }
                break;
            case 144:
                {
                alt7=52;
                }
                break;
            case 145:
                {
                alt7=53;
                }
                break;
            case 147:
                {
                alt7=54;
                }
                break;
            case 142:
                {
                alt7=55;
                }
                break;
            case 149:
                {
                alt7=56;
                }
                break;
            case 155:
                {
                alt7=57;
                }
                break;
            case 156:
                {
                alt7=58;
                }
                break;
            case 157:
                {
                alt7=59;
                }
                break;
            case 158:
                {
                alt7=60;
                }
                break;
            case 162:
                {
                alt7=61;
                }
                break;
            case 163:
                {
                alt7=62;
                }
                break;
            case 131:
                {
                alt7=63;
                }
                break;
            case 168:
                {
                alt7=64;
                }
                break;
            case 170:
                {
                alt7=65;
                }
                break;
            case 148:
            case 160:
            case 177:
            case 178:
            case 179:
            case 180:
                {
                alt7=66;
                }
                break;
            case 133:
                {
                alt7=67;
                }
                break;
            case 154:
                {
                alt7=68;
                }
                break;
            case 159:
                {
                alt7=69;
                }
                break;
            case 161:
                {
                alt7=70;
                }
                break;
            case 141:
                {
                alt7=71;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;
            }

            switch (alt7) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:5: numeric
                    {
                    pushFollow(FOLLOW_numeric_in_unmatchedToken292_static.FOLLOW_numeric_in_unmatchedToken292);
                    numeric15=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric15.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:13: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_unmatchedToken294_static.FOLLOW_advAdj_in_unmatchedToken294);
                    advAdj16=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj16.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:20: tmunicode
                    {
                    pushFollow(FOLLOW_tmunicode_in_unmatchedToken296_static.FOLLOW_tmunicode_in_unmatchedToken296);
                    tmunicode17=tmunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tmunicode17.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:30: cdunicode
                    {
                    pushFollow(FOLLOW_cdunicode_in_unmatchedToken298_static.FOLLOW_cdunicode_in_unmatchedToken298);
                    cdunicode18=cdunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdunicode18.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:40: jjcomp
                    {
                    pushFollow(FOLLOW_jjcomp_in_unmatchedToken300_static.FOLLOW_jjcomp_in_unmatchedToken300);
                    jjcomp19=jjcomp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp19.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:47: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_unmatchedToken302_static.FOLLOW_inAll_in_unmatchedToken302);
                    inAll20=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll20.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:2: nnexample
                    {
                    pushFollow(FOLLOW_nnexample_in_unmatchedToken306_static.FOLLOW_nnexample_in_unmatchedToken306);
                    nnexample21=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample21.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:12: nnstate
                    {
                    pushFollow(FOLLOW_nnstate_in_unmatchedToken308_static.FOLLOW_nnstate_in_unmatchedToken308);
                    nnstate22=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate22.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:20: nntime
                    {
                    pushFollow(FOLLOW_nntime_in_unmatchedToken310_static.FOLLOW_nntime_in_unmatchedToken310);
                    nntime23=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime23.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:27: nnmass
                    {
                    pushFollow(FOLLOW_nnmass_in_unmatchedToken312_static.FOLLOW_nnmass_in_unmatchedToken312);
                    nnmass24=nnmass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmass24.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:34: nnmolar
                    {
                    pushFollow(FOLLOW_nnmolar_in_unmatchedToken314_static.FOLLOW_nnmolar_in_unmatchedToken314);
                    nnmolar25=nnmolar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmolar25.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:42: nnamount
                    {
                    pushFollow(FOLLOW_nnamount_in_unmatchedToken316_static.FOLLOW_nnamount_in_unmatchedToken316);
                    nnamount26=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount26.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:51: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_unmatchedToken318_static.FOLLOW_nnatmosphere_in_unmatchedToken318);
                    nnatmosphere27=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere27.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:64: nneq
                    {
                    pushFollow(FOLLOW_nneq_in_unmatchedToken320_static.FOLLOW_nneq_in_unmatchedToken320);
                    nneq28=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq28.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:69: nnvol
                    {
                    pushFollow(FOLLOW_nnvol_in_unmatchedToken322_static.FOLLOW_nnvol_in_unmatchedToken322);
                    nnvol29=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol29.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:75: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_unmatchedToken324_static.FOLLOW_nnchementity_in_unmatchedToken324);
                    nnchementity30=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity30.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:88: nntemp
                    {
                    pushFollow(FOLLOW_nntemp_in_unmatchedToken326_static.FOLLOW_nntemp_in_unmatchedToken326);
                    nntemp31=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp31.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:95: nnph
                    {
                    pushFollow(FOLLOW_nnph_in_unmatchedToken328_static.FOLLOW_nnph_in_unmatchedToken328);
                    nnph32=nnph();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnph32.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:100: nnflash
                    {
                    pushFollow(FOLLOW_nnflash_in_unmatchedToken330_static.FOLLOW_nnflash_in_unmatchedToken330);
                    nnflash33=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash33.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:108: nngeneral
                    {
                    pushFollow(FOLLOW_nngeneral_in_unmatchedToken332_static.FOLLOW_nngeneral_in_unmatchedToken332);
                    nngeneral34=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral34.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:118: nnmethod
                    {
                    pushFollow(FOLLOW_nnmethod_in_unmatchedToken334_static.FOLLOW_nnmethod_in_unmatchedToken334);
                    nnmethod35=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod35.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:127: nnpressure
                    {
                    pushFollow(FOLLOW_nnpressure_in_unmatchedToken336_static.FOLLOW_nnpressure_in_unmatchedToken336);
                    nnpressure36=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure36.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:138: nncolumn
                    {
                    pushFollow(FOLLOW_nncolumn_in_unmatchedToken338_static.FOLLOW_nncolumn_in_unmatchedToken338);
                    nncolumn37=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn37.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:147: nnchromatography
                    {
                    pushFollow(FOLLOW_nnchromatography_in_unmatchedToken340_static.FOLLOW_nnchromatography_in_unmatchedToken340);
                    nnchromatography38=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography38.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:164: nnvacuum
                    {
                    pushFollow(FOLLOW_nnvacuum_in_unmatchedToken342_static.FOLLOW_nnvacuum_in_unmatchedToken342);
                    nnvacuum39=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum39.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:173: nncycle
                    {
                    pushFollow(FOLLOW_nncycle_in_unmatchedToken344_static.FOLLOW_nncycle_in_unmatchedToken344);
                    nncycle40=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle40.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:181: nntimes
                    {
                    pushFollow(FOLLOW_nntimes_in_unmatchedToken346_static.FOLLOW_nntimes_in_unmatchedToken346);
                    nntimes41=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes41.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:2: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_unmatchedToken350_static.FOLLOW_oscarcm_in_unmatchedToken350);
                    oscarcm42=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm42.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:10: oscaronts
                    {
                    pushFollow(FOLLOW_oscaronts_in_unmatchedToken352_static.FOLLOW_oscaronts_in_unmatchedToken352);
                    oscaronts43=oscaronts();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaronts43.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:20: oscarase
                    {
                    pushFollow(FOLLOW_oscarase_in_unmatchedToken354_static.FOLLOW_oscarase_in_unmatchedToken354);
                    oscarase44=oscarase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase44.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:29: verb
                    {
                    pushFollow(FOLLOW_verb_in_unmatchedToken356_static.FOLLOW_verb_in_unmatchedToken356);
                    verb45=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb45.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:34: nnadd
                    {
                    pushFollow(FOLLOW_nnadd_in_unmatchedToken358_static.FOLLOW_nnadd_in_unmatchedToken358);
                    nnadd46=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd46.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:40: nnmixture
                    {
                    pushFollow(FOLLOW_nnmixture_in_unmatchedToken360_static.FOLLOW_nnmixture_in_unmatchedToken360);
                    nnmixture47=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture47.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:50: nnapparatus
                    {
                    pushFollow(FOLLOW_nnapparatus_in_unmatchedToken362_static.FOLLOW_nnapparatus_in_unmatchedToken362);
                    nnapparatus48=nnapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus48.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:62: nnconcentrate
                    {
                    pushFollow(FOLLOW_nnconcentrate_in_unmatchedToken364_static.FOLLOW_nnconcentrate_in_unmatchedToken364);
                    nnconcentrate49=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate49.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:76: nndry
                    {
                    pushFollow(FOLLOW_nndry_in_unmatchedToken366_static.FOLLOW_nndry_in_unmatchedToken366);
                    nndry50=nndry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nndry50.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:82: nnextract
                    {
                    pushFollow(FOLLOW_nnextract_in_unmatchedToken368_static.FOLLOW_nnextract_in_unmatchedToken368);
                    nnextract51=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract51.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:92: nnfilter
                    {
                    pushFollow(FOLLOW_nnfilter_in_unmatchedToken370_static.FOLLOW_nnfilter_in_unmatchedToken370);
                    nnfilter52=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter52.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:101: nnprecipitate
                    {
                    pushFollow(FOLLOW_nnprecipitate_in_unmatchedToken372_static.FOLLOW_nnprecipitate_in_unmatchedToken372);
                    nnprecipitate53=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate53.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:115: nnpurify
                    {
                    pushFollow(FOLLOW_nnpurify_in_unmatchedToken374_static.FOLLOW_nnpurify_in_unmatchedToken374);
                    nnpurify54=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify54.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:124: nnremove
                    {
                    pushFollow(FOLLOW_nnremove_in_unmatchedToken376_static.FOLLOW_nnremove_in_unmatchedToken376);
                    nnremove55=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove55.getTree());

                    }
                    break;
                case 42 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:133: nnsynthesize
                    {
                    pushFollow(FOLLOW_nnsynthesize_in_unmatchedToken378_static.FOLLOW_nnsynthesize_in_unmatchedToken378);
                    nnsynthesize56=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize56.getTree());

                    }
                    break;
                case 43 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:146: nnyield
                    {
                    pushFollow(FOLLOW_nnyield_in_unmatchedToken380_static.FOLLOW_nnyield_in_unmatchedToken380);
                    nnyield57=nnyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield57.getTree());

                    }
                    break;
                case 44 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:154: colon
                    {
                    pushFollow(FOLLOW_colon_in_unmatchedToken382_static.FOLLOW_colon_in_unmatchedToken382);
                    colon58=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon58.getTree());

                    }
                    break;
                case 45 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:160: apost
                    {
                    pushFollow(FOLLOW_apost_in_unmatchedToken384_static.FOLLOW_apost_in_unmatchedToken384);
                    apost59=apost();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apost59.getTree());

                    }
                    break;
                case 46 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:166: neg
                    {
                    pushFollow(FOLLOW_neg_in_unmatchedToken386_static.FOLLOW_neg_in_unmatchedToken386);
                    neg60=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg60.getTree());

                    }
                    break;
                case 47 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:170: dash
                    {
                    pushFollow(FOLLOW_dash_in_unmatchedToken388_static.FOLLOW_dash_in_unmatchedToken388);
                    dash61=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash61.getTree());

                    }
                    break;
                case 48 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:175: nnpercent
                    {
                    pushFollow(FOLLOW_nnpercent_in_unmatchedToken390_static.FOLLOW_nnpercent_in_unmatchedToken390);
                    nnpercent62=nnpercent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent62.getTree());

                    }
                    break;
                case 49 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:185: lsqb
                    {
                    pushFollow(FOLLOW_lsqb_in_unmatchedToken392_static.FOLLOW_lsqb_in_unmatchedToken392);
                    lsqb63=lsqb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb63.getTree());

                    }
                    break;
                case 50 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:190: rsqb
                    {
                    pushFollow(FOLLOW_rsqb_in_unmatchedToken394_static.FOLLOW_rsqb_in_unmatchedToken394);
                    rsqb64=rsqb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb64.getTree());

                    }
                    break;
                case 51 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:195: lrb
                    {
                    pushFollow(FOLLOW_lrb_in_unmatchedToken396_static.FOLLOW_lrb_in_unmatchedToken396);
                    lrb65=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb65.getTree());

                    }
                    break;
                case 52 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:199: rrb
                    {
                    pushFollow(FOLLOW_rrb_in_unmatchedToken398_static.FOLLOW_rrb_in_unmatchedToken398);
                    rrb66=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb66.getTree());

                    }
                    break;
                case 53 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:2: cc
                    {
                    pushFollow(FOLLOW_cc_in_unmatchedToken402_static.FOLLOW_cc_in_unmatchedToken402);
                    cc67=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc67.getTree());

                    }
                    break;
                case 54 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:5: dt
                    {
                    pushFollow(FOLLOW_dt_in_unmatchedToken404_static.FOLLOW_dt_in_unmatchedToken404);
                    dt68=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt68.getTree());

                    }
                    break;
                case 55 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:8: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_unmatchedToken406_static.FOLLOW_dtTHE_in_unmatchedToken406);
                    dtTHE69=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE69.getTree());

                    }
                    break;
                case 56 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:14: fw
                    {
                    pushFollow(FOLLOW_fw_in_unmatchedToken408_static.FOLLOW_fw_in_unmatchedToken408);
                    fw70=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw70.getTree());

                    }
                    break;
                case 57 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:17: md
                    {
                    pushFollow(FOLLOW_md_in_unmatchedToken410_static.FOLLOW_md_in_unmatchedToken410);
                    md71=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md71.getTree());

                    }
                    break;
                case 58 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:20: nn
                    {
                    pushFollow(FOLLOW_nn_in_unmatchedToken412_static.FOLLOW_nn_in_unmatchedToken412);
                    nn72=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn72.getTree());

                    }
                    break;
                case 59 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:23: nns
                    {
                    pushFollow(FOLLOW_nns_in_unmatchedToken414_static.FOLLOW_nns_in_unmatchedToken414);
                    nns73=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns73.getTree());

                    }
                    break;
                case 60 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:27: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_unmatchedToken416_static.FOLLOW_nnp_in_unmatchedToken416);
                    nnp74=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp74.getTree());

                    }
                    break;
                case 61 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:31: prp
                    {
                    pushFollow(FOLLOW_prp_in_unmatchedToken418_static.FOLLOW_prp_in_unmatchedToken418);
                    prp75=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp75.getTree());

                    }
                    break;
                case 62 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:35: prp_poss
                    {
                    pushFollow(FOLLOW_prp_poss_in_unmatchedToken420_static.FOLLOW_prp_poss_in_unmatchedToken420);
                    prp_poss76=prp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp_poss76.getTree());

                    }
                    break;
                case 63 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:44: rbconj
                    {
                    pushFollow(FOLLOW_rbconj_in_unmatchedToken422_static.FOLLOW_rbconj_in_unmatchedToken422);
                    rbconj77=rbconj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj77.getTree());

                    }
                    break;
                case 64 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:51: sym
                    {
                    pushFollow(FOLLOW_sym_in_unmatchedToken424_static.FOLLOW_sym_in_unmatchedToken424);
                    sym78=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym78.getTree());

                    }
                    break;
                case 65 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:55: uh
                    {
                    pushFollow(FOLLOW_uh_in_unmatchedToken426_static.FOLLOW_uh_in_unmatchedToken426);
                    uh79=uh();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, uh79.getTree());

                    }
                    break;
                case 66 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:58: clause
                    {
                    pushFollow(FOLLOW_clause_in_unmatchedToken428_static.FOLLOW_clause_in_unmatchedToken428);
                    clause80=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause80.getTree());

                    }
                    break;
                case 67 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:65: comma
                    {
                    pushFollow(FOLLOW_comma_in_unmatchedToken430_static.FOLLOW_comma_in_unmatchedToken430);
                    comma81=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma81.getTree());

                    }
                    break;
                case 68 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:71: ls
                    {
                    pushFollow(FOLLOW_ls_in_unmatchedToken432_static.FOLLOW_ls_in_unmatchedToken432);
                    ls82=ls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ls82.getTree());

                    }
                    break;
                case 69 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:74: nnps
                    {
                    pushFollow(FOLLOW_nnps_in_unmatchedToken434_static.FOLLOW_nnps_in_unmatchedToken434);
                    nnps83=nnps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnps83.getTree());

                    }
                    break;
                case 70 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:79: pos
                    {
                    pushFollow(FOLLOW_pos_in_unmatchedToken436_static.FOLLOW_pos_in_unmatchedToken436);
                    pos84=pos();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pos84.getTree());

                    }
                    break;
                case 71 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:83: nnidentifier
                    {
                    pushFollow(FOLLOW_nnidentifier_in_unmatchedToken438_static.FOLLOW_nnidentifier_in_unmatchedToken438);
                    nnidentifier85=nnidentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnidentifier85.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, unmatchedToken_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unmatchedToken"

    public static class nounphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:94:1: nounphrase : nounphraseStructure -> ^( NounPhrase nounphraseStructure ) ;
    public final ChemicalChunkerParser.nounphrase_return nounphrase() throws RecognitionException {
        ChemicalChunkerParser.nounphrase_return retval = new ChemicalChunkerParser.nounphrase_return();
        retval.start = input.LT(1);
        int nounphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure86 = null;


        RewriteRuleSubtreeStream stream_nounphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule nounphraseStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:2: ( nounphraseStructure -> ^( NounPhrase nounphraseStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:4: nounphraseStructure
            {
            pushFollow(FOLLOW_nounphraseStructure_in_nounphrase448_static.FOLLOW_nounphraseStructure_in_nounphrase448);
            nounphraseStructure86=nounphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphraseStructure.add(nounphraseStructure86.getTree());


            // AST REWRITE
            // elements: nounphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 95:24: -> ^( NounPhrase nounphraseStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:28: ^( NounPhrase nounphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NounPhrase, "NounPhrase"), root_1);

                adaptor.addChild(root_1, stream_nounphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, nounphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphrase"

    public static class nounphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );
    public final ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure_return retval = new ChemicalChunkerParser.nounphraseStructure_return();
        retval.start = input.LT(1);
        int nounphraseStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure187 = null;

        ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure288 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:2: ( nounphraseStructure1 | nounphraseStructure2 )
            int alt8=2;
            alt8 = dfa8.predict(input);
            switch (alt8) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:4: nounphraseStructure1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure1_in_nounphraseStructure467_static.FOLLOW_nounphraseStructure1_in_nounphraseStructure467);
                    nounphraseStructure187=nounphraseStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure187.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:25: nounphraseStructure2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure2_in_nounphraseStructure469_static.FOLLOW_nounphraseStructure2_in_nounphraseStructure469);
                    nounphraseStructure288=nounphraseStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure288.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, nounphraseStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure"

    public static class nounphraseStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:1: nounphraseStructure1 : multiApparatus -> ^( MultipleApparatus multiApparatus ) ;
    public final ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure1() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure1_return retval = new ChemicalChunkerParser.nounphraseStructure1_return();
        retval.start = input.LT(1);
        int nounphraseStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.multiApparatus_return multiApparatus89 = null;


        RewriteRuleSubtreeStream stream_multiApparatus=new RewriteRuleSubtreeStream(adaptor,"rule multiApparatus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:2: ( multiApparatus -> ^( MultipleApparatus multiApparatus ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:5: multiApparatus
            {
            pushFollow(FOLLOW_multiApparatus_in_nounphraseStructure1478_static.FOLLOW_multiApparatus_in_nounphraseStructure1478);
            multiApparatus89=multiApparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_multiApparatus.add(multiApparatus89.getTree());


            // AST REWRITE
            // elements: multiApparatus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 100:20: -> ^( MultipleApparatus multiApparatus )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:24: ^( MultipleApparatus multiApparatus )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MultipleApparatus, "MultipleApparatus"), root_1);

                adaptor.addChild(root_1, stream_multiApparatus.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, nounphraseStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure1"

    public static class nounphraseStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:1: nounphraseStructure2 : ( dtTHE )? ( dt )? nounphraseContent ( ( conjunction )* nounphraseContent )* ( prepphraseOf | prepphraseIN )? ;
    public final ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure2() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure2_return retval = new ChemicalChunkerParser.nounphraseStructure2_return();
        retval.start = input.LT(1);
        int nounphraseStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE90 = null;

        ChemicalChunkerParser.dt_return dt91 = null;

        ChemicalChunkerParser.nounphraseContent_return nounphraseContent92 = null;

        ChemicalChunkerParser.conjunction_return conjunction93 = null;

        ChemicalChunkerParser.nounphraseContent_return nounphraseContent94 = null;

        ChemicalChunkerParser.prepphraseOf_return prepphraseOf95 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN96 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:2: ( ( dtTHE )? ( dt )? nounphraseContent ( ( conjunction )* nounphraseContent )* ( prepphraseOf | prepphraseIN )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:4: ( dtTHE )? ( dt )? nounphraseContent ( ( conjunction )* nounphraseContent )* ( prepphraseOf | prepphraseIN )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:4: ( dtTHE )?
            int alt9=2;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt9=1;
                    }
                    break;
            }

            switch (alt9) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_nounphraseStructure2495_static.FOLLOW_dtTHE_in_nounphraseStructure2495);
                    dtTHE90=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE90.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:11: ( dt )?
            int alt10=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA10_3 = input.LA(3);

                            if ( (synpred86_ChemicalChunker()) ) {
                                alt10=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt10) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_nounphraseStructure2498_static.FOLLOW_dt_in_nounphraseStructure2498);
                    dt91=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt91.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nounphraseContent_in_nounphraseStructure2501_static.FOLLOW_nounphraseContent_in_nounphraseStructure2501);
            nounphraseContent92=nounphraseContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseContent92.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:34: ( ( conjunction )* nounphraseContent )*
            loop12:
            do {
                int alt12=2;
                alt12 = dfa12.predict(input);
                switch (alt12) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:35: ( conjunction )* nounphraseContent
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:35: ( conjunction )*
            	    loop11:
            	    do {
            	        int alt11=2;
            	        alt11 = dfa11.predict(input);
            	        switch (alt11) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_nounphraseStructure2505_static.FOLLOW_conjunction_in_nounphraseStructure2505);
            	    	    conjunction93=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction93.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop11;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_nounphraseContent_in_nounphraseStructure2508_static.FOLLOW_nounphraseContent_in_nounphraseStructure2508);
            	    nounphraseContent94=nounphraseContent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseContent94.getTree());

            	    }
            	    break;

            	default :
            	    break loop12;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:68: ( prepphraseOf | prepphraseIN )?
            int alt13=3;
            switch ( input.LA(1) ) {
                case 56:
                    {
                    int LA13_1 = input.LA(2);

                    if ( (synpred89_ChemicalChunker()) ) {
                        alt13=1;
                    }
                    }
                    break;
                case 50:
                    {
                    int LA13_2 = input.LA(2);

                    if ( (synpred90_ChemicalChunker()) ) {
                        alt13=2;
                    }
                    }
                    break;
            }

            switch (alt13) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:69: prepphraseOf
                    {
                    pushFollow(FOLLOW_prepphraseOf_in_nounphraseStructure2513_static.FOLLOW_prepphraseOf_in_nounphraseStructure2513);
                    prepphraseOf95=prepphraseOf();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOf95.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:83: prepphraseIN
                    {
                    pushFollow(FOLLOW_prepphraseIN_in_nounphraseStructure2516_static.FOLLOW_prepphraseIN_in_nounphraseStructure2516);
                    prepphraseIN96=prepphraseIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN96.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, nounphraseStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure2"

    public static class nounphraseContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:1: nounphraseContent : ( advAdj )* ( dissolvePhrase | ratio | noun | numeric )+ ;
    public final ChemicalChunkerParser.nounphraseContent_return nounphraseContent() throws RecognitionException {
        ChemicalChunkerParser.nounphraseContent_return retval = new ChemicalChunkerParser.nounphraseContent_return();
        retval.start = input.LT(1);
        int nounphraseContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj97 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase98 = null;

        ChemicalChunkerParser.ratio_return ratio99 = null;

        ChemicalChunkerParser.noun_return noun100 = null;

        ChemicalChunkerParser.numeric_return numeric101 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:2: ( ( advAdj )* ( dissolvePhrase | ratio | noun | numeric )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:4: ( advAdj )* ( dissolvePhrase | ratio | noun | numeric )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:4: ( advAdj )*
            loop14:
            do {
                int alt14=2;
                alt14 = dfa14.predict(input);
                switch (alt14) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_nounphraseContent528_static.FOLLOW_advAdj_in_nounphraseContent528);
            	    advAdj97=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj97.getTree());

            	    }
            	    break;

            	default :
            	    break loop14;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:13: ( dissolvePhrase | ratio | noun | numeric )+
            int cnt15=0;
            loop15:
            do {
                int alt15=5;
                alt15 = dfa15.predict(input);
                switch (alt15) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:14: dissolvePhrase
            	    {
            	    pushFollow(FOLLOW_dissolvePhrase_in_nounphraseContent533_static.FOLLOW_dissolvePhrase_in_nounphraseContent533);
            	    dissolvePhrase98=dissolvePhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase98.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:29: ratio
            	    {
            	    pushFollow(FOLLOW_ratio_in_nounphraseContent535_static.FOLLOW_ratio_in_nounphraseContent535);
            	    ratio99=ratio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio99.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:35: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_nounphraseContent537_static.FOLLOW_noun_in_nounphraseContent537);
            	    noun100=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun100.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:40: numeric
            	    {
            	    pushFollow(FOLLOW_numeric_in_nounphraseContent539_static.FOLLOW_numeric_in_nounphraseContent539);
            	    numeric101=numeric();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric101.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt15 >= 1 ) break loop15;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(15, input);
                        throw eee;
                }
                cnt15++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, nounphraseContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseContent"

    public static class dissolvePhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolvePhrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:1: dissolvePhrase : ( dissolveStructure | lrb dissolveStructure rrb ) -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? ) ;
    public final ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase() throws RecognitionException {
        ChemicalChunkerParser.dissolvePhrase_return retval = new ChemicalChunkerParser.dissolvePhrase_return();
        retval.start = input.LT(1);
        int dissolvePhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dissolveStructure_return dissolveStructure102 = null;

        ChemicalChunkerParser.lrb_return lrb103 = null;

        ChemicalChunkerParser.dissolveStructure_return dissolveStructure104 = null;

        ChemicalChunkerParser.rrb_return rrb105 = null;


        RewriteRuleSubtreeStream stream_dissolveStructure=new RewriteRuleSubtreeStream(adaptor,"rule dissolveStructure");
        RewriteRuleSubtreeStream stream_lrb=new RewriteRuleSubtreeStream(adaptor,"rule lrb");
        RewriteRuleSubtreeStream stream_rrb=new RewriteRuleSubtreeStream(adaptor,"rule rrb");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:108:2: ( ( dissolveStructure | lrb dissolveStructure rrb ) -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:108:4: ( dissolveStructure | lrb dissolveStructure rrb )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:108:4: ( dissolveStructure | lrb dissolveStructure rrb )
            int alt16=2;
            alt16 = dfa16.predict(input);
            switch (alt16) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:108:5: dissolveStructure
                    {
                    pushFollow(FOLLOW_dissolveStructure_in_dissolvePhrase551_static.FOLLOW_dissolveStructure_in_dissolvePhrase551);
                    dissolveStructure102=dissolveStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure.add(dissolveStructure102.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:108:23: lrb dissolveStructure rrb
                    {
                    pushFollow(FOLLOW_lrb_in_dissolvePhrase553_static.FOLLOW_lrb_in_dissolvePhrase553);
                    lrb103=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lrb.add(lrb103.getTree());
                    pushFollow(FOLLOW_dissolveStructure_in_dissolvePhrase555_static.FOLLOW_dissolveStructure_in_dissolvePhrase555);
                    dissolveStructure104=dissolveStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure.add(dissolveStructure104.getTree());
                    pushFollow(FOLLOW_rrb_in_dissolvePhrase557_static.FOLLOW_rrb_in_dissolvePhrase557);
                    rrb105=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rrb.add(rrb105.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: dissolveStructure, rrb, lrb
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 108:50: -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:108:54: ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DissolvePhrase, "DissolvePhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:108:71: ( lrb )?
                if ( stream_lrb.hasNext() ) {
                    adaptor.addChild(root_1, stream_lrb.nextTree());

                }
                stream_lrb.reset();
                adaptor.addChild(root_1, stream_dissolveStructure.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:108:94: ( rrb )?
                if ( stream_rrb.hasNext() ) {
                    adaptor.addChild(root_1, stream_rrb.nextTree());

                }
                stream_rrb.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, dissolvePhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dissolvePhrase"

    public static class dissolveStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolveStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:1: dissolveStructure : ( adj )? ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ ;
    public final ChemicalChunkerParser.dissolveStructure_return dissolveStructure() throws RecognitionException {
        ChemicalChunkerParser.dissolveStructure_return retval = new ChemicalChunkerParser.dissolveStructure_return();
        retval.start = input.LT(1);
        int dissolveStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj106 = null;

        ChemicalChunkerParser.nnp_return nnp107 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity108 = null;

        ChemicalChunkerParser.nnp_return nnp109 = null;

        ChemicalChunkerParser.molecule_return molecule110 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule111 = null;

        ChemicalChunkerParser.inin_return inin112 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE113 = null;

        ChemicalChunkerParser.adj_return adj114 = null;

        ChemicalChunkerParser.nnp_return nnp115 = null;

        ChemicalChunkerParser.molecule_return molecule116 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule117 = null;

        ChemicalChunkerParser.conjunction_return conjunction118 = null;

        ChemicalChunkerParser.molecule_return molecule119 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:2: ( ( adj )? ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:4: ( adj )? ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:4: ( adj )?
            int alt17=2;
            alt17 = dfa17.predict(input);
            switch (alt17) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_dissolveStructure582_static.FOLLOW_adj_in_dissolveStructure582);
                    adj106=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj106.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:9: ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) )
            int alt20=2;
            switch ( input.LA(1) ) {
            case 158:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 71:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 50:
                                {
                                alt20=1;
                                }
                                break;
                            case 38:
                            case 139:
                            case 141:
                            case 143:
                            case 146:
                                {
                                alt20=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 20, 5, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 20, 4, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 38:
                    case 39:
                    case 40:
                    case 45:
                    case 46:
                    case 73:
                    case 84:
                    case 133:
                    case 139:
                    case 141:
                    case 143:
                    case 146:
                    case 151:
                    case 152:
                    case 153:
                        {
                        alt20=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 20, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 20, 1, input);

                    throw nvae;
                }

                }
                break;
            case 38:
            case 39:
            case 40:
            case 45:
            case 46:
            case 71:
            case 73:
            case 84:
            case 133:
            case 139:
            case 141:
            case 143:
            case 146:
            case 151:
            case 152:
            case 153:
                {
                alt20=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;
            }

            switch (alt20) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:10: nnp nnchementity
                    {
                    pushFollow(FOLLOW_nnp_in_dissolveStructure586_static.FOLLOW_nnp_in_dissolveStructure586);
                    nnp107=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp107.getTree());
                    pushFollow(FOLLOW_nnchementity_in_dissolveStructure588_static.FOLLOW_nnchementity_in_dissolveStructure588);
                    nnchementity108=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity108.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:28: ( nnp )? ( molecule | unnamedmolecule )
                    {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:28: ( nnp )?
                    int alt18=2;
                    switch ( input.LA(1) ) {
                        case 158:
                            {
                            alt18=1;
                            }
                            break;
                    }

                    switch (alt18) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
                            {
                            pushFollow(FOLLOW_nnp_in_dissolveStructure591_static.FOLLOW_nnp_in_dissolveStructure591);
                            nnp109=nnp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp109.getTree());

                            }
                            break;

                    }

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:32: ( molecule | unnamedmolecule )
                    int alt19=2;
                    alt19 = dfa19.predict(input);
                    switch (alt19) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:33: molecule
                            {
                            pushFollow(FOLLOW_molecule_in_dissolveStructure594_static.FOLLOW_molecule_in_dissolveStructure594);
                            molecule110=molecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule110.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:42: unnamedmolecule
                            {
                            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure596_static.FOLLOW_unnamedmolecule_in_dissolveStructure596);
                            unnamedmolecule111=unnamedmolecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule111.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:60: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+
            int cnt26=0;
            loop26:
            do {
                int alt26=2;
                alt26 = dfa26.predict(input);
                switch (alt26) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:61: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )*
            	    {
            	    pushFollow(FOLLOW_inin_in_dissolveStructure601_static.FOLLOW_inin_in_dissolveStructure601);
            	    inin112=inin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin112.getTree());
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:66: ( dtTHE )?
            	    int alt21=2;
            	    switch ( input.LA(1) ) {
            	        case 142:
            	            {
            	            alt21=1;
            	            }
            	            break;
            	    }

            	    switch (alt21) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
            	            {
            	            pushFollow(FOLLOW_dtTHE_in_dissolveStructure603_static.FOLLOW_dtTHE_in_dissolveStructure603);
            	            dtTHE113=dtTHE();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE113.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:73: ( adj )?
            	    int alt22=2;
            	    alt22 = dfa22.predict(input);
            	    switch (alt22) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dissolveStructure606_static.FOLLOW_adj_in_dissolveStructure606);
            	            adj114=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj114.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:78: ( nnp )?
            	    int alt23=2;
            	    switch ( input.LA(1) ) {
            	        case 158:
            	            {
            	            alt23=1;
            	            }
            	            break;
            	    }

            	    switch (alt23) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
            	            {
            	            pushFollow(FOLLOW_nnp_in_dissolveStructure609_static.FOLLOW_nnp_in_dissolveStructure609);
            	            nnp115=nnp();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp115.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:83: ( molecule | unnamedmolecule )
            	    int alt24=2;
            	    alt24 = dfa24.predict(input);
            	    switch (alt24) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:84: molecule
            	            {
            	            pushFollow(FOLLOW_molecule_in_dissolveStructure613_static.FOLLOW_molecule_in_dissolveStructure613);
            	            molecule116=molecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule116.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:93: unnamedmolecule
            	            {
            	            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure615_static.FOLLOW_unnamedmolecule_in_dissolveStructure615);
            	            unnamedmolecule117=unnamedmolecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule117.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:110: ( conjunction molecule )*
            	    loop25:
            	    do {
            	        int alt25=2;
            	        alt25 = dfa25.predict(input);
            	        switch (alt25) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:111: conjunction molecule
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_dissolveStructure619_static.FOLLOW_conjunction_in_dissolveStructure619);
            	    	    conjunction118=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction118.getTree());
            	    	    pushFollow(FOLLOW_molecule_in_dissolveStructure621_static.FOLLOW_molecule_in_dissolveStructure621);
            	    	    molecule119=molecule();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule119.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop25;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt26 >= 1 ) break loop26;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(26, input);
                        throw eee;
                }
                cnt26++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, dissolveStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dissolveStructure"

    public static class verbphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:1: verbphrase : verbphraseStructure -> ^( VerbPhrase verbphraseStructure ) ;
    public final ChemicalChunkerParser.verbphrase_return verbphrase() throws RecognitionException {
        ChemicalChunkerParser.verbphrase_return retval = new ChemicalChunkerParser.verbphrase_return();
        retval.start = input.LT(1);
        int verbphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure120 = null;


        RewriteRuleSubtreeStream stream_verbphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule verbphraseStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:115:2: ( verbphraseStructure -> ^( VerbPhrase verbphraseStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:115:4: verbphraseStructure
            {
            pushFollow(FOLLOW_verbphraseStructure_in_verbphrase636_static.FOLLOW_verbphraseStructure_in_verbphrase636);
            verbphraseStructure120=verbphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_verbphraseStructure.add(verbphraseStructure120.getTree());


            // AST REWRITE
            // elements: verbphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 115:24: -> ^( VerbPhrase verbphraseStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:115:28: ^( VerbPhrase verbphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VerbPhrase, "VerbPhrase"), root_1);

                adaptor.addChild(root_1, stream_verbphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, verbphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verbphrase"

    public static class verbphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphraseStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:1: verbphraseStructure : ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* ;
    public final ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.verbphraseStructure_return retval = new ChemicalChunkerParser.verbphraseStructure_return();
        retval.start = input.LT(1);
        int verbphraseStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt121 = null;

        ChemicalChunkerParser.to_return to122 = null;

        ChemicalChunkerParser.inAll_return inAll123 = null;

        ChemicalChunkerParser.inafter_return inafter124 = null;

        ChemicalChunkerParser.md_return md125 = null;

        ChemicalChunkerParser.rbconj_return rbconj126 = null;

        ChemicalChunkerParser.adv_return adv127 = null;

        ChemicalChunkerParser.adj_return adj128 = null;

        ChemicalChunkerParser.verb_return verb129 = null;

        ChemicalChunkerParser.md_return md130 = null;

        ChemicalChunkerParser.adv_return adv131 = null;

        ChemicalChunkerParser.adj_return adj132 = null;

        ChemicalChunkerParser.neg_return neg133 = null;

        ChemicalChunkerParser.inoff_return inoff134 = null;

        ChemicalChunkerParser.cc_return cc135 = null;

        ChemicalChunkerParser.comma_return comma136 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase137 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:21: ( ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:24: ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:24: ( dt )?
            int alt27=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt27=1;
                    }
                    break;
            }

            switch (alt27) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_verbphraseStructure654_static.FOLLOW_dt_in_verbphraseStructure654);
                    dt121=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt121.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:28: ( to )?
            int alt28=2;
            switch ( input.LA(1) ) {
                case 169:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA28_3 = input.LA(3);

                            if ( (synpred108_ChemicalChunker()) ) {
                                alt28=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt28) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: to
                    {
                    pushFollow(FOLLOW_to_in_verbphraseStructure657_static.FOLLOW_to_in_verbphraseStructure657);
                    to122=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to122.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:32: ( inAll )?
            int alt29=2;
            switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 150:
                case 169:
                    {
                    alt29=1;
                    }
                    break;
                case 49:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA29_4 = input.LA(3);

                            if ( (synpred109_ChemicalChunker()) ) {
                                alt29=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt29) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_verbphraseStructure660_static.FOLLOW_inAll_in_verbphraseStructure660);
                    inAll123=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll123.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:39: ( inafter )?
            int alt30=2;
            switch ( input.LA(1) ) {
                case 49:
                    {
                    alt30=1;
                    }
                    break;
            }

            switch (alt30) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inafter
                    {
                    pushFollow(FOLLOW_inafter_in_verbphraseStructure663_static.FOLLOW_inafter_in_verbphraseStructure663);
                    inafter124=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter124.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:48: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+
            int cnt40=0;
            loop40:
            do {
                int alt40=2;
                alt40 = dfa40.predict(input);
                switch (alt40) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:49: ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:49: ( md )*
            	    loop31:
            	    do {
            	        int alt31=2;
            	        switch ( input.LA(1) ) {
            	        case 155:
            	            {
            	            alt31=1;
            	            }
            	            break;

            	        }

            	        switch (alt31) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure667_static.FOLLOW_md_in_verbphraseStructure667);
            	    	    md125=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md125.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop31;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:53: ( rbconj )?
            	    int alt32=2;
            	    switch ( input.LA(1) ) {
            	        case 131:
            	            {
            	            alt32=1;
            	            }
            	            break;
            	    }

            	    switch (alt32) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: rbconj
            	            {
            	            pushFollow(FOLLOW_rbconj_in_verbphraseStructure670_static.FOLLOW_rbconj_in_verbphraseStructure670);
            	            rbconj126=rbconj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj126.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:61: ( adv )*
            	    loop33:
            	    do {
            	        int alt33=2;
            	        switch ( input.LA(1) ) {
            	        case 164:
            	        case 165:
            	        case 166:
            	        case 167:
            	            {
            	            alt33=1;
            	            }
            	            break;

            	        }

            	        switch (alt33) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure673_static.FOLLOW_adv_in_verbphraseStructure673);
            	    	    adv127=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv127.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop33;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:66: ( adj )?
            	    int alt34=2;
            	    switch ( input.LA(1) ) {
            	        case 39:
            	        case 40:
            	        case 45:
            	        case 151:
            	        case 152:
            	        case 153:
            	            {
            	            alt34=1;
            	            }
            	            break;
            	    }

            	    switch (alt34) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure676_static.FOLLOW_adj_in_verbphraseStructure676);
            	            adj128=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj128.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:71: ( verb )+
            	    int cnt35=0;
            	    loop35:
            	    do {
            	        int alt35=2;
            	        alt35 = dfa35.predict(input);
            	        switch (alt35) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: verb
            	    	    {
            	    	    pushFollow(FOLLOW_verb_in_verbphraseStructure679_static.FOLLOW_verb_in_verbphraseStructure679);
            	    	    verb129=verb();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb129.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt35 >= 1 ) break loop35;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(35, input);
            	                throw eee;
            	        }
            	        cnt35++;
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:77: ( md )*
            	    loop36:
            	    do {
            	        int alt36=2;
            	        switch ( input.LA(1) ) {
            	        case 155:
            	            {
            	            switch ( input.LA(2) ) {
            	            case TOKEN:
            	                {
            	                int LA36_3 = input.LA(3);

            	                if ( (synpred116_ChemicalChunker()) ) {
            	                    alt36=1;
            	                }


            	                }
            	                break;

            	            }

            	            }
            	            break;

            	        }

            	        switch (alt36) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure682_static.FOLLOW_md_in_verbphraseStructure682);
            	    	    md130=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md130.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop36;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:81: ( adv )*
            	    loop37:
            	    do {
            	        int alt37=2;
            	        alt37 = dfa37.predict(input);
            	        switch (alt37) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure685_static.FOLLOW_adv_in_verbphraseStructure685);
            	    	    adv131=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv131.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop37;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:86: ( adj )?
            	    int alt38=2;
            	    alt38 = dfa38.predict(input);
            	    switch (alt38) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure688_static.FOLLOW_adj_in_verbphraseStructure688);
            	            adj132=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj132.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:91: ( neg )?
            	    int alt39=2;
            	    switch ( input.LA(1) ) {
            	        case 135:
            	            {
            	            switch ( input.LA(2) ) {
            	                case TOKEN:
            	                    {
            	                    int LA39_3 = input.LA(3);

            	                    if ( (synpred119_ChemicalChunker()) ) {
            	                        alt39=1;
            	                    }
            	                    }
            	                    break;
            	            }

            	            }
            	            break;
            	    }

            	    switch (alt39) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
            	            {
            	            pushFollow(FOLLOW_neg_in_verbphraseStructure691_static.FOLLOW_neg_in_verbphraseStructure691);
            	            neg133=neg();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, neg133.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt40 >= 1 ) break loop40;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(40, input);
                        throw eee;
                }
                cnt40++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:99: ( inoff )?
            int alt41=2;
            switch ( input.LA(1) ) {
                case 62:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA41_3 = input.LA(3);

                            if ( (synpred121_ChemicalChunker()) ) {
                                alt41=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt41) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inoff
                    {
                    pushFollow(FOLLOW_inoff_in_verbphraseStructure697_static.FOLLOW_inoff_in_verbphraseStructure697);
                    inoff134=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff134.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:106: ( ( cc )? ( comma )? prepphrase )*
            loop44:
            do {
                int alt44=2;
                alt44 = dfa44.predict(input);
                switch (alt44) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:107: ( cc )? ( comma )? prepphrase
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:107: ( cc )?
            	    int alt42=2;
            	    switch ( input.LA(1) ) {
            	        case 145:
            	            {
            	            alt42=1;
            	            }
            	            break;
            	    }

            	    switch (alt42) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cc
            	            {
            	            pushFollow(FOLLOW_cc_in_verbphraseStructure701_static.FOLLOW_cc_in_verbphraseStructure701);
            	            cc135=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc135.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:111: ( comma )?
            	    int alt43=2;
            	    switch ( input.LA(1) ) {
            	        case 133:
            	            {
            	            alt43=1;
            	            }
            	            break;
            	    }

            	    switch (alt43) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: comma
            	            {
            	            pushFollow(FOLLOW_comma_in_verbphraseStructure704_static.FOLLOW_comma_in_verbphraseStructure704);
            	            comma136=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma136.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_prepphrase_in_verbphraseStructure707_static.FOLLOW_prepphrase_in_verbphraseStructure707);
            	    prepphrase137=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase137.getTree());

            	    }
            	    break;

            	default :
            	    break loop44;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, verbphraseStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verbphraseStructure"

    public static class verb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );
    public final ChemicalChunkerParser.verb_return verb() throws RecognitionException {
        ChemicalChunkerParser.verb_return retval = new ChemicalChunkerParser.verb_return();
        retval.start = input.LT(1);
        int verb_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vb_return vb138 = null;

        ChemicalChunkerParser.vbp_return vbp139 = null;

        ChemicalChunkerParser.vbg_return vbg140 = null;

        ChemicalChunkerParser.vbd_return vbd141 = null;

        ChemicalChunkerParser.vbz_return vbz142 = null;

        ChemicalChunkerParser.vbn_return vbn143 = null;

        ChemicalChunkerParser.vbuse_return vbuse144 = null;

        ChemicalChunkerParser.vbsubmerge_return vbsubmerge145 = null;

        ChemicalChunkerParser.vbimmerse_return vbimmerse146 = null;

        ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb147 = null;

        ChemicalChunkerParser.vbsubject_return vbsubject148 = null;

        ChemicalChunkerParser.vbadd_return vbadd149 = null;

        ChemicalChunkerParser.vbdilute_return vbdilute150 = null;

        ChemicalChunkerParser.vbcharge_return vbcharge151 = null;

        ChemicalChunkerParser.vbcontain_return vbcontain152 = null;

        ChemicalChunkerParser.vbdrop_return vbdrop153 = null;

        ChemicalChunkerParser.vbfill_return vbfill154 = null;

        ChemicalChunkerParser.vbsuspend_return vbsuspend155 = null;

        ChemicalChunkerParser.vbtreat_return vbtreat156 = null;

        ChemicalChunkerParser.vbapparatus_return vbapparatus157 = null;

        ChemicalChunkerParser.vbconcentrate_return vbconcentrate158 = null;

        ChemicalChunkerParser.vbcool_return vbcool159 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass160 = null;

        ChemicalChunkerParser.vbdissolve_return vbdissolve161 = null;

        ChemicalChunkerParser.vbdry_return vbdry162 = null;

        ChemicalChunkerParser.vbextract_return vbextract163 = null;

        ChemicalChunkerParser.vbfilter_return vbfilter164 = null;

        ChemicalChunkerParser.vbheat_return vbheat165 = null;

        ChemicalChunkerParser.vbincrease_return vbincrease166 = null;

        ChemicalChunkerParser.vbpartition_return vbpartition167 = null;

        ChemicalChunkerParser.vbprecipitate_return vbprecipitate168 = null;

        ChemicalChunkerParser.vbpurify_return vbpurify169 = null;

        ChemicalChunkerParser.vbquench_return vbquench170 = null;

        ChemicalChunkerParser.vbrecover_return vbrecover171 = null;

        ChemicalChunkerParser.vbremove_return vbremove172 = null;

        ChemicalChunkerParser.vbstir_return vbstir173 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize174 = null;

        ChemicalChunkerParser.vbwait_return vbwait175 = null;

        ChemicalChunkerParser.vbwash_return vbwash176 = null;

        ChemicalChunkerParser.vbyield_return vbyield177 = null;

        ChemicalChunkerParser.vbchange_return vbchange178 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:6: ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange )
            int alt45=41;
            alt45 = dfa45.predict(input);
            switch (alt45) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:8: vb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vb_in_verb719_static.FOLLOW_vb_in_verb719);
                    vb138=vb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vb138.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:11: vbp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbp_in_verb721_static.FOLLOW_vbp_in_verb721);
                    vbp139=vbp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbp139.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:15: vbg
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbg_in_verb723_static.FOLLOW_vbg_in_verb723);
                    vbg140=vbg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbg140.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:19: vbd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbd_in_verb725_static.FOLLOW_vbd_in_verb725);
                    vbd141=vbd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbd141.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:23: vbz
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbz_in_verb727_static.FOLLOW_vbz_in_verb727);
                    vbz142=vbz();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbz142.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:27: vbn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbn_in_verb729_static.FOLLOW_vbn_in_verb729);
                    vbn143=vbn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbn143.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:31: vbuse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbuse_in_verb731_static.FOLLOW_vbuse_in_verb731);
                    vbuse144=vbuse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbuse144.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:37: vbsubmerge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubmerge_in_verb733_static.FOLLOW_vbsubmerge_in_verb733);
                    vbsubmerge145=vbsubmerge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubmerge145.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:48: vbimmerse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbimmerse_in_verb735_static.FOLLOW_vbimmerse_in_verb735);
                    vbimmerse146=vbimmerse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbimmerse146.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:58: degassMultiVerb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_degassMultiVerb_in_verb737_static.FOLLOW_degassMultiVerb_in_verb737);
                    degassMultiVerb147=degassMultiVerb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, degassMultiVerb147.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:74: vbsubject
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubject_in_verb739_static.FOLLOW_vbsubject_in_verb739);
                    vbsubject148=vbsubject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubject148.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:84: vbadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbadd_in_verb741_static.FOLLOW_vbadd_in_verb741);
                    vbadd149=vbadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbadd149.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:90: vbdilute
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdilute_in_verb743_static.FOLLOW_vbdilute_in_verb743);
                    vbdilute150=vbdilute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdilute150.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:99: vbcharge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcharge_in_verb745_static.FOLLOW_vbcharge_in_verb745);
                    vbcharge151=vbcharge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcharge151.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:108: vbcontain
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcontain_in_verb747_static.FOLLOW_vbcontain_in_verb747);
                    vbcontain152=vbcontain();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcontain152.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:118: vbdrop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdrop_in_verb749_static.FOLLOW_vbdrop_in_verb749);
                    vbdrop153=vbdrop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdrop153.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:125: vbfill
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfill_in_verb751_static.FOLLOW_vbfill_in_verb751);
                    vbfill154=vbfill();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill154.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:132: vbsuspend
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsuspend_in_verb753_static.FOLLOW_vbsuspend_in_verb753);
                    vbsuspend155=vbsuspend();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsuspend155.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:142: vbtreat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbtreat_in_verb755_static.FOLLOW_vbtreat_in_verb755);
                    vbtreat156=vbtreat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbtreat156.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:150: vbapparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbapparatus_in_verb757_static.FOLLOW_vbapparatus_in_verb757);
                    vbapparatus157=vbapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbapparatus157.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:162: vbconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbconcentrate_in_verb759_static.FOLLOW_vbconcentrate_in_verb759);
                    vbconcentrate158=vbconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbconcentrate158.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:176: vbcool
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcool_in_verb761_static.FOLLOW_vbcool_in_verb761);
                    vbcool159=vbcool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcool159.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:183: vbdegass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdegass_in_verb763_static.FOLLOW_vbdegass_in_verb763);
                    vbdegass160=vbdegass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass160.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:192: vbdissolve
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdissolve_in_verb765_static.FOLLOW_vbdissolve_in_verb765);
                    vbdissolve161=vbdissolve();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdissolve161.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:203: vbdry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdry_in_verb767_static.FOLLOW_vbdry_in_verb767);
                    vbdry162=vbdry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdry162.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:209: vbextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbextract_in_verb769_static.FOLLOW_vbextract_in_verb769);
                    vbextract163=vbextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbextract163.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:219: vbfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfilter_in_verb771_static.FOLLOW_vbfilter_in_verb771);
                    vbfilter164=vbfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfilter164.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:229: vbheat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbheat_in_verb774_static.FOLLOW_vbheat_in_verb774);
                    vbheat165=vbheat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbheat165.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:236: vbincrease
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbincrease_in_verb776_static.FOLLOW_vbincrease_in_verb776);
                    vbincrease166=vbincrease();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbincrease166.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:247: vbpartition
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpartition_in_verb778_static.FOLLOW_vbpartition_in_verb778);
                    vbpartition167=vbpartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpartition167.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:259: vbprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbprecipitate_in_verb780_static.FOLLOW_vbprecipitate_in_verb780);
                    vbprecipitate168=vbprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbprecipitate168.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:273: vbpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpurify_in_verb782_static.FOLLOW_vbpurify_in_verb782);
                    vbpurify169=vbpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpurify169.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:282: vbquench
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbquench_in_verb784_static.FOLLOW_vbquench_in_verb784);
                    vbquench170=vbquench();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbquench170.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:291: vbrecover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbrecover_in_verb786_static.FOLLOW_vbrecover_in_verb786);
                    vbrecover171=vbrecover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbrecover171.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:301: vbremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbremove_in_verb788_static.FOLLOW_vbremove_in_verb788);
                    vbremove172=vbremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbremove172.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:310: vbstir
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbstir_in_verb790_static.FOLLOW_vbstir_in_verb790);
                    vbstir173=vbstir();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbstir173.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:317: vbsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsynthesize_in_verb792_static.FOLLOW_vbsynthesize_in_verb792);
                    vbsynthesize174=vbsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize174.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:330: vbwait
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwait_in_verb794_static.FOLLOW_vbwait_in_verb794);
                    vbwait175=vbwait();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwait175.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:337: vbwash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwash_in_verb796_static.FOLLOW_vbwash_in_verb796);
                    vbwash176=vbwash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwash176.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:344: vbyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbyield_in_verb798_static.FOLLOW_vbyield_in_verb798);
                    vbyield177=vbyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield177.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:352: vbchange
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbchange_in_verb800_static.FOLLOW_vbchange_in_verb800);
                    vbchange178=vbchange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbchange178.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, verb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verb"

    public static class degassMultiVerb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "degassMultiVerb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:1: degassMultiVerb : vbdegass cc vbfill ;
    public final ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb() throws RecognitionException {
        ChemicalChunkerParser.degassMultiVerb_return retval = new ChemicalChunkerParser.degassMultiVerb_return();
        retval.start = input.LT(1);
        int degassMultiVerb_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass179 = null;

        ChemicalChunkerParser.cc_return cc180 = null;

        ChemicalChunkerParser.vbfill_return vbfill181 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:2: ( vbdegass cc vbfill )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:4: vbdegass cc vbfill
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbdegass_in_degassMultiVerb809_static.FOLLOW_vbdegass_in_degassMultiVerb809);
            vbdegass179=vbdegass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass179.getTree());
            pushFollow(FOLLOW_cc_in_degassMultiVerb811_static.FOLLOW_cc_in_degassMultiVerb811);
            cc180=cc();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc180.getTree());
            pushFollow(FOLLOW_vbfill_in_degassMultiVerb813_static.FOLLOW_vbfill_in_degassMultiVerb813);
            vbfill181=vbfill();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill181.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, degassMultiVerb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "degassMultiVerb"

    public static class noun_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "noun"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:122:1: noun : nounStructure ( dash nounStructure )* ;
    public final ChemicalChunkerParser.noun_return noun() throws RecognitionException {
        ChemicalChunkerParser.noun_return retval = new ChemicalChunkerParser.noun_return();
        retval.start = input.LT(1);
        int noun_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure182 = null;

        ChemicalChunkerParser.dash_return dash183 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure184 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:122:7: ( nounStructure ( dash nounStructure )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:122:9: nounStructure ( dash nounStructure )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nounStructure_in_noun822_static.FOLLOW_nounStructure_in_noun822);
            nounStructure182=nounStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure182.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:122:23: ( dash nounStructure )*
            loop46:
            do {
                int alt46=2;
                switch ( input.LA(1) ) {
                case 136:
                    {
                    int LA46_2 = input.LA(2);

                    if ( (synpred165_ChemicalChunker()) ) {
                        alt46=1;
                    }


                    }
                    break;

                }

                switch (alt46) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:122:24: dash nounStructure
            	    {
            	    pushFollow(FOLLOW_dash_in_noun825_static.FOLLOW_dash_in_noun825);
            	    dash183=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash183.getTree());
            	    pushFollow(FOLLOW_nounStructure_in_noun827_static.FOLLOW_nounStructure_in_noun827);
            	    nounStructure184=nounStructure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure184.getTree());

            	    }
            	    break;

            	default :
            	    break loop46;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, noun_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "noun"

    public static class nounStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:1: nounStructure : ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnyield | nnstate | procedureNode | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | oscaronts | nntime | nnatmosphere | tmunicode | quantity | nnchementity | nntemp | nnph | nnflash | nngeneral | nnamount | nneq | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | squareBracketedReference | nndry | numeric | nnextract | nnfilter | nnprecipitate | nnremove | fw | sym | clause | ls | nnps | pos | oscarase );
    public final ChemicalChunkerParser.nounStructure_return nounStructure() throws RecognitionException {
        ChemicalChunkerParser.nounStructure_return retval = new ChemicalChunkerParser.nounStructure_return();
        retval.start = input.LT(1);
        int nounStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prp_return prp185 = null;

        ChemicalChunkerParser.prp_poss_return prp_poss186 = null;

        ChemicalChunkerParser.citation_return citation187 = null;

        ChemicalChunkerParser.cycles_return cycles188 = null;

        ChemicalChunkerParser.molecule_return molecule189 = null;

        ChemicalChunkerParser.apparatus_return apparatus190 = null;

        ChemicalChunkerParser.mixture_return mixture191 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule192 = null;

        ChemicalChunkerParser.nnyield_return nnyield193 = null;

        ChemicalChunkerParser.nnstate_return nnstate194 = null;

        ChemicalChunkerParser.procedureNode_return procedureNode195 = null;

        ChemicalChunkerParser.nn_return nn196 = null;

        ChemicalChunkerParser.nns_return nns197 = null;

        ChemicalChunkerParser.nnp_return nnp198 = null;

        ChemicalChunkerParser.nnadd_return nnadd199 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase200 = null;

        ChemicalChunkerParser.nnexample_return nnexample201 = null;

        ChemicalChunkerParser.range_return range202 = null;

        ChemicalChunkerParser.oscaronts_return oscaronts203 = null;

        ChemicalChunkerParser.nntime_return nntime204 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere205 = null;

        ChemicalChunkerParser.tmunicode_return tmunicode206 = null;

        ChemicalChunkerParser.quantity_return quantity207 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity208 = null;

        ChemicalChunkerParser.nntemp_return nntemp209 = null;

        ChemicalChunkerParser.nnph_return nnph210 = null;

        ChemicalChunkerParser.nnflash_return nnflash211 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral212 = null;

        ChemicalChunkerParser.nnamount_return nnamount213 = null;

        ChemicalChunkerParser.nneq_return nneq214 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure215 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn216 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography217 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum218 = null;

        ChemicalChunkerParser.nncycle_return nncycle219 = null;

        ChemicalChunkerParser.nntimes_return nntimes220 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate221 = null;

        ChemicalChunkerParser.nnvol_return nnvol222 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify223 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize224 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture225 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference226 = null;

        ChemicalChunkerParser.nndry_return nndry227 = null;

        ChemicalChunkerParser.numeric_return numeric228 = null;

        ChemicalChunkerParser.nnextract_return nnextract229 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter230 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate231 = null;

        ChemicalChunkerParser.nnremove_return nnremove232 = null;

        ChemicalChunkerParser.fw_return fw233 = null;

        ChemicalChunkerParser.sym_return sym234 = null;

        ChemicalChunkerParser.clause_return clause235 = null;

        ChemicalChunkerParser.ls_return ls236 = null;

        ChemicalChunkerParser.nnps_return nnps237 = null;

        ChemicalChunkerParser.pos_return pos238 = null;

        ChemicalChunkerParser.oscarase_return oscarase239 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:15: ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnyield | nnstate | procedureNode | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | oscaronts | nntime | nnatmosphere | tmunicode | quantity | nnchementity | nntemp | nnph | nnflash | nngeneral | nnamount | nneq | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | squareBracketedReference | nndry | numeric | nnextract | nnfilter | nnprecipitate | nnremove | fw | sym | clause | ls | nnps | pos | oscarase )
            int alt47=55;
            alt47 = dfa47.predict(input);
            switch (alt47) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:18: prp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_in_nounStructure838_static.FOLLOW_prp_in_nounStructure838);
                    prp185=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp185.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:22: prp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_poss_in_nounStructure840_static.FOLLOW_prp_poss_in_nounStructure840);
                    prp_poss186=prp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp_poss186.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:31: citation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_citation_in_nounStructure842_static.FOLLOW_citation_in_nounStructure842);
                    citation187=citation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation187.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:40: cycles
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cycles_in_nounStructure844_static.FOLLOW_cycles_in_nounStructure844);
                    cycles188=cycles();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cycles188.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:47: molecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molecule_in_nounStructure846_static.FOLLOW_molecule_in_nounStructure846);
                    molecule189=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule189.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:56: apparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_apparatus_in_nounStructure848_static.FOLLOW_apparatus_in_nounStructure848);
                    apparatus190=apparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus190.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:66: mixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mixture_in_nounStructure850_static.FOLLOW_mixture_in_nounStructure850);
                    mixture191=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture191.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:74: unnamedmolecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmolecule_in_nounStructure852_static.FOLLOW_unnamedmolecule_in_nounStructure852);
                    unnamedmolecule192=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule192.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:90: nnyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnyield_in_nounStructure854_static.FOLLOW_nnyield_in_nounStructure854);
                    nnyield193=nnyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield193.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:98: nnstate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnstate_in_nounStructure856_static.FOLLOW_nnstate_in_nounStructure856);
                    nnstate194=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate194.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:106: procedureNode
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_procedureNode_in_nounStructure858_static.FOLLOW_procedureNode_in_nounStructure858);
                    procedureNode195=procedureNode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureNode195.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:120: nn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nn_in_nounStructure860_static.FOLLOW_nn_in_nounStructure860);
                    nn196=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn196.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:123: nns
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nns_in_nounStructure862_static.FOLLOW_nns_in_nounStructure862);
                    nns197=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns197.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:127: nnp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnp_in_nounStructure864_static.FOLLOW_nnp_in_nounStructure864);
                    nnp198=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp198.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:131: nnadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnadd_in_nounStructure866_static.FOLLOW_nnadd_in_nounStructure866);
                    nnadd199=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd199.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:137: preparationphrase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_preparationphrase_in_nounStructure868_static.FOLLOW_preparationphrase_in_nounStructure868);
                    preparationphrase200=preparationphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase200.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:155: nnexample
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnexample_in_nounStructure870_static.FOLLOW_nnexample_in_nounStructure870);
                    nnexample201=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample201.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:165: range
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_range_in_nounStructure872_static.FOLLOW_range_in_nounStructure872);
                    range202=range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, range202.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:171: oscaronts
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscaronts_in_nounStructure874_static.FOLLOW_oscaronts_in_nounStructure874);
                    oscaronts203=oscaronts();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaronts203.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:181: nntime
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntime_in_nounStructure876_static.FOLLOW_nntime_in_nounStructure876);
                    nntime204=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime204.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:188: nnatmosphere
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnatmosphere_in_nounStructure878_static.FOLLOW_nnatmosphere_in_nounStructure878);
                    nnatmosphere205=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere205.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:201: tmunicode
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_tmunicode_in_nounStructure880_static.FOLLOW_tmunicode_in_nounStructure880);
                    tmunicode206=tmunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tmunicode206.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:211: quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantity_in_nounStructure882_static.FOLLOW_quantity_in_nounStructure882);
                    quantity207=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity207.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:220: nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchementity_in_nounStructure884_static.FOLLOW_nnchementity_in_nounStructure884);
                    nnchementity208=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity208.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:233: nntemp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntemp_in_nounStructure886_static.FOLLOW_nntemp_in_nounStructure886);
                    nntemp209=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp209.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:240: nnph
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnph_in_nounStructure888_static.FOLLOW_nnph_in_nounStructure888);
                    nnph210=nnph();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnph210.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:245: nnflash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnflash_in_nounStructure890_static.FOLLOW_nnflash_in_nounStructure890);
                    nnflash211=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash211.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:253: nngeneral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nngeneral_in_nounStructure892_static.FOLLOW_nngeneral_in_nounStructure892);
                    nngeneral212=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral212.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:263: nnamount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnamount_in_nounStructure894_static.FOLLOW_nnamount_in_nounStructure894);
                    nnamount213=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount213.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:272: nneq
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nneq_in_nounStructure896_static.FOLLOW_nneq_in_nounStructure896);
                    nneq214=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq214.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:277: nnpressure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpressure_in_nounStructure898_static.FOLLOW_nnpressure_in_nounStructure898);
                    nnpressure215=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure215.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:288: nncolumn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncolumn_in_nounStructure900_static.FOLLOW_nncolumn_in_nounStructure900);
                    nncolumn216=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn216.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:297: nnchromatography
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchromatography_in_nounStructure902_static.FOLLOW_nnchromatography_in_nounStructure902);
                    nnchromatography217=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography217.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:314: nnvacuum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvacuum_in_nounStructure904_static.FOLLOW_nnvacuum_in_nounStructure904);
                    nnvacuum218=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum218.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:323: nncycle
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncycle_in_nounStructure906_static.FOLLOW_nncycle_in_nounStructure906);
                    nncycle219=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle219.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:331: nntimes
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntimes_in_nounStructure908_static.FOLLOW_nntimes_in_nounStructure908);
                    nntimes220=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes220.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:339: nnconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnconcentrate_in_nounStructure910_static.FOLLOW_nnconcentrate_in_nounStructure910);
                    nnconcentrate221=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate221.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:353: nnvol
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvol_in_nounStructure912_static.FOLLOW_nnvol_in_nounStructure912);
                    nnvol222=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol222.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:359: nnpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpurify_in_nounStructure914_static.FOLLOW_nnpurify_in_nounStructure914);
                    nnpurify223=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify223.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:368: nnsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnsynthesize_in_nounStructure916_static.FOLLOW_nnsynthesize_in_nounStructure916);
                    nnsynthesize224=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize224.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:381: nnmixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnmixture_in_nounStructure918_static.FOLLOW_nnmixture_in_nounStructure918);
                    nnmixture225=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture225.getTree());

                    }
                    break;
                case 42 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:391: squareBracketedReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_squareBracketedReference_in_nounStructure920_static.FOLLOW_squareBracketedReference_in_nounStructure920);
                    squareBracketedReference226=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, squareBracketedReference226.getTree());

                    }
                    break;
                case 43 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:416: nndry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nndry_in_nounStructure922_static.FOLLOW_nndry_in_nounStructure922);
                    nndry227=nndry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nndry227.getTree());

                    }
                    break;
                case 44 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:422: numeric
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_numeric_in_nounStructure924_static.FOLLOW_numeric_in_nounStructure924);
                    numeric228=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric228.getTree());

                    }
                    break;
                case 45 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:430: nnextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnextract_in_nounStructure926_static.FOLLOW_nnextract_in_nounStructure926);
                    nnextract229=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract229.getTree());

                    }
                    break;
                case 46 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:440: nnfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnfilter_in_nounStructure928_static.FOLLOW_nnfilter_in_nounStructure928);
                    nnfilter230=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter230.getTree());

                    }
                    break;
                case 47 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:449: nnprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnprecipitate_in_nounStructure930_static.FOLLOW_nnprecipitate_in_nounStructure930);
                    nnprecipitate231=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate231.getTree());

                    }
                    break;
                case 48 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:463: nnremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnremove_in_nounStructure932_static.FOLLOW_nnremove_in_nounStructure932);
                    nnremove232=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove232.getTree());

                    }
                    break;
                case 49 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:472: fw
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fw_in_nounStructure934_static.FOLLOW_fw_in_nounStructure934);
                    fw233=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw233.getTree());

                    }
                    break;
                case 50 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:475: sym
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sym_in_nounStructure936_static.FOLLOW_sym_in_nounStructure936);
                    sym234=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym234.getTree());

                    }
                    break;
                case 51 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:479: clause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_clause_in_nounStructure938_static.FOLLOW_clause_in_nounStructure938);
                    clause235=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause235.getTree());

                    }
                    break;
                case 52 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:486: ls
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ls_in_nounStructure940_static.FOLLOW_ls_in_nounStructure940);
                    ls236=ls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ls236.getTree());

                    }
                    break;
                case 53 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:489: nnps
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnps_in_nounStructure942_static.FOLLOW_nnps_in_nounStructure942);
                    nnps237=nnps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnps237.getTree());

                    }
                    break;
                case 54 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:494: pos
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pos_in_nounStructure944_static.FOLLOW_pos_in_nounStructure944);
                    pos238=pos();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pos238.getTree());

                    }
                    break;
                case 55 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:498: oscarase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarase_in_nounStructure946_static.FOLLOW_oscarase_in_nounStructure946);
                    oscarase239=oscarase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase239.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, nounStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounStructure"

    public static class prepphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:128:1: prepphrase : ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther ) ;
    public final ChemicalChunkerParser.prepphrase_return prepphrase() throws RecognitionException {
        ChemicalChunkerParser.prepphrase_return retval = new ChemicalChunkerParser.prepphrase_return();
        retval.start = input.LT(1);
        int prepphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.neg_return neg240 = null;

        ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere241 = null;

        ChemicalChunkerParser.prepphraseTime_return prepphraseTime242 = null;

        ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp243 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN244 = null;

        ChemicalChunkerParser.prepphraseRole_return prepphraseRole245 = null;

        ChemicalChunkerParser.prepphraseOther_return prepphraseOther246 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:2: ( ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:5: ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:5: ( neg )?
            int alt48=2;
            switch ( input.LA(1) ) {
                case 135:
                    {
                    alt48=1;
                    }
                    break;
            }

            switch (alt48) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
                    {
                    pushFollow(FOLLOW_neg_in_prepphrase958_static.FOLLOW_neg_in_prepphrase958);
                    neg240=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg240.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )
            int alt49=6;
            alt49 = dfa49.predict(input);
            switch (alt49) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:11: prepphraseAtmosphere
                    {
                    pushFollow(FOLLOW_prepphraseAtmosphere_in_prepphrase962_static.FOLLOW_prepphraseAtmosphere_in_prepphrase962);
                    prepphraseAtmosphere241=prepphraseAtmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAtmosphere241.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:32: prepphraseTime
                    {
                    pushFollow(FOLLOW_prepphraseTime_in_prepphrase964_static.FOLLOW_prepphraseTime_in_prepphrase964);
                    prepphraseTime242=prepphraseTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTime242.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:47: prepphraseTemp
                    {
                    pushFollow(FOLLOW_prepphraseTemp_in_prepphrase966_static.FOLLOW_prepphraseTemp_in_prepphrase966);
                    prepphraseTemp243=prepphraseTemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTemp243.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:62: prepphraseIN
                    {
                    pushFollow(FOLLOW_prepphraseIN_in_prepphrase968_static.FOLLOW_prepphraseIN_in_prepphrase968);
                    prepphraseIN244=prepphraseIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN244.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:75: prepphraseRole
                    {
                    pushFollow(FOLLOW_prepphraseRole_in_prepphrase970_static.FOLLOW_prepphraseRole_in_prepphrase970);
                    prepphraseRole245=prepphraseRole();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseRole245.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:90: prepphraseOther
                    {
                    pushFollow(FOLLOW_prepphraseOther_in_prepphrase972_static.FOLLOW_prepphraseOther_in_prepphrase972);
                    prepphraseOther246=prepphraseOther();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOther246.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, prepphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphrase"

    public static class prepphraseAtmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphere"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:1: prepphraseAtmosphere : prepphraseAtmosphereContent -> ^( AtmospherePhrase prepphraseAtmosphereContent ) ;
    public final ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphere_return retval = new ChemicalChunkerParser.prepphraseAtmosphere_return();
        retval.start = input.LT(1);
        int prepphraseAtmosphere_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent247 = null;


        RewriteRuleSubtreeStream stream_prepphraseAtmosphereContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseAtmosphereContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:2: ( prepphraseAtmosphereContent -> ^( AtmospherePhrase prepphraseAtmosphereContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:4: prepphraseAtmosphereContent
            {
            pushFollow(FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere984_static.FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere984);
            prepphraseAtmosphereContent247=prepphraseAtmosphereContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseAtmosphereContent.add(prepphraseAtmosphereContent247.getTree());


            // AST REWRITE
            // elements: prepphraseAtmosphereContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 132:32: -> ^( AtmospherePhrase prepphraseAtmosphereContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:36: ^( AtmospherePhrase prepphraseAtmosphereContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AtmospherePhrase, "AtmospherePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseAtmosphereContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, prepphraseAtmosphere_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphere"

    public static class prepphraseAtmosphereContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphereContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:1: prepphraseAtmosphereContent : inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? ;
    public final ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphereContent_return retval = new ChemicalChunkerParser.prepphraseAtmosphereContent_return();
        retval.start = input.LT(1);
        int prepphraseAtmosphereContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inunder_return inunder248 = null;

        ChemicalChunkerParser.dt_return dt249 = null;

        ChemicalChunkerParser.advAdj_return advAdj250 = null;

        ChemicalChunkerParser.molecule_return molecule251 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere252 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:2: ( inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:3: inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inunder_in_prepphraseAtmosphereContent1004_static.FOLLOW_inunder_in_prepphraseAtmosphereContent1004);
            inunder248=inunder();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder248.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:12: ( dt )?
            int alt50=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt50=1;
                    }
                    break;
            }

            switch (alt50) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseAtmosphereContent1007_static.FOLLOW_dt_in_prepphraseAtmosphereContent1007);
                    dt249=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt249.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:16: ( advAdj )*
            loop51:
            do {
                int alt51=2;
                alt51 = dfa51.predict(input);
                switch (alt51) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseAtmosphereContent1010_static.FOLLOW_advAdj_in_prepphraseAtmosphereContent1010);
            	    advAdj250=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj250.getTree());

            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);

            pushFollow(FOLLOW_molecule_in_prepphraseAtmosphereContent1013_static.FOLLOW_molecule_in_prepphraseAtmosphereContent1013);
            molecule251=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule251.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:33: ( nnatmosphere )?
            int alt52=2;
            switch ( input.LA(1) ) {
                case 68:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA52_3 = input.LA(3);

                            if ( (synpred228_ChemicalChunker()) ) {
                                alt52=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt52) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1015_static.FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1015);
                    nnatmosphere252=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere252.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, prepphraseAtmosphereContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphereContent"

    public static class prepphraseTime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTime"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:1: prepphraseTime : prepPhraseTimeStructure -> ^( TimePhrase prepPhraseTimeStructure ) ;
    public final ChemicalChunkerParser.prepphraseTime_return prepphraseTime() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTime_return retval = new ChemicalChunkerParser.prepphraseTime_return();
        retval.start = input.LT(1);
        int prepphraseTime_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure253 = null;


        RewriteRuleSubtreeStream stream_prepPhraseTimeStructure=new RewriteRuleSubtreeStream(adaptor,"rule prepPhraseTimeStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:138:2: ( prepPhraseTimeStructure -> ^( TimePhrase prepPhraseTimeStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:138:3: prepPhraseTimeStructure
            {
            pushFollow(FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1025_static.FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1025);
            prepPhraseTimeStructure253=prepPhraseTimeStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepPhraseTimeStructure.add(prepPhraseTimeStructure253.getTree());


            // AST REWRITE
            // elements: prepPhraseTimeStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 138:27: -> ^( TimePhrase prepPhraseTimeStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:138:31: ^( TimePhrase prepPhraseTimeStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TimePhrase, "TimePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepPhraseTimeStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, prepphraseTime_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTime"

    public static class prepPhraseTimeStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepPhraseTimeStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:140:1: prepPhraseTimeStructure : ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ ;
    public final ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure() throws RecognitionException {
        ChemicalChunkerParser.prepPhraseTimeStructure_return retval = new ChemicalChunkerParser.prepPhraseTimeStructure_return();
        retval.start = input.LT(1);
        int prepPhraseTimeStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj254 = null;

        ChemicalChunkerParser.inAll_return inAll255 = null;

        ChemicalChunkerParser.dt_return dt256 = null;

        ChemicalChunkerParser.advAdj_return advAdj257 = null;

        ChemicalChunkerParser.cd_return cd258 = null;

        ChemicalChunkerParser.nntime_return nntime259 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:2: ( ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:3: ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:3: ( advAdj )*
            loop53:
            do {
                int alt53=2;
                alt53 = dfa53.predict(input);
                switch (alt53) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1043_static.FOLLOW_advAdj_in_prepPhraseTimeStructure1043);
            	    advAdj254=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj254.getTree());

            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:11: ( inAll )?
            int alt54=2;
            switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 150:
                case 169:
                    {
                    alt54=1;
                    }
                    break;
            }

            switch (alt54) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepPhraseTimeStructure1046_static.FOLLOW_inAll_in_prepPhraseTimeStructure1046);
                    inAll255=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll255.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:19: ( dt )?
            int alt55=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt55=1;
                    }
                    break;
            }

            switch (alt55) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepPhraseTimeStructure1050_static.FOLLOW_dt_in_prepPhraseTimeStructure1050);
                    dt256=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt256.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:23: ( advAdj )*
            loop56:
            do {
                int alt56=2;
                switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt56=1;
                    }
                    break;

                }

                switch (alt56) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1053_static.FOLLOW_advAdj_in_prepPhraseTimeStructure1053);
            	    advAdj257=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj257.getTree());

            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:31: ( cd )?
            int alt57=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt57=1;
                    }
                    break;
            }

            switch (alt57) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepPhraseTimeStructure1056_static.FOLLOW_cd_in_prepPhraseTimeStructure1056);
                    cd258=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd258.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:35: ( nntime )+
            int cnt58=0;
            loop58:
            do {
                int alt58=2;
                switch ( input.LA(1) ) {
                case 64:
                    {
                    int LA58_2 = input.LA(2);

                    if ( (synpred234_ChemicalChunker()) ) {
                        alt58=1;
                    }


                    }
                    break;

                }

                switch (alt58) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nntime
            	    {
            	    pushFollow(FOLLOW_nntime_in_prepPhraseTimeStructure1059_static.FOLLOW_nntime_in_prepPhraseTimeStructure1059);
            	    nntime259=nntime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime259.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt58 >= 1 ) break loop58;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(58, input);
                        throw eee;
                }
                cnt58++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, prepPhraseTimeStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepPhraseTimeStructure"

    public static class prepphraseTemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTemp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:143:1: prepphraseTemp : prepphraseTempContent -> ^( TempPhrase prepphraseTempContent ) ;
    public final ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTemp_return retval = new ChemicalChunkerParser.prepphraseTemp_return();
        retval.start = input.LT(1);
        int prepphraseTemp_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent260 = null;


        RewriteRuleSubtreeStream stream_prepphraseTempContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseTempContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:143:15: ( prepphraseTempContent -> ^( TempPhrase prepphraseTempContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:143:18: prepphraseTempContent
            {
            pushFollow(FOLLOW_prepphraseTempContent_in_prepphraseTemp1069_static.FOLLOW_prepphraseTempContent_in_prepphraseTemp1069);
            prepphraseTempContent260=prepphraseTempContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseTempContent.add(prepphraseTempContent260.getTree());


            // AST REWRITE
            // elements: prepphraseTempContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 143:40: -> ^( TempPhrase prepphraseTempContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:143:44: ^( TempPhrase prepphraseTempContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TempPhrase, "TempPhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseTempContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, prepphraseTemp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTemp"

    public static class prepphraseTempContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTempContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:1: prepphraseTempContent : ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ ;
    public final ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTempContent_return retval = new ChemicalChunkerParser.prepphraseTempContent_return();
        retval.start = input.LT(1);
        int prepphraseTempContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj261 = null;

        ChemicalChunkerParser.inAll_return inAll262 = null;

        ChemicalChunkerParser.dt_return dt263 = null;

        ChemicalChunkerParser.advAdj_return advAdj264 = null;

        ChemicalChunkerParser.cd_return cd265 = null;

        ChemicalChunkerParser.nntemp_return nntemp266 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:2: ( ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:5: ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:5: ( advAdj )?
            int alt59=2;
            alt59 = dfa59.predict(input);
            switch (alt59) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1090_static.FOLLOW_advAdj_in_prepphraseTempContent1090);
                    advAdj261=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj261.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:13: ( inAll )?
            int alt60=2;
            switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 150:
                case 169:
                    {
                    alt60=1;
                    }
                    break;
            }

            switch (alt60) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepphraseTempContent1093_static.FOLLOW_inAll_in_prepphraseTempContent1093);
                    inAll262=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll262.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:20: ( dt )?
            int alt61=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt61=1;
                    }
                    break;
            }

            switch (alt61) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseTempContent1096_static.FOLLOW_dt_in_prepphraseTempContent1096);
                    dt263=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt263.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:24: ( advAdj )?
            int alt62=2;
            switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt62=1;
                    }
                    break;
            }

            switch (alt62) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1099_static.FOLLOW_advAdj_in_prepphraseTempContent1099);
                    advAdj264=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj264.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:32: ( cd )?
            int alt63=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt63=1;
                    }
                    break;
            }

            switch (alt63) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepphraseTempContent1102_static.FOLLOW_cd_in_prepphraseTempContent1102);
                    cd265=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd265.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:36: ( nntemp )+
            int cnt64=0;
            loop64:
            do {
                int alt64=2;
                switch ( input.LA(1) ) {
                case 72:
                    {
                    int LA64_2 = input.LA(2);

                    if ( (synpred240_ChemicalChunker()) ) {
                        alt64=1;
                    }


                    }
                    break;

                }

                switch (alt64) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nntemp
            	    {
            	    pushFollow(FOLLOW_nntemp_in_prepphraseTempContent1105_static.FOLLOW_nntemp_in_prepphraseTempContent1105);
            	    nntemp266=nntemp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp266.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt64 >= 1 ) break loop64;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(64, input);
                        throw eee;
                }
                cnt64++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, prepphraseTempContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTempContent"

    public static class prepphraseIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseIN"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:148:1: prepphraseIN : inin molecule -> ^( PrepPhrase inin molecule ) ;
    public final ChemicalChunkerParser.prepphraseIN_return prepphraseIN() throws RecognitionException {
        ChemicalChunkerParser.prepphraseIN_return retval = new ChemicalChunkerParser.prepphraseIN_return();
        retval.start = input.LT(1);
        int prepphraseIN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin267 = null;

        ChemicalChunkerParser.molecule_return molecule268 = null;


        RewriteRuleSubtreeStream stream_inin=new RewriteRuleSubtreeStream(adaptor,"rule inin");
        RewriteRuleSubtreeStream stream_molecule=new RewriteRuleSubtreeStream(adaptor,"rule molecule");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:2: ( inin molecule -> ^( PrepPhrase inin molecule ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:3: inin molecule
            {
            pushFollow(FOLLOW_inin_in_prepphraseIN1114_static.FOLLOW_inin_in_prepphraseIN1114);
            inin267=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inin.add(inin267.getTree());
            pushFollow(FOLLOW_molecule_in_prepphraseIN1116_static.FOLLOW_molecule_in_prepphraseIN1116);
            molecule268=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_molecule.add(molecule268.getTree());


            // AST REWRITE
            // elements: inin, molecule
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 149:17: -> ^( PrepPhrase inin molecule )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:21: ^( PrepPhrase inin molecule )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inin.nextTree());
                adaptor.addChild(root_1, stream_molecule.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, prepphraseIN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseIN"

    public static class prepphraseRole_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseRole"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:151:1: prepphraseRole : inas ( dt )? nnchementity -> ^( RolePrepPhrase inas ( dt )? nnchementity ) ;
    public final ChemicalChunkerParser.prepphraseRole_return prepphraseRole() throws RecognitionException {
        ChemicalChunkerParser.prepphraseRole_return retval = new ChemicalChunkerParser.prepphraseRole_return();
        retval.start = input.LT(1);
        int prepphraseRole_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inas_return inas269 = null;

        ChemicalChunkerParser.dt_return dt270 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity271 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_inas=new RewriteRuleSubtreeStream(adaptor,"rule inas");
        RewriteRuleSubtreeStream stream_nnchementity=new RewriteRuleSubtreeStream(adaptor,"rule nnchementity");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:152:2: ( inas ( dt )? nnchementity -> ^( RolePrepPhrase inas ( dt )? nnchementity ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:152:3: inas ( dt )? nnchementity
            {
            pushFollow(FOLLOW_inas_in_prepphraseRole1137_static.FOLLOW_inas_in_prepphraseRole1137);
            inas269=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inas.add(inas269.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:152:8: ( dt )?
            int alt65=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt65=1;
                    }
                    break;
            }

            switch (alt65) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseRole1139_static.FOLLOW_dt_in_prepphraseRole1139);
                    dt270=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt270.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnchementity_in_prepphraseRole1142_static.FOLLOW_nnchementity_in_prepphraseRole1142);
            nnchementity271=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnchementity.add(nnchementity271.getTree());


            // AST REWRITE
            // elements: dt, inas, nnchementity
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 152:25: -> ^( RolePrepPhrase inas ( dt )? nnchementity )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:152:28: ^( RolePrepPhrase inas ( dt )? nnchementity )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RolePrepPhrase, "RolePrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inas.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:152:51: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                adaptor.addChild(root_1, stream_nnchementity.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, prepphraseRole_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseRole"

    public static class prepphraseOther_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOther"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:1: prepphraseOther : ( advAdj )* ( inMost )+ nounphrase -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOther_return prepphraseOther() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOther_return retval = new ChemicalChunkerParser.prepphraseOther_return();
        retval.start = input.LT(1);
        int prepphraseOther_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj272 = null;

        ChemicalChunkerParser.inMost_return inMost273 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase274 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inMost=new RewriteRuleSubtreeStream(adaptor,"rule inMost");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:155:2: ( ( advAdj )* ( inMost )+ nounphrase -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:155:4: ( advAdj )* ( inMost )+ nounphrase
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:155:4: ( advAdj )*
            loop66:
            do {
                int alt66=2;
                switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt66=1;
                    }
                    break;

                }

                switch (alt66) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseOther1165_static.FOLLOW_advAdj_in_prepphraseOther1165);
            	    advAdj272=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_advAdj.add(advAdj272.getTree());

            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:155:12: ( inMost )+
            int cnt67=0;
            loop67:
            do {
                int alt67=2;
                switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 150:
                case 169:
                    {
                    alt67=1;
                    }
                    break;

                }

                switch (alt67) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inMost
            	    {
            	    pushFollow(FOLLOW_inMost_in_prepphraseOther1168_static.FOLLOW_inMost_in_prepphraseOther1168);
            	    inMost273=inMost();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_inMost.add(inMost273.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt67 >= 1 ) break loop67;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(67, input);
                        throw eee;
                }
                cnt67++;
            } while (true);

            pushFollow(FOLLOW_nounphrase_in_prepphraseOther1172_static.FOLLOW_nounphrase_in_prepphraseOther1172);
            nounphrase274=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase274.getTree());


            // AST REWRITE
            // elements: inMost, advAdj, nounphrase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 155:32: -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:155:36: ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:155:50: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                if ( !(stream_inMost.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_inMost.hasNext() ) {
                    adaptor.addChild(root_1, stream_inMost.nextTree());

                }
                stream_inMost.reset();
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, prepphraseOther_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseOther"

    public static class prepphraseOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOf"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:1: prepphraseOf : inof nounphrase -> ^( PrepPhrase inof nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOf_return prepphraseOf() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOf_return retval = new ChemicalChunkerParser.prepphraseOf_return();
        retval.start = input.LT(1);
        int prepphraseOf_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inof_return inof275 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase276 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inof=new RewriteRuleSubtreeStream(adaptor,"rule inof");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:2: ( inof nounphrase -> ^( PrepPhrase inof nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:4: inof nounphrase
            {
            pushFollow(FOLLOW_inof_in_prepphraseOf1198_static.FOLLOW_inof_in_prepphraseOf1198);
            inof275=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inof.add(inof275.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseOf1201_static.FOLLOW_nounphrase_in_prepphraseOf1201);
            nounphrase276=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase276.getTree());


            // AST REWRITE
            // elements: nounphrase, inof
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 158:20: -> ^( PrepPhrase inof nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:24: ^( PrepPhrase inof nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inof.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, prepphraseOf_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseOf"

    public static class prepphraseAfter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAfter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:1: prepphraseAfter : ( advAdj )? inafter nounphrase -> ^( PrepPhrase ( advAdj )* inafter nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseAfter_return prepphraseAfter() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAfter_return retval = new ChemicalChunkerParser.prepphraseAfter_return();
        retval.start = input.LT(1);
        int prepphraseAfter_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj277 = null;

        ChemicalChunkerParser.inafter_return inafter278 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase279 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inafter=new RewriteRuleSubtreeStream(adaptor,"rule inafter");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:2: ( ( advAdj )? inafter nounphrase -> ^( PrepPhrase ( advAdj )* inafter nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:5: ( advAdj )? inafter nounphrase
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:5: ( advAdj )?
            int alt68=2;
            switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt68=1;
                    }
                    break;
            }

            switch (alt68) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseAfter1223_static.FOLLOW_advAdj_in_prepphraseAfter1223);
                    advAdj277=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_advAdj.add(advAdj277.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_inafter_in_prepphraseAfter1226_static.FOLLOW_inafter_in_prepphraseAfter1226);
            inafter278=inafter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inafter.add(inafter278.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseAfter1229_static.FOLLOW_nounphrase_in_prepphraseAfter1229);
            nounphrase279=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase279.getTree());


            // AST REWRITE
            // elements: nounphrase, inafter, advAdj
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 161:33: -> ^( PrepPhrase ( advAdj )* inafter nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:37: ^( PrepPhrase ( advAdj )* inafter nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:51: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                adaptor.addChild(root_1, stream_inafter.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, prepphraseAfter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAfter"

    public static class preparationphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preparationphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:1: preparationphrase : vbsynthesize inas ( nnexample cd | prepphrase ) ;
    public final ChemicalChunkerParser.preparationphrase_return preparationphrase() throws RecognitionException {
        ChemicalChunkerParser.preparationphrase_return retval = new ChemicalChunkerParser.preparationphrase_return();
        retval.start = input.LT(1);
        int preparationphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize280 = null;

        ChemicalChunkerParser.inas_return inas281 = null;

        ChemicalChunkerParser.nnexample_return nnexample282 = null;

        ChemicalChunkerParser.cd_return cd283 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase284 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:164:2: ( vbsynthesize inas ( nnexample cd | prepphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:164:4: vbsynthesize inas ( nnexample cd | prepphrase )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbsynthesize_in_preparationphrase1254_static.FOLLOW_vbsynthesize_in_preparationphrase1254);
            vbsynthesize280=vbsynthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize280.getTree());
            pushFollow(FOLLOW_inas_in_preparationphrase1256_static.FOLLOW_inas_in_preparationphrase1256);
            inas281=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inas281.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:164:22: ( nnexample cd | prepphrase )
            int alt69=2;
            switch ( input.LA(1) ) {
            case 83:
                {
                alt69=1;
                }
                break;
            case 39:
            case 40:
            case 45:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 64:
            case 72:
            case 135:
            case 146:
            case 147:
            case 150:
            case 151:
            case 152:
            case 153:
            case 164:
            case 165:
            case 166:
            case 167:
            case 169:
                {
                alt69=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;
            }

            switch (alt69) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:164:23: nnexample cd
                    {
                    pushFollow(FOLLOW_nnexample_in_preparationphrase1259_static.FOLLOW_nnexample_in_preparationphrase1259);
                    nnexample282=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample282.getTree());
                    pushFollow(FOLLOW_cd_in_preparationphrase1261_static.FOLLOW_cd_in_preparationphrase1261);
                    cd283=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd283.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:164:37: prepphrase
                    {
                    pushFollow(FOLLOW_prepphrase_in_preparationphrase1264_static.FOLLOW_prepphrase_in_preparationphrase1264);
                    prepphrase284=prepphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase284.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, preparationphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "preparationphrase"

    public static class multiApparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiApparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:1: multiApparatus : apparatus ( ( conjunction )* apparatus )* ;
    public final ChemicalChunkerParser.multiApparatus_return multiApparatus() throws RecognitionException {
        ChemicalChunkerParser.multiApparatus_return retval = new ChemicalChunkerParser.multiApparatus_return();
        retval.start = input.LT(1);
        int multiApparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.apparatus_return apparatus285 = null;

        ChemicalChunkerParser.conjunction_return conjunction286 = null;

        ChemicalChunkerParser.apparatus_return apparatus287 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:2: ( apparatus ( ( conjunction )* apparatus )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:4: apparatus ( ( conjunction )* apparatus )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_apparatus_in_multiApparatus1275_static.FOLLOW_apparatus_in_multiApparatus1275);
            apparatus285=apparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus285.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:14: ( ( conjunction )* apparatus )*
            loop71:
            do {
                int alt71=2;
                alt71 = dfa71.predict(input);
                switch (alt71) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:15: ( conjunction )* apparatus
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:15: ( conjunction )*
            	    loop70:
            	    do {
            	        int alt70=2;
            	        alt70 = dfa70.predict(input);
            	        switch (alt70) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_multiApparatus1278_static.FOLLOW_conjunction_in_multiApparatus1278);
            	    	    conjunction286=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction286.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop70;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_apparatus_in_multiApparatus1281_static.FOLLOW_apparatus_in_multiApparatus1281);
            	    apparatus287=apparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus287.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, multiApparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiApparatus"

    public static class apparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:1: apparatus : ( dt )? ( preapparatus )* ( nnApp )+ -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ ) ;
    public final ChemicalChunkerParser.apparatus_return apparatus() throws RecognitionException {
        ChemicalChunkerParser.apparatus_return retval = new ChemicalChunkerParser.apparatus_return();
        retval.start = input.LT(1);
        int apparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt288 = null;

        ChemicalChunkerParser.preapparatus_return preapparatus289 = null;

        ChemicalChunkerParser.nnApp_return nnApp290 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_nnApp=new RewriteRuleSubtreeStream(adaptor,"rule nnApp");
        RewriteRuleSubtreeStream stream_preapparatus=new RewriteRuleSubtreeStream(adaptor,"rule preapparatus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:2: ( ( dt )? ( preapparatus )* ( nnApp )+ -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:4: ( dt )? ( preapparatus )* ( nnApp )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:4: ( dt )?
            int alt72=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt72=1;
                    }
                    break;
            }

            switch (alt72) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_apparatus1292_static.FOLLOW_dt_in_apparatus1292);
                    dt288=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt288.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:8: ( preapparatus )*
            loop73:
            do {
                int alt73=2;
                switch ( input.LA(1) ) {
                case 38:
                case 39:
                case 40:
                case 45:
                case 63:
                case 71:
                case 73:
                case 77:
                case 84:
                case 89:
                case 133:
                case 143:
                case 146:
                case 151:
                case 152:
                case 153:
                case 156:
                    {
                    alt73=1;
                    }
                    break;

                }

                switch (alt73) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: preapparatus
            	    {
            	    pushFollow(FOLLOW_preapparatus_in_apparatus1295_static.FOLLOW_preapparatus_in_apparatus1295);
            	    preapparatus289=preapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_preapparatus.add(preapparatus289.getTree());

            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:22: ( nnApp )+
            int cnt74=0;
            loop74:
            do {
                int alt74=2;
                switch ( input.LA(1) ) {
                case 100:
                    {
                    int LA74_2 = input.LA(2);

                    if ( (synpred250_ChemicalChunker()) ) {
                        alt74=1;
                    }


                    }
                    break;

                }

                switch (alt74) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnApp
            	    {
            	    pushFollow(FOLLOW_nnApp_in_apparatus1298_static.FOLLOW_nnApp_in_apparatus1298);
            	    nnApp290=nnApp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nnApp.add(nnApp290.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt74 >= 1 ) break loop74;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(74, input);
                        throw eee;
                }
                cnt74++;
            } while (true);



            // AST REWRITE
            // elements: preapparatus, nnApp, dt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 169:28: -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:31: ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(APPARATUS, "APPARATUS"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:45: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:49: ( preapparatus )*
                while ( stream_preapparatus.hasNext() ) {
                    adaptor.addChild(root_1, stream_preapparatus.nextTree());

                }
                stream_preapparatus.reset();
                if ( !(stream_nnApp.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nnApp.hasNext() ) {
                    adaptor.addChild(root_1, stream_nnApp.nextTree());

                }
                stream_nnApp.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, apparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "apparatus"

    public static class nnApp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnApp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:1: nnApp : ( nnapparatus )+ ( dash nnapparatus )* ;
    public final ChemicalChunkerParser.nnApp_return nnApp() throws RecognitionException {
        ChemicalChunkerParser.nnApp_return retval = new ChemicalChunkerParser.nnApp_return();
        retval.start = input.LT(1);
        int nnApp_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus291 = null;

        ChemicalChunkerParser.dash_return dash292 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus293 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:172:2: ( ( nnapparatus )+ ( dash nnapparatus )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:172:4: ( nnapparatus )+ ( dash nnapparatus )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:172:4: ( nnapparatus )+
            int cnt75=0;
            loop75:
            do {
                int alt75=2;
                switch ( input.LA(1) ) {
                case 100:
                    {
                    int LA75_2 = input.LA(2);

                    if ( (synpred251_ChemicalChunker()) ) {
                        alt75=1;
                    }


                    }
                    break;

                }

                switch (alt75) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnapparatus
            	    {
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp1325_static.FOLLOW_nnapparatus_in_nnApp1325);
            	    nnapparatus291=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus291.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt75 >= 1 ) break loop75;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(75, input);
                        throw eee;
                }
                cnt75++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:172:17: ( dash nnapparatus )*
            loop76:
            do {
                int alt76=2;
                switch ( input.LA(1) ) {
                case 136:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 100:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA76_5 = input.LA(5);

                                if ( (synpred252_ChemicalChunker()) ) {
                                    alt76=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt76) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:172:18: dash nnapparatus
            	    {
            	    pushFollow(FOLLOW_dash_in_nnApp1329_static.FOLLOW_dash_in_nnApp1329);
            	    dash292=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash292.getTree());
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp1331_static.FOLLOW_nnapparatus_in_nnApp1331);
            	    nnapparatus293=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus293.getTree());

            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, nnApp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnApp"

    public static class preapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:173:1: preapparatus : ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ ;
    public final ChemicalChunkerParser.preapparatus_return preapparatus() throws RecognitionException {
        ChemicalChunkerParser.preapparatus_return retval = new ChemicalChunkerParser.preapparatus_return();
        retval.start = input.LT(1);
        int preapparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity294 = null;

        ChemicalChunkerParser.adj_return adj295 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure296 = null;

        ChemicalChunkerParser.nnadd_return nnadd297 = null;

        ChemicalChunkerParser.molecule_return molecule298 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity299 = null;

        ChemicalChunkerParser.nnstate_return nnstate300 = null;

        ChemicalChunkerParser.nn_return nn301 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:2: ( ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            int cnt77=0;
            loop77:
            do {
                int alt77=9;
                alt77 = dfa77.predict(input);
                switch (alt77) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:8: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_preapparatus1345_static.FOLLOW_quantity_in_preapparatus1345);
            	    quantity294=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity294.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:17: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_preapparatus1347_static.FOLLOW_adj_in_preapparatus1347);
            	    adj295=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj295.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:21: nnpressure
            	    {
            	    pushFollow(FOLLOW_nnpressure_in_preapparatus1349_static.FOLLOW_nnpressure_in_preapparatus1349);
            	    nnpressure296=nnpressure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure296.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:32: nnadd
            	    {
            	    pushFollow(FOLLOW_nnadd_in_preapparatus1351_static.FOLLOW_nnadd_in_preapparatus1351);
            	    nnadd297=nnadd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd297.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:38: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_preapparatus1353_static.FOLLOW_molecule_in_preapparatus1353);
            	    molecule298=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule298.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:47: nnchementity
            	    {
            	    pushFollow(FOLLOW_nnchementity_in_preapparatus1355_static.FOLLOW_nnchementity_in_preapparatus1355);
            	    nnchementity299=nnchementity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity299.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:60: nnstate
            	    {
            	    pushFollow(FOLLOW_nnstate_in_preapparatus1357_static.FOLLOW_nnstate_in_preapparatus1357);
            	    nnstate300=nnstate();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate300.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:68: nn
            	    {
            	    pushFollow(FOLLOW_nn_in_preapparatus1359_static.FOLLOW_nn_in_preapparatus1359);
            	    nn301=nn();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn301.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt77 >= 1 ) break loop77;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(77, input);
                        throw eee;
                }
                cnt77++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, preapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "preapparatus"

    public static class oscaronts_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaronts"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:1: oscaronts : ( oscaront )+ -> ^( OSCARONT ( oscaront )+ ) ;
    public final ChemicalChunkerParser.oscaronts_return oscaronts() throws RecognitionException {
        ChemicalChunkerParser.oscaronts_return retval = new ChemicalChunkerParser.oscaronts_return();
        retval.start = input.LT(1);
        int oscaronts_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscaront_return oscaront302 = null;


        RewriteRuleSubtreeStream stream_oscaront=new RewriteRuleSubtreeStream(adaptor,"rule oscaront");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:2: ( ( oscaront )+ -> ^( OSCARONT ( oscaront )+ ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:4: ( oscaront )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:4: ( oscaront )+
            int cnt78=0;
            loop78:
            do {
                int alt78=2;
                switch ( input.LA(1) ) {
                case 42:
                    {
                    int LA78_2 = input.LA(2);

                    if ( (synpred261_ChemicalChunker()) ) {
                        alt78=1;
                    }


                    }
                    break;

                }

                switch (alt78) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscaront
            	    {
            	    pushFollow(FOLLOW_oscaront_in_oscaronts1371_static.FOLLOW_oscaront_in_oscaronts1371);
            	    oscaront302=oscaront();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscaront.add(oscaront302.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt78 >= 1 ) break loop78;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(78, input);
                        throw eee;
                }
                cnt78++;
            } while (true);



            // AST REWRITE
            // elements: oscaront
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 177:14: -> ^( OSCARONT ( oscaront )+ )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:17: ^( OSCARONT ( oscaront )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARONT, "OSCARONT"), root_1);

                if ( !(stream_oscaront.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_oscaront.hasNext() ) {
                    adaptor.addChild(root_1, stream_oscaront.nextTree());

                }
                stream_oscaront.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, oscaronts_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscaronts"

    public static class oscarCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:1: oscarCompound : ( adj )* oscarCompoundStructure ( adj )? ( quantity | nnchementity | {...}? numericOrIdentifierCompoundReference )? ( quantity )* ;
    public final ChemicalChunkerParser.oscarCompound_return oscarCompound() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound_return retval = new ChemicalChunkerParser.oscarCompound_return();
        retval.start = input.LT(1);
        int oscarCompound_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj303 = null;

        ChemicalChunkerParser.oscarCompoundStructure_return oscarCompoundStructure304 = null;

        ChemicalChunkerParser.adj_return adj305 = null;

        ChemicalChunkerParser.quantity_return quantity306 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity307 = null;

        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference308 = null;

        ChemicalChunkerParser.quantity_return quantity309 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:15: ( ( adj )* oscarCompoundStructure ( adj )? ( quantity | nnchementity | {...}? numericOrIdentifierCompoundReference )? ( quantity )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:18: ( adj )* oscarCompoundStructure ( adj )? ( quantity | nnchementity | {...}? numericOrIdentifierCompoundReference )? ( quantity )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:18: ( adj )*
            loop79:
            do {
                int alt79=2;
                switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                    {
                    alt79=1;
                    }
                    break;

                }

                switch (alt79) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_oscarCompound1391_static.FOLLOW_adj_in_oscarCompound1391);
            	    adj303=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj303.getTree());

            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);

            pushFollow(FOLLOW_oscarCompoundStructure_in_oscarCompound1394_static.FOLLOW_oscarCompoundStructure_in_oscarCompound1394);
            oscarCompoundStructure304=oscarCompoundStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompoundStructure304.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:46: ( adj )?
            int alt80=2;
            alt80 = dfa80.predict(input);
            switch (alt80) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_oscarCompound1396_static.FOLLOW_adj_in_oscarCompound1396);
                    adj305=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj305.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:51: ( quantity | nnchementity | {...}? numericOrIdentifierCompoundReference )?
            int alt81=4;
            alt81 = dfa81.predict(input);
            switch (alt81) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:52: quantity
                    {
                    pushFollow(FOLLOW_quantity_in_oscarCompound1400_static.FOLLOW_quantity_in_oscarCompound1400);
                    quantity306=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity306.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:63: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_oscarCompound1404_static.FOLLOW_nnchementity_in_oscarCompound1404);
                    nnchementity307=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity307.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:78: {...}? numericOrIdentifierCompoundReference
                    {
                    if ( !((!followedByNumberWhichIsNotAReference(input))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "oscarCompound", "!followedByNumberWhichIsNotAReference(input)");
                    }
                    pushFollow(FOLLOW_numericOrIdentifierCompoundReference_in_oscarCompound1410_static.FOLLOW_numericOrIdentifierCompoundReference_in_oscarCompound1410);
                    numericOrIdentifierCompoundReference308=numericOrIdentifierCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericOrIdentifierCompoundReference308.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:165: ( quantity )*
            loop82:
            do {
                int alt82=2;
                alt82 = dfa82.predict(input);
                switch (alt82) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_oscarCompound1414_static.FOLLOW_quantity_in_oscarCompound1414);
            	    quantity309=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity309.getTree());

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, oscarCompound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound"

    public static class oscarCompoundStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompoundStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:1: oscarCompoundStructure : ( oscarcm ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure ) -> ^( OSCARCM ( oscarcm )? ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? ) ;
    public final ChemicalChunkerParser.oscarCompoundStructure_return oscarCompoundStructure() throws RecognitionException {
        ChemicalChunkerParser.oscarCompoundStructure_return retval = new ChemicalChunkerParser.oscarCompoundStructure_return();
        retval.start = input.LT(1);
        int oscarCompoundStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm310 = null;

        ChemicalChunkerParser.afterOscarCompoundStructure_return afterOscarCompoundStructure311 = null;

        ChemicalChunkerParser.bracketedOscarCompoundStructure_return bracketedOscarCompoundStructure312 = null;


        RewriteRuleSubtreeStream stream_bracketedOscarCompoundStructure=new RewriteRuleSubtreeStream(adaptor,"rule bracketedOscarCompoundStructure");
        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_afterOscarCompoundStructure=new RewriteRuleSubtreeStream(adaptor,"rule afterOscarCompoundStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:23: ( ( oscarcm ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure ) -> ^( OSCARCM ( oscarcm )? ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:25: ( oscarcm ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:25: ( oscarcm ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure )
            int alt84=2;
            switch ( input.LA(1) ) {
            case 84:
                {
                alt84=1;
                }
                break;
            case 143:
                {
                alt84=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 84, 0, input);

                throw nvae;
            }

            switch (alt84) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:26: oscarcm ( afterOscarCompoundStructure )?
                    {
                    pushFollow(FOLLOW_oscarcm_in_oscarCompoundStructure1423_static.FOLLOW_oscarcm_in_oscarCompoundStructure1423);
                    oscarcm310=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm310.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:34: ( afterOscarCompoundStructure )?
                    int alt83=2;
                    switch ( input.LA(1) ) {
                        case 84:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA83_5 = input.LA(3);

                                    if ( (synpred268_ChemicalChunker()) ) {
                                        alt83=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                        case 136:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA83_6 = input.LA(3);

                                    if ( (synpred268_ChemicalChunker()) ) {
                                        alt83=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                        case 134:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA83_7 = input.LA(3);

                                    if ( (synpred268_ChemicalChunker()) ) {
                                        alt83=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt83) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: afterOscarCompoundStructure
                            {
                            pushFollow(FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1425_static.FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1425);
                            afterOscarCompoundStructure311=afterOscarCompoundStructure();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_afterOscarCompoundStructure.add(afterOscarCompoundStructure311.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:65: bracketedOscarCompoundStructure
                    {
                    pushFollow(FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1430_static.FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1430);
                    bracketedOscarCompoundStructure312=bracketedOscarCompoundStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedOscarCompoundStructure.add(bracketedOscarCompoundStructure312.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: oscarcm, afterOscarCompoundStructure, bracketedOscarCompoundStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 180:98: -> ^( OSCARCM ( oscarcm )? ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:101: ^( OSCARCM ( oscarcm )? ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARCM, "OSCARCM"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:111: ( oscarcm )?
                if ( stream_oscarcm.hasNext() ) {
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_oscarcm.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:120: ( afterOscarCompoundStructure )?
                if ( stream_afterOscarCompoundStructure.hasNext() ) {
                    adaptor.addChild(root_1, stream_afterOscarCompoundStructure.nextTree());

                }
                stream_afterOscarCompoundStructure.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:149: ( bracketedOscarCompoundStructure )?
                if ( stream_bracketedOscarCompoundStructure.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedOscarCompoundStructure.nextTree());

                }
                stream_bracketedOscarCompoundStructure.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, oscarCompoundStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompoundStructure"

    public static class afterOscarCompoundStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "afterOscarCompoundStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:1: afterOscarCompoundStructure : ( ( oscarcm )+ | ( dash ( oscarcm )+ )+ ( dash )? | ( dash | apost )+ );
    public final ChemicalChunkerParser.afterOscarCompoundStructure_return afterOscarCompoundStructure() throws RecognitionException {
        ChemicalChunkerParser.afterOscarCompoundStructure_return retval = new ChemicalChunkerParser.afterOscarCompoundStructure_return();
        retval.start = input.LT(1);
        int afterOscarCompoundStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm313 = null;

        ChemicalChunkerParser.dash_return dash314 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm315 = null;

        ChemicalChunkerParser.dash_return dash316 = null;

        ChemicalChunkerParser.dash_return dash317 = null;

        ChemicalChunkerParser.apost_return apost318 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:28: ( ( oscarcm )+ | ( dash ( oscarcm )+ )+ ( dash )? | ( dash | apost )+ )
            int alt90=3;
            switch ( input.LA(1) ) {
            case 84:
                {
                alt90=1;
                }
                break;
            case 136:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 84:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            int LA90_6 = input.LA(5);

                            if ( (synpred275_ChemicalChunker()) ) {
                                alt90=2;
                            }
                            else if ( (true) ) {
                                alt90=3;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 90, 6, input);

                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 90, 5, input);

                            throw nvae;
                        }

                        }
                        break;
                    case EOF:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 68:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 82:
                    case 83:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 120:
                    case 121:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 130:
                    case 131:
                    case 132:
                    case 133:
                    case 134:
                    case 135:
                    case 136:
                    case 137:
                    case 138:
                    case 139:
                    case 140:
                    case 141:
                    case 142:
                    case 143:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 163:
                    case 164:
                    case 165:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 178:
                    case 179:
                    case 180:
                        {
                        alt90=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 90, 4, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 90, 2, input);

                    throw nvae;
                }

                }
                break;
            case 134:
                {
                alt90=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;
            }

            switch (alt90) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:30: ( oscarcm )+
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:30: ( oscarcm )+
                    int cnt85=0;
                    loop85:
                    do {
                        int alt85=2;
                        switch ( input.LA(1) ) {
                        case 84:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                int LA85_3 = input.LA(3);

                                if ( (synpred270_ChemicalChunker()) ) {
                                    alt85=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt85) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
                    	    {
                    	    pushFollow(FOLLOW_oscarcm_in_afterOscarCompoundStructure1452_static.FOLLOW_oscarcm_in_afterOscarCompoundStructure1452);
                    	    oscarcm313=oscarcm();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm313.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt85 >= 1 ) break loop85;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(85, input);
                                throw eee;
                        }
                        cnt85++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:39: ( dash ( oscarcm )+ )+ ( dash )?
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:39: ( dash ( oscarcm )+ )+
                    int cnt87=0;
                    loop87:
                    do {
                        int alt87=2;
                        switch ( input.LA(1) ) {
                        case 136:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                switch ( input.LA(3) ) {
                                case 84:
                                    {
                                    switch ( input.LA(4) ) {
                                    case TOKEN:
                                        {
                                        int LA87_5 = input.LA(5);

                                        if ( (synpred273_ChemicalChunker()) ) {
                                            alt87=1;
                                        }


                                        }
                                        break;

                                    }

                                    }
                                    break;

                                }

                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt87) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:40: dash ( oscarcm )+
                    	    {
                    	    pushFollow(FOLLOW_dash_in_afterOscarCompoundStructure1456_static.FOLLOW_dash_in_afterOscarCompoundStructure1456);
                    	    dash314=dash();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash314.getTree());
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:45: ( oscarcm )+
                    	    int cnt86=0;
                    	    loop86:
                    	    do {
                    	        int alt86=2;
                    	        switch ( input.LA(1) ) {
                    	        case 84:
                    	            {
                    	            switch ( input.LA(2) ) {
                    	            case TOKEN:
                    	                {
                    	                int LA86_3 = input.LA(3);

                    	                if ( (synpred272_ChemicalChunker()) ) {
                    	                    alt86=1;
                    	                }


                    	                }
                    	                break;

                    	            }

                    	            }
                    	            break;

                    	        }

                    	        switch (alt86) {
                    	    	case 1 :
                    	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
                    	    	    {
                    	    	    pushFollow(FOLLOW_oscarcm_in_afterOscarCompoundStructure1458_static.FOLLOW_oscarcm_in_afterOscarCompoundStructure1458);
                    	    	    oscarcm315=oscarcm();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm315.getTree());

                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    if ( cnt86 >= 1 ) break loop86;
                    	    	    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                EarlyExitException eee =
                    	                    new EarlyExitException(86, input);
                    	                throw eee;
                    	        }
                    	        cnt86++;
                    	    } while (true);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt87 >= 1 ) break loop87;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(87, input);
                                throw eee;
                        }
                        cnt87++;
                    } while (true);

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:56: ( dash )?
                    int alt88=2;
                    switch ( input.LA(1) ) {
                        case 136:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA88_3 = input.LA(3);

                                    if ( (synpred274_ChemicalChunker()) ) {
                                        alt88=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt88) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dash
                            {
                            pushFollow(FOLLOW_dash_in_afterOscarCompoundStructure1463_static.FOLLOW_dash_in_afterOscarCompoundStructure1463);
                            dash316=dash();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash316.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:62: ( dash | apost )+
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:62: ( dash | apost )+
                    int cnt89=0;
                    loop89:
                    do {
                        int alt89=3;
                        switch ( input.LA(1) ) {
                        case 134:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                int LA89_4 = input.LA(3);

                                if ( (synpred277_ChemicalChunker()) ) {
                                    alt89=2;
                                }


                                }
                                break;

                            }

                            }
                            break;
                        case 136:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                int LA89_5 = input.LA(3);

                                if ( (synpred276_ChemicalChunker()) ) {
                                    alt89=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt89) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:63: dash
                    	    {
                    	    pushFollow(FOLLOW_dash_in_afterOscarCompoundStructure1467_static.FOLLOW_dash_in_afterOscarCompoundStructure1467);
                    	    dash317=dash();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash317.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:68: apost
                    	    {
                    	    pushFollow(FOLLOW_apost_in_afterOscarCompoundStructure1469_static.FOLLOW_apost_in_afterOscarCompoundStructure1469);
                    	    apost318=apost();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apost318.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt89 >= 1 ) break loop89;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(89, input);
                                throw eee;
                        }
                        cnt89++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, afterOscarCompoundStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "afterOscarCompoundStructure"

    public static class bracketedOscarCompoundStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedOscarCompoundStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:1: bracketedOscarCompoundStructure : lrb ( oscarcm )+ rrb ;
    public final ChemicalChunkerParser.bracketedOscarCompoundStructure_return bracketedOscarCompoundStructure() throws RecognitionException {
        ChemicalChunkerParser.bracketedOscarCompoundStructure_return retval = new ChemicalChunkerParser.bracketedOscarCompoundStructure_return();
        retval.start = input.LT(1);
        int bracketedOscarCompoundStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb319 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm320 = null;

        ChemicalChunkerParser.rrb_return rrb321 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:33: ( lrb ( oscarcm )+ rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:35: lrb ( oscarcm )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedOscarCompoundStructure1478_static.FOLLOW_lrb_in_bracketedOscarCompoundStructure1478);
            lrb319=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb319.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:40: ( oscarcm )+
            int cnt91=0;
            loop91:
            do {
                int alt91=2;
                switch ( input.LA(1) ) {
                case 84:
                    {
                    alt91=1;
                    }
                    break;

                }

                switch (alt91) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
            	    {
            	    pushFollow(FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1481_static.FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1481);
            	    oscarcm320=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm320.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt91 >= 1 ) break loop91;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(91, input);
                        throw eee;
                }
                cnt91++;
            } while (true);

            pushFollow(FOLLOW_rrb_in_bracketedOscarCompoundStructure1484_static.FOLLOW_rrb_in_bracketedOscarCompoundStructure1484);
            rrb321=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb321.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, bracketedOscarCompoundStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedOscarCompoundStructure"

    public static class molecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:184:1: molecule : moleculeamount -> ^( MOLECULE moleculeamount ) ;
    public final ChemicalChunkerParser.molecule_return molecule() throws RecognitionException {
        ChemicalChunkerParser.molecule_return retval = new ChemicalChunkerParser.molecule_return();
        retval.start = input.LT(1);
        int molecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount_return moleculeamount322 = null;


        RewriteRuleSubtreeStream stream_moleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule moleculeamount");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:185:2: ( moleculeamount -> ^( MOLECULE moleculeamount ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:185:5: moleculeamount
            {
            pushFollow(FOLLOW_moleculeamount_in_molecule1494_static.FOLLOW_moleculeamount_in_molecule1494);
            moleculeamount322=moleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moleculeamount.add(moleculeamount322.getTree());


            // AST REWRITE
            // elements: moleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 185:19: -> ^( MOLECULE moleculeamount )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:185:22: ^( MOLECULE moleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MOLECULE, "MOLECULE"), root_1);

                adaptor.addChild(root_1, stream_moleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, molecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "molecule"

    public static class moleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:187:1: moleculeamount : ( moleculeamount3 | moleculeamount1 | moleculeamount2 ) ( asAstate )? ;
    public final ChemicalChunkerParser.moleculeamount_return moleculeamount() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount_return retval = new ChemicalChunkerParser.moleculeamount_return();
        retval.start = input.LT(1);
        int moleculeamount_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount3_return moleculeamount3323 = null;

        ChemicalChunkerParser.moleculeamount1_return moleculeamount1324 = null;

        ChemicalChunkerParser.moleculeamount2_return moleculeamount2325 = null;

        ChemicalChunkerParser.asAstate_return asAstate326 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:187:16: ( ( moleculeamount3 | moleculeamount1 | moleculeamount2 ) ( asAstate )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:187:18: ( moleculeamount3 | moleculeamount1 | moleculeamount2 ) ( asAstate )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:187:18: ( moleculeamount3 | moleculeamount1 | moleculeamount2 )
            int alt92=3;
            alt92 = dfa92.predict(input);
            switch (alt92) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:187:19: moleculeamount3
                    {
                    pushFollow(FOLLOW_moleculeamount3_in_moleculeamount1512_static.FOLLOW_moleculeamount3_in_moleculeamount1512);
                    moleculeamount3323=moleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount3323.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:187:36: moleculeamount1
                    {
                    pushFollow(FOLLOW_moleculeamount1_in_moleculeamount1515_static.FOLLOW_moleculeamount1_in_moleculeamount1515);
                    moleculeamount1324=moleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount1324.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:187:54: moleculeamount2
                    {
                    pushFollow(FOLLOW_moleculeamount2_in_moleculeamount1519_static.FOLLOW_moleculeamount2_in_moleculeamount1519);
                    moleculeamount2325=moleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount2325.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:187:71: ( asAstate )?
            int alt93=2;
            alt93 = dfa93.predict(input);
            switch (alt93) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_moleculeamount1522_static.FOLLOW_asAstate_in_moleculeamount1522);
                    asAstate326=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate326.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, moleculeamount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount"

    public static class moleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:1: moleculeamount3 : ( quantity | mixture ) inof ( dtTHE | dt )? mixtureRatio ( mixture )? oscarCompound ;
    public final ChemicalChunkerParser.moleculeamount3_return moleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount3_return retval = new ChemicalChunkerParser.moleculeamount3_return();
        retval.start = input.LT(1);
        int moleculeamount3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity327 = null;

        ChemicalChunkerParser.mixture_return mixture328 = null;

        ChemicalChunkerParser.inof_return inof329 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE330 = null;

        ChemicalChunkerParser.dt_return dt331 = null;

        ChemicalChunkerParser.mixtureRatio_return mixtureRatio332 = null;

        ChemicalChunkerParser.mixture_return mixture333 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound334 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:190:2: ( ( quantity | mixture ) inof ( dtTHE | dt )? mixtureRatio ( mixture )? oscarCompound )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:190:3: ( quantity | mixture ) inof ( dtTHE | dt )? mixtureRatio ( mixture )? oscarCompound
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:190:3: ( quantity | mixture )
            int alt94=2;
            switch ( input.LA(1) ) {
            case 143:
                {
                int LA94_1 = input.LA(2);

                if ( (synpred282_ChemicalChunker()) ) {
                    alt94=1;
                }
                else if ( (true) ) {
                    alt94=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 94, 1, input);

                    throw nvae;
                }
                }
                break;
            case 146:
                {
                int LA94_2 = input.LA(2);

                if ( (synpred282_ChemicalChunker()) ) {
                    alt94=1;
                }
                else if ( (true) ) {
                    alt94=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 94, 2, input);

                    throw nvae;
                }
                }
                break;
            case 38:
            case 73:
                {
                alt94=1;
                }
                break;
            case 133:
                {
                alt94=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 94, 0, input);

                throw nvae;
            }

            switch (alt94) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:190:4: quantity
                    {
                    pushFollow(FOLLOW_quantity_in_moleculeamount31533_static.FOLLOW_quantity_in_moleculeamount31533);
                    quantity327=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity327.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:190:13: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_moleculeamount31535_static.FOLLOW_mixture_in_moleculeamount31535);
                    mixture328=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture328.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_inof_in_moleculeamount31538_static.FOLLOW_inof_in_moleculeamount31538);
            inof329=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof329.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:190:27: ( dtTHE | dt )?
            int alt95=3;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt95=1;
                    }
                    break;
                case 147:
                    {
                    alt95=2;
                    }
                    break;
            }

            switch (alt95) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:190:28: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_moleculeamount31541_static.FOLLOW_dtTHE_in_moleculeamount31541);
                    dtTHE330=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE330.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:190:36: dt
                    {
                    pushFollow(FOLLOW_dt_in_moleculeamount31545_static.FOLLOW_dt_in_moleculeamount31545);
                    dt331=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt331.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_mixtureRatio_in_moleculeamount31549_static.FOLLOW_mixtureRatio_in_moleculeamount31549);
            mixtureRatio332=mixtureRatio();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureRatio332.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:190:54: ( mixture )?
            int alt96=2;
            alt96 = dfa96.predict(input);
            switch (alt96) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_moleculeamount31551_static.FOLLOW_mixture_in_moleculeamount31551);
                    mixture333=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture333.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_oscarCompound_in_moleculeamount31554_static.FOLLOW_oscarCompound_in_moleculeamount31554);
            oscarCompound334=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound334.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, moleculeamount3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount3"

    public static class moleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:1: moleculeamount1 : ( quantity | mixture )+ inof ( quantity ( inof )? )? ( dtTHE | dt )? ( oscarCompound )+ afterCompoundCitationOrQuantity ;
    public final ChemicalChunkerParser.moleculeamount1_return moleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount1_return retval = new ChemicalChunkerParser.moleculeamount1_return();
        retval.start = input.LT(1);
        int moleculeamount1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity335 = null;

        ChemicalChunkerParser.mixture_return mixture336 = null;

        ChemicalChunkerParser.inof_return inof337 = null;

        ChemicalChunkerParser.quantity_return quantity338 = null;

        ChemicalChunkerParser.inof_return inof339 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE340 = null;

        ChemicalChunkerParser.dt_return dt341 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound342 = null;

        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity343 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:2: ( ( quantity | mixture )+ inof ( quantity ( inof )? )? ( dtTHE | dt )? ( oscarCompound )+ afterCompoundCitationOrQuantity )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:3: ( quantity | mixture )+ inof ( quantity ( inof )? )? ( dtTHE | dt )? ( oscarCompound )+ afterCompoundCitationOrQuantity
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:3: ( quantity | mixture )+
            int cnt97=0;
            loop97:
            do {
                int alt97=3;
                switch ( input.LA(1) ) {
                case 143:
                    {
                    int LA97_2 = input.LA(2);

                    if ( (synpred286_ChemicalChunker()) ) {
                        alt97=1;
                    }
                    else if ( (synpred287_ChemicalChunker()) ) {
                        alt97=2;
                    }


                    }
                    break;
                case 146:
                    {
                    int LA97_3 = input.LA(2);

                    if ( (synpred286_ChemicalChunker()) ) {
                        alt97=1;
                    }
                    else if ( (synpred287_ChemicalChunker()) ) {
                        alt97=2;
                    }


                    }
                    break;
                case 38:
                case 73:
                    {
                    alt97=1;
                    }
                    break;
                case 133:
                    {
                    alt97=2;
                    }
                    break;

                }

                switch (alt97) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount11564_static.FOLLOW_quantity_in_moleculeamount11564);
            	    quantity335=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity335.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount11566_static.FOLLOW_mixture_in_moleculeamount11566);
            	    mixture336=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture336.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt97 >= 1 ) break loop97;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(97, input);
                        throw eee;
                }
                cnt97++;
            } while (true);

            pushFollow(FOLLOW_inof_in_moleculeamount11570_static.FOLLOW_inof_in_moleculeamount11570);
            inof337=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof337.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:28: ( quantity ( inof )? )?
            int alt99=2;
            switch ( input.LA(1) ) {
                case 143:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 38:
                                case 73:
                                case 146:
                                    {
                                    alt99=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
                case 38:
                case 73:
                case 146:
                    {
                    alt99=1;
                    }
                    break;
            }

            switch (alt99) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:29: quantity ( inof )?
                    {
                    pushFollow(FOLLOW_quantity_in_moleculeamount11573_static.FOLLOW_quantity_in_moleculeamount11573);
                    quantity338=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity338.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:38: ( inof )?
                    int alt98=2;
                    switch ( input.LA(1) ) {
                        case 56:
                            {
                            alt98=1;
                            }
                            break;
                    }

                    switch (alt98) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inof
                            {
                            pushFollow(FOLLOW_inof_in_moleculeamount11575_static.FOLLOW_inof_in_moleculeamount11575);
                            inof339=inof();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof339.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:46: ( dtTHE | dt )?
            int alt100=3;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt100=1;
                    }
                    break;
                case 147:
                    {
                    alt100=2;
                    }
                    break;
            }

            switch (alt100) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:47: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_moleculeamount11581_static.FOLLOW_dtTHE_in_moleculeamount11581);
                    dtTHE340=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE340.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:55: dt
                    {
                    pushFollow(FOLLOW_dt_in_moleculeamount11585_static.FOLLOW_dt_in_moleculeamount11585);
                    dt341=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt341.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:60: ( oscarCompound )+
            int cnt101=0;
            loop101:
            do {
                int alt101=2;
                alt101 = dfa101.predict(input);
                switch (alt101) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_moleculeamount11589_static.FOLLOW_oscarCompound_in_moleculeamount11589);
            	    oscarCompound342=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound342.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt101 >= 1 ) break loop101;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(101, input);
                        throw eee;
                }
                cnt101++;
            } while (true);

            pushFollow(FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11592_static.FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11592);
            afterCompoundCitationOrQuantity343=afterCompoundCitationOrQuantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, afterCompoundCitationOrQuantity343.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, moleculeamount1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount1"

    public static class moleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:1: moleculeamount2 : ( quantity | mixture )* ( oscarCompound )+ afterCompoundCitationOrQuantity ;
    public final ChemicalChunkerParser.moleculeamount2_return moleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount2_return retval = new ChemicalChunkerParser.moleculeamount2_return();
        retval.start = input.LT(1);
        int moleculeamount2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity344 = null;

        ChemicalChunkerParser.mixture_return mixture345 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound346 = null;

        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity347 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:2: ( ( quantity | mixture )* ( oscarCompound )+ afterCompoundCitationOrQuantity )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:3: ( quantity | mixture )* ( oscarCompound )+ afterCompoundCitationOrQuantity
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:3: ( quantity | mixture )*
            loop102:
            do {
                int alt102=3;
                alt102 = dfa102.predict(input);
                switch (alt102) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount21601_static.FOLLOW_quantity_in_moleculeamount21601);
            	    quantity344=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity344.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount21603_static.FOLLOW_mixture_in_moleculeamount21603);
            	    mixture345=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture345.getTree());

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:23: ( oscarCompound )+
            int cnt103=0;
            loop103:
            do {
                int alt103=2;
                alt103 = dfa103.predict(input);
                switch (alt103) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_moleculeamount21607_static.FOLLOW_oscarCompound_in_moleculeamount21607);
            	    oscarCompound346=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound346.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt103 >= 1 ) break loop103;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(103, input);
                        throw eee;
                }
                cnt103++;
            } while (true);

            pushFollow(FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21610_static.FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21610);
            afterCompoundCitationOrQuantity347=afterCompoundCitationOrQuantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, afterCompoundCitationOrQuantity347.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, moleculeamount2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount2"

    public static class afterCompoundCitationOrQuantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "afterCompoundCitationOrQuantity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:1: afterCompoundCitationOrQuantity : ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )* ;
    public final ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity() throws RecognitionException {
        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return retval = new ChemicalChunkerParser.afterCompoundCitationOrQuantity_return();
        retval.start = input.LT(1);
        int afterCompoundCitationOrQuantity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citation_return citation348 = null;

        ChemicalChunkerParser.quantity_return quantity349 = null;

        ChemicalChunkerParser.comma_return comma350 = null;

        ChemicalChunkerParser.quantity1Node_return quantity1Node351 = null;

        ChemicalChunkerParser.citationStructure_return citationStructure352 = null;

        ChemicalChunkerParser.mixture_return mixture353 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:32: ( ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:34: ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:34: ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )*
            loop105:
            do {
                int alt105=5;
                alt105 = dfa105.predict(input);
                switch (alt105) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:35: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_afterCompoundCitationOrQuantity1618_static.FOLLOW_citation_in_afterCompoundCitationOrQuantity1618);
            	    citation348=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation348.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:44: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_afterCompoundCitationOrQuantity1620_static.FOLLOW_quantity_in_afterCompoundCitationOrQuantity1620);
            	    quantity349=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity349.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:53: comma ( quantity1Node | citationStructure )
            	    {
            	    pushFollow(FOLLOW_comma_in_afterCompoundCitationOrQuantity1622_static.FOLLOW_comma_in_afterCompoundCitationOrQuantity1622);
            	    comma350=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma350.getTree());
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:59: ( quantity1Node | citationStructure )
            	    int alt104=2;
            	    alt104 = dfa104.predict(input);
            	    switch (alt104) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:60: quantity1Node
            	            {
            	            pushFollow(FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1625_static.FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1625);
            	            quantity1Node351=quantity1Node();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity1Node351.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:74: citationStructure
            	            {
            	            pushFollow(FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1627_static.FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1627);
            	            citationStructure352=citationStructure();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, citationStructure352.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:93: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_afterCompoundCitationOrQuantity1630_static.FOLLOW_mixture_in_afterCompoundCitationOrQuantity1630);
            	    mixture353=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture353.getTree());

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, afterCompoundCitationOrQuantity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "afterCompoundCitationOrQuantity"

    public static class unnamedmolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmolecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:1: unnamedmolecule : unnamedmoleculeDescription ( asAstate )? -> ^( UNNAMEDMOLECULE unnamedmoleculeDescription ( asAstate )? ) ;
    public final ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule() throws RecognitionException {
        ChemicalChunkerParser.unnamedmolecule_return retval = new ChemicalChunkerParser.unnamedmolecule_return();
        retval.start = input.LT(1);
        int unnamedmolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeDescription_return unnamedmoleculeDescription354 = null;

        ChemicalChunkerParser.asAstate_return asAstate355 = null;


        RewriteRuleSubtreeStream stream_unnamedmoleculeDescription=new RewriteRuleSubtreeStream(adaptor,"rule unnamedmoleculeDescription");
        RewriteRuleSubtreeStream stream_asAstate=new RewriteRuleSubtreeStream(adaptor,"rule asAstate");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:2: ( unnamedmoleculeDescription ( asAstate )? -> ^( UNNAMEDMOLECULE unnamedmoleculeDescription ( asAstate )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:4: unnamedmoleculeDescription ( asAstate )?
            {
            pushFollow(FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1641_static.FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1641);
            unnamedmoleculeDescription354=unnamedmoleculeDescription();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unnamedmoleculeDescription.add(unnamedmoleculeDescription354.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:31: ( asAstate )?
            int alt106=2;
            alt106 = dfa106.predict(input);
            switch (alt106) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_unnamedmolecule1643_static.FOLLOW_asAstate_in_unnamedmolecule1643);
                    asAstate355=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_asAstate.add(asAstate355.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: asAstate, unnamedmoleculeDescription
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 201:41: -> ^( UNNAMEDMOLECULE unnamedmoleculeDescription ( asAstate )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:44: ^( UNNAMEDMOLECULE unnamedmoleculeDescription ( asAstate )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(UNNAMEDMOLECULE, "UNNAMEDMOLECULE"), root_1);

                adaptor.addChild(root_1, stream_unnamedmoleculeDescription.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:89: ( asAstate )?
                if ( stream_asAstate.hasNext() ) {
                    adaptor.addChild(root_1, stream_asAstate.nextTree());

                }
                stream_asAstate.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, unnamedmolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmolecule"

    public static class unnamedmoleculeDescription_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeDescription"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:1: unnamedmoleculeDescription : ( quantity inof ( unnamedmoleculeamount1 | unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )? ) | unnamedmoleculeamount3 | unnamedmoleculeamount4 | unnamedmoleculeamount5 | unnamedmoleculeamount6 | referenceToCompound ) ;
    public final ChemicalChunkerParser.unnamedmoleculeDescription_return unnamedmoleculeDescription() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeDescription_return retval = new ChemicalChunkerParser.unnamedmoleculeDescription_return();
        retval.start = input.LT(1);
        int unnamedmoleculeDescription_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity356 = null;

        ChemicalChunkerParser.inof_return inof357 = null;

        ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1358 = null;

        ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2359 = null;

        ChemicalChunkerParser.optionalUnnamedMoleculeEnding_return optionalUnnamedMoleculeEnding360 = null;

        ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3361 = null;

        ChemicalChunkerParser.unnamedmoleculeamount4_return unnamedmoleculeamount4362 = null;

        ChemicalChunkerParser.unnamedmoleculeamount5_return unnamedmoleculeamount5363 = null;

        ChemicalChunkerParser.unnamedmoleculeamount6_return unnamedmoleculeamount6364 = null;

        ChemicalChunkerParser.referenceToCompound_return referenceToCompound365 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:2: ( ( quantity inof ( unnamedmoleculeamount1 | unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )? ) | unnamedmoleculeamount3 | unnamedmoleculeamount4 | unnamedmoleculeamount5 | unnamedmoleculeamount6 | referenceToCompound ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:3: ( quantity inof ( unnamedmoleculeamount1 | unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )? ) | unnamedmoleculeamount3 | unnamedmoleculeamount4 | unnamedmoleculeamount5 | unnamedmoleculeamount6 | referenceToCompound )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:3: ( quantity inof ( unnamedmoleculeamount1 | unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )? ) | unnamedmoleculeamount3 | unnamedmoleculeamount4 | unnamedmoleculeamount5 | unnamedmoleculeamount6 | referenceToCompound )
            int alt109=6;
            alt109 = dfa109.predict(input);
            switch (alt109) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:4: quantity inof ( unnamedmoleculeamount1 | unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )? )
                    {
                    pushFollow(FOLLOW_quantity_in_unnamedmoleculeDescription1664_static.FOLLOW_quantity_in_unnamedmoleculeDescription1664);
                    quantity356=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity356.getTree());
                    pushFollow(FOLLOW_inof_in_unnamedmoleculeDescription1666_static.FOLLOW_inof_in_unnamedmoleculeDescription1666);
                    inof357=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof357.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:18: ( unnamedmoleculeamount1 | unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )? )
                    int alt108=2;
                    switch ( input.LA(1) ) {
                    case 38:
                    case 139:
                    case 141:
                    case 143:
                    case 146:
                        {
                        alt108=1;
                        }
                        break;
                    case 41:
                    case 42:
                    case 45:
                    case 46:
                    case 63:
                    case 68:
                    case 71:
                    case 83:
                    case 90:
                    case 142:
                    case 147:
                    case 149:
                    case 151:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                        {
                        alt108=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 108, 0, input);

                        throw nvae;
                    }

                    switch (alt108) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:19: unnamedmoleculeamount1
                            {
                            pushFollow(FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeDescription1669_static.FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeDescription1669);
                            unnamedmoleculeamount1358=unnamedmoleculeamount1();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount1358.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:42: unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )?
                            {
                            pushFollow(FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeDescription1671_static.FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeDescription1671);
                            unnamedmoleculeamount2359=unnamedmoleculeamount2();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount2359.getTree());
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:65: ( optionalUnnamedMoleculeEnding )?
                            int alt107=2;
                            alt107 = dfa107.predict(input);
                            switch (alt107) {
                                case 1 :
                                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: optionalUnnamedMoleculeEnding
                                    {
                                    pushFollow(FOLLOW_optionalUnnamedMoleculeEnding_in_unnamedmoleculeDescription1673_static.FOLLOW_optionalUnnamedMoleculeEnding_in_unnamedmoleculeDescription1673);
                                    optionalUnnamedMoleculeEnding360=optionalUnnamedMoleculeEnding();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, optionalUnnamedMoleculeEnding360.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:98: unnamedmoleculeamount3
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeDescription1678_static.FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeDescription1678);
                    unnamedmoleculeamount3361=unnamedmoleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount3361.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:121: unnamedmoleculeamount4
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeDescription1680_static.FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeDescription1680);
                    unnamedmoleculeamount4362=unnamedmoleculeamount4();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount4362.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:144: unnamedmoleculeamount5
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount5_in_unnamedmoleculeDescription1682_static.FOLLOW_unnamedmoleculeamount5_in_unnamedmoleculeDescription1682);
                    unnamedmoleculeamount5363=unnamedmoleculeamount5();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount5363.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:167: unnamedmoleculeamount6
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount6_in_unnamedmoleculeDescription1684_static.FOLLOW_unnamedmoleculeamount6_in_unnamedmoleculeDescription1684);
                    unnamedmoleculeamount6364=unnamedmoleculeamount6();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount6364.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:190: referenceToCompound
                    {
                    pushFollow(FOLLOW_referenceToCompound_in_unnamedmoleculeDescription1686_static.FOLLOW_referenceToCompound_in_unnamedmoleculeDescription1686);
                    referenceToCompound365=referenceToCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, referenceToCompound365.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, unnamedmoleculeDescription_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeDescription"

    public static class unnamedmoleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:1: unnamedmoleculeamount1 : numericOrIdentifierCompoundReference ( quantity | mixture )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount1_return retval = new ChemicalChunkerParser.unnamedmoleculeamount1_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference366 = null;

        ChemicalChunkerParser.quantity_return quantity367 = null;

        ChemicalChunkerParser.mixture_return mixture368 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:2: ( numericOrIdentifierCompoundReference ( quantity | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:5: numericOrIdentifierCompoundReference ( quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_numericOrIdentifierCompoundReference_in_unnamedmoleculeamount11698_static.FOLLOW_numericOrIdentifierCompoundReference_in_unnamedmoleculeamount11698);
            numericOrIdentifierCompoundReference366=numericOrIdentifierCompoundReference();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numericOrIdentifierCompoundReference366.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:42: ( quantity | mixture )*
            loop110:
            do {
                int alt110=3;
                alt110 = dfa110.predict(input);
                switch (alt110) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:43: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount11701_static.FOLLOW_quantity_in_unnamedmoleculeamount11701);
            	    quantity367=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity367.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:52: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount11703_static.FOLLOW_mixture_in_unnamedmoleculeamount11703);
            	    mixture368=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture368.getTree());

            	    }
            	    break;

            	default :
            	    break loop110;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, unnamedmoleculeamount1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount1"

    public static class unnamedmoleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:1: unnamedmoleculeamount2 : ( dtTHE | dt )? ( jj | jjchem | jjcomp )* ( nnstate | nn | nns | nnp | referenceToExampleCompound | nnexample | oscaronts | nnatmosphere | nnchementity | nnmixture | fw | nnps | oscarase ) ;
    public final ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount2_return retval = new ChemicalChunkerParser.unnamedmoleculeamount2_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE369 = null;

        ChemicalChunkerParser.dt_return dt370 = null;

        ChemicalChunkerParser.jj_return jj371 = null;

        ChemicalChunkerParser.jjchem_return jjchem372 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp373 = null;

        ChemicalChunkerParser.nnstate_return nnstate374 = null;

        ChemicalChunkerParser.nn_return nn375 = null;

        ChemicalChunkerParser.nns_return nns376 = null;

        ChemicalChunkerParser.nnp_return nnp377 = null;

        ChemicalChunkerParser.referenceToExampleCompound_return referenceToExampleCompound378 = null;

        ChemicalChunkerParser.nnexample_return nnexample379 = null;

        ChemicalChunkerParser.oscaronts_return oscaronts380 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere381 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity382 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture383 = null;

        ChemicalChunkerParser.fw_return fw384 = null;

        ChemicalChunkerParser.nnps_return nnps385 = null;

        ChemicalChunkerParser.oscarase_return oscarase386 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:2: ( ( dtTHE | dt )? ( jj | jjchem | jjcomp )* ( nnstate | nn | nns | nnp | referenceToExampleCompound | nnexample | oscaronts | nnatmosphere | nnchementity | nnmixture | fw | nnps | oscarase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:4: ( dtTHE | dt )? ( jj | jjchem | jjcomp )* ( nnstate | nn | nns | nnp | referenceToExampleCompound | nnexample | oscaronts | nnatmosphere | nnchementity | nnmixture | fw | nnps | oscarase )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:4: ( dtTHE | dt )?
            int alt111=3;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt111=1;
                    }
                    break;
                case 147:
                    {
                    alt111=2;
                    }
                    break;
            }

            switch (alt111) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:5: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_unnamedmoleculeamount21715_static.FOLLOW_dtTHE_in_unnamedmoleculeamount21715);
                    dtTHE369=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE369.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:13: dt
                    {
                    pushFollow(FOLLOW_dt_in_unnamedmoleculeamount21719_static.FOLLOW_dt_in_unnamedmoleculeamount21719);
                    dt370=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt370.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:18: ( jj | jjchem | jjcomp )*
            loop112:
            do {
                int alt112=4;
                switch ( input.LA(1) ) {
                case 151:
                    {
                    alt112=1;
                    }
                    break;
                case 45:
                    {
                    alt112=2;
                    }
                    break;
                case 46:
                    {
                    alt112=3;
                    }
                    break;

                }

                switch (alt112) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:19: jj
            	    {
            	    pushFollow(FOLLOW_jj_in_unnamedmoleculeamount21724_static.FOLLOW_jj_in_unnamedmoleculeamount21724);
            	    jj371=jj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj371.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:22: jjchem
            	    {
            	    pushFollow(FOLLOW_jjchem_in_unnamedmoleculeamount21726_static.FOLLOW_jjchem_in_unnamedmoleculeamount21726);
            	    jjchem372=jjchem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem372.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:29: jjcomp
            	    {
            	    pushFollow(FOLLOW_jjcomp_in_unnamedmoleculeamount21728_static.FOLLOW_jjcomp_in_unnamedmoleculeamount21728);
            	    jjcomp373=jjcomp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp373.getTree());

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:38: ( nnstate | nn | nns | nnp | referenceToExampleCompound | nnexample | oscaronts | nnatmosphere | nnchementity | nnmixture | fw | nnps | oscarase )
            int alt113=13;
            alt113 = dfa113.predict(input);
            switch (alt113) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:39: nnstate
                    {
                    pushFollow(FOLLOW_nnstate_in_unnamedmoleculeamount21733_static.FOLLOW_nnstate_in_unnamedmoleculeamount21733);
                    nnstate374=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate374.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:47: nn
                    {
                    pushFollow(FOLLOW_nn_in_unnamedmoleculeamount21735_static.FOLLOW_nn_in_unnamedmoleculeamount21735);
                    nn375=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn375.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:50: nns
                    {
                    pushFollow(FOLLOW_nns_in_unnamedmoleculeamount21737_static.FOLLOW_nns_in_unnamedmoleculeamount21737);
                    nns376=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns376.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:54: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_unnamedmoleculeamount21739_static.FOLLOW_nnp_in_unnamedmoleculeamount21739);
                    nnp377=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp377.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:58: referenceToExampleCompound
                    {
                    pushFollow(FOLLOW_referenceToExampleCompound_in_unnamedmoleculeamount21741_static.FOLLOW_referenceToExampleCompound_in_unnamedmoleculeamount21741);
                    referenceToExampleCompound378=referenceToExampleCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, referenceToExampleCompound378.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:85: nnexample
                    {
                    pushFollow(FOLLOW_nnexample_in_unnamedmoleculeamount21743_static.FOLLOW_nnexample_in_unnamedmoleculeamount21743);
                    nnexample379=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample379.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:95: oscaronts
                    {
                    pushFollow(FOLLOW_oscaronts_in_unnamedmoleculeamount21745_static.FOLLOW_oscaronts_in_unnamedmoleculeamount21745);
                    oscaronts380=oscaronts();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaronts380.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:105: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_unnamedmoleculeamount21747_static.FOLLOW_nnatmosphere_in_unnamedmoleculeamount21747);
                    nnatmosphere381=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere381.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:118: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_unnamedmoleculeamount21749_static.FOLLOW_nnchementity_in_unnamedmoleculeamount21749);
                    nnchementity382=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity382.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:131: nnmixture
                    {
                    pushFollow(FOLLOW_nnmixture_in_unnamedmoleculeamount21751_static.FOLLOW_nnmixture_in_unnamedmoleculeamount21751);
                    nnmixture383=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture383.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:141: fw
                    {
                    pushFollow(FOLLOW_fw_in_unnamedmoleculeamount21753_static.FOLLOW_fw_in_unnamedmoleculeamount21753);
                    fw384=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw384.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:144: nnps
                    {
                    pushFollow(FOLLOW_nnps_in_unnamedmoleculeamount21755_static.FOLLOW_nnps_in_unnamedmoleculeamount21755);
                    nnps385=nnps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnps385.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:149: oscarase
                    {
                    pushFollow(FOLLOW_oscarase_in_unnamedmoleculeamount21757_static.FOLLOW_oscarase_in_unnamedmoleculeamount21757);
                    oscarase386=oscarase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase386.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, unnamedmoleculeamount2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount2"

    public static class unnamedmoleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:1: unnamedmoleculeamount3 : jjcomp nnchementity ( optionalUnnamedMoleculeEnding )? ;
    public final ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount3_return retval = new ChemicalChunkerParser.unnamedmoleculeamount3_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp387 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity388 = null;

        ChemicalChunkerParser.optionalUnnamedMoleculeEnding_return optionalUnnamedMoleculeEnding389 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:2: ( jjcomp nnchementity ( optionalUnnamedMoleculeEnding )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:4: jjcomp nnchementity ( optionalUnnamedMoleculeEnding )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_jjcomp_in_unnamedmoleculeamount31767_static.FOLLOW_jjcomp_in_unnamedmoleculeamount31767);
            jjcomp387=jjcomp();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp387.getTree());
            pushFollow(FOLLOW_nnchementity_in_unnamedmoleculeamount31769_static.FOLLOW_nnchementity_in_unnamedmoleculeamount31769);
            nnchementity388=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity388.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:24: ( optionalUnnamedMoleculeEnding )?
            int alt114=2;
            alt114 = dfa114.predict(input);
            switch (alt114) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: optionalUnnamedMoleculeEnding
                    {
                    pushFollow(FOLLOW_optionalUnnamedMoleculeEnding_in_unnamedmoleculeamount31771_static.FOLLOW_optionalUnnamedMoleculeEnding_in_unnamedmoleculeamount31771);
                    optionalUnnamedMoleculeEnding389=optionalUnnamedMoleculeEnding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, optionalUnnamedMoleculeEnding389.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, unnamedmoleculeamount3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount3"

    public static class optionalUnnamedMoleculeEnding_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "optionalUnnamedMoleculeEnding"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:1: optionalUnnamedMoleculeEnding : ( numericOrIdentifierCompoundReference )? ( quantity | mixture )* ;
    public final ChemicalChunkerParser.optionalUnnamedMoleculeEnding_return optionalUnnamedMoleculeEnding() throws RecognitionException {
        ChemicalChunkerParser.optionalUnnamedMoleculeEnding_return retval = new ChemicalChunkerParser.optionalUnnamedMoleculeEnding_return();
        retval.start = input.LT(1);
        int optionalUnnamedMoleculeEnding_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference390 = null;

        ChemicalChunkerParser.quantity_return quantity391 = null;

        ChemicalChunkerParser.mixture_return mixture392 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:2: ( ( numericOrIdentifierCompoundReference )? ( quantity | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:5: ( numericOrIdentifierCompoundReference )? ( quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:5: ( numericOrIdentifierCompoundReference )?
            int alt115=2;
            alt115 = dfa115.predict(input);
            switch (alt115) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: numericOrIdentifierCompoundReference
                    {
                    pushFollow(FOLLOW_numericOrIdentifierCompoundReference_in_optionalUnnamedMoleculeEnding1783_static.FOLLOW_numericOrIdentifierCompoundReference_in_optionalUnnamedMoleculeEnding1783);
                    numericOrIdentifierCompoundReference390=numericOrIdentifierCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericOrIdentifierCompoundReference390.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:43: ( quantity | mixture )*
            loop116:
            do {
                int alt116=3;
                alt116 = dfa116.predict(input);
                switch (alt116) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:44: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_optionalUnnamedMoleculeEnding1787_static.FOLLOW_quantity_in_optionalUnnamedMoleculeEnding1787);
            	    quantity391=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity391.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:53: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_optionalUnnamedMoleculeEnding1789_static.FOLLOW_mixture_in_optionalUnnamedMoleculeEnding1789);
            	    mixture392=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture392.getTree());

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, optionalUnnamedMoleculeEnding_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "optionalUnnamedMoleculeEnding"

    public static class unnamedmoleculeamount4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount4"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:1: unnamedmoleculeamount4 : alphanumericOrIdentifierCompoundReference ( citation | quantity | mixture )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount4_return unnamedmoleculeamount4() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount4_return retval = new ChemicalChunkerParser.unnamedmoleculeamount4_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount4_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return alphanumericOrIdentifierCompoundReference393 = null;

        ChemicalChunkerParser.citation_return citation394 = null;

        ChemicalChunkerParser.quantity_return quantity395 = null;

        ChemicalChunkerParser.mixture_return mixture396 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:2: ( alphanumericOrIdentifierCompoundReference ( citation | quantity | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:4: alphanumericOrIdentifierCompoundReference ( citation | quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_alphanumericOrIdentifierCompoundReference_in_unnamedmoleculeamount41800_static.FOLLOW_alphanumericOrIdentifierCompoundReference_in_unnamedmoleculeamount41800);
            alphanumericOrIdentifierCompoundReference393=alphanumericOrIdentifierCompoundReference();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, alphanumericOrIdentifierCompoundReference393.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:46: ( citation | quantity | mixture )*
            loop117:
            do {
                int alt117=4;
                alt117 = dfa117.predict(input);
                switch (alt117) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:47: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_unnamedmoleculeamount41803_static.FOLLOW_citation_in_unnamedmoleculeamount41803);
            	    citation394=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation394.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:56: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount41805_static.FOLLOW_quantity_in_unnamedmoleculeamount41805);
            	    quantity395=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity395.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:65: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount41807_static.FOLLOW_mixture_in_unnamedmoleculeamount41807);
            	    mixture396=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture396.getTree());

            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, unnamedmoleculeamount4_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount4"

    public static class alphanumericOrIdentifierCompoundReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "alphanumericOrIdentifierCompoundReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:1: alphanumericOrIdentifierCompoundReference : ( squareBracketedReference | identifierOrBracketedIdentifier | cdAlphanum | bracketedNumeric ) -> ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( cdAlphanum )? ( bracketedNumeric )? ) ;
    public final ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return alphanumericOrIdentifierCompoundReference() throws RecognitionException {
        ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return retval = new ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return();
        retval.start = input.LT(1);
        int alphanumericOrIdentifierCompoundReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference397 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier398 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum399 = null;

        ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric400 = null;


        RewriteRuleSubtreeStream stream_squareBracketedReference=new RewriteRuleSubtreeStream(adaptor,"rule squareBracketedReference");
        RewriteRuleSubtreeStream stream_cdAlphanum=new RewriteRuleSubtreeStream(adaptor,"rule cdAlphanum");
        RewriteRuleSubtreeStream stream_bracketedNumeric=new RewriteRuleSubtreeStream(adaptor,"rule bracketedNumeric");
        RewriteRuleSubtreeStream stream_identifierOrBracketedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule identifierOrBracketedIdentifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:3: ( ( squareBracketedReference | identifierOrBracketedIdentifier | cdAlphanum | bracketedNumeric ) -> ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( cdAlphanum )? ( bracketedNumeric )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:5: ( squareBracketedReference | identifierOrBracketedIdentifier | cdAlphanum | bracketedNumeric )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:5: ( squareBracketedReference | identifierOrBracketedIdentifier | cdAlphanum | bracketedNumeric )
            int alt118=4;
            switch ( input.LA(1) ) {
            case 139:
                {
                alt118=1;
                }
                break;
            case 141:
            case 146:
                {
                alt118=2;
                }
                break;
            case 143:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 146:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 141:
                                {
                                alt118=2;
                                }
                                break;
                            case 144:
                                {
                                alt118=4;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 118, 8, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 118, 6, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 141:
                        {
                        alt118=2;
                        }
                        break;
                    case 38:
                        {
                        alt118=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 118, 5, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 118, 3, input);

                    throw nvae;
                }

                }
                break;
            case 38:
                {
                alt118=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 118, 0, input);

                throw nvae;
            }

            switch (alt118) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:6: squareBracketedReference
                    {
                    pushFollow(FOLLOW_squareBracketedReference_in_alphanumericOrIdentifierCompoundReference1820_static.FOLLOW_squareBracketedReference_in_alphanumericOrIdentifierCompoundReference1820);
                    squareBracketedReference397=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_squareBracketedReference.add(squareBracketedReference397.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:31: identifierOrBracketedIdentifier
                    {
                    pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_alphanumericOrIdentifierCompoundReference1822_static.FOLLOW_identifierOrBracketedIdentifier_in_alphanumericOrIdentifierCompoundReference1822);
                    identifierOrBracketedIdentifier398=identifierOrBracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifierOrBracketedIdentifier.add(identifierOrBracketedIdentifier398.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:63: cdAlphanum
                    {
                    pushFollow(FOLLOW_cdAlphanum_in_alphanumericOrIdentifierCompoundReference1824_static.FOLLOW_cdAlphanum_in_alphanumericOrIdentifierCompoundReference1824);
                    cdAlphanum399=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cdAlphanum.add(cdAlphanum399.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:74: bracketedNumeric
                    {
                    pushFollow(FOLLOW_bracketedNumeric_in_alphanumericOrIdentifierCompoundReference1826_static.FOLLOW_bracketedNumeric_in_alphanumericOrIdentifierCompoundReference1826);
                    bracketedNumeric400=bracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedNumeric.add(bracketedNumeric400.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: squareBracketedReference, cdAlphanum, bracketedNumeric, identifierOrBracketedIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 222:92: -> ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( cdAlphanum )? ( bracketedNumeric )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:95: ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( cdAlphanum )? ( bracketedNumeric )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:117: ( squareBracketedReference )?
                if ( stream_squareBracketedReference.hasNext() ) {
                    adaptor.addChild(root_1, stream_squareBracketedReference.nextTree());

                }
                stream_squareBracketedReference.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:143: ( identifierOrBracketedIdentifier )?
                if ( stream_identifierOrBracketedIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_identifierOrBracketedIdentifier.nextTree());

                }
                stream_identifierOrBracketedIdentifier.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:176: ( cdAlphanum )?
                if ( stream_cdAlphanum.hasNext() ) {
                    adaptor.addChild(root_1, stream_cdAlphanum.nextTree());

                }
                stream_cdAlphanum.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:188: ( bracketedNumeric )?
                if ( stream_bracketedNumeric.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedNumeric.nextTree());

                }
                stream_bracketedNumeric.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, alphanumericOrIdentifierCompoundReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "alphanumericOrIdentifierCompoundReference"

    public static class unnamedmoleculeamount5_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount5"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:1: unnamedmoleculeamount5 : numberCompoundReference ( citation )? quantity ( citation | quantity | mixture )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount5_return unnamedmoleculeamount5() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount5_return retval = new ChemicalChunkerParser.unnamedmoleculeamount5_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount5_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference401 = null;

        ChemicalChunkerParser.citation_return citation402 = null;

        ChemicalChunkerParser.quantity_return quantity403 = null;

        ChemicalChunkerParser.citation_return citation404 = null;

        ChemicalChunkerParser.quantity_return quantity405 = null;

        ChemicalChunkerParser.mixture_return mixture406 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:2: ( numberCompoundReference ( citation )? quantity ( citation | quantity | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:4: numberCompoundReference ( citation )? quantity ( citation | quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_numberCompoundReference_in_unnamedmoleculeamount51854_static.FOLLOW_numberCompoundReference_in_unnamedmoleculeamount51854);
            numberCompoundReference401=numberCompoundReference();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numberCompoundReference401.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:28: ( citation )?
            int alt119=2;
            alt119 = dfa119.predict(input);
            switch (alt119) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: citation
                    {
                    pushFollow(FOLLOW_citation_in_unnamedmoleculeamount51856_static.FOLLOW_citation_in_unnamedmoleculeamount51856);
                    citation402=citation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation402.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount51859_static.FOLLOW_quantity_in_unnamedmoleculeamount51859);
            quantity403=quantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity403.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:47: ( citation | quantity | mixture )*
            loop120:
            do {
                int alt120=4;
                alt120 = dfa120.predict(input);
                switch (alt120) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:48: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_unnamedmoleculeamount51862_static.FOLLOW_citation_in_unnamedmoleculeamount51862);
            	    citation404=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation404.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:57: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount51864_static.FOLLOW_quantity_in_unnamedmoleculeamount51864);
            	    quantity405=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity405.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:66: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount51866_static.FOLLOW_mixture_in_unnamedmoleculeamount51866);
            	    mixture406=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture406.getTree());

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, unnamedmoleculeamount5_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount5"

    public static class numberCompoundReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberCompoundReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:1: numberCompoundReference : cd -> ^( REFERENCETOCOMPOUND cd ) ;
    public final ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference() throws RecognitionException {
        ChemicalChunkerParser.numberCompoundReference_return retval = new ChemicalChunkerParser.numberCompoundReference_return();
        retval.start = input.LT(1);
        int numberCompoundReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd407 = null;


        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:228:3: ( cd -> ^( REFERENCETOCOMPOUND cd ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:228:5: cd
            {
            pushFollow(FOLLOW_cd_in_numberCompoundReference1878_static.FOLLOW_cd_in_numberCompoundReference1878);
            cd407=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd407.getTree());


            // AST REWRITE
            // elements: cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 228:8: -> ^( REFERENCETOCOMPOUND cd )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:228:11: ^( REFERENCETOCOMPOUND cd )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, numberCompoundReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numberCompoundReference"

    public static class unnamedmoleculeamount6_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount6"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:1: unnamedmoleculeamount6 : ( quantity | mixture ) ( jjcomp )? nnchementity ( quantity | mixture )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount6_return unnamedmoleculeamount6() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount6_return retval = new ChemicalChunkerParser.unnamedmoleculeamount6_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount6_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity408 = null;

        ChemicalChunkerParser.mixture_return mixture409 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp410 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity411 = null;

        ChemicalChunkerParser.quantity_return quantity412 = null;

        ChemicalChunkerParser.mixture_return mixture413 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:2: ( ( quantity | mixture ) ( jjcomp )? nnchementity ( quantity | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:3: ( quantity | mixture ) ( jjcomp )? nnchementity ( quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:3: ( quantity | mixture )
            int alt121=2;
            switch ( input.LA(1) ) {
            case 143:
                {
                int LA121_1 = input.LA(2);

                if ( (synpred342_ChemicalChunker()) ) {
                    alt121=1;
                }
                else if ( (true) ) {
                    alt121=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 121, 1, input);

                    throw nvae;
                }
                }
                break;
            case 146:
                {
                int LA121_2 = input.LA(2);

                if ( (synpred342_ChemicalChunker()) ) {
                    alt121=1;
                }
                else if ( (true) ) {
                    alt121=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 121, 2, input);

                    throw nvae;
                }
                }
                break;
            case 38:
            case 73:
                {
                alt121=1;
                }
                break;
            case 133:
                {
                alt121=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                throw nvae;
            }

            switch (alt121) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:4: quantity
                    {
                    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount61895_static.FOLLOW_quantity_in_unnamedmoleculeamount61895);
                    quantity408=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity408.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:13: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount61897_static.FOLLOW_mixture_in_unnamedmoleculeamount61897);
                    mixture409=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture409.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:22: ( jjcomp )?
            int alt122=2;
            switch ( input.LA(1) ) {
                case 46:
                    {
                    alt122=1;
                    }
                    break;
            }

            switch (alt122) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: jjcomp
                    {
                    pushFollow(FOLLOW_jjcomp_in_unnamedmoleculeamount61900_static.FOLLOW_jjcomp_in_unnamedmoleculeamount61900);
                    jjcomp410=jjcomp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp410.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnchementity_in_unnamedmoleculeamount61903_static.FOLLOW_nnchementity_in_unnamedmoleculeamount61903);
            nnchementity411=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity411.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:43: ( quantity | mixture )*
            loop123:
            do {
                int alt123=3;
                alt123 = dfa123.predict(input);
                switch (alt123) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:44: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount61906_static.FOLLOW_quantity_in_unnamedmoleculeamount61906);
            	    quantity412=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity412.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:53: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount61908_static.FOLLOW_mixture_in_unnamedmoleculeamount61908);
            	    mixture413=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture413.getTree());

            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, unnamedmoleculeamount6_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount6"

    public static class asAstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "asAstate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:1: asAstate : inas ( dt )? ( jj | jjchem )* nnstate ( quantity )* ;
    public final ChemicalChunkerParser.asAstate_return asAstate() throws RecognitionException {
        ChemicalChunkerParser.asAstate_return retval = new ChemicalChunkerParser.asAstate_return();
        retval.start = input.LT(1);
        int asAstate_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inas_return inas414 = null;

        ChemicalChunkerParser.dt_return dt415 = null;

        ChemicalChunkerParser.jj_return jj416 = null;

        ChemicalChunkerParser.jjchem_return jjchem417 = null;

        ChemicalChunkerParser.nnstate_return nnstate418 = null;

        ChemicalChunkerParser.quantity_return quantity419 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:234:2: ( inas ( dt )? ( jj | jjchem )* nnstate ( quantity )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:234:4: inas ( dt )? ( jj | jjchem )* nnstate ( quantity )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inas_in_asAstate1919_static.FOLLOW_inas_in_asAstate1919);
            inas414=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inas414.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:234:9: ( dt )?
            int alt124=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt124=1;
                    }
                    break;
            }

            switch (alt124) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_asAstate1921_static.FOLLOW_dt_in_asAstate1921);
                    dt415=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt415.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:234:13: ( jj | jjchem )*
            loop125:
            do {
                int alt125=3;
                switch ( input.LA(1) ) {
                case 151:
                    {
                    alt125=1;
                    }
                    break;
                case 45:
                    {
                    alt125=2;
                    }
                    break;

                }

                switch (alt125) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:234:14: jj
            	    {
            	    pushFollow(FOLLOW_jj_in_asAstate1925_static.FOLLOW_jj_in_asAstate1925);
            	    jj416=jj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj416.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:234:17: jjchem
            	    {
            	    pushFollow(FOLLOW_jjchem_in_asAstate1927_static.FOLLOW_jjchem_in_asAstate1927);
            	    jjchem417=jjchem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem417.getTree());

            	    }
            	    break;

            	default :
            	    break loop125;
                }
            } while (true);

            pushFollow(FOLLOW_nnstate_in_asAstate1931_static.FOLLOW_nnstate_in_asAstate1931);
            nnstate418=nnstate();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate418.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:234:34: ( quantity )*
            loop126:
            do {
                int alt126=2;
                alt126 = dfa126.predict(input);
                switch (alt126) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_asAstate1933_static.FOLLOW_quantity_in_asAstate1933);
            	    quantity419=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity419.getTree());

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, asAstate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "asAstate"

    public static class referenceToCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "referenceToCompound"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:1: referenceToCompound : ( nnchementity | {...}?) numericOrIdentifierCompoundReference ;
    public final ChemicalChunkerParser.referenceToCompound_return referenceToCompound() throws RecognitionException {
        ChemicalChunkerParser.referenceToCompound_return retval = new ChemicalChunkerParser.referenceToCompound_return();
        retval.start = input.LT(1);
        int referenceToCompound_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity420 = null;

        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference421 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:2: ( ( nnchementity | {...}?) numericOrIdentifierCompoundReference )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:4: ( nnchementity | {...}?) numericOrIdentifierCompoundReference
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:4: ( nnchementity | {...}?)
            int alt127=2;
            switch ( input.LA(1) ) {
            case 71:
                {
                alt127=1;
                }
                break;
            case 38:
            case 139:
            case 141:
            case 143:
            case 146:
                {
                alt127=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;
            }

            switch (alt127) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:5: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_referenceToCompound1944_static.FOLLOW_nnchementity_in_referenceToCompound1944);
                    nnchementity420=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity420.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:20: {...}?
                    {
                    if ( !((numberLooksLikeAReferenceToACompound(input))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "referenceToCompound", "numberLooksLikeAReferenceToACompound(input)");
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_numericOrIdentifierCompoundReference_in_referenceToCompound1951_static.FOLLOW_numericOrIdentifierCompoundReference_in_referenceToCompound1951);
            numericOrIdentifierCompoundReference421=numericOrIdentifierCompoundReference();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numericOrIdentifierCompoundReference421.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, referenceToCompound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "referenceToCompound"

    public static class numericOrIdentifierCompoundReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericOrIdentifierCompoundReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:1: numericOrIdentifierCompoundReference : ( squareBracketedReference | identifierOrBracketedIdentifier | numericOrBracketedNumeric ) -> ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( numericOrBracketedNumeric )? ) ;
    public final ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference() throws RecognitionException {
        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return retval = new ChemicalChunkerParser.numericOrIdentifierCompoundReference_return();
        retval.start = input.LT(1);
        int numericOrIdentifierCompoundReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference422 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier423 = null;

        ChemicalChunkerParser.numericOrBracketedNumeric_return numericOrBracketedNumeric424 = null;


        RewriteRuleSubtreeStream stream_squareBracketedReference=new RewriteRuleSubtreeStream(adaptor,"rule squareBracketedReference");
        RewriteRuleSubtreeStream stream_numericOrBracketedNumeric=new RewriteRuleSubtreeStream(adaptor,"rule numericOrBracketedNumeric");
        RewriteRuleSubtreeStream stream_identifierOrBracketedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule identifierOrBracketedIdentifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:240:3: ( ( squareBracketedReference | identifierOrBracketedIdentifier | numericOrBracketedNumeric ) -> ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( numericOrBracketedNumeric )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:240:5: ( squareBracketedReference | identifierOrBracketedIdentifier | numericOrBracketedNumeric )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:240:5: ( squareBracketedReference | identifierOrBracketedIdentifier | numericOrBracketedNumeric )
            int alt128=3;
            alt128 = dfa128.predict(input);
            switch (alt128) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:240:6: squareBracketedReference
                    {
                    pushFollow(FOLLOW_squareBracketedReference_in_numericOrIdentifierCompoundReference1962_static.FOLLOW_squareBracketedReference_in_numericOrIdentifierCompoundReference1962);
                    squareBracketedReference422=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_squareBracketedReference.add(squareBracketedReference422.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:240:31: identifierOrBracketedIdentifier
                    {
                    pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_numericOrIdentifierCompoundReference1964_static.FOLLOW_identifierOrBracketedIdentifier_in_numericOrIdentifierCompoundReference1964);
                    identifierOrBracketedIdentifier423=identifierOrBracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifierOrBracketedIdentifier.add(identifierOrBracketedIdentifier423.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:240:63: numericOrBracketedNumeric
                    {
                    pushFollow(FOLLOW_numericOrBracketedNumeric_in_numericOrIdentifierCompoundReference1966_static.FOLLOW_numericOrBracketedNumeric_in_numericOrIdentifierCompoundReference1966);
                    numericOrBracketedNumeric424=numericOrBracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numericOrBracketedNumeric.add(numericOrBracketedNumeric424.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: squareBracketedReference, numericOrBracketedNumeric, identifierOrBracketedIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 240:90: -> ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( numericOrBracketedNumeric )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:240:93: ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( numericOrBracketedNumeric )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:240:115: ( squareBracketedReference )?
                if ( stream_squareBracketedReference.hasNext() ) {
                    adaptor.addChild(root_1, stream_squareBracketedReference.nextTree());

                }
                stream_squareBracketedReference.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:240:141: ( identifierOrBracketedIdentifier )?
                if ( stream_identifierOrBracketedIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_identifierOrBracketedIdentifier.nextTree());

                }
                stream_identifierOrBracketedIdentifier.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:240:174: ( numericOrBracketedNumeric )?
                if ( stream_numericOrBracketedNumeric.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericOrBracketedNumeric.nextTree());

                }
                stream_numericOrBracketedNumeric.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, numericOrIdentifierCompoundReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numericOrIdentifierCompoundReference"

    public static class squareBracketedReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "squareBracketedReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:1: squareBracketedReference : lsqb numeric rsqb ;
    public final ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference() throws RecognitionException {
        ChemicalChunkerParser.squareBracketedReference_return retval = new ChemicalChunkerParser.squareBracketedReference_return();
        retval.start = input.LT(1);
        int squareBracketedReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lsqb_return lsqb425 = null;

        ChemicalChunkerParser.numeric_return numeric426 = null;

        ChemicalChunkerParser.rsqb_return rsqb427 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:243:2: ( lsqb numeric rsqb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:243:4: lsqb numeric rsqb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lsqb_in_squareBracketedReference1992_static.FOLLOW_lsqb_in_squareBracketedReference1992);
            lsqb425=lsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb425.getTree());
            pushFollow(FOLLOW_numeric_in_squareBracketedReference1994_static.FOLLOW_numeric_in_squareBracketedReference1994);
            numeric426=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric426.getTree());
            pushFollow(FOLLOW_rsqb_in_squareBracketedReference1996_static.FOLLOW_rsqb_in_squareBracketedReference1996);
            rsqb427=rsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb427.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, squareBracketedReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "squareBracketedReference"

    public static class quantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:1: quantity : ( quantity1Node | quantity2Node ) ;
    public final ChemicalChunkerParser.quantity_return quantity() throws RecognitionException {
        ChemicalChunkerParser.quantity_return retval = new ChemicalChunkerParser.quantity_return();
        retval.start = input.LT(1);
        int quantity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity1Node_return quantity1Node428 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node429 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:11: ( ( quantity1Node | quantity2Node ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:14: ( quantity1Node | quantity2Node )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:14: ( quantity1Node | quantity2Node )
            int alt129=2;
            switch ( input.LA(1) ) {
            case 143:
                {
                alt129=1;
                }
                break;
            case 38:
            case 73:
            case 146:
                {
                alt129=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 129, 0, input);

                throw nvae;
            }

            switch (alt129) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:15: quantity1Node
                    {
                    pushFollow(FOLLOW_quantity1Node_in_quantity2007_static.FOLLOW_quantity1Node_in_quantity2007);
                    quantity1Node428=quantity1Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity1Node428.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:29: quantity2Node
                    {
                    pushFollow(FOLLOW_quantity2Node_in_quantity2009_static.FOLLOW_quantity2Node_in_quantity2009);
                    quantity2Node429=quantity2Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node429.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, quantity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity"

    public static class quantity1Node_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1Node"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:1: quantity1Node : quantity1 -> ^( QUANTITY quantity1 ) ;
    public final ChemicalChunkerParser.quantity1Node_return quantity1Node() throws RecognitionException {
        ChemicalChunkerParser.quantity1Node_return retval = new ChemicalChunkerParser.quantity1Node_return();
        retval.start = input.LT(1);
        int quantity1Node_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity1_return quantity1430 = null;


        RewriteRuleSubtreeStream stream_quantity1=new RewriteRuleSubtreeStream(adaptor,"rule quantity1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:15: ( quantity1 -> ^( QUANTITY quantity1 ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:17: quantity1
            {
            pushFollow(FOLLOW_quantity1_in_quantity1Node2018_static.FOLLOW_quantity1_in_quantity1Node2018);
            quantity1430=quantity1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_quantity1.add(quantity1430.getTree());


            // AST REWRITE
            // elements: quantity1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 247:27: -> ^( QUANTITY quantity1 )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:32: ^( QUANTITY quantity1 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(QUANTITY, "QUANTITY"), root_1);

                adaptor.addChild(root_1, stream_quantity1.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, quantity1Node_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity1Node"

    public static class quantity1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:1: quantity1 : lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb ;
    public final ChemicalChunkerParser.quantity1_return quantity1() throws RecognitionException {
        ChemicalChunkerParser.quantity1_return retval = new ChemicalChunkerParser.quantity1_return();
        retval.start = input.LT(1);
        int quantity1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb431 = null;

        ChemicalChunkerParser.measurements_return measurements432 = null;

        ChemicalChunkerParser.comma_return comma433 = null;

        ChemicalChunkerParser.measurements_return measurements434 = null;

        ChemicalChunkerParser.comma_return comma435 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase436 = null;

        ChemicalChunkerParser.stop_return stop437 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase438 = null;

        ChemicalChunkerParser.rrb_return rrb439 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:2: ( lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:4: lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_quantity12038_static.FOLLOW_lrb_in_quantity12038);
            lrb431=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb431.getTree());
            pushFollow(FOLLOW_measurements_in_quantity12040_static.FOLLOW_measurements_in_quantity12040);
            measurements432=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements432.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:21: ( comma measurements )*
            loop130:
            do {
                int alt130=2;
                switch ( input.LA(1) ) {
                case 133:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 38:
                        case 73:
                        case 146:
                            {
                            alt130=1;
                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt130) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:22: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12043_static.FOLLOW_comma_in_quantity12043);
            	    comma433=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma433.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity12046_static.FOLLOW_measurements_in_quantity12046);
            	    measurements434=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements434.getTree());

            	    }
            	    break;

            	default :
            	    break loop130;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:44: ( comma preparationphrase )*
            loop131:
            do {
                int alt131=2;
                switch ( input.LA(1) ) {
                case 133:
                    {
                    alt131=1;
                    }
                    break;

                }

                switch (alt131) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:45: comma preparationphrase
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12051_static.FOLLOW_comma_in_quantity12051);
            	    comma435=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma435.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12053_static.FOLLOW_preparationphrase_in_quantity12053);
            	    preparationphrase436=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase436.getTree());

            	    }
            	    break;

            	default :
            	    break loop131;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:71: ( stop preparationphrase )*
            loop132:
            do {
                int alt132=2;
                switch ( input.LA(1) ) {
                case 137:
                    {
                    alt132=1;
                    }
                    break;

                }

                switch (alt132) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:72: stop preparationphrase
            	    {
            	    pushFollow(FOLLOW_stop_in_quantity12058_static.FOLLOW_stop_in_quantity12058);
            	    stop437=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop437.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12060_static.FOLLOW_preparationphrase_in_quantity12060);
            	    preparationphrase438=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase438.getTree());

            	    }
            	    break;

            	default :
            	    break loop132;
                }
            } while (true);

            pushFollow(FOLLOW_rrb_in_quantity12065_static.FOLLOW_rrb_in_quantity12065);
            rrb439=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb439.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, quantity1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity1"

    public static class quantity2Node_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2Node"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:252:1: quantity2Node : quantity2 -> ^( QUANTITY quantity2 ) ;
    public final ChemicalChunkerParser.quantity2Node_return quantity2Node() throws RecognitionException {
        ChemicalChunkerParser.quantity2Node_return retval = new ChemicalChunkerParser.quantity2Node_return();
        retval.start = input.LT(1);
        int quantity2Node_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity2_return quantity2440 = null;


        RewriteRuleSubtreeStream stream_quantity2=new RewriteRuleSubtreeStream(adaptor,"rule quantity2");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:252:15: ( quantity2 -> ^( QUANTITY quantity2 ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:252:17: quantity2
            {
            pushFollow(FOLLOW_quantity2_in_quantity2Node2073_static.FOLLOW_quantity2_in_quantity2Node2073);
            quantity2440=quantity2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_quantity2.add(quantity2440.getTree());


            // AST REWRITE
            // elements: quantity2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 252:27: -> ^( QUANTITY quantity2 )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:252:32: ^( QUANTITY quantity2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(QUANTITY, "QUANTITY"), root_1);

                adaptor.addChild(root_1, stream_quantity2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, quantity2Node_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity2Node"

    public static class quantity2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:1: quantity2 : measurements ( comma measurements )* ;
    public final ChemicalChunkerParser.quantity2_return quantity2() throws RecognitionException {
        ChemicalChunkerParser.quantity2_return retval = new ChemicalChunkerParser.quantity2_return();
        retval.start = input.LT(1);
        int quantity2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements441 = null;

        ChemicalChunkerParser.comma_return comma442 = null;

        ChemicalChunkerParser.measurements_return measurements443 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:255:2: ( measurements ( comma measurements )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:255:5: measurements ( comma measurements )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_measurements_in_quantity22094_static.FOLLOW_measurements_in_quantity22094);
            measurements441=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements441.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:255:18: ( comma measurements )*
            loop133:
            do {
                int alt133=2;
                alt133 = dfa133.predict(input);
                switch (alt133) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:255:19: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity22097_static.FOLLOW_comma_in_quantity22097);
            	    comma442=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma442.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity22100_static.FOLLOW_measurements_in_quantity22100);
            	    measurements443=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements443.getTree());

            	    }
            	    break;

            	default :
            	    break loop133;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, quantity2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity2"

    public static class measurements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurements"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:1: measurements : ( cd nn )? ( multiple | measurementtypes ) ( dt )? ;
    public final ChemicalChunkerParser.measurements_return measurements() throws RecognitionException {
        ChemicalChunkerParser.measurements_return retval = new ChemicalChunkerParser.measurements_return();
        retval.start = input.LT(1);
        int measurements_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd444 = null;

        ChemicalChunkerParser.nn_return nn445 = null;

        ChemicalChunkerParser.multiple_return multiple446 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes447 = null;

        ChemicalChunkerParser.dt_return dt448 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:258:2: ( ( cd nn )? ( multiple | measurementtypes ) ( dt )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:258:3: ( cd nn )? ( multiple | measurementtypes ) ( dt )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:258:3: ( cd nn )?
            int alt134=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 156:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 38:
                                                case 73:
                                                case 146:
                                                    {
                                                    alt134=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt134) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:258:4: cd nn
                    {
                    pushFollow(FOLLOW_cd_in_measurements2113_static.FOLLOW_cd_in_measurements2113);
                    cd444=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd444.getTree());
                    pushFollow(FOLLOW_nn_in_measurements2115_static.FOLLOW_nn_in_measurements2115);
                    nn445=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn445.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:258:12: ( multiple | measurementtypes )
            int alt135=2;
            switch ( input.LA(1) ) {
            case 146:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 65:
                    case 66:
                    case 67:
                    case 69:
                    case 70:
                    case 138:
                    case 146:
                    case 156:
                        {
                        alt135=2;
                        }
                        break;
                    case 44:
                        {
                        alt135=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 135, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 1, input);

                    throw nvae;
                }

                }
                break;
            case 38:
            case 73:
                {
                alt135=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);

                throw nvae;
            }

            switch (alt135) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:258:13: multiple
                    {
                    pushFollow(FOLLOW_multiple_in_measurements2120_static.FOLLOW_multiple_in_measurements2120);
                    multiple446=multiple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiple446.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:258:22: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_measurements2122_static.FOLLOW_measurementtypes_in_measurements2122);
                    measurementtypes447=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurementtypes447.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:258:40: ( dt )?
            int alt136=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA136_3 = input.LA(3);

                            if ( (synpred360_ChemicalChunker()) ) {
                                alt136=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt136) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_measurements2125_static.FOLLOW_dt_in_measurements2125);
                    dt448=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt448.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, measurements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "measurements"

    public static class multiple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiple"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:1: multiple : cd cdunicode ( measurementtypes )? -> ^( MULTIPLE cd cdunicode ( measurementtypes )? ) ;
    public final ChemicalChunkerParser.multiple_return multiple() throws RecognitionException {
        ChemicalChunkerParser.multiple_return retval = new ChemicalChunkerParser.multiple_return();
        retval.start = input.LT(1);
        int multiple_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd449 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode450 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes451 = null;


        RewriteRuleSubtreeStream stream_cdunicode=new RewriteRuleSubtreeStream(adaptor,"rule cdunicode");
        RewriteRuleSubtreeStream stream_measurementtypes=new RewriteRuleSubtreeStream(adaptor,"rule measurementtypes");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:10: ( cd cdunicode ( measurementtypes )? -> ^( MULTIPLE cd cdunicode ( measurementtypes )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:12: cd cdunicode ( measurementtypes )?
            {
            pushFollow(FOLLOW_cd_in_multiple2133_static.FOLLOW_cd_in_multiple2133);
            cd449=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd449.getTree());
            pushFollow(FOLLOW_cdunicode_in_multiple2135_static.FOLLOW_cdunicode_in_multiple2135);
            cdunicode450=cdunicode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cdunicode.add(cdunicode450.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:25: ( measurementtypes )?
            int alt137=2;
            alt137 = dfa137.predict(input);
            switch (alt137) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_multiple2137_static.FOLLOW_measurementtypes_in_multiple2137);
                    measurementtypes451=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_measurementtypes.add(measurementtypes451.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: cdunicode, cd, measurementtypes
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 259:43: -> ^( MULTIPLE cd cdunicode ( measurementtypes )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:46: ^( MULTIPLE cd cdunicode ( measurementtypes )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MULTIPLE, "MULTIPLE"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_cdunicode.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:72: ( measurementtypes )?
                if ( stream_measurementtypes.hasNext() ) {
                    adaptor.addChild(root_1, stream_measurementtypes.nextTree());

                }
                stream_measurementtypes.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, multiple_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiple"

    public static class measurementtypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurementtypes"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:1: measurementtypes : ( molar | amount | mass | volume | logHydrogenActivity | equivalent | yield | percent );
    public final ChemicalChunkerParser.measurementtypes_return measurementtypes() throws RecognitionException {
        ChemicalChunkerParser.measurementtypes_return retval = new ChemicalChunkerParser.measurementtypes_return();
        retval.start = input.LT(1);
        int measurementtypes_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.molar_return molar452 = null;

        ChemicalChunkerParser.amount_return amount453 = null;

        ChemicalChunkerParser.mass_return mass454 = null;

        ChemicalChunkerParser.volume_return volume455 = null;

        ChemicalChunkerParser.logHydrogenActivity_return logHydrogenActivity456 = null;

        ChemicalChunkerParser.equivalent_return equivalent457 = null;

        ChemicalChunkerParser.yield_return yield458 = null;

        ChemicalChunkerParser.percent_return percent459 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:2: ( molar | amount | mass | volume | logHydrogenActivity | equivalent | yield | percent )
            int alt138=8;
            alt138 = dfa138.predict(input);
            switch (alt138) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:4: molar
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molar_in_measurementtypes2162_static.FOLLOW_molar_in_measurementtypes2162);
                    molar452=molar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molar452.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:10: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_amount_in_measurementtypes2164_static.FOLLOW_amount_in_measurementtypes2164);
                    amount453=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount453.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:17: mass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mass_in_measurementtypes2166_static.FOLLOW_mass_in_measurementtypes2166);
                    mass454=mass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mass454.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:22: volume
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_volume_in_measurementtypes2168_static.FOLLOW_volume_in_measurementtypes2168);
                    volume455=volume();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, volume455.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:29: logHydrogenActivity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_logHydrogenActivity_in_measurementtypes2170_static.FOLLOW_logHydrogenActivity_in_measurementtypes2170);
                    logHydrogenActivity456=logHydrogenActivity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, logHydrogenActivity456.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:49: equivalent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_equivalent_in_measurementtypes2172_static.FOLLOW_equivalent_in_measurementtypes2172);
                    equivalent457=equivalent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, equivalent457.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:60: yield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_yield_in_measurementtypes2174_static.FOLLOW_yield_in_measurementtypes2174);
                    yield458=yield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, yield458.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:66: percent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_percent_in_measurementtypes2176_static.FOLLOW_percent_in_measurementtypes2176);
                    percent459=percent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percent459.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, measurementtypes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "measurementtypes"

    public static class molar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molar"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:1: molar : ( cd )+ nnmolar -> ^( MOLAR ( cd )+ nnmolar ) ;
    public final ChemicalChunkerParser.molar_return molar() throws RecognitionException {
        ChemicalChunkerParser.molar_return retval = new ChemicalChunkerParser.molar_return();
        retval.start = input.LT(1);
        int molar_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd460 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar461 = null;


        RewriteRuleSubtreeStream stream_nnmolar=new RewriteRuleSubtreeStream(adaptor,"rule nnmolar");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:7: ( ( cd )+ nnmolar -> ^( MOLAR ( cd )+ nnmolar ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:9: ( cd )+ nnmolar
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:9: ( cd )+
            int cnt139=0;
            loop139:
            do {
                int alt139=2;
                switch ( input.LA(1) ) {
                case 146:
                    {
                    alt139=1;
                    }
                    break;

                }

                switch (alt139) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_molar2184_static.FOLLOW_cd_in_molar2184);
            	    cd460=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd460.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt139 >= 1 ) break loop139;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(139, input);
                        throw eee;
                }
                cnt139++;
            } while (true);

            pushFollow(FOLLOW_nnmolar_in_molar2187_static.FOLLOW_nnmolar_in_molar2187);
            nnmolar461=nnmolar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmolar.add(nnmolar461.getTree());


            // AST REWRITE
            // elements: cd, nnmolar
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 263:21: -> ^( MOLAR ( cd )+ nnmolar )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:24: ^( MOLAR ( cd )+ nnmolar )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MOLAR, "MOLAR"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnmolar.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, molar_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "molar"

    public static class amount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "amount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:1: amount : ( cd )+ nnamount -> ^( AMOUNT ( cd )+ nnamount ) ;
    public final ChemicalChunkerParser.amount_return amount() throws RecognitionException {
        ChemicalChunkerParser.amount_return retval = new ChemicalChunkerParser.amount_return();
        retval.start = input.LT(1);
        int amount_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd462 = null;

        ChemicalChunkerParser.nnamount_return nnamount463 = null;


        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        RewriteRuleSubtreeStream stream_nnamount=new RewriteRuleSubtreeStream(adaptor,"rule nnamount");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:8: ( ( cd )+ nnamount -> ^( AMOUNT ( cd )+ nnamount ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:10: ( cd )+ nnamount
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:10: ( cd )+
            int cnt140=0;
            loop140:
            do {
                int alt140=2;
                switch ( input.LA(1) ) {
                case 146:
                    {
                    alt140=1;
                    }
                    break;

                }

                switch (alt140) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_amount2208_static.FOLLOW_cd_in_amount2208);
            	    cd462=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd462.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt140 >= 1 ) break loop140;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(140, input);
                        throw eee;
                }
                cnt140++;
            } while (true);

            pushFollow(FOLLOW_nnamount_in_amount2211_static.FOLLOW_nnamount_in_amount2211);
            nnamount463=nnamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnamount.add(nnamount463.getTree());


            // AST REWRITE
            // elements: nnamount, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 264:23: -> ^( AMOUNT ( cd )+ nnamount )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:26: ^( AMOUNT ( cd )+ nnamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AMOUNT, "AMOUNT"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, amount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "amount"

    public static class mass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:1: mass : ( cd )+ nnmass -> ^( MASS ( cd )+ nnmass ) ;
    public final ChemicalChunkerParser.mass_return mass() throws RecognitionException {
        ChemicalChunkerParser.mass_return retval = new ChemicalChunkerParser.mass_return();
        retval.start = input.LT(1);
        int mass_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd464 = null;

        ChemicalChunkerParser.nnmass_return nnmass465 = null;


        RewriteRuleSubtreeStream stream_nnmass=new RewriteRuleSubtreeStream(adaptor,"rule nnmass");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:6: ( ( cd )+ nnmass -> ^( MASS ( cd )+ nnmass ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:8: ( cd )+ nnmass
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:8: ( cd )+
            int cnt141=0;
            loop141:
            do {
                int alt141=2;
                switch ( input.LA(1) ) {
                case 146:
                    {
                    alt141=1;
                    }
                    break;

                }

                switch (alt141) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mass2232_static.FOLLOW_cd_in_mass2232);
            	    cd464=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd464.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt141 >= 1 ) break loop141;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(141, input);
                        throw eee;
                }
                cnt141++;
            } while (true);

            pushFollow(FOLLOW_nnmass_in_mass2235_static.FOLLOW_nnmass_in_mass2235);
            nnmass465=nnmass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmass.add(nnmass465.getTree());


            // AST REWRITE
            // elements: nnmass, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 265:18: -> ^( MASS ( cd )+ nnmass )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:21: ^( MASS ( cd )+ nnmass )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MASS, "MASS"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnmass.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, mass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mass"

    public static class volume_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "volume"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:1: volume : ( cd )+ nnvol -> ^( VOLUME ( cd )+ nnvol ) ;
    public final ChemicalChunkerParser.volume_return volume() throws RecognitionException {
        ChemicalChunkerParser.volume_return retval = new ChemicalChunkerParser.volume_return();
        retval.start = input.LT(1);
        int volume_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd466 = null;

        ChemicalChunkerParser.nnvol_return nnvol467 = null;


        RewriteRuleSubtreeStream stream_nnvol=new RewriteRuleSubtreeStream(adaptor,"rule nnvol");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:8: ( ( cd )+ nnvol -> ^( VOLUME ( cd )+ nnvol ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:10: ( cd )+ nnvol
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:10: ( cd )+
            int cnt142=0;
            loop142:
            do {
                int alt142=2;
                switch ( input.LA(1) ) {
                case 146:
                    {
                    alt142=1;
                    }
                    break;

                }

                switch (alt142) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_volume2255_static.FOLLOW_cd_in_volume2255);
            	    cd466=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd466.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt142 >= 1 ) break loop142;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(142, input);
                        throw eee;
                }
                cnt142++;
            } while (true);

            pushFollow(FOLLOW_nnvol_in_volume2258_static.FOLLOW_nnvol_in_volume2258);
            nnvol467=nnvol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnvol.add(nnvol467.getTree());


            // AST REWRITE
            // elements: nnvol, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 266:20: -> ^( VOLUME ( cd )+ nnvol )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:23: ^( VOLUME ( cd )+ nnvol )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VOLUME, "VOLUME"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnvol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, volume_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "volume"

    public static class logHydrogenActivity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logHydrogenActivity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:1: logHydrogenActivity : nnph ( sym )? cd -> ^( PH nnph ( sym )? cd ) ;
    public final ChemicalChunkerParser.logHydrogenActivity_return logHydrogenActivity() throws RecognitionException {
        ChemicalChunkerParser.logHydrogenActivity_return retval = new ChemicalChunkerParser.logHydrogenActivity_return();
        retval.start = input.LT(1);
        int logHydrogenActivity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnph_return nnph468 = null;

        ChemicalChunkerParser.sym_return sym469 = null;

        ChemicalChunkerParser.cd_return cd470 = null;


        RewriteRuleSubtreeStream stream_nnph=new RewriteRuleSubtreeStream(adaptor,"rule nnph");
        RewriteRuleSubtreeStream stream_sym=new RewriteRuleSubtreeStream(adaptor,"rule sym");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:21: ( nnph ( sym )? cd -> ^( PH nnph ( sym )? cd ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:23: nnph ( sym )? cd
            {
            pushFollow(FOLLOW_nnph_in_logHydrogenActivity2279_static.FOLLOW_nnph_in_logHydrogenActivity2279);
            nnph468=nnph();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnph.add(nnph468.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:28: ( sym )?
            int alt143=2;
            switch ( input.LA(1) ) {
                case 168:
                    {
                    alt143=1;
                    }
                    break;
            }

            switch (alt143) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: sym
                    {
                    pushFollow(FOLLOW_sym_in_logHydrogenActivity2281_static.FOLLOW_sym_in_logHydrogenActivity2281);
                    sym469=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_sym.add(sym469.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_cd_in_logHydrogenActivity2284_static.FOLLOW_cd_in_logHydrogenActivity2284);
            cd470=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd470.getTree());


            // AST REWRITE
            // elements: cd, sym, nnph
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 267:36: -> ^( PH nnph ( sym )? cd )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:39: ^( PH nnph ( sym )? cd )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PH, "PH"), root_1);

                adaptor.addChild(root_1, stream_nnph.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:49: ( sym )?
                if ( stream_sym.hasNext() ) {
                    adaptor.addChild(root_1, stream_sym.nextTree());

                }
                stream_sym.reset();
                adaptor.addChild(root_1, stream_cd.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, logHydrogenActivity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logHydrogenActivity"

    public static class equivalent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equivalent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:1: equivalent : ( cd )+ nneq -> ^( EQUIVALENT ( cd )+ nneq ) ;
    public final ChemicalChunkerParser.equivalent_return equivalent() throws RecognitionException {
        ChemicalChunkerParser.equivalent_return retval = new ChemicalChunkerParser.equivalent_return();
        retval.start = input.LT(1);
        int equivalent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd471 = null;

        ChemicalChunkerParser.nneq_return nneq472 = null;


        RewriteRuleSubtreeStream stream_nneq=new RewriteRuleSubtreeStream(adaptor,"rule nneq");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:11: ( ( cd )+ nneq -> ^( EQUIVALENT ( cd )+ nneq ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:13: ( cd )+ nneq
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:13: ( cd )+
            int cnt144=0;
            loop144:
            do {
                int alt144=2;
                switch ( input.LA(1) ) {
                case 146:
                    {
                    alt144=1;
                    }
                    break;

                }

                switch (alt144) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_equivalent2304_static.FOLLOW_cd_in_equivalent2304);
            	    cd471=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd471.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt144 >= 1 ) break loop144;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(144, input);
                        throw eee;
                }
                cnt144++;
            } while (true);

            pushFollow(FOLLOW_nneq_in_equivalent2307_static.FOLLOW_nneq_in_equivalent2307);
            nneq472=nneq();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nneq.add(nneq472.getTree());


            // AST REWRITE
            // elements: cd, nneq
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 268:22: -> ^( EQUIVALENT ( cd )+ nneq )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:25: ^( EQUIVALENT ( cd )+ nneq )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EQUIVALENT, "EQUIVALENT"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nneq.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, equivalent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equivalent"

    public static class yield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:1: yield : percent nnyield -> ^( YIELD percent nnyield ) ;
    public final ChemicalChunkerParser.yield_return yield() throws RecognitionException {
        ChemicalChunkerParser.yield_return retval = new ChemicalChunkerParser.yield_return();
        retval.start = input.LT(1);
        int yield_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.percent_return percent473 = null;

        ChemicalChunkerParser.nnyield_return nnyield474 = null;


        RewriteRuleSubtreeStream stream_percent=new RewriteRuleSubtreeStream(adaptor,"rule percent");
        RewriteRuleSubtreeStream stream_nnyield=new RewriteRuleSubtreeStream(adaptor,"rule nnyield");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:6: ( percent nnyield -> ^( YIELD percent nnyield ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:8: percent nnyield
            {
            pushFollow(FOLLOW_percent_in_yield2325_static.FOLLOW_percent_in_yield2325);
            percent473=percent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_percent.add(percent473.getTree());
            pushFollow(FOLLOW_nnyield_in_yield2327_static.FOLLOW_nnyield_in_yield2327);
            nnyield474=nnyield();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnyield.add(nnyield474.getTree());


            // AST REWRITE
            // elements: percent, nnyield
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 269:24: -> ^( YIELD percent nnyield )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:27: ^( YIELD percent nnyield )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(YIELD, "YIELD"), root_1);

                adaptor.addChild(root_1, stream_percent.nextTree());
                adaptor.addChild(root_1, stream_nnyield.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, yield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "yield"

    public static class percent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:1: percent : numeric ( nn )? nnpercent -> ^( PERCENT numeric ( nn )? nnpercent ) ;
    public final ChemicalChunkerParser.percent_return percent() throws RecognitionException {
        ChemicalChunkerParser.percent_return retval = new ChemicalChunkerParser.percent_return();
        retval.start = input.LT(1);
        int percent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric475 = null;

        ChemicalChunkerParser.nn_return nn476 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent477 = null;


        RewriteRuleSubtreeStream stream_numeric=new RewriteRuleSubtreeStream(adaptor,"rule numeric");
        RewriteRuleSubtreeStream stream_nnpercent=new RewriteRuleSubtreeStream(adaptor,"rule nnpercent");
        RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:9: ( numeric ( nn )? nnpercent -> ^( PERCENT numeric ( nn )? nnpercent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:11: numeric ( nn )? nnpercent
            {
            pushFollow(FOLLOW_numeric_in_percent2345_static.FOLLOW_numeric_in_percent2345);
            numeric475=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numeric.add(numeric475.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:19: ( nn )?
            int alt145=2;
            switch ( input.LA(1) ) {
                case 156:
                    {
                    alt145=1;
                    }
                    break;
            }

            switch (alt145) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nn
                    {
                    pushFollow(FOLLOW_nn_in_percent2347_static.FOLLOW_nn_in_percent2347);
                    nn476=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nn.add(nn476.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnpercent_in_percent2350_static.FOLLOW_nnpercent_in_percent2350);
            nnpercent477=nnpercent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnpercent.add(nnpercent477.getTree());


            // AST REWRITE
            // elements: nn, nnpercent, numeric
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 270:33: -> ^( PERCENT numeric ( nn )? nnpercent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:36: ^( PERCENT numeric ( nn )? nnpercent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PERCENT, "PERCENT"), root_1);

                adaptor.addChild(root_1, stream_numeric.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:56: ( nn )?
                if ( stream_nn.hasNext() ) {
                    adaptor.addChild(root_1, stream_nn.nextTree());

                }
                stream_nn.reset();
                adaptor.addChild(root_1, stream_nnpercent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, percent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "percent"

    public static class mixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixture"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:272:1: mixture : ( mixtureRatio )? ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? ) ;
    public final ChemicalChunkerParser.mixture_return mixture() throws RecognitionException {
        ChemicalChunkerParser.mixture_return retval = new ChemicalChunkerParser.mixture_return();
        retval.start = input.LT(1);
        int mixture_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.mixtureRatio_return mixtureRatio478 = null;

        ChemicalChunkerParser.mixtureStructure3_return mixtureStructure3479 = null;

        ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2480 = null;

        ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1481 = null;


        RewriteRuleSubtreeStream stream_mixtureStructure1=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure1");
        RewriteRuleSubtreeStream stream_mixtureStructure2=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure2");
        RewriteRuleSubtreeStream stream_mixtureRatio=new RewriteRuleSubtreeStream(adaptor,"rule mixtureRatio");
        RewriteRuleSubtreeStream stream_mixtureStructure3=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure3");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:272:8: ( ( mixtureRatio )? ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:272:10: ( mixtureRatio )? ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:272:10: ( mixtureRatio )?
            int alt146=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt146=1;
                    }
                    break;
            }

            switch (alt146) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: mixtureRatio
                    {
                    pushFollow(FOLLOW_mixtureRatio_in_mixture2373_static.FOLLOW_mixtureRatio_in_mixture2373);
                    mixtureRatio478=mixtureRatio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureRatio.add(mixtureRatio478.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:272:25: ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 )
            int alt147=3;
            switch ( input.LA(1) ) {
            case 143:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 138:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 144:
                                {
                                alt147=1;
                                }
                                break;
                            case 38:
                            case 39:
                            case 40:
                            case 41:
                            case 42:
                            case 43:
                            case 45:
                            case 46:
                            case 47:
                            case 48:
                            case 49:
                            case 50:
                            case 51:
                            case 52:
                            case 53:
                            case 54:
                            case 55:
                            case 56:
                            case 57:
                            case 58:
                            case 59:
                            case 60:
                            case 61:
                            case 62:
                            case 63:
                            case 64:
                            case 66:
                            case 68:
                            case 69:
                            case 70:
                            case 71:
                            case 72:
                            case 73:
                            case 74:
                            case 75:
                            case 76:
                            case 77:
                            case 78:
                            case 79:
                            case 80:
                            case 81:
                            case 82:
                            case 83:
                            case 84:
                            case 85:
                            case 86:
                            case 87:
                            case 88:
                            case 89:
                            case 90:
                            case 91:
                            case 92:
                            case 93:
                            case 94:
                            case 95:
                            case 96:
                            case 97:
                            case 98:
                            case 99:
                            case 100:
                            case 101:
                            case 102:
                            case 103:
                            case 104:
                            case 105:
                            case 106:
                            case 107:
                            case 108:
                            case 109:
                            case 110:
                            case 111:
                            case 112:
                            case 113:
                            case 114:
                            case 115:
                            case 116:
                            case 117:
                            case 118:
                            case 119:
                            case 120:
                            case 121:
                            case 122:
                            case 123:
                            case 124:
                            case 125:
                            case 126:
                            case 127:
                            case 128:
                            case 129:
                            case 130:
                            case 132:
                            case 133:
                            case 136:
                            case 137:
                            case 138:
                            case 139:
                            case 141:
                            case 143:
                            case 146:
                            case 147:
                            case 148:
                            case 149:
                            case 150:
                            case 151:
                            case 152:
                            case 153:
                            case 154:
                            case 155:
                            case 156:
                            case 157:
                            case 158:
                            case 159:
                            case 160:
                            case 161:
                            case 162:
                            case 163:
                            case 168:
                            case 169:
                            case 171:
                            case 172:
                            case 173:
                            case 174:
                            case 175:
                            case 176:
                            case 177:
                            case 178:
                            case 179:
                            case 180:
                                {
                                alt147=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 147, 6, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 147, 4, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 66:
                    case 68:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 82:
                    case 83:
                    case 84:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 120:
                    case 121:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 130:
                    case 132:
                    case 133:
                    case 136:
                    case 137:
                    case 139:
                    case 141:
                    case 143:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 163:
                    case 168:
                    case 169:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 178:
                    case 179:
                    case 180:
                        {
                        alt147=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 147, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 147, 1, input);

                    throw nvae;
                }

                }
                break;
            case 133:
                {
                alt147=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;
            }

            switch (alt147) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:272:26: mixtureStructure3
                    {
                    pushFollow(FOLLOW_mixtureStructure3_in_mixture2378_static.FOLLOW_mixtureStructure3_in_mixture2378);
                    mixtureStructure3479=mixtureStructure3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure3.add(mixtureStructure3479.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:272:44: mixtureStructure2
                    {
                    pushFollow(FOLLOW_mixtureStructure2_in_mixture2380_static.FOLLOW_mixtureStructure2_in_mixture2380);
                    mixtureStructure2480=mixtureStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure2.add(mixtureStructure2480.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:272:62: mixtureStructure1
                    {
                    pushFollow(FOLLOW_mixtureStructure1_in_mixture2382_static.FOLLOW_mixtureStructure1_in_mixture2382);
                    mixtureStructure1481=mixtureStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure1.add(mixtureStructure1481.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: mixtureStructure2, mixtureRatio, mixtureStructure3, mixtureStructure1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 272:81: -> ^( MIXTURE ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:272:84: ^( MIXTURE ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MIXTURE, "MIXTURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:272:96: ( mixtureRatio )?
                if ( stream_mixtureRatio.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureRatio.nextTree());

                }
                stream_mixtureRatio.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:272:110: ( mixtureStructure3 )?
                if ( stream_mixtureStructure3.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure3.nextTree());

                }
                stream_mixtureStructure3.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:272:129: ( mixtureStructure2 )?
                if ( stream_mixtureStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure2.nextTree());

                }
                stream_mixtureStructure2.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:272:148: ( mixtureStructure1 )?
                if ( stream_mixtureStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure1.nextTree());

                }
                stream_mixtureStructure1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, mixture_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixture"

    public static class mixtureStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:1: mixtureStructure2 : comma lrb mixtureContent rrb comma ;
    public final ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure2_return retval = new ChemicalChunkerParser.mixtureStructure2_return();
        retval.start = input.LT(1);
        int mixtureStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma482 = null;

        ChemicalChunkerParser.lrb_return lrb483 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent484 = null;

        ChemicalChunkerParser.rrb_return rrb485 = null;

        ChemicalChunkerParser.comma_return comma486 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:18: ( comma lrb mixtureContent rrb comma )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:20: comma lrb mixtureContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_mixtureStructure22409_static.FOLLOW_comma_in_mixtureStructure22409);
            comma482=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma482.getTree());
            pushFollow(FOLLOW_lrb_in_mixtureStructure22411_static.FOLLOW_lrb_in_mixtureStructure22411);
            lrb483=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb483.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure22413_static.FOLLOW_mixtureContent_in_mixtureStructure22413);
            mixtureContent484=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent484.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure22415_static.FOLLOW_rrb_in_mixtureStructure22415);
            rrb485=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb485.getTree());
            pushFollow(FOLLOW_comma_in_mixtureStructure22417_static.FOLLOW_comma_in_mixtureStructure22417);
            comma486=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma486.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, mixtureStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure2"

    public static class mixtureStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:1: mixtureStructure1 : lrb mixtureContent rrb ;
    public final ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure1_return retval = new ChemicalChunkerParser.mixtureStructure1_return();
        retval.start = input.LT(1);
        int mixtureStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb487 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent488 = null;

        ChemicalChunkerParser.rrb_return rrb489 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:18: ( lrb mixtureContent rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:20: lrb mixtureContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_mixtureStructure12423_static.FOLLOW_lrb_in_mixtureStructure12423);
            lrb487=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb487.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure12425_static.FOLLOW_mixtureContent_in_mixtureStructure12425);
            mixtureContent488=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent488.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure12427_static.FOLLOW_rrb_in_mixtureStructure12427);
            rrb489=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb489.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, mixtureStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure1"

    public static class mixtureStructure3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:275:1: mixtureStructure3 : lrb nnpercent rrb ;
    public final ChemicalChunkerParser.mixtureStructure3_return mixtureStructure3() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure3_return retval = new ChemicalChunkerParser.mixtureStructure3_return();
        retval.start = input.LT(1);
        int mixtureStructure3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb490 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent491 = null;

        ChemicalChunkerParser.rrb_return rrb492 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:2: ( lrb nnpercent rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:4: lrb nnpercent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_mixtureStructure32435_static.FOLLOW_lrb_in_mixtureStructure32435);
            lrb490=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb490.getTree());
            pushFollow(FOLLOW_nnpercent_in_mixtureStructure32438_static.FOLLOW_nnpercent_in_mixtureStructure32438);
            nnpercent491=nnpercent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent491.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure32440_static.FOLLOW_rrb_in_mixtureStructure32440);
            rrb492=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb492.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, mixtureStructure3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure3"

    public static class mixtureRatio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureRatio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:1: mixtureRatio : cd colon numeric ;
    public final ChemicalChunkerParser.mixtureRatio_return mixtureRatio() throws RecognitionException {
        ChemicalChunkerParser.mixtureRatio_return retval = new ChemicalChunkerParser.mixtureRatio_return();
        retval.start = input.LT(1);
        int mixtureRatio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd493 = null;

        ChemicalChunkerParser.colon_return colon494 = null;

        ChemicalChunkerParser.numeric_return numeric495 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:2: ( cd colon numeric )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:4: cd colon numeric
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_mixtureRatio2449_static.FOLLOW_cd_in_mixtureRatio2449);
            cd493=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd493.getTree());
            pushFollow(FOLLOW_colon_in_mixtureRatio2451_static.FOLLOW_colon_in_mixtureRatio2451);
            colon494=colon();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, colon494.getTree());
            pushFollow(FOLLOW_numeric_in_mixtureRatio2453_static.FOLLOW_numeric_in_mixtureRatio2453);
            numeric495=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric495.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, mixtureRatio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureRatio"

    public static class mixtureContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:1: mixtureContent : ( fw | verb | nn | quantity2Node | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | quantity2Node | nnyield | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop )+ ;
    public final ChemicalChunkerParser.mixtureContent_return mixtureContent() throws RecognitionException {
        ChemicalChunkerParser.mixtureContent_return retval = new ChemicalChunkerParser.mixtureContent_return();
        retval.start = input.LT(1);
        int mixtureContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.fw_return fw496 = null;

        ChemicalChunkerParser.verb_return verb497 = null;

        ChemicalChunkerParser.nn_return nn498 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node499 = null;

        ChemicalChunkerParser.md_return md500 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent501 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound502 = null;

        ChemicalChunkerParser.molecule_return molecule503 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule504 = null;

        ChemicalChunkerParser.dash_return dash505 = null;

        ChemicalChunkerParser.sym_return sym506 = null;

        ChemicalChunkerParser.noun_return noun507 = null;

        ChemicalChunkerParser.inAll_return inAll508 = null;

        ChemicalChunkerParser.cd_return cd509 = null;

        ChemicalChunkerParser.comma_return comma510 = null;

        ChemicalChunkerParser.adj_return adj511 = null;

        ChemicalChunkerParser.colon_return colon512 = null;

        ChemicalChunkerParser.stop_return stop513 = null;

        ChemicalChunkerParser.minimixture_return minimixture514 = null;

        ChemicalChunkerParser.fw_return fw515 = null;

        ChemicalChunkerParser.verb_return verb516 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node517 = null;

        ChemicalChunkerParser.nnyield_return nnyield518 = null;

        ChemicalChunkerParser.md_return md519 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent520 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound521 = null;

        ChemicalChunkerParser.molecule_return molecule522 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule523 = null;

        ChemicalChunkerParser.dash_return dash524 = null;

        ChemicalChunkerParser.sym_return sym525 = null;

        ChemicalChunkerParser.noun_return noun526 = null;

        ChemicalChunkerParser.inAll_return inAll527 = null;

        ChemicalChunkerParser.cd_return cd528 = null;

        ChemicalChunkerParser.comma_return comma529 = null;

        ChemicalChunkerParser.adj_return adj530 = null;

        ChemicalChunkerParser.colon_return colon531 = null;

        ChemicalChunkerParser.stop_return stop532 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:15: ( ( fw | verb | nn | quantity2Node | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | quantity2Node | nnyield | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:19: ( fw | verb | nn | quantity2Node | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | quantity2Node | nnyield | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:19: ( fw | verb | nn | quantity2Node | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop )
            int alt148=18;
            alt148 = dfa148.predict(input);
            switch (alt148) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:20: fw
                    {
                    pushFollow(FOLLOW_fw_in_mixtureContent2462_static.FOLLOW_fw_in_mixtureContent2462);
                    fw496=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw496.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:23: verb
                    {
                    pushFollow(FOLLOW_verb_in_mixtureContent2464_static.FOLLOW_verb_in_mixtureContent2464);
                    verb497=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb497.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:28: nn
                    {
                    pushFollow(FOLLOW_nn_in_mixtureContent2466_static.FOLLOW_nn_in_mixtureContent2466);
                    nn498=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn498.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:31: quantity2Node
                    {
                    pushFollow(FOLLOW_quantity2Node_in_mixtureContent2468_static.FOLLOW_quantity2Node_in_mixtureContent2468);
                    quantity2Node499=quantity2Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node499.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:45: md
                    {
                    pushFollow(FOLLOW_md_in_mixtureContent2470_static.FOLLOW_md_in_mixtureContent2470);
                    md500=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md500.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:48: nnpercent
                    {
                    pushFollow(FOLLOW_nnpercent_in_mixtureContent2472_static.FOLLOW_nnpercent_in_mixtureContent2472);
                    nnpercent501=nnpercent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent501.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:58: oscarCompound
                    {
                    pushFollow(FOLLOW_oscarCompound_in_mixtureContent2474_static.FOLLOW_oscarCompound_in_mixtureContent2474);
                    oscarCompound502=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound502.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:72: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_mixtureContent2476_static.FOLLOW_molecule_in_mixtureContent2476);
                    molecule503=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule503.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:81: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent2478_static.FOLLOW_unnamedmolecule_in_mixtureContent2478);
                    unnamedmolecule504=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule504.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:97: dash
                    {
                    pushFollow(FOLLOW_dash_in_mixtureContent2480_static.FOLLOW_dash_in_mixtureContent2480);
                    dash505=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash505.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:102: sym
                    {
                    pushFollow(FOLLOW_sym_in_mixtureContent2482_static.FOLLOW_sym_in_mixtureContent2482);
                    sym506=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym506.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:106: noun
                    {
                    pushFollow(FOLLOW_noun_in_mixtureContent2484_static.FOLLOW_noun_in_mixtureContent2484);
                    noun507=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun507.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:111: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_mixtureContent2486_static.FOLLOW_inAll_in_mixtureContent2486);
                    inAll508=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll508.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:117: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureContent2488_static.FOLLOW_cd_in_mixtureContent2488);
                    cd509=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd509.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:120: comma
                    {
                    pushFollow(FOLLOW_comma_in_mixtureContent2490_static.FOLLOW_comma_in_mixtureContent2490);
                    comma510=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma510.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:126: adj
                    {
                    pushFollow(FOLLOW_adj_in_mixtureContent2492_static.FOLLOW_adj_in_mixtureContent2492);
                    adj511=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj511.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:130: colon
                    {
                    pushFollow(FOLLOW_colon_in_mixtureContent2494_static.FOLLOW_colon_in_mixtureContent2494);
                    colon512=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon512.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:136: stop
                    {
                    pushFollow(FOLLOW_stop_in_mixtureContent2496_static.FOLLOW_stop_in_mixtureContent2496);
                    stop513=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop513.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:142: ( minimixture | fw | verb | quantity2Node | nnyield | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop )+
            int cnt149=0;
            loop149:
            do {
                int alt149=20;
                alt149 = dfa149.predict(input);
                switch (alt149) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:143: minimixture
            	    {
            	    pushFollow(FOLLOW_minimixture_in_mixtureContent2500_static.FOLLOW_minimixture_in_mixtureContent2500);
            	    minimixture514=minimixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, minimixture514.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:155: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_mixtureContent2502_static.FOLLOW_fw_in_mixtureContent2502);
            	    fw515=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw515.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:158: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_mixtureContent2504_static.FOLLOW_verb_in_mixtureContent2504);
            	    verb516=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb516.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:163: quantity2Node
            	    {
            	    pushFollow(FOLLOW_quantity2Node_in_mixtureContent2506_static.FOLLOW_quantity2Node_in_mixtureContent2506);
            	    quantity2Node517=quantity2Node();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node517.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:177: nnyield
            	    {
            	    pushFollow(FOLLOW_nnyield_in_mixtureContent2508_static.FOLLOW_nnyield_in_mixtureContent2508);
            	    nnyield518=nnyield();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield518.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:185: md
            	    {
            	    pushFollow(FOLLOW_md_in_mixtureContent2510_static.FOLLOW_md_in_mixtureContent2510);
            	    md519=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md519.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:188: nnpercent
            	    {
            	    pushFollow(FOLLOW_nnpercent_in_mixtureContent2512_static.FOLLOW_nnpercent_in_mixtureContent2512);
            	    nnpercent520=nnpercent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent520.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:198: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_mixtureContent2514_static.FOLLOW_oscarCompound_in_mixtureContent2514);
            	    oscarCompound521=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound521.getTree());

            	    }
            	    break;
            	case 9 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:212: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_mixtureContent2516_static.FOLLOW_molecule_in_mixtureContent2516);
            	    molecule522=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule522.getTree());

            	    }
            	    break;
            	case 10 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:221: unnamedmolecule
            	    {
            	    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent2518_static.FOLLOW_unnamedmolecule_in_mixtureContent2518);
            	    unnamedmolecule523=unnamedmolecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule523.getTree());

            	    }
            	    break;
            	case 11 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:237: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_mixtureContent2520_static.FOLLOW_dash_in_mixtureContent2520);
            	    dash524=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash524.getTree());

            	    }
            	    break;
            	case 12 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:242: sym
            	    {
            	    pushFollow(FOLLOW_sym_in_mixtureContent2522_static.FOLLOW_sym_in_mixtureContent2522);
            	    sym525=sym();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym525.getTree());

            	    }
            	    break;
            	case 13 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:246: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_mixtureContent2524_static.FOLLOW_noun_in_mixtureContent2524);
            	    noun526=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun526.getTree());

            	    }
            	    break;
            	case 14 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:251: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_mixtureContent2526_static.FOLLOW_inAll_in_mixtureContent2526);
            	    inAll527=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll527.getTree());

            	    }
            	    break;
            	case 15 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:257: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mixtureContent2528_static.FOLLOW_cd_in_mixtureContent2528);
            	    cd528=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd528.getTree());

            	    }
            	    break;
            	case 16 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:260: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_mixtureContent2530_static.FOLLOW_comma_in_mixtureContent2530);
            	    comma529=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma529.getTree());

            	    }
            	    break;
            	case 17 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:266: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_mixtureContent2532_static.FOLLOW_adj_in_mixtureContent2532);
            	    adj530=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj530.getTree());

            	    }
            	    break;
            	case 18 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:270: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_mixtureContent2534_static.FOLLOW_colon_in_mixtureContent2534);
            	    colon531=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon531.getTree());

            	    }
            	    break;
            	case 19 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:276: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_mixtureContent2536_static.FOLLOW_stop_in_mixtureContent2536);
            	    stop532=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop532.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt149 >= 1 ) break loop149;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(149, input);
                        throw eee;
                }
                cnt149++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, mixtureContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureContent"

    public static class minimixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixture"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:1: minimixture : ( mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? ) ;
    public final ChemicalChunkerParser.minimixture_return minimixture() throws RecognitionException {
        ChemicalChunkerParser.minimixture_return retval = new ChemicalChunkerParser.minimixture_return();
        retval.start = input.LT(1);
        int minimixture_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2533 = null;

        ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1534 = null;


        RewriteRuleSubtreeStream stream_mixtureStructure1=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure1");
        RewriteRuleSubtreeStream stream_mixtureStructure2=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure2");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:12: ( ( mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:14: ( mixtureStructure2 | mixtureStructure1 )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:14: ( mixtureStructure2 | mixtureStructure1 )
            int alt150=2;
            switch ( input.LA(1) ) {
            case 133:
                {
                alt150=1;
                }
                break;
            case 143:
                {
                alt150=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);

                throw nvae;
            }

            switch (alt150) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:15: mixtureStructure2
                    {
                    pushFollow(FOLLOW_mixtureStructure2_in_minimixture2547_static.FOLLOW_mixtureStructure2_in_minimixture2547);
                    mixtureStructure2533=mixtureStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure2.add(mixtureStructure2533.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:33: mixtureStructure1
                    {
                    pushFollow(FOLLOW_mixtureStructure1_in_minimixture2549_static.FOLLOW_mixtureStructure1_in_minimixture2549);
                    mixtureStructure1534=mixtureStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure1.add(mixtureStructure1534.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: mixtureStructure2, mixtureStructure1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 282:52: -> ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:55: ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MIXTURE, "MIXTURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:66: ( mixtureStructure2 )?
                if ( stream_mixtureStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure2.nextTree());

                }
                stream_mixtureStructure2.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:85: ( mixtureStructure1 )?
                if ( stream_mixtureStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure1.nextTree());

                }
                stream_mixtureStructure1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, minimixture_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "minimixture"

    public static class procedureNode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedureNode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:284:1: procedureNode : method -> ^( PROCEDURE method ) ;
    public final ChemicalChunkerParser.procedureNode_return procedureNode() throws RecognitionException {
        ChemicalChunkerParser.procedureNode_return retval = new ChemicalChunkerParser.procedureNode_return();
        retval.start = input.LT(1);
        int procedureNode_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.method_return method535 = null;


        RewriteRuleSubtreeStream stream_method=new RewriteRuleSubtreeStream(adaptor,"rule method");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:284:14: ( method -> ^( PROCEDURE method ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:284:16: method
            {
            pushFollow(FOLLOW_method_in_procedureNode2570_static.FOLLOW_method_in_procedureNode2570);
            method535=method();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method.add(method535.getTree());


            // AST REWRITE
            // elements: method
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 284:23: -> ^( PROCEDURE method )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:284:26: ^( PROCEDURE method )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PROCEDURE, "PROCEDURE"), root_1);

                adaptor.addChild(root_1, stream_method.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, procedureNode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedureNode"

    public static class method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "method"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:1: method : ( ( nngeneral | nn )? nnmethod ( identifierOrBracketedIdentifier | numeric )? | nnexample ( identifierOrBracketedIdentifier | numeric ) );
    public final ChemicalChunkerParser.method_return method() throws RecognitionException {
        ChemicalChunkerParser.method_return retval = new ChemicalChunkerParser.method_return();
        retval.start = input.LT(1);
        int method_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral536 = null;

        ChemicalChunkerParser.nn_return nn537 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod538 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier539 = null;

        ChemicalChunkerParser.numeric_return numeric540 = null;

        ChemicalChunkerParser.nnexample_return nnexample541 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier542 = null;

        ChemicalChunkerParser.numeric_return numeric543 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:7: ( ( nngeneral | nn )? nnmethod ( identifierOrBracketedIdentifier | numeric )? | nnexample ( identifierOrBracketedIdentifier | numeric ) )
            int alt154=2;
            switch ( input.LA(1) ) {
            case 75:
            case 76:
            case 156:
                {
                alt154=1;
                }
                break;
            case 83:
                {
                alt154=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 154, 0, input);

                throw nvae;
            }

            switch (alt154) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:5: ( nngeneral | nn )? nnmethod ( identifierOrBracketedIdentifier | numeric )?
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:5: ( nngeneral | nn )?
                    int alt151=3;
                    switch ( input.LA(1) ) {
                        case 75:
                            {
                            alt151=1;
                            }
                            break;
                        case 156:
                            {
                            alt151=2;
                            }
                            break;
                    }

                    switch (alt151) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:6: nngeneral
                            {
                            pushFollow(FOLLOW_nngeneral_in_method2590_static.FOLLOW_nngeneral_in_method2590);
                            nngeneral536=nngeneral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral536.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:16: nn
                            {
                            pushFollow(FOLLOW_nn_in_method2592_static.FOLLOW_nn_in_method2592);
                            nn537=nn();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nn537.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_nnmethod_in_method2596_static.FOLLOW_nnmethod_in_method2596);
                    nnmethod538=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod538.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:30: ( identifierOrBracketedIdentifier | numeric )?
                    int alt152=3;
                    alt152 = dfa152.predict(input);
                    switch (alt152) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:31: identifierOrBracketedIdentifier
                            {
                            pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_method2599_static.FOLLOW_identifierOrBracketedIdentifier_in_method2599);
                            identifierOrBracketedIdentifier539=identifierOrBracketedIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierOrBracketedIdentifier539.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:63: numeric
                            {
                            pushFollow(FOLLOW_numeric_in_method2601_static.FOLLOW_numeric_in_method2601);
                            numeric540=numeric();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric540.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:75: nnexample ( identifierOrBracketedIdentifier | numeric )
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnexample_in_method2607_static.FOLLOW_nnexample_in_method2607);
                    nnexample541=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample541.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:85: ( identifierOrBracketedIdentifier | numeric )
                    int alt153=2;
                    switch ( input.LA(1) ) {
                    case 146:
                        {
                        switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                            case 141:
                                {
                                switch ( input.LA(4) ) {
                                case TOKEN:
                                    {
                                    int LA153_6 = input.LA(5);

                                    if ( (synpred421_ChemicalChunker()) ) {
                                        alt153=1;
                                    }
                                    else if ( (true) ) {
                                        alt153=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 153, 6, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 153, 5, input);

                                    throw nvae;
                                }

                                }
                                break;
                            case EOF:
                            case 38:
                            case 39:
                            case 40:
                            case 41:
                            case 42:
                            case 43:
                            case 44:
                            case 45:
                            case 46:
                            case 47:
                            case 48:
                            case 49:
                            case 50:
                            case 51:
                            case 52:
                            case 53:
                            case 54:
                            case 55:
                            case 56:
                            case 57:
                            case 58:
                            case 59:
                            case 60:
                            case 61:
                            case 62:
                            case 63:
                            case 64:
                            case 65:
                            case 66:
                            case 67:
                            case 68:
                            case 69:
                            case 70:
                            case 71:
                            case 72:
                            case 73:
                            case 74:
                            case 75:
                            case 76:
                            case 77:
                            case 78:
                            case 79:
                            case 80:
                            case 81:
                            case 82:
                            case 83:
                            case 84:
                            case 85:
                            case 86:
                            case 87:
                            case 88:
                            case 89:
                            case 90:
                            case 91:
                            case 92:
                            case 93:
                            case 94:
                            case 95:
                            case 96:
                            case 97:
                            case 98:
                            case 99:
                            case 100:
                            case 101:
                            case 102:
                            case 103:
                            case 104:
                            case 105:
                            case 106:
                            case 107:
                            case 108:
                            case 109:
                            case 110:
                            case 111:
                            case 112:
                            case 113:
                            case 114:
                            case 115:
                            case 116:
                            case 117:
                            case 118:
                            case 119:
                            case 120:
                            case 121:
                            case 122:
                            case 123:
                            case 124:
                            case 125:
                            case 126:
                            case 127:
                            case 128:
                            case 129:
                            case 130:
                            case 131:
                            case 132:
                            case 133:
                            case 134:
                            case 135:
                            case 136:
                            case 137:
                            case 138:
                            case 139:
                            case 140:
                            case 142:
                            case 143:
                            case 144:
                            case 145:
                            case 146:
                            case 147:
                            case 148:
                            case 149:
                            case 150:
                            case 151:
                            case 152:
                            case 153:
                            case 154:
                            case 155:
                            case 156:
                            case 157:
                            case 158:
                            case 159:
                            case 160:
                            case 161:
                            case 162:
                            case 163:
                            case 164:
                            case 165:
                            case 166:
                            case 167:
                            case 168:
                            case 169:
                            case 170:
                            case 171:
                            case 172:
                            case 173:
                            case 174:
                            case 175:
                            case 176:
                            case 177:
                            case 178:
                            case 179:
                            case 180:
                                {
                                alt153=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 153, 4, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 153, 1, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 141:
                    case 143:
                        {
                        alt153=1;
                        }
                        break;
                    case 38:
                        {
                        alt153=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 153, 0, input);

                        throw nvae;
                    }

                    switch (alt153) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:86: identifierOrBracketedIdentifier
                            {
                            pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_method2610_static.FOLLOW_identifierOrBracketedIdentifier_in_method2610);
                            identifierOrBracketedIdentifier542=identifierOrBracketedIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierOrBracketedIdentifier542.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:118: numeric
                            {
                            pushFollow(FOLLOW_numeric_in_method2612_static.FOLLOW_numeric_in_method2612);
                            numeric543=numeric();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric543.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, method_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "method"

    public static class referenceToExampleCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "referenceToExampleCompound"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:1: referenceToExampleCompound : nnexample ( identifierOrBracketedIdentifier | numeric ) -> ^( REFERENCETOCOMPOUND nnexample ( identifierOrBracketedIdentifier )? ( numeric )? ) ;
    public final ChemicalChunkerParser.referenceToExampleCompound_return referenceToExampleCompound() throws RecognitionException {
        ChemicalChunkerParser.referenceToExampleCompound_return retval = new ChemicalChunkerParser.referenceToExampleCompound_return();
        retval.start = input.LT(1);
        int referenceToExampleCompound_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnexample_return nnexample544 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier545 = null;

        ChemicalChunkerParser.numeric_return numeric546 = null;


        RewriteRuleSubtreeStream stream_numeric=new RewriteRuleSubtreeStream(adaptor,"rule numeric");
        RewriteRuleSubtreeStream stream_nnexample=new RewriteRuleSubtreeStream(adaptor,"rule nnexample");
        RewriteRuleSubtreeStream stream_identifierOrBracketedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule identifierOrBracketedIdentifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:28: ( nnexample ( identifierOrBracketedIdentifier | numeric ) -> ^( REFERENCETOCOMPOUND nnexample ( identifierOrBracketedIdentifier )? ( numeric )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:2: nnexample ( identifierOrBracketedIdentifier | numeric )
            {
            pushFollow(FOLLOW_nnexample_in_referenceToExampleCompound2623_static.FOLLOW_nnexample_in_referenceToExampleCompound2623);
            nnexample544=nnexample();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnexample.add(nnexample544.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:12: ( identifierOrBracketedIdentifier | numeric )
            int alt155=2;
            switch ( input.LA(1) ) {
            case 146:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 141:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            int LA155_6 = input.LA(5);

                            if ( (synpred422_ChemicalChunker()) ) {
                                alt155=1;
                            }
                            else if ( (true) ) {
                                alt155=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 155, 6, input);

                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 155, 5, input);

                            throw nvae;
                        }

                        }
                        break;
                    case EOF:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 68:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 82:
                    case 83:
                    case 84:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 120:
                    case 121:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 130:
                    case 131:
                    case 132:
                    case 133:
                    case 134:
                    case 135:
                    case 136:
                    case 137:
                    case 138:
                    case 139:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 163:
                    case 164:
                    case 165:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 178:
                    case 179:
                    case 180:
                        {
                        alt155=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 155, 4, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 1, input);

                    throw nvae;
                }

                }
                break;
            case 141:
            case 143:
                {
                alt155=1;
                }
                break;
            case 38:
                {
                alt155=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 155, 0, input);

                throw nvae;
            }

            switch (alt155) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:13: identifierOrBracketedIdentifier
                    {
                    pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_referenceToExampleCompound2626_static.FOLLOW_identifierOrBracketedIdentifier_in_referenceToExampleCompound2626);
                    identifierOrBracketedIdentifier545=identifierOrBracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifierOrBracketedIdentifier.add(identifierOrBracketedIdentifier545.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:45: numeric
                    {
                    pushFollow(FOLLOW_numeric_in_referenceToExampleCompound2628_static.FOLLOW_numeric_in_referenceToExampleCompound2628);
                    numeric546=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numeric.add(numeric546.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: numeric, nnexample, identifierOrBracketedIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 290:54: -> ^( REFERENCETOCOMPOUND nnexample ( identifierOrBracketedIdentifier )? ( numeric )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:57: ^( REFERENCETOCOMPOUND nnexample ( identifierOrBracketedIdentifier )? ( numeric )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                adaptor.addChild(root_1, stream_nnexample.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:89: ( identifierOrBracketedIdentifier )?
                if ( stream_identifierOrBracketedIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_identifierOrBracketedIdentifier.nextTree());

                }
                stream_identifierOrBracketedIdentifier.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:122: ( numeric )?
                if ( stream_numeric.hasNext() ) {
                    adaptor.addChild(root_1, stream_numeric.nextTree());

                }
                stream_numeric.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, referenceToExampleCompound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "referenceToExampleCompound"

    public static class advAdj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "advAdj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:1: advAdj : ( adv | adj );
    public final ChemicalChunkerParser.advAdj_return advAdj() throws RecognitionException {
        ChemicalChunkerParser.advAdj_return retval = new ChemicalChunkerParser.advAdj_return();
        retval.start = input.LT(1);
        int advAdj_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv547 = null;

        ChemicalChunkerParser.adj_return adj548 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:2: ( adv | adj )
            int alt156=2;
            switch ( input.LA(1) ) {
            case 164:
            case 165:
            case 166:
            case 167:
                {
                alt156=1;
                }
                break;
            case 39:
            case 40:
            case 45:
            case 151:
            case 152:
            case 153:
                {
                alt156=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;
            }

            switch (alt156) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:3: adv
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adv_in_advAdj2651_static.FOLLOW_adv_in_advAdj2651);
                    adv547=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv547.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:7: adj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adj_in_advAdj2653_static.FOLLOW_adj_in_advAdj2653);
                    adj548=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj548.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, advAdj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "advAdj"

    public static class range_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "range"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:1: range : numeric dash numeric ;
    public final ChemicalChunkerParser.range_return range() throws RecognitionException {
        ChemicalChunkerParser.range_return retval = new ChemicalChunkerParser.range_return();
        retval.start = input.LT(1);
        int range_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric549 = null;

        ChemicalChunkerParser.dash_return dash550 = null;

        ChemicalChunkerParser.numeric_return numeric551 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:6: ( numeric dash numeric )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:8: numeric dash numeric
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_numeric_in_range2660_static.FOLLOW_numeric_in_range2660);
            numeric549=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric549.getTree());
            pushFollow(FOLLOW_dash_in_range2662_static.FOLLOW_dash_in_range2662);
            dash550=dash();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash550.getTree());
            pushFollow(FOLLOW_numeric_in_range2664_static.FOLLOW_numeric_in_range2664);
            numeric551=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric551.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, range_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "range"

    public static class cycles_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycles"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:1: cycles : cycleStructure -> ^( CYCLES cycleStructure ) ;
    public final ChemicalChunkerParser.cycles_return cycles() throws RecognitionException {
        ChemicalChunkerParser.cycles_return retval = new ChemicalChunkerParser.cycles_return();
        retval.start = input.LT(1);
        int cycles_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cycleStructure_return cycleStructure552 = null;


        RewriteRuleSubtreeStream stream_cycleStructure=new RewriteRuleSubtreeStream(adaptor,"rule cycleStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:8: ( cycleStructure -> ^( CYCLES cycleStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:10: cycleStructure
            {
            pushFollow(FOLLOW_cycleStructure_in_cycles2671_static.FOLLOW_cycleStructure_in_cycles2671);
            cycleStructure552=cycleStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cycleStructure.add(cycleStructure552.getTree());


            // AST REWRITE
            // elements: cycleStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 296:25: -> ^( CYCLES cycleStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:28: ^( CYCLES cycleStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CYCLES, "CYCLES"), root_1);

                adaptor.addChild(root_1, stream_cycleStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, cycles_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cycles"

    public static class cycleStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycleStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:1: cycleStructure : cd ( dashNN )? nncycle ;
    public final ChemicalChunkerParser.cycleStructure_return cycleStructure() throws RecognitionException {
        ChemicalChunkerParser.cycleStructure_return retval = new ChemicalChunkerParser.cycleStructure_return();
        retval.start = input.LT(1);
        int cycleStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd553 = null;

        ChemicalChunkerParser.dashNN_return dashNN554 = null;

        ChemicalChunkerParser.nncycle_return nncycle555 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:16: ( cd ( dashNN )? nncycle )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:18: cd ( dashNN )? nncycle
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_cycleStructure2688_static.FOLLOW_cd_in_cycleStructure2688);
            cd553=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd553.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:21: ( dashNN )?
            int alt157=2;
            switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 146:
                case 151:
                case 152:
                case 153:
                case 156:
                    {
                    alt157=1;
                    }
                    break;
            }

            switch (alt157) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dashNN
                    {
                    pushFollow(FOLLOW_dashNN_in_cycleStructure2690_static.FOLLOW_dashNN_in_cycleStructure2690);
                    dashNN554=dashNN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dashNN554.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nncycle_in_cycleStructure2693_static.FOLLOW_nncycle_in_cycleStructure2693);
            nncycle555=nncycle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle555.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, cycleStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cycleStructure"

    public static class dashNN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dashNN"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:1: dashNN : ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* ;
    public final ChemicalChunkerParser.dashNN_return dashNN() throws RecognitionException {
        ChemicalChunkerParser.dashNN_return retval = new ChemicalChunkerParser.dashNN_return();
        retval.start = input.LT(1);
        int dashNN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj556 = null;

        ChemicalChunkerParser.nn_return nn557 = null;

        ChemicalChunkerParser.cd_return cd558 = null;

        ChemicalChunkerParser.dash_return dash559 = null;

        ChemicalChunkerParser.adj_return adj560 = null;

        ChemicalChunkerParser.nn_return nn561 = null;

        ChemicalChunkerParser.cd_return cd562 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:8: ( ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:10: ( adj | nn | cd ) ( dash ( adj | nn | cd ) )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:10: ( adj | nn | cd )
            int alt158=3;
            switch ( input.LA(1) ) {
            case 39:
            case 40:
            case 45:
            case 151:
            case 152:
            case 153:
                {
                alt158=1;
                }
                break;
            case 156:
                {
                alt158=2;
                }
                break;
            case 146:
                {
                alt158=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);

                throw nvae;
            }

            switch (alt158) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:11: adj
                    {
                    pushFollow(FOLLOW_adj_in_dashNN2701_static.FOLLOW_adj_in_dashNN2701);
                    adj556=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj556.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:15: nn
                    {
                    pushFollow(FOLLOW_nn_in_dashNN2703_static.FOLLOW_nn_in_dashNN2703);
                    nn557=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn557.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:18: cd
                    {
                    pushFollow(FOLLOW_cd_in_dashNN2705_static.FOLLOW_cd_in_dashNN2705);
                    cd558=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd558.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:22: ( dash ( adj | nn | cd ) )*
            loop160:
            do {
                int alt160=2;
                switch ( input.LA(1) ) {
                case 136:
                    {
                    alt160=1;
                    }
                    break;

                }

                switch (alt160) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:23: dash ( adj | nn | cd )
            	    {
            	    pushFollow(FOLLOW_dash_in_dashNN2709_static.FOLLOW_dash_in_dashNN2709);
            	    dash559=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash559.getTree());
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:28: ( adj | nn | cd )
            	    int alt159=3;
            	    switch ( input.LA(1) ) {
            	    case 39:
            	    case 40:
            	    case 45:
            	    case 151:
            	    case 152:
            	    case 153:
            	        {
            	        alt159=1;
            	        }
            	        break;
            	    case 156:
            	        {
            	        alt159=2;
            	        }
            	        break;
            	    case 146:
            	        {
            	        alt159=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 159, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt159) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:29: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dashNN2712_static.FOLLOW_adj_in_dashNN2712);
            	            adj560=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj560.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:33: nn
            	            {
            	            pushFollow(FOLLOW_nn_in_dashNN2714_static.FOLLOW_nn_in_dashNN2714);
            	            nn561=nn();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nn561.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:36: cd
            	            {
            	            pushFollow(FOLLOW_cd_in_dashNN2716_static.FOLLOW_cd_in_dashNN2716);
            	            cd562=cd();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd562.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop160;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, dashNN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dashNN"

    public static class ratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ratio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:1: ratio : ( numericratio | nounratio ) -> ^( RATIO ( numericratio )? ( nounratio )? ) ;
    public final ChemicalChunkerParser.ratio_return ratio() throws RecognitionException {
        ChemicalChunkerParser.ratio_return retval = new ChemicalChunkerParser.ratio_return();
        retval.start = input.LT(1);
        int ratio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numericratio_return numericratio563 = null;

        ChemicalChunkerParser.nounratio_return nounratio564 = null;


        RewriteRuleSubtreeStream stream_nounratio=new RewriteRuleSubtreeStream(adaptor,"rule nounratio");
        RewriteRuleSubtreeStream stream_numericratio=new RewriteRuleSubtreeStream(adaptor,"rule numericratio");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:7: ( ( numericratio | nounratio ) -> ^( RATIO ( numericratio )? ( nounratio )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:9: ( numericratio | nounratio )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:9: ( numericratio | nounratio )
            int alt161=2;
            alt161 = dfa161.predict(input);
            switch (alt161) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:10: numericratio
                    {
                    pushFollow(FOLLOW_numericratio_in_ratio2727_static.FOLLOW_numericratio_in_ratio2727);
                    numericratio563=numericratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numericratio.add(numericratio563.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:23: nounratio
                    {
                    pushFollow(FOLLOW_nounratio_in_ratio2729_static.FOLLOW_nounratio_in_ratio2729);
                    nounratio564=nounratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nounratio.add(nounratio564.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: numericratio, nounratio
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 299:34: -> ^( RATIO ( numericratio )? ( nounratio )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:37: ^( RATIO ( numericratio )? ( nounratio )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RATIO, "RATIO"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:45: ( numericratio )?
                if ( stream_numericratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericratio.nextTree());

                }
                stream_numericratio.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:59: ( nounratio )?
                if ( stream_nounratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_nounratio.nextTree());

                }
                stream_nounratio.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, ratio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ratio"

    public static class numericratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericratio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:1: numericratio : cd ( colon numeric )+ ;
    public final ChemicalChunkerParser.numericratio_return numericratio() throws RecognitionException {
        ChemicalChunkerParser.numericratio_return retval = new ChemicalChunkerParser.numericratio_return();
        retval.start = input.LT(1);
        int numericratio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd565 = null;

        ChemicalChunkerParser.colon_return colon566 = null;

        ChemicalChunkerParser.numeric_return numeric567 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:14: ( cd ( colon numeric )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:17: cd ( colon numeric )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_numericratio2752_static.FOLLOW_cd_in_numericratio2752);
            cd565=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd565.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:20: ( colon numeric )+
            int cnt162=0;
            loop162:
            do {
                int alt162=2;
                switch ( input.LA(1) ) {
                case 132:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 146:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA162_6 = input.LA(5);

                                if ( (synpred431_ChemicalChunker()) ) {
                                    alt162=1;
                                }


                                }
                                break;

                            }

                            }
                            break;
                        case 38:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA162_7 = input.LA(5);

                                if ( (synpred431_ChemicalChunker()) ) {
                                    alt162=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt162) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:21: colon numeric
            	    {
            	    pushFollow(FOLLOW_colon_in_numericratio2755_static.FOLLOW_colon_in_numericratio2755);
            	    colon566=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon566.getTree());
            	    pushFollow(FOLLOW_numeric_in_numericratio2757_static.FOLLOW_numeric_in_numericratio2757);
            	    numeric567=numeric();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric567.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt162 >= 1 ) break loop162;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(162, input);
                        throw eee;
                }
                cnt162++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, numericratio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numericratio"

    public static class nounratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounratio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:301:1: nounratio : noun ( colon noun )+ ;
    public final ChemicalChunkerParser.nounratio_return nounratio() throws RecognitionException {
        ChemicalChunkerParser.nounratio_return retval = new ChemicalChunkerParser.nounratio_return();
        retval.start = input.LT(1);
        int nounratio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.noun_return noun568 = null;

        ChemicalChunkerParser.colon_return colon569 = null;

        ChemicalChunkerParser.noun_return noun570 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:2: ( noun ( colon noun )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:5: noun ( colon noun )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_noun_in_nounratio2769_static.FOLLOW_noun_in_nounratio2769);
            noun568=noun();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, noun568.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:11: ( colon noun )+
            int cnt163=0;
            loop163:
            do {
                int alt163=2;
                switch ( input.LA(1) ) {
                case 132:
                    {
                    int LA163_2 = input.LA(2);

                    if ( (synpred432_ChemicalChunker()) ) {
                        alt163=1;
                    }


                    }
                    break;

                }

                switch (alt163) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:12: colon noun
            	    {
            	    pushFollow(FOLLOW_colon_in_nounratio2773_static.FOLLOW_colon_in_nounratio2773);
            	    colon569=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon569.getTree());
            	    pushFollow(FOLLOW_noun_in_nounratio2775_static.FOLLOW_noun_in_nounratio2775);
            	    noun570=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun570.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt163 >= 1 ) break loop163;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(163, input);
                        throw eee;
                }
                cnt163++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, nounratio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounratio"

    public static class citation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citation"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:1: citation : ( citationStructure | comma citationContent comma );
    public final ChemicalChunkerParser.citation_return citation() throws RecognitionException {
        ChemicalChunkerParser.citation_return retval = new ChemicalChunkerParser.citation_return();
        retval.start = input.LT(1);
        int citation_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citationStructure_return citationStructure571 = null;

        ChemicalChunkerParser.comma_return comma572 = null;

        ChemicalChunkerParser.citationContent_return citationContent573 = null;

        ChemicalChunkerParser.comma_return comma574 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:9: ( citationStructure | comma citationContent comma )
            int alt164=2;
            switch ( input.LA(1) ) {
            case 143:
                {
                alt164=1;
                }
                break;
            case 133:
                {
                alt164=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 164, 0, input);

                throw nvae;
            }

            switch (alt164) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:12: citationStructure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_citationStructure_in_citation2787_static.FOLLOW_citationStructure_in_citation2787);
                    citationStructure571=citationStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citationStructure571.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:30: comma citationContent comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_citation2789_static.FOLLOW_comma_in_citation2789);
                    comma572=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma572.getTree());
                    pushFollow(FOLLOW_citationContent_in_citation2791_static.FOLLOW_citationContent_in_citation2791);
                    citationContent573=citationContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citationContent573.getTree());
                    pushFollow(FOLLOW_comma_in_citation2793_static.FOLLOW_comma_in_citation2793);
                    comma574=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma574.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, citation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citation"

    public static class citationStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:1: citationStructure : citationContent -> ^( CITATION citationContent ) ;
    public final ChemicalChunkerParser.citationStructure_return citationStructure() throws RecognitionException {
        ChemicalChunkerParser.citationStructure_return retval = new ChemicalChunkerParser.citationStructure_return();
        retval.start = input.LT(1);
        int citationStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citationContent_return citationContent575 = null;


        RewriteRuleSubtreeStream stream_citationContent=new RewriteRuleSubtreeStream(adaptor,"rule citationContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:18: ( citationContent -> ^( CITATION citationContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:21: citationContent
            {
            pushFollow(FOLLOW_citationContent_in_citationStructure2801_static.FOLLOW_citationContent_in_citationStructure2801);
            citationContent575=citationContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_citationContent.add(citationContent575.getTree());


            // AST REWRITE
            // elements: citationContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 306:37: -> ^( CITATION citationContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:40: ^( CITATION citationContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CITATION, "CITATION"), root_1);

                adaptor.addChild(root_1, stream_citationContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, citationStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citationStructure"

    public static class citationContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:1: citationContent : lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb ;
    public final ChemicalChunkerParser.citationContent_return citationContent() throws RecognitionException {
        ChemicalChunkerParser.citationContent_return retval = new ChemicalChunkerParser.citationContent_return();
        retval.start = input.LT(1);
        int citationContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb576 = null;

        ChemicalChunkerParser.nnp_return nnp577 = null;

        ChemicalChunkerParser.fw_return fw578 = null;

        ChemicalChunkerParser.cd_return cd579 = null;

        ChemicalChunkerParser.conjunction_return conjunction580 = null;

        ChemicalChunkerParser.nnp_return nnp581 = null;

        ChemicalChunkerParser.fw_return fw582 = null;

        ChemicalChunkerParser.cd_return cd583 = null;

        ChemicalChunkerParser.conjunction_return conjunction584 = null;

        ChemicalChunkerParser.rrb_return rrb585 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:16: ( lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:20: lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_citationContent2817_static.FOLLOW_lrb_in_citationContent2817);
            lrb576=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb576.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:24: ( nnp | fw | cd | conjunction )
            int alt165=4;
            switch ( input.LA(1) ) {
            case 158:
                {
                alt165=1;
                }
                break;
            case 149:
                {
                alt165=2;
                }
                break;
            case 146:
                {
                alt165=3;
                }
                break;
            case 133:
            case 145:
                {
                alt165=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);

                throw nvae;
            }

            switch (alt165) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:25: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_citationContent2820_static.FOLLOW_nnp_in_citationContent2820);
                    nnp577=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp577.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:29: fw
                    {
                    pushFollow(FOLLOW_fw_in_citationContent2822_static.FOLLOW_fw_in_citationContent2822);
                    fw578=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw578.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:32: cd
                    {
                    pushFollow(FOLLOW_cd_in_citationContent2824_static.FOLLOW_cd_in_citationContent2824);
                    cd579=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd579.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:35: conjunction
                    {
                    pushFollow(FOLLOW_conjunction_in_citationContent2826_static.FOLLOW_conjunction_in_citationContent2826);
                    conjunction580=conjunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction580.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:48: ( nnp | fw | cd | conjunction )+
            int cnt166=0;
            loop166:
            do {
                int alt166=5;
                switch ( input.LA(1) ) {
                case 158:
                    {
                    alt166=1;
                    }
                    break;
                case 149:
                    {
                    alt166=2;
                    }
                    break;
                case 146:
                    {
                    alt166=3;
                    }
                    break;
                case 133:
                case 145:
                    {
                    alt166=4;
                    }
                    break;

                }

                switch (alt166) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:49: nnp
            	    {
            	    pushFollow(FOLLOW_nnp_in_citationContent2830_static.FOLLOW_nnp_in_citationContent2830);
            	    nnp581=nnp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp581.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:53: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_citationContent2832_static.FOLLOW_fw_in_citationContent2832);
            	    fw582=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw582.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:56: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_citationContent2834_static.FOLLOW_cd_in_citationContent2834);
            	    cd583=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd583.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:59: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_citationContent2836_static.FOLLOW_conjunction_in_citationContent2836);
            	    conjunction584=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction584.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt166 >= 1 ) break loop166;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(166, input);
                        throw eee;
                }
                cnt166++;
            } while (true);

            pushFollow(FOLLOW_rrb_in_citationContent2840_static.FOLLOW_rrb_in_citationContent2840);
            rrb585=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb585.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, citationContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citationContent"

    public static class numericOrBracketedNumeric_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericOrBracketedNumeric"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:1: numericOrBracketedNumeric : ( numeric | bracketedNumeric );
    public final ChemicalChunkerParser.numericOrBracketedNumeric_return numericOrBracketedNumeric() throws RecognitionException {
        ChemicalChunkerParser.numericOrBracketedNumeric_return retval = new ChemicalChunkerParser.numericOrBracketedNumeric_return();
        retval.start = input.LT(1);
        int numericOrBracketedNumeric_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric586 = null;

        ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric587 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:27: ( numeric | bracketedNumeric )
            int alt167=2;
            switch ( input.LA(1) ) {
            case 38:
            case 146:
                {
                alt167=1;
                }
                break;
            case 143:
                {
                alt167=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                throw nvae;
            }

            switch (alt167) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:30: numeric
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_numeric_in_numericOrBracketedNumeric2850_static.FOLLOW_numeric_in_numericOrBracketedNumeric2850);
                    numeric586=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric586.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:40: bracketedNumeric
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric2854_static.FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric2854);
                    bracketedNumeric587=bracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedNumeric587.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, numericOrBracketedNumeric_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numericOrBracketedNumeric"

    public static class bracketedNumeric_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedNumeric"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:1: bracketedNumeric : lrb numeric rrb ;
    public final ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric() throws RecognitionException {
        ChemicalChunkerParser.bracketedNumeric_return retval = new ChemicalChunkerParser.bracketedNumeric_return();
        retval.start = input.LT(1);
        int bracketedNumeric_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb588 = null;

        ChemicalChunkerParser.numeric_return numeric589 = null;

        ChemicalChunkerParser.rrb_return rrb590 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:18: ( lrb numeric rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:21: lrb numeric rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedNumeric2862_static.FOLLOW_lrb_in_bracketedNumeric2862);
            lrb588=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb588.getTree());
            pushFollow(FOLLOW_numeric_in_bracketedNumeric2864_static.FOLLOW_numeric_in_bracketedNumeric2864);
            numeric589=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric589.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedNumeric2866_static.FOLLOW_rrb_in_bracketedNumeric2866);
            rrb590=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb590.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, bracketedNumeric_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedNumeric"

    public static class identifierOrBracketedIdentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifierOrBracketedIdentifier"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:1: identifierOrBracketedIdentifier : ( ( cd )? nnidentifier | bracketedIdentifier );
    public final ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier() throws RecognitionException {
        ChemicalChunkerParser.identifierOrBracketedIdentifier_return retval = new ChemicalChunkerParser.identifierOrBracketedIdentifier_return();
        retval.start = input.LT(1);
        int identifierOrBracketedIdentifier_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd591 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier592 = null;

        ChemicalChunkerParser.bracketedIdentifier_return bracketedIdentifier593 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:33: ( ( cd )? nnidentifier | bracketedIdentifier )
            int alt169=2;
            switch ( input.LA(1) ) {
            case 141:
            case 146:
                {
                alt169=1;
                }
                break;
            case 143:
                {
                alt169=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 169, 0, input);

                throw nvae;
            }

            switch (alt169) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:35: ( cd )? nnidentifier
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:35: ( cd )?
                    int alt168=2;
                    switch ( input.LA(1) ) {
                        case 146:
                            {
                            alt168=1;
                            }
                            break;
                    }

                    switch (alt168) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                            {
                            pushFollow(FOLLOW_cd_in_identifierOrBracketedIdentifier2873_static.FOLLOW_cd_in_identifierOrBracketedIdentifier2873);
                            cd591=cd();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd591.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier2876_static.FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier2876);
                    nnidentifier592=nnidentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnidentifier592.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:54: bracketedIdentifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier2880_static.FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier2880);
                    bracketedIdentifier593=bracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedIdentifier593.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, identifierOrBracketedIdentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifierOrBracketedIdentifier"

    public static class bracketedIdentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedIdentifier"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:1: bracketedIdentifier : lrb ( cd )? nnidentifier rrb ;
    public final ChemicalChunkerParser.bracketedIdentifier_return bracketedIdentifier() throws RecognitionException {
        ChemicalChunkerParser.bracketedIdentifier_return retval = new ChemicalChunkerParser.bracketedIdentifier_return();
        retval.start = input.LT(1);
        int bracketedIdentifier_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb594 = null;

        ChemicalChunkerParser.cd_return cd595 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier596 = null;

        ChemicalChunkerParser.rrb_return rrb597 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:21: ( lrb ( cd )? nnidentifier rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:24: lrb ( cd )? nnidentifier rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedIdentifier2888_static.FOLLOW_lrb_in_bracketedIdentifier2888);
            lrb594=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb594.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:28: ( cd )?
            int alt170=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt170=1;
                    }
                    break;
            }

            switch (alt170) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_bracketedIdentifier2890_static.FOLLOW_cd_in_bracketedIdentifier2890);
                    cd595=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd595.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnidentifier_in_bracketedIdentifier2893_static.FOLLOW_nnidentifier_in_bracketedIdentifier2893);
            nnidentifier596=nnidentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnidentifier596.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedIdentifier2895_static.FOLLOW_rrb_in_bracketedIdentifier2895);
            rrb597=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb597.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, bracketedIdentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedIdentifier"

    public static class adj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:1: adj : ( jj | jjr | jjs | oscarcj | jjchem | oscarrn );
    public final ChemicalChunkerParser.adj_return adj() throws RecognitionException {
        ChemicalChunkerParser.adj_return retval = new ChemicalChunkerParser.adj_return();
        retval.start = input.LT(1);
        int adj_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj598 = null;

        ChemicalChunkerParser.jjr_return jjr599 = null;

        ChemicalChunkerParser.jjs_return jjs600 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj601 = null;

        ChemicalChunkerParser.jjchem_return jjchem602 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn603 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:5: ( jj | jjr | jjs | oscarcj | jjchem | oscarrn )
            int alt171=6;
            switch ( input.LA(1) ) {
            case 151:
                {
                alt171=1;
                }
                break;
            case 152:
                {
                alt171=2;
                }
                break;
            case 153:
                {
                alt171=3;
                }
                break;
            case 39:
                {
                alt171=4;
                }
                break;
            case 45:
                {
                alt171=5;
                }
                break;
            case 40:
                {
                alt171=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 171, 0, input);

                throw nvae;
            }

            switch (alt171) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:7: jj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jj_in_adj2903_static.FOLLOW_jj_in_adj2903);
                    jj598=jj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj598.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:10: jjr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjr_in_adj2905_static.FOLLOW_jjr_in_adj2905);
                    jjr599=jjr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjr599.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:14: jjs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjs_in_adj2907_static.FOLLOW_jjs_in_adj2907);
                    jjs600=jjs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjs600.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:18: oscarcj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcj_in_adj2909_static.FOLLOW_oscarcj_in_adj2909);
                    oscarcj601=oscarcj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj601.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:26: jjchem
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjchem_in_adj2911_static.FOLLOW_jjchem_in_adj2911);
                    jjchem602=jjchem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem602.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:33: oscarrn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarrn_in_adj2913_static.FOLLOW_oscarrn_in_adj2913);
                    oscarrn603=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn603.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, adj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "adj"

    public static class adv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adv"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:1: adv : ( rb | rbr | rp | rbs );
    public final ChemicalChunkerParser.adv_return adv() throws RecognitionException {
        ChemicalChunkerParser.adv_return retval = new ChemicalChunkerParser.adv_return();
        retval.start = input.LT(1);
        int adv_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.rb_return rb604 = null;

        ChemicalChunkerParser.rbr_return rbr605 = null;

        ChemicalChunkerParser.rp_return rp606 = null;

        ChemicalChunkerParser.rbs_return rbs607 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:5: ( rb | rbr | rp | rbs )
            int alt172=4;
            switch ( input.LA(1) ) {
            case 164:
                {
                alt172=1;
                }
                break;
            case 165:
                {
                alt172=2;
                }
                break;
            case 167:
                {
                alt172=3;
                }
                break;
            case 166:
                {
                alt172=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 172, 0, input);

                throw nvae;
            }

            switch (alt172) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:7: rb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rb_in_adv2920_static.FOLLOW_rb_in_adv2920);
                    rb604=rb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rb604.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:10: rbr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbr_in_adv2922_static.FOLLOW_rbr_in_adv2922);
                    rbr605=rbr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbr605.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:14: rp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rp_in_adv2924_static.FOLLOW_rp_in_adv2924);
                    rp606=rp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rp606.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:17: rbs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbs_in_adv2926_static.FOLLOW_rbs_in_adv2926);
                    rbs607=rbs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbs607.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, adv_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "adv"

    public static class clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "clause"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:1: clause : ( wdt | wp_poss | wrb | ex | pdt | wp );
    public final ChemicalChunkerParser.clause_return clause() throws RecognitionException {
        ChemicalChunkerParser.clause_return retval = new ChemicalChunkerParser.clause_return();
        retval.start = input.LT(1);
        int clause_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.wdt_return wdt608 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss609 = null;

        ChemicalChunkerParser.wrb_return wrb610 = null;

        ChemicalChunkerParser.ex_return ex611 = null;

        ChemicalChunkerParser.pdt_return pdt612 = null;

        ChemicalChunkerParser.wp_return wp613 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:8: ( wdt | wp_poss | wrb | ex | pdt | wp )
            int alt173=6;
            switch ( input.LA(1) ) {
            case 177:
                {
                alt173=1;
                }
                break;
            case 179:
                {
                alt173=2;
                }
                break;
            case 180:
                {
                alt173=3;
                }
                break;
            case 148:
                {
                alt173=4;
                }
                break;
            case 160:
                {
                alt173=5;
                }
                break;
            case 178:
                {
                alt173=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 173, 0, input);

                throw nvae;
            }

            switch (alt173) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:10: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wdt_in_clause2933_static.FOLLOW_wdt_in_clause2933);
                    wdt608=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt608.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:14: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_poss_in_clause2935_static.FOLLOW_wp_poss_in_clause2935);
                    wp_poss609=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss609.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:22: wrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wrb_in_clause2937_static.FOLLOW_wrb_in_clause2937);
                    wrb610=wrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wrb610.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:26: ex
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ex_in_clause2939_static.FOLLOW_ex_in_clause2939);
                    ex611=ex();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex611.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:29: pdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pdt_in_clause2941_static.FOLLOW_pdt_in_clause2941);
                    pdt612=pdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pdt612.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:33: wp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_in_clause2943_static.FOLLOW_wp_in_clause2943);
                    wp613=wp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp613.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "clause"

    public static class conjunction_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conjunction"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:317:1: conjunction : ( cc | comma );
    public final ChemicalChunkerParser.conjunction_return conjunction() throws RecognitionException {
        ChemicalChunkerParser.conjunction_return retval = new ChemicalChunkerParser.conjunction_return();
        retval.start = input.LT(1);
        int conjunction_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cc_return cc614 = null;

        ChemicalChunkerParser.comma_return comma615 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:317:13: ( cc | comma )
            int alt174=2;
            switch ( input.LA(1) ) {
            case 145:
                {
                alt174=1;
                }
                break;
            case 133:
                {
                alt174=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 174, 0, input);

                throw nvae;
            }

            switch (alt174) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:317:15: cc
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cc_in_conjunction2950_static.FOLLOW_cc_in_conjunction2950);
                    cc614=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc614.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:317:18: comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_conjunction2952_static.FOLLOW_comma_in_conjunction2952);
                    comma615=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma615.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, conjunction_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conjunction"

    public static class inAll_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inAll"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:1: inAll : ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inAll_return inAll() throws RecognitionException {
        ChemicalChunkerParser.inAll_return retval = new ChemicalChunkerParser.inAll_return();
        retval.start = input.LT(1);
        int inAll_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.in_return in616 = null;

        ChemicalChunkerParser.inafter_return inafter617 = null;

        ChemicalChunkerParser.inas_return inas618 = null;

        ChemicalChunkerParser.inbefore_return inbefore619 = null;

        ChemicalChunkerParser.inby_return inby620 = null;

        ChemicalChunkerParser.infor_return infor621 = null;

        ChemicalChunkerParser.infrom_return infrom622 = null;

        ChemicalChunkerParser.inin_return inin623 = null;

        ChemicalChunkerParser.ininto_return ininto624 = null;

        ChemicalChunkerParser.inof_return inof625 = null;

        ChemicalChunkerParser.inoff_return inoff626 = null;

        ChemicalChunkerParser.inon_return inon627 = null;

        ChemicalChunkerParser.inover_return inover628 = null;

        ChemicalChunkerParser.inunder_return inunder629 = null;

        ChemicalChunkerParser.invia_return invia630 = null;

        ChemicalChunkerParser.inwith_return inwith631 = null;

        ChemicalChunkerParser.inwithout_return inwithout632 = null;

        ChemicalChunkerParser.to_return to633 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:7: ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt175=18;
            switch ( input.LA(1) ) {
            case 150:
                {
                alt175=1;
                }
                break;
            case 49:
                {
                alt175=2;
                }
                break;
            case 47:
                {
                alt175=3;
                }
                break;
            case 48:
                {
                alt175=4;
                }
                break;
            case 54:
                {
                alt175=5;
                }
                break;
            case 58:
                {
                alt175=6;
                }
                break;
            case 59:
                {
                alt175=7;
                }
                break;
            case 50:
                {
                alt175=8;
                }
                break;
            case 51:
                {
                alt175=9;
                }
                break;
            case 56:
                {
                alt175=10;
                }
                break;
            case 62:
                {
                alt175=11;
                }
                break;
            case 57:
                {
                alt175=12;
                }
                break;
            case 61:
                {
                alt175=13;
                }
                break;
            case 60:
                {
                alt175=14;
                }
                break;
            case 55:
                {
                alt175=15;
                }
                break;
            case 52:
                {
                alt175=16;
                }
                break;
            case 53:
                {
                alt175=17;
                }
                break;
            case 169:
                {
                alt175=18;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 175, 0, input);

                throw nvae;
            }

            switch (alt175) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:9: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inAll2959_static.FOLLOW_in_in_inAll2959);
                    in616=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in616.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:12: inafter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inafter_in_inAll2961_static.FOLLOW_inafter_in_inAll2961);
                    inafter617=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter617.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:20: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inAll2963_static.FOLLOW_inas_in_inAll2963);
                    inas618=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas618.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:25: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inAll2965_static.FOLLOW_inbefore_in_inAll2965);
                    inbefore619=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore619.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:34: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inAll2967_static.FOLLOW_inby_in_inAll2967);
                    inby620=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby620.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:39: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inAll2969_static.FOLLOW_infor_in_inAll2969);
                    infor621=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor621.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:45: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inAll2971_static.FOLLOW_infrom_in_inAll2971);
                    infrom622=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom622.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:52: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inAll2973_static.FOLLOW_inin_in_inAll2973);
                    inin623=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin623.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:57: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inAll2975_static.FOLLOW_ininto_in_inAll2975);
                    ininto624=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto624.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:64: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inAll2977_static.FOLLOW_inof_in_inAll2977);
                    inof625=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof625.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:69: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inAll2979_static.FOLLOW_inoff_in_inAll2979);
                    inoff626=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff626.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:75: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inAll2981_static.FOLLOW_inon_in_inAll2981);
                    inon627=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon627.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:80: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inAll2983_static.FOLLOW_inover_in_inAll2983);
                    inover628=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover628.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:87: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inAll2985_static.FOLLOW_inunder_in_inAll2985);
                    inunder629=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder629.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:95: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inAll2987_static.FOLLOW_invia_in_inAll2987);
                    invia630=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia630.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:101: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inAll2989_static.FOLLOW_inwith_in_inAll2989);
                    inwith631=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith631.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:108: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inAll2991_static.FOLLOW_inwithout_in_inAll2991);
                    inwithout632=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout632.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:118: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inAll2993_static.FOLLOW_to_in_inAll2993);
                    to633=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to633.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, inAll_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inAll"

    public static class inMost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inMost"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:1: inMost : ( in | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inMost_return inMost() throws RecognitionException {
        ChemicalChunkerParser.inMost_return retval = new ChemicalChunkerParser.inMost_return();
        retval.start = input.LT(1);
        int inMost_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.in_return in634 = null;

        ChemicalChunkerParser.inas_return inas635 = null;

        ChemicalChunkerParser.inbefore_return inbefore636 = null;

        ChemicalChunkerParser.inby_return inby637 = null;

        ChemicalChunkerParser.infor_return infor638 = null;

        ChemicalChunkerParser.infrom_return infrom639 = null;

        ChemicalChunkerParser.inin_return inin640 = null;

        ChemicalChunkerParser.ininto_return ininto641 = null;

        ChemicalChunkerParser.inof_return inof642 = null;

        ChemicalChunkerParser.inoff_return inoff643 = null;

        ChemicalChunkerParser.inon_return inon644 = null;

        ChemicalChunkerParser.inover_return inover645 = null;

        ChemicalChunkerParser.inunder_return inunder646 = null;

        ChemicalChunkerParser.invia_return invia647 = null;

        ChemicalChunkerParser.inwith_return inwith648 = null;

        ChemicalChunkerParser.inwithout_return inwithout649 = null;

        ChemicalChunkerParser.to_return to650 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:8: ( in | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt176=17;
            switch ( input.LA(1) ) {
            case 150:
                {
                alt176=1;
                }
                break;
            case 47:
                {
                alt176=2;
                }
                break;
            case 48:
                {
                alt176=3;
                }
                break;
            case 54:
                {
                alt176=4;
                }
                break;
            case 58:
                {
                alt176=5;
                }
                break;
            case 59:
                {
                alt176=6;
                }
                break;
            case 50:
                {
                alt176=7;
                }
                break;
            case 51:
                {
                alt176=8;
                }
                break;
            case 56:
                {
                alt176=9;
                }
                break;
            case 62:
                {
                alt176=10;
                }
                break;
            case 57:
                {
                alt176=11;
                }
                break;
            case 61:
                {
                alt176=12;
                }
                break;
            case 60:
                {
                alt176=13;
                }
                break;
            case 55:
                {
                alt176=14;
                }
                break;
            case 52:
                {
                alt176=15;
                }
                break;
            case 53:
                {
                alt176=16;
                }
                break;
            case 169:
                {
                alt176=17;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 176, 0, input);

                throw nvae;
            }

            switch (alt176) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:10: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inMost3000_static.FOLLOW_in_in_inMost3000);
                    in634=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in634.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:13: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inMost3002_static.FOLLOW_inas_in_inMost3002);
                    inas635=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas635.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:18: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inMost3004_static.FOLLOW_inbefore_in_inMost3004);
                    inbefore636=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore636.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:27: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inMost3006_static.FOLLOW_inby_in_inMost3006);
                    inby637=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby637.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:32: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inMost3008_static.FOLLOW_infor_in_inMost3008);
                    infor638=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor638.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:38: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inMost3010_static.FOLLOW_infrom_in_inMost3010);
                    infrom639=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom639.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:45: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inMost3012_static.FOLLOW_inin_in_inMost3012);
                    inin640=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin640.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:50: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inMost3014_static.FOLLOW_ininto_in_inMost3014);
                    ininto641=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto641.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:57: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inMost3016_static.FOLLOW_inof_in_inMost3016);
                    inof642=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof642.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:62: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inMost3018_static.FOLLOW_inoff_in_inMost3018);
                    inoff643=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff643.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:68: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inMost3020_static.FOLLOW_inon_in_inMost3020);
                    inon644=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon644.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:73: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inMost3022_static.FOLLOW_inover_in_inMost3022);
                    inover645=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover645.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:80: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inMost3024_static.FOLLOW_inunder_in_inMost3024);
                    inunder646=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder646.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:88: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inMost3026_static.FOLLOW_invia_in_inMost3026);
                    invia647=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia647.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:94: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inMost3028_static.FOLLOW_inwith_in_inMost3028);
                    inwith648=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith648.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:101: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inMost3030_static.FOLLOW_inwithout_in_inMost3030);
                    inwithout649=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout649.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:111: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inMost3032_static.FOLLOW_to_in_inMost3032);
                    to650=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to650.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, inMost_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inMost"

    public static class numeric_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numeric"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:1: numeric : ( cd | cdAlphanum );
    public final ChemicalChunkerParser.numeric_return numeric() throws RecognitionException {
        ChemicalChunkerParser.numeric_return retval = new ChemicalChunkerParser.numeric_return();
        retval.start = input.LT(1);
        int numeric_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd651 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum652 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:9: ( cd | cdAlphanum )
            int alt177=2;
            switch ( input.LA(1) ) {
            case 146:
                {
                alt177=1;
                }
                break;
            case 38:
                {
                alt177=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 177, 0, input);

                throw nvae;
            }

            switch (alt177) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:11: cd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cd_in_numeric3039_static.FOLLOW_cd_in_numeric3039);
                    cd651=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd651.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:14: cdAlphanum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cdAlphanum_in_numeric3041_static.FOLLOW_cdAlphanum_in_numeric3041);
                    cdAlphanum652=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum652.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, numeric_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numeric"

    public static class cdAlphanum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdAlphanum"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:1: cdAlphanum : 'CD-ALPHANUM' TOKEN -> ^( 'CD-ALPHANUM' TOKEN ) ;
    public final ChemicalChunkerParser.cdAlphanum_return cdAlphanum() throws RecognitionException {
        ChemicalChunkerParser.cdAlphanum_return retval = new ChemicalChunkerParser.cdAlphanum_return();
        retval.start = input.LT(1);
        int cdAlphanum_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal653=null;
        Token TOKEN654=null;

        Object string_literal653_tree=null;
        Object TOKEN654_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:11: ( 'CD-ALPHANUM' TOKEN -> ^( 'CD-ALPHANUM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:12: 'CD-ALPHANUM' TOKEN
            {
            string_literal653=(Token)match(input,38,FOLLOW_38_in_cdAlphanum3049_static.FOLLOW_38_in_cdAlphanum3049); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_38.add(string_literal653);

            TOKEN654=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdAlphanum3051_static.FOLLOW_TOKEN_in_cdAlphanum3051); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN654);



            // AST REWRITE
            // elements: 38, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 324:32: -> ^( 'CD-ALPHANUM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:35: ^( 'CD-ALPHANUM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_38.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, cdAlphanum_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdAlphanum"

    public static class oscarcj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:1: oscarcj : 'OSCAR-CJ' TOKEN -> ^( 'OSCAR-CJ' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcj_return oscarcj() throws RecognitionException {
        ChemicalChunkerParser.oscarcj_return retval = new ChemicalChunkerParser.oscarcj_return();
        retval.start = input.LT(1);
        int oscarcj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal655=null;
        Token TOKEN656=null;

        Object string_literal655_tree=null;
        Object TOKEN656_tree=null;
        RewriteRuleTokenStream stream_39=new RewriteRuleTokenStream(adaptor,"token 39");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:8: ( 'OSCAR-CJ' TOKEN -> ^( 'OSCAR-CJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:9: 'OSCAR-CJ' TOKEN
            {
            string_literal655=(Token)match(input,39,FOLLOW_39_in_oscarcj3064_static.FOLLOW_39_in_oscarcj3064); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_39.add(string_literal655);

            TOKEN656=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcj3066_static.FOLLOW_TOKEN_in_oscarcj3066); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN656);



            // AST REWRITE
            // elements: TOKEN, 39
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 325:26: -> ^( 'OSCAR-CJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:29: ^( 'OSCAR-CJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_39.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, oscarcj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarcj"

    public static class oscarrn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarrn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:1: oscarrn : 'OSCAR-RN' TOKEN -> ^( 'OSCAR-RN' TOKEN ) ;
    public final ChemicalChunkerParser.oscarrn_return oscarrn() throws RecognitionException {
        ChemicalChunkerParser.oscarrn_return retval = new ChemicalChunkerParser.oscarrn_return();
        retval.start = input.LT(1);
        int oscarrn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal657=null;
        Token TOKEN658=null;

        Object string_literal657_tree=null;
        Object TOKEN658_tree=null;
        RewriteRuleTokenStream stream_40=new RewriteRuleTokenStream(adaptor,"token 40");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:8: ( 'OSCAR-RN' TOKEN -> ^( 'OSCAR-RN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:9: 'OSCAR-RN' TOKEN
            {
            string_literal657=(Token)match(input,40,FOLLOW_40_in_oscarrn3079_static.FOLLOW_40_in_oscarrn3079); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_40.add(string_literal657);

            TOKEN658=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarrn3081_static.FOLLOW_TOKEN_in_oscarrn3081); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN658);



            // AST REWRITE
            // elements: 40, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 326:26: -> ^( 'OSCAR-RN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:29: ^( 'OSCAR-RN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_40.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, oscarrn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarrn"

    public static class oscarase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:1: oscarase : 'OSCAR-ASE' TOKEN -> ^( 'OSCAR-ASE' TOKEN ) ;
    public final ChemicalChunkerParser.oscarase_return oscarase() throws RecognitionException {
        ChemicalChunkerParser.oscarase_return retval = new ChemicalChunkerParser.oscarase_return();
        retval.start = input.LT(1);
        int oscarase_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal659=null;
        Token TOKEN660=null;

        Object string_literal659_tree=null;
        Object TOKEN660_tree=null;
        RewriteRuleTokenStream stream_41=new RewriteRuleTokenStream(adaptor,"token 41");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:9: ( 'OSCAR-ASE' TOKEN -> ^( 'OSCAR-ASE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:10: 'OSCAR-ASE' TOKEN
            {
            string_literal659=(Token)match(input,41,FOLLOW_41_in_oscarase3094_static.FOLLOW_41_in_oscarase3094); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_41.add(string_literal659);

            TOKEN660=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarase3096_static.FOLLOW_TOKEN_in_oscarase3096); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN660);



            // AST REWRITE
            // elements: TOKEN, 41
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 327:28: -> ^( 'OSCAR-ASE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:31: ^( 'OSCAR-ASE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_41.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, oscarase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarase"

    public static class oscaront_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaront"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:1: oscaront : 'OSCAR-ONT' TOKEN -> ^( 'OSCAR-ONT' TOKEN ) ;
    public final ChemicalChunkerParser.oscaront_return oscaront() throws RecognitionException {
        ChemicalChunkerParser.oscaront_return retval = new ChemicalChunkerParser.oscaront_return();
        retval.start = input.LT(1);
        int oscaront_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal661=null;
        Token TOKEN662=null;

        Object string_literal661_tree=null;
        Object TOKEN662_tree=null;
        RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,"token 42");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:9: ( 'OSCAR-ONT' TOKEN -> ^( 'OSCAR-ONT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:10: 'OSCAR-ONT' TOKEN
            {
            string_literal661=(Token)match(input,42,FOLLOW_42_in_oscaront3109_static.FOLLOW_42_in_oscaront3109); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_42.add(string_literal661);

            TOKEN662=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscaront3111_static.FOLLOW_TOKEN_in_oscaront3111); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN662);



            // AST REWRITE
            // elements: 42, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 328:28: -> ^( 'OSCAR-ONT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:31: ^( 'OSCAR-ONT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_42.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, oscaront_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscaront"

    public static class tmunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tmunicode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:1: tmunicode : 'TM-UNICODE' TOKEN -> ^( 'TM-UNICODE' TOKEN ) ;
    public final ChemicalChunkerParser.tmunicode_return tmunicode() throws RecognitionException {
        ChemicalChunkerParser.tmunicode_return retval = new ChemicalChunkerParser.tmunicode_return();
        retval.start = input.LT(1);
        int tmunicode_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal663=null;
        Token TOKEN664=null;

        Object string_literal663_tree=null;
        Object TOKEN664_tree=null;
        RewriteRuleTokenStream stream_43=new RewriteRuleTokenStream(adaptor,"token 43");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:10: ( 'TM-UNICODE' TOKEN -> ^( 'TM-UNICODE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:11: 'TM-UNICODE' TOKEN
            {
            string_literal663=(Token)match(input,43,FOLLOW_43_in_tmunicode3124_static.FOLLOW_43_in_tmunicode3124); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_43.add(string_literal663);

            TOKEN664=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_tmunicode3126_static.FOLLOW_TOKEN_in_tmunicode3126); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN664);



            // AST REWRITE
            // elements: TOKEN, 43
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 329:30: -> ^( 'TM-UNICODE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:33: ^( 'TM-UNICODE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_43.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, tmunicode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "tmunicode"

    public static class cdunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdunicode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:1: cdunicode : 'CD-UNICODE' TOKEN -> ^( 'CD-UNICODE' TOKEN ) ;
    public final ChemicalChunkerParser.cdunicode_return cdunicode() throws RecognitionException {
        ChemicalChunkerParser.cdunicode_return retval = new ChemicalChunkerParser.cdunicode_return();
        retval.start = input.LT(1);
        int cdunicode_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal665=null;
        Token TOKEN666=null;

        Object string_literal665_tree=null;
        Object TOKEN666_tree=null;
        RewriteRuleTokenStream stream_44=new RewriteRuleTokenStream(adaptor,"token 44");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:10: ( 'CD-UNICODE' TOKEN -> ^( 'CD-UNICODE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:11: 'CD-UNICODE' TOKEN
            {
            string_literal665=(Token)match(input,44,FOLLOW_44_in_cdunicode3139_static.FOLLOW_44_in_cdunicode3139); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_44.add(string_literal665);

            TOKEN666=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdunicode3141_static.FOLLOW_TOKEN_in_cdunicode3141); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN666);



            // AST REWRITE
            // elements: TOKEN, 44
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 330:30: -> ^( 'CD-UNICODE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:33: ^( 'CD-UNICODE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_44.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, cdunicode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdunicode"

    public static class jjchem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjchem"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:1: jjchem : 'JJ-CHEM' TOKEN -> ^( 'JJ-CHEM' TOKEN ) ;
    public final ChemicalChunkerParser.jjchem_return jjchem() throws RecognitionException {
        ChemicalChunkerParser.jjchem_return retval = new ChemicalChunkerParser.jjchem_return();
        retval.start = input.LT(1);
        int jjchem_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal667=null;
        Token TOKEN668=null;

        Object string_literal667_tree=null;
        Object TOKEN668_tree=null;
        RewriteRuleTokenStream stream_45=new RewriteRuleTokenStream(adaptor,"token 45");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:7: ( 'JJ-CHEM' TOKEN -> ^( 'JJ-CHEM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:8: 'JJ-CHEM' TOKEN
            {
            string_literal667=(Token)match(input,45,FOLLOW_45_in_jjchem3154_static.FOLLOW_45_in_jjchem3154); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_45.add(string_literal667);

            TOKEN668=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjchem3156_static.FOLLOW_TOKEN_in_jjchem3156); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN668);



            // AST REWRITE
            // elements: 45, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 331:24: -> ^( 'JJ-CHEM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:27: ^( 'JJ-CHEM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_45.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, jjchem_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjchem"

    public static class jjcomp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjcomp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:1: jjcomp : 'JJ-COMPOUND' TOKEN -> ^( 'JJ-COMPOUND' TOKEN ) ;
    public final ChemicalChunkerParser.jjcomp_return jjcomp() throws RecognitionException {
        ChemicalChunkerParser.jjcomp_return retval = new ChemicalChunkerParser.jjcomp_return();
        retval.start = input.LT(1);
        int jjcomp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal669=null;
        Token TOKEN670=null;

        Object string_literal669_tree=null;
        Object TOKEN670_tree=null;
        RewriteRuleTokenStream stream_46=new RewriteRuleTokenStream(adaptor,"token 46");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:7: ( 'JJ-COMPOUND' TOKEN -> ^( 'JJ-COMPOUND' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:8: 'JJ-COMPOUND' TOKEN
            {
            string_literal669=(Token)match(input,46,FOLLOW_46_in_jjcomp3169_static.FOLLOW_46_in_jjcomp3169); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_46.add(string_literal669);

            TOKEN670=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjcomp3171_static.FOLLOW_TOKEN_in_jjcomp3171); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN670);



            // AST REWRITE
            // elements: 46, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 332:28: -> ^( 'JJ-COMPOUND' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:31: ^( 'JJ-COMPOUND' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_46.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, jjcomp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjcomp"

    public static class inas_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inas"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:1: inas : 'IN-AS' TOKEN -> ^( 'IN-AS' TOKEN ) ;
    public final ChemicalChunkerParser.inas_return inas() throws RecognitionException {
        ChemicalChunkerParser.inas_return retval = new ChemicalChunkerParser.inas_return();
        retval.start = input.LT(1);
        int inas_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal671=null;
        Token TOKEN672=null;

        Object string_literal671_tree=null;
        Object TOKEN672_tree=null;
        RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:5: ( 'IN-AS' TOKEN -> ^( 'IN-AS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:6: 'IN-AS' TOKEN
            {
            string_literal671=(Token)match(input,47,FOLLOW_47_in_inas3185_static.FOLLOW_47_in_inas3185); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_47.add(string_literal671);

            TOKEN672=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inas3187_static.FOLLOW_TOKEN_in_inas3187); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN672);



            // AST REWRITE
            // elements: 47, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 334:20: -> ^( 'IN-AS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:23: ^( 'IN-AS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_47.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, inas_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inas"

    public static class inbefore_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inbefore"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:1: inbefore : 'IN-BEFORE' TOKEN -> ^( 'IN-BEFORE' TOKEN ) ;
    public final ChemicalChunkerParser.inbefore_return inbefore() throws RecognitionException {
        ChemicalChunkerParser.inbefore_return retval = new ChemicalChunkerParser.inbefore_return();
        retval.start = input.LT(1);
        int inbefore_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal673=null;
        Token TOKEN674=null;

        Object string_literal673_tree=null;
        Object TOKEN674_tree=null;
        RewriteRuleTokenStream stream_48=new RewriteRuleTokenStream(adaptor,"token 48");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:9: ( 'IN-BEFORE' TOKEN -> ^( 'IN-BEFORE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:10: 'IN-BEFORE' TOKEN
            {
            string_literal673=(Token)match(input,48,FOLLOW_48_in_inbefore3200_static.FOLLOW_48_in_inbefore3200); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_48.add(string_literal673);

            TOKEN674=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inbefore3202_static.FOLLOW_TOKEN_in_inbefore3202); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN674);



            // AST REWRITE
            // elements: TOKEN, 48
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 335:28: -> ^( 'IN-BEFORE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:31: ^( 'IN-BEFORE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_48.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, inbefore_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inbefore"

    public static class inafter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inafter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:336:1: inafter : 'IN-AFTER' TOKEN -> ^( 'IN-AFTER' TOKEN ) ;
    public final ChemicalChunkerParser.inafter_return inafter() throws RecognitionException {
        ChemicalChunkerParser.inafter_return retval = new ChemicalChunkerParser.inafter_return();
        retval.start = input.LT(1);
        int inafter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal675=null;
        Token TOKEN676=null;

        Object string_literal675_tree=null;
        Object TOKEN676_tree=null;
        RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:336:8: ( 'IN-AFTER' TOKEN -> ^( 'IN-AFTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:336:9: 'IN-AFTER' TOKEN
            {
            string_literal675=(Token)match(input,49,FOLLOW_49_in_inafter3215_static.FOLLOW_49_in_inafter3215); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_49.add(string_literal675);

            TOKEN676=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inafter3217_static.FOLLOW_TOKEN_in_inafter3217); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN676);



            // AST REWRITE
            // elements: TOKEN, 49
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 336:26: -> ^( 'IN-AFTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:336:29: ^( 'IN-AFTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_49.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, inafter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inafter"

    public static class inin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inin"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:1: inin : 'IN-IN' TOKEN -> ^( 'IN-IN' TOKEN ) ;
    public final ChemicalChunkerParser.inin_return inin() throws RecognitionException {
        ChemicalChunkerParser.inin_return retval = new ChemicalChunkerParser.inin_return();
        retval.start = input.LT(1);
        int inin_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal677=null;
        Token TOKEN678=null;

        Object string_literal677_tree=null;
        Object TOKEN678_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_50=new RewriteRuleTokenStream(adaptor,"token 50");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:5: ( 'IN-IN' TOKEN -> ^( 'IN-IN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:6: 'IN-IN' TOKEN
            {
            string_literal677=(Token)match(input,50,FOLLOW_50_in_inin3230_static.FOLLOW_50_in_inin3230); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_50.add(string_literal677);

            TOKEN678=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inin3232_static.FOLLOW_TOKEN_in_inin3232); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN678);



            // AST REWRITE
            // elements: TOKEN, 50
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 337:20: -> ^( 'IN-IN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:23: ^( 'IN-IN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_50.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, inin_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inin"

    public static class ininto_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ininto"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:1: ininto : 'IN-INTO' TOKEN -> ^( 'IN-INTO' TOKEN ) ;
    public final ChemicalChunkerParser.ininto_return ininto() throws RecognitionException {
        ChemicalChunkerParser.ininto_return retval = new ChemicalChunkerParser.ininto_return();
        retval.start = input.LT(1);
        int ininto_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal679=null;
        Token TOKEN680=null;

        Object string_literal679_tree=null;
        Object TOKEN680_tree=null;
        RewriteRuleTokenStream stream_51=new RewriteRuleTokenStream(adaptor,"token 51");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:7: ( 'IN-INTO' TOKEN -> ^( 'IN-INTO' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:8: 'IN-INTO' TOKEN
            {
            string_literal679=(Token)match(input,51,FOLLOW_51_in_ininto3245_static.FOLLOW_51_in_ininto3245); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_51.add(string_literal679);

            TOKEN680=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ininto3247_static.FOLLOW_TOKEN_in_ininto3247); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN680);



            // AST REWRITE
            // elements: TOKEN, 51
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 338:24: -> ^( 'IN-INTO' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:27: ^( 'IN-INTO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_51.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, ininto_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ininto"

    public static class inwith_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwith"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:1: inwith : 'IN-WITH' TOKEN -> ^( 'IN-WITH' TOKEN ) ;
    public final ChemicalChunkerParser.inwith_return inwith() throws RecognitionException {
        ChemicalChunkerParser.inwith_return retval = new ChemicalChunkerParser.inwith_return();
        retval.start = input.LT(1);
        int inwith_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal681=null;
        Token TOKEN682=null;

        Object string_literal681_tree=null;
        Object TOKEN682_tree=null;
        RewriteRuleTokenStream stream_52=new RewriteRuleTokenStream(adaptor,"token 52");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:7: ( 'IN-WITH' TOKEN -> ^( 'IN-WITH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:8: 'IN-WITH' TOKEN
            {
            string_literal681=(Token)match(input,52,FOLLOW_52_in_inwith3260_static.FOLLOW_52_in_inwith3260); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_52.add(string_literal681);

            TOKEN682=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwith3262_static.FOLLOW_TOKEN_in_inwith3262); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN682);



            // AST REWRITE
            // elements: TOKEN, 52
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 339:24: -> ^( 'IN-WITH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:27: ^( 'IN-WITH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_52.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, inwith_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inwith"

    public static class inwithout_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwithout"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:1: inwithout : 'IN-WITHOUT' TOKEN -> ^( 'IN-WITHOUT' TOKEN ) ;
    public final ChemicalChunkerParser.inwithout_return inwithout() throws RecognitionException {
        ChemicalChunkerParser.inwithout_return retval = new ChemicalChunkerParser.inwithout_return();
        retval.start = input.LT(1);
        int inwithout_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal683=null;
        Token TOKEN684=null;

        Object string_literal683_tree=null;
        Object TOKEN684_tree=null;
        RewriteRuleTokenStream stream_53=new RewriteRuleTokenStream(adaptor,"token 53");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:10: ( 'IN-WITHOUT' TOKEN -> ^( 'IN-WITHOUT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:11: 'IN-WITHOUT' TOKEN
            {
            string_literal683=(Token)match(input,53,FOLLOW_53_in_inwithout3275_static.FOLLOW_53_in_inwithout3275); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_53.add(string_literal683);

            TOKEN684=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwithout3277_static.FOLLOW_TOKEN_in_inwithout3277); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN684);



            // AST REWRITE
            // elements: 53, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 340:30: -> ^( 'IN-WITHOUT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:33: ^( 'IN-WITHOUT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_53.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, inwithout_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inwithout"

    public static class inby_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inby"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:1: inby : 'IN-BY' TOKEN -> ^( 'IN-BY' TOKEN ) ;
    public final ChemicalChunkerParser.inby_return inby() throws RecognitionException {
        ChemicalChunkerParser.inby_return retval = new ChemicalChunkerParser.inby_return();
        retval.start = input.LT(1);
        int inby_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal685=null;
        Token TOKEN686=null;

        Object string_literal685_tree=null;
        Object TOKEN686_tree=null;
        RewriteRuleTokenStream stream_54=new RewriteRuleTokenStream(adaptor,"token 54");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:5: ( 'IN-BY' TOKEN -> ^( 'IN-BY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:6: 'IN-BY' TOKEN
            {
            string_literal685=(Token)match(input,54,FOLLOW_54_in_inby3290_static.FOLLOW_54_in_inby3290); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_54.add(string_literal685);

            TOKEN686=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inby3292_static.FOLLOW_TOKEN_in_inby3292); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN686);



            // AST REWRITE
            // elements: TOKEN, 54
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 341:20: -> ^( 'IN-BY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:23: ^( 'IN-BY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_54.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, inby_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inby"

    public static class invia_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invia"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:1: invia : 'IN-VIA' TOKEN -> ^( 'IN-VIA' TOKEN ) ;
    public final ChemicalChunkerParser.invia_return invia() throws RecognitionException {
        ChemicalChunkerParser.invia_return retval = new ChemicalChunkerParser.invia_return();
        retval.start = input.LT(1);
        int invia_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal687=null;
        Token TOKEN688=null;

        Object string_literal687_tree=null;
        Object TOKEN688_tree=null;
        RewriteRuleTokenStream stream_55=new RewriteRuleTokenStream(adaptor,"token 55");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:6: ( 'IN-VIA' TOKEN -> ^( 'IN-VIA' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:7: 'IN-VIA' TOKEN
            {
            string_literal687=(Token)match(input,55,FOLLOW_55_in_invia3305_static.FOLLOW_55_in_invia3305); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_55.add(string_literal687);

            TOKEN688=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_invia3307_static.FOLLOW_TOKEN_in_invia3307); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN688);



            // AST REWRITE
            // elements: TOKEN, 55
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 342:22: -> ^( 'IN-VIA' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:25: ^( 'IN-VIA' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_55.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, invia_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "invia"

    public static class inof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inof"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:1: inof : 'IN-OF' TOKEN -> ^( 'IN-OF' TOKEN ) ;
    public final ChemicalChunkerParser.inof_return inof() throws RecognitionException {
        ChemicalChunkerParser.inof_return retval = new ChemicalChunkerParser.inof_return();
        retval.start = input.LT(1);
        int inof_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal689=null;
        Token TOKEN690=null;

        Object string_literal689_tree=null;
        Object TOKEN690_tree=null;
        RewriteRuleTokenStream stream_56=new RewriteRuleTokenStream(adaptor,"token 56");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:5: ( 'IN-OF' TOKEN -> ^( 'IN-OF' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:6: 'IN-OF' TOKEN
            {
            string_literal689=(Token)match(input,56,FOLLOW_56_in_inof3320_static.FOLLOW_56_in_inof3320); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_56.add(string_literal689);

            TOKEN690=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inof3322_static.FOLLOW_TOKEN_in_inof3322); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN690);



            // AST REWRITE
            // elements: TOKEN, 56
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 343:20: -> ^( 'IN-OF' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:23: ^( 'IN-OF' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_56.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, inof_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inof"

    public static class inon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inon"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:1: inon : 'IN-ON' TOKEN -> ^( 'IN-ON' TOKEN ) ;
    public final ChemicalChunkerParser.inon_return inon() throws RecognitionException {
        ChemicalChunkerParser.inon_return retval = new ChemicalChunkerParser.inon_return();
        retval.start = input.LT(1);
        int inon_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal691=null;
        Token TOKEN692=null;

        Object string_literal691_tree=null;
        Object TOKEN692_tree=null;
        RewriteRuleTokenStream stream_57=new RewriteRuleTokenStream(adaptor,"token 57");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:5: ( 'IN-ON' TOKEN -> ^( 'IN-ON' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:6: 'IN-ON' TOKEN
            {
            string_literal691=(Token)match(input,57,FOLLOW_57_in_inon3335_static.FOLLOW_57_in_inon3335); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_57.add(string_literal691);

            TOKEN692=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inon3337_static.FOLLOW_TOKEN_in_inon3337); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN692);



            // AST REWRITE
            // elements: 57, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 344:20: -> ^( 'IN-ON' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:23: ^( 'IN-ON' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_57.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, inon_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inon"

    public static class infor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infor"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:345:1: infor : 'IN-FOR' TOKEN -> ^( 'IN-FOR' TOKEN ) ;
    public final ChemicalChunkerParser.infor_return infor() throws RecognitionException {
        ChemicalChunkerParser.infor_return retval = new ChemicalChunkerParser.infor_return();
        retval.start = input.LT(1);
        int infor_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal693=null;
        Token TOKEN694=null;

        Object string_literal693_tree=null;
        Object TOKEN694_tree=null;
        RewriteRuleTokenStream stream_58=new RewriteRuleTokenStream(adaptor,"token 58");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:345:6: ( 'IN-FOR' TOKEN -> ^( 'IN-FOR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:345:7: 'IN-FOR' TOKEN
            {
            string_literal693=(Token)match(input,58,FOLLOW_58_in_infor3350_static.FOLLOW_58_in_infor3350); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_58.add(string_literal693);

            TOKEN694=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infor3352_static.FOLLOW_TOKEN_in_infor3352); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN694);



            // AST REWRITE
            // elements: TOKEN, 58
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 345:22: -> ^( 'IN-FOR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:345:25: ^( 'IN-FOR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_58.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, infor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "infor"

    public static class infrom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infrom"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:1: infrom : 'IN-FROM' TOKEN -> ^( 'IN-FROM' TOKEN ) ;
    public final ChemicalChunkerParser.infrom_return infrom() throws RecognitionException {
        ChemicalChunkerParser.infrom_return retval = new ChemicalChunkerParser.infrom_return();
        retval.start = input.LT(1);
        int infrom_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal695=null;
        Token TOKEN696=null;

        Object string_literal695_tree=null;
        Object TOKEN696_tree=null;
        RewriteRuleTokenStream stream_59=new RewriteRuleTokenStream(adaptor,"token 59");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:7: ( 'IN-FROM' TOKEN -> ^( 'IN-FROM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:8: 'IN-FROM' TOKEN
            {
            string_literal695=(Token)match(input,59,FOLLOW_59_in_infrom3365_static.FOLLOW_59_in_infrom3365); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_59.add(string_literal695);

            TOKEN696=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infrom3367_static.FOLLOW_TOKEN_in_infrom3367); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN696);



            // AST REWRITE
            // elements: 59, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 346:24: -> ^( 'IN-FROM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:27: ^( 'IN-FROM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_59.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, infrom_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "infrom"

    public static class inunder_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inunder"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:1: inunder : 'IN-UNDER' TOKEN -> ^( 'IN-UNDER' TOKEN ) ;
    public final ChemicalChunkerParser.inunder_return inunder() throws RecognitionException {
        ChemicalChunkerParser.inunder_return retval = new ChemicalChunkerParser.inunder_return();
        retval.start = input.LT(1);
        int inunder_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal697=null;
        Token TOKEN698=null;

        Object string_literal697_tree=null;
        Object TOKEN698_tree=null;
        RewriteRuleTokenStream stream_60=new RewriteRuleTokenStream(adaptor,"token 60");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:8: ( 'IN-UNDER' TOKEN -> ^( 'IN-UNDER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:9: 'IN-UNDER' TOKEN
            {
            string_literal697=(Token)match(input,60,FOLLOW_60_in_inunder3380_static.FOLLOW_60_in_inunder3380); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_60.add(string_literal697);

            TOKEN698=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inunder3382_static.FOLLOW_TOKEN_in_inunder3382); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN698);



            // AST REWRITE
            // elements: 60, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 347:26: -> ^( 'IN-UNDER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:29: ^( 'IN-UNDER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_60.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, inunder_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inunder"

    public static class inover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inover"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:1: inover : 'IN-OVER' TOKEN -> ^( 'IN-OVER' TOKEN ) ;
    public final ChemicalChunkerParser.inover_return inover() throws RecognitionException {
        ChemicalChunkerParser.inover_return retval = new ChemicalChunkerParser.inover_return();
        retval.start = input.LT(1);
        int inover_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal699=null;
        Token TOKEN700=null;

        Object string_literal699_tree=null;
        Object TOKEN700_tree=null;
        RewriteRuleTokenStream stream_61=new RewriteRuleTokenStream(adaptor,"token 61");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:7: ( 'IN-OVER' TOKEN -> ^( 'IN-OVER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:8: 'IN-OVER' TOKEN
            {
            string_literal699=(Token)match(input,61,FOLLOW_61_in_inover3395_static.FOLLOW_61_in_inover3395); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_61.add(string_literal699);

            TOKEN700=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inover3397_static.FOLLOW_TOKEN_in_inover3397); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN700);



            // AST REWRITE
            // elements: 61, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 348:24: -> ^( 'IN-OVER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:27: ^( 'IN-OVER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_61.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, inover_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inover"

    public static class inoff_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inoff"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:1: inoff : 'IN-OFF' TOKEN -> ^( 'IN-OFF' TOKEN ) ;
    public final ChemicalChunkerParser.inoff_return inoff() throws RecognitionException {
        ChemicalChunkerParser.inoff_return retval = new ChemicalChunkerParser.inoff_return();
        retval.start = input.LT(1);
        int inoff_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal701=null;
        Token TOKEN702=null;

        Object string_literal701_tree=null;
        Object TOKEN702_tree=null;
        RewriteRuleTokenStream stream_62=new RewriteRuleTokenStream(adaptor,"token 62");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:6: ( 'IN-OFF' TOKEN -> ^( 'IN-OFF' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:7: 'IN-OFF' TOKEN
            {
            string_literal701=(Token)match(input,62,FOLLOW_62_in_inoff3410_static.FOLLOW_62_in_inoff3410); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_62.add(string_literal701);

            TOKEN702=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inoff3412_static.FOLLOW_TOKEN_in_inoff3412); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN702);



            // AST REWRITE
            // elements: 62, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 349:22: -> ^( 'IN-OFF' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:25: ^( 'IN-OFF' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_62.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, inoff_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inoff"

    public static class nnstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnstate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:1: nnstate : 'NN-STATE' TOKEN -> ^( 'NN-STATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnstate_return nnstate() throws RecognitionException {
        ChemicalChunkerParser.nnstate_return retval = new ChemicalChunkerParser.nnstate_return();
        retval.start = input.LT(1);
        int nnstate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal703=null;
        Token TOKEN704=null;

        Object string_literal703_tree=null;
        Object TOKEN704_tree=null;
        RewriteRuleTokenStream stream_63=new RewriteRuleTokenStream(adaptor,"token 63");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:8: ( 'NN-STATE' TOKEN -> ^( 'NN-STATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:9: 'NN-STATE' TOKEN
            {
            string_literal703=(Token)match(input,63,FOLLOW_63_in_nnstate3427_static.FOLLOW_63_in_nnstate3427); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_63.add(string_literal703);

            TOKEN704=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnstate3429_static.FOLLOW_TOKEN_in_nnstate3429); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN704);



            // AST REWRITE
            // elements: TOKEN, 63
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 352:26: -> ^( 'NN-STATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:29: ^( 'NN-STATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_63.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, nnstate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnstate"

    public static class nntime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntime"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:1: nntime : 'NN-TIME' TOKEN -> ^( 'NN-TIME' TOKEN ) ;
    public final ChemicalChunkerParser.nntime_return nntime() throws RecognitionException {
        ChemicalChunkerParser.nntime_return retval = new ChemicalChunkerParser.nntime_return();
        retval.start = input.LT(1);
        int nntime_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal705=null;
        Token TOKEN706=null;

        Object string_literal705_tree=null;
        Object TOKEN706_tree=null;
        RewriteRuleTokenStream stream_64=new RewriteRuleTokenStream(adaptor,"token 64");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:7: ( 'NN-TIME' TOKEN -> ^( 'NN-TIME' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:8: 'NN-TIME' TOKEN
            {
            string_literal705=(Token)match(input,64,FOLLOW_64_in_nntime3442_static.FOLLOW_64_in_nntime3442); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_64.add(string_literal705);

            TOKEN706=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntime3444_static.FOLLOW_TOKEN_in_nntime3444); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN706);



            // AST REWRITE
            // elements: TOKEN, 64
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 353:24: -> ^( 'NN-TIME' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:27: ^( 'NN-TIME' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_64.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 136, nntime_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntime"

    public static class nnmass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:1: nnmass : 'NN-MASS' TOKEN -> ^( 'NN-MASS' TOKEN ) ;
    public final ChemicalChunkerParser.nnmass_return nnmass() throws RecognitionException {
        ChemicalChunkerParser.nnmass_return retval = new ChemicalChunkerParser.nnmass_return();
        retval.start = input.LT(1);
        int nnmass_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal707=null;
        Token TOKEN708=null;

        Object string_literal707_tree=null;
        Object TOKEN708_tree=null;
        RewriteRuleTokenStream stream_65=new RewriteRuleTokenStream(adaptor,"token 65");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:7: ( 'NN-MASS' TOKEN -> ^( 'NN-MASS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:8: 'NN-MASS' TOKEN
            {
            string_literal707=(Token)match(input,65,FOLLOW_65_in_nnmass3457_static.FOLLOW_65_in_nnmass3457); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_65.add(string_literal707);

            TOKEN708=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmass3459_static.FOLLOW_TOKEN_in_nnmass3459); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN708);



            // AST REWRITE
            // elements: 65, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 354:24: -> ^( 'NN-MASS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:27: ^( 'NN-MASS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_65.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 137, nnmass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmass"

    public static class nnamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnamount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:1: nnamount : 'NN-AMOUNT' TOKEN -> ^( 'NN-AMOUNT' TOKEN ) ;
    public final ChemicalChunkerParser.nnamount_return nnamount() throws RecognitionException {
        ChemicalChunkerParser.nnamount_return retval = new ChemicalChunkerParser.nnamount_return();
        retval.start = input.LT(1);
        int nnamount_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal709=null;
        Token TOKEN710=null;

        Object string_literal709_tree=null;
        Object TOKEN710_tree=null;
        RewriteRuleTokenStream stream_66=new RewriteRuleTokenStream(adaptor,"token 66");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:9: ( 'NN-AMOUNT' TOKEN -> ^( 'NN-AMOUNT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:10: 'NN-AMOUNT' TOKEN
            {
            string_literal709=(Token)match(input,66,FOLLOW_66_in_nnamount3472_static.FOLLOW_66_in_nnamount3472); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_66.add(string_literal709);

            TOKEN710=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnamount3474_static.FOLLOW_TOKEN_in_nnamount3474); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN710);



            // AST REWRITE
            // elements: 66, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 355:28: -> ^( 'NN-AMOUNT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:31: ^( 'NN-AMOUNT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_66.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 138, nnamount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnamount"

    public static class nnmolar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmolar"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:1: nnmolar : 'NN-MOLAR' TOKEN -> ^( 'NN-MOLAR' TOKEN ) ;
    public final ChemicalChunkerParser.nnmolar_return nnmolar() throws RecognitionException {
        ChemicalChunkerParser.nnmolar_return retval = new ChemicalChunkerParser.nnmolar_return();
        retval.start = input.LT(1);
        int nnmolar_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal711=null;
        Token TOKEN712=null;

        Object string_literal711_tree=null;
        Object TOKEN712_tree=null;
        RewriteRuleTokenStream stream_67=new RewriteRuleTokenStream(adaptor,"token 67");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:8: ( 'NN-MOLAR' TOKEN -> ^( 'NN-MOLAR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:9: 'NN-MOLAR' TOKEN
            {
            string_literal711=(Token)match(input,67,FOLLOW_67_in_nnmolar3487_static.FOLLOW_67_in_nnmolar3487); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_67.add(string_literal711);

            TOKEN712=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmolar3489_static.FOLLOW_TOKEN_in_nnmolar3489); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN712);



            // AST REWRITE
            // elements: TOKEN, 67
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 356:26: -> ^( 'NN-MOLAR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:29: ^( 'NN-MOLAR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_67.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 139, nnmolar_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmolar"

    public static class nnatmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnatmosphere"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:357:1: nnatmosphere : 'NN-ATMOSPHERE' TOKEN -> ^( 'NN-ATMOSPHERE' TOKEN ) ;
    public final ChemicalChunkerParser.nnatmosphere_return nnatmosphere() throws RecognitionException {
        ChemicalChunkerParser.nnatmosphere_return retval = new ChemicalChunkerParser.nnatmosphere_return();
        retval.start = input.LT(1);
        int nnatmosphere_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal713=null;
        Token TOKEN714=null;

        Object string_literal713_tree=null;
        Object TOKEN714_tree=null;
        RewriteRuleTokenStream stream_68=new RewriteRuleTokenStream(adaptor,"token 68");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:357:13: ( 'NN-ATMOSPHERE' TOKEN -> ^( 'NN-ATMOSPHERE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:357:14: 'NN-ATMOSPHERE' TOKEN
            {
            string_literal713=(Token)match(input,68,FOLLOW_68_in_nnatmosphere3502_static.FOLLOW_68_in_nnatmosphere3502); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_68.add(string_literal713);

            TOKEN714=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnatmosphere3504_static.FOLLOW_TOKEN_in_nnatmosphere3504); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN714);



            // AST REWRITE
            // elements: 68, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 357:36: -> ^( 'NN-ATMOSPHERE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:357:39: ^( 'NN-ATMOSPHERE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_68.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 140, nnatmosphere_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnatmosphere"

    public static class nneq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nneq"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:1: nneq : 'NN-EQ' TOKEN -> ^( 'NN-EQ' TOKEN ) ;
    public final ChemicalChunkerParser.nneq_return nneq() throws RecognitionException {
        ChemicalChunkerParser.nneq_return retval = new ChemicalChunkerParser.nneq_return();
        retval.start = input.LT(1);
        int nneq_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal715=null;
        Token TOKEN716=null;

        Object string_literal715_tree=null;
        Object TOKEN716_tree=null;
        RewriteRuleTokenStream stream_69=new RewriteRuleTokenStream(adaptor,"token 69");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:5: ( 'NN-EQ' TOKEN -> ^( 'NN-EQ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:6: 'NN-EQ' TOKEN
            {
            string_literal715=(Token)match(input,69,FOLLOW_69_in_nneq3517_static.FOLLOW_69_in_nneq3517); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_69.add(string_literal715);

            TOKEN716=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nneq3519_static.FOLLOW_TOKEN_in_nneq3519); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN716);



            // AST REWRITE
            // elements: TOKEN, 69
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 358:20: -> ^( 'NN-EQ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:23: ^( 'NN-EQ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_69.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 141, nneq_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nneq"

    public static class nnvol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvol"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:1: nnvol : 'NN-VOL' TOKEN -> ^( 'NN-VOL' TOKEN ) ;
    public final ChemicalChunkerParser.nnvol_return nnvol() throws RecognitionException {
        ChemicalChunkerParser.nnvol_return retval = new ChemicalChunkerParser.nnvol_return();
        retval.start = input.LT(1);
        int nnvol_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal717=null;
        Token TOKEN718=null;

        Object string_literal717_tree=null;
        Object TOKEN718_tree=null;
        RewriteRuleTokenStream stream_70=new RewriteRuleTokenStream(adaptor,"token 70");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:6: ( 'NN-VOL' TOKEN -> ^( 'NN-VOL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:7: 'NN-VOL' TOKEN
            {
            string_literal717=(Token)match(input,70,FOLLOW_70_in_nnvol3532_static.FOLLOW_70_in_nnvol3532); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_70.add(string_literal717);

            TOKEN718=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvol3534_static.FOLLOW_TOKEN_in_nnvol3534); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN718);



            // AST REWRITE
            // elements: TOKEN, 70
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 359:22: -> ^( 'NN-VOL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:25: ^( 'NN-VOL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_70.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 142, nnvol_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnvol"

    public static class nnchementity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchementity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:1: nnchementity : 'NN-CHEMENTITY' TOKEN -> ^( 'NN-CHEMENTITY' TOKEN ) ;
    public final ChemicalChunkerParser.nnchementity_return nnchementity() throws RecognitionException {
        ChemicalChunkerParser.nnchementity_return retval = new ChemicalChunkerParser.nnchementity_return();
        retval.start = input.LT(1);
        int nnchementity_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal719=null;
        Token TOKEN720=null;

        Object string_literal719_tree=null;
        Object TOKEN720_tree=null;
        RewriteRuleTokenStream stream_71=new RewriteRuleTokenStream(adaptor,"token 71");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:13: ( 'NN-CHEMENTITY' TOKEN -> ^( 'NN-CHEMENTITY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:14: 'NN-CHEMENTITY' TOKEN
            {
            string_literal719=(Token)match(input,71,FOLLOW_71_in_nnchementity3547_static.FOLLOW_71_in_nnchementity3547); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_71.add(string_literal719);

            TOKEN720=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchementity3549_static.FOLLOW_TOKEN_in_nnchementity3549); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN720);



            // AST REWRITE
            // elements: TOKEN, 71
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 360:36: -> ^( 'NN-CHEMENTITY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:39: ^( 'NN-CHEMENTITY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_71.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 143, nnchementity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnchementity"

    public static class nntemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntemp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:1: nntemp : 'NN-TEMP' TOKEN -> ^( 'NN-TEMP' TOKEN ) ;
    public final ChemicalChunkerParser.nntemp_return nntemp() throws RecognitionException {
        ChemicalChunkerParser.nntemp_return retval = new ChemicalChunkerParser.nntemp_return();
        retval.start = input.LT(1);
        int nntemp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal721=null;
        Token TOKEN722=null;

        Object string_literal721_tree=null;
        Object TOKEN722_tree=null;
        RewriteRuleTokenStream stream_72=new RewriteRuleTokenStream(adaptor,"token 72");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:7: ( 'NN-TEMP' TOKEN -> ^( 'NN-TEMP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:8: 'NN-TEMP' TOKEN
            {
            string_literal721=(Token)match(input,72,FOLLOW_72_in_nntemp3562_static.FOLLOW_72_in_nntemp3562); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_72.add(string_literal721);

            TOKEN722=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntemp3564_static.FOLLOW_TOKEN_in_nntemp3564); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN722);



            // AST REWRITE
            // elements: TOKEN, 72
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 361:24: -> ^( 'NN-TEMP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:27: ^( 'NN-TEMP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_72.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 144, nntemp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntemp"

    public static class nnph_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnph"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:1: nnph : 'NN-PH' TOKEN -> ^( 'NN-PH' TOKEN ) ;
    public final ChemicalChunkerParser.nnph_return nnph() throws RecognitionException {
        ChemicalChunkerParser.nnph_return retval = new ChemicalChunkerParser.nnph_return();
        retval.start = input.LT(1);
        int nnph_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal723=null;
        Token TOKEN724=null;

        Object string_literal723_tree=null;
        Object TOKEN724_tree=null;
        RewriteRuleTokenStream stream_73=new RewriteRuleTokenStream(adaptor,"token 73");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:5: ( 'NN-PH' TOKEN -> ^( 'NN-PH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:6: 'NN-PH' TOKEN
            {
            string_literal723=(Token)match(input,73,FOLLOW_73_in_nnph3577_static.FOLLOW_73_in_nnph3577); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_73.add(string_literal723);

            TOKEN724=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnph3579_static.FOLLOW_TOKEN_in_nnph3579); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN724);



            // AST REWRITE
            // elements: TOKEN, 73
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 362:20: -> ^( 'NN-PH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:23: ^( 'NN-PH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_73.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 145, nnph_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnph"

    public static class nnflash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnflash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:1: nnflash : 'NN-FLASH' TOKEN -> ^( 'NN-FLASH' TOKEN ) ;
    public final ChemicalChunkerParser.nnflash_return nnflash() throws RecognitionException {
        ChemicalChunkerParser.nnflash_return retval = new ChemicalChunkerParser.nnflash_return();
        retval.start = input.LT(1);
        int nnflash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal725=null;
        Token TOKEN726=null;

        Object string_literal725_tree=null;
        Object TOKEN726_tree=null;
        RewriteRuleTokenStream stream_74=new RewriteRuleTokenStream(adaptor,"token 74");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:8: ( 'NN-FLASH' TOKEN -> ^( 'NN-FLASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:9: 'NN-FLASH' TOKEN
            {
            string_literal725=(Token)match(input,74,FOLLOW_74_in_nnflash3592_static.FOLLOW_74_in_nnflash3592); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_74.add(string_literal725);

            TOKEN726=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnflash3594_static.FOLLOW_TOKEN_in_nnflash3594); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN726);



            // AST REWRITE
            // elements: 74, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 363:26: -> ^( 'NN-FLASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:29: ^( 'NN-FLASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_74.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 146, nnflash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnflash"

    public static class nngeneral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nngeneral"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:1: nngeneral : 'NN-GENERAL' TOKEN -> ^( 'NN-GENERAL' TOKEN ) ;
    public final ChemicalChunkerParser.nngeneral_return nngeneral() throws RecognitionException {
        ChemicalChunkerParser.nngeneral_return retval = new ChemicalChunkerParser.nngeneral_return();
        retval.start = input.LT(1);
        int nngeneral_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal727=null;
        Token TOKEN728=null;

        Object string_literal727_tree=null;
        Object TOKEN728_tree=null;
        RewriteRuleTokenStream stream_75=new RewriteRuleTokenStream(adaptor,"token 75");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:10: ( 'NN-GENERAL' TOKEN -> ^( 'NN-GENERAL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:11: 'NN-GENERAL' TOKEN
            {
            string_literal727=(Token)match(input,75,FOLLOW_75_in_nngeneral3607_static.FOLLOW_75_in_nngeneral3607); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_75.add(string_literal727);

            TOKEN728=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nngeneral3609_static.FOLLOW_TOKEN_in_nngeneral3609); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN728);



            // AST REWRITE
            // elements: TOKEN, 75
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 364:30: -> ^( 'NN-GENERAL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:33: ^( 'NN-GENERAL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_75.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 147, nngeneral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nngeneral"

    public static class nnmethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmethod"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:1: nnmethod : 'NN-METHOD' TOKEN -> ^( 'NN-METHOD' TOKEN ) ;
    public final ChemicalChunkerParser.nnmethod_return nnmethod() throws RecognitionException {
        ChemicalChunkerParser.nnmethod_return retval = new ChemicalChunkerParser.nnmethod_return();
        retval.start = input.LT(1);
        int nnmethod_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal729=null;
        Token TOKEN730=null;

        Object string_literal729_tree=null;
        Object TOKEN730_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_76=new RewriteRuleTokenStream(adaptor,"token 76");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:9: ( 'NN-METHOD' TOKEN -> ^( 'NN-METHOD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:10: 'NN-METHOD' TOKEN
            {
            string_literal729=(Token)match(input,76,FOLLOW_76_in_nnmethod3622_static.FOLLOW_76_in_nnmethod3622); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_76.add(string_literal729);

            TOKEN730=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmethod3624_static.FOLLOW_TOKEN_in_nnmethod3624); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN730);



            // AST REWRITE
            // elements: TOKEN, 76
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 365:28: -> ^( 'NN-METHOD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:31: ^( 'NN-METHOD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_76.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 148, nnmethod_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmethod"

    public static class nnpressure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpressure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:1: nnpressure : 'NN-PRESSURE' TOKEN -> ^( 'NN-PRESSURE' TOKEN ) ;
    public final ChemicalChunkerParser.nnpressure_return nnpressure() throws RecognitionException {
        ChemicalChunkerParser.nnpressure_return retval = new ChemicalChunkerParser.nnpressure_return();
        retval.start = input.LT(1);
        int nnpressure_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal731=null;
        Token TOKEN732=null;

        Object string_literal731_tree=null;
        Object TOKEN732_tree=null;
        RewriteRuleTokenStream stream_77=new RewriteRuleTokenStream(adaptor,"token 77");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:11: ( 'NN-PRESSURE' TOKEN -> ^( 'NN-PRESSURE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:12: 'NN-PRESSURE' TOKEN
            {
            string_literal731=(Token)match(input,77,FOLLOW_77_in_nnpressure3637_static.FOLLOW_77_in_nnpressure3637); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_77.add(string_literal731);

            TOKEN732=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpressure3639_static.FOLLOW_TOKEN_in_nnpressure3639); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN732);



            // AST REWRITE
            // elements: TOKEN, 77
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 366:32: -> ^( 'NN-PRESSURE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:35: ^( 'NN-PRESSURE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_77.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 149, nnpressure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpressure"

    public static class nncolumn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncolumn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:1: nncolumn : 'NN-COLUMN' TOKEN -> ^( 'NN-COLUMN' TOKEN ) ;
    public final ChemicalChunkerParser.nncolumn_return nncolumn() throws RecognitionException {
        ChemicalChunkerParser.nncolumn_return retval = new ChemicalChunkerParser.nncolumn_return();
        retval.start = input.LT(1);
        int nncolumn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal733=null;
        Token TOKEN734=null;

        Object string_literal733_tree=null;
        Object TOKEN734_tree=null;
        RewriteRuleTokenStream stream_78=new RewriteRuleTokenStream(adaptor,"token 78");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:9: ( 'NN-COLUMN' TOKEN -> ^( 'NN-COLUMN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:10: 'NN-COLUMN' TOKEN
            {
            string_literal733=(Token)match(input,78,FOLLOW_78_in_nncolumn3652_static.FOLLOW_78_in_nncolumn3652); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_78.add(string_literal733);

            TOKEN734=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncolumn3654_static.FOLLOW_TOKEN_in_nncolumn3654); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN734);



            // AST REWRITE
            // elements: 78, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 367:28: -> ^( 'NN-COLUMN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:31: ^( 'NN-COLUMN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_78.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 150, nncolumn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nncolumn"

    public static class nnchromatography_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchromatography"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:1: nnchromatography : 'NN-CHROMATOGRAPHY' TOKEN -> ^( 'NN-CHROMATOGRAPHY' TOKEN ) ;
    public final ChemicalChunkerParser.nnchromatography_return nnchromatography() throws RecognitionException {
        ChemicalChunkerParser.nnchromatography_return retval = new ChemicalChunkerParser.nnchromatography_return();
        retval.start = input.LT(1);
        int nnchromatography_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal735=null;
        Token TOKEN736=null;

        Object string_literal735_tree=null;
        Object TOKEN736_tree=null;
        RewriteRuleTokenStream stream_79=new RewriteRuleTokenStream(adaptor,"token 79");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:17: ( 'NN-CHROMATOGRAPHY' TOKEN -> ^( 'NN-CHROMATOGRAPHY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:18: 'NN-CHROMATOGRAPHY' TOKEN
            {
            string_literal735=(Token)match(input,79,FOLLOW_79_in_nnchromatography3667_static.FOLLOW_79_in_nnchromatography3667); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_79.add(string_literal735);

            TOKEN736=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchromatography3669_static.FOLLOW_TOKEN_in_nnchromatography3669); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN736);



            // AST REWRITE
            // elements: TOKEN, 79
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 368:44: -> ^( 'NN-CHROMATOGRAPHY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:47: ^( 'NN-CHROMATOGRAPHY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_79.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 151, nnchromatography_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnchromatography"

    public static class nnvacuum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvacuum"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:1: nnvacuum : 'NN-VACUUM' TOKEN -> ^( 'NN-VACUUM' TOKEN ) ;
    public final ChemicalChunkerParser.nnvacuum_return nnvacuum() throws RecognitionException {
        ChemicalChunkerParser.nnvacuum_return retval = new ChemicalChunkerParser.nnvacuum_return();
        retval.start = input.LT(1);
        int nnvacuum_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal737=null;
        Token TOKEN738=null;

        Object string_literal737_tree=null;
        Object TOKEN738_tree=null;
        RewriteRuleTokenStream stream_80=new RewriteRuleTokenStream(adaptor,"token 80");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:9: ( 'NN-VACUUM' TOKEN -> ^( 'NN-VACUUM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:10: 'NN-VACUUM' TOKEN
            {
            string_literal737=(Token)match(input,80,FOLLOW_80_in_nnvacuum3682_static.FOLLOW_80_in_nnvacuum3682); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_80.add(string_literal737);

            TOKEN738=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvacuum3684_static.FOLLOW_TOKEN_in_nnvacuum3684); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN738);



            // AST REWRITE
            // elements: 80, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 369:28: -> ^( 'NN-VACUUM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:31: ^( 'NN-VACUUM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_80.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 152, nnvacuum_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnvacuum"

    public static class nncycle_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncycle"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:1: nncycle : 'NN-CYCLE' TOKEN -> ^( 'NN-CYCLE' TOKEN ) ;
    public final ChemicalChunkerParser.nncycle_return nncycle() throws RecognitionException {
        ChemicalChunkerParser.nncycle_return retval = new ChemicalChunkerParser.nncycle_return();
        retval.start = input.LT(1);
        int nncycle_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal739=null;
        Token TOKEN740=null;

        Object string_literal739_tree=null;
        Object TOKEN740_tree=null;
        RewriteRuleTokenStream stream_81=new RewriteRuleTokenStream(adaptor,"token 81");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:8: ( 'NN-CYCLE' TOKEN -> ^( 'NN-CYCLE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:9: 'NN-CYCLE' TOKEN
            {
            string_literal739=(Token)match(input,81,FOLLOW_81_in_nncycle3697_static.FOLLOW_81_in_nncycle3697); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_81.add(string_literal739);

            TOKEN740=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncycle3699_static.FOLLOW_TOKEN_in_nncycle3699); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN740);



            // AST REWRITE
            // elements: TOKEN, 81
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 370:26: -> ^( 'NN-CYCLE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:29: ^( 'NN-CYCLE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_81.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 153, nncycle_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nncycle"

    public static class nntimes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntimes"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:1: nntimes : 'NN-TIMES' TOKEN -> ^( 'NN-TIMES' TOKEN ) ;
    public final ChemicalChunkerParser.nntimes_return nntimes() throws RecognitionException {
        ChemicalChunkerParser.nntimes_return retval = new ChemicalChunkerParser.nntimes_return();
        retval.start = input.LT(1);
        int nntimes_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal741=null;
        Token TOKEN742=null;

        Object string_literal741_tree=null;
        Object TOKEN742_tree=null;
        RewriteRuleTokenStream stream_82=new RewriteRuleTokenStream(adaptor,"token 82");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:8: ( 'NN-TIMES' TOKEN -> ^( 'NN-TIMES' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:9: 'NN-TIMES' TOKEN
            {
            string_literal741=(Token)match(input,82,FOLLOW_82_in_nntimes3712_static.FOLLOW_82_in_nntimes3712); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_82.add(string_literal741);

            TOKEN742=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntimes3714_static.FOLLOW_TOKEN_in_nntimes3714); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN742);



            // AST REWRITE
            // elements: 82, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 371:26: -> ^( 'NN-TIMES' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:29: ^( 'NN-TIMES' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_82.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 154, nntimes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntimes"

    public static class nnexample_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnexample"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:1: nnexample : 'NN-EXAMPLE' TOKEN -> ^( 'NN-EXAMPLE' TOKEN ) ;
    public final ChemicalChunkerParser.nnexample_return nnexample() throws RecognitionException {
        ChemicalChunkerParser.nnexample_return retval = new ChemicalChunkerParser.nnexample_return();
        retval.start = input.LT(1);
        int nnexample_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal743=null;
        Token TOKEN744=null;

        Object string_literal743_tree=null;
        Object TOKEN744_tree=null;
        RewriteRuleTokenStream stream_83=new RewriteRuleTokenStream(adaptor,"token 83");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:10: ( 'NN-EXAMPLE' TOKEN -> ^( 'NN-EXAMPLE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:11: 'NN-EXAMPLE' TOKEN
            {
            string_literal743=(Token)match(input,83,FOLLOW_83_in_nnexample3727_static.FOLLOW_83_in_nnexample3727); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_83.add(string_literal743);

            TOKEN744=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnexample3729_static.FOLLOW_TOKEN_in_nnexample3729); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN744);



            // AST REWRITE
            // elements: TOKEN, 83
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 372:30: -> ^( 'NN-EXAMPLE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:33: ^( 'NN-EXAMPLE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_83.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 155, nnexample_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnexample"

    public static class oscarcm_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcm"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:1: oscarcm : 'OSCAR-CM' TOKEN -> ^( 'OSCAR-CM' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcm_return oscarcm() throws RecognitionException {
        ChemicalChunkerParser.oscarcm_return retval = new ChemicalChunkerParser.oscarcm_return();
        retval.start = input.LT(1);
        int oscarcm_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal745=null;
        Token TOKEN746=null;

        Object string_literal745_tree=null;
        Object TOKEN746_tree=null;
        RewriteRuleTokenStream stream_84=new RewriteRuleTokenStream(adaptor,"token 84");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:8: ( 'OSCAR-CM' TOKEN -> ^( 'OSCAR-CM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:9: 'OSCAR-CM' TOKEN
            {
            string_literal745=(Token)match(input,84,FOLLOW_84_in_oscarcm3744_static.FOLLOW_84_in_oscarcm3744); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_84.add(string_literal745);

            TOKEN746=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcm3746_static.FOLLOW_TOKEN_in_oscarcm3746); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN746);



            // AST REWRITE
            // elements: 84, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 375:26: -> ^( 'OSCAR-CM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:29: ^( 'OSCAR-CM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_84.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 156, oscarcm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarcm"

    public static class vbuse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbuse"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:1: vbuse : 'VB-USE' TOKEN -> ^( 'VB-USE' TOKEN ) ;
    public final ChemicalChunkerParser.vbuse_return vbuse() throws RecognitionException {
        ChemicalChunkerParser.vbuse_return retval = new ChemicalChunkerParser.vbuse_return();
        retval.start = input.LT(1);
        int vbuse_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal747=null;
        Token TOKEN748=null;

        Object string_literal747_tree=null;
        Object TOKEN748_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_85=new RewriteRuleTokenStream(adaptor,"token 85");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:6: ( 'VB-USE' TOKEN -> ^( 'VB-USE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:7: 'VB-USE' TOKEN
            {
            string_literal747=(Token)match(input,85,FOLLOW_85_in_vbuse3761_static.FOLLOW_85_in_vbuse3761); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_85.add(string_literal747);

            TOKEN748=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbuse3763_static.FOLLOW_TOKEN_in_vbuse3763); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN748);



            // AST REWRITE
            // elements: TOKEN, 85
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 378:22: -> ^( 'VB-USE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:25: ^( 'VB-USE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_85.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 157, vbuse_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbuse"

    public static class vbchange_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbchange"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:1: vbchange : 'VB-CHANGE' TOKEN -> ^( 'VB-CHANGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbchange_return vbchange() throws RecognitionException {
        ChemicalChunkerParser.vbchange_return retval = new ChemicalChunkerParser.vbchange_return();
        retval.start = input.LT(1);
        int vbchange_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal749=null;
        Token TOKEN750=null;

        Object string_literal749_tree=null;
        Object TOKEN750_tree=null;
        RewriteRuleTokenStream stream_86=new RewriteRuleTokenStream(adaptor,"token 86");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:9: ( 'VB-CHANGE' TOKEN -> ^( 'VB-CHANGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:10: 'VB-CHANGE' TOKEN
            {
            string_literal749=(Token)match(input,86,FOLLOW_86_in_vbchange3776_static.FOLLOW_86_in_vbchange3776); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_86.add(string_literal749);

            TOKEN750=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbchange3778_static.FOLLOW_TOKEN_in_vbchange3778); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN750);



            // AST REWRITE
            // elements: 86, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 379:28: -> ^( 'VB-CHANGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:31: ^( 'VB-CHANGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_86.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 158, vbchange_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbchange"

    public static class vbsubmerge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubmerge"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:1: vbsubmerge : 'VB-SUBMERGE' TOKEN -> ^( 'VB-SUBMERGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbsubmerge_return vbsubmerge() throws RecognitionException {
        ChemicalChunkerParser.vbsubmerge_return retval = new ChemicalChunkerParser.vbsubmerge_return();
        retval.start = input.LT(1);
        int vbsubmerge_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal751=null;
        Token TOKEN752=null;

        Object string_literal751_tree=null;
        Object TOKEN752_tree=null;
        RewriteRuleTokenStream stream_87=new RewriteRuleTokenStream(adaptor,"token 87");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:11: ( 'VB-SUBMERGE' TOKEN -> ^( 'VB-SUBMERGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:12: 'VB-SUBMERGE' TOKEN
            {
            string_literal751=(Token)match(input,87,FOLLOW_87_in_vbsubmerge3791_static.FOLLOW_87_in_vbsubmerge3791); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_87.add(string_literal751);

            TOKEN752=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubmerge3793_static.FOLLOW_TOKEN_in_vbsubmerge3793); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN752);



            // AST REWRITE
            // elements: 87, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 380:32: -> ^( 'VB-SUBMERGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:35: ^( 'VB-SUBMERGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_87.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 159, vbsubmerge_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsubmerge"

    public static class vbsubject_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubject"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:1: vbsubject : 'VB-SUBJECT' TOKEN -> ^( 'VB-SUBJECT' TOKEN ) ;
    public final ChemicalChunkerParser.vbsubject_return vbsubject() throws RecognitionException {
        ChemicalChunkerParser.vbsubject_return retval = new ChemicalChunkerParser.vbsubject_return();
        retval.start = input.LT(1);
        int vbsubject_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal753=null;
        Token TOKEN754=null;

        Object string_literal753_tree=null;
        Object TOKEN754_tree=null;
        RewriteRuleTokenStream stream_88=new RewriteRuleTokenStream(adaptor,"token 88");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:10: ( 'VB-SUBJECT' TOKEN -> ^( 'VB-SUBJECT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:11: 'VB-SUBJECT' TOKEN
            {
            string_literal753=(Token)match(input,88,FOLLOW_88_in_vbsubject3806_static.FOLLOW_88_in_vbsubject3806); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_88.add(string_literal753);

            TOKEN754=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubject3808_static.FOLLOW_TOKEN_in_vbsubject3808); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN754);



            // AST REWRITE
            // elements: TOKEN, 88
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 381:30: -> ^( 'VB-SUBJECT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:33: ^( 'VB-SUBJECT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_88.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 160, vbsubject_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsubject"

    public static class nnadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnadd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:1: nnadd : 'NN-ADD' TOKEN -> ^( 'NN-ADD' TOKEN ) ;
    public final ChemicalChunkerParser.nnadd_return nnadd() throws RecognitionException {
        ChemicalChunkerParser.nnadd_return retval = new ChemicalChunkerParser.nnadd_return();
        retval.start = input.LT(1);
        int nnadd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal755=null;
        Token TOKEN756=null;

        Object string_literal755_tree=null;
        Object TOKEN756_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_89=new RewriteRuleTokenStream(adaptor,"token 89");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:6: ( 'NN-ADD' TOKEN -> ^( 'NN-ADD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:7: 'NN-ADD' TOKEN
            {
            string_literal755=(Token)match(input,89,FOLLOW_89_in_nnadd3823_static.FOLLOW_89_in_nnadd3823); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_89.add(string_literal755);

            TOKEN756=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnadd3825_static.FOLLOW_TOKEN_in_nnadd3825); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN756);



            // AST REWRITE
            // elements: TOKEN, 89
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 384:22: -> ^( 'NN-ADD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:25: ^( 'NN-ADD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_89.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 161, nnadd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnadd"

    public static class nnmixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmixture"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:385:1: nnmixture : 'NN-MIXTURE' TOKEN -> ^( 'NN-MIXTURE' TOKEN ) ;
    public final ChemicalChunkerParser.nnmixture_return nnmixture() throws RecognitionException {
        ChemicalChunkerParser.nnmixture_return retval = new ChemicalChunkerParser.nnmixture_return();
        retval.start = input.LT(1);
        int nnmixture_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal757=null;
        Token TOKEN758=null;

        Object string_literal757_tree=null;
        Object TOKEN758_tree=null;
        RewriteRuleTokenStream stream_90=new RewriteRuleTokenStream(adaptor,"token 90");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:385:10: ( 'NN-MIXTURE' TOKEN -> ^( 'NN-MIXTURE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:385:11: 'NN-MIXTURE' TOKEN
            {
            string_literal757=(Token)match(input,90,FOLLOW_90_in_nnmixture3838_static.FOLLOW_90_in_nnmixture3838); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_90.add(string_literal757);

            TOKEN758=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmixture3840_static.FOLLOW_TOKEN_in_nnmixture3840); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN758);



            // AST REWRITE
            // elements: TOKEN, 90
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 385:30: -> ^( 'NN-MIXTURE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:385:33: ^( 'NN-MIXTURE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_90.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 162, nnmixture_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmixture"

    public static class vbdilute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdilute"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:1: vbdilute : 'VB-DILUTE' TOKEN -> ^( 'VB-DILUTE' TOKEN ) ;
    public final ChemicalChunkerParser.vbdilute_return vbdilute() throws RecognitionException {
        ChemicalChunkerParser.vbdilute_return retval = new ChemicalChunkerParser.vbdilute_return();
        retval.start = input.LT(1);
        int vbdilute_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal759=null;
        Token TOKEN760=null;

        Object string_literal759_tree=null;
        Object TOKEN760_tree=null;
        RewriteRuleTokenStream stream_91=new RewriteRuleTokenStream(adaptor,"token 91");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:9: ( 'VB-DILUTE' TOKEN -> ^( 'VB-DILUTE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:10: 'VB-DILUTE' TOKEN
            {
            string_literal759=(Token)match(input,91,FOLLOW_91_in_vbdilute3853_static.FOLLOW_91_in_vbdilute3853); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_91.add(string_literal759);

            TOKEN760=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdilute3855_static.FOLLOW_TOKEN_in_vbdilute3855); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN760);



            // AST REWRITE
            // elements: 91, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 386:28: -> ^( 'VB-DILUTE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:31: ^( 'VB-DILUTE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_91.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 163, vbdilute_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdilute"

    public static class vbadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbadd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:387:1: vbadd : 'VB-ADD' TOKEN -> ^( 'VB-ADD' TOKEN ) ;
    public final ChemicalChunkerParser.vbadd_return vbadd() throws RecognitionException {
        ChemicalChunkerParser.vbadd_return retval = new ChemicalChunkerParser.vbadd_return();
        retval.start = input.LT(1);
        int vbadd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal761=null;
        Token TOKEN762=null;

        Object string_literal761_tree=null;
        Object TOKEN762_tree=null;
        RewriteRuleTokenStream stream_92=new RewriteRuleTokenStream(adaptor,"token 92");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:387:6: ( 'VB-ADD' TOKEN -> ^( 'VB-ADD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:387:7: 'VB-ADD' TOKEN
            {
            string_literal761=(Token)match(input,92,FOLLOW_92_in_vbadd3868_static.FOLLOW_92_in_vbadd3868); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_92.add(string_literal761);

            TOKEN762=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbadd3870_static.FOLLOW_TOKEN_in_vbadd3870); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN762);



            // AST REWRITE
            // elements: TOKEN, 92
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 387:22: -> ^( 'VB-ADD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:387:25: ^( 'VB-ADD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_92.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 164, vbadd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbadd"

    public static class vbcharge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcharge"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:1: vbcharge : 'VB-CHARGE' TOKEN -> ^( 'VB-CHARGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbcharge_return vbcharge() throws RecognitionException {
        ChemicalChunkerParser.vbcharge_return retval = new ChemicalChunkerParser.vbcharge_return();
        retval.start = input.LT(1);
        int vbcharge_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal763=null;
        Token TOKEN764=null;

        Object string_literal763_tree=null;
        Object TOKEN764_tree=null;
        RewriteRuleTokenStream stream_93=new RewriteRuleTokenStream(adaptor,"token 93");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:9: ( 'VB-CHARGE' TOKEN -> ^( 'VB-CHARGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:10: 'VB-CHARGE' TOKEN
            {
            string_literal763=(Token)match(input,93,FOLLOW_93_in_vbcharge3883_static.FOLLOW_93_in_vbcharge3883); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_93.add(string_literal763);

            TOKEN764=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcharge3885_static.FOLLOW_TOKEN_in_vbcharge3885); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN764);



            // AST REWRITE
            // elements: TOKEN, 93
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 388:28: -> ^( 'VB-CHARGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:31: ^( 'VB-CHARGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_93.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 165, vbcharge_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcharge"

    public static class vbcontain_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcontain"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:1: vbcontain : 'VB-CONTAIN' TOKEN -> ^( 'VB-CONTAIN' TOKEN ) ;
    public final ChemicalChunkerParser.vbcontain_return vbcontain() throws RecognitionException {
        ChemicalChunkerParser.vbcontain_return retval = new ChemicalChunkerParser.vbcontain_return();
        retval.start = input.LT(1);
        int vbcontain_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal765=null;
        Token TOKEN766=null;

        Object string_literal765_tree=null;
        Object TOKEN766_tree=null;
        RewriteRuleTokenStream stream_94=new RewriteRuleTokenStream(adaptor,"token 94");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:10: ( 'VB-CONTAIN' TOKEN -> ^( 'VB-CONTAIN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:11: 'VB-CONTAIN' TOKEN
            {
            string_literal765=(Token)match(input,94,FOLLOW_94_in_vbcontain3898_static.FOLLOW_94_in_vbcontain3898); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_94.add(string_literal765);

            TOKEN766=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcontain3900_static.FOLLOW_TOKEN_in_vbcontain3900); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN766);



            // AST REWRITE
            // elements: 94, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 389:30: -> ^( 'VB-CONTAIN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:33: ^( 'VB-CONTAIN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_94.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 166, vbcontain_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcontain"

    public static class vbdrop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdrop"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:390:1: vbdrop : 'VB-DROP' TOKEN -> ^( 'VB-DROP' TOKEN ) ;
    public final ChemicalChunkerParser.vbdrop_return vbdrop() throws RecognitionException {
        ChemicalChunkerParser.vbdrop_return retval = new ChemicalChunkerParser.vbdrop_return();
        retval.start = input.LT(1);
        int vbdrop_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal767=null;
        Token TOKEN768=null;

        Object string_literal767_tree=null;
        Object TOKEN768_tree=null;
        RewriteRuleTokenStream stream_95=new RewriteRuleTokenStream(adaptor,"token 95");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:390:7: ( 'VB-DROP' TOKEN -> ^( 'VB-DROP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:390:8: 'VB-DROP' TOKEN
            {
            string_literal767=(Token)match(input,95,FOLLOW_95_in_vbdrop3913_static.FOLLOW_95_in_vbdrop3913); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_95.add(string_literal767);

            TOKEN768=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdrop3915_static.FOLLOW_TOKEN_in_vbdrop3915); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN768);



            // AST REWRITE
            // elements: TOKEN, 95
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 390:24: -> ^( 'VB-DROP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:390:27: ^( 'VB-DROP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_95.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 167, vbdrop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdrop"

    public static class vbfill_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfill"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:1: vbfill : 'VB-FILL' TOKEN -> ^( 'VB-FILL' TOKEN ) ;
    public final ChemicalChunkerParser.vbfill_return vbfill() throws RecognitionException {
        ChemicalChunkerParser.vbfill_return retval = new ChemicalChunkerParser.vbfill_return();
        retval.start = input.LT(1);
        int vbfill_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal769=null;
        Token TOKEN770=null;

        Object string_literal769_tree=null;
        Object TOKEN770_tree=null;
        RewriteRuleTokenStream stream_96=new RewriteRuleTokenStream(adaptor,"token 96");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:7: ( 'VB-FILL' TOKEN -> ^( 'VB-FILL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:8: 'VB-FILL' TOKEN
            {
            string_literal769=(Token)match(input,96,FOLLOW_96_in_vbfill3928_static.FOLLOW_96_in_vbfill3928); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_96.add(string_literal769);

            TOKEN770=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfill3930_static.FOLLOW_TOKEN_in_vbfill3930); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN770);



            // AST REWRITE
            // elements: TOKEN, 96
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 391:24: -> ^( 'VB-FILL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:27: ^( 'VB-FILL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_96.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 168, vbfill_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbfill"

    public static class vbsuspend_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsuspend"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:392:1: vbsuspend : 'VB-SUSPEND' TOKEN -> ^( 'VB-SUSPEND' TOKEN ) ;
    public final ChemicalChunkerParser.vbsuspend_return vbsuspend() throws RecognitionException {
        ChemicalChunkerParser.vbsuspend_return retval = new ChemicalChunkerParser.vbsuspend_return();
        retval.start = input.LT(1);
        int vbsuspend_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal771=null;
        Token TOKEN772=null;

        Object string_literal771_tree=null;
        Object TOKEN772_tree=null;
        RewriteRuleTokenStream stream_97=new RewriteRuleTokenStream(adaptor,"token 97");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:392:10: ( 'VB-SUSPEND' TOKEN -> ^( 'VB-SUSPEND' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:392:11: 'VB-SUSPEND' TOKEN
            {
            string_literal771=(Token)match(input,97,FOLLOW_97_in_vbsuspend3943_static.FOLLOW_97_in_vbsuspend3943); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_97.add(string_literal771);

            TOKEN772=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsuspend3945_static.FOLLOW_TOKEN_in_vbsuspend3945); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN772);



            // AST REWRITE
            // elements: 97, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 392:30: -> ^( 'VB-SUSPEND' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:392:33: ^( 'VB-SUSPEND' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_97.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 169, vbsuspend_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsuspend"

    public static class vbtreat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbtreat"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:1: vbtreat : 'VB-TREAT' TOKEN -> ^( 'VB-TREAT' TOKEN ) ;
    public final ChemicalChunkerParser.vbtreat_return vbtreat() throws RecognitionException {
        ChemicalChunkerParser.vbtreat_return retval = new ChemicalChunkerParser.vbtreat_return();
        retval.start = input.LT(1);
        int vbtreat_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal773=null;
        Token TOKEN774=null;

        Object string_literal773_tree=null;
        Object TOKEN774_tree=null;
        RewriteRuleTokenStream stream_98=new RewriteRuleTokenStream(adaptor,"token 98");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:8: ( 'VB-TREAT' TOKEN -> ^( 'VB-TREAT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:9: 'VB-TREAT' TOKEN
            {
            string_literal773=(Token)match(input,98,FOLLOW_98_in_vbtreat3958_static.FOLLOW_98_in_vbtreat3958); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_98.add(string_literal773);

            TOKEN774=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbtreat3960_static.FOLLOW_TOKEN_in_vbtreat3960); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN774);



            // AST REWRITE
            // elements: 98, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 393:26: -> ^( 'VB-TREAT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:29: ^( 'VB-TREAT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_98.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 170, vbtreat_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbtreat"

    public static class vbapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:396:1: vbapparatus : 'VB-APPARATUS' TOKEN -> ^( 'VB-APPARATUS' TOKEN ) ;
    public final ChemicalChunkerParser.vbapparatus_return vbapparatus() throws RecognitionException {
        ChemicalChunkerParser.vbapparatus_return retval = new ChemicalChunkerParser.vbapparatus_return();
        retval.start = input.LT(1);
        int vbapparatus_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal775=null;
        Token TOKEN776=null;

        Object string_literal775_tree=null;
        Object TOKEN776_tree=null;
        RewriteRuleTokenStream stream_99=new RewriteRuleTokenStream(adaptor,"token 99");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:396:12: ( 'VB-APPARATUS' TOKEN -> ^( 'VB-APPARATUS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:396:13: 'VB-APPARATUS' TOKEN
            {
            string_literal775=(Token)match(input,99,FOLLOW_99_in_vbapparatus3975_static.FOLLOW_99_in_vbapparatus3975); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_99.add(string_literal775);

            TOKEN776=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbapparatus3977_static.FOLLOW_TOKEN_in_vbapparatus3977); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN776);



            // AST REWRITE
            // elements: 99, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 396:34: -> ^( 'VB-APPARATUS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:396:37: ^( 'VB-APPARATUS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_99.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 171, vbapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbapparatus"

    public static class nnapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:1: nnapparatus : 'NN-APPARATUS' TOKEN -> ^( 'NN-APPARATUS' TOKEN ) ;
    public final ChemicalChunkerParser.nnapparatus_return nnapparatus() throws RecognitionException {
        ChemicalChunkerParser.nnapparatus_return retval = new ChemicalChunkerParser.nnapparatus_return();
        retval.start = input.LT(1);
        int nnapparatus_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal777=null;
        Token TOKEN778=null;

        Object string_literal777_tree=null;
        Object TOKEN778_tree=null;
        RewriteRuleTokenStream stream_100=new RewriteRuleTokenStream(adaptor,"token 100");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:12: ( 'NN-APPARATUS' TOKEN -> ^( 'NN-APPARATUS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:13: 'NN-APPARATUS' TOKEN
            {
            string_literal777=(Token)match(input,100,FOLLOW_100_in_nnapparatus3990_static.FOLLOW_100_in_nnapparatus3990); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_100.add(string_literal777);

            TOKEN778=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnapparatus3992_static.FOLLOW_TOKEN_in_nnapparatus3992); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN778);



            // AST REWRITE
            // elements: 100, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 397:34: -> ^( 'NN-APPARATUS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:37: ^( 'NN-APPARATUS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_100.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 172, nnapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnapparatus"

    public static class vbconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbconcentrate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:400:1: vbconcentrate : 'VB-CONCENTRATE' TOKEN -> ^( 'VB-CONCENTRATE' TOKEN ) ;
    public final ChemicalChunkerParser.vbconcentrate_return vbconcentrate() throws RecognitionException {
        ChemicalChunkerParser.vbconcentrate_return retval = new ChemicalChunkerParser.vbconcentrate_return();
        retval.start = input.LT(1);
        int vbconcentrate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal779=null;
        Token TOKEN780=null;

        Object string_literal779_tree=null;
        Object TOKEN780_tree=null;
        RewriteRuleTokenStream stream_101=new RewriteRuleTokenStream(adaptor,"token 101");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:400:14: ( 'VB-CONCENTRATE' TOKEN -> ^( 'VB-CONCENTRATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:400:15: 'VB-CONCENTRATE' TOKEN
            {
            string_literal779=(Token)match(input,101,FOLLOW_101_in_vbconcentrate4007_static.FOLLOW_101_in_vbconcentrate4007); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_101.add(string_literal779);

            TOKEN780=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbconcentrate4009_static.FOLLOW_TOKEN_in_vbconcentrate4009); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN780);



            // AST REWRITE
            // elements: TOKEN, 101
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 400:38: -> ^( 'VB-CONCENTRATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:400:41: ^( 'VB-CONCENTRATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_101.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 173, vbconcentrate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbconcentrate"

    public static class nnconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnconcentrate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:1: nnconcentrate : 'NN-CONCENTRATE' TOKEN -> ^( 'NN-CONCENTRATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnconcentrate_return nnconcentrate() throws RecognitionException {
        ChemicalChunkerParser.nnconcentrate_return retval = new ChemicalChunkerParser.nnconcentrate_return();
        retval.start = input.LT(1);
        int nnconcentrate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal781=null;
        Token TOKEN782=null;

        Object string_literal781_tree=null;
        Object TOKEN782_tree=null;
        RewriteRuleTokenStream stream_102=new RewriteRuleTokenStream(adaptor,"token 102");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:14: ( 'NN-CONCENTRATE' TOKEN -> ^( 'NN-CONCENTRATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:15: 'NN-CONCENTRATE' TOKEN
            {
            string_literal781=(Token)match(input,102,FOLLOW_102_in_nnconcentrate4022_static.FOLLOW_102_in_nnconcentrate4022); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_102.add(string_literal781);

            TOKEN782=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnconcentrate4024_static.FOLLOW_TOKEN_in_nnconcentrate4024); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN782);



            // AST REWRITE
            // elements: TOKEN, 102
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 401:38: -> ^( 'NN-CONCENTRATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:41: ^( 'NN-CONCENTRATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_102.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 174, nnconcentrate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnconcentrate"

    public static class vbcool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcool"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:404:1: vbcool : 'VB-COOL' TOKEN -> ^( 'VB-COOL' TOKEN ) ;
    public final ChemicalChunkerParser.vbcool_return vbcool() throws RecognitionException {
        ChemicalChunkerParser.vbcool_return retval = new ChemicalChunkerParser.vbcool_return();
        retval.start = input.LT(1);
        int vbcool_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal783=null;
        Token TOKEN784=null;

        Object string_literal783_tree=null;
        Object TOKEN784_tree=null;
        RewriteRuleTokenStream stream_103=new RewriteRuleTokenStream(adaptor,"token 103");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:404:7: ( 'VB-COOL' TOKEN -> ^( 'VB-COOL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:404:8: 'VB-COOL' TOKEN
            {
            string_literal783=(Token)match(input,103,FOLLOW_103_in_vbcool4039_static.FOLLOW_103_in_vbcool4039); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_103.add(string_literal783);

            TOKEN784=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcool4041_static.FOLLOW_TOKEN_in_vbcool4041); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN784);



            // AST REWRITE
            // elements: TOKEN, 103
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 404:24: -> ^( 'VB-COOL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:404:27: ^( 'VB-COOL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_103.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 175, vbcool_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcool"

    public static class vbdegass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdegass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:407:1: vbdegass : 'VB-DEGASS' TOKEN -> ^( 'VB-DEGASS' TOKEN ) ;
    public final ChemicalChunkerParser.vbdegass_return vbdegass() throws RecognitionException {
        ChemicalChunkerParser.vbdegass_return retval = new ChemicalChunkerParser.vbdegass_return();
        retval.start = input.LT(1);
        int vbdegass_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal785=null;
        Token TOKEN786=null;

        Object string_literal785_tree=null;
        Object TOKEN786_tree=null;
        RewriteRuleTokenStream stream_104=new RewriteRuleTokenStream(adaptor,"token 104");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:407:9: ( 'VB-DEGASS' TOKEN -> ^( 'VB-DEGASS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:407:10: 'VB-DEGASS' TOKEN
            {
            string_literal785=(Token)match(input,104,FOLLOW_104_in_vbdegass4056_static.FOLLOW_104_in_vbdegass4056); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_104.add(string_literal785);

            TOKEN786=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdegass4058_static.FOLLOW_TOKEN_in_vbdegass4058); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN786);



            // AST REWRITE
            // elements: 104, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 407:28: -> ^( 'VB-DEGASS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:407:31: ^( 'VB-DEGASS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_104.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 176, vbdegass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdegass"

    public static class vbdissolve_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdissolve"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:410:1: vbdissolve : 'VB-DISSOLVE' TOKEN -> ^( 'VB-DISSOLVE' TOKEN ) ;
    public final ChemicalChunkerParser.vbdissolve_return vbdissolve() throws RecognitionException {
        ChemicalChunkerParser.vbdissolve_return retval = new ChemicalChunkerParser.vbdissolve_return();
        retval.start = input.LT(1);
        int vbdissolve_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal787=null;
        Token TOKEN788=null;

        Object string_literal787_tree=null;
        Object TOKEN788_tree=null;
        RewriteRuleTokenStream stream_105=new RewriteRuleTokenStream(adaptor,"token 105");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 177) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:410:11: ( 'VB-DISSOLVE' TOKEN -> ^( 'VB-DISSOLVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:410:12: 'VB-DISSOLVE' TOKEN
            {
            string_literal787=(Token)match(input,105,FOLLOW_105_in_vbdissolve4073_static.FOLLOW_105_in_vbdissolve4073); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_105.add(string_literal787);

            TOKEN788=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdissolve4075_static.FOLLOW_TOKEN_in_vbdissolve4075); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN788);



            // AST REWRITE
            // elements: TOKEN, 105
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 410:32: -> ^( 'VB-DISSOLVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:410:35: ^( 'VB-DISSOLVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_105.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 177, vbdissolve_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdissolve"

    public static class vbdry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdry"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:413:1: vbdry : 'VB-DRY' TOKEN -> ^( 'VB-DRY' TOKEN ) ;
    public final ChemicalChunkerParser.vbdry_return vbdry() throws RecognitionException {
        ChemicalChunkerParser.vbdry_return retval = new ChemicalChunkerParser.vbdry_return();
        retval.start = input.LT(1);
        int vbdry_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal789=null;
        Token TOKEN790=null;

        Object string_literal789_tree=null;
        Object TOKEN790_tree=null;
        RewriteRuleTokenStream stream_106=new RewriteRuleTokenStream(adaptor,"token 106");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 178) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:413:6: ( 'VB-DRY' TOKEN -> ^( 'VB-DRY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:413:7: 'VB-DRY' TOKEN
            {
            string_literal789=(Token)match(input,106,FOLLOW_106_in_vbdry4090_static.FOLLOW_106_in_vbdry4090); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_106.add(string_literal789);

            TOKEN790=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdry4092_static.FOLLOW_TOKEN_in_vbdry4092); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN790);



            // AST REWRITE
            // elements: TOKEN, 106
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 413:22: -> ^( 'VB-DRY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:413:25: ^( 'VB-DRY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_106.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 178, vbdry_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdry"

    public static class nndry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nndry"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:1: nndry : 'NN-DRY' TOKEN -> ^( 'NN-DRY' TOKEN ) ;
    public final ChemicalChunkerParser.nndry_return nndry() throws RecognitionException {
        ChemicalChunkerParser.nndry_return retval = new ChemicalChunkerParser.nndry_return();
        retval.start = input.LT(1);
        int nndry_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal791=null;
        Token TOKEN792=null;

        Object string_literal791_tree=null;
        Object TOKEN792_tree=null;
        RewriteRuleTokenStream stream_107=new RewriteRuleTokenStream(adaptor,"token 107");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 179) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:6: ( 'NN-DRY' TOKEN -> ^( 'NN-DRY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:7: 'NN-DRY' TOKEN
            {
            string_literal791=(Token)match(input,107,FOLLOW_107_in_nndry4105_static.FOLLOW_107_in_nndry4105); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_107.add(string_literal791);

            TOKEN792=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nndry4107_static.FOLLOW_TOKEN_in_nndry4107); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN792);



            // AST REWRITE
            // elements: 107, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 414:22: -> ^( 'NN-DRY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:25: ^( 'NN-DRY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_107.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 179, nndry_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nndry"

    public static class vbextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbextract"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:417:1: vbextract : 'VB-EXTRACT' TOKEN -> ^( 'VB-EXTRACT' TOKEN ) ;
    public final ChemicalChunkerParser.vbextract_return vbextract() throws RecognitionException {
        ChemicalChunkerParser.vbextract_return retval = new ChemicalChunkerParser.vbextract_return();
        retval.start = input.LT(1);
        int vbextract_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal793=null;
        Token TOKEN794=null;

        Object string_literal793_tree=null;
        Object TOKEN794_tree=null;
        RewriteRuleTokenStream stream_108=new RewriteRuleTokenStream(adaptor,"token 108");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 180) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:417:10: ( 'VB-EXTRACT' TOKEN -> ^( 'VB-EXTRACT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:417:11: 'VB-EXTRACT' TOKEN
            {
            string_literal793=(Token)match(input,108,FOLLOW_108_in_vbextract4122_static.FOLLOW_108_in_vbextract4122); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_108.add(string_literal793);

            TOKEN794=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbextract4124_static.FOLLOW_TOKEN_in_vbextract4124); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN794);



            // AST REWRITE
            // elements: 108, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 417:30: -> ^( 'VB-EXTRACT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:417:33: ^( 'VB-EXTRACT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_108.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 180, vbextract_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbextract"

    public static class nnextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnextract"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:1: nnextract : 'NN-EXTRACT' TOKEN -> ^( 'NN-EXTRACT' TOKEN ) ;
    public final ChemicalChunkerParser.nnextract_return nnextract() throws RecognitionException {
        ChemicalChunkerParser.nnextract_return retval = new ChemicalChunkerParser.nnextract_return();
        retval.start = input.LT(1);
        int nnextract_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal795=null;
        Token TOKEN796=null;

        Object string_literal795_tree=null;
        Object TOKEN796_tree=null;
        RewriteRuleTokenStream stream_109=new RewriteRuleTokenStream(adaptor,"token 109");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 181) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:10: ( 'NN-EXTRACT' TOKEN -> ^( 'NN-EXTRACT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:11: 'NN-EXTRACT' TOKEN
            {
            string_literal795=(Token)match(input,109,FOLLOW_109_in_nnextract4137_static.FOLLOW_109_in_nnextract4137); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_109.add(string_literal795);

            TOKEN796=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnextract4139_static.FOLLOW_TOKEN_in_nnextract4139); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN796);



            // AST REWRITE
            // elements: TOKEN, 109
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 418:30: -> ^( 'NN-EXTRACT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:33: ^( 'NN-EXTRACT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_109.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 181, nnextract_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnextract"

    public static class vbfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfilter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:1: vbfilter : 'VB-FILTER' TOKEN -> ^( 'VB-FILTER' TOKEN ) ;
    public final ChemicalChunkerParser.vbfilter_return vbfilter() throws RecognitionException {
        ChemicalChunkerParser.vbfilter_return retval = new ChemicalChunkerParser.vbfilter_return();
        retval.start = input.LT(1);
        int vbfilter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal797=null;
        Token TOKEN798=null;

        Object string_literal797_tree=null;
        Object TOKEN798_tree=null;
        RewriteRuleTokenStream stream_110=new RewriteRuleTokenStream(adaptor,"token 110");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 182) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:9: ( 'VB-FILTER' TOKEN -> ^( 'VB-FILTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:10: 'VB-FILTER' TOKEN
            {
            string_literal797=(Token)match(input,110,FOLLOW_110_in_vbfilter4154_static.FOLLOW_110_in_vbfilter4154); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_110.add(string_literal797);

            TOKEN798=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfilter4156_static.FOLLOW_TOKEN_in_vbfilter4156); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN798);



            // AST REWRITE
            // elements: TOKEN, 110
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 421:28: -> ^( 'VB-FILTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:31: ^( 'VB-FILTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_110.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 182, vbfilter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbfilter"

    public static class nnfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnfilter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:1: nnfilter : 'NN-FILTER' TOKEN -> ^( 'NN-FILTER' TOKEN ) ;
    public final ChemicalChunkerParser.nnfilter_return nnfilter() throws RecognitionException {
        ChemicalChunkerParser.nnfilter_return retval = new ChemicalChunkerParser.nnfilter_return();
        retval.start = input.LT(1);
        int nnfilter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal799=null;
        Token TOKEN800=null;

        Object string_literal799_tree=null;
        Object TOKEN800_tree=null;
        RewriteRuleTokenStream stream_111=new RewriteRuleTokenStream(adaptor,"token 111");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 183) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:9: ( 'NN-FILTER' TOKEN -> ^( 'NN-FILTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:10: 'NN-FILTER' TOKEN
            {
            string_literal799=(Token)match(input,111,FOLLOW_111_in_nnfilter4169_static.FOLLOW_111_in_nnfilter4169); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_111.add(string_literal799);

            TOKEN800=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnfilter4171_static.FOLLOW_TOKEN_in_nnfilter4171); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN800);



            // AST REWRITE
            // elements: 111, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 422:28: -> ^( 'NN-FILTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:31: ^( 'NN-FILTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_111.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 183, nnfilter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnfilter"

    public static class vbheat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbheat"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:1: vbheat : 'VB-HEAT' TOKEN -> ^( 'VB-HEAT' TOKEN ) ;
    public final ChemicalChunkerParser.vbheat_return vbheat() throws RecognitionException {
        ChemicalChunkerParser.vbheat_return retval = new ChemicalChunkerParser.vbheat_return();
        retval.start = input.LT(1);
        int vbheat_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal801=null;
        Token TOKEN802=null;

        Object string_literal801_tree=null;
        Object TOKEN802_tree=null;
        RewriteRuleTokenStream stream_112=new RewriteRuleTokenStream(adaptor,"token 112");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 184) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:7: ( 'VB-HEAT' TOKEN -> ^( 'VB-HEAT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:8: 'VB-HEAT' TOKEN
            {
            string_literal801=(Token)match(input,112,FOLLOW_112_in_vbheat4186_static.FOLLOW_112_in_vbheat4186); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_112.add(string_literal801);

            TOKEN802=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbheat4188_static.FOLLOW_TOKEN_in_vbheat4188); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN802);



            // AST REWRITE
            // elements: 112, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 425:24: -> ^( 'VB-HEAT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:27: ^( 'VB-HEAT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_112.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 184, vbheat_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbheat"

    public static class vbincrease_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbincrease"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:1: vbincrease : 'VB-INCREASE' TOKEN -> ^( 'VB-INCREASE' TOKEN ) ;
    public final ChemicalChunkerParser.vbincrease_return vbincrease() throws RecognitionException {
        ChemicalChunkerParser.vbincrease_return retval = new ChemicalChunkerParser.vbincrease_return();
        retval.start = input.LT(1);
        int vbincrease_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal803=null;
        Token TOKEN804=null;

        Object string_literal803_tree=null;
        Object TOKEN804_tree=null;
        RewriteRuleTokenStream stream_113=new RewriteRuleTokenStream(adaptor,"token 113");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 185) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:11: ( 'VB-INCREASE' TOKEN -> ^( 'VB-INCREASE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:12: 'VB-INCREASE' TOKEN
            {
            string_literal803=(Token)match(input,113,FOLLOW_113_in_vbincrease4201_static.FOLLOW_113_in_vbincrease4201); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_113.add(string_literal803);

            TOKEN804=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbincrease4203_static.FOLLOW_TOKEN_in_vbincrease4203); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN804);



            // AST REWRITE
            // elements: TOKEN, 113
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 426:32: -> ^( 'VB-INCREASE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:35: ^( 'VB-INCREASE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_113.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 185, vbincrease_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbincrease"

    public static class vbimmerse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbimmerse"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:1: vbimmerse : 'VB-IMMERSE' TOKEN -> ^( 'VB-IMMERSE' TOKEN ) ;
    public final ChemicalChunkerParser.vbimmerse_return vbimmerse() throws RecognitionException {
        ChemicalChunkerParser.vbimmerse_return retval = new ChemicalChunkerParser.vbimmerse_return();
        retval.start = input.LT(1);
        int vbimmerse_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal805=null;
        Token TOKEN806=null;

        Object string_literal805_tree=null;
        Object TOKEN806_tree=null;
        RewriteRuleTokenStream stream_114=new RewriteRuleTokenStream(adaptor,"token 114");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 186) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:10: ( 'VB-IMMERSE' TOKEN -> ^( 'VB-IMMERSE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:11: 'VB-IMMERSE' TOKEN
            {
            string_literal805=(Token)match(input,114,FOLLOW_114_in_vbimmerse4218_static.FOLLOW_114_in_vbimmerse4218); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_114.add(string_literal805);

            TOKEN806=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbimmerse4220_static.FOLLOW_TOKEN_in_vbimmerse4220); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN806);



            // AST REWRITE
            // elements: 114, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 429:30: -> ^( 'VB-IMMERSE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:33: ^( 'VB-IMMERSE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_114.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 186, vbimmerse_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbimmerse"

    public static class vbpartition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpartition"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:432:1: vbpartition : 'VB-PARTITION' TOKEN -> ^( 'VB-PARTITION' TOKEN ) ;
    public final ChemicalChunkerParser.vbpartition_return vbpartition() throws RecognitionException {
        ChemicalChunkerParser.vbpartition_return retval = new ChemicalChunkerParser.vbpartition_return();
        retval.start = input.LT(1);
        int vbpartition_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal807=null;
        Token TOKEN808=null;

        Object string_literal807_tree=null;
        Object TOKEN808_tree=null;
        RewriteRuleTokenStream stream_115=new RewriteRuleTokenStream(adaptor,"token 115");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 187) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:432:12: ( 'VB-PARTITION' TOKEN -> ^( 'VB-PARTITION' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:432:13: 'VB-PARTITION' TOKEN
            {
            string_literal807=(Token)match(input,115,FOLLOW_115_in_vbpartition4235_static.FOLLOW_115_in_vbpartition4235); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_115.add(string_literal807);

            TOKEN808=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpartition4237_static.FOLLOW_TOKEN_in_vbpartition4237); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN808);



            // AST REWRITE
            // elements: 115, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 432:34: -> ^( 'VB-PARTITION' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:432:37: ^( 'VB-PARTITION' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_115.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 187, vbpartition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbpartition"

    public static class vbprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbprecipitate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:435:1: vbprecipitate : 'VB-PRECIPITATE' TOKEN -> ^( 'VB-PRECIPITATE' TOKEN ) ;
    public final ChemicalChunkerParser.vbprecipitate_return vbprecipitate() throws RecognitionException {
        ChemicalChunkerParser.vbprecipitate_return retval = new ChemicalChunkerParser.vbprecipitate_return();
        retval.start = input.LT(1);
        int vbprecipitate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal809=null;
        Token TOKEN810=null;

        Object string_literal809_tree=null;
        Object TOKEN810_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 188) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:435:14: ( 'VB-PRECIPITATE' TOKEN -> ^( 'VB-PRECIPITATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:435:15: 'VB-PRECIPITATE' TOKEN
            {
            string_literal809=(Token)match(input,116,FOLLOW_116_in_vbprecipitate4252_static.FOLLOW_116_in_vbprecipitate4252); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(string_literal809);

            TOKEN810=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbprecipitate4254_static.FOLLOW_TOKEN_in_vbprecipitate4254); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN810);



            // AST REWRITE
            // elements: TOKEN, 116
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 435:38: -> ^( 'VB-PRECIPITATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:435:41: ^( 'VB-PRECIPITATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_116.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 188, vbprecipitate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbprecipitate"

    public static class nnprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnprecipitate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:1: nnprecipitate : 'NN-PRECIPITATE' TOKEN -> ^( 'NN-PRECIPITATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnprecipitate_return nnprecipitate() throws RecognitionException {
        ChemicalChunkerParser.nnprecipitate_return retval = new ChemicalChunkerParser.nnprecipitate_return();
        retval.start = input.LT(1);
        int nnprecipitate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal811=null;
        Token TOKEN812=null;

        Object string_literal811_tree=null;
        Object TOKEN812_tree=null;
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 189) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:14: ( 'NN-PRECIPITATE' TOKEN -> ^( 'NN-PRECIPITATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:15: 'NN-PRECIPITATE' TOKEN
            {
            string_literal811=(Token)match(input,117,FOLLOW_117_in_nnprecipitate4267_static.FOLLOW_117_in_nnprecipitate4267); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(string_literal811);

            TOKEN812=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnprecipitate4269_static.FOLLOW_TOKEN_in_nnprecipitate4269); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN812);



            // AST REWRITE
            // elements: TOKEN, 117
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 436:38: -> ^( 'NN-PRECIPITATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:41: ^( 'NN-PRECIPITATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_117.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 189, nnprecipitate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnprecipitate"

    public static class vbpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpurify"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:1: vbpurify : 'VB-PURIFY' TOKEN -> ^( 'VB-PURIFY' TOKEN ) ;
    public final ChemicalChunkerParser.vbpurify_return vbpurify() throws RecognitionException {
        ChemicalChunkerParser.vbpurify_return retval = new ChemicalChunkerParser.vbpurify_return();
        retval.start = input.LT(1);
        int vbpurify_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal813=null;
        Token TOKEN814=null;

        Object string_literal813_tree=null;
        Object TOKEN814_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 190) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:9: ( 'VB-PURIFY' TOKEN -> ^( 'VB-PURIFY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:10: 'VB-PURIFY' TOKEN
            {
            string_literal813=(Token)match(input,118,FOLLOW_118_in_vbpurify4284_static.FOLLOW_118_in_vbpurify4284); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(string_literal813);

            TOKEN814=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpurify4286_static.FOLLOW_TOKEN_in_vbpurify4286); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN814);



            // AST REWRITE
            // elements: 118, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 439:28: -> ^( 'VB-PURIFY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:31: ^( 'VB-PURIFY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_118.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 190, vbpurify_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbpurify"

    public static class nnpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpurify"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:1: nnpurify : 'NN-PURIFY' TOKEN -> ^( 'NN-PURIFY' TOKEN ) ;
    public final ChemicalChunkerParser.nnpurify_return nnpurify() throws RecognitionException {
        ChemicalChunkerParser.nnpurify_return retval = new ChemicalChunkerParser.nnpurify_return();
        retval.start = input.LT(1);
        int nnpurify_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal815=null;
        Token TOKEN816=null;

        Object string_literal815_tree=null;
        Object TOKEN816_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 191) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:9: ( 'NN-PURIFY' TOKEN -> ^( 'NN-PURIFY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:10: 'NN-PURIFY' TOKEN
            {
            string_literal815=(Token)match(input,119,FOLLOW_119_in_nnpurify4299_static.FOLLOW_119_in_nnpurify4299); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(string_literal815);

            TOKEN816=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpurify4301_static.FOLLOW_TOKEN_in_nnpurify4301); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN816);



            // AST REWRITE
            // elements: TOKEN, 119
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 440:28: -> ^( 'NN-PURIFY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:31: ^( 'NN-PURIFY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_119.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 191, nnpurify_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpurify"

    public static class vbquench_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbquench"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:1: vbquench : 'VB-QUENCH' TOKEN -> ^( 'VB-QUENCH' TOKEN ) ;
    public final ChemicalChunkerParser.vbquench_return vbquench() throws RecognitionException {
        ChemicalChunkerParser.vbquench_return retval = new ChemicalChunkerParser.vbquench_return();
        retval.start = input.LT(1);
        int vbquench_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal817=null;
        Token TOKEN818=null;

        Object string_literal817_tree=null;
        Object TOKEN818_tree=null;
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 192) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:9: ( 'VB-QUENCH' TOKEN -> ^( 'VB-QUENCH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:10: 'VB-QUENCH' TOKEN
            {
            string_literal817=(Token)match(input,120,FOLLOW_120_in_vbquench4316_static.FOLLOW_120_in_vbquench4316); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(string_literal817);

            TOKEN818=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbquench4318_static.FOLLOW_TOKEN_in_vbquench4318); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN818);



            // AST REWRITE
            // elements: 120, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 443:28: -> ^( 'VB-QUENCH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:31: ^( 'VB-QUENCH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_120.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 192, vbquench_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbquench"

    public static class vbrecover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbrecover"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:1: vbrecover : 'VB-RECOVER' TOKEN -> ^( 'VB-RECOVER' TOKEN ) ;
    public final ChemicalChunkerParser.vbrecover_return vbrecover() throws RecognitionException {
        ChemicalChunkerParser.vbrecover_return retval = new ChemicalChunkerParser.vbrecover_return();
        retval.start = input.LT(1);
        int vbrecover_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal819=null;
        Token TOKEN820=null;

        Object string_literal819_tree=null;
        Object TOKEN820_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 193) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:10: ( 'VB-RECOVER' TOKEN -> ^( 'VB-RECOVER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:11: 'VB-RECOVER' TOKEN
            {
            string_literal819=(Token)match(input,121,FOLLOW_121_in_vbrecover4333_static.FOLLOW_121_in_vbrecover4333); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(string_literal819);

            TOKEN820=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbrecover4335_static.FOLLOW_TOKEN_in_vbrecover4335); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN820);



            // AST REWRITE
            // elements: 121, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 446:30: -> ^( 'VB-RECOVER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:33: ^( 'VB-RECOVER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_121.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 193, vbrecover_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbrecover"

    public static class vbremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbremove"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:449:1: vbremove : 'VB-REMOVE' TOKEN -> ^( 'VB-REMOVE' TOKEN ) ;
    public final ChemicalChunkerParser.vbremove_return vbremove() throws RecognitionException {
        ChemicalChunkerParser.vbremove_return retval = new ChemicalChunkerParser.vbremove_return();
        retval.start = input.LT(1);
        int vbremove_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal821=null;
        Token TOKEN822=null;

        Object string_literal821_tree=null;
        Object TOKEN822_tree=null;
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 194) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:449:9: ( 'VB-REMOVE' TOKEN -> ^( 'VB-REMOVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:449:10: 'VB-REMOVE' TOKEN
            {
            string_literal821=(Token)match(input,122,FOLLOW_122_in_vbremove4350_static.FOLLOW_122_in_vbremove4350); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_122.add(string_literal821);

            TOKEN822=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbremove4352_static.FOLLOW_TOKEN_in_vbremove4352); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN822);



            // AST REWRITE
            // elements: TOKEN, 122
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 449:28: -> ^( 'VB-REMOVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:449:31: ^( 'VB-REMOVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_122.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 194, vbremove_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbremove"

    public static class nnremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnremove"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:1: nnremove : 'NN-REMOVE' TOKEN -> ^( 'NN-REMOVE' TOKEN ) ;
    public final ChemicalChunkerParser.nnremove_return nnremove() throws RecognitionException {
        ChemicalChunkerParser.nnremove_return retval = new ChemicalChunkerParser.nnremove_return();
        retval.start = input.LT(1);
        int nnremove_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal823=null;
        Token TOKEN824=null;

        Object string_literal823_tree=null;
        Object TOKEN824_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 195) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:9: ( 'NN-REMOVE' TOKEN -> ^( 'NN-REMOVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:10: 'NN-REMOVE' TOKEN
            {
            string_literal823=(Token)match(input,123,FOLLOW_123_in_nnremove4365_static.FOLLOW_123_in_nnremove4365); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_123.add(string_literal823);

            TOKEN824=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnremove4367_static.FOLLOW_TOKEN_in_nnremove4367); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN824);



            // AST REWRITE
            // elements: 123, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 450:28: -> ^( 'NN-REMOVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:31: ^( 'NN-REMOVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_123.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 195, nnremove_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnremove"

    public static class vbstir_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbstir"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:453:1: vbstir : 'VB-STIR' TOKEN -> ^( 'VB-STIR' TOKEN ) ;
    public final ChemicalChunkerParser.vbstir_return vbstir() throws RecognitionException {
        ChemicalChunkerParser.vbstir_return retval = new ChemicalChunkerParser.vbstir_return();
        retval.start = input.LT(1);
        int vbstir_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal825=null;
        Token TOKEN826=null;

        Object string_literal825_tree=null;
        Object TOKEN826_tree=null;
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 196) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:453:7: ( 'VB-STIR' TOKEN -> ^( 'VB-STIR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:453:8: 'VB-STIR' TOKEN
            {
            string_literal825=(Token)match(input,124,FOLLOW_124_in_vbstir4382_static.FOLLOW_124_in_vbstir4382); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_124.add(string_literal825);

            TOKEN826=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbstir4384_static.FOLLOW_TOKEN_in_vbstir4384); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN826);



            // AST REWRITE
            // elements: TOKEN, 124
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 453:24: -> ^( 'VB-STIR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:453:27: ^( 'VB-STIR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_124.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 196, vbstir_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbstir"

    public static class vbsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsynthesize"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:456:1: vbsynthesize : 'VB-SYNTHESIZE' TOKEN -> ^( 'VB-SYNTHESIZE' TOKEN ) ;
    public final ChemicalChunkerParser.vbsynthesize_return vbsynthesize() throws RecognitionException {
        ChemicalChunkerParser.vbsynthesize_return retval = new ChemicalChunkerParser.vbsynthesize_return();
        retval.start = input.LT(1);
        int vbsynthesize_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal827=null;
        Token TOKEN828=null;

        Object string_literal827_tree=null;
        Object TOKEN828_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 197) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:456:13: ( 'VB-SYNTHESIZE' TOKEN -> ^( 'VB-SYNTHESIZE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:456:14: 'VB-SYNTHESIZE' TOKEN
            {
            string_literal827=(Token)match(input,125,FOLLOW_125_in_vbsynthesize4399_static.FOLLOW_125_in_vbsynthesize4399); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_125.add(string_literal827);

            TOKEN828=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsynthesize4401_static.FOLLOW_TOKEN_in_vbsynthesize4401); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN828);



            // AST REWRITE
            // elements: 125, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 456:36: -> ^( 'VB-SYNTHESIZE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:456:39: ^( 'VB-SYNTHESIZE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_125.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 197, vbsynthesize_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsynthesize"

    public static class nnsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnsynthesize"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:1: nnsynthesize : 'NN-SYNTHESIZE' TOKEN -> ^( 'NN-SYNTHESIZE' TOKEN ) ;
    public final ChemicalChunkerParser.nnsynthesize_return nnsynthesize() throws RecognitionException {
        ChemicalChunkerParser.nnsynthesize_return retval = new ChemicalChunkerParser.nnsynthesize_return();
        retval.start = input.LT(1);
        int nnsynthesize_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal829=null;
        Token TOKEN830=null;

        Object string_literal829_tree=null;
        Object TOKEN830_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 198) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:13: ( 'NN-SYNTHESIZE' TOKEN -> ^( 'NN-SYNTHESIZE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:14: 'NN-SYNTHESIZE' TOKEN
            {
            string_literal829=(Token)match(input,126,FOLLOW_126_in_nnsynthesize4414_static.FOLLOW_126_in_nnsynthesize4414); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(string_literal829);

            TOKEN830=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnsynthesize4416_static.FOLLOW_TOKEN_in_nnsynthesize4416); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN830);



            // AST REWRITE
            // elements: TOKEN, 126
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 457:36: -> ^( 'NN-SYNTHESIZE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:39: ^( 'NN-SYNTHESIZE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_126.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 198, nnsynthesize_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnsynthesize"

    public static class vbwait_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwait"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:460:1: vbwait : 'VB-WAIT' TOKEN -> ^( 'VB-WAIT' TOKEN ) ;
    public final ChemicalChunkerParser.vbwait_return vbwait() throws RecognitionException {
        ChemicalChunkerParser.vbwait_return retval = new ChemicalChunkerParser.vbwait_return();
        retval.start = input.LT(1);
        int vbwait_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal831=null;
        Token TOKEN832=null;

        Object string_literal831_tree=null;
        Object TOKEN832_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 199) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:460:7: ( 'VB-WAIT' TOKEN -> ^( 'VB-WAIT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:460:8: 'VB-WAIT' TOKEN
            {
            string_literal831=(Token)match(input,127,FOLLOW_127_in_vbwait4431_static.FOLLOW_127_in_vbwait4431); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(string_literal831);

            TOKEN832=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwait4433_static.FOLLOW_TOKEN_in_vbwait4433); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN832);



            // AST REWRITE
            // elements: TOKEN, 127
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 460:24: -> ^( 'VB-WAIT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:460:27: ^( 'VB-WAIT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_127.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 199, vbwait_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbwait"

    public static class vbwash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:463:1: vbwash : 'VB-WASH' TOKEN -> ^( 'VB-WASH' TOKEN ) ;
    public final ChemicalChunkerParser.vbwash_return vbwash() throws RecognitionException {
        ChemicalChunkerParser.vbwash_return retval = new ChemicalChunkerParser.vbwash_return();
        retval.start = input.LT(1);
        int vbwash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal833=null;
        Token TOKEN834=null;

        Object string_literal833_tree=null;
        Object TOKEN834_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 200) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:463:7: ( 'VB-WASH' TOKEN -> ^( 'VB-WASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:463:8: 'VB-WASH' TOKEN
            {
            string_literal833=(Token)match(input,128,FOLLOW_128_in_vbwash4448_static.FOLLOW_128_in_vbwash4448); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(string_literal833);

            TOKEN834=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwash4450_static.FOLLOW_TOKEN_in_vbwash4450); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN834);



            // AST REWRITE
            // elements: 128, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 463:24: -> ^( 'VB-WASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:463:27: ^( 'VB-WASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_128.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 200, vbwash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbwash"

    public static class vbyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbyield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:466:1: vbyield : 'VB-YIELD' TOKEN -> ^( 'VB-YIELD' TOKEN ) ;
    public final ChemicalChunkerParser.vbyield_return vbyield() throws RecognitionException {
        ChemicalChunkerParser.vbyield_return retval = new ChemicalChunkerParser.vbyield_return();
        retval.start = input.LT(1);
        int vbyield_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal835=null;
        Token TOKEN836=null;

        Object string_literal835_tree=null;
        Object TOKEN836_tree=null;
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 201) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:466:8: ( 'VB-YIELD' TOKEN -> ^( 'VB-YIELD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:466:9: 'VB-YIELD' TOKEN
            {
            string_literal835=(Token)match(input,129,FOLLOW_129_in_vbyield4465_static.FOLLOW_129_in_vbyield4465); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(string_literal835);

            TOKEN836=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbyield4467_static.FOLLOW_TOKEN_in_vbyield4467); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN836);



            // AST REWRITE
            // elements: 129, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 466:26: -> ^( 'VB-YIELD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:466:29: ^( 'VB-YIELD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_129.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 201, vbyield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbyield"

    public static class nnyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnyield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:1: nnyield : 'NN-YIELD' TOKEN -> ^( 'NN-YIELD' TOKEN ) ;
    public final ChemicalChunkerParser.nnyield_return nnyield() throws RecognitionException {
        ChemicalChunkerParser.nnyield_return retval = new ChemicalChunkerParser.nnyield_return();
        retval.start = input.LT(1);
        int nnyield_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal837=null;
        Token TOKEN838=null;

        Object string_literal837_tree=null;
        Object TOKEN838_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 202) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:8: ( 'NN-YIELD' TOKEN -> ^( 'NN-YIELD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:9: 'NN-YIELD' TOKEN
            {
            string_literal837=(Token)match(input,130,FOLLOW_130_in_nnyield4482_static.FOLLOW_130_in_nnyield4482); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(string_literal837);

            TOKEN838=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnyield4484_static.FOLLOW_TOKEN_in_nnyield4484); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN838);



            // AST REWRITE
            // elements: 130, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 469:26: -> ^( 'NN-YIELD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:29: ^( 'NN-YIELD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_130.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 202, nnyield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnyield"

    public static class rbconj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbconj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:473:1: rbconj : 'RB-CONJ' TOKEN -> ^( 'RB-CONJ' TOKEN ) ;
    public final ChemicalChunkerParser.rbconj_return rbconj() throws RecognitionException {
        ChemicalChunkerParser.rbconj_return retval = new ChemicalChunkerParser.rbconj_return();
        retval.start = input.LT(1);
        int rbconj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal839=null;
        Token TOKEN840=null;

        Object string_literal839_tree=null;
        Object TOKEN840_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 203) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:473:7: ( 'RB-CONJ' TOKEN -> ^( 'RB-CONJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:473:8: 'RB-CONJ' TOKEN
            {
            string_literal839=(Token)match(input,131,FOLLOW_131_in_rbconj4500_static.FOLLOW_131_in_rbconj4500); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(string_literal839);

            TOKEN840=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbconj4502_static.FOLLOW_TOKEN_in_rbconj4502); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN840);



            // AST REWRITE
            // elements: TOKEN, 131
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 473:24: -> ^( 'RB-CONJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:473:27: ^( 'RB-CONJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_131.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 203, rbconj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbconj"

    public static class colon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "colon"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:474:1: colon : 'COLON' TOKEN -> ^( 'COLON' TOKEN ) ;
    public final ChemicalChunkerParser.colon_return colon() throws RecognitionException {
        ChemicalChunkerParser.colon_return retval = new ChemicalChunkerParser.colon_return();
        retval.start = input.LT(1);
        int colon_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal841=null;
        Token TOKEN842=null;

        Object string_literal841_tree=null;
        Object TOKEN842_tree=null;
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 204) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:474:6: ( 'COLON' TOKEN -> ^( 'COLON' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:474:7: 'COLON' TOKEN
            {
            string_literal841=(Token)match(input,132,FOLLOW_132_in_colon4515_static.FOLLOW_132_in_colon4515); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_132.add(string_literal841);

            TOKEN842=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_colon4517_static.FOLLOW_TOKEN_in_colon4517); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN842);



            // AST REWRITE
            // elements: 132, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 474:21: -> ^( 'COLON' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:474:24: ^( 'COLON' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_132.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 204, colon_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "colon"

    public static class comma_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comma"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:1: comma : 'COMMA' TOKEN -> ^( 'COMMA' TOKEN ) ;
    public final ChemicalChunkerParser.comma_return comma() throws RecognitionException {
        ChemicalChunkerParser.comma_return retval = new ChemicalChunkerParser.comma_return();
        retval.start = input.LT(1);
        int comma_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal843=null;
        Token TOKEN844=null;

        Object string_literal843_tree=null;
        Object TOKEN844_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 205) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:6: ( 'COMMA' TOKEN -> ^( 'COMMA' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:7: 'COMMA' TOKEN
            {
            string_literal843=(Token)match(input,133,FOLLOW_133_in_comma4530_static.FOLLOW_133_in_comma4530); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(string_literal843);

            TOKEN844=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_comma4532_static.FOLLOW_TOKEN_in_comma4532); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN844);



            // AST REWRITE
            // elements: TOKEN, 133
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 475:21: -> ^( 'COMMA' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:24: ^( 'COMMA' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_133.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 205, comma_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "comma"

    public static class apost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apost"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:1: apost : 'APOST' TOKEN -> ^( 'APOST' TOKEN ) ;
    public final ChemicalChunkerParser.apost_return apost() throws RecognitionException {
        ChemicalChunkerParser.apost_return retval = new ChemicalChunkerParser.apost_return();
        retval.start = input.LT(1);
        int apost_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal845=null;
        Token TOKEN846=null;

        Object string_literal845_tree=null;
        Object TOKEN846_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 206) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:6: ( 'APOST' TOKEN -> ^( 'APOST' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:7: 'APOST' TOKEN
            {
            string_literal845=(Token)match(input,134,FOLLOW_134_in_apost4545_static.FOLLOW_134_in_apost4545); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(string_literal845);

            TOKEN846=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_apost4547_static.FOLLOW_TOKEN_in_apost4547); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN846);



            // AST REWRITE
            // elements: TOKEN, 134
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 476:21: -> ^( 'APOST' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:24: ^( 'APOST' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_134.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 206, apost_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "apost"

    public static class neg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neg"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:477:1: neg : 'NEG' TOKEN -> ^( 'NEG' TOKEN ) ;
    public final ChemicalChunkerParser.neg_return neg() throws RecognitionException {
        ChemicalChunkerParser.neg_return retval = new ChemicalChunkerParser.neg_return();
        retval.start = input.LT(1);
        int neg_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal847=null;
        Token TOKEN848=null;

        Object string_literal847_tree=null;
        Object TOKEN848_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 207) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:477:4: ( 'NEG' TOKEN -> ^( 'NEG' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:477:5: 'NEG' TOKEN
            {
            string_literal847=(Token)match(input,135,FOLLOW_135_in_neg4560_static.FOLLOW_135_in_neg4560); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(string_literal847);

            TOKEN848=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_neg4562_static.FOLLOW_TOKEN_in_neg4562); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN848);



            // AST REWRITE
            // elements: 135, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 477:17: -> ^( 'NEG' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:477:20: ^( 'NEG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_135.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 207, neg_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "neg"

    public static class dash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:478:1: dash : 'DASH' TOKEN -> ^( 'DASH' TOKEN ) ;
    public final ChemicalChunkerParser.dash_return dash() throws RecognitionException {
        ChemicalChunkerParser.dash_return retval = new ChemicalChunkerParser.dash_return();
        retval.start = input.LT(1);
        int dash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal849=null;
        Token TOKEN850=null;

        Object string_literal849_tree=null;
        Object TOKEN850_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 208) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:478:5: ( 'DASH' TOKEN -> ^( 'DASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:478:6: 'DASH' TOKEN
            {
            string_literal849=(Token)match(input,136,FOLLOW_136_in_dash4575_static.FOLLOW_136_in_dash4575); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(string_literal849);

            TOKEN850=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dash4577_static.FOLLOW_TOKEN_in_dash4577); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN850);



            // AST REWRITE
            // elements: 136, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 478:19: -> ^( 'DASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:478:22: ^( 'DASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_136.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 208, dash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dash"

    public static class stop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stop"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:479:1: stop : 'STOP' TOKEN -> ^( 'STOP' TOKEN ) ;
    public final ChemicalChunkerParser.stop_return stop() throws RecognitionException {
        ChemicalChunkerParser.stop_return retval = new ChemicalChunkerParser.stop_return();
        retval.start = input.LT(1);
        int stop_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal851=null;
        Token TOKEN852=null;

        Object string_literal851_tree=null;
        Object TOKEN852_tree=null;
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 209) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:479:5: ( 'STOP' TOKEN -> ^( 'STOP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:479:6: 'STOP' TOKEN
            {
            string_literal851=(Token)match(input,137,FOLLOW_137_in_stop4590_static.FOLLOW_137_in_stop4590); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_137.add(string_literal851);

            TOKEN852=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_stop4592_static.FOLLOW_TOKEN_in_stop4592); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN852);



            // AST REWRITE
            // elements: TOKEN, 137
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 479:19: -> ^( 'STOP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:479:22: ^( 'STOP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_137.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 209, stop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "stop"

    public static class nnpercent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpercent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:480:1: nnpercent : 'NN-PERCENT' TOKEN -> ^( 'NN-PERCENT' TOKEN ) ;
    public final ChemicalChunkerParser.nnpercent_return nnpercent() throws RecognitionException {
        ChemicalChunkerParser.nnpercent_return retval = new ChemicalChunkerParser.nnpercent_return();
        retval.start = input.LT(1);
        int nnpercent_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal853=null;
        Token TOKEN854=null;

        Object string_literal853_tree=null;
        Object TOKEN854_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 210) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:480:10: ( 'NN-PERCENT' TOKEN -> ^( 'NN-PERCENT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:480:11: 'NN-PERCENT' TOKEN
            {
            string_literal853=(Token)match(input,138,FOLLOW_138_in_nnpercent4605_static.FOLLOW_138_in_nnpercent4605); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_138.add(string_literal853);

            TOKEN854=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpercent4607_static.FOLLOW_TOKEN_in_nnpercent4607); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN854);



            // AST REWRITE
            // elements: 138, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 480:30: -> ^( 'NN-PERCENT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:480:33: ^( 'NN-PERCENT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_138.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 210, nnpercent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpercent"

    public static class lsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lsqb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:481:1: lsqb : 'LSQB' TOKEN -> ^( 'LSQB' TOKEN ) ;
    public final ChemicalChunkerParser.lsqb_return lsqb() throws RecognitionException {
        ChemicalChunkerParser.lsqb_return retval = new ChemicalChunkerParser.lsqb_return();
        retval.start = input.LT(1);
        int lsqb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal855=null;
        Token TOKEN856=null;

        Object string_literal855_tree=null;
        Object TOKEN856_tree=null;
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 211) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:481:5: ( 'LSQB' TOKEN -> ^( 'LSQB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:481:6: 'LSQB' TOKEN
            {
            string_literal855=(Token)match(input,139,FOLLOW_139_in_lsqb4620_static.FOLLOW_139_in_lsqb4620); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_139.add(string_literal855);

            TOKEN856=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lsqb4622_static.FOLLOW_TOKEN_in_lsqb4622); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN856);



            // AST REWRITE
            // elements: TOKEN, 139
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 481:19: -> ^( 'LSQB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:481:22: ^( 'LSQB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_139.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 211, lsqb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lsqb"

    public static class rsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rsqb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:482:1: rsqb : 'RSQB' TOKEN -> ^( 'RSQB' TOKEN ) ;
    public final ChemicalChunkerParser.rsqb_return rsqb() throws RecognitionException {
        ChemicalChunkerParser.rsqb_return retval = new ChemicalChunkerParser.rsqb_return();
        retval.start = input.LT(1);
        int rsqb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal857=null;
        Token TOKEN858=null;

        Object string_literal857_tree=null;
        Object TOKEN858_tree=null;
        RewriteRuleTokenStream stream_140=new RewriteRuleTokenStream(adaptor,"token 140");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 212) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:482:5: ( 'RSQB' TOKEN -> ^( 'RSQB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:482:6: 'RSQB' TOKEN
            {
            string_literal857=(Token)match(input,140,FOLLOW_140_in_rsqb4635_static.FOLLOW_140_in_rsqb4635); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_140.add(string_literal857);

            TOKEN858=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rsqb4637_static.FOLLOW_TOKEN_in_rsqb4637); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN858);



            // AST REWRITE
            // elements: TOKEN, 140
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 482:19: -> ^( 'RSQB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:482:22: ^( 'RSQB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_140.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 212, rsqb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rsqb"

    public static class nnidentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnidentifier"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:484:1: nnidentifier : 'NN-IDENTIFIER' TOKEN -> ^( 'NN-IDENTIFIER' TOKEN ) ;
    public final ChemicalChunkerParser.nnidentifier_return nnidentifier() throws RecognitionException {
        ChemicalChunkerParser.nnidentifier_return retval = new ChemicalChunkerParser.nnidentifier_return();
        retval.start = input.LT(1);
        int nnidentifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal859=null;
        Token TOKEN860=null;

        Object string_literal859_tree=null;
        Object TOKEN860_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 213) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:484:13: ( 'NN-IDENTIFIER' TOKEN -> ^( 'NN-IDENTIFIER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:484:14: 'NN-IDENTIFIER' TOKEN
            {
            string_literal859=(Token)match(input,141,FOLLOW_141_in_nnidentifier4651_static.FOLLOW_141_in_nnidentifier4651); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_141.add(string_literal859);

            TOKEN860=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnidentifier4653_static.FOLLOW_TOKEN_in_nnidentifier4653); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN860);



            // AST REWRITE
            // elements: TOKEN, 141
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 484:36: -> ^( 'NN-IDENTIFIER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:484:39: ^( 'NN-IDENTIFIER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_141.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 213, nnidentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnidentifier"

    public static class dtTHE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dtTHE"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:487:1: dtTHE : 'DT-THE' TOKEN -> ^( 'DT-THE' TOKEN ) ;
    public final ChemicalChunkerParser.dtTHE_return dtTHE() throws RecognitionException {
        ChemicalChunkerParser.dtTHE_return retval = new ChemicalChunkerParser.dtTHE_return();
        retval.start = input.LT(1);
        int dtTHE_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal861=null;
        Token TOKEN862=null;

        Object string_literal861_tree=null;
        Object TOKEN862_tree=null;
        RewriteRuleTokenStream stream_142=new RewriteRuleTokenStream(adaptor,"token 142");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 214) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:487:6: ( 'DT-THE' TOKEN -> ^( 'DT-THE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:487:7: 'DT-THE' TOKEN
            {
            string_literal861=(Token)match(input,142,FOLLOW_142_in_dtTHE4668_static.FOLLOW_142_in_dtTHE4668); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_142.add(string_literal861);

            TOKEN862=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dtTHE4670_static.FOLLOW_TOKEN_in_dtTHE4670); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN862);



            // AST REWRITE
            // elements: 142, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 487:22: -> ^( 'DT-THE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:487:25: ^( 'DT-THE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_142.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 214, dtTHE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dtTHE"

    public static class lrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:1: lrb : '-LRB-' TOKEN -> ^( '-LRB-' TOKEN ) ;
    public final ChemicalChunkerParser.lrb_return lrb() throws RecognitionException {
        ChemicalChunkerParser.lrb_return retval = new ChemicalChunkerParser.lrb_return();
        retval.start = input.LT(1);
        int lrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal863=null;
        Token TOKEN864=null;

        Object string_literal863_tree=null;
        Object TOKEN864_tree=null;
        RewriteRuleTokenStream stream_143=new RewriteRuleTokenStream(adaptor,"token 143");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 215) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:4: ( '-LRB-' TOKEN -> ^( '-LRB-' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:5: '-LRB-' TOKEN
            {
            string_literal863=(Token)match(input,143,FOLLOW_143_in_lrb4684_static.FOLLOW_143_in_lrb4684); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_143.add(string_literal863);

            TOKEN864=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lrb4686_static.FOLLOW_TOKEN_in_lrb4686); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN864);



            // AST REWRITE
            // elements: 143, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 489:19: -> ^( '-LRB-' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:22: ^( '-LRB-' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_143.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 215, lrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lrb"

    public static class rrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:490:1: rrb : '-RRB-' TOKEN -> ^( '-RRB-' TOKEN ) ;
    public final ChemicalChunkerParser.rrb_return rrb() throws RecognitionException {
        ChemicalChunkerParser.rrb_return retval = new ChemicalChunkerParser.rrb_return();
        retval.start = input.LT(1);
        int rrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal865=null;
        Token TOKEN866=null;

        Object string_literal865_tree=null;
        Object TOKEN866_tree=null;
        RewriteRuleTokenStream stream_144=new RewriteRuleTokenStream(adaptor,"token 144");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 216) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:490:4: ( '-RRB-' TOKEN -> ^( '-RRB-' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:490:5: '-RRB-' TOKEN
            {
            string_literal865=(Token)match(input,144,FOLLOW_144_in_rrb4699_static.FOLLOW_144_in_rrb4699); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_144.add(string_literal865);

            TOKEN866=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rrb4701_static.FOLLOW_TOKEN_in_rrb4701); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN866);



            // AST REWRITE
            // elements: TOKEN, 144
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 490:19: -> ^( '-RRB-' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:490:22: ^( '-RRB-' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_144.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 216, rrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rrb"

    public static class cc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cc"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:495:1: cc : 'CC' TOKEN -> ^( 'CC' TOKEN ) ;
    public final ChemicalChunkerParser.cc_return cc() throws RecognitionException {
        ChemicalChunkerParser.cc_return retval = new ChemicalChunkerParser.cc_return();
        retval.start = input.LT(1);
        int cc_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal867=null;
        Token TOKEN868=null;

        Object string_literal867_tree=null;
        Object TOKEN868_tree=null;
        RewriteRuleTokenStream stream_145=new RewriteRuleTokenStream(adaptor,"token 145");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 217) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:495:3: ( 'CC' TOKEN -> ^( 'CC' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:495:4: 'CC' TOKEN
            {
            string_literal867=(Token)match(input,145,FOLLOW_145_in_cc4718_static.FOLLOW_145_in_cc4718); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_145.add(string_literal867);

            TOKEN868=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cc4720_static.FOLLOW_TOKEN_in_cc4720); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN868);



            // AST REWRITE
            // elements: 145, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 495:15: -> ^( 'CC' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:495:18: ^( 'CC' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_145.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 217, cc_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cc"

    public static class cd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:498:1: cd : 'CD' TOKEN -> ^( 'CD' TOKEN ) ;
    public final ChemicalChunkerParser.cd_return cd() throws RecognitionException {
        ChemicalChunkerParser.cd_return retval = new ChemicalChunkerParser.cd_return();
        retval.start = input.LT(1);
        int cd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal869=null;
        Token TOKEN870=null;

        Object string_literal869_tree=null;
        Object TOKEN870_tree=null;
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 218) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:498:3: ( 'CD' TOKEN -> ^( 'CD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:498:4: 'CD' TOKEN
            {
            string_literal869=(Token)match(input,146,FOLLOW_146_in_cd4735_static.FOLLOW_146_in_cd4735); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_146.add(string_literal869);

            TOKEN870=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cd4737_static.FOLLOW_TOKEN_in_cd4737); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN870);



            // AST REWRITE
            // elements: 146, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 498:15: -> ^( 'CD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:498:18: ^( 'CD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_146.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 218, cd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cd"

    public static class dt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:501:1: dt : 'DT' TOKEN -> ^( 'DT' TOKEN ) ;
    public final ChemicalChunkerParser.dt_return dt() throws RecognitionException {
        ChemicalChunkerParser.dt_return retval = new ChemicalChunkerParser.dt_return();
        retval.start = input.LT(1);
        int dt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal871=null;
        Token TOKEN872=null;

        Object string_literal871_tree=null;
        Object TOKEN872_tree=null;
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 219) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:501:3: ( 'DT' TOKEN -> ^( 'DT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:501:4: 'DT' TOKEN
            {
            string_literal871=(Token)match(input,147,FOLLOW_147_in_dt4752_static.FOLLOW_147_in_dt4752); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_147.add(string_literal871);

            TOKEN872=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dt4754_static.FOLLOW_TOKEN_in_dt4754); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN872);



            // AST REWRITE
            // elements: 147, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 501:15: -> ^( 'DT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:501:18: ^( 'DT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_147.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 219, dt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dt"

    public static class ex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ex"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:504:1: ex : 'EX' TOKEN -> ^( 'EX' TOKEN ) ;
    public final ChemicalChunkerParser.ex_return ex() throws RecognitionException {
        ChemicalChunkerParser.ex_return retval = new ChemicalChunkerParser.ex_return();
        retval.start = input.LT(1);
        int ex_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal873=null;
        Token TOKEN874=null;

        Object string_literal873_tree=null;
        Object TOKEN874_tree=null;
        RewriteRuleTokenStream stream_148=new RewriteRuleTokenStream(adaptor,"token 148");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 220) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:504:3: ( 'EX' TOKEN -> ^( 'EX' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:504:4: 'EX' TOKEN
            {
            string_literal873=(Token)match(input,148,FOLLOW_148_in_ex4769_static.FOLLOW_148_in_ex4769); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_148.add(string_literal873);

            TOKEN874=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ex4771_static.FOLLOW_TOKEN_in_ex4771); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN874);



            // AST REWRITE
            // elements: TOKEN, 148
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 504:15: -> ^( 'EX' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:504:18: ^( 'EX' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_148.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 220, ex_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ex"

    public static class fw_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fw"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:507:1: fw : 'FW' TOKEN -> ^( 'FW' TOKEN ) ;
    public final ChemicalChunkerParser.fw_return fw() throws RecognitionException {
        ChemicalChunkerParser.fw_return retval = new ChemicalChunkerParser.fw_return();
        retval.start = input.LT(1);
        int fw_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal875=null;
        Token TOKEN876=null;

        Object string_literal875_tree=null;
        Object TOKEN876_tree=null;
        RewriteRuleTokenStream stream_149=new RewriteRuleTokenStream(adaptor,"token 149");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 221) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:507:3: ( 'FW' TOKEN -> ^( 'FW' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:507:4: 'FW' TOKEN
            {
            string_literal875=(Token)match(input,149,FOLLOW_149_in_fw4786_static.FOLLOW_149_in_fw4786); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_149.add(string_literal875);

            TOKEN876=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fw4788_static.FOLLOW_TOKEN_in_fw4788); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN876);



            // AST REWRITE
            // elements: 149, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 507:15: -> ^( 'FW' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:507:18: ^( 'FW' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_149.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 221, fw_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fw"

    public static class in_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:510:1: in : 'IN' TOKEN -> ^( 'IN' TOKEN ) ;
    public final ChemicalChunkerParser.in_return in() throws RecognitionException {
        ChemicalChunkerParser.in_return retval = new ChemicalChunkerParser.in_return();
        retval.start = input.LT(1);
        int in_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal877=null;
        Token TOKEN878=null;

        Object string_literal877_tree=null;
        Object TOKEN878_tree=null;
        RewriteRuleTokenStream stream_150=new RewriteRuleTokenStream(adaptor,"token 150");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 222) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:510:3: ( 'IN' TOKEN -> ^( 'IN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:510:4: 'IN' TOKEN
            {
            string_literal877=(Token)match(input,150,FOLLOW_150_in_in4803_static.FOLLOW_150_in_in4803); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_150.add(string_literal877);

            TOKEN878=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_in4805_static.FOLLOW_TOKEN_in_in4805); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN878);



            // AST REWRITE
            // elements: TOKEN, 150
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 510:15: -> ^( 'IN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:510:18: ^( 'IN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_150.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 222, in_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "in"

    public static class jj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:513:1: jj : 'JJ' TOKEN -> ^( 'JJ' TOKEN ) ;
    public final ChemicalChunkerParser.jj_return jj() throws RecognitionException {
        ChemicalChunkerParser.jj_return retval = new ChemicalChunkerParser.jj_return();
        retval.start = input.LT(1);
        int jj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal879=null;
        Token TOKEN880=null;

        Object string_literal879_tree=null;
        Object TOKEN880_tree=null;
        RewriteRuleTokenStream stream_151=new RewriteRuleTokenStream(adaptor,"token 151");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 223) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:513:3: ( 'JJ' TOKEN -> ^( 'JJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:513:4: 'JJ' TOKEN
            {
            string_literal879=(Token)match(input,151,FOLLOW_151_in_jj4820_static.FOLLOW_151_in_jj4820); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_151.add(string_literal879);

            TOKEN880=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jj4822_static.FOLLOW_TOKEN_in_jj4822); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN880);



            // AST REWRITE
            // elements: TOKEN, 151
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 513:15: -> ^( 'JJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:513:18: ^( 'JJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_151.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 223, jj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jj"

    public static class jjr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjr"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:516:1: jjr : 'JJR' TOKEN -> ^( 'JJR' TOKEN ) ;
    public final ChemicalChunkerParser.jjr_return jjr() throws RecognitionException {
        ChemicalChunkerParser.jjr_return retval = new ChemicalChunkerParser.jjr_return();
        retval.start = input.LT(1);
        int jjr_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal881=null;
        Token TOKEN882=null;

        Object string_literal881_tree=null;
        Object TOKEN882_tree=null;
        RewriteRuleTokenStream stream_152=new RewriteRuleTokenStream(adaptor,"token 152");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 224) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:516:4: ( 'JJR' TOKEN -> ^( 'JJR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:516:5: 'JJR' TOKEN
            {
            string_literal881=(Token)match(input,152,FOLLOW_152_in_jjr4837_static.FOLLOW_152_in_jjr4837); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_152.add(string_literal881);

            TOKEN882=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjr4839_static.FOLLOW_TOKEN_in_jjr4839); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN882);



            // AST REWRITE
            // elements: TOKEN, 152
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 516:17: -> ^( 'JJR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:516:20: ^( 'JJR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_152.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 224, jjr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjr"

    public static class jjs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjs"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:519:1: jjs : 'JJS' TOKEN -> ^( 'JJS' TOKEN ) ;
    public final ChemicalChunkerParser.jjs_return jjs() throws RecognitionException {
        ChemicalChunkerParser.jjs_return retval = new ChemicalChunkerParser.jjs_return();
        retval.start = input.LT(1);
        int jjs_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal883=null;
        Token TOKEN884=null;

        Object string_literal883_tree=null;
        Object TOKEN884_tree=null;
        RewriteRuleTokenStream stream_153=new RewriteRuleTokenStream(adaptor,"token 153");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 225) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:519:4: ( 'JJS' TOKEN -> ^( 'JJS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:519:5: 'JJS' TOKEN
            {
            string_literal883=(Token)match(input,153,FOLLOW_153_in_jjs4854_static.FOLLOW_153_in_jjs4854); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_153.add(string_literal883);

            TOKEN884=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjs4856_static.FOLLOW_TOKEN_in_jjs4856); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN884);



            // AST REWRITE
            // elements: TOKEN, 153
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 519:17: -> ^( 'JJS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:519:20: ^( 'JJS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_153.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 225, jjs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjs"

    public static class ls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ls"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:522:1: ls : 'LS' TOKEN -> ^( 'LS' TOKEN ) ;
    public final ChemicalChunkerParser.ls_return ls() throws RecognitionException {
        ChemicalChunkerParser.ls_return retval = new ChemicalChunkerParser.ls_return();
        retval.start = input.LT(1);
        int ls_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal885=null;
        Token TOKEN886=null;

        Object string_literal885_tree=null;
        Object TOKEN886_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_154=new RewriteRuleTokenStream(adaptor,"token 154");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 226) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:522:3: ( 'LS' TOKEN -> ^( 'LS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:522:4: 'LS' TOKEN
            {
            string_literal885=(Token)match(input,154,FOLLOW_154_in_ls4871_static.FOLLOW_154_in_ls4871); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_154.add(string_literal885);

            TOKEN886=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ls4873_static.FOLLOW_TOKEN_in_ls4873); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN886);



            // AST REWRITE
            // elements: 154, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 522:15: -> ^( 'LS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:522:18: ^( 'LS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_154.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 226, ls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ls"

    public static class md_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "md"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:525:1: md : 'MD' TOKEN -> ^( 'MD' TOKEN ) ;
    public final ChemicalChunkerParser.md_return md() throws RecognitionException {
        ChemicalChunkerParser.md_return retval = new ChemicalChunkerParser.md_return();
        retval.start = input.LT(1);
        int md_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal887=null;
        Token TOKEN888=null;

        Object string_literal887_tree=null;
        Object TOKEN888_tree=null;
        RewriteRuleTokenStream stream_155=new RewriteRuleTokenStream(adaptor,"token 155");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 227) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:525:3: ( 'MD' TOKEN -> ^( 'MD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:525:4: 'MD' TOKEN
            {
            string_literal887=(Token)match(input,155,FOLLOW_155_in_md4888_static.FOLLOW_155_in_md4888); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_155.add(string_literal887);

            TOKEN888=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_md4890_static.FOLLOW_TOKEN_in_md4890); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN888);



            // AST REWRITE
            // elements: 155, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 525:15: -> ^( 'MD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:525:18: ^( 'MD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_155.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 227, md_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "md"

    public static class nn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:528:1: nn : 'NN' TOKEN -> ^( 'NN' TOKEN ) ;
    public final ChemicalChunkerParser.nn_return nn() throws RecognitionException {
        ChemicalChunkerParser.nn_return retval = new ChemicalChunkerParser.nn_return();
        retval.start = input.LT(1);
        int nn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal889=null;
        Token TOKEN890=null;

        Object string_literal889_tree=null;
        Object TOKEN890_tree=null;
        RewriteRuleTokenStream stream_156=new RewriteRuleTokenStream(adaptor,"token 156");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 228) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:528:3: ( 'NN' TOKEN -> ^( 'NN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:528:4: 'NN' TOKEN
            {
            string_literal889=(Token)match(input,156,FOLLOW_156_in_nn4905_static.FOLLOW_156_in_nn4905); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_156.add(string_literal889);

            TOKEN890=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn4907_static.FOLLOW_TOKEN_in_nn4907); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN890);



            // AST REWRITE
            // elements: 156, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 528:15: -> ^( 'NN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:528:18: ^( 'NN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_156.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 228, nn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nn"

    public static class nns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:531:1: nns : 'NNS' TOKEN -> ^( 'NNS' TOKEN ) ;
    public final ChemicalChunkerParser.nns_return nns() throws RecognitionException {
        ChemicalChunkerParser.nns_return retval = new ChemicalChunkerParser.nns_return();
        retval.start = input.LT(1);
        int nns_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal891=null;
        Token TOKEN892=null;

        Object string_literal891_tree=null;
        Object TOKEN892_tree=null;
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 229) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:531:4: ( 'NNS' TOKEN -> ^( 'NNS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:531:5: 'NNS' TOKEN
            {
            string_literal891=(Token)match(input,157,FOLLOW_157_in_nns4922_static.FOLLOW_157_in_nns4922); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_157.add(string_literal891);

            TOKEN892=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns4924_static.FOLLOW_TOKEN_in_nns4924); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN892);



            // AST REWRITE
            // elements: 157, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 531:17: -> ^( 'NNS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:531:20: ^( 'NNS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_157.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 229, nns_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nns"

    public static class nnp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:534:1: nnp : 'NNP' TOKEN -> ^( 'NNP' TOKEN ) ;
    public final ChemicalChunkerParser.nnp_return nnp() throws RecognitionException {
        ChemicalChunkerParser.nnp_return retval = new ChemicalChunkerParser.nnp_return();
        retval.start = input.LT(1);
        int nnp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal893=null;
        Token TOKEN894=null;

        Object string_literal893_tree=null;
        Object TOKEN894_tree=null;
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 230) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:534:4: ( 'NNP' TOKEN -> ^( 'NNP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:534:5: 'NNP' TOKEN
            {
            string_literal893=(Token)match(input,158,FOLLOW_158_in_nnp4939_static.FOLLOW_158_in_nnp4939); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_158.add(string_literal893);

            TOKEN894=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnp4941_static.FOLLOW_TOKEN_in_nnp4941); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN894);



            // AST REWRITE
            // elements: 158, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 534:17: -> ^( 'NNP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:534:20: ^( 'NNP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_158.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 230, nnp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnp"

    public static class nnps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnps"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:537:1: nnps : 'NNPS' TOKEN -> ^( 'NNPS' TOKEN ) ;
    public final ChemicalChunkerParser.nnps_return nnps() throws RecognitionException {
        ChemicalChunkerParser.nnps_return retval = new ChemicalChunkerParser.nnps_return();
        retval.start = input.LT(1);
        int nnps_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal895=null;
        Token TOKEN896=null;

        Object string_literal895_tree=null;
        Object TOKEN896_tree=null;
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 231) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:537:5: ( 'NNPS' TOKEN -> ^( 'NNPS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:537:6: 'NNPS' TOKEN
            {
            string_literal895=(Token)match(input,159,FOLLOW_159_in_nnps4956_static.FOLLOW_159_in_nnps4956); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_159.add(string_literal895);

            TOKEN896=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnps4958_static.FOLLOW_TOKEN_in_nnps4958); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN896);



            // AST REWRITE
            // elements: TOKEN, 159
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 537:19: -> ^( 'NNPS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:537:22: ^( 'NNPS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_159.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 231, nnps_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnps"

    public static class pdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pdt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:540:1: pdt : 'PDT' TOKEN -> ^( 'PDT' TOKEN ) ;
    public final ChemicalChunkerParser.pdt_return pdt() throws RecognitionException {
        ChemicalChunkerParser.pdt_return retval = new ChemicalChunkerParser.pdt_return();
        retval.start = input.LT(1);
        int pdt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal897=null;
        Token TOKEN898=null;

        Object string_literal897_tree=null;
        Object TOKEN898_tree=null;
        RewriteRuleTokenStream stream_160=new RewriteRuleTokenStream(adaptor,"token 160");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 232) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:540:4: ( 'PDT' TOKEN -> ^( 'PDT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:540:5: 'PDT' TOKEN
            {
            string_literal897=(Token)match(input,160,FOLLOW_160_in_pdt4973_static.FOLLOW_160_in_pdt4973); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_160.add(string_literal897);

            TOKEN898=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pdt4975_static.FOLLOW_TOKEN_in_pdt4975); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN898);



            // AST REWRITE
            // elements: TOKEN, 160
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 540:17: -> ^( 'PDT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:540:20: ^( 'PDT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_160.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 232, pdt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pdt"

    public static class pos_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pos"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:543:1: pos : 'POS' TOKEN -> ^( 'POS' TOKEN ) ;
    public final ChemicalChunkerParser.pos_return pos() throws RecognitionException {
        ChemicalChunkerParser.pos_return retval = new ChemicalChunkerParser.pos_return();
        retval.start = input.LT(1);
        int pos_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal899=null;
        Token TOKEN900=null;

        Object string_literal899_tree=null;
        Object TOKEN900_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 233) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:543:4: ( 'POS' TOKEN -> ^( 'POS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:543:5: 'POS' TOKEN
            {
            string_literal899=(Token)match(input,161,FOLLOW_161_in_pos4990_static.FOLLOW_161_in_pos4990); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_161.add(string_literal899);

            TOKEN900=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pos4992_static.FOLLOW_TOKEN_in_pos4992); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN900);



            // AST REWRITE
            // elements: TOKEN, 161
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 543:17: -> ^( 'POS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:543:20: ^( 'POS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_161.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 233, pos_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pos"

    public static class prp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:546:1: prp : 'PRP' TOKEN -> ^( 'PRP' TOKEN ) ;
    public final ChemicalChunkerParser.prp_return prp() throws RecognitionException {
        ChemicalChunkerParser.prp_return retval = new ChemicalChunkerParser.prp_return();
        retval.start = input.LT(1);
        int prp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal901=null;
        Token TOKEN902=null;

        Object string_literal901_tree=null;
        Object TOKEN902_tree=null;
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 234) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:546:4: ( 'PRP' TOKEN -> ^( 'PRP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:546:5: 'PRP' TOKEN
            {
            string_literal901=(Token)match(input,162,FOLLOW_162_in_prp5007_static.FOLLOW_162_in_prp5007); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_162.add(string_literal901);

            TOKEN902=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp5009_static.FOLLOW_TOKEN_in_prp5009); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN902);



            // AST REWRITE
            // elements: 162, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 546:17: -> ^( 'PRP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:546:20: ^( 'PRP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_162.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 234, prp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prp"

    public static class prp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:549:1: prp_poss : 'PRP$' TOKEN -> ^( 'PRP$' TOKEN ) ;
    public final ChemicalChunkerParser.prp_poss_return prp_poss() throws RecognitionException {
        ChemicalChunkerParser.prp_poss_return retval = new ChemicalChunkerParser.prp_poss_return();
        retval.start = input.LT(1);
        int prp_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal903=null;
        Token TOKEN904=null;

        Object string_literal903_tree=null;
        Object TOKEN904_tree=null;
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 235) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:549:9: ( 'PRP$' TOKEN -> ^( 'PRP$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:549:10: 'PRP$' TOKEN
            {
            string_literal903=(Token)match(input,163,FOLLOW_163_in_prp_poss5024_static.FOLLOW_163_in_prp_poss5024); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_163.add(string_literal903);

            TOKEN904=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp_poss5026_static.FOLLOW_TOKEN_in_prp_poss5026); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN904);



            // AST REWRITE
            // elements: 163, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 549:23: -> ^( 'PRP$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:549:26: ^( 'PRP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_163.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 235, prp_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prp_poss"

    public static class rb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:552:1: rb : 'RB' TOKEN -> ^( 'RB' TOKEN ) ;
    public final ChemicalChunkerParser.rb_return rb() throws RecognitionException {
        ChemicalChunkerParser.rb_return retval = new ChemicalChunkerParser.rb_return();
        retval.start = input.LT(1);
        int rb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal905=null;
        Token TOKEN906=null;

        Object string_literal905_tree=null;
        Object TOKEN906_tree=null;
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 236) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:552:3: ( 'RB' TOKEN -> ^( 'RB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:552:4: 'RB' TOKEN
            {
            string_literal905=(Token)match(input,164,FOLLOW_164_in_rb5041_static.FOLLOW_164_in_rb5041); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_164.add(string_literal905);

            TOKEN906=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rb5043_static.FOLLOW_TOKEN_in_rb5043); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN906);



            // AST REWRITE
            // elements: 164, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 552:15: -> ^( 'RB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:552:18: ^( 'RB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_164.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 236, rb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rb"

    public static class rbr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbr"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:555:1: rbr : 'RBR' TOKEN -> ^( 'RBR' TOKEN ) ;
    public final ChemicalChunkerParser.rbr_return rbr() throws RecognitionException {
        ChemicalChunkerParser.rbr_return retval = new ChemicalChunkerParser.rbr_return();
        retval.start = input.LT(1);
        int rbr_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal907=null;
        Token TOKEN908=null;

        Object string_literal907_tree=null;
        Object TOKEN908_tree=null;
        RewriteRuleTokenStream stream_165=new RewriteRuleTokenStream(adaptor,"token 165");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 237) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:555:4: ( 'RBR' TOKEN -> ^( 'RBR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:555:5: 'RBR' TOKEN
            {
            string_literal907=(Token)match(input,165,FOLLOW_165_in_rbr5058_static.FOLLOW_165_in_rbr5058); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_165.add(string_literal907);

            TOKEN908=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbr5060_static.FOLLOW_TOKEN_in_rbr5060); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN908);



            // AST REWRITE
            // elements: TOKEN, 165
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 555:17: -> ^( 'RBR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:555:20: ^( 'RBR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_165.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 237, rbr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbr"

    public static class rbs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbs"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:558:1: rbs : 'RBS' TOKEN -> ^( 'RBS' TOKEN ) ;
    public final ChemicalChunkerParser.rbs_return rbs() throws RecognitionException {
        ChemicalChunkerParser.rbs_return retval = new ChemicalChunkerParser.rbs_return();
        retval.start = input.LT(1);
        int rbs_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal909=null;
        Token TOKEN910=null;

        Object string_literal909_tree=null;
        Object TOKEN910_tree=null;
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 238) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:558:4: ( 'RBS' TOKEN -> ^( 'RBS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:558:5: 'RBS' TOKEN
            {
            string_literal909=(Token)match(input,166,FOLLOW_166_in_rbs5075_static.FOLLOW_166_in_rbs5075); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_166.add(string_literal909);

            TOKEN910=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbs5077_static.FOLLOW_TOKEN_in_rbs5077); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN910);



            // AST REWRITE
            // elements: 166, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 558:17: -> ^( 'RBS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:558:20: ^( 'RBS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_166.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 238, rbs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbs"

    public static class rp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:561:1: rp : 'RP' TOKEN -> ^( 'RP' TOKEN ) ;
    public final ChemicalChunkerParser.rp_return rp() throws RecognitionException {
        ChemicalChunkerParser.rp_return retval = new ChemicalChunkerParser.rp_return();
        retval.start = input.LT(1);
        int rp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal911=null;
        Token TOKEN912=null;

        Object string_literal911_tree=null;
        Object TOKEN912_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 239) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:561:3: ( 'RP' TOKEN -> ^( 'RP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:561:4: 'RP' TOKEN
            {
            string_literal911=(Token)match(input,167,FOLLOW_167_in_rp5092_static.FOLLOW_167_in_rp5092); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_167.add(string_literal911);

            TOKEN912=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rp5094_static.FOLLOW_TOKEN_in_rp5094); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN912);



            // AST REWRITE
            // elements: TOKEN, 167
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 561:15: -> ^( 'RP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:561:18: ^( 'RP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_167.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 239, rp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rp"

    public static class sym_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sym"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:564:1: sym : 'SYM' TOKEN -> ^( 'SYM' TOKEN ) ;
    public final ChemicalChunkerParser.sym_return sym() throws RecognitionException {
        ChemicalChunkerParser.sym_return retval = new ChemicalChunkerParser.sym_return();
        retval.start = input.LT(1);
        int sym_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal913=null;
        Token TOKEN914=null;

        Object string_literal913_tree=null;
        Object TOKEN914_tree=null;
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 240) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:564:4: ( 'SYM' TOKEN -> ^( 'SYM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:564:5: 'SYM' TOKEN
            {
            string_literal913=(Token)match(input,168,FOLLOW_168_in_sym5109_static.FOLLOW_168_in_sym5109); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_168.add(string_literal913);

            TOKEN914=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_sym5111_static.FOLLOW_TOKEN_in_sym5111); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN914);



            // AST REWRITE
            // elements: 168, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 564:17: -> ^( 'SYM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:564:20: ^( 'SYM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_168.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 240, sym_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sym"

    public static class to_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:567:1: to : 'TO' TOKEN -> ^( 'TO' TOKEN ) ;
    public final ChemicalChunkerParser.to_return to() throws RecognitionException {
        ChemicalChunkerParser.to_return retval = new ChemicalChunkerParser.to_return();
        retval.start = input.LT(1);
        int to_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal915=null;
        Token TOKEN916=null;

        Object string_literal915_tree=null;
        Object TOKEN916_tree=null;
        RewriteRuleTokenStream stream_169=new RewriteRuleTokenStream(adaptor,"token 169");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 241) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:567:3: ( 'TO' TOKEN -> ^( 'TO' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:567:4: 'TO' TOKEN
            {
            string_literal915=(Token)match(input,169,FOLLOW_169_in_to5126_static.FOLLOW_169_in_to5126); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_169.add(string_literal915);

            TOKEN916=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_to5128_static.FOLLOW_TOKEN_in_to5128); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN916);



            // AST REWRITE
            // elements: TOKEN, 169
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 567:15: -> ^( 'TO' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:567:18: ^( 'TO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_169.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 241, to_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "to"

    public static class uh_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uh"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:570:1: uh : 'UH' TOKEN -> ^( 'UH' TOKEN ) ;
    public final ChemicalChunkerParser.uh_return uh() throws RecognitionException {
        ChemicalChunkerParser.uh_return retval = new ChemicalChunkerParser.uh_return();
        retval.start = input.LT(1);
        int uh_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal917=null;
        Token TOKEN918=null;

        Object string_literal917_tree=null;
        Object TOKEN918_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 242) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:570:3: ( 'UH' TOKEN -> ^( 'UH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:570:4: 'UH' TOKEN
            {
            string_literal917=(Token)match(input,170,FOLLOW_170_in_uh5143_static.FOLLOW_170_in_uh5143); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_170.add(string_literal917);

            TOKEN918=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_uh5145_static.FOLLOW_TOKEN_in_uh5145); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN918);



            // AST REWRITE
            // elements: TOKEN, 170
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 570:15: -> ^( 'UH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:570:18: ^( 'UH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_170.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 242, uh_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "uh"

    public static class vb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:573:1: vb : 'VB' TOKEN -> ^( 'VB' TOKEN ) ;
    public final ChemicalChunkerParser.vb_return vb() throws RecognitionException {
        ChemicalChunkerParser.vb_return retval = new ChemicalChunkerParser.vb_return();
        retval.start = input.LT(1);
        int vb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal919=null;
        Token TOKEN920=null;

        Object string_literal919_tree=null;
        Object TOKEN920_tree=null;
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 243) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:573:3: ( 'VB' TOKEN -> ^( 'VB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:573:4: 'VB' TOKEN
            {
            string_literal919=(Token)match(input,171,FOLLOW_171_in_vb5160_static.FOLLOW_171_in_vb5160); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_171.add(string_literal919);

            TOKEN920=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vb5162_static.FOLLOW_TOKEN_in_vb5162); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN920);



            // AST REWRITE
            // elements: TOKEN, 171
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 573:15: -> ^( 'VB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:573:18: ^( 'VB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_171.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 243, vb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vb"

    public static class vbd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:576:1: vbd : 'VBD' TOKEN -> ^( 'VBD' TOKEN ) ;
    public final ChemicalChunkerParser.vbd_return vbd() throws RecognitionException {
        ChemicalChunkerParser.vbd_return retval = new ChemicalChunkerParser.vbd_return();
        retval.start = input.LT(1);
        int vbd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal921=null;
        Token TOKEN922=null;

        Object string_literal921_tree=null;
        Object TOKEN922_tree=null;
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 244) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:576:4: ( 'VBD' TOKEN -> ^( 'VBD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:576:5: 'VBD' TOKEN
            {
            string_literal921=(Token)match(input,172,FOLLOW_172_in_vbd5177_static.FOLLOW_172_in_vbd5177); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_172.add(string_literal921);

            TOKEN922=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbd5179_static.FOLLOW_TOKEN_in_vbd5179); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN922);



            // AST REWRITE
            // elements: TOKEN, 172
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 576:17: -> ^( 'VBD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:576:20: ^( 'VBD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_172.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 244, vbd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbd"

    public static class vbg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbg"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:579:1: vbg : 'VBG' TOKEN -> ^( 'VBG' TOKEN ) ;
    public final ChemicalChunkerParser.vbg_return vbg() throws RecognitionException {
        ChemicalChunkerParser.vbg_return retval = new ChemicalChunkerParser.vbg_return();
        retval.start = input.LT(1);
        int vbg_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal923=null;
        Token TOKEN924=null;

        Object string_literal923_tree=null;
        Object TOKEN924_tree=null;
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 245) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:579:4: ( 'VBG' TOKEN -> ^( 'VBG' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:579:5: 'VBG' TOKEN
            {
            string_literal923=(Token)match(input,173,FOLLOW_173_in_vbg5194_static.FOLLOW_173_in_vbg5194); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_173.add(string_literal923);

            TOKEN924=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbg5196_static.FOLLOW_TOKEN_in_vbg5196); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN924);



            // AST REWRITE
            // elements: 173, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 579:17: -> ^( 'VBG' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:579:20: ^( 'VBG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_173.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 245, vbg_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbg"

    public static class vbn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:582:1: vbn : 'VBN' TOKEN -> ^( 'VBN' TOKEN ) ;
    public final ChemicalChunkerParser.vbn_return vbn() throws RecognitionException {
        ChemicalChunkerParser.vbn_return retval = new ChemicalChunkerParser.vbn_return();
        retval.start = input.LT(1);
        int vbn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal925=null;
        Token TOKEN926=null;

        Object string_literal925_tree=null;
        Object TOKEN926_tree=null;
        RewriteRuleTokenStream stream_174=new RewriteRuleTokenStream(adaptor,"token 174");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 246) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:582:4: ( 'VBN' TOKEN -> ^( 'VBN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:582:5: 'VBN' TOKEN
            {
            string_literal925=(Token)match(input,174,FOLLOW_174_in_vbn5211_static.FOLLOW_174_in_vbn5211); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_174.add(string_literal925);

            TOKEN926=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbn5213_static.FOLLOW_TOKEN_in_vbn5213); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN926);



            // AST REWRITE
            // elements: TOKEN, 174
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 582:17: -> ^( 'VBN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:582:20: ^( 'VBN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_174.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 246, vbn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbn"

    public static class vbp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:585:1: vbp : 'VBP' TOKEN -> ^( 'VBP' TOKEN ) ;
    public final ChemicalChunkerParser.vbp_return vbp() throws RecognitionException {
        ChemicalChunkerParser.vbp_return retval = new ChemicalChunkerParser.vbp_return();
        retval.start = input.LT(1);
        int vbp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal927=null;
        Token TOKEN928=null;

        Object string_literal927_tree=null;
        Object TOKEN928_tree=null;
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 247) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:585:4: ( 'VBP' TOKEN -> ^( 'VBP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:585:5: 'VBP' TOKEN
            {
            string_literal927=(Token)match(input,175,FOLLOW_175_in_vbp5228_static.FOLLOW_175_in_vbp5228); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_175.add(string_literal927);

            TOKEN928=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbp5230_static.FOLLOW_TOKEN_in_vbp5230); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN928);



            // AST REWRITE
            // elements: TOKEN, 175
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 585:17: -> ^( 'VBP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:585:20: ^( 'VBP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_175.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 247, vbp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbp"

    public static class vbz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbz"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:588:1: vbz : 'VBZ' TOKEN -> ^( 'VBZ' TOKEN ) ;
    public final ChemicalChunkerParser.vbz_return vbz() throws RecognitionException {
        ChemicalChunkerParser.vbz_return retval = new ChemicalChunkerParser.vbz_return();
        retval.start = input.LT(1);
        int vbz_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal929=null;
        Token TOKEN930=null;

        Object string_literal929_tree=null;
        Object TOKEN930_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 248) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:588:4: ( 'VBZ' TOKEN -> ^( 'VBZ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:588:5: 'VBZ' TOKEN
            {
            string_literal929=(Token)match(input,176,FOLLOW_176_in_vbz5245_static.FOLLOW_176_in_vbz5245); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_176.add(string_literal929);

            TOKEN930=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbz5247_static.FOLLOW_TOKEN_in_vbz5247); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN930);



            // AST REWRITE
            // elements: 176, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 588:17: -> ^( 'VBZ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:588:20: ^( 'VBZ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_176.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 248, vbz_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbz"

    public static class wdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wdt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:591:1: wdt : 'WDT' TOKEN -> ^( 'WDT' TOKEN ) ;
    public final ChemicalChunkerParser.wdt_return wdt() throws RecognitionException {
        ChemicalChunkerParser.wdt_return retval = new ChemicalChunkerParser.wdt_return();
        retval.start = input.LT(1);
        int wdt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal931=null;
        Token TOKEN932=null;

        Object string_literal931_tree=null;
        Object TOKEN932_tree=null;
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 249) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:591:4: ( 'WDT' TOKEN -> ^( 'WDT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:591:5: 'WDT' TOKEN
            {
            string_literal931=(Token)match(input,177,FOLLOW_177_in_wdt5262_static.FOLLOW_177_in_wdt5262); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_177.add(string_literal931);

            TOKEN932=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wdt5264_static.FOLLOW_TOKEN_in_wdt5264); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN932);



            // AST REWRITE
            // elements: TOKEN, 177
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 591:17: -> ^( 'WDT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:591:20: ^( 'WDT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_177.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 249, wdt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wdt"

    public static class wp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:594:1: wp : 'WP' TOKEN -> ^( 'WP' TOKEN ) ;
    public final ChemicalChunkerParser.wp_return wp() throws RecognitionException {
        ChemicalChunkerParser.wp_return retval = new ChemicalChunkerParser.wp_return();
        retval.start = input.LT(1);
        int wp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal933=null;
        Token TOKEN934=null;

        Object string_literal933_tree=null;
        Object TOKEN934_tree=null;
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 250) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:594:3: ( 'WP' TOKEN -> ^( 'WP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:594:4: 'WP' TOKEN
            {
            string_literal933=(Token)match(input,178,FOLLOW_178_in_wp5279_static.FOLLOW_178_in_wp5279); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_178.add(string_literal933);

            TOKEN934=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp5281_static.FOLLOW_TOKEN_in_wp5281); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN934);



            // AST REWRITE
            // elements: TOKEN, 178
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 594:15: -> ^( 'WP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:594:18: ^( 'WP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_178.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 250, wp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wp"

    public static class wp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:597:1: wp_poss : 'WP$' TOKEN -> ^( 'WP$' TOKEN ) ;
    public final ChemicalChunkerParser.wp_poss_return wp_poss() throws RecognitionException {
        ChemicalChunkerParser.wp_poss_return retval = new ChemicalChunkerParser.wp_poss_return();
        retval.start = input.LT(1);
        int wp_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal935=null;
        Token TOKEN936=null;

        Object string_literal935_tree=null;
        Object TOKEN936_tree=null;
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 251) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:597:8: ( 'WP$' TOKEN -> ^( 'WP$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:597:9: 'WP$' TOKEN
            {
            string_literal935=(Token)match(input,179,FOLLOW_179_in_wp_poss5296_static.FOLLOW_179_in_wp_poss5296); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_179.add(string_literal935);

            TOKEN936=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp_poss5298_static.FOLLOW_TOKEN_in_wp_poss5298); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN936);



            // AST REWRITE
            // elements: 179, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 597:21: -> ^( 'WP$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:597:24: ^( 'WP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_179.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 251, wp_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wp_poss"

    public static class wrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:600:1: wrb : 'WRB' TOKEN -> ^( 'WRB' TOKEN ) ;
    public final ChemicalChunkerParser.wrb_return wrb() throws RecognitionException {
        ChemicalChunkerParser.wrb_return retval = new ChemicalChunkerParser.wrb_return();
        retval.start = input.LT(1);
        int wrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal937=null;
        Token TOKEN938=null;

        Object string_literal937_tree=null;
        Object TOKEN938_tree=null;
        RewriteRuleTokenStream stream_180=new RewriteRuleTokenStream(adaptor,"token 180");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 252) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:600:4: ( 'WRB' TOKEN -> ^( 'WRB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:600:5: 'WRB' TOKEN
            {
            string_literal937=(Token)match(input,180,FOLLOW_180_in_wrb5313_static.FOLLOW_180_in_wrb5313); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_180.add(string_literal937);

            TOKEN938=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wrb5315_static.FOLLOW_TOKEN_in_wrb5315); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN938);



            // AST REWRITE
            // elements: TOKEN, 180
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 600:17: -> ^( 'WRB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:600:20: ^( 'WRB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_180.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 252, wrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wrb"

    // $ANTLR start synpred2_ChemicalChunker
    public final void synpred2_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:14: ( sentenceStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:14: sentenceStructure
        {
        pushFollow(FOLLOW_sentenceStructure_in_synpred2_ChemicalChunker223_static.FOLLOW_sentenceStructure_in_synpred2_ChemicalChunker223);
        sentenceStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_ChemicalChunker

    // $ANTLR start synpred3_ChemicalChunker
    public final void synpred3_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:32: ( unmatchedPhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:32: unmatchedPhrase
        {
        pushFollow(FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker225_static.FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker225);
        unmatchedPhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_ChemicalChunker

    // $ANTLR start synpred5_ChemicalChunker
    public final void synpred5_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:22: ( nounphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:22: nounphrase
        {
        pushFollow(FOLLOW_nounphrase_in_synpred5_ChemicalChunker239_static.FOLLOW_nounphrase_in_synpred5_ChemicalChunker239);
        nounphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_ChemicalChunker

    // $ANTLR start synpred6_ChemicalChunker
    public final void synpred6_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:33: ( verbphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:33: verbphrase
        {
        pushFollow(FOLLOW_verbphrase_in_synpred6_ChemicalChunker241_static.FOLLOW_verbphrase_in_synpred6_ChemicalChunker241);
        verbphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_ChemicalChunker

    // $ANTLR start synpred7_ChemicalChunker
    public final void synpred7_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:44: ( prepphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:44: prepphrase
        {
        pushFollow(FOLLOW_prepphrase_in_synpred7_ChemicalChunker243_static.FOLLOW_prepphrase_in_synpred7_ChemicalChunker243);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_ChemicalChunker

    // $ANTLR start synpred8_ChemicalChunker
    public final void synpred8_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:55: ( prepphraseAfter )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:55: prepphraseAfter
        {
        pushFollow(FOLLOW_prepphraseAfter_in_synpred8_ChemicalChunker245_static.FOLLOW_prepphraseAfter_in_synpred8_ChemicalChunker245);
        prepphraseAfter();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_ChemicalChunker

    // $ANTLR start synpred9_ChemicalChunker
    public final void synpred9_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:74: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:74: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred9_ChemicalChunker250_static.FOLLOW_advAdj_in_synpred9_ChemicalChunker250);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_ChemicalChunker

    // $ANTLR start synpred10_ChemicalChunker
    public final void synpred10_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:81: ( colon )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:81: colon
        {
        pushFollow(FOLLOW_colon_in_synpred10_ChemicalChunker252_static.FOLLOW_colon_in_synpred10_ChemicalChunker252);
        colon();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_ChemicalChunker

    // $ANTLR start synpred11_ChemicalChunker
    public final void synpred11_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:90: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:90: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred11_ChemicalChunker257_static.FOLLOW_conjunction_in_synpred11_ChemicalChunker257);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_ChemicalChunker

    // $ANTLR start synpred12_ChemicalChunker
    public final void synpred12_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:102: ( rbconj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:102: rbconj
        {
        pushFollow(FOLLOW_rbconj_in_synpred12_ChemicalChunker259_static.FOLLOW_rbconj_in_synpred12_ChemicalChunker259);
        rbconj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_ChemicalChunker

    // $ANTLR start synpred13_ChemicalChunker
    public final void synpred13_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:109: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:109: comma
        {
        pushFollow(FOLLOW_comma_in_synpred13_ChemicalChunker261_static.FOLLOW_comma_in_synpred13_ChemicalChunker261);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_ChemicalChunker

    // $ANTLR start synpred84_ChemicalChunker
    public final void synpred84_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:4: ( nounphraseStructure1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:4: nounphraseStructure1
        {
        pushFollow(FOLLOW_nounphraseStructure1_in_synpred84_ChemicalChunker467_static.FOLLOW_nounphraseStructure1_in_synpred84_ChemicalChunker467);
        nounphraseStructure1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred84_ChemicalChunker

    // $ANTLR start synpred86_ChemicalChunker
    public final void synpred86_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:11: ( dt )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:11: dt
        {
        pushFollow(FOLLOW_dt_in_synpred86_ChemicalChunker498_static.FOLLOW_dt_in_synpred86_ChemicalChunker498);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred86_ChemicalChunker

    // $ANTLR start synpred87_ChemicalChunker
    public final void synpred87_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:35: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:35: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred87_ChemicalChunker505_static.FOLLOW_conjunction_in_synpred87_ChemicalChunker505);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred87_ChemicalChunker

    // $ANTLR start synpred88_ChemicalChunker
    public final void synpred88_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:35: ( ( conjunction )* nounphraseContent )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:35: ( conjunction )* nounphraseContent
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:35: ( conjunction )*
        loop178:
        do {
            int alt178=2;
            alt178 = dfa178.predict(input);
            switch (alt178) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred88_ChemicalChunker505_static.FOLLOW_conjunction_in_synpred88_ChemicalChunker505);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop178;
            }
        } while (true);

        pushFollow(FOLLOW_nounphraseContent_in_synpred88_ChemicalChunker508_static.FOLLOW_nounphraseContent_in_synpred88_ChemicalChunker508);
        nounphraseContent();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred88_ChemicalChunker

    // $ANTLR start synpred89_ChemicalChunker
    public final void synpred89_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:69: ( prepphraseOf )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:69: prepphraseOf
        {
        pushFollow(FOLLOW_prepphraseOf_in_synpred89_ChemicalChunker513_static.FOLLOW_prepphraseOf_in_synpred89_ChemicalChunker513);
        prepphraseOf();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred89_ChemicalChunker

    // $ANTLR start synpred90_ChemicalChunker
    public final void synpred90_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:83: ( prepphraseIN )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:83: prepphraseIN
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred90_ChemicalChunker516_static.FOLLOW_prepphraseIN_in_synpred90_ChemicalChunker516);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred90_ChemicalChunker

    // $ANTLR start synpred91_ChemicalChunker
    public final void synpred91_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:4: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:4: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred91_ChemicalChunker528_static.FOLLOW_advAdj_in_synpred91_ChemicalChunker528);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred91_ChemicalChunker

    // $ANTLR start synpred92_ChemicalChunker
    public final void synpred92_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:14: ( dissolvePhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:14: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred92_ChemicalChunker533_static.FOLLOW_dissolvePhrase_in_synpred92_ChemicalChunker533);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred92_ChemicalChunker

    // $ANTLR start synpred93_ChemicalChunker
    public final void synpred93_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:29: ( ratio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:29: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred93_ChemicalChunker535_static.FOLLOW_ratio_in_synpred93_ChemicalChunker535);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred93_ChemicalChunker

    // $ANTLR start synpred94_ChemicalChunker
    public final void synpred94_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:35: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:35: noun
        {
        pushFollow(FOLLOW_noun_in_synpred94_ChemicalChunker537_static.FOLLOW_noun_in_synpred94_ChemicalChunker537);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred94_ChemicalChunker

    // $ANTLR start synpred95_ChemicalChunker
    public final void synpred95_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:40: ( numeric )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:40: numeric
        {
        pushFollow(FOLLOW_numeric_in_synpred95_ChemicalChunker539_static.FOLLOW_numeric_in_synpred95_ChemicalChunker539);
        numeric();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred95_ChemicalChunker

    // $ANTLR start synpred96_ChemicalChunker
    public final void synpred96_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:108:5: ( dissolveStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:108:5: dissolveStructure
        {
        pushFollow(FOLLOW_dissolveStructure_in_synpred96_ChemicalChunker551_static.FOLLOW_dissolveStructure_in_synpred96_ChemicalChunker551);
        dissolveStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred96_ChemicalChunker

    // $ANTLR start synpred97_ChemicalChunker
    public final void synpred97_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:4: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:4: adj
        {
        pushFollow(FOLLOW_adj_in_synpred97_ChemicalChunker582_static.FOLLOW_adj_in_synpred97_ChemicalChunker582);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred97_ChemicalChunker

    // $ANTLR start synpred100_ChemicalChunker
    public final void synpred100_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:33: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:33: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred100_ChemicalChunker594_static.FOLLOW_molecule_in_synpred100_ChemicalChunker594);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred100_ChemicalChunker

    // $ANTLR start synpred102_ChemicalChunker
    public final void synpred102_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:73: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:73: adj
        {
        pushFollow(FOLLOW_adj_in_synpred102_ChemicalChunker606_static.FOLLOW_adj_in_synpred102_ChemicalChunker606);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred102_ChemicalChunker

    // $ANTLR start synpred104_ChemicalChunker
    public final void synpred104_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:84: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:84: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred104_ChemicalChunker613_static.FOLLOW_molecule_in_synpred104_ChemicalChunker613);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred104_ChemicalChunker

    // $ANTLR start synpred105_ChemicalChunker
    public final void synpred105_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:111: ( conjunction molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:111: conjunction molecule
        {
        pushFollow(FOLLOW_conjunction_in_synpred105_ChemicalChunker619_static.FOLLOW_conjunction_in_synpred105_ChemicalChunker619);
        conjunction();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_molecule_in_synpred105_ChemicalChunker621_static.FOLLOW_molecule_in_synpred105_ChemicalChunker621);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred105_ChemicalChunker

    // $ANTLR start synpred106_ChemicalChunker
    public final void synpred106_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:61: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:61: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )*
        {
        pushFollow(FOLLOW_inin_in_synpred106_ChemicalChunker601_static.FOLLOW_inin_in_synpred106_ChemicalChunker601);
        inin();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:66: ( dtTHE )?
        int alt179=2;
        switch ( input.LA(1) ) {
            case 142:
                {
                alt179=1;
                }
                break;
        }

        switch (alt179) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
                {
                pushFollow(FOLLOW_dtTHE_in_synpred106_ChemicalChunker603_static.FOLLOW_dtTHE_in_synpred106_ChemicalChunker603);
                dtTHE();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:73: ( adj )?
        int alt180=2;
        alt180 = dfa180.predict(input);
        switch (alt180) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred106_ChemicalChunker606_static.FOLLOW_adj_in_synpred106_ChemicalChunker606);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:78: ( nnp )?
        int alt181=2;
        switch ( input.LA(1) ) {
            case 158:
                {
                alt181=1;
                }
                break;
        }

        switch (alt181) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
                {
                pushFollow(FOLLOW_nnp_in_synpred106_ChemicalChunker609_static.FOLLOW_nnp_in_synpred106_ChemicalChunker609);
                nnp();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:83: ( molecule | unnamedmolecule )
        int alt182=2;
        alt182 = dfa182.predict(input);
        switch (alt182) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:84: molecule
                {
                pushFollow(FOLLOW_molecule_in_synpred106_ChemicalChunker613_static.FOLLOW_molecule_in_synpred106_ChemicalChunker613);
                molecule();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:93: unnamedmolecule
                {
                pushFollow(FOLLOW_unnamedmolecule_in_synpred106_ChemicalChunker615_static.FOLLOW_unnamedmolecule_in_synpred106_ChemicalChunker615);
                unnamedmolecule();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:110: ( conjunction molecule )*
        loop183:
        do {
            int alt183=2;
            switch ( input.LA(1) ) {
            case 133:
            case 145:
                {
                alt183=1;
                }
                break;

            }

            switch (alt183) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:111: conjunction molecule
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred106_ChemicalChunker619_static.FOLLOW_conjunction_in_synpred106_ChemicalChunker619);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    pushFollow(FOLLOW_molecule_in_synpred106_ChemicalChunker621_static.FOLLOW_molecule_in_synpred106_ChemicalChunker621);
        	    molecule();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop183;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred106_ChemicalChunker

    // $ANTLR start synpred108_ChemicalChunker
    public final void synpred108_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:28: ( to )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:28: to
        {
        pushFollow(FOLLOW_to_in_synpred108_ChemicalChunker657_static.FOLLOW_to_in_synpred108_ChemicalChunker657);
        to();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred108_ChemicalChunker

    // $ANTLR start synpred109_ChemicalChunker
    public final void synpred109_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:32: ( inAll )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:32: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred109_ChemicalChunker660_static.FOLLOW_inAll_in_synpred109_ChemicalChunker660);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred109_ChemicalChunker

    // $ANTLR start synpred115_ChemicalChunker
    public final void synpred115_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:71: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:71: verb
        {
        pushFollow(FOLLOW_verb_in_synpred115_ChemicalChunker679_static.FOLLOW_verb_in_synpred115_ChemicalChunker679);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred115_ChemicalChunker

    // $ANTLR start synpred116_ChemicalChunker
    public final void synpred116_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:77: ( md )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:77: md
        {
        pushFollow(FOLLOW_md_in_synpred116_ChemicalChunker682_static.FOLLOW_md_in_synpred116_ChemicalChunker682);
        md();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred116_ChemicalChunker

    // $ANTLR start synpred117_ChemicalChunker
    public final void synpred117_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:81: ( adv )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:81: adv
        {
        pushFollow(FOLLOW_adv_in_synpred117_ChemicalChunker685_static.FOLLOW_adv_in_synpred117_ChemicalChunker685);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred117_ChemicalChunker

    // $ANTLR start synpred118_ChemicalChunker
    public final void synpred118_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:86: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:86: adj
        {
        pushFollow(FOLLOW_adj_in_synpred118_ChemicalChunker688_static.FOLLOW_adj_in_synpred118_ChemicalChunker688);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred118_ChemicalChunker

    // $ANTLR start synpred119_ChemicalChunker
    public final void synpred119_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:91: ( neg )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:91: neg
        {
        pushFollow(FOLLOW_neg_in_synpred119_ChemicalChunker691_static.FOLLOW_neg_in_synpred119_ChemicalChunker691);
        neg();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred119_ChemicalChunker

    // $ANTLR start synpred120_ChemicalChunker
    public final void synpred120_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:49: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:49: ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:49: ( md )*
        loop184:
        do {
            int alt184=2;
            switch ( input.LA(1) ) {
            case 155:
                {
                alt184=1;
                }
                break;

            }

            switch (alt184) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred120_ChemicalChunker667_static.FOLLOW_md_in_synpred120_ChemicalChunker667);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop184;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:53: ( rbconj )?
        int alt185=2;
        switch ( input.LA(1) ) {
            case 131:
                {
                alt185=1;
                }
                break;
        }

        switch (alt185) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: rbconj
                {
                pushFollow(FOLLOW_rbconj_in_synpred120_ChemicalChunker670_static.FOLLOW_rbconj_in_synpred120_ChemicalChunker670);
                rbconj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:61: ( adv )*
        loop186:
        do {
            int alt186=2;
            switch ( input.LA(1) ) {
            case 164:
            case 165:
            case 166:
            case 167:
                {
                alt186=1;
                }
                break;

            }

            switch (alt186) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred120_ChemicalChunker673_static.FOLLOW_adv_in_synpred120_ChemicalChunker673);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop186;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:66: ( adj )?
        int alt187=2;
        switch ( input.LA(1) ) {
            case 39:
            case 40:
            case 45:
            case 151:
            case 152:
            case 153:
                {
                alt187=1;
                }
                break;
        }

        switch (alt187) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred120_ChemicalChunker676_static.FOLLOW_adj_in_synpred120_ChemicalChunker676);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:71: ( verb )+
        int cnt188=0;
        loop188:
        do {
            int alt188=2;
            switch ( input.LA(1) ) {
            case 85:
            case 86:
            case 87:
            case 88:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 110:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 118:
            case 120:
            case 121:
            case 122:
            case 124:
            case 125:
            case 127:
            case 128:
            case 129:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
                {
                alt188=1;
                }
                break;

            }

            switch (alt188) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: verb
        	    {
        	    pushFollow(FOLLOW_verb_in_synpred120_ChemicalChunker679_static.FOLLOW_verb_in_synpred120_ChemicalChunker679);
        	    verb();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt188 >= 1 ) break loop188;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(188, input);
                    throw eee;
            }
            cnt188++;
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:77: ( md )*
        loop189:
        do {
            int alt189=2;
            switch ( input.LA(1) ) {
            case 155:
                {
                alt189=1;
                }
                break;

            }

            switch (alt189) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred120_ChemicalChunker682_static.FOLLOW_md_in_synpred120_ChemicalChunker682);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop189;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:81: ( adv )*
        loop190:
        do {
            int alt190=2;
            switch ( input.LA(1) ) {
            case 164:
            case 165:
            case 166:
            case 167:
                {
                alt190=1;
                }
                break;

            }

            switch (alt190) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred120_ChemicalChunker685_static.FOLLOW_adv_in_synpred120_ChemicalChunker685);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop190;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:86: ( adj )?
        int alt191=2;
        switch ( input.LA(1) ) {
            case 39:
            case 40:
            case 45:
            case 151:
            case 152:
            case 153:
                {
                alt191=1;
                }
                break;
        }

        switch (alt191) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred120_ChemicalChunker688_static.FOLLOW_adj_in_synpred120_ChemicalChunker688);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:91: ( neg )?
        int alt192=2;
        switch ( input.LA(1) ) {
            case 135:
                {
                alt192=1;
                }
                break;
        }

        switch (alt192) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
                {
                pushFollow(FOLLOW_neg_in_synpred120_ChemicalChunker691_static.FOLLOW_neg_in_synpred120_ChemicalChunker691);
                neg();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred120_ChemicalChunker

    // $ANTLR start synpred121_ChemicalChunker
    public final void synpred121_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:99: ( inoff )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:99: inoff
        {
        pushFollow(FOLLOW_inoff_in_synpred121_ChemicalChunker697_static.FOLLOW_inoff_in_synpred121_ChemicalChunker697);
        inoff();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred121_ChemicalChunker

    // $ANTLR start synpred124_ChemicalChunker
    public final void synpred124_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:107: ( ( cc )? ( comma )? prepphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:107: ( cc )? ( comma )? prepphrase
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:107: ( cc )?
        int alt193=2;
        switch ( input.LA(1) ) {
            case 145:
                {
                alt193=1;
                }
                break;
        }

        switch (alt193) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cc
                {
                pushFollow(FOLLOW_cc_in_synpred124_ChemicalChunker701_static.FOLLOW_cc_in_synpred124_ChemicalChunker701);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:111: ( comma )?
        int alt194=2;
        switch ( input.LA(1) ) {
            case 133:
                {
                alt194=1;
                }
                break;
        }

        switch (alt194) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: comma
                {
                pushFollow(FOLLOW_comma_in_synpred124_ChemicalChunker704_static.FOLLOW_comma_in_synpred124_ChemicalChunker704);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_prepphrase_in_synpred124_ChemicalChunker707_static.FOLLOW_prepphrase_in_synpred124_ChemicalChunker707);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred124_ChemicalChunker

    // $ANTLR start synpred134_ChemicalChunker
    public final void synpred134_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:58: ( degassMultiVerb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:58: degassMultiVerb
        {
        pushFollow(FOLLOW_degassMultiVerb_in_synpred134_ChemicalChunker737_static.FOLLOW_degassMultiVerb_in_synpred134_ChemicalChunker737);
        degassMultiVerb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred134_ChemicalChunker

    // $ANTLR start synpred147_ChemicalChunker
    public final void synpred147_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:183: ( vbdegass )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:183: vbdegass
        {
        pushFollow(FOLLOW_vbdegass_in_synpred147_ChemicalChunker763_static.FOLLOW_vbdegass_in_synpred147_ChemicalChunker763);
        vbdegass();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred147_ChemicalChunker

    // $ANTLR start synpred165_ChemicalChunker
    public final void synpred165_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:122:24: ( dash nounStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:122:24: dash nounStructure
        {
        pushFollow(FOLLOW_dash_in_synpred165_ChemicalChunker825_static.FOLLOW_dash_in_synpred165_ChemicalChunker825);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nounStructure_in_synpred165_ChemicalChunker827_static.FOLLOW_nounStructure_in_synpred165_ChemicalChunker827);
        nounStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred165_ChemicalChunker

    // $ANTLR start synpred168_ChemicalChunker
    public final void synpred168_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:31: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:31: citation
        {
        pushFollow(FOLLOW_citation_in_synpred168_ChemicalChunker842_static.FOLLOW_citation_in_synpred168_ChemicalChunker842);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred168_ChemicalChunker

    // $ANTLR start synpred169_ChemicalChunker
    public final void synpred169_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:40: ( cycles )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:40: cycles
        {
        pushFollow(FOLLOW_cycles_in_synpred169_ChemicalChunker844_static.FOLLOW_cycles_in_synpred169_ChemicalChunker844);
        cycles();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred169_ChemicalChunker

    // $ANTLR start synpred170_ChemicalChunker
    public final void synpred170_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:47: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:47: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred170_ChemicalChunker846_static.FOLLOW_molecule_in_synpred170_ChemicalChunker846);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred170_ChemicalChunker

    // $ANTLR start synpred171_ChemicalChunker
    public final void synpred171_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:56: ( apparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:56: apparatus
        {
        pushFollow(FOLLOW_apparatus_in_synpred171_ChemicalChunker848_static.FOLLOW_apparatus_in_synpred171_ChemicalChunker848);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred171_ChemicalChunker

    // $ANTLR start synpred172_ChemicalChunker
    public final void synpred172_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:66: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:66: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred172_ChemicalChunker850_static.FOLLOW_mixture_in_synpred172_ChemicalChunker850);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred172_ChemicalChunker

    // $ANTLR start synpred173_ChemicalChunker
    public final void synpred173_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:74: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:74: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred173_ChemicalChunker852_static.FOLLOW_unnamedmolecule_in_synpred173_ChemicalChunker852);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred173_ChemicalChunker

    // $ANTLR start synpred175_ChemicalChunker
    public final void synpred175_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:98: ( nnstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:98: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred175_ChemicalChunker856_static.FOLLOW_nnstate_in_synpred175_ChemicalChunker856);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred175_ChemicalChunker

    // $ANTLR start synpred176_ChemicalChunker
    public final void synpred176_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:106: ( procedureNode )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:106: procedureNode
        {
        pushFollow(FOLLOW_procedureNode_in_synpred176_ChemicalChunker858_static.FOLLOW_procedureNode_in_synpred176_ChemicalChunker858);
        procedureNode();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred176_ChemicalChunker

    // $ANTLR start synpred177_ChemicalChunker
    public final void synpred177_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:120: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:120: nn
        {
        pushFollow(FOLLOW_nn_in_synpred177_ChemicalChunker860_static.FOLLOW_nn_in_synpred177_ChemicalChunker860);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred177_ChemicalChunker

    // $ANTLR start synpred180_ChemicalChunker
    public final void synpred180_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:131: ( nnadd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:131: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred180_ChemicalChunker866_static.FOLLOW_nnadd_in_synpred180_ChemicalChunker866);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred180_ChemicalChunker

    // $ANTLR start synpred182_ChemicalChunker
    public final void synpred182_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:155: ( nnexample )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:155: nnexample
        {
        pushFollow(FOLLOW_nnexample_in_synpred182_ChemicalChunker870_static.FOLLOW_nnexample_in_synpred182_ChemicalChunker870);
        nnexample();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred182_ChemicalChunker

    // $ANTLR start synpred183_ChemicalChunker
    public final void synpred183_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:165: ( range )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:165: range
        {
        pushFollow(FOLLOW_range_in_synpred183_ChemicalChunker872_static.FOLLOW_range_in_synpred183_ChemicalChunker872);
        range();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred183_ChemicalChunker

    // $ANTLR start synpred188_ChemicalChunker
    public final void synpred188_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:211: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:211: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred188_ChemicalChunker882_static.FOLLOW_quantity_in_synpred188_ChemicalChunker882);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred188_ChemicalChunker

    // $ANTLR start synpred189_ChemicalChunker
    public final void synpred189_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:220: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:220: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred189_ChemicalChunker884_static.FOLLOW_nnchementity_in_synpred189_ChemicalChunker884);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred189_ChemicalChunker

    // $ANTLR start synpred191_ChemicalChunker
    public final void synpred191_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:240: ( nnph )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:240: nnph
        {
        pushFollow(FOLLOW_nnph_in_synpred191_ChemicalChunker888_static.FOLLOW_nnph_in_synpred191_ChemicalChunker888);
        nnph();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred191_ChemicalChunker

    // $ANTLR start synpred193_ChemicalChunker
    public final void synpred193_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:253: ( nngeneral )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:253: nngeneral
        {
        pushFollow(FOLLOW_nngeneral_in_synpred193_ChemicalChunker892_static.FOLLOW_nngeneral_in_synpred193_ChemicalChunker892);
        nngeneral();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred193_ChemicalChunker

    // $ANTLR start synpred196_ChemicalChunker
    public final void synpred196_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:277: ( nnpressure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:277: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred196_ChemicalChunker898_static.FOLLOW_nnpressure_in_synpred196_ChemicalChunker898);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred196_ChemicalChunker

    // $ANTLR start synpred207_ChemicalChunker
    public final void synpred207_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:391: ( squareBracketedReference )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:391: squareBracketedReference
        {
        pushFollow(FOLLOW_squareBracketedReference_in_synpred207_ChemicalChunker920_static.FOLLOW_squareBracketedReference_in_synpred207_ChemicalChunker920);
        squareBracketedReference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred207_ChemicalChunker

    // $ANTLR start synpred209_ChemicalChunker
    public final void synpred209_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:422: ( numeric )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:422: numeric
        {
        pushFollow(FOLLOW_numeric_in_synpred209_ChemicalChunker924_static.FOLLOW_numeric_in_synpred209_ChemicalChunker924);
        numeric();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred209_ChemicalChunker

    // $ANTLR start synpred221_ChemicalChunker
    public final void synpred221_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:11: ( prepphraseAtmosphere )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:11: prepphraseAtmosphere
        {
        pushFollow(FOLLOW_prepphraseAtmosphere_in_synpred221_ChemicalChunker962_static.FOLLOW_prepphraseAtmosphere_in_synpred221_ChemicalChunker962);
        prepphraseAtmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred221_ChemicalChunker

    // $ANTLR start synpred222_ChemicalChunker
    public final void synpred222_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:32: ( prepphraseTime )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:32: prepphraseTime
        {
        pushFollow(FOLLOW_prepphraseTime_in_synpred222_ChemicalChunker964_static.FOLLOW_prepphraseTime_in_synpred222_ChemicalChunker964);
        prepphraseTime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred222_ChemicalChunker

    // $ANTLR start synpred223_ChemicalChunker
    public final void synpred223_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:47: ( prepphraseTemp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:47: prepphraseTemp
        {
        pushFollow(FOLLOW_prepphraseTemp_in_synpred223_ChemicalChunker966_static.FOLLOW_prepphraseTemp_in_synpred223_ChemicalChunker966);
        prepphraseTemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred223_ChemicalChunker

    // $ANTLR start synpred224_ChemicalChunker
    public final void synpred224_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:62: ( prepphraseIN )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:62: prepphraseIN
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred224_ChemicalChunker968_static.FOLLOW_prepphraseIN_in_synpred224_ChemicalChunker968);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred224_ChemicalChunker

    // $ANTLR start synpred225_ChemicalChunker
    public final void synpred225_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:75: ( prepphraseRole )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:75: prepphraseRole
        {
        pushFollow(FOLLOW_prepphraseRole_in_synpred225_ChemicalChunker970_static.FOLLOW_prepphraseRole_in_synpred225_ChemicalChunker970);
        prepphraseRole();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred225_ChemicalChunker

    // $ANTLR start synpred227_ChemicalChunker
    public final void synpred227_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:16: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:16: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred227_ChemicalChunker1010_static.FOLLOW_advAdj_in_synpred227_ChemicalChunker1010);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred227_ChemicalChunker

    // $ANTLR start synpred228_ChemicalChunker
    public final void synpred228_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:33: ( nnatmosphere )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:33: nnatmosphere
        {
        pushFollow(FOLLOW_nnatmosphere_in_synpred228_ChemicalChunker1015_static.FOLLOW_nnatmosphere_in_synpred228_ChemicalChunker1015);
        nnatmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred228_ChemicalChunker

    // $ANTLR start synpred229_ChemicalChunker
    public final void synpred229_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:3: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:3: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred229_ChemicalChunker1043_static.FOLLOW_advAdj_in_synpred229_ChemicalChunker1043);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred229_ChemicalChunker

    // $ANTLR start synpred234_ChemicalChunker
    public final void synpred234_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:35: ( nntime )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:35: nntime
        {
        pushFollow(FOLLOW_nntime_in_synpred234_ChemicalChunker1059_static.FOLLOW_nntime_in_synpred234_ChemicalChunker1059);
        nntime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred234_ChemicalChunker

    // $ANTLR start synpred235_ChemicalChunker
    public final void synpred235_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:5: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:5: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred235_ChemicalChunker1090_static.FOLLOW_advAdj_in_synpred235_ChemicalChunker1090);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred235_ChemicalChunker

    // $ANTLR start synpred240_ChemicalChunker
    public final void synpred240_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:36: ( nntemp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:36: nntemp
        {
        pushFollow(FOLLOW_nntemp_in_synpred240_ChemicalChunker1105_static.FOLLOW_nntemp_in_synpred240_ChemicalChunker1105);
        nntemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred240_ChemicalChunker

    // $ANTLR start synpred246_ChemicalChunker
    public final void synpred246_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:15: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:15: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred246_ChemicalChunker1278_static.FOLLOW_conjunction_in_synpred246_ChemicalChunker1278);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred246_ChemicalChunker

    // $ANTLR start synpred247_ChemicalChunker
    public final void synpred247_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:15: ( ( conjunction )* apparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:15: ( conjunction )* apparatus
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:15: ( conjunction )*
        loop195:
        do {
            int alt195=2;
            alt195 = dfa195.predict(input);
            switch (alt195) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred247_ChemicalChunker1278_static.FOLLOW_conjunction_in_synpred247_ChemicalChunker1278);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop195;
            }
        } while (true);

        pushFollow(FOLLOW_apparatus_in_synpred247_ChemicalChunker1281_static.FOLLOW_apparatus_in_synpred247_ChemicalChunker1281);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred247_ChemicalChunker

    // $ANTLR start synpred250_ChemicalChunker
    public final void synpred250_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:22: ( nnApp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:22: nnApp
        {
        pushFollow(FOLLOW_nnApp_in_synpred250_ChemicalChunker1298_static.FOLLOW_nnApp_in_synpred250_ChemicalChunker1298);
        nnApp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred250_ChemicalChunker

    // $ANTLR start synpred251_ChemicalChunker
    public final void synpred251_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:172:4: ( nnapparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:172:4: nnapparatus
        {
        pushFollow(FOLLOW_nnapparatus_in_synpred251_ChemicalChunker1325_static.FOLLOW_nnapparatus_in_synpred251_ChemicalChunker1325);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred251_ChemicalChunker

    // $ANTLR start synpred252_ChemicalChunker
    public final void synpred252_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:172:18: ( dash nnapparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:172:18: dash nnapparatus
        {
        pushFollow(FOLLOW_dash_in_synpred252_ChemicalChunker1329_static.FOLLOW_dash_in_synpred252_ChemicalChunker1329);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nnapparatus_in_synpred252_ChemicalChunker1331_static.FOLLOW_nnapparatus_in_synpred252_ChemicalChunker1331);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred252_ChemicalChunker

    // $ANTLR start synpred253_ChemicalChunker
    public final void synpred253_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:8: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:8: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred253_ChemicalChunker1345_static.FOLLOW_quantity_in_synpred253_ChemicalChunker1345);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred253_ChemicalChunker

    // $ANTLR start synpred254_ChemicalChunker
    public final void synpred254_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:17: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:17: adj
        {
        pushFollow(FOLLOW_adj_in_synpred254_ChemicalChunker1347_static.FOLLOW_adj_in_synpred254_ChemicalChunker1347);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred254_ChemicalChunker

    // $ANTLR start synpred255_ChemicalChunker
    public final void synpred255_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:21: ( nnpressure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:21: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred255_ChemicalChunker1349_static.FOLLOW_nnpressure_in_synpred255_ChemicalChunker1349);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred255_ChemicalChunker

    // $ANTLR start synpred256_ChemicalChunker
    public final void synpred256_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:32: ( nnadd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:32: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred256_ChemicalChunker1351_static.FOLLOW_nnadd_in_synpred256_ChemicalChunker1351);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred256_ChemicalChunker

    // $ANTLR start synpred257_ChemicalChunker
    public final void synpred257_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:38: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:38: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred257_ChemicalChunker1353_static.FOLLOW_molecule_in_synpred257_ChemicalChunker1353);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred257_ChemicalChunker

    // $ANTLR start synpred258_ChemicalChunker
    public final void synpred258_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:47: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:47: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred258_ChemicalChunker1355_static.FOLLOW_nnchementity_in_synpred258_ChemicalChunker1355);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred258_ChemicalChunker

    // $ANTLR start synpred259_ChemicalChunker
    public final void synpred259_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:60: ( nnstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:60: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred259_ChemicalChunker1357_static.FOLLOW_nnstate_in_synpred259_ChemicalChunker1357);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred259_ChemicalChunker

    // $ANTLR start synpred260_ChemicalChunker
    public final void synpred260_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:68: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:68: nn
        {
        pushFollow(FOLLOW_nn_in_synpred260_ChemicalChunker1359_static.FOLLOW_nn_in_synpred260_ChemicalChunker1359);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred260_ChemicalChunker

    // $ANTLR start synpred261_ChemicalChunker
    public final void synpred261_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:4: ( oscaront )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:4: oscaront
        {
        pushFollow(FOLLOW_oscaront_in_synpred261_ChemicalChunker1371_static.FOLLOW_oscaront_in_synpred261_ChemicalChunker1371);
        oscaront();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred261_ChemicalChunker

    // $ANTLR start synpred263_ChemicalChunker
    public final void synpred263_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:46: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:46: adj
        {
        pushFollow(FOLLOW_adj_in_synpred263_ChemicalChunker1396_static.FOLLOW_adj_in_synpred263_ChemicalChunker1396);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred263_ChemicalChunker

    // $ANTLR start synpred264_ChemicalChunker
    public final void synpred264_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:52: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:52: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred264_ChemicalChunker1400_static.FOLLOW_quantity_in_synpred264_ChemicalChunker1400);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred264_ChemicalChunker

    // $ANTLR start synpred265_ChemicalChunker
    public final void synpred265_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:63: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:63: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred265_ChemicalChunker1404_static.FOLLOW_nnchementity_in_synpred265_ChemicalChunker1404);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred265_ChemicalChunker

    // $ANTLR start synpred266_ChemicalChunker
    public final void synpred266_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:78: ({...}? numericOrIdentifierCompoundReference )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:78: {...}? numericOrIdentifierCompoundReference
        {
        if ( !((!followedByNumberWhichIsNotAReference(input))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred266_ChemicalChunker", "!followedByNumberWhichIsNotAReference(input)");
        }
        pushFollow(FOLLOW_numericOrIdentifierCompoundReference_in_synpred266_ChemicalChunker1410_static.FOLLOW_numericOrIdentifierCompoundReference_in_synpred266_ChemicalChunker1410);
        numericOrIdentifierCompoundReference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred266_ChemicalChunker

    // $ANTLR start synpred267_ChemicalChunker
    public final void synpred267_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:165: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:165: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred267_ChemicalChunker1414_static.FOLLOW_quantity_in_synpred267_ChemicalChunker1414);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred267_ChemicalChunker

    // $ANTLR start synpred268_ChemicalChunker
    public final void synpred268_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:34: ( afterOscarCompoundStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:34: afterOscarCompoundStructure
        {
        pushFollow(FOLLOW_afterOscarCompoundStructure_in_synpred268_ChemicalChunker1425_static.FOLLOW_afterOscarCompoundStructure_in_synpred268_ChemicalChunker1425);
        afterOscarCompoundStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred268_ChemicalChunker

    // $ANTLR start synpred270_ChemicalChunker
    public final void synpred270_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:30: ( oscarcm )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:30: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred270_ChemicalChunker1452_static.FOLLOW_oscarcm_in_synpred270_ChemicalChunker1452);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred270_ChemicalChunker

    // $ANTLR start synpred272_ChemicalChunker
    public final void synpred272_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:45: ( oscarcm )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:45: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred272_ChemicalChunker1458_static.FOLLOW_oscarcm_in_synpred272_ChemicalChunker1458);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred272_ChemicalChunker

    // $ANTLR start synpred273_ChemicalChunker
    public final void synpred273_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:40: ( dash ( oscarcm )+ )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:40: dash ( oscarcm )+
        {
        pushFollow(FOLLOW_dash_in_synpred273_ChemicalChunker1456_static.FOLLOW_dash_in_synpred273_ChemicalChunker1456);
        dash();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:45: ( oscarcm )+
        int cnt198=0;
        loop198:
        do {
            int alt198=2;
            switch ( input.LA(1) ) {
            case 84:
                {
                alt198=1;
                }
                break;

            }

            switch (alt198) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
        	    {
        	    pushFollow(FOLLOW_oscarcm_in_synpred273_ChemicalChunker1458_static.FOLLOW_oscarcm_in_synpred273_ChemicalChunker1458);
        	    oscarcm();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt198 >= 1 ) break loop198;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(198, input);
                    throw eee;
            }
            cnt198++;
        } while (true);


        }
    }
    // $ANTLR end synpred273_ChemicalChunker

    // $ANTLR start synpred274_ChemicalChunker
    public final void synpred274_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:56: ( dash )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:56: dash
        {
        pushFollow(FOLLOW_dash_in_synpred274_ChemicalChunker1463_static.FOLLOW_dash_in_synpred274_ChemicalChunker1463);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred274_ChemicalChunker

    // $ANTLR start synpred275_ChemicalChunker
    public final void synpred275_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:39: ( ( dash ( oscarcm )+ )+ ( dash )? )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:39: ( dash ( oscarcm )+ )+ ( dash )?
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:39: ( dash ( oscarcm )+ )+
        int cnt200=0;
        loop200:
        do {
            int alt200=2;
            switch ( input.LA(1) ) {
            case 136:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 84:
                        {
                        alt200=1;
                        }
                        break;

                    }

                    }
                    break;

                }

                }
                break;

            }

            switch (alt200) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:40: dash ( oscarcm )+
        	    {
        	    pushFollow(FOLLOW_dash_in_synpred275_ChemicalChunker1456_static.FOLLOW_dash_in_synpred275_ChemicalChunker1456);
        	    dash();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:45: ( oscarcm )+
        	    int cnt199=0;
        	    loop199:
        	    do {
        	        int alt199=2;
        	        switch ( input.LA(1) ) {
        	        case 84:
        	            {
        	            alt199=1;
        	            }
        	            break;

        	        }

        	        switch (alt199) {
        	    	case 1 :
        	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
        	    	    {
        	    	    pushFollow(FOLLOW_oscarcm_in_synpred275_ChemicalChunker1458_static.FOLLOW_oscarcm_in_synpred275_ChemicalChunker1458);
        	    	    oscarcm();

        	    	    state._fsp--;
        	    	    if (state.failed) return ;

        	    	    }
        	    	    break;

        	    	default :
        	    	    if ( cnt199 >= 1 ) break loop199;
        	    	    if (state.backtracking>0) {state.failed=true; return ;}
        	                EarlyExitException eee =
        	                    new EarlyExitException(199, input);
        	                throw eee;
        	        }
        	        cnt199++;
        	    } while (true);


        	    }
        	    break;

        	default :
        	    if ( cnt200 >= 1 ) break loop200;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(200, input);
                    throw eee;
            }
            cnt200++;
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:56: ( dash )?
        int alt201=2;
        switch ( input.LA(1) ) {
            case 136:
                {
                alt201=1;
                }
                break;
        }

        switch (alt201) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dash
                {
                pushFollow(FOLLOW_dash_in_synpred275_ChemicalChunker1463_static.FOLLOW_dash_in_synpred275_ChemicalChunker1463);
                dash();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred275_ChemicalChunker

    // $ANTLR start synpred276_ChemicalChunker
    public final void synpred276_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:63: ( dash )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:63: dash
        {
        pushFollow(FOLLOW_dash_in_synpred276_ChemicalChunker1467_static.FOLLOW_dash_in_synpred276_ChemicalChunker1467);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred276_ChemicalChunker

    // $ANTLR start synpred277_ChemicalChunker
    public final void synpred277_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:68: ( apost )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:68: apost
        {
        pushFollow(FOLLOW_apost_in_synpred277_ChemicalChunker1469_static.FOLLOW_apost_in_synpred277_ChemicalChunker1469);
        apost();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred277_ChemicalChunker

    // $ANTLR start synpred279_ChemicalChunker
    public final void synpred279_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:187:19: ( moleculeamount3 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:187:19: moleculeamount3
        {
        pushFollow(FOLLOW_moleculeamount3_in_synpred279_ChemicalChunker1512_static.FOLLOW_moleculeamount3_in_synpred279_ChemicalChunker1512);
        moleculeamount3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred279_ChemicalChunker

    // $ANTLR start synpred280_ChemicalChunker
    public final void synpred280_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:187:36: ( moleculeamount1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:187:36: moleculeamount1
        {
        pushFollow(FOLLOW_moleculeamount1_in_synpred280_ChemicalChunker1515_static.FOLLOW_moleculeamount1_in_synpred280_ChemicalChunker1515);
        moleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred280_ChemicalChunker

    // $ANTLR start synpred281_ChemicalChunker
    public final void synpred281_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:187:71: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:187:71: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred281_ChemicalChunker1522_static.FOLLOW_asAstate_in_synpred281_ChemicalChunker1522);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred281_ChemicalChunker

    // $ANTLR start synpred282_ChemicalChunker
    public final void synpred282_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:190:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:190:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred282_ChemicalChunker1533_static.FOLLOW_quantity_in_synpred282_ChemicalChunker1533);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred282_ChemicalChunker

    // $ANTLR start synpred285_ChemicalChunker
    public final void synpred285_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:190:54: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:190:54: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred285_ChemicalChunker1551_static.FOLLOW_mixture_in_synpred285_ChemicalChunker1551);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred285_ChemicalChunker

    // $ANTLR start synpred286_ChemicalChunker
    public final void synpred286_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred286_ChemicalChunker1564_static.FOLLOW_quantity_in_synpred286_ChemicalChunker1564);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred286_ChemicalChunker

    // $ANTLR start synpred287_ChemicalChunker
    public final void synpred287_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:13: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred287_ChemicalChunker1566_static.FOLLOW_mixture_in_synpred287_ChemicalChunker1566);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred287_ChemicalChunker

    // $ANTLR start synpred292_ChemicalChunker
    public final void synpred292_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:60: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:60: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred292_ChemicalChunker1589_static.FOLLOW_oscarCompound_in_synpred292_ChemicalChunker1589);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred292_ChemicalChunker

    // $ANTLR start synpred293_ChemicalChunker
    public final void synpred293_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred293_ChemicalChunker1601_static.FOLLOW_quantity_in_synpred293_ChemicalChunker1601);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred293_ChemicalChunker

    // $ANTLR start synpred294_ChemicalChunker
    public final void synpred294_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:13: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred294_ChemicalChunker1603_static.FOLLOW_mixture_in_synpred294_ChemicalChunker1603);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred294_ChemicalChunker

    // $ANTLR start synpred295_ChemicalChunker
    public final void synpred295_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:23: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:23: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred295_ChemicalChunker1607_static.FOLLOW_oscarCompound_in_synpred295_ChemicalChunker1607);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred295_ChemicalChunker

    // $ANTLR start synpred296_ChemicalChunker
    public final void synpred296_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:35: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:35: citation
        {
        pushFollow(FOLLOW_citation_in_synpred296_ChemicalChunker1618_static.FOLLOW_citation_in_synpred296_ChemicalChunker1618);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred296_ChemicalChunker

    // $ANTLR start synpred297_ChemicalChunker
    public final void synpred297_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:44: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:44: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred297_ChemicalChunker1620_static.FOLLOW_quantity_in_synpred297_ChemicalChunker1620);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred297_ChemicalChunker

    // $ANTLR start synpred299_ChemicalChunker
    public final void synpred299_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:53: ( comma ( quantity1Node | citationStructure ) )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:53: comma ( quantity1Node | citationStructure )
        {
        pushFollow(FOLLOW_comma_in_synpred299_ChemicalChunker1622_static.FOLLOW_comma_in_synpred299_ChemicalChunker1622);
        comma();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:59: ( quantity1Node | citationStructure )
        int alt203=2;
        alt203 = dfa203.predict(input);
        switch (alt203) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:60: quantity1Node
                {
                pushFollow(FOLLOW_quantity1Node_in_synpred299_ChemicalChunker1625_static.FOLLOW_quantity1Node_in_synpred299_ChemicalChunker1625);
                quantity1Node();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:74: citationStructure
                {
                pushFollow(FOLLOW_citationStructure_in_synpred299_ChemicalChunker1627_static.FOLLOW_citationStructure_in_synpred299_ChemicalChunker1627);
                citationStructure();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred299_ChemicalChunker

    // $ANTLR start synpred300_ChemicalChunker
    public final void synpred300_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:93: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:93: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred300_ChemicalChunker1630_static.FOLLOW_mixture_in_synpred300_ChemicalChunker1630);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred300_ChemicalChunker

    // $ANTLR start synpred301_ChemicalChunker
    public final void synpred301_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:31: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:31: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred301_ChemicalChunker1643_static.FOLLOW_asAstate_in_synpred301_ChemicalChunker1643);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred301_ChemicalChunker

    // $ANTLR start synpred303_ChemicalChunker
    public final void synpred303_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:65: ( optionalUnnamedMoleculeEnding )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:65: optionalUnnamedMoleculeEnding
        {
        pushFollow(FOLLOW_optionalUnnamedMoleculeEnding_in_synpred303_ChemicalChunker1673_static.FOLLOW_optionalUnnamedMoleculeEnding_in_synpred303_ChemicalChunker1673);
        optionalUnnamedMoleculeEnding();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred303_ChemicalChunker

    // $ANTLR start synpred304_ChemicalChunker
    public final void synpred304_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:4: ( quantity inof ( unnamedmoleculeamount1 | unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )? ) )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:4: quantity inof ( unnamedmoleculeamount1 | unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )? )
        {
        pushFollow(FOLLOW_quantity_in_synpred304_ChemicalChunker1664_static.FOLLOW_quantity_in_synpred304_ChemicalChunker1664);
        quantity();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_inof_in_synpred304_ChemicalChunker1666_static.FOLLOW_inof_in_synpred304_ChemicalChunker1666);
        inof();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:18: ( unnamedmoleculeamount1 | unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )? )
        int alt205=2;
        switch ( input.LA(1) ) {
        case 38:
        case 139:
        case 141:
        case 143:
        case 146:
            {
            alt205=1;
            }
            break;
        case 41:
        case 42:
        case 45:
        case 46:
        case 63:
        case 68:
        case 71:
        case 83:
        case 90:
        case 142:
        case 147:
        case 149:
        case 151:
        case 156:
        case 157:
        case 158:
        case 159:
            {
            alt205=2;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 205, 0, input);

            throw nvae;
        }

        switch (alt205) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:19: unnamedmoleculeamount1
                {
                pushFollow(FOLLOW_unnamedmoleculeamount1_in_synpred304_ChemicalChunker1669_static.FOLLOW_unnamedmoleculeamount1_in_synpred304_ChemicalChunker1669);
                unnamedmoleculeamount1();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:42: unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )?
                {
                pushFollow(FOLLOW_unnamedmoleculeamount2_in_synpred304_ChemicalChunker1671_static.FOLLOW_unnamedmoleculeamount2_in_synpred304_ChemicalChunker1671);
                unnamedmoleculeamount2();

                state._fsp--;
                if (state.failed) return ;
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:65: ( optionalUnnamedMoleculeEnding )?
                int alt204=2;
                switch ( input.LA(1) ) {
                    case 38:
                    case 73:
                    case 133:
                    case 139:
                    case 141:
                    case 143:
                    case 146:
                        {
                        alt204=1;
                        }
                        break;
                    case EOF:
                        {
                        int LA204_2 = input.LA(2);

                        if ( (synpred303_ChemicalChunker()) ) {
                            alt204=1;
                        }
                        }
                        break;
                }

                switch (alt204) {
                    case 1 :
                        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: optionalUnnamedMoleculeEnding
                        {
                        pushFollow(FOLLOW_optionalUnnamedMoleculeEnding_in_synpred304_ChemicalChunker1673_static.FOLLOW_optionalUnnamedMoleculeEnding_in_synpred304_ChemicalChunker1673);
                        optionalUnnamedMoleculeEnding();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }
                break;

        }


        }
    }
    // $ANTLR end synpred304_ChemicalChunker

    // $ANTLR start synpred306_ChemicalChunker
    public final void synpred306_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:121: ( unnamedmoleculeamount4 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:121: unnamedmoleculeamount4
        {
        pushFollow(FOLLOW_unnamedmoleculeamount4_in_synpred306_ChemicalChunker1680_static.FOLLOW_unnamedmoleculeamount4_in_synpred306_ChemicalChunker1680);
        unnamedmoleculeamount4();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred306_ChemicalChunker

    // $ANTLR start synpred307_ChemicalChunker
    public final void synpred307_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:144: ( unnamedmoleculeamount5 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:144: unnamedmoleculeamount5
        {
        pushFollow(FOLLOW_unnamedmoleculeamount5_in_synpred307_ChemicalChunker1682_static.FOLLOW_unnamedmoleculeamount5_in_synpred307_ChemicalChunker1682);
        unnamedmoleculeamount5();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred307_ChemicalChunker

    // $ANTLR start synpred308_ChemicalChunker
    public final void synpred308_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:167: ( unnamedmoleculeamount6 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:167: unnamedmoleculeamount6
        {
        pushFollow(FOLLOW_unnamedmoleculeamount6_in_synpred308_ChemicalChunker1684_static.FOLLOW_unnamedmoleculeamount6_in_synpred308_ChemicalChunker1684);
        unnamedmoleculeamount6();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred308_ChemicalChunker

    // $ANTLR start synpred309_ChemicalChunker
    public final void synpred309_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:43: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:43: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred309_ChemicalChunker1701_static.FOLLOW_quantity_in_synpred309_ChemicalChunker1701);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred309_ChemicalChunker

    // $ANTLR start synpred310_ChemicalChunker
    public final void synpred310_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:52: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:52: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred310_ChemicalChunker1703_static.FOLLOW_mixture_in_synpred310_ChemicalChunker1703);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred310_ChemicalChunker

    // $ANTLR start synpred320_ChemicalChunker
    public final void synpred320_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:58: ( referenceToExampleCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:58: referenceToExampleCompound
        {
        pushFollow(FOLLOW_referenceToExampleCompound_in_synpred320_ChemicalChunker1741_static.FOLLOW_referenceToExampleCompound_in_synpred320_ChemicalChunker1741);
        referenceToExampleCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred320_ChemicalChunker

    // $ANTLR start synpred321_ChemicalChunker
    public final void synpred321_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:85: ( nnexample )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:85: nnexample
        {
        pushFollow(FOLLOW_nnexample_in_synpred321_ChemicalChunker1743_static.FOLLOW_nnexample_in_synpred321_ChemicalChunker1743);
        nnexample();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred321_ChemicalChunker

    // $ANTLR start synpred328_ChemicalChunker
    public final void synpred328_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:24: ( optionalUnnamedMoleculeEnding )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:24: optionalUnnamedMoleculeEnding
        {
        pushFollow(FOLLOW_optionalUnnamedMoleculeEnding_in_synpred328_ChemicalChunker1771_static.FOLLOW_optionalUnnamedMoleculeEnding_in_synpred328_ChemicalChunker1771);
        optionalUnnamedMoleculeEnding();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred328_ChemicalChunker

    // $ANTLR start synpred329_ChemicalChunker
    public final void synpred329_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:5: ( numericOrIdentifierCompoundReference )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:5: numericOrIdentifierCompoundReference
        {
        pushFollow(FOLLOW_numericOrIdentifierCompoundReference_in_synpred329_ChemicalChunker1783_static.FOLLOW_numericOrIdentifierCompoundReference_in_synpred329_ChemicalChunker1783);
        numericOrIdentifierCompoundReference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred329_ChemicalChunker

    // $ANTLR start synpred330_ChemicalChunker
    public final void synpred330_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:44: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:44: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred330_ChemicalChunker1787_static.FOLLOW_quantity_in_synpred330_ChemicalChunker1787);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred330_ChemicalChunker

    // $ANTLR start synpred331_ChemicalChunker
    public final void synpred331_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:53: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:53: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred331_ChemicalChunker1789_static.FOLLOW_mixture_in_synpred331_ChemicalChunker1789);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred331_ChemicalChunker

    // $ANTLR start synpred332_ChemicalChunker
    public final void synpred332_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:47: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:47: citation
        {
        pushFollow(FOLLOW_citation_in_synpred332_ChemicalChunker1803_static.FOLLOW_citation_in_synpred332_ChemicalChunker1803);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred332_ChemicalChunker

    // $ANTLR start synpred333_ChemicalChunker
    public final void synpred333_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:56: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:56: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred333_ChemicalChunker1805_static.FOLLOW_quantity_in_synpred333_ChemicalChunker1805);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred333_ChemicalChunker

    // $ANTLR start synpred334_ChemicalChunker
    public final void synpred334_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:65: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:65: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred334_ChemicalChunker1807_static.FOLLOW_mixture_in_synpred334_ChemicalChunker1807);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred334_ChemicalChunker

    // $ANTLR start synpred339_ChemicalChunker
    public final void synpred339_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:48: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:48: citation
        {
        pushFollow(FOLLOW_citation_in_synpred339_ChemicalChunker1862_static.FOLLOW_citation_in_synpred339_ChemicalChunker1862);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred339_ChemicalChunker

    // $ANTLR start synpred340_ChemicalChunker
    public final void synpred340_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:57: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:57: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred340_ChemicalChunker1864_static.FOLLOW_quantity_in_synpred340_ChemicalChunker1864);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred340_ChemicalChunker

    // $ANTLR start synpred341_ChemicalChunker
    public final void synpred341_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:66: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:66: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred341_ChemicalChunker1866_static.FOLLOW_mixture_in_synpred341_ChemicalChunker1866);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred341_ChemicalChunker

    // $ANTLR start synpred342_ChemicalChunker
    public final void synpred342_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred342_ChemicalChunker1895_static.FOLLOW_quantity_in_synpred342_ChemicalChunker1895);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred342_ChemicalChunker

    // $ANTLR start synpred344_ChemicalChunker
    public final void synpred344_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:44: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:44: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred344_ChemicalChunker1906_static.FOLLOW_quantity_in_synpred344_ChemicalChunker1906);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred344_ChemicalChunker

    // $ANTLR start synpred345_ChemicalChunker
    public final void synpred345_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:53: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:53: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred345_ChemicalChunker1908_static.FOLLOW_mixture_in_synpred345_ChemicalChunker1908);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred345_ChemicalChunker

    // $ANTLR start synpred349_ChemicalChunker
    public final void synpred349_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:234:34: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:234:34: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred349_ChemicalChunker1933_static.FOLLOW_quantity_in_synpred349_ChemicalChunker1933);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred349_ChemicalChunker

    // $ANTLR start synpred352_ChemicalChunker
    public final void synpred352_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:240:31: ( identifierOrBracketedIdentifier )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:240:31: identifierOrBracketedIdentifier
        {
        pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_synpred352_ChemicalChunker1964_static.FOLLOW_identifierOrBracketedIdentifier_in_synpred352_ChemicalChunker1964);
        identifierOrBracketedIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred352_ChemicalChunker

    // $ANTLR start synpred357_ChemicalChunker
    public final void synpred357_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:255:19: ( comma measurements )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:255:19: comma measurements
        {
        pushFollow(FOLLOW_comma_in_synpred357_ChemicalChunker2097_static.FOLLOW_comma_in_synpred357_ChemicalChunker2097);
        comma();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_measurements_in_synpred357_ChemicalChunker2100_static.FOLLOW_measurements_in_synpred357_ChemicalChunker2100);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred357_ChemicalChunker

    // $ANTLR start synpred360_ChemicalChunker
    public final void synpred360_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:258:40: ( dt )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:258:40: dt
        {
        pushFollow(FOLLOW_dt_in_synpred360_ChemicalChunker2125_static.FOLLOW_dt_in_synpred360_ChemicalChunker2125);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred360_ChemicalChunker

    // $ANTLR start synpred361_ChemicalChunker
    public final void synpred361_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:25: ( measurementtypes )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:25: measurementtypes
        {
        pushFollow(FOLLOW_measurementtypes_in_synpred361_ChemicalChunker2137_static.FOLLOW_measurementtypes_in_synpred361_ChemicalChunker2137);
        measurementtypes();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred361_ChemicalChunker

    // $ANTLR start synpred368_ChemicalChunker
    public final void synpred368_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:60: ( yield )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:60: yield
        {
        pushFollow(FOLLOW_yield_in_synpred368_ChemicalChunker2174_static.FOLLOW_yield_in_synpred368_ChemicalChunker2174);
        yield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred368_ChemicalChunker

    // $ANTLR start synpred379_ChemicalChunker
    public final void synpred379_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:20: ( fw )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:20: fw
        {
        pushFollow(FOLLOW_fw_in_synpred379_ChemicalChunker2462_static.FOLLOW_fw_in_synpred379_ChemicalChunker2462);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred379_ChemicalChunker

    // $ANTLR start synpred380_ChemicalChunker
    public final void synpred380_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:23: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:23: verb
        {
        pushFollow(FOLLOW_verb_in_synpred380_ChemicalChunker2464_static.FOLLOW_verb_in_synpred380_ChemicalChunker2464);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred380_ChemicalChunker

    // $ANTLR start synpred381_ChemicalChunker
    public final void synpred381_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:28: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:28: nn
        {
        pushFollow(FOLLOW_nn_in_synpred381_ChemicalChunker2466_static.FOLLOW_nn_in_synpred381_ChemicalChunker2466);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred381_ChemicalChunker

    // $ANTLR start synpred382_ChemicalChunker
    public final void synpred382_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:31: ( quantity2Node )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:31: quantity2Node
        {
        pushFollow(FOLLOW_quantity2Node_in_synpred382_ChemicalChunker2468_static.FOLLOW_quantity2Node_in_synpred382_ChemicalChunker2468);
        quantity2Node();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred382_ChemicalChunker

    // $ANTLR start synpred385_ChemicalChunker
    public final void synpred385_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:58: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:58: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred385_ChemicalChunker2474_static.FOLLOW_oscarCompound_in_synpred385_ChemicalChunker2474);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred385_ChemicalChunker

    // $ANTLR start synpred386_ChemicalChunker
    public final void synpred386_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:72: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:72: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred386_ChemicalChunker2476_static.FOLLOW_molecule_in_synpred386_ChemicalChunker2476);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred386_ChemicalChunker

    // $ANTLR start synpred387_ChemicalChunker
    public final void synpred387_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:81: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:81: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred387_ChemicalChunker2478_static.FOLLOW_unnamedmolecule_in_synpred387_ChemicalChunker2478);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred387_ChemicalChunker

    // $ANTLR start synpred389_ChemicalChunker
    public final void synpred389_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:102: ( sym )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:102: sym
        {
        pushFollow(FOLLOW_sym_in_synpred389_ChemicalChunker2482_static.FOLLOW_sym_in_synpred389_ChemicalChunker2482);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred389_ChemicalChunker

    // $ANTLR start synpred390_ChemicalChunker
    public final void synpred390_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:106: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:106: noun
        {
        pushFollow(FOLLOW_noun_in_synpred390_ChemicalChunker2484_static.FOLLOW_noun_in_synpred390_ChemicalChunker2484);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred390_ChemicalChunker

    // $ANTLR start synpred392_ChemicalChunker
    public final void synpred392_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:117: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:117: cd
        {
        pushFollow(FOLLOW_cd_in_synpred392_ChemicalChunker2488_static.FOLLOW_cd_in_synpred392_ChemicalChunker2488);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred392_ChemicalChunker

    // $ANTLR start synpred393_ChemicalChunker
    public final void synpred393_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:120: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:120: comma
        {
        pushFollow(FOLLOW_comma_in_synpred393_ChemicalChunker2490_static.FOLLOW_comma_in_synpred393_ChemicalChunker2490);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred393_ChemicalChunker

    // $ANTLR start synpred394_ChemicalChunker
    public final void synpred394_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:126: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:126: adj
        {
        pushFollow(FOLLOW_adj_in_synpred394_ChemicalChunker2492_static.FOLLOW_adj_in_synpred394_ChemicalChunker2492);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred394_ChemicalChunker

    // $ANTLR start synpred396_ChemicalChunker
    public final void synpred396_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:143: ( minimixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:143: minimixture
        {
        pushFollow(FOLLOW_minimixture_in_synpred396_ChemicalChunker2500_static.FOLLOW_minimixture_in_synpred396_ChemicalChunker2500);
        minimixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred396_ChemicalChunker

    // $ANTLR start synpred397_ChemicalChunker
    public final void synpred397_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:155: ( fw )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:155: fw
        {
        pushFollow(FOLLOW_fw_in_synpred397_ChemicalChunker2502_static.FOLLOW_fw_in_synpred397_ChemicalChunker2502);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred397_ChemicalChunker

    // $ANTLR start synpred398_ChemicalChunker
    public final void synpred398_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:158: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:158: verb
        {
        pushFollow(FOLLOW_verb_in_synpred398_ChemicalChunker2504_static.FOLLOW_verb_in_synpred398_ChemicalChunker2504);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred398_ChemicalChunker

    // $ANTLR start synpred399_ChemicalChunker
    public final void synpred399_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:163: ( quantity2Node )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:163: quantity2Node
        {
        pushFollow(FOLLOW_quantity2Node_in_synpred399_ChemicalChunker2506_static.FOLLOW_quantity2Node_in_synpred399_ChemicalChunker2506);
        quantity2Node();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred399_ChemicalChunker

    // $ANTLR start synpred400_ChemicalChunker
    public final void synpred400_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:177: ( nnyield )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:177: nnyield
        {
        pushFollow(FOLLOW_nnyield_in_synpred400_ChemicalChunker2508_static.FOLLOW_nnyield_in_synpred400_ChemicalChunker2508);
        nnyield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred400_ChemicalChunker

    // $ANTLR start synpred403_ChemicalChunker
    public final void synpred403_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:198: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:198: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred403_ChemicalChunker2514_static.FOLLOW_oscarCompound_in_synpred403_ChemicalChunker2514);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred403_ChemicalChunker

    // $ANTLR start synpred404_ChemicalChunker
    public final void synpred404_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:212: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:212: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred404_ChemicalChunker2516_static.FOLLOW_molecule_in_synpred404_ChemicalChunker2516);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred404_ChemicalChunker

    // $ANTLR start synpred405_ChemicalChunker
    public final void synpred405_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:221: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:221: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred405_ChemicalChunker2518_static.FOLLOW_unnamedmolecule_in_synpred405_ChemicalChunker2518);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred405_ChemicalChunker

    // $ANTLR start synpred407_ChemicalChunker
    public final void synpred407_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:242: ( sym )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:242: sym
        {
        pushFollow(FOLLOW_sym_in_synpred407_ChemicalChunker2522_static.FOLLOW_sym_in_synpred407_ChemicalChunker2522);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred407_ChemicalChunker

    // $ANTLR start synpred408_ChemicalChunker
    public final void synpred408_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:246: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:246: noun
        {
        pushFollow(FOLLOW_noun_in_synpred408_ChemicalChunker2524_static.FOLLOW_noun_in_synpred408_ChemicalChunker2524);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred408_ChemicalChunker

    // $ANTLR start synpred410_ChemicalChunker
    public final void synpred410_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:257: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:257: cd
        {
        pushFollow(FOLLOW_cd_in_synpred410_ChemicalChunker2528_static.FOLLOW_cd_in_synpred410_ChemicalChunker2528);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred410_ChemicalChunker

    // $ANTLR start synpred411_ChemicalChunker
    public final void synpred411_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:260: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:260: comma
        {
        pushFollow(FOLLOW_comma_in_synpred411_ChemicalChunker2530_static.FOLLOW_comma_in_synpred411_ChemicalChunker2530);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred411_ChemicalChunker

    // $ANTLR start synpred412_ChemicalChunker
    public final void synpred412_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:266: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:266: adj
        {
        pushFollow(FOLLOW_adj_in_synpred412_ChemicalChunker2532_static.FOLLOW_adj_in_synpred412_ChemicalChunker2532);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred412_ChemicalChunker

    // $ANTLR start synpred418_ChemicalChunker
    public final void synpred418_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:31: ( identifierOrBracketedIdentifier )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:31: identifierOrBracketedIdentifier
        {
        pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_synpred418_ChemicalChunker2599_static.FOLLOW_identifierOrBracketedIdentifier_in_synpred418_ChemicalChunker2599);
        identifierOrBracketedIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred418_ChemicalChunker

    // $ANTLR start synpred419_ChemicalChunker
    public final void synpred419_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:63: ( numeric )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:63: numeric
        {
        pushFollow(FOLLOW_numeric_in_synpred419_ChemicalChunker2601_static.FOLLOW_numeric_in_synpred419_ChemicalChunker2601);
        numeric();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred419_ChemicalChunker

    // $ANTLR start synpred421_ChemicalChunker
    public final void synpred421_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:86: ( identifierOrBracketedIdentifier )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:86: identifierOrBracketedIdentifier
        {
        pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_synpred421_ChemicalChunker2610_static.FOLLOW_identifierOrBracketedIdentifier_in_synpred421_ChemicalChunker2610);
        identifierOrBracketedIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred421_ChemicalChunker

    // $ANTLR start synpred422_ChemicalChunker
    public final void synpred422_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:13: ( identifierOrBracketedIdentifier )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:13: identifierOrBracketedIdentifier
        {
        pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_synpred422_ChemicalChunker2626_static.FOLLOW_identifierOrBracketedIdentifier_in_synpred422_ChemicalChunker2626);
        identifierOrBracketedIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred422_ChemicalChunker

    // $ANTLR start synpred430_ChemicalChunker
    public final void synpred430_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:10: ( numericratio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:10: numericratio
        {
        pushFollow(FOLLOW_numericratio_in_synpred430_ChemicalChunker2727_static.FOLLOW_numericratio_in_synpred430_ChemicalChunker2727);
        numericratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred430_ChemicalChunker

    // $ANTLR start synpred431_ChemicalChunker
    public final void synpred431_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:21: ( colon numeric )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:21: colon numeric
        {
        pushFollow(FOLLOW_colon_in_synpred431_ChemicalChunker2755_static.FOLLOW_colon_in_synpred431_ChemicalChunker2755);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_numeric_in_synpred431_ChemicalChunker2757_static.FOLLOW_numeric_in_synpred431_ChemicalChunker2757);
        numeric();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred431_ChemicalChunker

    // $ANTLR start synpred432_ChemicalChunker
    public final void synpred432_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:12: ( colon noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:12: colon noun
        {
        pushFollow(FOLLOW_colon_in_synpred432_ChemicalChunker2773_static.FOLLOW_colon_in_synpred432_ChemicalChunker2773);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_noun_in_synpred432_ChemicalChunker2775_static.FOLLOW_noun_in_synpred432_ChemicalChunker2775);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred432_ChemicalChunker

    // Delegated rules

    public final boolean synpred292_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred270_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred270_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred408_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred408_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred222_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred222_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred147_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred147_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred306_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred246_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred246_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred115_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred115_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred340_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred340_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred116_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred116_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred380_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred380_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred299_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred299_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred368_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred368_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred407_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred407_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred334_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred334_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred432_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred432_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred345_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred345_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred418_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred418_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred168_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred168_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred308_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred308_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred134_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred134_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred175_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred175_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred386_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred386_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred342_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred342_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred328_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred328_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred282_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred225_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred225_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred267_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred267_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred421_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred421_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred277_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred277_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred169_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred169_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred310_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred310_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred390_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred390_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred397_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred397_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred430_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred430_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred118_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred118_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred330_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred330_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred170_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred170_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred171_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred171_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred272_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred272_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred106_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred106_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred394_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred394_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred392_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred392_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred339_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred339_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred268_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred268_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred320_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred320_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred188_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred188_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred404_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred404_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred304_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred304_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred286_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred286_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred276_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred276_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred422_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred422_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred257_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred257_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred387_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred387_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred352_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred352_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred280_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred280_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred411_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred411_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred379_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred379_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred301_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred301_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred296_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred296_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred87_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred400_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred400_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred410_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred410_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred331_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred331_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred264_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred321_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred321_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred120_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred120_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred349_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred349_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred344_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred344_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred419_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred419_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred307_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred117_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred117_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred297_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred297_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred165_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred165_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred223_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred341_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred341_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred360_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred360_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred385_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred385_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred265_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred265_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred300_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred300_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred293_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred293_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred266_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred266_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred412_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred412_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred361_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred361_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred329_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred329_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred273_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred403_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred403_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred119_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred119_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred295_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred295_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred253_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred253_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred247_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred247_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred274_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred274_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred357_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred357_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred287_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred381_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred381_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred389_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred389_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred303_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred303_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred260_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred260_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred281_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred281_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred431_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred431_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred398_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred398_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred250_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred250_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred405_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred405_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred393_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred393_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred285_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred285_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred309_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred309_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred224_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred224_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred333_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred333_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred84_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred382_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred382_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred332_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred332_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred396_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred396_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred399_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred399_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred255_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred255_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA6 dfa6 = new DFA6(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA12 dfa12 = new DFA12(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA15 dfa15 = new DFA15(this);
    protected DFA16 dfa16 = new DFA16(this);
    protected DFA17 dfa17 = new DFA17(this);
    protected DFA19 dfa19 = new DFA19(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA22 dfa22 = new DFA22(this);
    protected DFA24 dfa24 = new DFA24(this);
    protected DFA25 dfa25 = new DFA25(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA35 dfa35 = new DFA35(this);
    protected DFA37 dfa37 = new DFA37(this);
    protected DFA38 dfa38 = new DFA38(this);
    protected DFA44 dfa44 = new DFA44(this);
    protected DFA45 dfa45 = new DFA45(this);
    protected DFA47 dfa47 = new DFA47(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA51 dfa51 = new DFA51(this);
    protected DFA53 dfa53 = new DFA53(this);
    protected DFA59 dfa59 = new DFA59(this);
    protected DFA71 dfa71 = new DFA71(this);
    protected DFA70 dfa70 = new DFA70(this);
    protected DFA77 dfa77 = new DFA77(this);
    protected DFA80 dfa80 = new DFA80(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA82 dfa82 = new DFA82(this);
    protected DFA92 dfa92 = new DFA92(this);
    protected DFA93 dfa93 = new DFA93(this);
    protected DFA96 dfa96 = new DFA96(this);
    protected DFA101 dfa101 = new DFA101(this);
    protected DFA102 dfa102 = new DFA102(this);
    protected DFA103 dfa103 = new DFA103(this);
    protected DFA105 dfa105 = new DFA105(this);
    protected DFA104 dfa104 = new DFA104(this);
    protected DFA106 dfa106 = new DFA106(this);
    protected DFA109 dfa109 = new DFA109(this);
    protected DFA107 dfa107 = new DFA107(this);
    protected DFA110 dfa110 = new DFA110(this);
    protected DFA113 dfa113 = new DFA113(this);
    protected DFA114 dfa114 = new DFA114(this);
    protected DFA115 dfa115 = new DFA115(this);
    protected DFA116 dfa116 = new DFA116(this);
    protected DFA117 dfa117 = new DFA117(this);
    protected DFA119 dfa119 = new DFA119(this);
    protected DFA120 dfa120 = new DFA120(this);
    protected DFA123 dfa123 = new DFA123(this);
    protected DFA126 dfa126 = new DFA126(this);
    protected DFA128 dfa128 = new DFA128(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA137 dfa137 = new DFA137(this);
    protected DFA138 dfa138 = new DFA138(this);
    protected DFA148 dfa148 = new DFA148(this);
    protected DFA149 dfa149 = new DFA149(this);
    protected DFA152 dfa152 = new DFA152(this);
    protected DFA161 dfa161 = new DFA161(this);
    protected DFA178 dfa178 = new DFA178(this);
    protected DFA180 dfa180 = new DFA180(this);
    protected DFA182 dfa182 = new DFA182(this);
    protected DFA195 dfa195 = new DFA195(this);
    protected DFA203 dfa203 = new DFA203(this);
    static class DFA2_static {
    static final String DFA2_eotS =
        "\u0092\uffff";
    static final String DFA2_eofS =
        "\1\1\u0091\uffff";
    static final String DFA2_minS =
        "\1\46\1\uffff\u008e\0\2\uffff";
    static final String DFA2_maxS =
        "\1\u00b4\1\uffff\u008e\0\2\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\1\3\u008e\uffff\1\1\1\2";
    static final String DFA2_specialS =
        "\2\uffff\1\102\1\55\1\45\1\177\1\76\1\u0082\1\11\1\107\1\u0081"+
        "\1\44\1\144\1\41\1\162\1\110\1\u0080\1\101\1\152\1\124\1\52\1\46"+
        "\1\4\1\154\1\3\1\u0085\1\6\1\54\1\24\1\122\1\116\1\114\1\111\1\12"+
        "\1\167\1\146\1\15\1\23\1\117\1\26\1\165\1\62\1\100\1\123\1\121\1"+
        "\42\1\43\1\66\1\106\1\74\1\126\1\u0088\1\17\1\175\1\u008a\1\125"+
        "\1\134\1\174\1\31\1\130\1\57\1\13\1\22\1\47\1\113\1\137\1\35\1\156"+
        "\1\64\1\105\1\u0083\1\140\1\142\1\153\1\120\1\173\1\147\1\33\1\163"+
        "\1\20\1\u008c\1\2\1\145\1\155\1\112\1\56\1\133\1\77\1\u0089\1\75"+
        "\1\16\1\7\1\5\1\65\1\141\1\127\1\103\1\172\1\131\1\51\1\27\1\30"+
        "\1\176\1\0\1\170\1\u0086\1\160\1\135\1\132\1\104\1\73\1\67\1\53"+
        "\1\14\1\164\1\u008d\1\115\1\161\1\61\1\1\1\10\1\40\1\166\1\u0084"+
        "\1\157\1\143\1\63\1\71\1\36\1\34\1\21\1\70\1\151\1\72\1\50\1\60"+
        "\1\150\1\136\1\171\1\u008b\1\u0087\1\32\1\37\1\25\2\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\6\1\12\1\14\1\110\1\46\1\51\1\u0085\1\13\1\33\1\114\1\115"+
            "\1\113\1\121\1\122\1\131\1\132\1\116\1\130\1\123\1\125\1\117"+
            "\1\120\1\127\1\126\1\124\1\22\1\47\1\u0086\1\54\1\u0087\1\50"+
            "\1\55\1\64\1\21\1\52\1\5\1\53\1\41\1\42\1\15\1\56\1\57\1\60"+
            "\1\61\1\62\1\43\1\20\1\143\1\u0083\1\144\1\147\1\16\1\67\1\151"+
            "\1\150\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\24\1\161"+
            "\1\63\1\162\1\146\1\163\1\164\1\70\1\165\1\71\1\166\1\72\1\167"+
            "\1\170\1\145\1\171\1\172\1\73\1\173\1\65\1\174\1\175\1\176\1"+
            "\74\1\177\1\45\1\66\1\u0080\1\u0081\1\u0082\1\40\1\134\1\u0088"+
            "\1\17\1\u0089\1\u0084\1\u008a\1\1\1\u008b\1\34\1\u008c\1\35"+
            "\1\25\1\3\1\u008d\1\u008e\1\4\1\2\1\102\1\75\1\112\1\7\1\10"+
            "\1\11\1\105\1\133\1\23\1\44\1\32\1\106\1\103\1\107\1\36\1\37"+
            "\1\26\1\27\1\31\1\30\1\76\1\111\1\u008f\1\135\1\140\1\137\1"+
            "\142\1\136\1\141\1\77\1\104\1\100\1\101",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_static.DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_static.DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_static.DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_static.DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_static.DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_static.DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_static.DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_static.DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "()+ loopback of 81:13: ( sentenceStructure | unmatchedPhrase )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA2_103 = input.LA(1);

                         
                        int index2_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_103);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA2_119 = input.LA(1);

                         
                        int index2_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_119);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA2_81 = input.LA(1);

                         
                        int index2_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_81);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA2_24 = input.LA(1);

                         
                        int index2_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_24);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA2_22 = input.LA(1);

                         
                        int index2_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_22);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA2_92 = input.LA(1);

                         
                        int index2_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_92);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA2_26 = input.LA(1);

                         
                        int index2_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_26);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA2_91 = input.LA(1);

                         
                        int index2_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_91);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA2_120 = input.LA(1);

                         
                        int index2_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_120);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA2_8 = input.LA(1);

                         
                        int index2_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_8);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA2_33 = input.LA(1);

                         
                        int index2_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_33);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA2_61 = input.LA(1);

                         
                        int index2_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_61);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA2_113 = input.LA(1);

                         
                        int index2_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_113);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA2_36 = input.LA(1);

                         
                        int index2_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_36);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA2_90 = input.LA(1);

                         
                        int index2_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_90);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA2_52 = input.LA(1);

                         
                        int index2_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_52);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA2_79 = input.LA(1);

                         
                        int index2_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_79);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA2_130 = input.LA(1);

                         
                        int index2_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_130);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA2_62 = input.LA(1);

                         
                        int index2_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_62);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA2_37 = input.LA(1);

                         
                        int index2_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_37);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA2_28 = input.LA(1);

                         
                        int index2_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred2_ChemicalChunker())) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_28);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA2_143 = input.LA(1);

                         
                        int index2_143 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_143);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA2_39 = input.LA(1);

                         
                        int index2_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_39);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA2_100 = input.LA(1);

                         
                        int index2_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_100);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA2_101 = input.LA(1);

                         
                        int index2_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_101);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA2_58 = input.LA(1);

                         
                        int index2_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_58);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA2_141 = input.LA(1);

                         
                        int index2_141 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_141);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA2_77 = input.LA(1);

                         
                        int index2_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_77);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA2_129 = input.LA(1);

                         
                        int index2_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_129);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA2_66 = input.LA(1);

                         
                        int index2_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_66);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA2_128 = input.LA(1);

                         
                        int index2_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_128);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA2_142 = input.LA(1);

                         
                        int index2_142 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_142);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA2_121 = input.LA(1);

                         
                        int index2_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_121);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA2_13 = input.LA(1);

                         
                        int index2_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_13);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA2_45 = input.LA(1);

                         
                        int index2_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_45);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA2_46 = input.LA(1);

                         
                        int index2_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_46);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA2_11 = input.LA(1);

                         
                        int index2_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_11);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA2_4 = input.LA(1);

                         
                        int index2_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred2_ChemicalChunker())) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_4);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA2_21 = input.LA(1);

                         
                        int index2_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_21);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA2_63 = input.LA(1);

                         
                        int index2_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_63);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA2_134 = input.LA(1);

                         
                        int index2_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_134);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA2_99 = input.LA(1);

                         
                        int index2_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_99);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA2_20 = input.LA(1);

                         
                        int index2_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_20);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA2_112 = input.LA(1);

                         
                        int index2_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_112);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA2_27 = input.LA(1);

                         
                        int index2_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_27);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA2_3 = input.LA(1);

                         
                        int index2_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred2_ChemicalChunker())) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_3);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA2_85 = input.LA(1);

                         
                        int index2_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_85);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA2_60 = input.LA(1);

                         
                        int index2_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_60);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA2_135 = input.LA(1);

                         
                        int index2_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_135);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA2_118 = input.LA(1);

                         
                        int index2_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_118);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA2_41 = input.LA(1);

                         
                        int index2_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_41);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA2_126 = input.LA(1);

                         
                        int index2_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_126);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA2_68 = input.LA(1);

                         
                        int index2_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_68);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA2_93 = input.LA(1);

                         
                        int index2_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_93);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA2_47 = input.LA(1);

                         
                        int index2_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_47);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA2_111 = input.LA(1);

                         
                        int index2_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_111);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA2_131 = input.LA(1);

                         
                        int index2_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_131);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA2_127 = input.LA(1);

                         
                        int index2_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_127);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA2_133 = input.LA(1);

                         
                        int index2_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_133);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA2_110 = input.LA(1);

                         
                        int index2_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_110);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA2_49 = input.LA(1);

                         
                        int index2_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_49);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA2_89 = input.LA(1);

                         
                        int index2_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_89);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA2_6 = input.LA(1);

                         
                        int index2_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred2_ChemicalChunker())) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_6);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA2_87 = input.LA(1);

                         
                        int index2_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_87);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA2_42 = input.LA(1);

                         
                        int index2_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_42);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA2_17 = input.LA(1);

                         
                        int index2_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_17);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA2_2 = input.LA(1);

                         
                        int index2_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_2);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA2_96 = input.LA(1);

                         
                        int index2_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_96);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA2_109 = input.LA(1);

                         
                        int index2_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_109);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA2_69 = input.LA(1);

                         
                        int index2_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_69);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA2_48 = input.LA(1);

                         
                        int index2_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_48);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA2_9 = input.LA(1);

                         
                        int index2_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_9);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA2_15 = input.LA(1);

                         
                        int index2_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_15);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA2_32 = input.LA(1);

                         
                        int index2_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_32);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA2_84 = input.LA(1);

                         
                        int index2_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_84);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA2_64 = input.LA(1);

                         
                        int index2_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_64);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA2_31 = input.LA(1);

                         
                        int index2_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_31);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA2_116 = input.LA(1);

                         
                        int index2_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_116);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA2_30 = input.LA(1);

                         
                        int index2_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_30);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA2_38 = input.LA(1);

                         
                        int index2_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_38);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA2_74 = input.LA(1);

                         
                        int index2_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_74);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA2_44 = input.LA(1);

                         
                        int index2_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_44);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA2_29 = input.LA(1);

                         
                        int index2_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred2_ChemicalChunker())) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_29);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA2_43 = input.LA(1);

                         
                        int index2_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_43);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA2_19 = input.LA(1);

                         
                        int index2_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_19);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA2_55 = input.LA(1);

                         
                        int index2_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_55);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA2_50 = input.LA(1);

                         
                        int index2_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_50);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA2_95 = input.LA(1);

                         
                        int index2_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_95);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA2_59 = input.LA(1);

                         
                        int index2_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_59);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA2_98 = input.LA(1);

                         
                        int index2_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_98);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA2_108 = input.LA(1);

                         
                        int index2_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_108);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA2_86 = input.LA(1);

                         
                        int index2_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_86);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA2_56 = input.LA(1);

                         
                        int index2_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_56);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA2_107 = input.LA(1);

                         
                        int index2_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_107);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA2_137 = input.LA(1);

                         
                        int index2_137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_137);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA2_65 = input.LA(1);

                         
                        int index2_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_65);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA2_71 = input.LA(1);

                         
                        int index2_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_71);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA2_94 = input.LA(1);

                         
                        int index2_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_94);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA2_72 = input.LA(1);

                         
                        int index2_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_72);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA2_125 = input.LA(1);

                         
                        int index2_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_125);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA2_12 = input.LA(1);

                         
                        int index2_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_12);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA2_82 = input.LA(1);

                         
                        int index2_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_82);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA2_35 = input.LA(1);

                         
                        int index2_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_35);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA2_76 = input.LA(1);

                         
                        int index2_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_76);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA2_136 = input.LA(1);

                         
                        int index2_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_136);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA2_132 = input.LA(1);

                         
                        int index2_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_132);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA2_18 = input.LA(1);

                         
                        int index2_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_18);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA2_73 = input.LA(1);

                         
                        int index2_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_73);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA2_23 = input.LA(1);

                         
                        int index2_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_23);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA2_83 = input.LA(1);

                         
                        int index2_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_83);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA2_67 = input.LA(1);

                         
                        int index2_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_67);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA2_124 = input.LA(1);

                         
                        int index2_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_124);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA2_106 = input.LA(1);

                         
                        int index2_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_106);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA2_117 = input.LA(1);

                         
                        int index2_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_117);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA2_14 = input.LA(1);

                         
                        int index2_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_14);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA2_78 = input.LA(1);

                         
                        int index2_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_78);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA2_114 = input.LA(1);

                         
                        int index2_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_114);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA2_40 = input.LA(1);

                         
                        int index2_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_40);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA2_122 = input.LA(1);

                         
                        int index2_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_122);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA2_34 = input.LA(1);

                         
                        int index2_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_34);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA2_104 = input.LA(1);

                         
                        int index2_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_104);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA2_138 = input.LA(1);

                         
                        int index2_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_138);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA2_97 = input.LA(1);

                         
                        int index2_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_97);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA2_75 = input.LA(1);

                         
                        int index2_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_75);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA2_57 = input.LA(1);

                         
                        int index2_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_57);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA2_53 = input.LA(1);

                         
                        int index2_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_53);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA2_102 = input.LA(1);

                         
                        int index2_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_102);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA2_5 = input.LA(1);

                         
                        int index2_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_5);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA2_16 = input.LA(1);

                         
                        int index2_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_16);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA2_10 = input.LA(1);

                         
                        int index2_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_10);
                        if ( s>=0 ) return s;
                        break;

                    case 130 : 
                        int LA2_7 = input.LA(1);

                         
                        int index2_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_7);
                        if ( s>=0 ) return s;
                        break;

                    case 131 : 
                        int LA2_70 = input.LA(1);

                         
                        int index2_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_70);
                        if ( s>=0 ) return s;
                        break;

                    case 132 : 
                        int LA2_123 = input.LA(1);

                         
                        int index2_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_123);
                        if ( s>=0 ) return s;
                        break;

                    case 133 : 
                        int LA2_25 = input.LA(1);

                         
                        int index2_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_25);
                        if ( s>=0 ) return s;
                        break;

                    case 134 : 
                        int LA2_105 = input.LA(1);

                         
                        int index2_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_105);
                        if ( s>=0 ) return s;
                        break;

                    case 135 : 
                        int LA2_140 = input.LA(1);

                         
                        int index2_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_140);
                        if ( s>=0 ) return s;
                        break;

                    case 136 : 
                        int LA2_51 = input.LA(1);

                         
                        int index2_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_51);
                        if ( s>=0 ) return s;
                        break;

                    case 137 : 
                        int LA2_88 = input.LA(1);

                         
                        int index2_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_88);
                        if ( s>=0 ) return s;
                        break;

                    case 138 : 
                        int LA2_54 = input.LA(1);

                         
                        int index2_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_54);
                        if ( s>=0 ) return s;
                        break;

                    case 139 : 
                        int LA2_139 = input.LA(1);

                         
                        int index2_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_139);
                        if ( s>=0 ) return s;
                        break;

                    case 140 : 
                        int LA2_80 = input.LA(1);

                         
                        int index2_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_80);
                        if ( s>=0 ) return s;
                        break;

                    case 141 : 
                        int LA2_115 = input.LA(1);

                         
                        int index2_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_115);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA4_static {
    static final String DFA4_eotS =
        "\u0089\uffff";
    static final String DFA4_eofS =
        "\1\13\u0088\uffff";
    static final String DFA4_minS =
        "\1\46\12\0\1\uffff\171\0\4\uffff";
    static final String DFA4_maxS =
        "\1\u00b4\12\0\1\uffff\171\0\4\uffff";
    static final String DFA4_acceptS =
        "\13\uffff\1\5\171\uffff\1\1\1\2\1\3\1\4";
    static final String DFA4_specialS =
        "\1\uffff\1\77\1\63\1\45\1\144\1\52\1\61\1\24\1\17\1\173\1\66\1"+
        "\uffff\1\123\1\22\1\135\1\u0081\1\6\1\23\1\110\1\140\1\70\1\151"+
        "\1\152\1\46\1\177\1\2\1\35\1\157\1\137\1\72\1\103\1\50\1\127\1\7"+
        "\1\113\1\147\1\164\1\130\1\102\1\143\1\154\1\112\1\122\1\125\1\116"+
        "\1\32\1\172\1\114\1\131\1\33\1\56\1\27\1\107\1\25\1\12\1\57\1\156"+
        "\1\51\1\111\1\165\1\163\1\162\1\0\1\41\1\121\1\176\1\146\1\62\1"+
        "\16\1\u0080\1\1\1\142\1\5\1\11\1\161\1\160\1\167\1\47\1\101\1\26"+
        "\1\120\1\3\1\21\1\150\1\20\1\53\1\166\1\76\1\145\1\67\1\74\1\36"+
        "\1\34\1\u0082\1\60\1\132\1\115\1\64\1\31\1\106\1\65\1\134\1\136"+
        "\1\44\1\175\1\13\1\155\1\141\1\124\1\105\1\55\1\73\1\43\1\10\1\174"+
        "\1\117\1\100\1\4\1\40\1\54\1\75\1\153\1\171\1\15\1\37\1\42\1\71"+
        "\1\126\1\170\1\30\1\14\1\133\1\104\4\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\22\1\10\1\12\1\111\1\47\1\52\1\13\1\11\1\34\1\115\1\116"+
            "\1\114\1\122\1\123\1\132\1\133\1\117\1\131\1\124\1\126\1\120"+
            "\1\121\1\130\1\127\1\125\1\27\1\50\1\13\1\55\1\13\1\51\1\56"+
            "\1\65\1\26\1\53\1\21\1\54\1\42\1\43\1\23\1\57\1\60\1\61\1\62"+
            "\1\63\1\44\1\25\1\143\1\u0083\1\144\1\147\1\24\1\70\1\151\1"+
            "\150\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\31\1\161\1"+
            "\64\1\162\1\146\1\163\1\164\1\71\1\165\1\72\1\166\1\73\1\167"+
            "\1\170\1\145\1\171\1\172\1\74\1\173\1\66\1\174\1\175\1\176\1"+
            "\75\1\177\1\46\1\67\1\u0080\1\u0081\1\u0082\1\41\1\15\1\13\1"+
            "\14\1\13\1\u0084\3\13\1\35\1\13\1\36\1\32\1\17\2\13\1\20\1\16"+
            "\1\103\1\76\1\113\1\5\1\6\1\7\1\106\1\134\1\30\1\45\1\33\1\107"+
            "\1\104\1\110\1\37\1\40\1\1\1\2\1\4\1\3\1\77\1\112\1\13\1\135"+
            "\1\140\1\137\1\142\1\136\1\141\1\100\1\105\1\101\1\102",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_static.DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_static.DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_static.DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_static.DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_static.DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_static.DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_static.DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_static.DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "()+ loopback of 83:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA4_62 = input.LA(1);

                         
                        int index4_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_62);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA4_70 = input.LA(1);

                         
                        int index4_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_70);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA4_25 = input.LA(1);

                         
                        int index4_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_25);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA4_81 = input.LA(1);

                         
                        int index4_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_81);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA4_117 = input.LA(1);

                         
                        int index4_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_117);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA4_72 = input.LA(1);

                         
                        int index4_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_72);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA4_16 = input.LA(1);

                         
                        int index4_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred5_ChemicalChunker())) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_16);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA4_33 = input.LA(1);

                         
                        int index4_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_33);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA4_113 = input.LA(1);

                         
                        int index4_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_113);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA4_73 = input.LA(1);

                         
                        int index4_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_73);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA4_54 = input.LA(1);

                         
                        int index4_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_54);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA4_105 = input.LA(1);

                         
                        int index4_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_105);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA4_130 = input.LA(1);

                         
                        int index4_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_130);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA4_123 = input.LA(1);

                         
                        int index4_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_123);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA4_68 = input.LA(1);

                         
                        int index4_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_68);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA4_8 = input.LA(1);

                         
                        int index4_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_8);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA4_84 = input.LA(1);

                         
                        int index4_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_84);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA4_82 = input.LA(1);

                         
                        int index4_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_82);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA4_13 = input.LA(1);

                         
                        int index4_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_13);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA4_17 = input.LA(1);

                         
                        int index4_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_17);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA4_7 = input.LA(1);

                         
                        int index4_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_7);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA4_53 = input.LA(1);

                         
                        int index4_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_53);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA4_79 = input.LA(1);

                         
                        int index4_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_79);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA4_51 = input.LA(1);

                         
                        int index4_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_51);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA4_129 = input.LA(1);

                         
                        int index4_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_129);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA4_98 = input.LA(1);

                         
                        int index4_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_98);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA4_45 = input.LA(1);

                         
                        int index4_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_45);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA4_49 = input.LA(1);

                         
                        int index4_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_49);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA4_92 = input.LA(1);

                         
                        int index4_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_92);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA4_26 = input.LA(1);

                         
                        int index4_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_26);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA4_91 = input.LA(1);

                         
                        int index4_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_91);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA4_124 = input.LA(1);

                         
                        int index4_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_124);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA4_118 = input.LA(1);

                         
                        int index4_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_118);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA4_63 = input.LA(1);

                         
                        int index4_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_63);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA4_125 = input.LA(1);

                         
                        int index4_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_125);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA4_112 = input.LA(1);

                         
                        int index4_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_112);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA4_103 = input.LA(1);

                         
                        int index4_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_103);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA4_3 = input.LA(1);

                         
                        int index4_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_3);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA4_23 = input.LA(1);

                         
                        int index4_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_23);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA4_77 = input.LA(1);

                         
                        int index4_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_77);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA4_31 = input.LA(1);

                         
                        int index4_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_31);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA4_57 = input.LA(1);

                         
                        int index4_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_57);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA4_5 = input.LA(1);

                         
                        int index4_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_5);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA4_85 = input.LA(1);

                         
                        int index4_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_85);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA4_119 = input.LA(1);

                         
                        int index4_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_119);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA4_110 = input.LA(1);

                         
                        int index4_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_110);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA4_50 = input.LA(1);

                         
                        int index4_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_50);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA4_55 = input.LA(1);

                         
                        int index4_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_55);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA4_94 = input.LA(1);

                         
                        int index4_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_94);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA4_6 = input.LA(1);

                         
                        int index4_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_6);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA4_67 = input.LA(1);

                         
                        int index4_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_67);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA4_2 = input.LA(1);

                         
                        int index4_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_2);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA4_97 = input.LA(1);

                         
                        int index4_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_97);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA4_100 = input.LA(1);

                         
                        int index4_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_100);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA4_10 = input.LA(1);

                         
                        int index4_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_10);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA4_89 = input.LA(1);

                         
                        int index4_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_89);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA4_20 = input.LA(1);

                         
                        int index4_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_20);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA4_126 = input.LA(1);

                         
                        int index4_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_126);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA4_29 = input.LA(1);

                         
                        int index4_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred5_ChemicalChunker())) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_29);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA4_111 = input.LA(1);

                         
                        int index4_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_111);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA4_90 = input.LA(1);

                         
                        int index4_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_90);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA4_120 = input.LA(1);

                         
                        int index4_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_120);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA4_87 = input.LA(1);

                         
                        int index4_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_87);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA4_1 = input.LA(1);

                         
                        int index4_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_1);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA4_116 = input.LA(1);

                         
                        int index4_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_116);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA4_78 = input.LA(1);

                         
                        int index4_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_78);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA4_38 = input.LA(1);

                         
                        int index4_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_38);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA4_30 = input.LA(1);

                         
                        int index4_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred5_ChemicalChunker())) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_30);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA4_132 = input.LA(1);

                         
                        int index4_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_132);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA4_109 = input.LA(1);

                         
                        int index4_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_109);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA4_99 = input.LA(1);

                         
                        int index4_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_99);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA4_52 = input.LA(1);

                         
                        int index4_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_52);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA4_18 = input.LA(1);

                         
                        int index4_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred5_ChemicalChunker())) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_18);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA4_58 = input.LA(1);

                         
                        int index4_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_58);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA4_41 = input.LA(1);

                         
                        int index4_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_41);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA4_34 = input.LA(1);

                         
                        int index4_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_34);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA4_47 = input.LA(1);

                         
                        int index4_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_47);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA4_96 = input.LA(1);

                         
                        int index4_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_96);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA4_44 = input.LA(1);

                         
                        int index4_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_44);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA4_115 = input.LA(1);

                         
                        int index4_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_115);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA4_80 = input.LA(1);

                         
                        int index4_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_80);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA4_64 = input.LA(1);

                         
                        int index4_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_64);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA4_42 = input.LA(1);

                         
                        int index4_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_42);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA4_12 = input.LA(1);

                         
                        int index4_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_12);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA4_108 = input.LA(1);

                         
                        int index4_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_108);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA4_43 = input.LA(1);

                         
                        int index4_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_43);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA4_127 = input.LA(1);

                         
                        int index4_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_127);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA4_32 = input.LA(1);

                         
                        int index4_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_32);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA4_37 = input.LA(1);

                         
                        int index4_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_37);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA4_48 = input.LA(1);

                         
                        int index4_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_48);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA4_95 = input.LA(1);

                         
                        int index4_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_95);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA4_131 = input.LA(1);

                         
                        int index4_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_131);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA4_101 = input.LA(1);

                         
                        int index4_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_101);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA4_14 = input.LA(1);

                         
                        int index4_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_14);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA4_102 = input.LA(1);

                         
                        int index4_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_102);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA4_28 = input.LA(1);

                         
                        int index4_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_28);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA4_19 = input.LA(1);

                         
                        int index4_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_19);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA4_107 = input.LA(1);

                         
                        int index4_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_107);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA4_71 = input.LA(1);

                         
                        int index4_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_71);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA4_39 = input.LA(1);

                         
                        int index4_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_39);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA4_4 = input.LA(1);

                         
                        int index4_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_4);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA4_88 = input.LA(1);

                         
                        int index4_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_88);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA4_66 = input.LA(1);

                         
                        int index4_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_66);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA4_35 = input.LA(1);

                         
                        int index4_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_35);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA4_83 = input.LA(1);

                         
                        int index4_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_83);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA4_21 = input.LA(1);

                         
                        int index4_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_21);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA4_22 = input.LA(1);

                         
                        int index4_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_22);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA4_121 = input.LA(1);

                         
                        int index4_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_121);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA4_40 = input.LA(1);

                         
                        int index4_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_40);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA4_106 = input.LA(1);

                         
                        int index4_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_106);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA4_56 = input.LA(1);

                         
                        int index4_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_56);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA4_27 = input.LA(1);

                         
                        int index4_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_27);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA4_75 = input.LA(1);

                         
                        int index4_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_75);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA4_74 = input.LA(1);

                         
                        int index4_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_74);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA4_61 = input.LA(1);

                         
                        int index4_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_61);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA4_60 = input.LA(1);

                         
                        int index4_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_60);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA4_36 = input.LA(1);

                         
                        int index4_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_36);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA4_59 = input.LA(1);

                         
                        int index4_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_59);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA4_86 = input.LA(1);

                         
                        int index4_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_86);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA4_76 = input.LA(1);

                         
                        int index4_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_76);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA4_128 = input.LA(1);

                         
                        int index4_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_128);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA4_122 = input.LA(1);

                         
                        int index4_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_122);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA4_46 = input.LA(1);

                         
                        int index4_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_46);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA4_9 = input.LA(1);

                         
                        int index4_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_9);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA4_114 = input.LA(1);

                         
                        int index4_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_114);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA4_104 = input.LA(1);

                         
                        int index4_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_104);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA4_65 = input.LA(1);

                         
                        int index4_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_65);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA4_24 = input.LA(1);

                         
                        int index4_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_24);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA4_69 = input.LA(1);

                         
                        int index4_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_69);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA4_15 = input.LA(1);

                         
                        int index4_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred5_ChemicalChunker())) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_15);
                        if ( s>=0 ) return s;
                        break;

                    case 130 : 
                        int LA4_93 = input.LA(1);

                         
                        int index4_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_93);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA5_static {
    static final String DFA5_eotS =
        "\32\uffff";
    static final String DFA5_eofS =
        "\1\1\31\uffff";
    static final String DFA5_minS =
        "\1\46\1\uffff\13\45\13\0\2\uffff";
    static final String DFA5_maxS =
        "\1\u00b4\1\uffff\13\45\13\0\2\uffff";
    static final String DFA5_acceptS =
        "\1\uffff\1\3\26\uffff\1\1\1\2";
    static final String DFA5_specialS =
        "\15\uffff\1\1\1\10\1\12\1\4\1\3\1\6\1\5\1\0\1\11\1\2\1\7\2\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\1\1\5\1\7\4\1\1\6\126\1\1\14\22\1\1\2\1\3\1\4\12\1\1\10"+
            "\1\11\1\13\1\12\15\1",
            "",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_static.DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_static.DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_static.DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_static.DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_static.DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_static.DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_static.DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_static.DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "()* loopback of 83:73: ( advAdj | colon )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA5_20 = input.LA(1);

                         
                        int index5_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_20);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA5_13 = input.LA(1);

                         
                        int index5_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_13);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA5_22 = input.LA(1);

                         
                        int index5_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_22);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA5_17 = input.LA(1);

                         
                        int index5_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_17);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA5_16 = input.LA(1);

                         
                        int index5_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_16);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA5_19 = input.LA(1);

                         
                        int index5_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_19);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA5_18 = input.LA(1);

                         
                        int index5_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_18);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA5_23 = input.LA(1);

                         
                        int index5_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 25;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_23);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA5_14 = input.LA(1);

                         
                        int index5_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_14);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA5_21 = input.LA(1);

                         
                        int index5_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_21);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA5_15 = input.LA(1);

                         
                        int index5_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA6_static {
    static final String DFA6_eotS =
        "\13\uffff";
    static final String DFA6_eofS =
        "\1\1\12\uffff";
    static final String DFA6_minS =
        "\1\46\1\uffff\3\45\3\0\3\uffff";
    static final String DFA6_maxS =
        "\1\u00b4\1\uffff\3\45\3\0\3\uffff";
    static final String DFA6_acceptS =
        "\1\uffff\1\4\6\uffff\1\1\1\3\1\2";
    static final String DFA6_specialS =
        "\5\uffff\1\0\1\2\1\1\3\uffff}>";
    static final String[] DFA6_transitionS = {
            "\135\1\1\3\1\1\1\2\13\1\1\4\43\1",
            "",
            "\1\5",
            "\1\6",
            "\1\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    }

    static final short[] DFA6_eot = DFA.unpackEncodedString(DFA6_static.DFA6_eotS);
    static final short[] DFA6_eof = DFA.unpackEncodedString(DFA6_static.DFA6_eofS);
    static final char[] DFA6_min = DFA.unpackEncodedStringToUnsignedChars(DFA6_static.DFA6_minS);
    static final char[] DFA6_max = DFA.unpackEncodedStringToUnsignedChars(DFA6_static.DFA6_maxS);
    static final short[] DFA6_accept = DFA.unpackEncodedString(DFA6_static.DFA6_acceptS);
    static final short[] DFA6_special = DFA.unpackEncodedString(DFA6_static.DFA6_specialS);
    static final short[][] DFA6_transition;

    static {
        int numStates = DFA6_static.DFA6_transitionS.length;
        DFA6_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA6_transition[i] = DFA.unpackEncodedString(DFA6_static.DFA6_transitionS[i]);
        }
    }

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = DFA6_eot;
            this.eof = DFA6_eof;
            this.min = DFA6_min;
            this.max = DFA6_max;
            this.accept = DFA6_accept;
            this.special = DFA6_special;
            this.transition = DFA6_transition;
        }
        public String getDescription() {
            return "()* loopback of 83:89: ( conjunction | rbconj | comma )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA6_5 = input.LA(1);

                         
                        int index6_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred13_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_5);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA6_7 = input.LA(1);

                         
                        int index6_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_7);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA6_6 = input.LA(1);

                         
                        int index6_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 6, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA8_static {
    static final String DFA8_eotS =
        "\111\uffff";
    static final String DFA8_eofS =
        "\111\uffff";
    static final String DFA8_minS =
        "\1\46\23\0\65\uffff";
    static final String DFA8_maxS =
        "\1\u00b4\23\0\65\uffff";
    static final String DFA8_acceptS =
        "\24\uffff\1\2\63\uffff\1\1";
    static final String DFA8_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\65\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\5\1\11\1\13\3\24\1\uffff\1\12\1\24\20\uffff\1\21\1\24\1"+
            "\uffff\1\24\1\uffff\3\24\1\20\1\24\1\4\3\24\1\14\6\24\1\17\4"+
            "\uffff\1\15\1\24\11\uffff\1\23\1\uffff\1\24\4\uffff\1\24\1\uffff"+
            "\1\24\1\uffff\1\24\5\uffff\1\24\1\uffff\1\24\3\uffff\1\24\1"+
            "\uffff\2\24\3\uffff\1\24\2\uffff\1\16\5\uffff\1\24\1\uffff\2"+
            "\24\1\2\2\uffff\1\3\1\1\2\24\1\uffff\1\6\1\7\1\10\1\24\1\uffff"+
            "\1\22\14\24\10\uffff\4\24",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_static.DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_static.DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_static.DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_static.DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_static.DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_static.DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_static.DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_static.DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "97:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA8_1 = input.LA(1);

                         
                        int index8_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA8_2 = input.LA(1);

                         
                        int index8_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA8_3 = input.LA(1);

                         
                        int index8_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA8_4 = input.LA(1);

                         
                        int index8_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA8_5 = input.LA(1);

                         
                        int index8_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA8_6 = input.LA(1);

                         
                        int index8_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA8_7 = input.LA(1);

                         
                        int index8_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA8_8 = input.LA(1);

                         
                        int index8_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA8_9 = input.LA(1);

                         
                        int index8_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA8_10 = input.LA(1);

                         
                        int index8_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA8_11 = input.LA(1);

                         
                        int index8_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA8_12 = input.LA(1);

                         
                        int index8_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA8_13 = input.LA(1);

                         
                        int index8_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA8_14 = input.LA(1);

                         
                        int index8_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA8_15 = input.LA(1);

                         
                        int index8_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA8_16 = input.LA(1);

                         
                        int index8_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA8_17 = input.LA(1);

                         
                        int index8_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA8_18 = input.LA(1);

                         
                        int index8_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA8_19 = input.LA(1);

                         
                        int index8_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA12_static {
    static final String DFA12_eotS =
        "\112\uffff";
    static final String DFA12_eofS =
        "\1\1\111\uffff";
    static final String DFA12_minS =
        "\1\46\1\uffff\107\0\1\uffff";
    static final String DFA12_maxS =
        "\1\u00b4\1\uffff\107\0\1\uffff";
    static final String DFA12_acceptS =
        "\1\uffff\1\2\107\uffff\1\1";
    static final String DFA12_specialS =
        "\2\uffff\1\73\1\67\1\1\1\54\1\23\1\6\1\53\1\3\1\26\1\57\1\21\1"+
        "\33\1\63\1\24\1\51\1\2\1\66\1\16\1\75\1\31\1\37\1\22\1\100\1\17"+
        "\1\40\1\55\1\60\1\44\1\103\1\46\1\47\1\0\1\4\1\30\1\72\1\41\1\35"+
        "\1\15\1\11\1\77\1\70\1\71\1\56\1\64\1\5\1\106\1\42\1\14\1\25\1\61"+
        "\1\74\1\36\1\104\1\65\1\102\1\43\1\52\1\32\1\10\1\45\1\76\1\101"+
        "\1\50\1\12\1\27\1\62\1\7\1\34\1\13\1\20\1\105\1\uffff}>";
    static final String[] DFA12_transitionS = {
            "\1\22\1\11\1\13\1\110\1\46\1\51\1\1\1\12\1\33\20\1\1\27\1\47"+
            "\1\1\1\54\1\1\1\50\1\55\1\64\1\26\1\52\1\21\1\53\1\41\1\42\1"+
            "\23\1\56\1\57\1\60\1\61\1\62\1\43\1\25\4\1\1\24\1\67\11\1\1"+
            "\31\1\1\1\63\4\1\1\70\1\1\1\71\1\1\1\72\5\1\1\73\1\1\1\65\3"+
            "\1\1\74\1\1\1\45\1\66\3\1\1\40\2\1\1\15\5\1\1\34\1\1\1\35\1"+
            "\1\1\17\1\1\1\14\1\20\1\16\1\102\1\75\1\1\1\6\1\7\1\10\1\105"+
            "\1\1\1\30\1\44\1\32\1\106\1\103\1\107\1\36\1\37\1\2\1\3\1\5"+
            "\1\4\1\76\10\1\1\77\1\104\1\100\1\101",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA12_eot = DFA.unpackEncodedString(DFA12_static.DFA12_eotS);
    static final short[] DFA12_eof = DFA.unpackEncodedString(DFA12_static.DFA12_eofS);
    static final char[] DFA12_min = DFA.unpackEncodedStringToUnsignedChars(DFA12_static.DFA12_minS);
    static final char[] DFA12_max = DFA.unpackEncodedStringToUnsignedChars(DFA12_static.DFA12_maxS);
    static final short[] DFA12_accept = DFA.unpackEncodedString(DFA12_static.DFA12_acceptS);
    static final short[] DFA12_special = DFA.unpackEncodedString(DFA12_static.DFA12_specialS);
    static final short[][] DFA12_transition;

    static {
        int numStates = DFA12_static.DFA12_transitionS.length;
        DFA12_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA12_transition[i] = DFA.unpackEncodedString(DFA12_static.DFA12_transitionS[i]);
        }
    }

    class DFA12 extends DFA {

        public DFA12(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 12;
            this.eot = DFA12_eot;
            this.eof = DFA12_eof;
            this.min = DFA12_min;
            this.max = DFA12_max;
            this.accept = DFA12_accept;
            this.special = DFA12_special;
            this.transition = DFA12_transition;
        }
        public String getDescription() {
            return "()* loopback of 102:34: ( ( conjunction )* nounphraseContent )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA12_33 = input.LA(1);

                         
                        int index12_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_33);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA12_4 = input.LA(1);

                         
                        int index12_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_4);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA12_17 = input.LA(1);

                         
                        int index12_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA12_9 = input.LA(1);

                         
                        int index12_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_9);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA12_34 = input.LA(1);

                         
                        int index12_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_34);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA12_46 = input.LA(1);

                         
                        int index12_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_46);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA12_7 = input.LA(1);

                         
                        int index12_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA12_68 = input.LA(1);

                         
                        int index12_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_68);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA12_60 = input.LA(1);

                         
                        int index12_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_60);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA12_40 = input.LA(1);

                         
                        int index12_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_40);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA12_65 = input.LA(1);

                         
                        int index12_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_65);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA12_70 = input.LA(1);

                         
                        int index12_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_70);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA12_49 = input.LA(1);

                         
                        int index12_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_49);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA12_39 = input.LA(1);

                         
                        int index12_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_39);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA12_19 = input.LA(1);

                         
                        int index12_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_19);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA12_25 = input.LA(1);

                         
                        int index12_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_25);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA12_71 = input.LA(1);

                         
                        int index12_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_71);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA12_12 = input.LA(1);

                         
                        int index12_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_12);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA12_23 = input.LA(1);

                         
                        int index12_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_23);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA12_6 = input.LA(1);

                         
                        int index12_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_6);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA12_15 = input.LA(1);

                         
                        int index12_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred88_ChemicalChunker()||(synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_15);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA12_50 = input.LA(1);

                         
                        int index12_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_50);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA12_10 = input.LA(1);

                         
                        int index12_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_10);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA12_66 = input.LA(1);

                         
                        int index12_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_66);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA12_35 = input.LA(1);

                         
                        int index12_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_35);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA12_21 = input.LA(1);

                         
                        int index12_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_21);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA12_59 = input.LA(1);

                         
                        int index12_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_59);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA12_13 = input.LA(1);

                         
                        int index12_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_13);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA12_69 = input.LA(1);

                         
                        int index12_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_69);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA12_38 = input.LA(1);

                         
                        int index12_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_38);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA12_53 = input.LA(1);

                         
                        int index12_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_53);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA12_22 = input.LA(1);

                         
                        int index12_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_22);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA12_26 = input.LA(1);

                         
                        int index12_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_26);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA12_37 = input.LA(1);

                         
                        int index12_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_37);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA12_48 = input.LA(1);

                         
                        int index12_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_48);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA12_57 = input.LA(1);

                         
                        int index12_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_57);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA12_29 = input.LA(1);

                         
                        int index12_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred88_ChemicalChunker()||(synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_29);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA12_61 = input.LA(1);

                         
                        int index12_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_61);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA12_31 = input.LA(1);

                         
                        int index12_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_31);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA12_32 = input.LA(1);

                         
                        int index12_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_32);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA12_64 = input.LA(1);

                         
                        int index12_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_64);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA12_16 = input.LA(1);

                         
                        int index12_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred88_ChemicalChunker()||(synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_16);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA12_58 = input.LA(1);

                         
                        int index12_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_58);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA12_8 = input.LA(1);

                         
                        int index12_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_8);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA12_5 = input.LA(1);

                         
                        int index12_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_5);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA12_27 = input.LA(1);

                         
                        int index12_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_27);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA12_44 = input.LA(1);

                         
                        int index12_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_44);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA12_11 = input.LA(1);

                         
                        int index12_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_11);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA12_28 = input.LA(1);

                         
                        int index12_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred88_ChemicalChunker()||(synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_28);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA12_51 = input.LA(1);

                         
                        int index12_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_51);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA12_67 = input.LA(1);

                         
                        int index12_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_67);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA12_14 = input.LA(1);

                         
                        int index12_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_14);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA12_45 = input.LA(1);

                         
                        int index12_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_45);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA12_55 = input.LA(1);

                         
                        int index12_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_55);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA12_18 = input.LA(1);

                         
                        int index12_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred88_ChemicalChunker()||(synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_18);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA12_3 = input.LA(1);

                         
                        int index12_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_3);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA12_42 = input.LA(1);

                         
                        int index12_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_42);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA12_43 = input.LA(1);

                         
                        int index12_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_43);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA12_36 = input.LA(1);

                         
                        int index12_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_36);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA12_2 = input.LA(1);

                         
                        int index12_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_2);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA12_52 = input.LA(1);

                         
                        int index12_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_52);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA12_20 = input.LA(1);

                         
                        int index12_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_20);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA12_62 = input.LA(1);

                         
                        int index12_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_62);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA12_41 = input.LA(1);

                         
                        int index12_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_41);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA12_24 = input.LA(1);

                         
                        int index12_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_24);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA12_63 = input.LA(1);

                         
                        int index12_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_63);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA12_56 = input.LA(1);

                         
                        int index12_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_56);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA12_30 = input.LA(1);

                         
                        int index12_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_30);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA12_54 = input.LA(1);

                         
                        int index12_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_54);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA12_72 = input.LA(1);

                         
                        int index12_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_72);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA12_47 = input.LA(1);

                         
                        int index12_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_47);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 12, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA11_static {
    static final String DFA11_eotS =
        "\110\uffff";
    static final String DFA11_eofS =
        "\110\uffff";
    static final String DFA11_minS =
        "\1\46\17\uffff\1\0\67\uffff";
    static final String DFA11_maxS =
        "\1\u00b4\17\uffff\1\0\67\uffff";
    static final String DFA11_acceptS =
        "\1\uffff\1\2\105\uffff\1\1";
    static final String DFA11_specialS =
        "\20\uffff\1\0\67\uffff}>";
    static final String[] DFA11_transitionS = {
            "\6\1\1\uffff\2\1\20\uffff\2\1\1\uffff\1\1\1\uffff\21\1\4\uffff"+
            "\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff"+
            "\1\1\2\uffff\1\20\5\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\107\4\1\1\uffff\4\1\1\uffff\15\1\10\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_static.DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_static.DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_static.DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_static.DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_static.DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_static.DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_static.DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_static.DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "()* loopback of 102:35: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA11_16 = input.LA(1);

                         
                        int index11_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 11, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA14_static {
    static final String DFA14_eotS =
        "\17\uffff";
    static final String DFA14_eofS =
        "\17\uffff";
    static final String DFA14_minS =
        "\1\46\6\45\2\uffff\6\0";
    static final String DFA14_maxS =
        "\1\u00b4\6\45\2\uffff\6\0";
    static final String DFA14_acceptS =
        "\7\uffff\1\2\1\1\6\uffff";
    static final String DFA14_specialS =
        "\11\uffff\1\2\1\0\1\3\1\1\1\5\1\4}>";
    static final String[] DFA14_transitionS = {
            "\1\7\1\4\1\6\3\7\1\uffff\1\5\1\7\20\uffff\2\7\1\uffff\1\7\1"+
            "\uffff\21\7\4\uffff\2\7\11\uffff\1\7\1\uffff\1\7\4\uffff\1\7"+
            "\1\uffff\1\7\1\uffff\1\7\5\uffff\1\7\1\uffff\1\7\3\uffff\1\7"+
            "\1\uffff\2\7\3\uffff\1\7\2\uffff\1\7\5\uffff\1\7\1\uffff\1\7"+
            "\1\uffff\1\7\2\uffff\4\7\1\uffff\1\1\1\2\1\3\1\7\1\uffff\10"+
            "\7\4\10\1\7\10\uffff\4\7",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA14_eot = DFA.unpackEncodedString(DFA14_static.DFA14_eotS);
    static final short[] DFA14_eof = DFA.unpackEncodedString(DFA14_static.DFA14_eofS);
    static final char[] DFA14_min = DFA.unpackEncodedStringToUnsignedChars(DFA14_static.DFA14_minS);
    static final char[] DFA14_max = DFA.unpackEncodedStringToUnsignedChars(DFA14_static.DFA14_maxS);
    static final short[] DFA14_accept = DFA.unpackEncodedString(DFA14_static.DFA14_acceptS);
    static final short[] DFA14_special = DFA.unpackEncodedString(DFA14_static.DFA14_specialS);
    static final short[][] DFA14_transition;

    static {
        int numStates = DFA14_static.DFA14_transitionS.length;
        DFA14_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA14_transition[i] = DFA.unpackEncodedString(DFA14_static.DFA14_transitionS[i]);
        }
    }

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = DFA14_eot;
            this.eof = DFA14_eof;
            this.min = DFA14_min;
            this.max = DFA14_max;
            this.accept = DFA14_accept;
            this.special = DFA14_special;
            this.transition = DFA14_transition;
        }
        public String getDescription() {
            return "()* loopback of 105:4: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA14_10 = input.LA(1);

                         
                        int index14_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA14_12 = input.LA(1);

                         
                        int index14_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_12);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA14_9 = input.LA(1);

                         
                        int index14_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA14_11 = input.LA(1);

                         
                        int index14_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_11);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA14_14 = input.LA(1);

                         
                        int index14_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_14);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA14_13 = input.LA(1);

                         
                        int index14_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 14, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA15_static {
    static final String DFA15_eotS =
        "\110\uffff";
    static final String DFA15_eofS =
        "\1\1\107\uffff";
    static final String DFA15_minS =
        "\1\46\1\uffff\102\0\4\uffff";
    static final String DFA15_maxS =
        "\1\u00b4\1\uffff\102\0\4\uffff";
    static final String DFA15_acceptS =
        "\1\uffff\1\5\102\uffff\1\1\1\2\1\3\1\4";
    static final String DFA15_specialS =
        "\2\uffff\1\65\1\6\1\72\1\76\1\43\1\20\1\15\1\52\1\13\1\21\1\45"+
        "\1\41\1\24\1\71\1\100\1\5\1\31\1\63\1\11\1\46\1\75\1\10\1\74\1\73"+
        "\1\62\1\7\1\44\1\22\1\70\1\37\1\57\1\2\1\56\1\101\1\23\1\35\1\14"+
        "\1\77\1\32\1\60\1\12\1\34\1\47\1\4\1\33\1\53\1\66\1\3\1\17\1\54"+
        "\1\42\1\61\1\16\1\40\1\1\1\27\1\26\1\25\1\51\1\30\1\0\1\64\1\67"+
        "\1\36\1\55\1\50\4\uffff}>";
    static final String[] DFA15_transitionS = {
            "\1\15\1\6\1\10\1\103\1\41\1\44\1\1\1\7\1\17\20\1\1\30\1\42"+
            "\1\1\1\47\1\1\1\43\1\50\1\57\1\22\1\45\1\14\1\46\1\34\1\35\1"+
            "\26\1\51\1\52\1\53\1\54\1\55\1\36\1\16\4\1\1\27\1\62\11\1\1"+
            "\32\1\1\1\56\4\1\1\63\1\1\1\64\1\1\1\65\5\1\1\66\1\1\1\60\3"+
            "\1\1\67\1\1\1\40\1\61\3\1\1\33\2\1\1\2\5\1\1\20\1\1\1\21\1\1"+
            "\1\12\2\1\1\13\1\25\1\75\1\70\1\1\1\3\1\4\1\5\1\100\1\1\1\31"+
            "\1\37\1\11\1\101\1\76\1\102\1\23\1\24\4\1\1\71\10\1\1\72\1\77"+
            "\1\73\1\74",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA15_eot = DFA.unpackEncodedString(DFA15_static.DFA15_eotS);
    static final short[] DFA15_eof = DFA.unpackEncodedString(DFA15_static.DFA15_eofS);
    static final char[] DFA15_min = DFA.unpackEncodedStringToUnsignedChars(DFA15_static.DFA15_minS);
    static final char[] DFA15_max = DFA.unpackEncodedStringToUnsignedChars(DFA15_static.DFA15_maxS);
    static final short[] DFA15_accept = DFA.unpackEncodedString(DFA15_static.DFA15_acceptS);
    static final short[] DFA15_special = DFA.unpackEncodedString(DFA15_static.DFA15_specialS);
    static final short[][] DFA15_transition;

    static {
        int numStates = DFA15_static.DFA15_transitionS.length;
        DFA15_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA15_transition[i] = DFA.unpackEncodedString(DFA15_static.DFA15_transitionS[i]);
        }
    }

    class DFA15 extends DFA {

        public DFA15(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 15;
            this.eot = DFA15_eot;
            this.eof = DFA15_eof;
            this.min = DFA15_min;
            this.max = DFA15_max;
            this.accept = DFA15_accept;
            this.special = DFA15_special;
            this.transition = DFA15_transition;
        }
        public String getDescription() {
            return "()+ loopback of 105:13: ( dissolvePhrase | ratio | noun | numeric )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA15_62 = input.LA(1);

                         
                        int index15_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_62);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA15_56 = input.LA(1);

                         
                        int index15_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_56);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA15_33 = input.LA(1);

                         
                        int index15_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_33);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA15_49 = input.LA(1);

                         
                        int index15_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_49);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA15_45 = input.LA(1);

                         
                        int index15_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_45);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA15_17 = input.LA(1);

                         
                        int index15_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred92_ChemicalChunker()||(synpred92_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 68;}

                        else if ( ((synpred93_ChemicalChunker()||(synpred93_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 69;}

                        else if ( (((synpred94_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred94_ChemicalChunker())) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_17);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA15_3 = input.LA(1);

                         
                        int index15_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_3);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA15_27 = input.LA(1);

                         
                        int index15_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_27);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA15_23 = input.LA(1);

                         
                        int index15_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_23);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA15_20 = input.LA(1);

                         
                        int index15_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_20);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA15_42 = input.LA(1);

                         
                        int index15_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_42);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA15_10 = input.LA(1);

                         
                        int index15_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred92_ChemicalChunker()||(synpred92_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 68;}

                        else if ( ((synpred93_ChemicalChunker()||(synpred93_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 69;}

                        else if ( (((synpred94_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred94_ChemicalChunker())) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_10);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA15_38 = input.LA(1);

                         
                        int index15_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_38);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA15_8 = input.LA(1);

                         
                        int index15_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_8);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA15_54 = input.LA(1);

                         
                        int index15_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_54);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA15_50 = input.LA(1);

                         
                        int index15_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_50);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA15_7 = input.LA(1);

                         
                        int index15_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_7);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA15_11 = input.LA(1);

                         
                        int index15_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred92_ChemicalChunker()||(synpred92_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 68;}

                        else if ( ((synpred93_ChemicalChunker()||(synpred93_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 69;}

                        else if ( (((synpred94_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred94_ChemicalChunker())) ) {s = 70;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_11);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA15_29 = input.LA(1);

                         
                        int index15_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_29);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA15_36 = input.LA(1);

                         
                        int index15_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_36);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA15_14 = input.LA(1);

                         
                        int index15_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_14);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA15_59 = input.LA(1);

                         
                        int index15_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_59);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA15_58 = input.LA(1);

                         
                        int index15_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_58);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA15_57 = input.LA(1);

                         
                        int index15_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_57);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA15_61 = input.LA(1);

                         
                        int index15_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_61);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA15_18 = input.LA(1);

                         
                        int index15_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_18);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA15_40 = input.LA(1);

                         
                        int index15_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_40);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA15_46 = input.LA(1);

                         
                        int index15_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_46);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA15_43 = input.LA(1);

                         
                        int index15_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_43);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA15_37 = input.LA(1);

                         
                        int index15_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_37);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA15_65 = input.LA(1);

                         
                        int index15_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_65);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA15_31 = input.LA(1);

                         
                        int index15_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_31);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA15_55 = input.LA(1);

                         
                        int index15_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_55);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA15_13 = input.LA(1);

                         
                        int index15_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred92_ChemicalChunker()||(synpred92_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 68;}

                        else if ( ((synpred93_ChemicalChunker()||(synpred93_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 69;}

                        else if ( (((synpred94_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred94_ChemicalChunker())) ) {s = 70;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_13);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA15_52 = input.LA(1);

                         
                        int index15_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_52);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA15_6 = input.LA(1);

                         
                        int index15_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_6);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA15_28 = input.LA(1);

                         
                        int index15_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_28);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA15_12 = input.LA(1);

                         
                        int index15_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_12);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA15_21 = input.LA(1);

                         
                        int index15_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_21);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA15_44 = input.LA(1);

                         
                        int index15_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_44);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA15_67 = input.LA(1);

                         
                        int index15_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_67);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA15_60 = input.LA(1);

                         
                        int index15_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_60);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA15_9 = input.LA(1);

                         
                        int index15_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_9);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA15_47 = input.LA(1);

                         
                        int index15_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_47);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA15_51 = input.LA(1);

                         
                        int index15_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_51);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA15_66 = input.LA(1);

                         
                        int index15_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_66);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA15_34 = input.LA(1);

                         
                        int index15_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_34);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA15_32 = input.LA(1);

                         
                        int index15_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_32);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA15_41 = input.LA(1);

                         
                        int index15_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_41);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA15_53 = input.LA(1);

                         
                        int index15_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_53);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA15_26 = input.LA(1);

                         
                        int index15_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_26);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA15_19 = input.LA(1);

                         
                        int index15_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_19);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA15_63 = input.LA(1);

                         
                        int index15_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_63);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA15_2 = input.LA(1);

                         
                        int index15_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_2);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA15_48 = input.LA(1);

                         
                        int index15_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_48);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA15_64 = input.LA(1);

                         
                        int index15_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_64);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA15_30 = input.LA(1);

                         
                        int index15_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_30);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA15_15 = input.LA(1);

                         
                        int index15_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_15);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA15_4 = input.LA(1);

                         
                        int index15_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_4);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA15_25 = input.LA(1);

                         
                        int index15_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_25);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA15_24 = input.LA(1);

                         
                        int index15_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_24);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA15_22 = input.LA(1);

                         
                        int index15_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_22);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA15_5 = input.LA(1);

                         
                        int index15_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_5);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA15_39 = input.LA(1);

                         
                        int index15_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_39);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA15_16 = input.LA(1);

                         
                        int index15_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred92_ChemicalChunker()||(synpred92_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 68;}

                        else if ( ((synpred93_ChemicalChunker()||(synpred93_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 69;}

                        else if ( (((synpred94_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred94_ChemicalChunker())) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_16);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA15_35 = input.LA(1);

                         
                        int index15_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_35);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 15, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA16_static {
    static final String DFA16_eotS =
        "\23\uffff";
    static final String DFA16_eofS =
        "\23\uffff";
    static final String DFA16_minS =
        "\1\46\7\uffff\1\0\12\uffff";
    static final String DFA16_maxS =
        "\1\u009e\7\uffff\1\0\12\uffff";
    static final String DFA16_acceptS =
        "\1\uffff\1\1\20\uffff\1\2";
    static final String DFA16_specialS =
        "\10\uffff\1\0\12\uffff}>";
    static final String[] DFA16_transitionS = {
            "\3\1\4\uffff\2\1\30\uffff\1\1\1\uffff\1\1\12\uffff\1\1\60\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\1\uffff\1\10\2\uffff\1\1\4\uffff"+
            "\3\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA16_eot = DFA.unpackEncodedString(DFA16_static.DFA16_eotS);
    static final short[] DFA16_eof = DFA.unpackEncodedString(DFA16_static.DFA16_eofS);
    static final char[] DFA16_min = DFA.unpackEncodedStringToUnsignedChars(DFA16_static.DFA16_minS);
    static final char[] DFA16_max = DFA.unpackEncodedStringToUnsignedChars(DFA16_static.DFA16_maxS);
    static final short[] DFA16_accept = DFA.unpackEncodedString(DFA16_static.DFA16_acceptS);
    static final short[] DFA16_special = DFA.unpackEncodedString(DFA16_static.DFA16_specialS);
    static final short[][] DFA16_transition;

    static {
        int numStates = DFA16_static.DFA16_transitionS.length;
        DFA16_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA16_transition[i] = DFA.unpackEncodedString(DFA16_static.DFA16_transitionS[i]);
        }
    }

    class DFA16 extends DFA {

        public DFA16(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 16;
            this.eot = DFA16_eot;
            this.eof = DFA16_eof;
            this.min = DFA16_min;
            this.max = DFA16_max;
            this.accept = DFA16_accept;
            this.special = DFA16_special;
            this.transition = DFA16_transition;
        }
        public String getDescription() {
            return "108:4: ( dissolveStructure | lrb dissolveStructure rrb )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA16_8 = input.LA(1);

                         
                        int index16_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred96_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred96_ChemicalChunker())) ) {s = 1;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index16_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 16, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA17_static {
    static final String DFA17_eotS =
        "\17\uffff";
    static final String DFA17_eofS =
        "\17\uffff";
    static final String DFA17_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA17_maxS =
        "\1\u009e\6\45\1\uffff\6\0\1\uffff";
    static final String DFA17_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA17_specialS =
        "\10\uffff\1\3\1\1\1\5\1\2\1\0\1\4\1\uffff}>";
    static final String[] DFA17_transitionS = {
            "\1\7\1\4\1\6\4\uffff\1\5\1\7\30\uffff\1\7\1\uffff\1\7\12\uffff"+
            "\1\7\60\uffff\1\7\5\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff"+
            "\1\7\4\uffff\1\1\1\2\1\3\4\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA17_eot = DFA.unpackEncodedString(DFA17_static.DFA17_eotS);
    static final short[] DFA17_eof = DFA.unpackEncodedString(DFA17_static.DFA17_eofS);
    static final char[] DFA17_min = DFA.unpackEncodedStringToUnsignedChars(DFA17_static.DFA17_minS);
    static final char[] DFA17_max = DFA.unpackEncodedStringToUnsignedChars(DFA17_static.DFA17_maxS);
    static final short[] DFA17_accept = DFA.unpackEncodedString(DFA17_static.DFA17_acceptS);
    static final short[] DFA17_special = DFA.unpackEncodedString(DFA17_static.DFA17_specialS);
    static final short[][] DFA17_transition;

    static {
        int numStates = DFA17_static.DFA17_transitionS.length;
        DFA17_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA17_transition[i] = DFA.unpackEncodedString(DFA17_static.DFA17_transitionS[i]);
        }
    }

    class DFA17 extends DFA {

        public DFA17(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 17;
            this.eot = DFA17_eot;
            this.eof = DFA17_eof;
            this.min = DFA17_min;
            this.max = DFA17_max;
            this.accept = DFA17_accept;
            this.special = DFA17_special;
            this.transition = DFA17_transition;
        }
        public String getDescription() {
            return "111:4: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA17_12 = input.LA(1);

                         
                        int index17_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index17_12);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA17_9 = input.LA(1);

                         
                        int index17_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index17_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA17_11 = input.LA(1);

                         
                        int index17_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index17_11);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA17_8 = input.LA(1);

                         
                        int index17_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index17_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA17_13 = input.LA(1);

                         
                        int index17_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index17_13);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA17_10 = input.LA(1);

                         
                        int index17_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index17_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 17, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA19_static {
    static final String DFA19_eotS =
        "\21\uffff";
    static final String DFA19_eofS =
        "\21\uffff";
    static final String DFA19_minS =
        "\1\46\5\0\13\uffff";
    static final String DFA19_maxS =
        "\1\u0099\5\0\13\uffff";
    static final String DFA19_acceptS =
        "\6\uffff\1\1\6\uffff\1\2\3\uffff";
    static final String DFA19_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\13\uffff}>";
    static final String[] DFA19_transitionS = {
            "\1\4\2\6\4\uffff\1\6\1\15\30\uffff\1\15\1\uffff\1\3\12\uffff"+
            "\1\6\60\uffff\1\5\5\uffff\1\15\1\uffff\1\15\1\uffff\1\1\2\uffff"+
            "\1\2\4\uffff\3\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA19_eot = DFA.unpackEncodedString(DFA19_static.DFA19_eotS);
    static final short[] DFA19_eof = DFA.unpackEncodedString(DFA19_static.DFA19_eofS);
    static final char[] DFA19_min = DFA.unpackEncodedStringToUnsignedChars(DFA19_static.DFA19_minS);
    static final char[] DFA19_max = DFA.unpackEncodedStringToUnsignedChars(DFA19_static.DFA19_maxS);
    static final short[] DFA19_accept = DFA.unpackEncodedString(DFA19_static.DFA19_acceptS);
    static final short[] DFA19_special = DFA.unpackEncodedString(DFA19_static.DFA19_specialS);
    static final short[][] DFA19_transition;

    static {
        int numStates = DFA19_static.DFA19_transitionS.length;
        DFA19_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA19_transition[i] = DFA.unpackEncodedString(DFA19_static.DFA19_transitionS[i]);
        }
    }

    class DFA19 extends DFA {

        public DFA19(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 19;
            this.eot = DFA19_eot;
            this.eof = DFA19_eof;
            this.min = DFA19_min;
            this.max = DFA19_max;
            this.accept = DFA19_accept;
            this.special = DFA19_special;
            this.transition = DFA19_transition;
        }
        public String getDescription() {
            return "111:32: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA19_1 = input.LA(1);

                         
                        int index19_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index19_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA19_2 = input.LA(1);

                         
                        int index19_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index19_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA19_3 = input.LA(1);

                         
                        int index19_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index19_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA19_4 = input.LA(1);

                         
                        int index19_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index19_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA19_5 = input.LA(1);

                         
                        int index19_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index19_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 19, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA26_static {
    static final String DFA26_eotS =
        "\u0092\uffff";
    static final String DFA26_eofS =
        "\1\1\u0091\uffff";
    static final String DFA26_minS =
        "\1\46\110\uffff\1\0\110\uffff";
    static final String DFA26_maxS =
        "\1\u00b4\110\uffff\1\0\110\uffff";
    static final String DFA26_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA26_specialS =
        "\111\uffff\1\0\110\uffff}>";
    static final String[] DFA26_transitionS = {
            "\14\1\1\111\u0082\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_static.DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_static.DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_static.DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_static.DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_static.DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_static.DFA26_specialS);
    static final short[][] DFA26_transition;

    static {
        int numStates = DFA26_static.DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_static.DFA26_transitionS[i]);
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }
        public String getDescription() {
            return "()+ loopback of 111:60: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA26_73 = input.LA(1);

                         
                        int index26_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_73);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA22_static {
    static final String DFA22_eotS =
        "\17\uffff";
    static final String DFA22_eofS =
        "\17\uffff";
    static final String DFA22_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA22_maxS =
        "\1\u009e\6\45\1\uffff\6\0\1\uffff";
    static final String DFA22_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA22_specialS =
        "\10\uffff\1\1\1\2\1\4\1\0\1\3\1\5\1\uffff}>";
    static final String[] DFA22_transitionS = {
            "\1\7\1\4\1\6\4\uffff\1\5\1\7\30\uffff\1\7\1\uffff\1\7\12\uffff"+
            "\1\7\60\uffff\1\7\5\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff"+
            "\1\7\4\uffff\1\1\1\2\1\3\4\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA22_eot = DFA.unpackEncodedString(DFA22_static.DFA22_eotS);
    static final short[] DFA22_eof = DFA.unpackEncodedString(DFA22_static.DFA22_eofS);
    static final char[] DFA22_min = DFA.unpackEncodedStringToUnsignedChars(DFA22_static.DFA22_minS);
    static final char[] DFA22_max = DFA.unpackEncodedStringToUnsignedChars(DFA22_static.DFA22_maxS);
    static final short[] DFA22_accept = DFA.unpackEncodedString(DFA22_static.DFA22_acceptS);
    static final short[] DFA22_special = DFA.unpackEncodedString(DFA22_static.DFA22_specialS);
    static final short[][] DFA22_transition;

    static {
        int numStates = DFA22_static.DFA22_transitionS.length;
        DFA22_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA22_transition[i] = DFA.unpackEncodedString(DFA22_static.DFA22_transitionS[i]);
        }
    }

    class DFA22 extends DFA {

        public DFA22(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 22;
            this.eot = DFA22_eot;
            this.eof = DFA22_eof;
            this.min = DFA22_min;
            this.max = DFA22_max;
            this.accept = DFA22_accept;
            this.special = DFA22_special;
            this.transition = DFA22_transition;
        }
        public String getDescription() {
            return "111:73: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA22_11 = input.LA(1);

                         
                        int index22_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index22_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA22_8 = input.LA(1);

                         
                        int index22_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index22_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA22_9 = input.LA(1);

                         
                        int index22_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index22_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA22_12 = input.LA(1);

                         
                        int index22_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index22_12);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA22_10 = input.LA(1);

                         
                        int index22_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index22_10);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA22_13 = input.LA(1);

                         
                        int index22_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index22_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 22, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA24_static {
    static final String DFA24_eotS =
        "\21\uffff";
    static final String DFA24_eofS =
        "\21\uffff";
    static final String DFA24_minS =
        "\1\46\5\0\13\uffff";
    static final String DFA24_maxS =
        "\1\u0099\5\0\13\uffff";
    static final String DFA24_acceptS =
        "\6\uffff\1\1\6\uffff\1\2\3\uffff";
    static final String DFA24_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\13\uffff}>";
    static final String[] DFA24_transitionS = {
            "\1\4\2\6\4\uffff\1\6\1\15\30\uffff\1\15\1\uffff\1\3\12\uffff"+
            "\1\6\60\uffff\1\5\5\uffff\1\15\1\uffff\1\15\1\uffff\1\1\2\uffff"+
            "\1\2\4\uffff\3\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA24_eot = DFA.unpackEncodedString(DFA24_static.DFA24_eotS);
    static final short[] DFA24_eof = DFA.unpackEncodedString(DFA24_static.DFA24_eofS);
    static final char[] DFA24_min = DFA.unpackEncodedStringToUnsignedChars(DFA24_static.DFA24_minS);
    static final char[] DFA24_max = DFA.unpackEncodedStringToUnsignedChars(DFA24_static.DFA24_maxS);
    static final short[] DFA24_accept = DFA.unpackEncodedString(DFA24_static.DFA24_acceptS);
    static final short[] DFA24_special = DFA.unpackEncodedString(DFA24_static.DFA24_specialS);
    static final short[][] DFA24_transition;

    static {
        int numStates = DFA24_static.DFA24_transitionS.length;
        DFA24_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA24_transition[i] = DFA.unpackEncodedString(DFA24_static.DFA24_transitionS[i]);
        }
    }

    class DFA24 extends DFA {

        public DFA24(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 24;
            this.eot = DFA24_eot;
            this.eof = DFA24_eof;
            this.min = DFA24_min;
            this.max = DFA24_max;
            this.accept = DFA24_accept;
            this.special = DFA24_special;
            this.transition = DFA24_transition;
        }
        public String getDescription() {
            return "111:83: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA24_1 = input.LA(1);

                         
                        int index24_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index24_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA24_2 = input.LA(1);

                         
                        int index24_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index24_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA24_3 = input.LA(1);

                         
                        int index24_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index24_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA24_4 = input.LA(1);

                         
                        int index24_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index24_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA24_5 = input.LA(1);

                         
                        int index24_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index24_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 24, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA25_static {
    static final String DFA25_eotS =
        "\u0092\uffff";
    static final String DFA25_eofS =
        "\1\3\u0091\uffff";
    static final String DFA25_minS =
        "\1\46\2\0\u008f\uffff";
    static final String DFA25_maxS =
        "\1\u00b4\2\0\u008f\uffff";
    static final String DFA25_acceptS =
        "\3\uffff\1\2\u008d\uffff\1\1";
    static final String DFA25_specialS =
        "\1\uffff\1\0\1\1\u008f\uffff}>";
    static final String[] DFA25_transitionS = {
            "\137\3\1\2\13\3\1\1\43\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA25_eot = DFA.unpackEncodedString(DFA25_static.DFA25_eotS);
    static final short[] DFA25_eof = DFA.unpackEncodedString(DFA25_static.DFA25_eofS);
    static final char[] DFA25_min = DFA.unpackEncodedStringToUnsignedChars(DFA25_static.DFA25_minS);
    static final char[] DFA25_max = DFA.unpackEncodedStringToUnsignedChars(DFA25_static.DFA25_maxS);
    static final short[] DFA25_accept = DFA.unpackEncodedString(DFA25_static.DFA25_acceptS);
    static final short[] DFA25_special = DFA.unpackEncodedString(DFA25_static.DFA25_specialS);
    static final short[][] DFA25_transition;

    static {
        int numStates = DFA25_static.DFA25_transitionS.length;
        DFA25_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA25_transition[i] = DFA.unpackEncodedString(DFA25_static.DFA25_transitionS[i]);
        }
    }

    class DFA25 extends DFA {

        public DFA25(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 25;
            this.eot = DFA25_eot;
            this.eof = DFA25_eof;
            this.min = DFA25_min;
            this.max = DFA25_max;
            this.accept = DFA25_accept;
            this.special = DFA25_special;
            this.transition = DFA25_transition;
        }
        public String getDescription() {
            return "()* loopback of 111:110: ( conjunction molecule )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA25_1 = input.LA(1);

                         
                        int index25_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index25_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA25_2 = input.LA(1);

                         
                        int index25_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index25_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 25, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA40_static {
    static final String DFA40_eotS =
        "\67\uffff";
    static final String DFA40_eofS =
        "\1\1\66\uffff";
    static final String DFA40_minS =
        "\1\46\1\uffff\64\0\1\uffff";
    static final String DFA40_maxS =
        "\1\u00b4\1\uffff\64\0\1\uffff";
    static final String DFA40_acceptS =
        "\1\uffff\1\2\64\uffff\1\1";
    static final String DFA40_specialS =
        "\2\uffff\1\10\1\55\1\15\1\50\1\63\1\20\1\1\1\3\1\23\1\44\1\56\1"+
        "\14\1\45\1\2\1\0\1\34\1\21\1\13\1\52\1\46\1\31\1\54\1\51\1\32\1"+
        "\33\1\16\1\47\1\5\1\17\1\27\1\37\1\60\1\11\1\40\1\4\1\42\1\62\1"+
        "\30\1\61\1\25\1\7\1\41\1\26\1\57\1\24\1\6\1\53\1\22\1\36\1\35\1"+
        "\43\1\12\1\uffff}>";
    static final String[] DFA40_transitionS = {
            "\1\1\1\11\1\13\4\1\1\12\47\1\1\25\1\65\1\26\1\31\2\1\1\33\1"+
            "\32\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\1\1\43\1\1\1\44\1\30"+
            "\1\45\1\46\1\1\1\47\1\1\1\50\1\1\1\51\1\52\1\27\1\53\1\54\1"+
            "\1\1\55\1\1\1\56\1\57\1\60\1\1\1\61\1\15\1\1\1\62\1\63\1\64"+
            "\1\1\1\14\23\1\1\6\1\7\1\10\1\1\1\16\10\1\1\2\1\3\1\5\1\4\3"+
            "\1\1\17\1\22\1\21\1\24\1\20\1\23\4\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA40_eot = DFA.unpackEncodedString(DFA40_static.DFA40_eotS);
    static final short[] DFA40_eof = DFA.unpackEncodedString(DFA40_static.DFA40_eofS);
    static final char[] DFA40_min = DFA.unpackEncodedStringToUnsignedChars(DFA40_static.DFA40_minS);
    static final char[] DFA40_max = DFA.unpackEncodedStringToUnsignedChars(DFA40_static.DFA40_maxS);
    static final short[] DFA40_accept = DFA.unpackEncodedString(DFA40_static.DFA40_acceptS);
    static final short[] DFA40_special = DFA.unpackEncodedString(DFA40_static.DFA40_specialS);
    static final short[][] DFA40_transition;

    static {
        int numStates = DFA40_static.DFA40_transitionS.length;
        DFA40_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA40_transition[i] = DFA.unpackEncodedString(DFA40_static.DFA40_transitionS[i]);
        }
    }

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = DFA40_eot;
            this.eof = DFA40_eof;
            this.min = DFA40_min;
            this.max = DFA40_max;
            this.accept = DFA40_accept;
            this.special = DFA40_special;
            this.transition = DFA40_transition;
        }
        public String getDescription() {
            return "()+ loopback of 116:48: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA40_16 = input.LA(1);

                         
                        int index40_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_16);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA40_8 = input.LA(1);

                         
                        int index40_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA40_15 = input.LA(1);

                         
                        int index40_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_15);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA40_9 = input.LA(1);

                         
                        int index40_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_9);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA40_36 = input.LA(1);

                         
                        int index40_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_36);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA40_29 = input.LA(1);

                         
                        int index40_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_29);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA40_47 = input.LA(1);

                         
                        int index40_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_47);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA40_42 = input.LA(1);

                         
                        int index40_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_42);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA40_2 = input.LA(1);

                         
                        int index40_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_2);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA40_34 = input.LA(1);

                         
                        int index40_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_34);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA40_53 = input.LA(1);

                         
                        int index40_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_53);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA40_19 = input.LA(1);

                         
                        int index40_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_19);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA40_13 = input.LA(1);

                         
                        int index40_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA40_4 = input.LA(1);

                         
                        int index40_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_4);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA40_27 = input.LA(1);

                         
                        int index40_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_27);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA40_30 = input.LA(1);

                         
                        int index40_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_30);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA40_7 = input.LA(1);

                         
                        int index40_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_7);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA40_18 = input.LA(1);

                         
                        int index40_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA40_49 = input.LA(1);

                         
                        int index40_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_49);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA40_10 = input.LA(1);

                         
                        int index40_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_10);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA40_46 = input.LA(1);

                         
                        int index40_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_46);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA40_41 = input.LA(1);

                         
                        int index40_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_41);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA40_44 = input.LA(1);

                         
                        int index40_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_44);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA40_31 = input.LA(1);

                         
                        int index40_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_31);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA40_39 = input.LA(1);

                         
                        int index40_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_39);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA40_22 = input.LA(1);

                         
                        int index40_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_22);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA40_25 = input.LA(1);

                         
                        int index40_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_25);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA40_26 = input.LA(1);

                         
                        int index40_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_26);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA40_17 = input.LA(1);

                         
                        int index40_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_17);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA40_51 = input.LA(1);

                         
                        int index40_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_51);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA40_50 = input.LA(1);

                         
                        int index40_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_50);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA40_32 = input.LA(1);

                         
                        int index40_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_32);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA40_35 = input.LA(1);

                         
                        int index40_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_35);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA40_43 = input.LA(1);

                         
                        int index40_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_43);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA40_37 = input.LA(1);

                         
                        int index40_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_37);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA40_52 = input.LA(1);

                         
                        int index40_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_52);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA40_11 = input.LA(1);

                         
                        int index40_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_11);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA40_14 = input.LA(1);

                         
                        int index40_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_14);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA40_21 = input.LA(1);

                         
                        int index40_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_21);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA40_28 = input.LA(1);

                         
                        int index40_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_28);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA40_5 = input.LA(1);

                         
                        int index40_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_5);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA40_24 = input.LA(1);

                         
                        int index40_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_24);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA40_20 = input.LA(1);

                         
                        int index40_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_20);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA40_48 = input.LA(1);

                         
                        int index40_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_48);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA40_23 = input.LA(1);

                         
                        int index40_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_23);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA40_3 = input.LA(1);

                         
                        int index40_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_3);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA40_12 = input.LA(1);

                         
                        int index40_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_12);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA40_45 = input.LA(1);

                         
                        int index40_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_45);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA40_33 = input.LA(1);

                         
                        int index40_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_33);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA40_40 = input.LA(1);

                         
                        int index40_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_40);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA40_38 = input.LA(1);

                         
                        int index40_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_38);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA40_6 = input.LA(1);

                         
                        int index40_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 40, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA35_static {
    static final String DFA35_eotS =
        "\53\uffff";
    static final String DFA35_eofS =
        "\1\1\52\uffff";
    static final String DFA35_minS =
        "\1\46\1\uffff\50\0\1\uffff";
    static final String DFA35_maxS =
        "\1\u00b4\1\uffff\50\0\1\uffff";
    static final String DFA35_acceptS =
        "\1\uffff\1\2\50\uffff\1\1";
    static final String DFA35_specialS =
        "\2\uffff\1\3\1\34\1\26\1\37\1\7\1\10\1\5\1\47\1\1\1\36\1\42\1\40"+
        "\1\30\1\25\1\4\1\41\1\6\1\32\1\45\1\21\1\11\1\12\1\22\1\16\1\43"+
        "\1\13\1\20\1\17\1\35\1\0\1\33\1\15\1\14\1\27\1\2\1\24\1\44\1\23"+
        "\1\46\1\31\1\uffff}>";
    static final String[] DFA35_transitionS = {
            "\57\1\1\11\1\51\1\12\1\15\2\1\1\17\1\16\1\20\1\21\1\22\1\23"+
            "\1\24\1\25\1\26\1\1\1\27\1\1\1\30\1\14\1\31\1\32\1\1\1\33\1"+
            "\1\1\34\1\1\1\35\1\36\1\13\1\37\1\40\1\1\1\41\1\1\1\42\1\43"+
            "\1\44\1\1\1\45\1\2\1\1\1\46\1\47\1\50\51\1\1\3\1\6\1\5\1\10"+
            "\1\4\1\7\4\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA35_eot = DFA.unpackEncodedString(DFA35_static.DFA35_eotS);
    static final short[] DFA35_eof = DFA.unpackEncodedString(DFA35_static.DFA35_eofS);
    static final char[] DFA35_min = DFA.unpackEncodedStringToUnsignedChars(DFA35_static.DFA35_minS);
    static final char[] DFA35_max = DFA.unpackEncodedStringToUnsignedChars(DFA35_static.DFA35_maxS);
    static final short[] DFA35_accept = DFA.unpackEncodedString(DFA35_static.DFA35_acceptS);
    static final short[] DFA35_special = DFA.unpackEncodedString(DFA35_static.DFA35_specialS);
    static final short[][] DFA35_transition;

    static {
        int numStates = DFA35_static.DFA35_transitionS.length;
        DFA35_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA35_transition[i] = DFA.unpackEncodedString(DFA35_static.DFA35_transitionS[i]);
        }
    }

    class DFA35 extends DFA {

        public DFA35(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 35;
            this.eot = DFA35_eot;
            this.eof = DFA35_eof;
            this.min = DFA35_min;
            this.max = DFA35_max;
            this.accept = DFA35_accept;
            this.special = DFA35_special;
            this.transition = DFA35_transition;
        }
        public String getDescription() {
            return "()+ loopback of 116:71: ( verb )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA35_31 = input.LA(1);

                         
                        int index35_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_31);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA35_10 = input.LA(1);

                         
                        int index35_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_10);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA35_36 = input.LA(1);

                         
                        int index35_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_36);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA35_2 = input.LA(1);

                         
                        int index35_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_2);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA35_16 = input.LA(1);

                         
                        int index35_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_16);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA35_8 = input.LA(1);

                         
                        int index35_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_8);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA35_18 = input.LA(1);

                         
                        int index35_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_18);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA35_6 = input.LA(1);

                         
                        int index35_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_6);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA35_7 = input.LA(1);

                         
                        int index35_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_7);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA35_22 = input.LA(1);

                         
                        int index35_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_22);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA35_23 = input.LA(1);

                         
                        int index35_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_23);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA35_27 = input.LA(1);

                         
                        int index35_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_27);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA35_34 = input.LA(1);

                         
                        int index35_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_34);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA35_33 = input.LA(1);

                         
                        int index35_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_33);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA35_25 = input.LA(1);

                         
                        int index35_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_25);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA35_29 = input.LA(1);

                         
                        int index35_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_29);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA35_28 = input.LA(1);

                         
                        int index35_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_28);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA35_21 = input.LA(1);

                         
                        int index35_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_21);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA35_24 = input.LA(1);

                         
                        int index35_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_24);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA35_39 = input.LA(1);

                         
                        int index35_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_39);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA35_37 = input.LA(1);

                         
                        int index35_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_37);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA35_15 = input.LA(1);

                         
                        int index35_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_15);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA35_4 = input.LA(1);

                         
                        int index35_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_4);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA35_35 = input.LA(1);

                         
                        int index35_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_35);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA35_14 = input.LA(1);

                         
                        int index35_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_14);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA35_41 = input.LA(1);

                         
                        int index35_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_41);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA35_19 = input.LA(1);

                         
                        int index35_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_19);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA35_32 = input.LA(1);

                         
                        int index35_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_32);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA35_3 = input.LA(1);

                         
                        int index35_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_3);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA35_30 = input.LA(1);

                         
                        int index35_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_30);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA35_11 = input.LA(1);

                         
                        int index35_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_11);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA35_5 = input.LA(1);

                         
                        int index35_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_5);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA35_13 = input.LA(1);

                         
                        int index35_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_13);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA35_17 = input.LA(1);

                         
                        int index35_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_17);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA35_12 = input.LA(1);

                         
                        int index35_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_12);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA35_26 = input.LA(1);

                         
                        int index35_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_26);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA35_38 = input.LA(1);

                         
                        int index35_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_38);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA35_20 = input.LA(1);

                         
                        int index35_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_20);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA35_40 = input.LA(1);

                         
                        int index35_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_40);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA35_9 = input.LA(1);

                         
                        int index35_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index35_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 35, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA37_static {
    static final String DFA37_eotS =
        "\13\uffff";
    static final String DFA37_eofS =
        "\1\1\12\uffff";
    static final String DFA37_minS =
        "\1\46\1\uffff\4\45\4\0\1\uffff";
    static final String DFA37_maxS =
        "\1\u00b4\1\uffff\4\45\4\0\1\uffff";
    static final String DFA37_acceptS =
        "\1\uffff\1\2\10\uffff\1\1";
    static final String DFA37_specialS =
        "\6\uffff\1\0\1\2\1\1\1\3\1\uffff}>";
    static final String[] DFA37_transitionS = {
            "\176\1\1\2\1\3\1\5\1\4\15\1",
            "",
            "\1\6",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA37_eot = DFA.unpackEncodedString(DFA37_static.DFA37_eotS);
    static final short[] DFA37_eof = DFA.unpackEncodedString(DFA37_static.DFA37_eofS);
    static final char[] DFA37_min = DFA.unpackEncodedStringToUnsignedChars(DFA37_static.DFA37_minS);
    static final char[] DFA37_max = DFA.unpackEncodedStringToUnsignedChars(DFA37_static.DFA37_maxS);
    static final short[] DFA37_accept = DFA.unpackEncodedString(DFA37_static.DFA37_acceptS);
    static final short[] DFA37_special = DFA.unpackEncodedString(DFA37_static.DFA37_specialS);
    static final short[][] DFA37_transition;

    static {
        int numStates = DFA37_static.DFA37_transitionS.length;
        DFA37_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA37_transition[i] = DFA.unpackEncodedString(DFA37_static.DFA37_transitionS[i]);
        }
    }

    class DFA37 extends DFA {

        public DFA37(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 37;
            this.eot = DFA37_eot;
            this.eof = DFA37_eof;
            this.min = DFA37_min;
            this.max = DFA37_max;
            this.accept = DFA37_accept;
            this.special = DFA37_special;
            this.transition = DFA37_transition;
        }
        public String getDescription() {
            return "()* loopback of 116:81: ( adv )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA37_6 = input.LA(1);

                         
                        int index37_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred117_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index37_6);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA37_8 = input.LA(1);

                         
                        int index37_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred117_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index37_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA37_7 = input.LA(1);

                         
                        int index37_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred117_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index37_7);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA37_9 = input.LA(1);

                         
                        int index37_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred117_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index37_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 37, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA38_static {
    static final String DFA38_eotS =
        "\17\uffff";
    static final String DFA38_eofS =
        "\1\7\16\uffff";
    static final String DFA38_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA38_maxS =
        "\1\u00b4\6\45\1\uffff\6\0\1\uffff";
    static final String DFA38_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA38_specialS =
        "\10\uffff\1\3\1\5\1\1\1\0\1\4\1\2\1\uffff}>";
    static final String[] DFA38_transitionS = {
            "\1\7\1\4\1\6\4\7\1\5\151\7\1\1\1\2\1\3\33\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA38_eot = DFA.unpackEncodedString(DFA38_static.DFA38_eotS);
    static final short[] DFA38_eof = DFA.unpackEncodedString(DFA38_static.DFA38_eofS);
    static final char[] DFA38_min = DFA.unpackEncodedStringToUnsignedChars(DFA38_static.DFA38_minS);
    static final char[] DFA38_max = DFA.unpackEncodedStringToUnsignedChars(DFA38_static.DFA38_maxS);
    static final short[] DFA38_accept = DFA.unpackEncodedString(DFA38_static.DFA38_acceptS);
    static final short[] DFA38_special = DFA.unpackEncodedString(DFA38_static.DFA38_specialS);
    static final short[][] DFA38_transition;

    static {
        int numStates = DFA38_static.DFA38_transitionS.length;
        DFA38_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA38_transition[i] = DFA.unpackEncodedString(DFA38_static.DFA38_transitionS[i]);
        }
    }

    class DFA38 extends DFA {

        public DFA38(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 38;
            this.eot = DFA38_eot;
            this.eof = DFA38_eof;
            this.min = DFA38_min;
            this.max = DFA38_max;
            this.accept = DFA38_accept;
            this.special = DFA38_special;
            this.transition = DFA38_transition;
        }
        public String getDescription() {
            return "116:86: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA38_11 = input.LA(1);

                         
                        int index38_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index38_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA38_10 = input.LA(1);

                         
                        int index38_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index38_10);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA38_13 = input.LA(1);

                         
                        int index38_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index38_13);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA38_8 = input.LA(1);

                         
                        int index38_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index38_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA38_12 = input.LA(1);

                         
                        int index38_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index38_12);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA38_9 = input.LA(1);

                         
                        int index38_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index38_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 38, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA44_static {
    static final String DFA44_eotS =
        "\u0092\uffff";
    static final String DFA44_eofS =
        "\1\13\u0091\uffff";
    static final String DFA44_minS =
        "\1\46\12\0\1\uffff\2\0\3\uffff\1\0\1\uffff\1\0\27\uffff\1\0\2\uffff"+
        "\1\0\36\uffff\22\0\50\uffff\1\0\12\uffff";
    static final String DFA44_maxS =
        "\1\u00b4\12\0\1\uffff\2\0\3\uffff\1\0\1\uffff\1\0\27\uffff\1\0"+
        "\2\uffff\1\0\36\uffff\22\0\50\uffff\1\0\12\uffff";
    static final String DFA44_acceptS =
        "\13\uffff\1\2\u0085\uffff\1\1";
    static final String DFA44_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\12"+
        "\1\13\3\uffff\1\14\1\uffff\1\15\27\uffff\1\16\2\uffff\1\17\36\uffff"+
        "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
        "\1\35\1\36\1\37\1\40\1\41\50\uffff\1\42\12\uffff}>";
    static final String[] DFA44_transitionS = {
            "\1\13\1\10\1\12\4\13\1\11\1\13\1\120\1\121\1\117\1\125\1\126"+
            "\1\135\1\136\1\122\1\134\1\127\1\131\1\123\1\124\1\133\1\132"+
            "\1\130\1\13\1\53\7\13\1\56\74\13\1\15\1\13\1\u0087\11\13\1\14"+
            "\1\23\1\21\2\13\1\116\1\5\1\6\1\7\12\13\1\1\1\2\1\4\1\3\1\13"+
            "\1\115\13\13",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA44_eot = DFA.unpackEncodedString(DFA44_static.DFA44_eotS);
    static final short[] DFA44_eof = DFA.unpackEncodedString(DFA44_static.DFA44_eofS);
    static final char[] DFA44_min = DFA.unpackEncodedStringToUnsignedChars(DFA44_static.DFA44_minS);
    static final char[] DFA44_max = DFA.unpackEncodedStringToUnsignedChars(DFA44_static.DFA44_maxS);
    static final short[] DFA44_accept = DFA.unpackEncodedString(DFA44_static.DFA44_acceptS);
    static final short[] DFA44_special = DFA.unpackEncodedString(DFA44_static.DFA44_specialS);
    static final short[][] DFA44_transition;

    static {
        int numStates = DFA44_static.DFA44_transitionS.length;
        DFA44_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA44_transition[i] = DFA.unpackEncodedString(DFA44_static.DFA44_transitionS[i]);
        }
    }

    class DFA44 extends DFA {

        public DFA44(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 44;
            this.eot = DFA44_eot;
            this.eof = DFA44_eof;
            this.min = DFA44_min;
            this.max = DFA44_max;
            this.accept = DFA44_accept;
            this.special = DFA44_special;
            this.transition = DFA44_transition;
        }
        public String getDescription() {
            return "()* loopback of 116:106: ( ( cc )? ( comma )? prepphrase )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA44_1 = input.LA(1);

                         
                        int index44_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA44_2 = input.LA(1);

                         
                        int index44_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA44_3 = input.LA(1);

                         
                        int index44_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA44_4 = input.LA(1);

                         
                        int index44_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA44_5 = input.LA(1);

                         
                        int index44_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA44_6 = input.LA(1);

                         
                        int index44_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA44_7 = input.LA(1);

                         
                        int index44_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA44_8 = input.LA(1);

                         
                        int index44_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA44_9 = input.LA(1);

                         
                        int index44_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA44_10 = input.LA(1);

                         
                        int index44_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA44_12 = input.LA(1);

                         
                        int index44_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_12);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA44_13 = input.LA(1);

                         
                        int index44_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_13);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA44_17 = input.LA(1);

                         
                        int index44_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_17);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA44_19 = input.LA(1);

                         
                        int index44_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_19);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA44_43 = input.LA(1);

                         
                        int index44_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_43);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA44_46 = input.LA(1);

                         
                        int index44_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_46);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA44_77 = input.LA(1);

                         
                        int index44_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_77);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA44_78 = input.LA(1);

                         
                        int index44_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_78);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA44_79 = input.LA(1);

                         
                        int index44_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_79);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA44_80 = input.LA(1);

                         
                        int index44_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_80);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA44_81 = input.LA(1);

                         
                        int index44_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_81);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA44_82 = input.LA(1);

                         
                        int index44_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_82);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA44_83 = input.LA(1);

                         
                        int index44_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_83);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA44_84 = input.LA(1);

                         
                        int index44_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_84);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA44_85 = input.LA(1);

                         
                        int index44_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_85);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA44_86 = input.LA(1);

                         
                        int index44_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_86);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA44_87 = input.LA(1);

                         
                        int index44_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_87);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA44_88 = input.LA(1);

                         
                        int index44_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_88);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA44_89 = input.LA(1);

                         
                        int index44_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_89);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA44_90 = input.LA(1);

                         
                        int index44_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_90);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA44_91 = input.LA(1);

                         
                        int index44_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_91);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA44_92 = input.LA(1);

                         
                        int index44_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_92);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA44_93 = input.LA(1);

                         
                        int index44_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_93);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA44_94 = input.LA(1);

                         
                        int index44_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_94);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA44_135 = input.LA(1);

                         
                        int index44_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index44_135);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 44, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA45_static {
    static final String DFA45_eotS =
        "\60\uffff";
    static final String DFA45_eofS =
        "\51\uffff\1\53\2\uffff\1\53\3\uffff";
    static final String DFA45_minS =
        "\1\125\11\uffff\1\45\36\uffff\1\46\1\45\1\uffff\1\46\1\45\1\0\1"+
        "\uffff";
    static final String DFA45_maxS =
        "\1\u00b0\11\uffff\1\45\36\uffff\1\u00b4\1\45\1\uffff\1\u00b4\1"+
        "\45\1\0\1\uffff";
    static final String DFA45_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\30\1\31\1\32"+
        "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
        "\1\50\1\51\2\uffff\1\27\3\uffff\1\12";
    static final String DFA45_specialS =
        "\56\uffff\1\0\1\uffff}>";
    static final String[] DFA45_transitionS = {
            "\1\7\1\50\1\10\1\13\2\uffff\1\15\1\14\1\16\1\17\1\20\1\21\1"+
            "\22\1\23\1\24\1\uffff\1\25\1\uffff\1\26\1\12\1\27\1\30\1\uffff"+
            "\1\31\1\uffff\1\32\1\uffff\1\33\1\34\1\11\1\35\1\36\1\uffff"+
            "\1\37\1\uffff\1\40\1\41\1\42\1\uffff\1\43\1\44\1\uffff\1\45"+
            "\1\46\1\47\51\uffff\1\1\1\4\1\3\1\6\1\2\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\51",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\153\53\1\52\43\53",
            "\1\54",
            "",
            "\72\53\1\55\124\53",
            "\1\56",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA45_eot = DFA.unpackEncodedString(DFA45_static.DFA45_eotS);
    static final short[] DFA45_eof = DFA.unpackEncodedString(DFA45_static.DFA45_eofS);
    static final char[] DFA45_min = DFA.unpackEncodedStringToUnsignedChars(DFA45_static.DFA45_minS);
    static final char[] DFA45_max = DFA.unpackEncodedStringToUnsignedChars(DFA45_static.DFA45_maxS);
    static final short[] DFA45_accept = DFA.unpackEncodedString(DFA45_static.DFA45_acceptS);
    static final short[] DFA45_special = DFA.unpackEncodedString(DFA45_static.DFA45_specialS);
    static final short[][] DFA45_transition;

    static {
        int numStates = DFA45_static.DFA45_transitionS.length;
        DFA45_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA45_transition[i] = DFA.unpackEncodedString(DFA45_static.DFA45_transitionS[i]);
        }
    }

    class DFA45 extends DFA {

        public DFA45(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 45;
            this.eot = DFA45_eot;
            this.eof = DFA45_eof;
            this.min = DFA45_min;
            this.max = DFA45_max;
            this.accept = DFA45_accept;
            this.special = DFA45_special;
            this.transition = DFA45_transition;
        }
        public String getDescription() {
            return "117:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA45_46 = input.LA(1);

                         
                        int index45_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 47;}

                        else if ( (synpred147_ChemicalChunker()) ) {s = 43;}

                         
                        input.seek(index45_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 45, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA47_static {
    static final String DFA47_eotS =
        "\123\uffff";
    static final String DFA47_eofS =
        "\123\uffff";
    static final String DFA47_minS =
        "\1\46\2\uffff\14\0\1\uffff\5\0\2\uffff\1\0\2\uffff\1\0\1\uffff"+
        "\1\0\66\uffff";
    static final String DFA47_maxS =
        "\1\u00b4\2\uffff\14\0\1\uffff\5\0\2\uffff\1\0\2\uffff\1\0\1\uffff"+
        "\1\0\66\uffff";
    static final String DFA47_acceptS =
        "\1\uffff\1\1\1\2\14\uffff\1\6\6\uffff\1\10\2\uffff\1\11\1\uffff"+
        "\1\13\1\uffff\1\15\1\16\1\20\1\23\1\24\1\25\1\26\1\31\1\33\1\35"+
        "\1\36\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\53\1\55"+
        "\1\56\1\57\1\60\1\61\1\62\1\63\5\uffff\1\64\1\65\1\66\1\67\1\3\1"+
        "\5\1\7\1\27\1\4\1\22\1\54\1\32\1\37\1\17\1\30\1\12\1\14\1\52\1\34"+
        "\1\21";
    static final String DFA47_specialS =
        "\3\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\uffff\1\14\1\15\1\16\1\17\1\20\2\uffff\1\21\2\uffff\1\22\1\uffff"+
        "\1\23\66\uffff}>";
    static final String[] DFA47_transitionS = {
            "\1\7\1\13\1\15\1\102\1\40\1\43\1\uffff\1\14\1\26\20\uffff\1"+
            "\23\1\41\1\uffff\1\46\1\uffff\1\42\1\47\1\56\1\22\1\44\1\6\1"+
            "\45\1\32\1\33\1\20\1\50\1\51\1\52\1\53\1\54\1\34\1\16\4\uffff"+
            "\1\21\1\61\11\uffff\1\17\1\uffff\1\55\4\uffff\1\62\1\uffff\1"+
            "\63\1\uffff\1\64\5\uffff\1\65\1\uffff\1\57\3\uffff\1\66\1\uffff"+
            "\1\37\1\60\3\uffff\1\31\2\uffff\1\4\5\uffff\1\27\1\uffff\1\26"+
            "\1\uffff\1\3\2\uffff\1\5\1\17\1\71\1\67\1\uffff\1\10\1\11\1"+
            "\12\1\77\1\uffff\1\24\1\35\1\36\1\100\1\71\1\101\1\1\1\2\4\uffff"+
            "\1\70\10\uffff\4\71",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA47_eot = DFA.unpackEncodedString(DFA47_static.DFA47_eotS);
    static final short[] DFA47_eof = DFA.unpackEncodedString(DFA47_static.DFA47_eofS);
    static final char[] DFA47_min = DFA.unpackEncodedStringToUnsignedChars(DFA47_static.DFA47_minS);
    static final char[] DFA47_max = DFA.unpackEncodedStringToUnsignedChars(DFA47_static.DFA47_maxS);
    static final short[] DFA47_accept = DFA.unpackEncodedString(DFA47_static.DFA47_acceptS);
    static final short[] DFA47_special = DFA.unpackEncodedString(DFA47_static.DFA47_specialS);
    static final short[][] DFA47_transition;

    static {
        int numStates = DFA47_static.DFA47_transitionS.length;
        DFA47_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA47_transition[i] = DFA.unpackEncodedString(DFA47_static.DFA47_transitionS[i]);
        }
    }

    class DFA47 extends DFA {

        public DFA47(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 47;
            this.eot = DFA47_eot;
            this.eof = DFA47_eof;
            this.min = DFA47_min;
            this.max = DFA47_max;
            this.accept = DFA47_accept;
            this.special = DFA47_special;
            this.transition = DFA47_transition;
        }
        public String getDescription() {
            return "124:1: nounStructure : ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnyield | nnstate | procedureNode | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | oscaronts | nntime | nnatmosphere | tmunicode | quantity | nnchementity | nntemp | nnph | nnflash | nngeneral | nnamount | nneq | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | squareBracketedReference | nndry | numeric | nnextract | nnfilter | nnprecipitate | nnremove | fw | sym | clause | ls | nnps | pos | oscarase );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA47_3 = input.LA(1);

                         
                        int index47_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred168_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred170_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred171_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred172_ChemicalChunker()) ) {s = 69;}

                        else if ( (((synpred173_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred173_ChemicalChunker())) ) {s = 22;}

                        else if ( (synpred188_ChemicalChunker()) ) {s = 70;}

                         
                        input.seek(index47_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA47_4 = input.LA(1);

                         
                        int index47_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred168_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred170_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred171_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred172_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred173_ChemicalChunker()) ) {s = 22;}

                         
                        input.seek(index47_4);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA47_5 = input.LA(1);

                         
                        int index47_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_ChemicalChunker()) ) {s = 71;}

                        else if ( (synpred170_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred171_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred172_ChemicalChunker()) ) {s = 69;}

                        else if ( (((synpred173_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred173_ChemicalChunker())) ) {s = 22;}

                        else if ( (synpred183_ChemicalChunker()) ) {s = 72;}

                        else if ( (synpred188_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred209_ChemicalChunker()) ) {s = 73;}

                         
                        input.seek(index47_5);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA47_6 = input.LA(1);

                         
                        int index47_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred171_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred173_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred188_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred191_ChemicalChunker()) ) {s = 74;}

                         
                        input.seek(index47_6);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA47_7 = input.LA(1);

                         
                        int index47_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred171_ChemicalChunker()) ) {s = 15;}

                        else if ( (((synpred173_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred173_ChemicalChunker())) ) {s = 22;}

                        else if ( (synpred183_ChemicalChunker()) ) {s = 72;}

                        else if ( (synpred188_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred209_ChemicalChunker()) ) {s = 73;}

                         
                        input.seek(index47_7);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA47_8 = input.LA(1);

                         
                        int index47_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred171_ChemicalChunker()) ) {s = 15;}

                         
                        input.seek(index47_8);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA47_9 = input.LA(1);

                         
                        int index47_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred171_ChemicalChunker()) ) {s = 15;}

                         
                        input.seek(index47_9);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA47_10 = input.LA(1);

                         
                        int index47_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred171_ChemicalChunker()) ) {s = 15;}

                         
                        input.seek(index47_10);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA47_11 = input.LA(1);

                         
                        int index47_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred171_ChemicalChunker()) ) {s = 15;}

                         
                        input.seek(index47_11);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA47_12 = input.LA(1);

                         
                        int index47_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred171_ChemicalChunker()) ) {s = 15;}

                         
                        input.seek(index47_12);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA47_13 = input.LA(1);

                         
                        int index47_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred171_ChemicalChunker()) ) {s = 15;}

                         
                        input.seek(index47_13);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA47_14 = input.LA(1);

                         
                        int index47_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred171_ChemicalChunker()) ) {s = 15;}

                         
                        input.seek(index47_14);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA47_16 = input.LA(1);

                         
                        int index47_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred171_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred196_ChemicalChunker()) ) {s = 75;}

                         
                        input.seek(index47_16);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA47_17 = input.LA(1);

                         
                        int index47_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred171_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 76;}

                         
                        input.seek(index47_17);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA47_18 = input.LA(1);

                         
                        int index47_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred171_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred173_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred189_ChemicalChunker()) ) {s = 77;}

                         
                        input.seek(index47_18);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA47_19 = input.LA(1);

                         
                        int index47_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred171_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 78;}

                         
                        input.seek(index47_19);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA47_20 = input.LA(1);

                         
                        int index47_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred171_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred176_ChemicalChunker()) ) {s = 27;}

                        else if ( (synpred177_ChemicalChunker()) ) {s = 79;}

                         
                        input.seek(index47_20);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA47_23 = input.LA(1);

                         
                        int index47_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred173_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred173_ChemicalChunker())) ) {s = 22;}

                        else if ( (synpred207_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index47_23);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA47_26 = input.LA(1);

                         
                        int index47_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_ChemicalChunker()) ) {s = 27;}

                        else if ( (synpred193_ChemicalChunker()) ) {s = 81;}

                         
                        input.seek(index47_26);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA47_28 = input.LA(1);

                         
                        int index47_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_ChemicalChunker()) ) {s = 27;}

                        else if ( (synpred182_ChemicalChunker()) ) {s = 82;}

                         
                        input.seek(index47_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 47, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA49_static {
    static final String DFA49_eotS =
        "\45\uffff";
    static final String DFA49_eofS =
        "\45\uffff";
    static final String DFA49_minS =
        "\1\47\36\0\6\uffff";
    static final String DFA49_maxS =
        "\1\u00a9\36\0\6\uffff";
    static final String DFA49_acceptS =
        "\37\uffff\1\2\1\3\1\1\1\6\1\5\1\4";
    static final String DFA49_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\6\uffff}>";
    static final String[] DFA49_transitionS = {
            "\1\11\1\13\4\uffff\1\12\1\uffff\1\16\1\17\1\15\1\23\1\24\1"+
            "\32\1\33\1\20\1\31\1\25\1\27\1\21\1\22\1\1\1\30\1\26\1\uffff"+
            "\1\37\7\uffff\1\40\111\uffff\1\36\1\35\2\uffff\1\14\1\6\1\7"+
            "\1\10\12\uffff\1\2\1\3\1\5\1\4\1\uffff\1\34",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_static.DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_static.DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_static.DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_static.DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_static.DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_static.DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_static.DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_static.DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "129:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA49_1 = input.LA(1);

                         
                        int index49_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index49_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA49_2 = input.LA(1);

                         
                        int index49_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index49_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA49_3 = input.LA(1);

                         
                        int index49_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index49_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA49_4 = input.LA(1);

                         
                        int index49_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index49_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA49_5 = input.LA(1);

                         
                        int index49_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index49_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA49_6 = input.LA(1);

                         
                        int index49_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index49_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA49_7 = input.LA(1);

                         
                        int index49_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index49_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA49_8 = input.LA(1);

                         
                        int index49_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index49_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA49_9 = input.LA(1);

                         
                        int index49_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index49_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA49_10 = input.LA(1);

                         
                        int index49_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index49_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA49_11 = input.LA(1);

                         
                        int index49_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index49_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA49_12 = input.LA(1);

                         
                        int index49_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index49_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA49_13 = input.LA(1);

                         
                        int index49_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index49_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA49_14 = input.LA(1);

                         
                        int index49_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred225_ChemicalChunker()) ) {s = 35;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index49_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA49_15 = input.LA(1);

                         
                        int index49_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index49_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA49_16 = input.LA(1);

                         
                        int index49_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index49_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA49_17 = input.LA(1);

                         
                        int index49_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index49_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA49_18 = input.LA(1);

                         
                        int index49_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index49_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA49_19 = input.LA(1);

                         
                        int index49_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred224_ChemicalChunker()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index49_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA49_20 = input.LA(1);

                         
                        int index49_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index49_20);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA49_21 = input.LA(1);

                         
                        int index49_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index49_21);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA49_22 = input.LA(1);

                         
                        int index49_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index49_22);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA49_23 = input.LA(1);

                         
                        int index49_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index49_23);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA49_24 = input.LA(1);

                         
                        int index49_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index49_24);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA49_25 = input.LA(1);

                         
                        int index49_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index49_25);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA49_26 = input.LA(1);

                         
                        int index49_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index49_26);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA49_27 = input.LA(1);

                         
                        int index49_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index49_27);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA49_28 = input.LA(1);

                         
                        int index49_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index49_28);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA49_29 = input.LA(1);

                         
                        int index49_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index49_29);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA49_30 = input.LA(1);

                         
                        int index49_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index49_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 49, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA51_static {
    static final String DFA51_eotS =
        "\17\uffff";
    static final String DFA51_eofS =
        "\17\uffff";
    static final String DFA51_minS =
        "\1\46\1\uffff\6\45\1\uffff\6\0";
    static final String DFA51_maxS =
        "\1\u00a7\1\uffff\6\45\1\uffff\6\0";
    static final String DFA51_acceptS =
        "\1\uffff\1\2\6\uffff\1\1\6\uffff";
    static final String DFA51_specialS =
        "\11\uffff\1\4\1\5\1\1\1\3\1\0\1\2}>";
    static final String[] DFA51_transitionS = {
            "\1\1\1\5\1\7\4\uffff\1\6\33\uffff\1\1\12\uffff\1\1\60\uffff"+
            "\1\1\11\uffff\1\1\2\uffff\1\1\4\uffff\1\2\1\3\1\4\12\uffff\4"+
            "\10",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA51_eot = DFA.unpackEncodedString(DFA51_static.DFA51_eotS);
    static final short[] DFA51_eof = DFA.unpackEncodedString(DFA51_static.DFA51_eofS);
    static final char[] DFA51_min = DFA.unpackEncodedStringToUnsignedChars(DFA51_static.DFA51_minS);
    static final char[] DFA51_max = DFA.unpackEncodedStringToUnsignedChars(DFA51_static.DFA51_maxS);
    static final short[] DFA51_accept = DFA.unpackEncodedString(DFA51_static.DFA51_acceptS);
    static final short[] DFA51_special = DFA.unpackEncodedString(DFA51_static.DFA51_specialS);
    static final short[][] DFA51_transition;

    static {
        int numStates = DFA51_static.DFA51_transitionS.length;
        DFA51_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA51_transition[i] = DFA.unpackEncodedString(DFA51_static.DFA51_transitionS[i]);
        }
    }

    class DFA51 extends DFA {

        public DFA51(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 51;
            this.eot = DFA51_eot;
            this.eof = DFA51_eof;
            this.min = DFA51_min;
            this.max = DFA51_max;
            this.accept = DFA51_accept;
            this.special = DFA51_special;
            this.transition = DFA51_transition;
        }
        public String getDescription() {
            return "()* loopback of 135:16: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA51_13 = input.LA(1);

                         
                        int index51_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index51_13);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA51_11 = input.LA(1);

                         
                        int index51_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index51_11);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA51_14 = input.LA(1);

                         
                        int index51_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index51_14);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA51_12 = input.LA(1);

                         
                        int index51_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index51_12);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA51_9 = input.LA(1);

                         
                        int index51_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index51_9);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA51_10 = input.LA(1);

                         
                        int index51_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index51_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 51, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA53_static {
    static final String DFA53_eotS =
        "\27\uffff";
    static final String DFA53_eofS =
        "\27\uffff";
    static final String DFA53_minS =
        "\1\47\1\uffff\12\45\12\0\1\uffff";
    static final String DFA53_maxS =
        "\1\u00a9\1\uffff\12\45\12\0\1\uffff";
    static final String DFA53_acceptS =
        "\1\uffff\1\2\24\uffff\1\1";
    static final String DFA53_specialS =
        "\14\uffff\1\6\1\3\1\0\1\10\1\11\1\2\1\7\1\5\1\1\1\4\1\uffff}>";
    static final String[] DFA53_transitionS = {
            "\1\11\1\13\4\uffff\1\12\1\uffff\20\1\1\uffff\1\1\121\uffff"+
            "\2\1\2\uffff\1\1\1\6\1\7\1\10\12\uffff\1\2\1\3\1\5\1\4\1\uffff"+
            "\1\1",
            "",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA53_eot = DFA.unpackEncodedString(DFA53_static.DFA53_eotS);
    static final short[] DFA53_eof = DFA.unpackEncodedString(DFA53_static.DFA53_eofS);
    static final char[] DFA53_min = DFA.unpackEncodedStringToUnsignedChars(DFA53_static.DFA53_minS);
    static final char[] DFA53_max = DFA.unpackEncodedStringToUnsignedChars(DFA53_static.DFA53_maxS);
    static final short[] DFA53_accept = DFA.unpackEncodedString(DFA53_static.DFA53_acceptS);
    static final short[] DFA53_special = DFA.unpackEncodedString(DFA53_static.DFA53_specialS);
    static final short[][] DFA53_transition;

    static {
        int numStates = DFA53_static.DFA53_transitionS.length;
        DFA53_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA53_transition[i] = DFA.unpackEncodedString(DFA53_static.DFA53_transitionS[i]);
        }
    }

    class DFA53 extends DFA {

        public DFA53(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 53;
            this.eot = DFA53_eot;
            this.eof = DFA53_eof;
            this.min = DFA53_min;
            this.max = DFA53_max;
            this.accept = DFA53_accept;
            this.special = DFA53_special;
            this.transition = DFA53_transition;
        }
        public String getDescription() {
            return "()* loopback of 141:3: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA53_14 = input.LA(1);

                         
                        int index53_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_14);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA53_20 = input.LA(1);

                         
                        int index53_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_20);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA53_17 = input.LA(1);

                         
                        int index53_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA53_13 = input.LA(1);

                         
                        int index53_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_13);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA53_21 = input.LA(1);

                         
                        int index53_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_21);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA53_19 = input.LA(1);

                         
                        int index53_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_19);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA53_12 = input.LA(1);

                         
                        int index53_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_12);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA53_18 = input.LA(1);

                         
                        int index53_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_18);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA53_15 = input.LA(1);

                         
                        int index53_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_15);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA53_16 = input.LA(1);

                         
                        int index53_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 53, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA59_static {
    static final String DFA59_eotS =
        "\27\uffff";
    static final String DFA59_eofS =
        "\27\uffff";
    static final String DFA59_minS =
        "\1\47\12\45\1\uffff\12\0\1\uffff";
    static final String DFA59_maxS =
        "\1\u00a9\12\45\1\uffff\12\0\1\uffff";
    static final String DFA59_acceptS =
        "\13\uffff\1\2\12\uffff\1\1";
    static final String DFA59_specialS =
        "\14\uffff\1\5\1\2\1\1\1\10\1\11\1\4\1\3\1\6\1\0\1\7\1\uffff}>";
    static final String[] DFA59_transitionS = {
            "\1\10\1\12\4\uffff\1\11\1\uffff\20\13\11\uffff\1\13\111\uffff"+
            "\2\13\2\uffff\1\13\1\5\1\6\1\7\12\uffff\1\1\1\2\1\4\1\3\1\uffff"+
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA59_eot = DFA.unpackEncodedString(DFA59_static.DFA59_eotS);
    static final short[] DFA59_eof = DFA.unpackEncodedString(DFA59_static.DFA59_eofS);
    static final char[] DFA59_min = DFA.unpackEncodedStringToUnsignedChars(DFA59_static.DFA59_minS);
    static final char[] DFA59_max = DFA.unpackEncodedStringToUnsignedChars(DFA59_static.DFA59_maxS);
    static final short[] DFA59_accept = DFA.unpackEncodedString(DFA59_static.DFA59_acceptS);
    static final short[] DFA59_special = DFA.unpackEncodedString(DFA59_static.DFA59_specialS);
    static final short[][] DFA59_transition;

    static {
        int numStates = DFA59_static.DFA59_transitionS.length;
        DFA59_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA59_transition[i] = DFA.unpackEncodedString(DFA59_static.DFA59_transitionS[i]);
        }
    }

    class DFA59 extends DFA {

        public DFA59(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 59;
            this.eot = DFA59_eot;
            this.eof = DFA59_eof;
            this.min = DFA59_min;
            this.max = DFA59_max;
            this.accept = DFA59_accept;
            this.special = DFA59_special;
            this.transition = DFA59_transition;
        }
        public String getDescription() {
            return "146:5: ( advAdj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA59_20 = input.LA(1);

                         
                        int index59_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_20);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA59_14 = input.LA(1);

                         
                        int index59_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_14);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA59_13 = input.LA(1);

                         
                        int index59_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_13);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA59_18 = input.LA(1);

                         
                        int index59_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_18);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA59_17 = input.LA(1);

                         
                        int index59_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_17);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA59_12 = input.LA(1);

                         
                        int index59_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_12);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA59_19 = input.LA(1);

                         
                        int index59_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_19);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA59_21 = input.LA(1);

                         
                        int index59_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_21);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA59_15 = input.LA(1);

                         
                        int index59_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_15);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA59_16 = input.LA(1);

                         
                        int index59_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 59, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA71_static {
    static final String DFA71_eotS =
        "\u0092\uffff";
    static final String DFA71_eofS =
        "\1\1\u0091\uffff";
    static final String DFA71_minS =
        "\1\46\4\uffff\6\0\1\uffff\2\0\3\uffff\14\0\165\uffff";
    static final String DFA71_maxS =
        "\1\u00b4\4\uffff\6\0\1\uffff\2\0\3\uffff\14\0\165\uffff";
    static final String DFA71_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA71_specialS =
        "\5\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\uffff\1\6\1\7\3\uffff\1\10\1"+
        "\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\165\uffff}>";
    static final String[] DFA71_transitionS = {
            "\1\25\1\10\1\12\4\1\1\11\21\1\1\32\7\1\1\31\1\1\1\24\3\1\1"+
            "\26\6\1\1\30\4\1\1\27\12\1\1\34\40\1\1\15\11\1\1\22\1\1\1\14"+
            "\1\23\1\21\3\1\1\5\1\6\1\7\2\1\1\33\30\1",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA71_eot = DFA.unpackEncodedString(DFA71_static.DFA71_eotS);
    static final short[] DFA71_eof = DFA.unpackEncodedString(DFA71_static.DFA71_eofS);
    static final char[] DFA71_min = DFA.unpackEncodedStringToUnsignedChars(DFA71_static.DFA71_minS);
    static final char[] DFA71_max = DFA.unpackEncodedStringToUnsignedChars(DFA71_static.DFA71_maxS);
    static final short[] DFA71_accept = DFA.unpackEncodedString(DFA71_static.DFA71_acceptS);
    static final short[] DFA71_special = DFA.unpackEncodedString(DFA71_static.DFA71_specialS);
    static final short[][] DFA71_transition;

    static {
        int numStates = DFA71_static.DFA71_transitionS.length;
        DFA71_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA71_transition[i] = DFA.unpackEncodedString(DFA71_static.DFA71_transitionS[i]);
        }
    }

    class DFA71 extends DFA {

        public DFA71(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 71;
            this.eot = DFA71_eot;
            this.eof = DFA71_eof;
            this.min = DFA71_min;
            this.max = DFA71_max;
            this.accept = DFA71_accept;
            this.special = DFA71_special;
            this.transition = DFA71_transition;
        }
        public String getDescription() {
            return "()* loopback of 167:14: ( ( conjunction )* apparatus )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA71_5 = input.LA(1);

                         
                        int index71_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index71_5);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA71_6 = input.LA(1);

                         
                        int index71_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index71_6);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA71_7 = input.LA(1);

                         
                        int index71_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index71_7);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA71_8 = input.LA(1);

                         
                        int index71_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index71_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA71_9 = input.LA(1);

                         
                        int index71_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index71_9);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA71_10 = input.LA(1);

                         
                        int index71_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index71_10);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA71_12 = input.LA(1);

                         
                        int index71_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index71_12);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA71_13 = input.LA(1);

                         
                        int index71_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index71_13);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA71_17 = input.LA(1);

                         
                        int index71_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index71_17);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA71_18 = input.LA(1);

                         
                        int index71_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index71_18);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA71_19 = input.LA(1);

                         
                        int index71_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index71_19);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA71_20 = input.LA(1);

                         
                        int index71_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index71_20);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA71_21 = input.LA(1);

                         
                        int index71_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index71_21);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA71_22 = input.LA(1);

                         
                        int index71_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index71_22);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA71_23 = input.LA(1);

                         
                        int index71_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index71_23);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA71_24 = input.LA(1);

                         
                        int index71_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index71_24);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA71_25 = input.LA(1);

                         
                        int index71_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index71_25);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA71_26 = input.LA(1);

                         
                        int index71_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index71_26);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA71_27 = input.LA(1);

                         
                        int index71_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index71_27);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA71_28 = input.LA(1);

                         
                        int index71_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index71_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 71, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA70_static {
    static final String DFA70_eotS =
        "\25\uffff";
    static final String DFA70_eofS =
        "\25\uffff";
    static final String DFA70_minS =
        "\1\46\15\uffff\1\0\6\uffff";
    static final String DFA70_maxS =
        "\1\u009c\15\uffff\1\0\6\uffff";
    static final String DFA70_acceptS =
        "\1\uffff\1\2\22\uffff\1\1";
    static final String DFA70_specialS =
        "\16\uffff\1\0\6\uffff}>";
    static final String[] DFA70_transitionS = {
            "\3\1\4\uffff\1\1\21\uffff\1\1\7\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\6\uffff\1\1\4\uffff\1\1\12\uffff\1\1\40\uffff\1\16\11\uffff"+
            "\1\1\1\uffff\1\24\2\1\3\uffff\3\1\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA70_eot = DFA.unpackEncodedString(DFA70_static.DFA70_eotS);
    static final short[] DFA70_eof = DFA.unpackEncodedString(DFA70_static.DFA70_eofS);
    static final char[] DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_static.DFA70_minS);
    static final char[] DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_static.DFA70_maxS);
    static final short[] DFA70_accept = DFA.unpackEncodedString(DFA70_static.DFA70_acceptS);
    static final short[] DFA70_special = DFA.unpackEncodedString(DFA70_static.DFA70_specialS);
    static final short[][] DFA70_transition;

    static {
        int numStates = DFA70_static.DFA70_transitionS.length;
        DFA70_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA70_transition[i] = DFA.unpackEncodedString(DFA70_static.DFA70_transitionS[i]);
        }
    }

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = DFA70_eot;
            this.eof = DFA70_eof;
            this.min = DFA70_min;
            this.max = DFA70_max;
            this.accept = DFA70_accept;
            this.special = DFA70_special;
            this.transition = DFA70_transition;
        }
        public String getDescription() {
            return "()* loopback of 167:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA70_14 = input.LA(1);

                         
                        int index70_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index70_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 70, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA77_static {
    static final String DFA77_eotS =
        "\33\uffff";
    static final String DFA77_eofS =
        "\1\1\32\uffff";
    static final String DFA77_minS =
        "\1\46\1\uffff\21\0\10\uffff";
    static final String DFA77_maxS =
        "\1\u009c\1\uffff\21\0\10\uffff";
    static final String DFA77_acceptS =
        "\1\uffff\1\11\21\uffff\1\1\1\5\1\2\1\3\1\4\1\6\1\7\1\10";
    static final String DFA77_specialS =
        "\2\uffff\1\15\1\1\1\12\1\14\1\13\1\4\1\3\1\10\1\7\1\0\1\16\1\17"+
        "\1\20\1\6\1\5\1\2\1\11\10\uffff}>";
    static final String[] DFA77_transitionS = {
            "\1\5\1\11\1\13\4\uffff\1\12\21\uffff\1\21\7\uffff\1\20\1\uffff"+
            "\1\4\3\uffff\1\14\6\uffff\1\17\4\uffff\1\15\12\uffff\1\1\40"+
            "\uffff\1\16\11\uffff\1\2\2\uffff\1\3\4\uffff\1\6\1\7\1\10\2"+
            "\uffff\1\22",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA77_eot = DFA.unpackEncodedString(DFA77_static.DFA77_eotS);
    static final short[] DFA77_eof = DFA.unpackEncodedString(DFA77_static.DFA77_eofS);
    static final char[] DFA77_min = DFA.unpackEncodedStringToUnsignedChars(DFA77_static.DFA77_minS);
    static final char[] DFA77_max = DFA.unpackEncodedStringToUnsignedChars(DFA77_static.DFA77_maxS);
    static final short[] DFA77_accept = DFA.unpackEncodedString(DFA77_static.DFA77_acceptS);
    static final short[] DFA77_special = DFA.unpackEncodedString(DFA77_static.DFA77_specialS);
    static final short[][] DFA77_transition;

    static {
        int numStates = DFA77_static.DFA77_transitionS.length;
        DFA77_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA77_transition[i] = DFA.unpackEncodedString(DFA77_static.DFA77_transitionS[i]);
        }
    }

    class DFA77 extends DFA {

        public DFA77(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 77;
            this.eot = DFA77_eot;
            this.eof = DFA77_eof;
            this.min = DFA77_min;
            this.max = DFA77_max;
            this.accept = DFA77_accept;
            this.special = DFA77_special;
            this.transition = DFA77_transition;
        }
        public String getDescription() {
            return "()+ loopback of 174:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA77_11 = input.LA(1);

                         
                        int index77_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred257_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index77_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA77_3 = input.LA(1);

                         
                        int index77_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred257_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index77_3);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA77_17 = input.LA(1);

                         
                        int index77_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_ChemicalChunker()) ) {s = 25;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index77_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA77_8 = input.LA(1);

                         
                        int index77_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred257_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index77_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA77_7 = input.LA(1);

                         
                        int index77_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred257_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index77_7);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA77_16 = input.LA(1);

                         
                        int index77_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index77_16);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA77_15 = input.LA(1);

                         
                        int index77_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index77_15);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA77_10 = input.LA(1);

                         
                        int index77_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred257_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index77_10);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA77_9 = input.LA(1);

                         
                        int index77_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred257_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index77_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA77_18 = input.LA(1);

                         
                        int index77_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index77_18);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA77_4 = input.LA(1);

                         
                        int index77_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred257_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index77_4);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA77_6 = input.LA(1);

                         
                        int index77_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred257_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index77_6);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA77_5 = input.LA(1);

                         
                        int index77_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred257_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index77_5);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA77_2 = input.LA(1);

                         
                        int index77_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred257_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index77_2);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA77_12 = input.LA(1);

                         
                        int index77_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index77_12);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA77_13 = input.LA(1);

                         
                        int index77_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_ChemicalChunker()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index77_13);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA77_14 = input.LA(1);

                         
                        int index77_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index77_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 77, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA80_static {
    static final String DFA80_eotS =
        "\17\uffff";
    static final String DFA80_eofS =
        "\1\7\16\uffff";
    static final String DFA80_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA80_maxS =
        "\1\u00b4\6\45\1\uffff\6\0\1\uffff";
    static final String DFA80_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA80_specialS =
        "\10\uffff\1\5\1\3\1\0\1\4\1\1\1\2\1\uffff}>";
    static final String[] DFA80_transitionS = {
            "\1\7\1\4\1\6\4\7\1\5\151\7\1\1\1\2\1\3\33\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA80_eot = DFA.unpackEncodedString(DFA80_static.DFA80_eotS);
    static final short[] DFA80_eof = DFA.unpackEncodedString(DFA80_static.DFA80_eofS);
    static final char[] DFA80_min = DFA.unpackEncodedStringToUnsignedChars(DFA80_static.DFA80_minS);
    static final char[] DFA80_max = DFA.unpackEncodedStringToUnsignedChars(DFA80_static.DFA80_maxS);
    static final short[] DFA80_accept = DFA.unpackEncodedString(DFA80_static.DFA80_acceptS);
    static final short[] DFA80_special = DFA.unpackEncodedString(DFA80_static.DFA80_specialS);
    static final short[][] DFA80_transition;

    static {
        int numStates = DFA80_static.DFA80_transitionS.length;
        DFA80_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA80_transition[i] = DFA.unpackEncodedString(DFA80_static.DFA80_transitionS[i]);
        }
    }

    class DFA80 extends DFA {

        public DFA80(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 80;
            this.eot = DFA80_eot;
            this.eof = DFA80_eof;
            this.min = DFA80_min;
            this.max = DFA80_max;
            this.accept = DFA80_accept;
            this.special = DFA80_special;
            this.transition = DFA80_transition;
        }
        public String getDescription() {
            return "178:46: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA80_10 = input.LA(1);

                         
                        int index80_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index80_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA80_12 = input.LA(1);

                         
                        int index80_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index80_12);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA80_13 = input.LA(1);

                         
                        int index80_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index80_13);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA80_9 = input.LA(1);

                         
                        int index80_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index80_9);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA80_11 = input.LA(1);

                         
                        int index80_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index80_11);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA80_8 = input.LA(1);

                         
                        int index80_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index80_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 80, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA81_static {
    static final String DFA81_eotS =
        "\u0094\uffff";
    static final String DFA81_eofS =
        "\1\10\u0093\uffff";
    static final String DFA81_minS =
        "\1\46\7\0\u008c\uffff";
    static final String DFA81_maxS =
        "\1\u00b4\7\0\u008c\uffff";
    static final String DFA81_acceptS =
        "\10\uffff\1\4\u0088\uffff\1\1\1\3\1\2";
    static final String DFA81_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\u008c\uffff}>";
    static final String[] DFA81_transitionS = {
            "\1\4\40\10\1\5\1\10\1\3\101\10\1\6\1\10\1\7\1\10\1\1\2\10\1"+
            "\2\42\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_static.DFA81_eotS);
    static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_static.DFA81_eofS);
    static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_static.DFA81_minS);
    static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_static.DFA81_maxS);
    static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_static.DFA81_acceptS);
    static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_static.DFA81_specialS);
    static final short[][] DFA81_transition;

    static {
        int numStates = DFA81_static.DFA81_transitionS.length;
        DFA81_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA81_transition[i] = DFA.unpackEncodedString(DFA81_static.DFA81_transitionS[i]);
        }
    }

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = DFA81_eot;
            this.eof = DFA81_eof;
            this.min = DFA81_min;
            this.max = DFA81_max;
            this.accept = DFA81_accept;
            this.special = DFA81_special;
            this.transition = DFA81_transition;
        }
        public String getDescription() {
            return "178:51: ( quantity | nnchementity | {...}? numericOrIdentifierCompoundReference )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA81_1 = input.LA(1);

                         
                        int index81_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_ChemicalChunker()) ) {s = 145;}

                        else if ( ((synpred266_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 146;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index81_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA81_2 = input.LA(1);

                         
                        int index81_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_ChemicalChunker()) ) {s = 145;}

                        else if ( ((synpred266_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 146;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index81_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA81_3 = input.LA(1);

                         
                        int index81_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index81_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA81_4 = input.LA(1);

                         
                        int index81_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_ChemicalChunker()) ) {s = 145;}

                        else if ( ((synpred266_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 146;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index81_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA81_5 = input.LA(1);

                         
                        int index81_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index81_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA81_6 = input.LA(1);

                         
                        int index81_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred266_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 146;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index81_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA81_7 = input.LA(1);

                         
                        int index81_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred266_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 146;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index81_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 81, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA82_static {
    static final String DFA82_eotS =
        "\u0092\uffff";
    static final String DFA82_eofS =
        "\1\1\u0091\uffff";
    static final String DFA82_minS =
        "\1\46\17\uffff\4\0\176\uffff";
    static final String DFA82_maxS =
        "\1\u00b4\17\uffff\4\0\176\uffff";
    static final String DFA82_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA82_specialS =
        "\20\uffff\1\0\1\1\1\2\1\3\176\uffff}>";
    static final String[] DFA82_transitionS = {
            "\1\23\42\1\1\22\105\1\1\20\2\1\1\21\42\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA82_eot = DFA.unpackEncodedString(DFA82_static.DFA82_eotS);
    static final short[] DFA82_eof = DFA.unpackEncodedString(DFA82_static.DFA82_eofS);
    static final char[] DFA82_min = DFA.unpackEncodedStringToUnsignedChars(DFA82_static.DFA82_minS);
    static final char[] DFA82_max = DFA.unpackEncodedStringToUnsignedChars(DFA82_static.DFA82_maxS);
    static final short[] DFA82_accept = DFA.unpackEncodedString(DFA82_static.DFA82_acceptS);
    static final short[] DFA82_special = DFA.unpackEncodedString(DFA82_static.DFA82_specialS);
    static final short[][] DFA82_transition;

    static {
        int numStates = DFA82_static.DFA82_transitionS.length;
        DFA82_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA82_transition[i] = DFA.unpackEncodedString(DFA82_static.DFA82_transitionS[i]);
        }
    }

    class DFA82 extends DFA {

        public DFA82(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = DFA82_eot;
            this.eof = DFA82_eof;
            this.min = DFA82_min;
            this.max = DFA82_max;
            this.accept = DFA82_accept;
            this.special = DFA82_special;
            this.transition = DFA82_transition;
        }
        public String getDescription() {
            return "()* loopback of 178:165: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA82_16 = input.LA(1);

                         
                        int index82_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred267_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_16);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA82_17 = input.LA(1);

                         
                        int index82_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred267_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_17);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA82_18 = input.LA(1);

                         
                        int index82_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred267_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_18);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA82_19 = input.LA(1);

                         
                        int index82_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred267_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 82, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA92_static {
    static final String DFA92_eotS =
        "\17\uffff";
    static final String DFA92_eofS =
        "\17\uffff";
    static final String DFA92_minS =
        "\1\46\5\0\11\uffff";
    static final String DFA92_maxS =
        "\1\u0099\5\0\11\uffff";
    static final String DFA92_acceptS =
        "\6\uffff\1\3\6\uffff\1\1\1\2";
    static final String DFA92_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\11\uffff}>";
    static final String[] DFA92_transitionS = {
            "\1\4\2\6\4\uffff\1\6\33\uffff\1\3\12\uffff\1\6\60\uffff\1\5"+
            "\11\uffff\1\1\2\uffff\1\2\4\uffff\3\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA92_eot = DFA.unpackEncodedString(DFA92_static.DFA92_eotS);
    static final short[] DFA92_eof = DFA.unpackEncodedString(DFA92_static.DFA92_eofS);
    static final char[] DFA92_min = DFA.unpackEncodedStringToUnsignedChars(DFA92_static.DFA92_minS);
    static final char[] DFA92_max = DFA.unpackEncodedStringToUnsignedChars(DFA92_static.DFA92_maxS);
    static final short[] DFA92_accept = DFA.unpackEncodedString(DFA92_static.DFA92_acceptS);
    static final short[] DFA92_special = DFA.unpackEncodedString(DFA92_static.DFA92_specialS);
    static final short[][] DFA92_transition;

    static {
        int numStates = DFA92_static.DFA92_transitionS.length;
        DFA92_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA92_transition[i] = DFA.unpackEncodedString(DFA92_static.DFA92_transitionS[i]);
        }
    }

    class DFA92 extends DFA {

        public DFA92(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 92;
            this.eot = DFA92_eot;
            this.eof = DFA92_eof;
            this.min = DFA92_min;
            this.max = DFA92_max;
            this.accept = DFA92_accept;
            this.special = DFA92_special;
            this.transition = DFA92_transition;
        }
        public String getDescription() {
            return "187:18: ( moleculeamount3 | moleculeamount1 | moleculeamount2 )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA92_1 = input.LA(1);

                         
                        int index92_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred280_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index92_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA92_2 = input.LA(1);

                         
                        int index92_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred280_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index92_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA92_3 = input.LA(1);

                         
                        int index92_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred280_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index92_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA92_4 = input.LA(1);

                         
                        int index92_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred280_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index92_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA92_5 = input.LA(1);

                         
                        int index92_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred280_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index92_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 92, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA93_static {
    static final String DFA93_eotS =
        "\33\uffff";
    static final String DFA93_eofS =
        "\1\2\2\uffff\1\2\4\uffff\3\2\7\uffff\2\2\1\uffff\2\2\2\uffff\2"+
        "\2";
    static final String DFA93_minS =
        "\1\46\1\45\1\uffff\1\46\4\45\3\46\1\0\5\45\1\uffff\2\46\1\0\2\46"+
        "\2\45\2\46";
    static final String DFA93_maxS =
        "\1\u00b4\1\45\1\uffff\1\u00b4\4\45\3\u00b4\1\0\5\45\1\uffff\2\u00b4"+
        "\1\0\2\u00b4\2\45\2\u00b4";
    static final String DFA93_acceptS =
        "\2\uffff\1\2\16\uffff\1\1\11\uffff";
    static final String DFA93_specialS =
        "\13\uffff\1\1\10\uffff\1\0\6\uffff}>";
    static final String[] DFA93_transitionS = {
            "\11\2\1\1\u0085\2",
            "\1\3",
            "",
            "\7\2\1\6\21\2\1\7\123\2\1\4\3\2\1\5\35\2",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\7\2\1\15\21\2\1\16\127\2\1\14\35\2",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\1\uffff",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2",
            "\1\uffff",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\1\31",
            "\1\32",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2"
    };
    }

    static final short[] DFA93_eot = DFA.unpackEncodedString(DFA93_static.DFA93_eotS);
    static final short[] DFA93_eof = DFA.unpackEncodedString(DFA93_static.DFA93_eofS);
    static final char[] DFA93_min = DFA.unpackEncodedStringToUnsignedChars(DFA93_static.DFA93_minS);
    static final char[] DFA93_max = DFA.unpackEncodedStringToUnsignedChars(DFA93_static.DFA93_maxS);
    static final short[] DFA93_accept = DFA.unpackEncodedString(DFA93_static.DFA93_acceptS);
    static final short[] DFA93_special = DFA.unpackEncodedString(DFA93_static.DFA93_specialS);
    static final short[][] DFA93_transition;

    static {
        int numStates = DFA93_static.DFA93_transitionS.length;
        DFA93_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA93_transition[i] = DFA.unpackEncodedString(DFA93_static.DFA93_transitionS[i]);
        }
    }

    class DFA93 extends DFA {

        public DFA93(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 93;
            this.eot = DFA93_eot;
            this.eof = DFA93_eof;
            this.min = DFA93_min;
            this.max = DFA93_max;
            this.accept = DFA93_accept;
            this.special = DFA93_special;
            this.transition = DFA93_transition;
        }
        public String getDescription() {
            return "187:71: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA93_20 = input.LA(1);

                         
                        int index93_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index93_20);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA93_11 = input.LA(1);

                         
                        int index93_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index93_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 93, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA96_static {
    static final String DFA96_eotS =
        "\13\uffff";
    static final String DFA96_eofS =
        "\13\uffff";
    static final String DFA96_minS =
        "\1\47\1\uffff\1\0\10\uffff";
    static final String DFA96_maxS =
        "\1\u0099\1\uffff\1\0\10\uffff";
    static final String DFA96_acceptS =
        "\1\uffff\1\1\2\uffff\1\2\6\uffff";
    static final String DFA96_specialS =
        "\2\uffff\1\0\10\uffff}>";
    static final String[] DFA96_transitionS = {
            "\2\4\4\uffff\1\4\46\uffff\1\4\60\uffff\1\1\11\uffff\1\2\2\uffff"+
            "\1\1\4\uffff\3\4",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA96_eot = DFA.unpackEncodedString(DFA96_static.DFA96_eotS);
    static final short[] DFA96_eof = DFA.unpackEncodedString(DFA96_static.DFA96_eofS);
    static final char[] DFA96_min = DFA.unpackEncodedStringToUnsignedChars(DFA96_static.DFA96_minS);
    static final char[] DFA96_max = DFA.unpackEncodedStringToUnsignedChars(DFA96_static.DFA96_maxS);
    static final short[] DFA96_accept = DFA.unpackEncodedString(DFA96_static.DFA96_acceptS);
    static final short[] DFA96_special = DFA.unpackEncodedString(DFA96_static.DFA96_specialS);
    static final short[][] DFA96_transition;

    static {
        int numStates = DFA96_static.DFA96_transitionS.length;
        DFA96_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA96_transition[i] = DFA.unpackEncodedString(DFA96_static.DFA96_transitionS[i]);
        }
    }

    class DFA96 extends DFA {

        public DFA96(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 96;
            this.eot = DFA96_eot;
            this.eof = DFA96_eof;
            this.min = DFA96_min;
            this.max = DFA96_max;
            this.accept = DFA96_accept;
            this.special = DFA96_special;
            this.transition = DFA96_transition;
        }
        public String getDescription() {
            return "190:54: ( mixture )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA96_2 = input.LA(1);

                         
                        int index96_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_ChemicalChunker()) ) {s = 1;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index96_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 96, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA101_static {
    static final String DFA101_eotS =
        "\u0092\uffff";
    static final String DFA101_eofS =
        "\1\2\u0091\uffff";
    static final String DFA101_minS =
        "\1\46\1\0\13\uffff\6\0\1\uffff\1\0\175\uffff";
    static final String DFA101_maxS =
        "\1\u00b4\1\0\13\uffff\6\0\1\uffff\1\0\175\uffff";
    static final String DFA101_acceptS =
        "\2\uffff\1\2\u008e\uffff\1\1";
    static final String DFA101_specialS =
        "\1\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\uffff\1\7\175\uffff}>";
    static final String[] DFA101_transitionS = {
            "\1\2\1\20\1\22\4\2\1\21\46\2\1\24\72\2\1\1\7\2\1\15\1\16\1"+
            "\17\33\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA101_eot = DFA.unpackEncodedString(DFA101_static.DFA101_eotS);
    static final short[] DFA101_eof = DFA.unpackEncodedString(DFA101_static.DFA101_eofS);
    static final char[] DFA101_min = DFA.unpackEncodedStringToUnsignedChars(DFA101_static.DFA101_minS);
    static final char[] DFA101_max = DFA.unpackEncodedStringToUnsignedChars(DFA101_static.DFA101_maxS);
    static final short[] DFA101_accept = DFA.unpackEncodedString(DFA101_static.DFA101_acceptS);
    static final short[] DFA101_special = DFA.unpackEncodedString(DFA101_static.DFA101_specialS);
    static final short[][] DFA101_transition;

    static {
        int numStates = DFA101_static.DFA101_transitionS.length;
        DFA101_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA101_transition[i] = DFA.unpackEncodedString(DFA101_static.DFA101_transitionS[i]);
        }
    }

    class DFA101 extends DFA {

        public DFA101(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 101;
            this.eot = DFA101_eot;
            this.eof = DFA101_eof;
            this.min = DFA101_min;
            this.max = DFA101_max;
            this.accept = DFA101_accept;
            this.special = DFA101_special;
            this.transition = DFA101_transition;
        }
        public String getDescription() {
            return "()+ loopback of 193:60: ( oscarCompound )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA101_1 = input.LA(1);

                         
                        int index101_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA101_13 = input.LA(1);

                         
                        int index101_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_13);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA101_14 = input.LA(1);

                         
                        int index101_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_14);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA101_15 = input.LA(1);

                         
                        int index101_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_15);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA101_16 = input.LA(1);

                         
                        int index101_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_16);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA101_17 = input.LA(1);

                         
                        int index101_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_17);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA101_18 = input.LA(1);

                         
                        int index101_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_18);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA101_20 = input.LA(1);

                         
                        int index101_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 101, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA102_static {
    static final String DFA102_eotS =
        "\15\uffff";
    static final String DFA102_eofS =
        "\15\uffff";
    static final String DFA102_minS =
        "\1\46\7\uffff\2\0\3\uffff";
    static final String DFA102_maxS =
        "\1\u0099\7\uffff\2\0\3\uffff";
    static final String DFA102_acceptS =
        "\1\uffff\1\3\10\uffff\1\1\1\uffff\1\2";
    static final String DFA102_specialS =
        "\10\uffff\1\0\1\1\3\uffff}>";
    static final String[] DFA102_transitionS = {
            "\1\12\2\1\4\uffff\1\1\33\uffff\1\12\12\uffff\1\1\60\uffff\1"+
            "\14\11\uffff\1\10\2\uffff\1\11\4\uffff\3\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    }

    static final short[] DFA102_eot = DFA.unpackEncodedString(DFA102_static.DFA102_eotS);
    static final short[] DFA102_eof = DFA.unpackEncodedString(DFA102_static.DFA102_eofS);
    static final char[] DFA102_min = DFA.unpackEncodedStringToUnsignedChars(DFA102_static.DFA102_minS);
    static final char[] DFA102_max = DFA.unpackEncodedStringToUnsignedChars(DFA102_static.DFA102_maxS);
    static final short[] DFA102_accept = DFA.unpackEncodedString(DFA102_static.DFA102_acceptS);
    static final short[] DFA102_special = DFA.unpackEncodedString(DFA102_static.DFA102_specialS);
    static final short[][] DFA102_transition;

    static {
        int numStates = DFA102_static.DFA102_transitionS.length;
        DFA102_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA102_transition[i] = DFA.unpackEncodedString(DFA102_static.DFA102_transitionS[i]);
        }
    }

    class DFA102 extends DFA {

        public DFA102(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 102;
            this.eot = DFA102_eot;
            this.eof = DFA102_eof;
            this.min = DFA102_min;
            this.max = DFA102_max;
            this.accept = DFA102_accept;
            this.special = DFA102_special;
            this.transition = DFA102_transition;
        }
        public String getDescription() {
            return "()* loopback of 196:3: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA102_8 = input.LA(1);

                         
                        int index102_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred293_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred294_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index102_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA102_9 = input.LA(1);

                         
                        int index102_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred293_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred294_ChemicalChunker()) ) {s = 12;}

                         
                        input.seek(index102_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 102, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA103_static {
    static final String DFA103_eotS =
        "\13\uffff";
    static final String DFA103_eofS =
        "\1\2\12\uffff";
    static final String DFA103_minS =
        "\1\46\1\0\1\uffff\7\0\1\uffff";
    static final String DFA103_maxS =
        "\1\u00b4\1\0\1\uffff\7\0\1\uffff";
    static final String DFA103_acceptS =
        "\2\uffff\1\2\7\uffff\1\1";
    static final String DFA103_specialS =
        "\1\uffff\1\0\1\uffff\1\4\1\2\1\1\1\6\1\3\1\5\1\7\1\uffff}>";
    static final String[] DFA103_transitionS = {
            "\1\2\1\6\1\10\4\2\1\7\46\2\1\11\72\2\1\1\7\2\1\3\1\4\1\5\33"+
            "\2",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA103_eot = DFA.unpackEncodedString(DFA103_static.DFA103_eotS);
    static final short[] DFA103_eof = DFA.unpackEncodedString(DFA103_static.DFA103_eofS);
    static final char[] DFA103_min = DFA.unpackEncodedStringToUnsignedChars(DFA103_static.DFA103_minS);
    static final char[] DFA103_max = DFA.unpackEncodedStringToUnsignedChars(DFA103_static.DFA103_maxS);
    static final short[] DFA103_accept = DFA.unpackEncodedString(DFA103_static.DFA103_acceptS);
    static final short[] DFA103_special = DFA.unpackEncodedString(DFA103_static.DFA103_specialS);
    static final short[][] DFA103_transition;

    static {
        int numStates = DFA103_static.DFA103_transitionS.length;
        DFA103_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA103_transition[i] = DFA.unpackEncodedString(DFA103_static.DFA103_transitionS[i]);
        }
    }

    class DFA103 extends DFA {

        public DFA103(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 103;
            this.eot = DFA103_eot;
            this.eof = DFA103_eof;
            this.min = DFA103_min;
            this.max = DFA103_max;
            this.accept = DFA103_accept;
            this.special = DFA103_special;
            this.transition = DFA103_transition;
        }
        public String getDescription() {
            return "()+ loopback of 196:23: ( oscarCompound )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA103_1 = input.LA(1);

                         
                        int index103_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index103_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA103_5 = input.LA(1);

                         
                        int index103_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index103_5);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA103_4 = input.LA(1);

                         
                        int index103_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index103_4);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA103_7 = input.LA(1);

                         
                        int index103_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index103_7);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA103_3 = input.LA(1);

                         
                        int index103_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index103_3);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA103_8 = input.LA(1);

                         
                        int index103_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index103_8);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA103_6 = input.LA(1);

                         
                        int index103_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index103_6);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA103_9 = input.LA(1);

                         
                        int index103_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index103_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 103, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA105_static {
    static final String DFA105_eotS =
        "\u0095\uffff";
    static final String DFA105_eofS =
        "\1\1\u0094\uffff";
    static final String DFA105_minS =
        "\1\46\3\uffff\1\0\13\uffff\4\0\u0081\uffff";
    static final String DFA105_maxS =
        "\1\u00b4\3\uffff\1\0\13\uffff\4\0\u0081\uffff";
    static final String DFA105_acceptS =
        "\1\uffff\1\5\u008f\uffff\1\1\1\3\1\4\1\2";
    static final String DFA105_specialS =
        "\4\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\u0081\uffff}>";
    static final String[] DFA105_transitionS = {
            "\1\23\42\1\1\22\73\1\1\4\11\1\1\20\2\1\1\21\42\1",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA105_eot = DFA.unpackEncodedString(DFA105_static.DFA105_eotS);
    static final short[] DFA105_eof = DFA.unpackEncodedString(DFA105_static.DFA105_eofS);
    static final char[] DFA105_min = DFA.unpackEncodedStringToUnsignedChars(DFA105_static.DFA105_minS);
    static final char[] DFA105_max = DFA.unpackEncodedStringToUnsignedChars(DFA105_static.DFA105_maxS);
    static final short[] DFA105_accept = DFA.unpackEncodedString(DFA105_static.DFA105_acceptS);
    static final short[] DFA105_special = DFA.unpackEncodedString(DFA105_static.DFA105_specialS);
    static final short[][] DFA105_transition;

    static {
        int numStates = DFA105_static.DFA105_transitionS.length;
        DFA105_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA105_transition[i] = DFA.unpackEncodedString(DFA105_static.DFA105_transitionS[i]);
        }
    }

    class DFA105 extends DFA {

        public DFA105(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 105;
            this.eot = DFA105_eot;
            this.eof = DFA105_eof;
            this.min = DFA105_min;
            this.max = DFA105_max;
            this.accept = DFA105_accept;
            this.special = DFA105_special;
            this.transition = DFA105_transition;
        }
        public String getDescription() {
            return "()* loopback of 198:34: ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA105_4 = input.LA(1);

                         
                        int index105_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred296_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred299_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred300_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_4);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA105_16 = input.LA(1);

                         
                        int index105_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred296_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred297_ChemicalChunker()) ) {s = 148;}

                        else if ( (synpred300_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA105_17 = input.LA(1);

                         
                        int index105_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_ChemicalChunker()) ) {s = 148;}

                        else if ( (synpred300_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA105_18 = input.LA(1);

                         
                        int index105_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_ChemicalChunker()) ) {s = 148;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_18);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA105_19 = input.LA(1);

                         
                        int index105_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_ChemicalChunker()) ) {s = 148;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index105_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 105, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA104_static {
    static final String DFA104_eotS =
        "\11\uffff";
    static final String DFA104_eofS =
        "\11\uffff";
    static final String DFA104_minS =
        "\1\u008f\1\45\1\46\1\uffff\1\45\1\uffff\1\54\1\45\1\101";
    static final String DFA104_maxS =
        "\1\u008f\1\45\1\u009e\1\uffff\1\45\1\uffff\1\u009e\1\45\1\u009e";
    static final String DFA104_acceptS =
        "\3\uffff\1\2\1\uffff\1\1\3\uffff";
    static final String DFA104_specialS =
        "\11\uffff}>";
    static final String[] DFA104_transitionS = {
            "\1\1",
            "\1\2",
            "\1\5\42\uffff\1\5\73\uffff\1\3\13\uffff\1\3\1\4\2\uffff\1"+
            "\3\10\uffff\1\3",
            "",
            "\1\6",
            "",
            "\1\5\24\uffff\3\5\1\uffff\2\5\76\uffff\1\3\4\uffff\1\5\6\uffff"+
            "\1\3\1\7\2\uffff\1\3\6\uffff\1\5\1\uffff\1\3",
            "\1\10",
            "\3\5\1\uffff\2\5\76\uffff\1\3\12\uffff\2\3\1\7\2\uffff\1\3"+
            "\10\uffff\1\3"
    };
    }

    static final short[] DFA104_eot = DFA.unpackEncodedString(DFA104_static.DFA104_eotS);
    static final short[] DFA104_eof = DFA.unpackEncodedString(DFA104_static.DFA104_eofS);
    static final char[] DFA104_min = DFA.unpackEncodedStringToUnsignedChars(DFA104_static.DFA104_minS);
    static final char[] DFA104_max = DFA.unpackEncodedStringToUnsignedChars(DFA104_static.DFA104_maxS);
    static final short[] DFA104_accept = DFA.unpackEncodedString(DFA104_static.DFA104_acceptS);
    static final short[] DFA104_special = DFA.unpackEncodedString(DFA104_static.DFA104_specialS);
    static final short[][] DFA104_transition;

    static {
        int numStates = DFA104_static.DFA104_transitionS.length;
        DFA104_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA104_transition[i] = DFA.unpackEncodedString(DFA104_static.DFA104_transitionS[i]);
        }
    }

    class DFA104 extends DFA {

        public DFA104(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = DFA104_eot;
            this.eof = DFA104_eof;
            this.min = DFA104_min;
            this.max = DFA104_max;
            this.accept = DFA104_accept;
            this.special = DFA104_special;
            this.transition = DFA104_transition;
        }
        public String getDescription() {
            return "198:59: ( quantity1Node | citationStructure )";
        }
    }
    static class DFA106_static {
    static final String DFA106_eotS =
        "\33\uffff";
    static final String DFA106_eofS =
        "\1\2\2\uffff\1\2\4\uffff\3\2\7\uffff\2\2\1\uffff\2\2\2\uffff\2"+
        "\2";
    static final String DFA106_minS =
        "\1\46\1\45\1\uffff\1\46\4\45\3\46\1\0\5\45\1\uffff\2\46\1\0\2\46"+
        "\2\45\2\46";
    static final String DFA106_maxS =
        "\1\u00b4\1\45\1\uffff\1\u00b4\4\45\3\u00b4\1\0\5\45\1\uffff\2\u00b4"+
        "\1\0\2\u00b4\2\45\2\u00b4";
    static final String DFA106_acceptS =
        "\2\uffff\1\2\16\uffff\1\1\11\uffff";
    static final String DFA106_specialS =
        "\13\uffff\1\0\10\uffff\1\1\6\uffff}>";
    static final String[] DFA106_transitionS = {
            "\11\2\1\1\u0085\2",
            "\1\3",
            "",
            "\7\2\1\6\21\2\1\7\123\2\1\4\3\2\1\5\35\2",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\7\2\1\15\21\2\1\16\127\2\1\14\35\2",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\1\uffff",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2",
            "\1\uffff",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\1\31",
            "\1\32",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2"
    };
    }

    static final short[] DFA106_eot = DFA.unpackEncodedString(DFA106_static.DFA106_eotS);
    static final short[] DFA106_eof = DFA.unpackEncodedString(DFA106_static.DFA106_eofS);
    static final char[] DFA106_min = DFA.unpackEncodedStringToUnsignedChars(DFA106_static.DFA106_minS);
    static final char[] DFA106_max = DFA.unpackEncodedStringToUnsignedChars(DFA106_static.DFA106_maxS);
    static final short[] DFA106_accept = DFA.unpackEncodedString(DFA106_static.DFA106_acceptS);
    static final short[] DFA106_special = DFA.unpackEncodedString(DFA106_static.DFA106_specialS);
    static final short[][] DFA106_transition;

    static {
        int numStates = DFA106_static.DFA106_transitionS.length;
        DFA106_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA106_transition[i] = DFA.unpackEncodedString(DFA106_static.DFA106_transitionS[i]);
        }
    }

    class DFA106 extends DFA {

        public DFA106(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 106;
            this.eot = DFA106_eot;
            this.eof = DFA106_eof;
            this.min = DFA106_min;
            this.max = DFA106_max;
            this.accept = DFA106_accept;
            this.special = DFA106_special;
            this.transition = DFA106_transition;
        }
        public String getDescription() {
            return "201:31: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA106_11 = input.LA(1);

                         
                        int index106_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred301_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index106_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA106_20 = input.LA(1);

                         
                        int index106_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred301_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index106_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 106, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA109_static {
    static final String DFA109_eotS =
        "\15\uffff";
    static final String DFA109_eofS =
        "\15\uffff";
    static final String DFA109_minS =
        "\1\46\4\0\1\uffff\2\0\5\uffff";
    static final String DFA109_maxS =
        "\1\u0092\4\0\1\uffff\2\0\5\uffff";
    static final String DFA109_acceptS =
        "\5\uffff\1\2\2\uffff\1\5\1\6\1\1\1\3\1\4";
    static final String DFA109_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\uffff\1\4\1\5\5\uffff}>";
    static final String[] DFA109_transitionS = {
            "\1\4\7\uffff\1\5\30\uffff\1\11\1\uffff\1\3\73\uffff\1\10\5"+
            "\uffff\1\6\1\uffff\1\7\1\uffff\1\1\2\uffff\1\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA109_eot = DFA.unpackEncodedString(DFA109_static.DFA109_eotS);
    static final short[] DFA109_eof = DFA.unpackEncodedString(DFA109_static.DFA109_eofS);
    static final char[] DFA109_min = DFA.unpackEncodedStringToUnsignedChars(DFA109_static.DFA109_minS);
    static final char[] DFA109_max = DFA.unpackEncodedStringToUnsignedChars(DFA109_static.DFA109_maxS);
    static final short[] DFA109_accept = DFA.unpackEncodedString(DFA109_static.DFA109_acceptS);
    static final short[] DFA109_special = DFA.unpackEncodedString(DFA109_static.DFA109_specialS);
    static final short[][] DFA109_transition;

    static {
        int numStates = DFA109_static.DFA109_transitionS.length;
        DFA109_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA109_transition[i] = DFA.unpackEncodedString(DFA109_static.DFA109_transitionS[i]);
        }
    }

    class DFA109 extends DFA {

        public DFA109(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 109;
            this.eot = DFA109_eot;
            this.eof = DFA109_eof;
            this.min = DFA109_min;
            this.max = DFA109_max;
            this.accept = DFA109_accept;
            this.special = DFA109_special;
            this.transition = DFA109_transition;
        }
        public String getDescription() {
            return "204:3: ( quantity inof ( unnamedmoleculeamount1 | unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )? ) | unnamedmoleculeamount3 | unnamedmoleculeamount4 | unnamedmoleculeamount5 | unnamedmoleculeamount6 | referenceToCompound )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA109_1 = input.LA(1);

                         
                        int index109_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 11;}

                        else if ( (synpred308_ChemicalChunker()) ) {s = 8;}

                        else if ( ((numberLooksLikeAReferenceToACompound(input))) ) {s = 9;}

                         
                        input.seek(index109_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA109_2 = input.LA(1);

                         
                        int index109_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 11;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 12;}

                        else if ( (synpred308_ChemicalChunker()) ) {s = 8;}

                        else if ( ((numberLooksLikeAReferenceToACompound(input))) ) {s = 9;}

                         
                        input.seek(index109_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA109_3 = input.LA(1);

                         
                        int index109_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred308_ChemicalChunker()) ) {s = 8;}

                         
                        input.seek(index109_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA109_4 = input.LA(1);

                         
                        int index109_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 11;}

                        else if ( (synpred308_ChemicalChunker()) ) {s = 8;}

                        else if ( ((numberLooksLikeAReferenceToACompound(input))) ) {s = 9;}

                         
                        input.seek(index109_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA109_6 = input.LA(1);

                         
                        int index109_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 11;}

                        else if ( ((numberLooksLikeAReferenceToACompound(input))) ) {s = 9;}

                         
                        input.seek(index109_6);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA109_7 = input.LA(1);

                         
                        int index109_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 11;}

                        else if ( ((numberLooksLikeAReferenceToACompound(input))) ) {s = 9;}

                         
                        input.seek(index109_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 109, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA107_static {
    static final String DFA107_eotS =
        "\u0093\uffff";
    static final String DFA107_eofS =
        "\1\116\u0092\uffff";
    static final String DFA107_minS =
        "\1\46\u0090\0\2\uffff";
    static final String DFA107_maxS =
        "\1\u00b4\u0090\0\2\uffff";
    static final String DFA107_acceptS =
        "\u0091\uffff\1\1\1\2";
    static final String DFA107_specialS =
        "\1\uffff\1\26\1\16\1\33\1\15\1\167\1\13\1\45\1\u008e\1\40\1\106"+
        "\1\5\1\155\1\17\1\u008d\1\146\1\170\1\112\1\64\1\62\1\41\1\101\1"+
        "\173\1\72\1\32\1\63\1\175\1\u008a\1\75\1\166\1\71\1\105\1\u0081"+
        "\1\103\1\44\1\u008b\1\36\1\140\1\122\1\51\1\165\1\141\1\154\1\110"+
        "\1\u0089\1\132\1\43\1\152\1\56\1\160\1\46\1\144\1\23\1\117\1\65"+
        "\1\7\1\70\1\14\1\27\1\20\1\107\1\133\1\125\1\162\1\10\1\4\1\142"+
        "\1\161\1\61\1\121\1\0\1\147\1\151\1\1\1\143\1\150\1\21\1\66\1\u008c"+
        "\1\u0087\1\11\1\104\1\53\1\153\1\35\1\47\1\u008f\1\42\1\177\1\116"+
        "\1\126\1\120\1\37\1\136\1\u0086\1\127\1\12\1\u0082\1\124\1\67\1"+
        "\50\1\172\1\157\1\57\1\176\1\164\1\114\1\115\1\60\1\156\1\6\1\25"+
        "\1\102\1\134\1\u0088\1\31\1\135\1\24\1\131\1\u0085\1\100\1\u0084"+
        "\1\73\1\22\1\145\1\74\1\u0080\1\77\1\30\1\u0083\1\76\1\171\1\123"+
        "\1\137\1\34\1\2\1\174\1\113\1\130\1\54\1\55\1\111\1\163\1\3\1\52"+
        "\2\uffff}>";
    static final String[] DFA107_transitionS = {
            "\1\5\1\22\1\24\1\111\1\47\1\52\1\u0088\1\23\1\27\1\10\1\123"+
            "\1\122\1\11\1\127\1\135\1\136\1\124\1\134\1\112\1\131\1\125"+
            "\1\126\1\133\1\132\1\130\1\36\1\50\1\u0089\1\55\1\u008a\1\51"+
            "\1\56\1\65\1\30\1\53\1\6\1\54\1\42\1\43\1\34\1\57\1\60\1\61"+
            "\1\62\1\63\1\44\1\26\1\146\1\u0086\1\147\1\152\1\35\1\70\1\154"+
            "\1\153\1\155\1\156\1\157\1\160\1\161\1\162\1\163\1\40\1\164"+
            "\1\64\1\165\1\151\1\166\1\167\1\71\1\170\1\72\1\171\1\73\1\172"+
            "\1\173\1\150\1\174\1\175\1\74\1\176\1\66\1\177\1\u0080\1\u0081"+
            "\1\75\1\u0082\1\46\1\67\1\u0083\1\u0084\1\u0085\1\41\1\114\1"+
            "\113\1\7\1\u008b\1\u0087\1\u008c\1\115\1\u008d\1\1\1\u008e\1"+
            "\3\1\117\1\4\1\u008f\1\12\1\2\1\33\1\103\1\76\1\121\1\17\1\20"+
            "\1\21\1\106\1\137\1\37\1\45\1\25\1\107\1\104\1\110\1\31\1\32"+
            "\1\13\1\14\1\16\1\15\1\77\1\120\1\u0090\1\140\1\143\1\142\1"+
            "\145\1\141\1\144\1\100\1\105\1\101\1\102",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA107_eot = DFA.unpackEncodedString(DFA107_static.DFA107_eotS);
    static final short[] DFA107_eof = DFA.unpackEncodedString(DFA107_static.DFA107_eofS);
    static final char[] DFA107_min = DFA.unpackEncodedStringToUnsignedChars(DFA107_static.DFA107_minS);
    static final char[] DFA107_max = DFA.unpackEncodedStringToUnsignedChars(DFA107_static.DFA107_maxS);
    static final short[] DFA107_accept = DFA.unpackEncodedString(DFA107_static.DFA107_acceptS);
    static final short[] DFA107_special = DFA.unpackEncodedString(DFA107_static.DFA107_specialS);
    static final short[][] DFA107_transition;

    static {
        int numStates = DFA107_static.DFA107_transitionS.length;
        DFA107_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA107_transition[i] = DFA.unpackEncodedString(DFA107_static.DFA107_transitionS[i]);
        }
    }

    class DFA107 extends DFA {

        public DFA107(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 107;
            this.eot = DFA107_eot;
            this.eof = DFA107_eof;
            this.min = DFA107_min;
            this.max = DFA107_max;
            this.accept = DFA107_accept;
            this.special = DFA107_special;
            this.transition = DFA107_transition;
        }
        public String getDescription() {
            return "204:65: ( optionalUnnamedMoleculeEnding )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA107_70 = input.LA(1);

                         
                        int index107_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_70);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA107_73 = input.LA(1);

                         
                        int index107_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_73);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA107_135 = input.LA(1);

                         
                        int index107_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_135);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA107_143 = input.LA(1);

                         
                        int index107_143 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_143);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA107_65 = input.LA(1);

                         
                        int index107_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_65);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA107_11 = input.LA(1);

                         
                        int index107_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_11);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA107_110 = input.LA(1);

                         
                        int index107_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_110);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA107_55 = input.LA(1);

                         
                        int index107_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_55);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA107_64 = input.LA(1);

                         
                        int index107_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_64);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA107_80 = input.LA(1);

                         
                        int index107_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_80);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA107_96 = input.LA(1);

                         
                        int index107_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_96);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA107_6 = input.LA(1);

                         
                        int index107_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_6);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA107_57 = input.LA(1);

                         
                        int index107_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_57);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA107_4 = input.LA(1);

                         
                        int index107_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred303_ChemicalChunker()||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_4);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA107_2 = input.LA(1);

                         
                        int index107_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred303_ChemicalChunker()||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_2);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA107_13 = input.LA(1);

                         
                        int index107_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_13);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA107_59 = input.LA(1);

                         
                        int index107_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_59);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA107_76 = input.LA(1);

                         
                        int index107_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_76);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA107_123 = input.LA(1);

                         
                        int index107_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_123);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA107_52 = input.LA(1);

                         
                        int index107_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_52);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA107_117 = input.LA(1);

                         
                        int index107_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_117);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA107_111 = input.LA(1);

                         
                        int index107_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_111);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA107_1 = input.LA(1);

                         
                        int index107_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred303_ChemicalChunker()||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_1);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA107_58 = input.LA(1);

                         
                        int index107_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_58);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA107_128 = input.LA(1);

                         
                        int index107_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_128);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA107_115 = input.LA(1);

                         
                        int index107_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_115);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA107_24 = input.LA(1);

                         
                        int index107_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_24);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA107_3 = input.LA(1);

                         
                        int index107_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred303_ChemicalChunker()||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_3);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA107_134 = input.LA(1);

                         
                        int index107_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_134);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA107_84 = input.LA(1);

                         
                        int index107_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_84);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA107_36 = input.LA(1);

                         
                        int index107_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_36);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA107_92 = input.LA(1);

                         
                        int index107_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_92);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA107_9 = input.LA(1);

                         
                        int index107_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_9);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA107_20 = input.LA(1);

                         
                        int index107_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_20);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA107_87 = input.LA(1);

                         
                        int index107_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_87);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA107_46 = input.LA(1);

                         
                        int index107_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_46);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA107_34 = input.LA(1);

                         
                        int index107_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_34);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA107_7 = input.LA(1);

                         
                        int index107_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_7);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA107_50 = input.LA(1);

                         
                        int index107_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_50);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA107_85 = input.LA(1);

                         
                        int index107_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_85);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA107_100 = input.LA(1);

                         
                        int index107_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_100);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA107_39 = input.LA(1);

                         
                        int index107_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_39);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA107_144 = input.LA(1);

                         
                        int index107_144 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_144);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA107_82 = input.LA(1);

                         
                        int index107_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_82);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA107_139 = input.LA(1);

                         
                        int index107_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_139);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA107_140 = input.LA(1);

                         
                        int index107_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_140);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA107_48 = input.LA(1);

                         
                        int index107_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_48);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA107_103 = input.LA(1);

                         
                        int index107_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_103);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA107_108 = input.LA(1);

                         
                        int index107_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_108);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA107_68 = input.LA(1);

                         
                        int index107_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_68);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA107_19 = input.LA(1);

                         
                        int index107_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_19);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA107_25 = input.LA(1);

                         
                        int index107_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_25);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA107_18 = input.LA(1);

                         
                        int index107_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_18);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA107_54 = input.LA(1);

                         
                        int index107_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_54);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA107_77 = input.LA(1);

                         
                        int index107_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_77);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA107_99 = input.LA(1);

                         
                        int index107_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_99);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA107_56 = input.LA(1);

                         
                        int index107_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_56);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA107_30 = input.LA(1);

                         
                        int index107_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_30);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA107_23 = input.LA(1);

                         
                        int index107_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_23);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA107_122 = input.LA(1);

                         
                        int index107_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_122);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA107_125 = input.LA(1);

                         
                        int index107_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_125);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA107_28 = input.LA(1);

                         
                        int index107_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_28);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA107_130 = input.LA(1);

                         
                        int index107_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_130);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA107_127 = input.LA(1);

                         
                        int index107_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_127);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA107_120 = input.LA(1);

                         
                        int index107_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_120);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA107_21 = input.LA(1);

                         
                        int index107_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_21);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA107_112 = input.LA(1);

                         
                        int index107_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_112);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA107_33 = input.LA(1);

                         
                        int index107_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_33);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA107_81 = input.LA(1);

                         
                        int index107_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_81);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA107_31 = input.LA(1);

                         
                        int index107_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_31);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA107_10 = input.LA(1);

                         
                        int index107_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_10);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA107_60 = input.LA(1);

                         
                        int index107_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_60);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA107_43 = input.LA(1);

                         
                        int index107_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_43);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA107_141 = input.LA(1);

                         
                        int index107_141 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_141);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA107_17 = input.LA(1);

                         
                        int index107_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_17);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA107_137 = input.LA(1);

                         
                        int index107_137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_137);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA107_106 = input.LA(1);

                         
                        int index107_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_106);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA107_107 = input.LA(1);

                         
                        int index107_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_107);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA107_89 = input.LA(1);

                         
                        int index107_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_89);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA107_53 = input.LA(1);

                         
                        int index107_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_53);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA107_91 = input.LA(1);

                         
                        int index107_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_91);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA107_69 = input.LA(1);

                         
                        int index107_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_69);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA107_38 = input.LA(1);

                         
                        int index107_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_38);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA107_132 = input.LA(1);

                         
                        int index107_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_132);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA107_98 = input.LA(1);

                         
                        int index107_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_98);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA107_62 = input.LA(1);

                         
                        int index107_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_62);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA107_90 = input.LA(1);

                         
                        int index107_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_90);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA107_95 = input.LA(1);

                         
                        int index107_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_95);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA107_138 = input.LA(1);

                         
                        int index107_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_138);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA107_118 = input.LA(1);

                         
                        int index107_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_118);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA107_45 = input.LA(1);

                         
                        int index107_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_45);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA107_61 = input.LA(1);

                         
                        int index107_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_61);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA107_113 = input.LA(1);

                         
                        int index107_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_113);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA107_116 = input.LA(1);

                         
                        int index107_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_116);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA107_93 = input.LA(1);

                         
                        int index107_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_93);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA107_133 = input.LA(1);

                         
                        int index107_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_133);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA107_37 = input.LA(1);

                         
                        int index107_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_37);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA107_41 = input.LA(1);

                         
                        int index107_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_41);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA107_66 = input.LA(1);

                         
                        int index107_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_66);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA107_74 = input.LA(1);

                         
                        int index107_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_74);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA107_51 = input.LA(1);

                         
                        int index107_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_51);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA107_124 = input.LA(1);

                         
                        int index107_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_124);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA107_15 = input.LA(1);

                         
                        int index107_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_15);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA107_71 = input.LA(1);

                         
                        int index107_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_71);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA107_75 = input.LA(1);

                         
                        int index107_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_75);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA107_72 = input.LA(1);

                         
                        int index107_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_72);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA107_47 = input.LA(1);

                         
                        int index107_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_47);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA107_83 = input.LA(1);

                         
                        int index107_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_83);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA107_42 = input.LA(1);

                         
                        int index107_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_42);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA107_12 = input.LA(1);

                         
                        int index107_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_12);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA107_109 = input.LA(1);

                         
                        int index107_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_109);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA107_102 = input.LA(1);

                         
                        int index107_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_102);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA107_49 = input.LA(1);

                         
                        int index107_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_49);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA107_67 = input.LA(1);

                         
                        int index107_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_67);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA107_63 = input.LA(1);

                         
                        int index107_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_63);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA107_142 = input.LA(1);

                         
                        int index107_142 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_142);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA107_105 = input.LA(1);

                         
                        int index107_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_105);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA107_40 = input.LA(1);

                         
                        int index107_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_40);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA107_29 = input.LA(1);

                         
                        int index107_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_29);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA107_5 = input.LA(1);

                         
                        int index107_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred303_ChemicalChunker()||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred303_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_5);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA107_16 = input.LA(1);

                         
                        int index107_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_16);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA107_131 = input.LA(1);

                         
                        int index107_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_131);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA107_101 = input.LA(1);

                         
                        int index107_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_101);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA107_22 = input.LA(1);

                         
                        int index107_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_22);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA107_136 = input.LA(1);

                         
                        int index107_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_136);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA107_26 = input.LA(1);

                         
                        int index107_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_26);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA107_104 = input.LA(1);

                         
                        int index107_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_104);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA107_88 = input.LA(1);

                         
                        int index107_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_88);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA107_126 = input.LA(1);

                         
                        int index107_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_126);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA107_32 = input.LA(1);

                         
                        int index107_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_32);
                        if ( s>=0 ) return s;
                        break;

                    case 130 : 
                        int LA107_97 = input.LA(1);

                         
                        int index107_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_97);
                        if ( s>=0 ) return s;
                        break;

                    case 131 : 
                        int LA107_129 = input.LA(1);

                         
                        int index107_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_129);
                        if ( s>=0 ) return s;
                        break;

                    case 132 : 
                        int LA107_121 = input.LA(1);

                         
                        int index107_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_121);
                        if ( s>=0 ) return s;
                        break;

                    case 133 : 
                        int LA107_119 = input.LA(1);

                         
                        int index107_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_119);
                        if ( s>=0 ) return s;
                        break;

                    case 134 : 
                        int LA107_94 = input.LA(1);

                         
                        int index107_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_94);
                        if ( s>=0 ) return s;
                        break;

                    case 135 : 
                        int LA107_79 = input.LA(1);

                         
                        int index107_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_79);
                        if ( s>=0 ) return s;
                        break;

                    case 136 : 
                        int LA107_114 = input.LA(1);

                         
                        int index107_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_114);
                        if ( s>=0 ) return s;
                        break;

                    case 137 : 
                        int LA107_44 = input.LA(1);

                         
                        int index107_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_44);
                        if ( s>=0 ) return s;
                        break;

                    case 138 : 
                        int LA107_27 = input.LA(1);

                         
                        int index107_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_27);
                        if ( s>=0 ) return s;
                        break;

                    case 139 : 
                        int LA107_35 = input.LA(1);

                         
                        int index107_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_35);
                        if ( s>=0 ) return s;
                        break;

                    case 140 : 
                        int LA107_78 = input.LA(1);

                         
                        int index107_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_78);
                        if ( s>=0 ) return s;
                        break;

                    case 141 : 
                        int LA107_14 = input.LA(1);

                         
                        int index107_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_14);
                        if ( s>=0 ) return s;
                        break;

                    case 142 : 
                        int LA107_8 = input.LA(1);

                         
                        int index107_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_8);
                        if ( s>=0 ) return s;
                        break;

                    case 143 : 
                        int LA107_86 = input.LA(1);

                         
                        int index107_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index107_86);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 107, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA110_static {
    static final String DFA110_eotS =
        "\u0093\uffff";
    static final String DFA110_eofS =
        "\1\1\u0092\uffff";
    static final String DFA110_minS =
        "\1\46\3\uffff\1\0\13\uffff\4\0\177\uffff";
    static final String DFA110_maxS =
        "\1\u00b4\3\uffff\1\0\13\uffff\4\0\177\uffff";
    static final String DFA110_acceptS =
        "\1\uffff\1\3\u008f\uffff\1\2\1\1";
    static final String DFA110_specialS =
        "\4\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\177\uffff}>";
    static final String[] DFA110_transitionS = {
            "\1\23\42\1\1\22\73\1\1\4\11\1\1\20\2\1\1\21\42\1",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA110_eot = DFA.unpackEncodedString(DFA110_static.DFA110_eotS);
    static final short[] DFA110_eof = DFA.unpackEncodedString(DFA110_static.DFA110_eofS);
    static final char[] DFA110_min = DFA.unpackEncodedStringToUnsignedChars(DFA110_static.DFA110_minS);
    static final char[] DFA110_max = DFA.unpackEncodedStringToUnsignedChars(DFA110_static.DFA110_maxS);
    static final short[] DFA110_accept = DFA.unpackEncodedString(DFA110_static.DFA110_acceptS);
    static final short[] DFA110_special = DFA.unpackEncodedString(DFA110_static.DFA110_specialS);
    static final short[][] DFA110_transition;

    static {
        int numStates = DFA110_static.DFA110_transitionS.length;
        DFA110_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA110_transition[i] = DFA.unpackEncodedString(DFA110_static.DFA110_transitionS[i]);
        }
    }

    class DFA110 extends DFA {

        public DFA110(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 110;
            this.eot = DFA110_eot;
            this.eof = DFA110_eof;
            this.min = DFA110_min;
            this.max = DFA110_max;
            this.accept = DFA110_accept;
            this.special = DFA110_special;
            this.transition = DFA110_transition;
        }
        public String getDescription() {
            return "()* loopback of 207:42: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA110_4 = input.LA(1);

                         
                        int index110_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index110_4);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA110_16 = input.LA(1);

                         
                        int index110_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred309_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred310_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index110_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA110_17 = input.LA(1);

                         
                        int index110_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred309_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred310_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index110_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA110_18 = input.LA(1);

                         
                        int index110_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred309_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index110_18);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA110_19 = input.LA(1);

                         
                        int index110_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred309_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index110_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 110, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA113_static {
    static final String DFA113_eotS =
        "\17\uffff";
    static final String DFA113_eofS =
        "\17\uffff";
    static final String DFA113_minS =
        "\1\51\4\uffff\1\0\11\uffff";
    static final String DFA113_maxS =
        "\1\u009f\4\uffff\1\0\11\uffff";
    static final String DFA113_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\uffff\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\5\1\6";
    static final String DFA113_specialS =
        "\5\uffff\1\0\11\uffff}>";
    static final String[] DFA113_transitionS = {
            "\1\14\1\6\24\uffff\1\1\4\uffff\1\7\2\uffff\1\10\13\uffff\1"+
            "\5\6\uffff\1\11\72\uffff\1\12\6\uffff\1\2\1\3\1\4\1\13",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA113_eot = DFA.unpackEncodedString(DFA113_static.DFA113_eotS);
    static final short[] DFA113_eof = DFA.unpackEncodedString(DFA113_static.DFA113_eofS);
    static final char[] DFA113_min = DFA.unpackEncodedStringToUnsignedChars(DFA113_static.DFA113_minS);
    static final char[] DFA113_max = DFA.unpackEncodedStringToUnsignedChars(DFA113_static.DFA113_maxS);
    static final short[] DFA113_accept = DFA.unpackEncodedString(DFA113_static.DFA113_acceptS);
    static final short[] DFA113_special = DFA.unpackEncodedString(DFA113_static.DFA113_specialS);
    static final short[][] DFA113_transition;

    static {
        int numStates = DFA113_static.DFA113_transitionS.length;
        DFA113_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA113_transition[i] = DFA.unpackEncodedString(DFA113_static.DFA113_transitionS[i]);
        }
    }

    class DFA113 extends DFA {

        public DFA113(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 113;
            this.eot = DFA113_eot;
            this.eof = DFA113_eof;
            this.min = DFA113_min;
            this.max = DFA113_max;
            this.accept = DFA113_accept;
            this.special = DFA113_special;
            this.transition = DFA113_transition;
        }
        public String getDescription() {
            return "210:38: ( nnstate | nn | nns | nnp | referenceToExampleCompound | nnexample | oscaronts | nnatmosphere | nnchementity | nnmixture | fw | nnps | oscarase )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA113_5 = input.LA(1);

                         
                        int index113_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred320_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred321_ChemicalChunker()) ) {s = 14;}

                         
                        input.seek(index113_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 113, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA114_static {
    static final String DFA114_eotS =
        "\u0093\uffff";
    static final String DFA114_eofS =
        "\1\116\u0092\uffff";
    static final String DFA114_minS =
        "\1\46\u0090\0\2\uffff";
    static final String DFA114_maxS =
        "\1\u00b4\u0090\0\2\uffff";
    static final String DFA114_acceptS =
        "\u0091\uffff\1\1\1\2";
    static final String DFA114_specialS =
        "\1\uffff\1\26\1\16\1\33\1\15\1\170\1\13\1\46\1\u008e\1\41\1\107"+
        "\1\5\1\156\1\17\1\u008d\1\147\1\171\1\113\1\65\1\63\1\42\1\102\1"+
        "\174\1\73\1\32\1\64\1\176\1\u008b\1\76\1\167\1\72\1\106\1\u0082"+
        "\1\104\1\45\1\u008c\1\37\1\141\1\123\1\52\1\166\1\142\1\155\1\111"+
        "\1\u008a\1\133\1\44\1\153\1\57\1\161\1\47\1\145\1\23\1\120\1\66"+
        "\1\7\1\71\1\14\1\27\1\20\1\110\1\134\1\126\1\163\1\10\1\4\1\143"+
        "\1\162\1\62\1\122\1\0\1\150\1\152\1\1\1\144\1\151\1\21\1\67\1\34"+
        "\1\u0088\1\11\1\105\1\54\1\154\1\36\1\50\1\u008f\1\43\1\u0080\1"+
        "\117\1\127\1\121\1\40\1\137\1\u0087\1\130\1\12\1\u0083\1\125\1\70"+
        "\1\51\1\173\1\160\1\60\1\177\1\165\1\115\1\116\1\61\1\157\1\6\1"+
        "\25\1\103\1\135\1\u0089\1\31\1\136\1\24\1\132\1\u0086\1\101\1\u0085"+
        "\1\74\1\22\1\146\1\75\1\u0081\1\100\1\30\1\u0084\1\77\1\172\1\124"+
        "\1\140\1\35\1\2\1\175\1\114\1\131\1\55\1\56\1\112\1\164\1\3\1\53"+
        "\2\uffff}>";
    static final String[] DFA114_transitionS = {
            "\1\5\1\22\1\24\1\111\1\47\1\52\1\u0088\1\23\1\27\1\10\1\123"+
            "\1\122\1\11\1\127\1\135\1\136\1\124\1\134\1\112\1\131\1\125"+
            "\1\126\1\133\1\132\1\130\1\36\1\50\1\u0089\1\55\1\u008a\1\51"+
            "\1\56\1\65\1\30\1\53\1\6\1\54\1\42\1\43\1\34\1\57\1\60\1\61"+
            "\1\62\1\63\1\44\1\26\1\146\1\u0086\1\147\1\152\1\35\1\70\1\154"+
            "\1\153\1\155\1\156\1\157\1\160\1\161\1\162\1\163\1\40\1\164"+
            "\1\64\1\165\1\151\1\166\1\167\1\71\1\170\1\72\1\171\1\73\1\172"+
            "\1\173\1\150\1\174\1\175\1\74\1\176\1\66\1\177\1\u0080\1\u0081"+
            "\1\75\1\u0082\1\46\1\67\1\u0083\1\u0084\1\u0085\1\41\1\114\1"+
            "\113\1\7\1\u008b\1\u0087\1\u008c\1\115\1\u008d\1\1\1\u008e\1"+
            "\3\1\117\1\4\1\u008f\1\12\1\2\1\33\1\103\1\76\1\121\1\17\1\20"+
            "\1\21\1\106\1\137\1\37\1\45\1\25\1\107\1\104\1\110\1\31\1\32"+
            "\1\13\1\14\1\16\1\15\1\77\1\120\1\u0090\1\140\1\143\1\142\1"+
            "\145\1\141\1\144\1\100\1\105\1\101\1\102",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA114_eot = DFA.unpackEncodedString(DFA114_static.DFA114_eotS);
    static final short[] DFA114_eof = DFA.unpackEncodedString(DFA114_static.DFA114_eofS);
    static final char[] DFA114_min = DFA.unpackEncodedStringToUnsignedChars(DFA114_static.DFA114_minS);
    static final char[] DFA114_max = DFA.unpackEncodedStringToUnsignedChars(DFA114_static.DFA114_maxS);
    static final short[] DFA114_accept = DFA.unpackEncodedString(DFA114_static.DFA114_acceptS);
    static final short[] DFA114_special = DFA.unpackEncodedString(DFA114_static.DFA114_specialS);
    static final short[][] DFA114_transition;

    static {
        int numStates = DFA114_static.DFA114_transitionS.length;
        DFA114_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA114_transition[i] = DFA.unpackEncodedString(DFA114_static.DFA114_transitionS[i]);
        }
    }

    class DFA114 extends DFA {

        public DFA114(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 114;
            this.eot = DFA114_eot;
            this.eof = DFA114_eof;
            this.min = DFA114_min;
            this.max = DFA114_max;
            this.accept = DFA114_accept;
            this.special = DFA114_special;
            this.transition = DFA114_transition;
        }
        public String getDescription() {
            return "213:24: ( optionalUnnamedMoleculeEnding )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA114_70 = input.LA(1);

                         
                        int index114_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_70);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA114_73 = input.LA(1);

                         
                        int index114_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_73);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA114_135 = input.LA(1);

                         
                        int index114_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_135);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA114_143 = input.LA(1);

                         
                        int index114_143 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_143);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA114_65 = input.LA(1);

                         
                        int index114_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_65);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA114_11 = input.LA(1);

                         
                        int index114_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_11);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA114_110 = input.LA(1);

                         
                        int index114_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_110);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA114_55 = input.LA(1);

                         
                        int index114_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_55);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA114_64 = input.LA(1);

                         
                        int index114_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_64);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA114_80 = input.LA(1);

                         
                        int index114_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_80);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA114_96 = input.LA(1);

                         
                        int index114_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_96);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA114_6 = input.LA(1);

                         
                        int index114_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_6);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA114_57 = input.LA(1);

                         
                        int index114_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_57);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA114_4 = input.LA(1);

                         
                        int index114_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred328_ChemicalChunker()||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_4);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA114_2 = input.LA(1);

                         
                        int index114_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred328_ChemicalChunker()||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_2);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA114_13 = input.LA(1);

                         
                        int index114_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_13);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA114_59 = input.LA(1);

                         
                        int index114_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_59);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA114_76 = input.LA(1);

                         
                        int index114_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_76);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA114_123 = input.LA(1);

                         
                        int index114_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_123);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA114_52 = input.LA(1);

                         
                        int index114_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_52);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA114_117 = input.LA(1);

                         
                        int index114_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_117);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA114_111 = input.LA(1);

                         
                        int index114_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_111);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA114_1 = input.LA(1);

                         
                        int index114_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred328_ChemicalChunker()||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_1);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA114_58 = input.LA(1);

                         
                        int index114_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_58);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA114_128 = input.LA(1);

                         
                        int index114_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_128);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA114_115 = input.LA(1);

                         
                        int index114_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_115);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA114_24 = input.LA(1);

                         
                        int index114_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_24);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA114_3 = input.LA(1);

                         
                        int index114_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred328_ChemicalChunker()||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_3);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA114_78 = input.LA(1);

                         
                        int index114_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_78);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA114_134 = input.LA(1);

                         
                        int index114_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_134);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA114_84 = input.LA(1);

                         
                        int index114_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_84);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA114_36 = input.LA(1);

                         
                        int index114_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_36);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA114_92 = input.LA(1);

                         
                        int index114_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_92);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA114_9 = input.LA(1);

                         
                        int index114_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_9);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA114_20 = input.LA(1);

                         
                        int index114_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_20);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA114_87 = input.LA(1);

                         
                        int index114_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_87);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA114_46 = input.LA(1);

                         
                        int index114_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_46);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA114_34 = input.LA(1);

                         
                        int index114_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_34);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA114_7 = input.LA(1);

                         
                        int index114_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_7);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA114_50 = input.LA(1);

                         
                        int index114_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_50);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA114_85 = input.LA(1);

                         
                        int index114_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_85);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA114_100 = input.LA(1);

                         
                        int index114_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_100);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA114_39 = input.LA(1);

                         
                        int index114_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_39);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA114_144 = input.LA(1);

                         
                        int index114_144 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_144);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA114_82 = input.LA(1);

                         
                        int index114_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_82);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA114_139 = input.LA(1);

                         
                        int index114_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_139);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA114_140 = input.LA(1);

                         
                        int index114_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_140);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA114_48 = input.LA(1);

                         
                        int index114_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_48);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA114_103 = input.LA(1);

                         
                        int index114_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_103);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA114_108 = input.LA(1);

                         
                        int index114_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_108);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA114_68 = input.LA(1);

                         
                        int index114_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_68);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA114_19 = input.LA(1);

                         
                        int index114_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_19);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA114_25 = input.LA(1);

                         
                        int index114_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_25);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA114_18 = input.LA(1);

                         
                        int index114_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_18);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA114_54 = input.LA(1);

                         
                        int index114_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_54);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA114_77 = input.LA(1);

                         
                        int index114_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_77);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA114_99 = input.LA(1);

                         
                        int index114_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_99);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA114_56 = input.LA(1);

                         
                        int index114_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_56);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA114_30 = input.LA(1);

                         
                        int index114_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_30);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA114_23 = input.LA(1);

                         
                        int index114_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_23);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA114_122 = input.LA(1);

                         
                        int index114_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_122);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA114_125 = input.LA(1);

                         
                        int index114_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_125);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA114_28 = input.LA(1);

                         
                        int index114_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_28);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA114_130 = input.LA(1);

                         
                        int index114_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_130);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA114_127 = input.LA(1);

                         
                        int index114_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_127);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA114_120 = input.LA(1);

                         
                        int index114_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_120);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA114_21 = input.LA(1);

                         
                        int index114_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_21);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA114_112 = input.LA(1);

                         
                        int index114_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_112);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA114_33 = input.LA(1);

                         
                        int index114_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_33);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA114_81 = input.LA(1);

                         
                        int index114_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_81);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA114_31 = input.LA(1);

                         
                        int index114_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_31);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA114_10 = input.LA(1);

                         
                        int index114_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_10);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA114_60 = input.LA(1);

                         
                        int index114_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_60);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA114_43 = input.LA(1);

                         
                        int index114_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_43);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA114_141 = input.LA(1);

                         
                        int index114_141 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_141);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA114_17 = input.LA(1);

                         
                        int index114_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_17);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA114_137 = input.LA(1);

                         
                        int index114_137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_137);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA114_106 = input.LA(1);

                         
                        int index114_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_106);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA114_107 = input.LA(1);

                         
                        int index114_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_107);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA114_89 = input.LA(1);

                         
                        int index114_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_89);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA114_53 = input.LA(1);

                         
                        int index114_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_53);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA114_91 = input.LA(1);

                         
                        int index114_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_91);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA114_69 = input.LA(1);

                         
                        int index114_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_69);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA114_38 = input.LA(1);

                         
                        int index114_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_38);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA114_132 = input.LA(1);

                         
                        int index114_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_132);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA114_98 = input.LA(1);

                         
                        int index114_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_98);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA114_62 = input.LA(1);

                         
                        int index114_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_62);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA114_90 = input.LA(1);

                         
                        int index114_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_90);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA114_95 = input.LA(1);

                         
                        int index114_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_95);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA114_138 = input.LA(1);

                         
                        int index114_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_138);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA114_118 = input.LA(1);

                         
                        int index114_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_118);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA114_45 = input.LA(1);

                         
                        int index114_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_45);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA114_61 = input.LA(1);

                         
                        int index114_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_61);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA114_113 = input.LA(1);

                         
                        int index114_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_113);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA114_116 = input.LA(1);

                         
                        int index114_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_116);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA114_93 = input.LA(1);

                         
                        int index114_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_93);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA114_133 = input.LA(1);

                         
                        int index114_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_133);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA114_37 = input.LA(1);

                         
                        int index114_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_37);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA114_41 = input.LA(1);

                         
                        int index114_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_41);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA114_66 = input.LA(1);

                         
                        int index114_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_66);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA114_74 = input.LA(1);

                         
                        int index114_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_74);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA114_51 = input.LA(1);

                         
                        int index114_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_51);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA114_124 = input.LA(1);

                         
                        int index114_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_124);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA114_15 = input.LA(1);

                         
                        int index114_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_15);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA114_71 = input.LA(1);

                         
                        int index114_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_71);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA114_75 = input.LA(1);

                         
                        int index114_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_75);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA114_72 = input.LA(1);

                         
                        int index114_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_72);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA114_47 = input.LA(1);

                         
                        int index114_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_47);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA114_83 = input.LA(1);

                         
                        int index114_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_83);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA114_42 = input.LA(1);

                         
                        int index114_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_42);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA114_12 = input.LA(1);

                         
                        int index114_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_12);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA114_109 = input.LA(1);

                         
                        int index114_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_109);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA114_102 = input.LA(1);

                         
                        int index114_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_102);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA114_49 = input.LA(1);

                         
                        int index114_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_49);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA114_67 = input.LA(1);

                         
                        int index114_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_67);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA114_63 = input.LA(1);

                         
                        int index114_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_63);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA114_142 = input.LA(1);

                         
                        int index114_142 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_142);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA114_105 = input.LA(1);

                         
                        int index114_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_105);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA114_40 = input.LA(1);

                         
                        int index114_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_40);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA114_29 = input.LA(1);

                         
                        int index114_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_29);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA114_5 = input.LA(1);

                         
                        int index114_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred328_ChemicalChunker()||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred328_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_5);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA114_16 = input.LA(1);

                         
                        int index114_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_16);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA114_131 = input.LA(1);

                         
                        int index114_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_131);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA114_101 = input.LA(1);

                         
                        int index114_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_101);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA114_22 = input.LA(1);

                         
                        int index114_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_22);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA114_136 = input.LA(1);

                         
                        int index114_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_136);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA114_26 = input.LA(1);

                         
                        int index114_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_26);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA114_104 = input.LA(1);

                         
                        int index114_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_104);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA114_88 = input.LA(1);

                         
                        int index114_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_88);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA114_126 = input.LA(1);

                         
                        int index114_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_126);
                        if ( s>=0 ) return s;
                        break;

                    case 130 : 
                        int LA114_32 = input.LA(1);

                         
                        int index114_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_32);
                        if ( s>=0 ) return s;
                        break;

                    case 131 : 
                        int LA114_97 = input.LA(1);

                         
                        int index114_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_97);
                        if ( s>=0 ) return s;
                        break;

                    case 132 : 
                        int LA114_129 = input.LA(1);

                         
                        int index114_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_129);
                        if ( s>=0 ) return s;
                        break;

                    case 133 : 
                        int LA114_121 = input.LA(1);

                         
                        int index114_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_121);
                        if ( s>=0 ) return s;
                        break;

                    case 134 : 
                        int LA114_119 = input.LA(1);

                         
                        int index114_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_119);
                        if ( s>=0 ) return s;
                        break;

                    case 135 : 
                        int LA114_94 = input.LA(1);

                         
                        int index114_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_94);
                        if ( s>=0 ) return s;
                        break;

                    case 136 : 
                        int LA114_79 = input.LA(1);

                         
                        int index114_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_79);
                        if ( s>=0 ) return s;
                        break;

                    case 137 : 
                        int LA114_114 = input.LA(1);

                         
                        int index114_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_114);
                        if ( s>=0 ) return s;
                        break;

                    case 138 : 
                        int LA114_44 = input.LA(1);

                         
                        int index114_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_44);
                        if ( s>=0 ) return s;
                        break;

                    case 139 : 
                        int LA114_27 = input.LA(1);

                         
                        int index114_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_27);
                        if ( s>=0 ) return s;
                        break;

                    case 140 : 
                        int LA114_35 = input.LA(1);

                         
                        int index114_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_35);
                        if ( s>=0 ) return s;
                        break;

                    case 141 : 
                        int LA114_14 = input.LA(1);

                         
                        int index114_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_14);
                        if ( s>=0 ) return s;
                        break;

                    case 142 : 
                        int LA114_8 = input.LA(1);

                         
                        int index114_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_8);
                        if ( s>=0 ) return s;
                        break;

                    case 143 : 
                        int LA114_86 = input.LA(1);

                         
                        int index114_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index114_86);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 114, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA115_static {
    static final String DFA115_eotS =
        "\u0092\uffff";
    static final String DFA115_eofS =
        "\1\6\u0091\uffff";
    static final String DFA115_minS =
        "\1\46\5\0\u008c\uffff";
    static final String DFA115_maxS =
        "\1\u00b4\5\0\u008c\uffff";
    static final String DFA115_acceptS =
        "\6\uffff\1\2\u008a\uffff\1\1";
    static final String DFA115_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\u008c\uffff}>";
    static final String[] DFA115_transitionS = {
            "\1\5\144\6\1\1\1\6\1\3\1\6\1\4\2\6\1\2\42\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA115_eot = DFA.unpackEncodedString(DFA115_static.DFA115_eotS);
    static final short[] DFA115_eof = DFA.unpackEncodedString(DFA115_static.DFA115_eofS);
    static final char[] DFA115_min = DFA.unpackEncodedStringToUnsignedChars(DFA115_static.DFA115_minS);
    static final char[] DFA115_max = DFA.unpackEncodedStringToUnsignedChars(DFA115_static.DFA115_maxS);
    static final short[] DFA115_accept = DFA.unpackEncodedString(DFA115_static.DFA115_acceptS);
    static final short[] DFA115_special = DFA.unpackEncodedString(DFA115_static.DFA115_specialS);
    static final short[][] DFA115_transition;

    static {
        int numStates = DFA115_static.DFA115_transitionS.length;
        DFA115_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA115_transition[i] = DFA.unpackEncodedString(DFA115_static.DFA115_transitionS[i]);
        }
    }

    class DFA115 extends DFA {

        public DFA115(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 115;
            this.eot = DFA115_eot;
            this.eof = DFA115_eof;
            this.min = DFA115_min;
            this.max = DFA115_max;
            this.accept = DFA115_accept;
            this.special = DFA115_special;
            this.transition = DFA115_transition;
        }
        public String getDescription() {
            return "216:5: ( numericOrIdentifierCompoundReference )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA115_1 = input.LA(1);

                         
                        int index115_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index115_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA115_2 = input.LA(1);

                         
                        int index115_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index115_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA115_3 = input.LA(1);

                         
                        int index115_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index115_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA115_4 = input.LA(1);

                         
                        int index115_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index115_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA115_5 = input.LA(1);

                         
                        int index115_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index115_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 115, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA116_static {
    static final String DFA116_eotS =
        "\u0093\uffff";
    static final String DFA116_eofS =
        "\1\1\u0092\uffff";
    static final String DFA116_minS =
        "\1\46\3\uffff\1\0\13\uffff\4\0\177\uffff";
    static final String DFA116_maxS =
        "\1\u00b4\3\uffff\1\0\13\uffff\4\0\177\uffff";
    static final String DFA116_acceptS =
        "\1\uffff\1\3\u008f\uffff\1\2\1\1";
    static final String DFA116_specialS =
        "\4\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\177\uffff}>";
    static final String[] DFA116_transitionS = {
            "\1\23\42\1\1\22\73\1\1\4\11\1\1\20\2\1\1\21\42\1",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA116_eot = DFA.unpackEncodedString(DFA116_static.DFA116_eotS);
    static final short[] DFA116_eof = DFA.unpackEncodedString(DFA116_static.DFA116_eofS);
    static final char[] DFA116_min = DFA.unpackEncodedStringToUnsignedChars(DFA116_static.DFA116_minS);
    static final char[] DFA116_max = DFA.unpackEncodedStringToUnsignedChars(DFA116_static.DFA116_maxS);
    static final short[] DFA116_accept = DFA.unpackEncodedString(DFA116_static.DFA116_acceptS);
    static final short[] DFA116_special = DFA.unpackEncodedString(DFA116_static.DFA116_specialS);
    static final short[][] DFA116_transition;

    static {
        int numStates = DFA116_static.DFA116_transitionS.length;
        DFA116_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA116_transition[i] = DFA.unpackEncodedString(DFA116_static.DFA116_transitionS[i]);
        }
    }

    class DFA116 extends DFA {

        public DFA116(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 116;
            this.eot = DFA116_eot;
            this.eof = DFA116_eof;
            this.min = DFA116_min;
            this.max = DFA116_max;
            this.accept = DFA116_accept;
            this.special = DFA116_special;
            this.transition = DFA116_transition;
        }
        public String getDescription() {
            return "()* loopback of 216:43: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA116_4 = input.LA(1);

                         
                        int index116_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred331_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index116_4);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA116_16 = input.LA(1);

                         
                        int index116_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred331_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index116_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA116_17 = input.LA(1);

                         
                        int index116_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred331_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index116_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA116_18 = input.LA(1);

                         
                        int index116_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index116_18);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA116_19 = input.LA(1);

                         
                        int index116_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index116_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 116, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA117_static {
    static final String DFA117_eotS =
        "\u0094\uffff";
    static final String DFA117_eofS =
        "\1\1\u0093\uffff";
    static final String DFA117_minS =
        "\1\46\3\uffff\1\0\13\uffff\4\0\u0080\uffff";
    static final String DFA117_maxS =
        "\1\u00b4\3\uffff\1\0\13\uffff\4\0\u0080\uffff";
    static final String DFA117_acceptS =
        "\1\uffff\1\4\u008f\uffff\1\1\1\3\1\2";
    static final String DFA117_specialS =
        "\4\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\u0080\uffff}>";
    static final String[] DFA117_transitionS = {
            "\1\23\42\1\1\22\73\1\1\4\11\1\1\20\2\1\1\21\42\1",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_static.DFA117_eotS);
    static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_static.DFA117_eofS);
    static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_static.DFA117_minS);
    static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_static.DFA117_maxS);
    static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_static.DFA117_acceptS);
    static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_static.DFA117_specialS);
    static final short[][] DFA117_transition;

    static {
        int numStates = DFA117_static.DFA117_transitionS.length;
        DFA117_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA117_transition[i] = DFA.unpackEncodedString(DFA117_static.DFA117_transitionS[i]);
        }
    }

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = DFA117_eot;
            this.eof = DFA117_eof;
            this.min = DFA117_min;
            this.max = DFA117_max;
            this.accept = DFA117_accept;
            this.special = DFA117_special;
            this.transition = DFA117_transition;
        }
        public String getDescription() {
            return "()* loopback of 219:46: ( citation | quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA117_4 = input.LA(1);

                         
                        int index117_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred332_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred334_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index117_4);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA117_16 = input.LA(1);

                         
                        int index117_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred332_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred333_ChemicalChunker()) ) {s = 147;}

                        else if ( (synpred334_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index117_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA117_17 = input.LA(1);

                         
                        int index117_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 147;}

                        else if ( (synpred334_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index117_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA117_18 = input.LA(1);

                         
                        int index117_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index117_18);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA117_19 = input.LA(1);

                         
                        int index117_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index117_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 117, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA119_static {
    static final String DFA119_eotS =
        "\11\uffff";
    static final String DFA119_eofS =
        "\11\uffff";
    static final String DFA119_minS =
        "\1\46\1\45\2\uffff\1\46\1\45\1\54\1\45\1\101";
    static final String DFA119_maxS =
        "\1\u0092\1\45\2\uffff\1\u009e\1\45\1\u009e\1\45\1\u009e";
    static final String DFA119_acceptS =
        "\2\uffff\1\1\1\2\5\uffff";
    static final String DFA119_specialS =
        "\11\uffff}>";
    static final String[] DFA119_transitionS = {
            "\1\3\42\uffff\1\3\73\uffff\1\2\11\uffff\1\1\2\uffff\1\3",
            "\1\4",
            "",
            "",
            "\1\3\42\uffff\1\3\73\uffff\1\2\13\uffff\1\2\1\5\2\uffff\1"+
            "\2\10\uffff\1\2",
            "\1\6",
            "\1\3\24\uffff\3\3\1\uffff\2\3\76\uffff\1\2\4\uffff\1\3\6\uffff"+
            "\1\2\1\7\2\uffff\1\2\6\uffff\1\3\1\uffff\1\2",
            "\1\10",
            "\3\3\1\uffff\2\3\76\uffff\1\2\12\uffff\2\2\1\7\2\uffff\1\2"+
            "\10\uffff\1\2"
    };
    }

    static final short[] DFA119_eot = DFA.unpackEncodedString(DFA119_static.DFA119_eotS);
    static final short[] DFA119_eof = DFA.unpackEncodedString(DFA119_static.DFA119_eofS);
    static final char[] DFA119_min = DFA.unpackEncodedStringToUnsignedChars(DFA119_static.DFA119_minS);
    static final char[] DFA119_max = DFA.unpackEncodedStringToUnsignedChars(DFA119_static.DFA119_maxS);
    static final short[] DFA119_accept = DFA.unpackEncodedString(DFA119_static.DFA119_acceptS);
    static final short[] DFA119_special = DFA.unpackEncodedString(DFA119_static.DFA119_specialS);
    static final short[][] DFA119_transition;

    static {
        int numStates = DFA119_static.DFA119_transitionS.length;
        DFA119_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA119_transition[i] = DFA.unpackEncodedString(DFA119_static.DFA119_transitionS[i]);
        }
    }

    class DFA119 extends DFA {

        public DFA119(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 119;
            this.eot = DFA119_eot;
            this.eof = DFA119_eof;
            this.min = DFA119_min;
            this.max = DFA119_max;
            this.accept = DFA119_accept;
            this.special = DFA119_special;
            this.transition = DFA119_transition;
        }
        public String getDescription() {
            return "225:28: ( citation )?";
        }
    }
    static class DFA120_static {
    static final String DFA120_eotS =
        "\u0094\uffff";
    static final String DFA120_eofS =
        "\1\1\u0093\uffff";
    static final String DFA120_minS =
        "\1\46\3\uffff\1\0\13\uffff\4\0\u0080\uffff";
    static final String DFA120_maxS =
        "\1\u00b4\3\uffff\1\0\13\uffff\4\0\u0080\uffff";
    static final String DFA120_acceptS =
        "\1\uffff\1\4\u008f\uffff\1\1\1\3\1\2";
    static final String DFA120_specialS =
        "\4\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\u0080\uffff}>";
    static final String[] DFA120_transitionS = {
            "\1\23\42\1\1\22\73\1\1\4\11\1\1\20\2\1\1\21\42\1",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA120_eot = DFA.unpackEncodedString(DFA120_static.DFA120_eotS);
    static final short[] DFA120_eof = DFA.unpackEncodedString(DFA120_static.DFA120_eofS);
    static final char[] DFA120_min = DFA.unpackEncodedStringToUnsignedChars(DFA120_static.DFA120_minS);
    static final char[] DFA120_max = DFA.unpackEncodedStringToUnsignedChars(DFA120_static.DFA120_maxS);
    static final short[] DFA120_accept = DFA.unpackEncodedString(DFA120_static.DFA120_acceptS);
    static final short[] DFA120_special = DFA.unpackEncodedString(DFA120_static.DFA120_specialS);
    static final short[][] DFA120_transition;

    static {
        int numStates = DFA120_static.DFA120_transitionS.length;
        DFA120_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA120_transition[i] = DFA.unpackEncodedString(DFA120_static.DFA120_transitionS[i]);
        }
    }

    class DFA120 extends DFA {

        public DFA120(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 120;
            this.eot = DFA120_eot;
            this.eof = DFA120_eof;
            this.min = DFA120_min;
            this.max = DFA120_max;
            this.accept = DFA120_accept;
            this.special = DFA120_special;
            this.transition = DFA120_transition;
        }
        public String getDescription() {
            return "()* loopback of 225:47: ( citation | quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA120_4 = input.LA(1);

                         
                        int index120_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred339_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred341_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_4);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA120_16 = input.LA(1);

                         
                        int index120_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred339_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred340_ChemicalChunker()) ) {s = 147;}

                        else if ( (synpred341_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA120_17 = input.LA(1);

                         
                        int index120_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_ChemicalChunker()) ) {s = 147;}

                        else if ( (synpred341_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA120_18 = input.LA(1);

                         
                        int index120_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_18);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA120_19 = input.LA(1);

                         
                        int index120_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 120, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA123_static {
    static final String DFA123_eotS =
        "\u0093\uffff";
    static final String DFA123_eofS =
        "\1\1\u0092\uffff";
    static final String DFA123_minS =
        "\1\46\3\uffff\1\0\13\uffff\4\0\177\uffff";
    static final String DFA123_maxS =
        "\1\u00b4\3\uffff\1\0\13\uffff\4\0\177\uffff";
    static final String DFA123_acceptS =
        "\1\uffff\1\3\u008f\uffff\1\2\1\1";
    static final String DFA123_specialS =
        "\4\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\177\uffff}>";
    static final String[] DFA123_transitionS = {
            "\1\23\42\1\1\22\73\1\1\4\11\1\1\20\2\1\1\21\42\1",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA123_eot = DFA.unpackEncodedString(DFA123_static.DFA123_eotS);
    static final short[] DFA123_eof = DFA.unpackEncodedString(DFA123_static.DFA123_eofS);
    static final char[] DFA123_min = DFA.unpackEncodedStringToUnsignedChars(DFA123_static.DFA123_minS);
    static final char[] DFA123_max = DFA.unpackEncodedStringToUnsignedChars(DFA123_static.DFA123_maxS);
    static final short[] DFA123_accept = DFA.unpackEncodedString(DFA123_static.DFA123_acceptS);
    static final short[] DFA123_special = DFA.unpackEncodedString(DFA123_static.DFA123_specialS);
    static final short[][] DFA123_transition;

    static {
        int numStates = DFA123_static.DFA123_transitionS.length;
        DFA123_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA123_transition[i] = DFA.unpackEncodedString(DFA123_static.DFA123_transitionS[i]);
        }
    }

    class DFA123 extends DFA {

        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = DFA123_eot;
            this.eof = DFA123_eof;
            this.min = DFA123_min;
            this.max = DFA123_max;
            this.accept = DFA123_accept;
            this.special = DFA123_special;
            this.transition = DFA123_transition;
        }
        public String getDescription() {
            return "()* loopback of 231:43: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA123_4 = input.LA(1);

                         
                        int index123_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred345_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index123_4);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA123_16 = input.LA(1);

                         
                        int index123_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred345_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index123_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA123_17 = input.LA(1);

                         
                        int index123_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred345_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index123_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA123_18 = input.LA(1);

                         
                        int index123_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index123_18);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA123_19 = input.LA(1);

                         
                        int index123_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index123_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 123, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA126_static {
    static final String DFA126_eotS =
        "\u0092\uffff";
    static final String DFA126_eofS =
        "\1\1\u0091\uffff";
    static final String DFA126_minS =
        "\1\46\16\uffff\4\0\177\uffff";
    static final String DFA126_maxS =
        "\1\u00b4\16\uffff\4\0\177\uffff";
    static final String DFA126_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA126_specialS =
        "\17\uffff\1\0\1\1\1\2\1\3\177\uffff}>";
    static final String[] DFA126_transitionS = {
            "\1\22\42\1\1\21\105\1\1\17\2\1\1\20\42\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA126_eot = DFA.unpackEncodedString(DFA126_static.DFA126_eotS);
    static final short[] DFA126_eof = DFA.unpackEncodedString(DFA126_static.DFA126_eofS);
    static final char[] DFA126_min = DFA.unpackEncodedStringToUnsignedChars(DFA126_static.DFA126_minS);
    static final char[] DFA126_max = DFA.unpackEncodedStringToUnsignedChars(DFA126_static.DFA126_maxS);
    static final short[] DFA126_accept = DFA.unpackEncodedString(DFA126_static.DFA126_acceptS);
    static final short[] DFA126_special = DFA.unpackEncodedString(DFA126_static.DFA126_specialS);
    static final short[][] DFA126_transition;

    static {
        int numStates = DFA126_static.DFA126_transitionS.length;
        DFA126_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA126_transition[i] = DFA.unpackEncodedString(DFA126_static.DFA126_transitionS[i]);
        }
    }

    class DFA126 extends DFA {

        public DFA126(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 126;
            this.eot = DFA126_eot;
            this.eof = DFA126_eof;
            this.min = DFA126_min;
            this.max = DFA126_max;
            this.accept = DFA126_accept;
            this.special = DFA126_special;
            this.transition = DFA126_transition;
        }
        public String getDescription() {
            return "()* loopback of 234:34: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA126_15 = input.LA(1);

                         
                        int index126_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index126_15);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA126_16 = input.LA(1);

                         
                        int index126_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index126_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA126_17 = input.LA(1);

                         
                        int index126_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index126_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA126_18 = input.LA(1);

                         
                        int index126_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index126_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 126, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA128_static {
    static final String DFA128_eotS =
        "\12\uffff";
    static final String DFA128_eofS =
        "\12\uffff";
    static final String DFA128_minS =
        "\1\46\1\uffff\1\45\1\uffff\1\45\1\uffff\1\0\1\46\1\45\1\u008d";
    static final String DFA128_maxS =
        "\1\u0092\1\uffff\1\45\1\uffff\1\45\1\uffff\1\0\1\u0092\1\45\1\u0090";
    static final String DFA128_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\1\uffff\1\3\4\uffff";
    static final String DFA128_specialS =
        "\6\uffff\1\0\3\uffff}>";
    static final String[] DFA128_transitionS = {
            "\1\5\144\uffff\1\1\1\uffff\1\3\1\uffff\1\4\2\uffff\1\2",
            "",
            "\1\6",
            "",
            "\1\7",
            "",
            "\1\uffff",
            "\1\5\146\uffff\1\3\4\uffff\1\10",
            "\1\11",
            "\1\3\2\uffff\1\5"
    };
    }

    static final short[] DFA128_eot = DFA.unpackEncodedString(DFA128_static.DFA128_eotS);
    static final short[] DFA128_eof = DFA.unpackEncodedString(DFA128_static.DFA128_eofS);
    static final char[] DFA128_min = DFA.unpackEncodedStringToUnsignedChars(DFA128_static.DFA128_minS);
    static final char[] DFA128_max = DFA.unpackEncodedStringToUnsignedChars(DFA128_static.DFA128_maxS);
    static final short[] DFA128_accept = DFA.unpackEncodedString(DFA128_static.DFA128_acceptS);
    static final short[] DFA128_special = DFA.unpackEncodedString(DFA128_static.DFA128_specialS);
    static final short[][] DFA128_transition;

    static {
        int numStates = DFA128_static.DFA128_transitionS.length;
        DFA128_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA128_transition[i] = DFA.unpackEncodedString(DFA128_static.DFA128_transitionS[i]);
        }
    }

    class DFA128 extends DFA {

        public DFA128(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 128;
            this.eot = DFA128_eot;
            this.eof = DFA128_eof;
            this.min = DFA128_min;
            this.max = DFA128_max;
            this.accept = DFA128_accept;
            this.special = DFA128_special;
            this.transition = DFA128_transition;
        }
        public String getDescription() {
            return "240:5: ( squareBracketedReference | identifierOrBracketedIdentifier | numericOrBracketedNumeric )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA128_6 = input.LA(1);

                         
                        int index128_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred352_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index128_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 128, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA133_static {
    static final String DFA133_eotS =
        "\u0092\uffff";
    static final String DFA133_eofS =
        "\1\1\u0091\uffff";
    static final String DFA133_minS =
        "\1\46\2\uffff\1\0\u008e\uffff";
    static final String DFA133_maxS =
        "\1\u00b4\2\uffff\1\0\u008e\uffff";
    static final String DFA133_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA133_specialS =
        "\3\uffff\1\0\u008e\uffff}>";
    static final String[] DFA133_transitionS = {
            "\137\1\1\3\57\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA133_eot = DFA.unpackEncodedString(DFA133_static.DFA133_eotS);
    static final short[] DFA133_eof = DFA.unpackEncodedString(DFA133_static.DFA133_eofS);
    static final char[] DFA133_min = DFA.unpackEncodedStringToUnsignedChars(DFA133_static.DFA133_minS);
    static final char[] DFA133_max = DFA.unpackEncodedStringToUnsignedChars(DFA133_static.DFA133_maxS);
    static final short[] DFA133_accept = DFA.unpackEncodedString(DFA133_static.DFA133_acceptS);
    static final short[] DFA133_special = DFA.unpackEncodedString(DFA133_static.DFA133_specialS);
    static final short[][] DFA133_transition;

    static {
        int numStates = DFA133_static.DFA133_transitionS.length;
        DFA133_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA133_transition[i] = DFA.unpackEncodedString(DFA133_static.DFA133_transitionS[i]);
        }
    }

    class DFA133 extends DFA {

        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = DFA133_eot;
            this.eof = DFA133_eof;
            this.min = DFA133_min;
            this.max = DFA133_max;
            this.accept = DFA133_accept;
            this.special = DFA133_special;
            this.transition = DFA133_transition;
        }
        public String getDescription() {
            return "()* loopback of 255:18: ( comma measurements )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA133_3 = input.LA(1);

                         
                        int index133_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred357_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index133_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 133, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA137_static {
    static final String DFA137_eotS =
        "\u0092\uffff";
    static final String DFA137_eofS =
        "\1\4\u0091\uffff";
    static final String DFA137_minS =
        "\1\46\3\0\u008e\uffff";
    static final String DFA137_maxS =
        "\1\u00b4\3\0\u008e\uffff";
    static final String DFA137_acceptS =
        "\4\uffff\1\2\u008c\uffff\1\1";
    static final String DFA137_specialS =
        "\1\uffff\1\0\1\1\1\2\u008e\uffff}>";
    static final String[] DFA137_transitionS = {
            "\1\3\42\4\1\2\110\4\1\1\42\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA137_eot = DFA.unpackEncodedString(DFA137_static.DFA137_eotS);
    static final short[] DFA137_eof = DFA.unpackEncodedString(DFA137_static.DFA137_eofS);
    static final char[] DFA137_min = DFA.unpackEncodedStringToUnsignedChars(DFA137_static.DFA137_minS);
    static final char[] DFA137_max = DFA.unpackEncodedStringToUnsignedChars(DFA137_static.DFA137_maxS);
    static final short[] DFA137_accept = DFA.unpackEncodedString(DFA137_static.DFA137_acceptS);
    static final short[] DFA137_special = DFA.unpackEncodedString(DFA137_static.DFA137_specialS);
    static final short[][] DFA137_transition;

    static {
        int numStates = DFA137_static.DFA137_transitionS.length;
        DFA137_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA137_transition[i] = DFA.unpackEncodedString(DFA137_static.DFA137_transitionS[i]);
        }
    }

    class DFA137 extends DFA {

        public DFA137(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 137;
            this.eot = DFA137_eot;
            this.eof = DFA137_eof;
            this.min = DFA137_min;
            this.max = DFA137_max;
            this.accept = DFA137_accept;
            this.special = DFA137_special;
            this.transition = DFA137_transition;
        }
        public String getDescription() {
            return "259:25: ( measurementtypes )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA137_1 = input.LA(1);

                         
                        int index137_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred361_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index137_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA137_2 = input.LA(1);

                         
                        int index137_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred361_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index137_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA137_3 = input.LA(1);

                         
                        int index137_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred361_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index137_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 137, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA138_static {
    static final String DFA138_eotS =
        "\25\uffff";
    static final String DFA138_eofS =
        "\20\uffff\1\22\4\uffff";
    static final String DFA138_minS =
        "\1\46\1\45\1\uffff\1\45\1\101\1\u008a\1\uffff\1\45\1\uffff\2\45"+
        "\3\uffff\1\101\1\u008a\1\46\1\45\1\uffff\1\0\1\uffff";
    static final String DFA138_maxS =
        "\1\u0092\1\45\1\uffff\1\45\2\u009c\1\uffff\1\45\1\uffff\2\45\3"+
        "\uffff\1\u0092\1\u008a\1\u00b4\1\45\1\uffff\1\0\1\uffff";
    static final String DFA138_acceptS =
        "\2\uffff\1\5\3\uffff\1\4\1\uffff\1\3\2\uffff\1\2\1\1\1\6\4\uffff"+
        "\1\10\1\uffff\1\7";
    static final String DFA138_specialS =
        "\23\uffff\1\0\1\uffff}>";
    static final String[] DFA138_transitionS = {
            "\1\3\42\uffff\1\2\110\uffff\1\1",
            "\1\4",
            "",
            "\1\5",
            "\1\10\1\13\1\14\1\uffff\1\15\1\6\103\uffff\1\12\7\uffff\1"+
            "\7\11\uffff\1\11",
            "\1\12\21\uffff\1\11",
            "",
            "\1\16",
            "",
            "\1\17",
            "\1\20",
            "",
            "",
            "",
            "\1\10\1\13\1\14\1\uffff\1\15\1\6\113\uffff\1\7",
            "\1\12",
            "\134\22\1\21\62\22",
            "\1\23",
            "",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA138_eot = DFA.unpackEncodedString(DFA138_static.DFA138_eotS);
    static final short[] DFA138_eof = DFA.unpackEncodedString(DFA138_static.DFA138_eofS);
    static final char[] DFA138_min = DFA.unpackEncodedStringToUnsignedChars(DFA138_static.DFA138_minS);
    static final char[] DFA138_max = DFA.unpackEncodedStringToUnsignedChars(DFA138_static.DFA138_maxS);
    static final short[] DFA138_accept = DFA.unpackEncodedString(DFA138_static.DFA138_acceptS);
    static final short[] DFA138_special = DFA.unpackEncodedString(DFA138_static.DFA138_specialS);
    static final short[][] DFA138_transition;

    static {
        int numStates = DFA138_static.DFA138_transitionS.length;
        DFA138_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA138_transition[i] = DFA.unpackEncodedString(DFA138_static.DFA138_transitionS[i]);
        }
    }

    class DFA138 extends DFA {

        public DFA138(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 138;
            this.eot = DFA138_eot;
            this.eof = DFA138_eof;
            this.min = DFA138_min;
            this.max = DFA138_max;
            this.accept = DFA138_accept;
            this.special = DFA138_special;
            this.transition = DFA138_transition;
        }
        public String getDescription() {
            return "260:1: measurementtypes : ( molar | amount | mass | volume | logHydrogenActivity | equivalent | yield | percent );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA138_19 = input.LA(1);

                         
                        int index138_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred368_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index138_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 138, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA148_static {
    static final String DFA148_eotS =
        "\u008b\uffff";
    static final String DFA148_eofS =
        "\u008b\uffff";
    static final String DFA148_minS =
        "\1\46\1\0\43\uffff\1\0\4\uffff\4\0\2\uffff\15\0\1\uffff\1\0\114"+
        "\uffff";
    static final String DFA148_maxS =
        "\1\u00b4\1\0\43\uffff\1\0\4\uffff\4\0\2\uffff\15\0\1\uffff\1\0"+
        "\114\uffff";
    static final String DFA148_acceptS =
        "\2\uffff\1\2\53\uffff\1\5\1\6\15\uffff\1\12\1\uffff\1\14\55\uffff"+
        "\1\15\21\uffff\1\21\1\22\1\1\1\3\1\4\1\10\1\11\1\16\1\7\1\20\1\17"+
        "\1\13";
    static final String DFA148_specialS =
        "\1\uffff\1\0\43\uffff\1\1\4\uffff\1\2\1\3\1\4\1\5\2\uffff\1\6\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\uffff"+
        "\1\23\114\uffff}>";
    static final String[] DFA148_transitionS = {
            "\1\55\1\63\1\65\3\77\1\uffff\1\64\1\71\20\155\2\77\1\uffff"+
            "\1\77\1\uffff\3\77\1\74\1\77\1\54\12\77\1\66\4\2\2\77\11\2\1"+
            "\77\1\2\1\77\4\2\1\77\1\2\1\77\1\2\1\77\5\2\1\77\1\2\1\77\3"+
            "\2\1\77\1\2\1\45\1\77\3\2\1\77\1\uffff\1\177\1\70\2\uffff\1"+
            "\75\1\u0080\1\57\1\72\1\uffff\1\73\1\uffff\1\67\2\uffff\1\53"+
            "\2\77\1\1\1\155\1\60\1\61\1\62\1\77\1\56\1\52\7\77\4\uffff\1"+
            "\76\1\155\1\uffff\6\2\4\77",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA148_eot = DFA.unpackEncodedString(DFA148_static.DFA148_eotS);
    static final short[] DFA148_eof = DFA.unpackEncodedString(DFA148_static.DFA148_eofS);
    static final char[] DFA148_min = DFA.unpackEncodedStringToUnsignedChars(DFA148_static.DFA148_minS);
    static final char[] DFA148_max = DFA.unpackEncodedStringToUnsignedChars(DFA148_static.DFA148_maxS);
    static final short[] DFA148_accept = DFA.unpackEncodedString(DFA148_static.DFA148_acceptS);
    static final short[] DFA148_special = DFA.unpackEncodedString(DFA148_static.DFA148_specialS);
    static final short[][] DFA148_transition;

    static {
        int numStates = DFA148_static.DFA148_transitionS.length;
        DFA148_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA148_transition[i] = DFA.unpackEncodedString(DFA148_static.DFA148_transitionS[i]);
        }
    }

    class DFA148 extends DFA {

        public DFA148(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 148;
            this.eot = DFA148_eot;
            this.eof = DFA148_eof;
            this.min = DFA148_min;
            this.max = DFA148_max;
            this.accept = DFA148_accept;
            this.special = DFA148_special;
            this.transition = DFA148_transition;
        }
        public String getDescription() {
            return "280:19: ( fw | verb | nn | quantity2Node | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA148_1 = input.LA(1);

                         
                        int index148_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred379_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index148_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA148_37 = input.LA(1);

                         
                        int index148_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred380_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index148_37);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA148_42 = input.LA(1);

                         
                        int index148_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred381_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index148_42);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA148_43 = input.LA(1);

                         
                        int index148_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred382_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred386_ChemicalChunker()) ) {s = 132;}

                        else if ( (((synpred387_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred387_ChemicalChunker())) ) {s = 133;}

                        else if ( (((synpred390_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred390_ChemicalChunker())) ) {s = 63;}

                        else if ( (synpred392_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index148_43);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA148_44 = input.LA(1);

                         
                        int index148_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred382_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred386_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred387_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index148_44);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA148_45 = input.LA(1);

                         
                        int index148_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred382_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred386_ChemicalChunker()) ) {s = 132;}

                        else if ( (((synpred387_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred387_ChemicalChunker())) ) {s = 133;}

                        else if ( (((synpred390_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred390_ChemicalChunker())) ) {s = 63;}

                         
                        input.seek(index148_45);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA148_48 = input.LA(1);

                         
                        int index148_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred386_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred394_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index148_48);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA148_49 = input.LA(1);

                         
                        int index148_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred386_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred394_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index148_49);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA148_50 = input.LA(1);

                         
                        int index148_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred386_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred394_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index148_50);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA148_51 = input.LA(1);

                         
                        int index148_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred386_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred394_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index148_51);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA148_52 = input.LA(1);

                         
                        int index148_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred386_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred394_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index148_52);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA148_53 = input.LA(1);

                         
                        int index148_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred386_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred394_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index148_53);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA148_54 = input.LA(1);

                         
                        int index148_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred386_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index148_54);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA148_55 = input.LA(1);

                         
                        int index148_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred386_ChemicalChunker()) ) {s = 132;}

                        else if ( (((synpred387_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred387_ChemicalChunker())) ) {s = 133;}

                        else if ( (((synpred390_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred390_ChemicalChunker())) ) {s = 63;}

                         
                        input.seek(index148_55);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA148_56 = input.LA(1);

                         
                        int index148_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred386_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred387_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred393_ChemicalChunker()) ) {s = 137;}

                         
                        input.seek(index148_56);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA148_57 = input.LA(1);

                         
                        int index148_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred387_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index148_57);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA148_58 = input.LA(1);

                         
                        int index148_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred387_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred387_ChemicalChunker())) ) {s = 133;}

                        else if ( (((synpred390_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred390_ChemicalChunker())) ) {s = 63;}

                         
                        input.seek(index148_58);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA148_59 = input.LA(1);

                         
                        int index148_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred387_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred387_ChemicalChunker())) ) {s = 133;}

                        else if ( (((synpred390_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred390_ChemicalChunker())) ) {s = 63;}

                         
                        input.seek(index148_59);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA148_60 = input.LA(1);

                         
                        int index148_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred387_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index148_60);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA148_62 = input.LA(1);

                         
                        int index148_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index148_62);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 148, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA149_static {
    static final String DFA149_eotS =
        "\u008d\uffff";
    static final String DFA149_eofS =
        "\u008d\uffff";
    static final String DFA149_minS =
        "\1\46\1\uffff\3\0\43\uffff\1\0\4\uffff\4\0\2\uffff\13\0\1\uffff"+
        "\1\0\115\uffff";
    static final String DFA149_maxS =
        "\1\u00b4\1\uffff\3\0\43\uffff\1\0\4\uffff\4\0\2\uffff\13\0\1\uffff"+
        "\1\0\115\uffff";
    static final String DFA149_acceptS =
        "\1\uffff\1\24\3\uffff\1\3\53\uffff\1\6\1\7\13\uffff\1\13\1\uffff"+
        "\1\15\55\uffff\1\16\21\uffff\1\22\1\23\1\1\1\11\1\12\1\20\1\10\1"+
        "\2\1\4\1\17\1\5\1\21\1\14";
    static final String DFA149_specialS =
        "\2\uffff\1\0\1\1\1\2\43\uffff\1\3\4\uffff\1\4\1\5\1\6\1\7\2\uffff"+
        "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\uffff"+
        "\1\23\115\uffff}>";
    static final String[] DFA149_transitionS = {
            "\1\57\1\66\1\70\3\100\1\uffff\1\67\1\72\20\156\2\100\1\uffff"+
            "\1\100\1\uffff\3\100\1\75\1\100\1\56\12\100\1\71\4\5\2\100\11"+
            "\5\1\100\1\5\1\100\4\5\1\100\1\5\1\100\1\5\1\100\5\5\1\100\1"+
            "\5\1\100\3\5\1\100\1\5\1\50\1\100\3\5\1\60\1\uffff\1\u0080\1"+
            "\2\2\uffff\1\76\1\u0081\1\62\1\73\1\uffff\1\74\1\uffff\1\3\1"+
            "\1\1\uffff\1\55\2\100\1\4\1\156\1\63\1\64\1\65\1\100\1\61\10"+
            "\100\4\uffff\1\77\1\156\1\uffff\6\5\4\100",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA149_eot = DFA.unpackEncodedString(DFA149_static.DFA149_eotS);
    static final short[] DFA149_eof = DFA.unpackEncodedString(DFA149_static.DFA149_eofS);
    static final char[] DFA149_min = DFA.unpackEncodedStringToUnsignedChars(DFA149_static.DFA149_minS);
    static final char[] DFA149_max = DFA.unpackEncodedStringToUnsignedChars(DFA149_static.DFA149_maxS);
    static final short[] DFA149_accept = DFA.unpackEncodedString(DFA149_static.DFA149_acceptS);
    static final short[] DFA149_special = DFA.unpackEncodedString(DFA149_static.DFA149_specialS);
    static final short[][] DFA149_transition;

    static {
        int numStates = DFA149_static.DFA149_transitionS.length;
        DFA149_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA149_transition[i] = DFA.unpackEncodedString(DFA149_static.DFA149_transitionS[i]);
        }
    }

    class DFA149 extends DFA {

        public DFA149(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 149;
            this.eot = DFA149_eot;
            this.eof = DFA149_eof;
            this.min = DFA149_min;
            this.max = DFA149_max;
            this.accept = DFA149_accept;
            this.special = DFA149_special;
            this.transition = DFA149_transition;
        }
        public String getDescription() {
            return "()+ loopback of 280:142: ( minimixture | fw | verb | quantity2Node | nnyield | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA149_2 = input.LA(1);

                         
                        int index149_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred396_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred404_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred405_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred408_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred411_ChemicalChunker()) ) {s = 133;}

                         
                        input.seek(index149_2);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA149_3 = input.LA(1);

                         
                        int index149_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred396_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred403_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred404_ChemicalChunker()) ) {s = 131;}

                        else if ( (((synpred405_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred405_ChemicalChunker())) ) {s = 132;}

                        else if ( ((synpred408_ChemicalChunker()||(synpred408_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 64;}

                         
                        input.seek(index149_3);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA149_4 = input.LA(1);

                         
                        int index149_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred397_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred408_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index149_4);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA149_40 = input.LA(1);

                         
                        int index149_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred398_ChemicalChunker()) ) {s = 5;}

                        else if ( (synpred408_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index149_40);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA149_45 = input.LA(1);

                         
                        int index149_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred399_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred404_ChemicalChunker()) ) {s = 131;}

                        else if ( (((synpred405_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred405_ChemicalChunker())) ) {s = 132;}

                        else if ( ((synpred408_ChemicalChunker()||(synpred408_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 64;}

                        else if ( (synpred410_ChemicalChunker()) ) {s = 137;}

                         
                        input.seek(index149_45);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA149_46 = input.LA(1);

                         
                        int index149_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred399_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred404_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred405_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred408_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index149_46);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA149_47 = input.LA(1);

                         
                        int index149_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred399_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred404_ChemicalChunker()) ) {s = 131;}

                        else if ( (((synpred405_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred405_ChemicalChunker())) ) {s = 132;}

                        else if ( ((synpred408_ChemicalChunker()||(synpred408_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 64;}

                         
                        input.seek(index149_47);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA149_48 = input.LA(1);

                         
                        int index149_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred408_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index149_48);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA149_51 = input.LA(1);

                         
                        int index149_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred403_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred404_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred408_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred412_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index149_51);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA149_52 = input.LA(1);

                         
                        int index149_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred403_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred404_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred408_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred412_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index149_52);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA149_53 = input.LA(1);

                         
                        int index149_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred403_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred404_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred408_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred412_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index149_53);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA149_54 = input.LA(1);

                         
                        int index149_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred403_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred404_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred408_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred412_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index149_54);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA149_55 = input.LA(1);

                         
                        int index149_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred403_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred404_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred408_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred412_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index149_55);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA149_56 = input.LA(1);

                         
                        int index149_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred403_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred404_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred408_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred412_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index149_56);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA149_57 = input.LA(1);

                         
                        int index149_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred403_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred404_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred408_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index149_57);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA149_58 = input.LA(1);

                         
                        int index149_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred405_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred408_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index149_58);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA149_59 = input.LA(1);

                         
                        int index149_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred405_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred405_ChemicalChunker())) ) {s = 132;}

                        else if ( ((synpred408_ChemicalChunker()||(synpred408_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 64;}

                         
                        input.seek(index149_59);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA149_60 = input.LA(1);

                         
                        int index149_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred405_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred405_ChemicalChunker())) ) {s = 132;}

                        else if ( ((synpred408_ChemicalChunker()||(synpred408_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 64;}

                         
                        input.seek(index149_60);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA149_61 = input.LA(1);

                         
                        int index149_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred405_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred408_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index149_61);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA149_63 = input.LA(1);

                         
                        int index149_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred407_ChemicalChunker()) ) {s = 140;}

                        else if ( (synpred408_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index149_63);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 149, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA152_static {
    static final String DFA152_eotS =
        "\u0093\uffff";
    static final String DFA152_eofS =
        "\1\5\u0092\uffff";
    static final String DFA152_minS =
        "\1\46\4\0\u008e\uffff";
    static final String DFA152_maxS =
        "\1\u00b4\4\0\u008e\uffff";
    static final String DFA152_acceptS =
        "\5\uffff\1\3\u008b\uffff\1\1\1\2";
    static final String DFA152_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008e\uffff}>";
    static final String[] DFA152_transitionS = {
            "\1\4\146\5\1\2\1\5\1\3\2\5\1\1\42\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA152_eot = DFA.unpackEncodedString(DFA152_static.DFA152_eotS);
    static final short[] DFA152_eof = DFA.unpackEncodedString(DFA152_static.DFA152_eofS);
    static final char[] DFA152_min = DFA.unpackEncodedStringToUnsignedChars(DFA152_static.DFA152_minS);
    static final char[] DFA152_max = DFA.unpackEncodedStringToUnsignedChars(DFA152_static.DFA152_maxS);
    static final short[] DFA152_accept = DFA.unpackEncodedString(DFA152_static.DFA152_acceptS);
    static final short[] DFA152_special = DFA.unpackEncodedString(DFA152_static.DFA152_specialS);
    static final short[][] DFA152_transition;

    static {
        int numStates = DFA152_static.DFA152_transitionS.length;
        DFA152_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA152_transition[i] = DFA.unpackEncodedString(DFA152_static.DFA152_transitionS[i]);
        }
    }

    class DFA152 extends DFA {

        public DFA152(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 152;
            this.eot = DFA152_eot;
            this.eof = DFA152_eof;
            this.min = DFA152_min;
            this.max = DFA152_max;
            this.accept = DFA152_accept;
            this.special = DFA152_special;
            this.transition = DFA152_transition;
        }
        public String getDescription() {
            return "287:30: ( identifierOrBracketedIdentifier | numeric )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA152_1 = input.LA(1);

                         
                        int index152_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred418_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred419_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index152_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA152_2 = input.LA(1);

                         
                        int index152_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred418_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index152_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA152_3 = input.LA(1);

                         
                        int index152_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred418_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index152_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA152_4 = input.LA(1);

                         
                        int index152_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred419_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index152_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 152, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA161_static {
    static final String DFA161_eotS =
        "\13\uffff";
    static final String DFA161_eofS =
        "\13\uffff";
    static final String DFA161_minS =
        "\1\46\1\45\1\uffff\1\46\1\45\1\46\2\45\2\0\1\uffff";
    static final String DFA161_maxS =
        "\1\u00b4\1\45\1\uffff\1\u009c\1\45\1\u00b4\2\45\2\0\1\uffff";
    static final String DFA161_acceptS =
        "\2\uffff\1\2\7\uffff\1\1";
    static final String DFA161_specialS =
        "\10\uffff\1\0\1\1\1\uffff}>";
    static final String[] DFA161_transitionS = {
            "\6\2\1\uffff\2\2\20\uffff\2\2\1\uffff\1\2\1\uffff\21\2\4\uffff"+
            "\2\2\11\uffff\1\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\1\uffff\2\2\3\uffff"+
            "\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff"+
            "\1\1\3\2\1\uffff\4\2\1\uffff\10\2\4\uffff\1\2\10\uffff\4\2",
            "\1\3",
            "",
            "\3\2\3\uffff\2\2\1\uffff\1\2\21\uffff\3\2\1\uffff\2\2\2\uffff"+
            "\1\2\7\uffff\1\2\62\uffff\1\4\1\2\2\uffff\1\2\1\uffff\1\2\2"+
            "\uffff\1\2\1\uffff\1\2\2\uffff\1\2\4\uffff\3\2\2\uffff\1\2",
            "\1\5",
            "\1\7\5\2\1\uffff\2\2\20\uffff\2\2\1\uffff\1\2\1\uffff\21\2"+
            "\4\uffff\2\2\11\uffff\1\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1"+
            "\2\1\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\1\uffff\2"+
            "\2\3\uffff\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1"+
            "\2\2\uffff\1\6\3\2\1\uffff\4\2\1\uffff\10\2\4\uffff\1\2\10\uffff"+
            "\4\2",
            "\1\10",
            "\1\11",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA161_eot = DFA.unpackEncodedString(DFA161_static.DFA161_eotS);
    static final short[] DFA161_eof = DFA.unpackEncodedString(DFA161_static.DFA161_eofS);
    static final char[] DFA161_min = DFA.unpackEncodedStringToUnsignedChars(DFA161_static.DFA161_minS);
    static final char[] DFA161_max = DFA.unpackEncodedStringToUnsignedChars(DFA161_static.DFA161_maxS);
    static final short[] DFA161_accept = DFA.unpackEncodedString(DFA161_static.DFA161_acceptS);
    static final short[] DFA161_special = DFA.unpackEncodedString(DFA161_static.DFA161_specialS);
    static final short[][] DFA161_transition;

    static {
        int numStates = DFA161_static.DFA161_transitionS.length;
        DFA161_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA161_transition[i] = DFA.unpackEncodedString(DFA161_static.DFA161_transitionS[i]);
        }
    }

    class DFA161 extends DFA {

        public DFA161(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = DFA161_eot;
            this.eof = DFA161_eof;
            this.min = DFA161_min;
            this.max = DFA161_max;
            this.accept = DFA161_accept;
            this.special = DFA161_special;
            this.transition = DFA161_transition;
        }
        public String getDescription() {
            return "299:9: ( numericratio | nounratio )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA161_8 = input.LA(1);

                         
                        int index161_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred430_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index161_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA161_9 = input.LA(1);

                         
                        int index161_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred430_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index161_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 161, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA178_static {
    static final String DFA178_eotS =
        "\110\uffff";
    static final String DFA178_eofS =
        "\110\uffff";
    static final String DFA178_minS =
        "\1\46\17\uffff\1\0\67\uffff";
    static final String DFA178_maxS =
        "\1\u00b4\17\uffff\1\0\67\uffff";
    static final String DFA178_acceptS =
        "\1\uffff\1\2\105\uffff\1\1";
    static final String DFA178_specialS =
        "\20\uffff\1\0\67\uffff}>";
    static final String[] DFA178_transitionS = {
            "\6\1\1\uffff\2\1\20\uffff\2\1\1\uffff\1\1\1\uffff\21\1\4\uffff"+
            "\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff"+
            "\1\1\2\uffff\1\20\5\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\107\4\1\1\uffff\4\1\1\uffff\15\1\10\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA178_eot = DFA.unpackEncodedString(DFA178_static.DFA178_eotS);
    static final short[] DFA178_eof = DFA.unpackEncodedString(DFA178_static.DFA178_eofS);
    static final char[] DFA178_min = DFA.unpackEncodedStringToUnsignedChars(DFA178_static.DFA178_minS);
    static final char[] DFA178_max = DFA.unpackEncodedStringToUnsignedChars(DFA178_static.DFA178_maxS);
    static final short[] DFA178_accept = DFA.unpackEncodedString(DFA178_static.DFA178_acceptS);
    static final short[] DFA178_special = DFA.unpackEncodedString(DFA178_static.DFA178_specialS);
    static final short[][] DFA178_transition;

    static {
        int numStates = DFA178_static.DFA178_transitionS.length;
        DFA178_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA178_transition[i] = DFA.unpackEncodedString(DFA178_static.DFA178_transitionS[i]);
        }
    }

    class DFA178 extends DFA {

        public DFA178(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 178;
            this.eot = DFA178_eot;
            this.eof = DFA178_eof;
            this.min = DFA178_min;
            this.max = DFA178_max;
            this.accept = DFA178_accept;
            this.special = DFA178_special;
            this.transition = DFA178_transition;
        }
        public String getDescription() {
            return "()* loopback of 102:35: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA178_16 = input.LA(1);

                         
                        int index178_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index178_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 178, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA180_static {
    static final String DFA180_eotS =
        "\17\uffff";
    static final String DFA180_eofS =
        "\17\uffff";
    static final String DFA180_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA180_maxS =
        "\1\u009e\6\45\1\uffff\6\0\1\uffff";
    static final String DFA180_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA180_specialS =
        "\10\uffff\1\3\1\4\1\5\1\1\1\0\1\2\1\uffff}>";
    static final String[] DFA180_transitionS = {
            "\1\7\1\4\1\6\4\uffff\1\5\1\7\30\uffff\1\7\1\uffff\1\7\12\uffff"+
            "\1\7\60\uffff\1\7\5\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff"+
            "\1\7\4\uffff\1\1\1\2\1\3\4\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA180_eot = DFA.unpackEncodedString(DFA180_static.DFA180_eotS);
    static final short[] DFA180_eof = DFA.unpackEncodedString(DFA180_static.DFA180_eofS);
    static final char[] DFA180_min = DFA.unpackEncodedStringToUnsignedChars(DFA180_static.DFA180_minS);
    static final char[] DFA180_max = DFA.unpackEncodedStringToUnsignedChars(DFA180_static.DFA180_maxS);
    static final short[] DFA180_accept = DFA.unpackEncodedString(DFA180_static.DFA180_acceptS);
    static final short[] DFA180_special = DFA.unpackEncodedString(DFA180_static.DFA180_specialS);
    static final short[][] DFA180_transition;

    static {
        int numStates = DFA180_static.DFA180_transitionS.length;
        DFA180_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA180_transition[i] = DFA.unpackEncodedString(DFA180_static.DFA180_transitionS[i]);
        }
    }

    class DFA180 extends DFA {

        public DFA180(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 180;
            this.eot = DFA180_eot;
            this.eof = DFA180_eof;
            this.min = DFA180_min;
            this.max = DFA180_max;
            this.accept = DFA180_accept;
            this.special = DFA180_special;
            this.transition = DFA180_transition;
        }
        public String getDescription() {
            return "111:73: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA180_12 = input.LA(1);

                         
                        int index180_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index180_12);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA180_11 = input.LA(1);

                         
                        int index180_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index180_11);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA180_13 = input.LA(1);

                         
                        int index180_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index180_13);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA180_8 = input.LA(1);

                         
                        int index180_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index180_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA180_9 = input.LA(1);

                         
                        int index180_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index180_9);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA180_10 = input.LA(1);

                         
                        int index180_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index180_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 180, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA182_static {
    static final String DFA182_eotS =
        "\21\uffff";
    static final String DFA182_eofS =
        "\21\uffff";
    static final String DFA182_minS =
        "\1\46\5\0\13\uffff";
    static final String DFA182_maxS =
        "\1\u0099\5\0\13\uffff";
    static final String DFA182_acceptS =
        "\6\uffff\1\1\6\uffff\1\2\3\uffff";
    static final String DFA182_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\13\uffff}>";
    static final String[] DFA182_transitionS = {
            "\1\4\2\6\4\uffff\1\6\1\15\30\uffff\1\15\1\uffff\1\3\12\uffff"+
            "\1\6\60\uffff\1\5\5\uffff\1\15\1\uffff\1\15\1\uffff\1\1\2\uffff"+
            "\1\2\4\uffff\3\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA182_eot = DFA.unpackEncodedString(DFA182_static.DFA182_eotS);
    static final short[] DFA182_eof = DFA.unpackEncodedString(DFA182_static.DFA182_eofS);
    static final char[] DFA182_min = DFA.unpackEncodedStringToUnsignedChars(DFA182_static.DFA182_minS);
    static final char[] DFA182_max = DFA.unpackEncodedStringToUnsignedChars(DFA182_static.DFA182_maxS);
    static final short[] DFA182_accept = DFA.unpackEncodedString(DFA182_static.DFA182_acceptS);
    static final short[] DFA182_special = DFA.unpackEncodedString(DFA182_static.DFA182_specialS);
    static final short[][] DFA182_transition;

    static {
        int numStates = DFA182_static.DFA182_transitionS.length;
        DFA182_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA182_transition[i] = DFA.unpackEncodedString(DFA182_static.DFA182_transitionS[i]);
        }
    }

    class DFA182 extends DFA {

        public DFA182(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 182;
            this.eot = DFA182_eot;
            this.eof = DFA182_eof;
            this.min = DFA182_min;
            this.max = DFA182_max;
            this.accept = DFA182_accept;
            this.special = DFA182_special;
            this.transition = DFA182_transition;
        }
        public String getDescription() {
            return "111:83: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA182_1 = input.LA(1);

                         
                        int index182_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index182_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA182_2 = input.LA(1);

                         
                        int index182_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index182_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA182_3 = input.LA(1);

                         
                        int index182_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index182_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA182_4 = input.LA(1);

                         
                        int index182_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index182_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA182_5 = input.LA(1);

                         
                        int index182_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index182_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 182, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA195_static {
    static final String DFA195_eotS =
        "\25\uffff";
    static final String DFA195_eofS =
        "\25\uffff";
    static final String DFA195_minS =
        "\1\46\15\uffff\1\0\6\uffff";
    static final String DFA195_maxS =
        "\1\u009c\15\uffff\1\0\6\uffff";
    static final String DFA195_acceptS =
        "\1\uffff\1\2\22\uffff\1\1";
    static final String DFA195_specialS =
        "\16\uffff\1\0\6\uffff}>";
    static final String[] DFA195_transitionS = {
            "\3\1\4\uffff\1\1\21\uffff\1\1\7\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\6\uffff\1\1\4\uffff\1\1\12\uffff\1\1\40\uffff\1\16\11\uffff"+
            "\1\1\1\uffff\1\24\2\1\3\uffff\3\1\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA195_eot = DFA.unpackEncodedString(DFA195_static.DFA195_eotS);
    static final short[] DFA195_eof = DFA.unpackEncodedString(DFA195_static.DFA195_eofS);
    static final char[] DFA195_min = DFA.unpackEncodedStringToUnsignedChars(DFA195_static.DFA195_minS);
    static final char[] DFA195_max = DFA.unpackEncodedStringToUnsignedChars(DFA195_static.DFA195_maxS);
    static final short[] DFA195_accept = DFA.unpackEncodedString(DFA195_static.DFA195_acceptS);
    static final short[] DFA195_special = DFA.unpackEncodedString(DFA195_static.DFA195_specialS);
    static final short[][] DFA195_transition;

    static {
        int numStates = DFA195_static.DFA195_transitionS.length;
        DFA195_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA195_transition[i] = DFA.unpackEncodedString(DFA195_static.DFA195_transitionS[i]);
        }
    }

    class DFA195 extends DFA {

        public DFA195(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 195;
            this.eot = DFA195_eot;
            this.eof = DFA195_eof;
            this.min = DFA195_min;
            this.max = DFA195_max;
            this.accept = DFA195_accept;
            this.special = DFA195_special;
            this.transition = DFA195_transition;
        }
        public String getDescription() {
            return "()* loopback of 167:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA195_14 = input.LA(1);

                         
                        int index195_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index195_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 195, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA203_static {
    static final String DFA203_eotS =
        "\11\uffff";
    static final String DFA203_eofS =
        "\11\uffff";
    static final String DFA203_minS =
        "\1\u008f\1\45\1\46\1\45\2\uffff\1\54\1\45\1\101";
    static final String DFA203_maxS =
        "\1\u008f\1\45\1\u009e\1\45\2\uffff\1\u009e\1\45\1\u009e";
    static final String DFA203_acceptS =
        "\4\uffff\1\1\1\2\3\uffff";
    static final String DFA203_specialS =
        "\11\uffff}>";
    static final String[] DFA203_transitionS = {
            "\1\1",
            "\1\2",
            "\1\4\42\uffff\1\4\73\uffff\1\5\13\uffff\1\5\1\3\2\uffff\1"+
            "\5\10\uffff\1\5",
            "\1\6",
            "",
            "",
            "\1\4\24\uffff\3\4\1\uffff\2\4\76\uffff\1\5\4\uffff\1\4\6\uffff"+
            "\1\5\1\7\2\uffff\1\5\6\uffff\1\4\1\uffff\1\5",
            "\1\10",
            "\3\4\1\uffff\2\4\76\uffff\1\5\12\uffff\2\5\1\7\2\uffff\1\5"+
            "\10\uffff\1\5"
    };
    }

    static final short[] DFA203_eot = DFA.unpackEncodedString(DFA203_static.DFA203_eotS);
    static final short[] DFA203_eof = DFA.unpackEncodedString(DFA203_static.DFA203_eofS);
    static final char[] DFA203_min = DFA.unpackEncodedStringToUnsignedChars(DFA203_static.DFA203_minS);
    static final char[] DFA203_max = DFA.unpackEncodedStringToUnsignedChars(DFA203_static.DFA203_maxS);
    static final short[] DFA203_accept = DFA.unpackEncodedString(DFA203_static.DFA203_acceptS);
    static final short[] DFA203_special = DFA.unpackEncodedString(DFA203_static.DFA203_specialS);
    static final short[][] DFA203_transition;

    static {
        int numStates = DFA203_static.DFA203_transitionS.length;
        DFA203_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA203_transition[i] = DFA.unpackEncodedString(DFA203_static.DFA203_transitionS[i]);
        }
    }

    class DFA203 extends DFA {

        public DFA203(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 203;
            this.eot = DFA203_eot;
            this.eof = DFA203_eof;
            this.min = DFA203_min;
            this.max = DFA203_max;
            this.accept = DFA203_accept;
            this.special = DFA203_special;
            this.transition = DFA203_transition;
        }
        public String getDescription() {
            return "198:59: ( quantity1Node | citationStructure )";
        }
    }
 

    static class FOLLOW_sentences_in_document202_static {
    public static final BitSet FOLLOW_sentences_in_document202 = new BitSet(new long[]{0xFFFFFFC000000002L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFDFFL});

    }static class FOLLOW_sentenceStructure_in_sentences223_static {
    public static final BitSet FOLLOW_sentenceStructure_in_sentences223 = new BitSet(new long[]{0xFFFFFFC000000002L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});

    }static class FOLLOW_unmatchedPhrase_in_sentences225_static {
    public static final BitSet FOLLOW_unmatchedPhrase_in_sentences225 = new BitSet(new long[]{0xFFFFFFC000000002L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});

    }static class FOLLOW_stop_in_sentences229_static {
    public static final BitSet FOLLOW_stop_in_sentences229 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});

    }static class FOLLOW_nounphrase_in_sentenceStructure239_static {
    public static final BitSet FOLLOW_nounphrase_in_sentenceStructure239 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEE8BFL});

    }static class FOLLOW_verbphrase_in_sentenceStructure241_static {
    public static final BitSet FOLLOW_verbphrase_in_sentenceStructure241 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEE8BFL});

    }static class FOLLOW_prepphrase_in_sentenceStructure243_static {
    public static final BitSet FOLLOW_prepphrase_in_sentenceStructure243 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEE8BFL});

    }static class FOLLOW_prepphraseAfter_in_sentenceStructure245_static {
    public static final BitSet FOLLOW_prepphraseAfter_in_sentenceStructure245 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEE8BFL});

    }static class FOLLOW_advAdj_in_sentenceStructure250_static {
    public static final BitSet FOLLOW_advAdj_in_sentenceStructure250 = new BitSet(new long[]{0x0000218000000002L,0x0000000000000000L,0x000000F003820038L});

    }static class FOLLOW_colon_in_sentenceStructure252_static {
    public static final BitSet FOLLOW_colon_in_sentenceStructure252 = new BitSet(new long[]{0x0000218000000002L,0x0000000000000000L,0x000000F003820038L});

    }static class FOLLOW_conjunction_in_sentenceStructure257_static {
    public static final BitSet FOLLOW_conjunction_in_sentenceStructure257 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020028L});

    }static class FOLLOW_rbconj_in_sentenceStructure259_static {
    public static final BitSet FOLLOW_rbconj_in_sentenceStructure259 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020028L});

    }static class FOLLOW_comma_in_sentenceStructure261_static {
    public static final BitSet FOLLOW_comma_in_sentenceStructure261 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020028L});

    }static class FOLLOW_unmatchedToken_in_unmatchedPhrase273_static {
    public static final BitSet FOLLOW_unmatchedToken_in_unmatchedPhrase273 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_unmatchedToken292_static {
    public static final BitSet FOLLOW_numeric_in_unmatchedToken292 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_unmatchedToken294_static {
    public static final BitSet FOLLOW_advAdj_in_unmatchedToken294 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_tmunicode_in_unmatchedToken296_static {
    public static final BitSet FOLLOW_tmunicode_in_unmatchedToken296 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdunicode_in_unmatchedToken298_static {
    public static final BitSet FOLLOW_cdunicode_in_unmatchedToken298 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjcomp_in_unmatchedToken300_static {
    public static final BitSet FOLLOW_jjcomp_in_unmatchedToken300 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_unmatchedToken302_static {
    public static final BitSet FOLLOW_inAll_in_unmatchedToken302 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_unmatchedToken306_static {
    public static final BitSet FOLLOW_nnexample_in_unmatchedToken306 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_unmatchedToken308_static {
    public static final BitSet FOLLOW_nnstate_in_unmatchedToken308 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_unmatchedToken310_static {
    public static final BitSet FOLLOW_nntime_in_unmatchedToken310 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmass_in_unmatchedToken312_static {
    public static final BitSet FOLLOW_nnmass_in_unmatchedToken312 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmolar_in_unmatchedToken314_static {
    public static final BitSet FOLLOW_nnmolar_in_unmatchedToken314 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnamount_in_unmatchedToken316_static {
    public static final BitSet FOLLOW_nnamount_in_unmatchedToken316 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_unmatchedToken318_static {
    public static final BitSet FOLLOW_nnatmosphere_in_unmatchedToken318 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nneq_in_unmatchedToken320_static {
    public static final BitSet FOLLOW_nneq_in_unmatchedToken320 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvol_in_unmatchedToken322_static {
    public static final BitSet FOLLOW_nnvol_in_unmatchedToken322 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_unmatchedToken324_static {
    public static final BitSet FOLLOW_nnchementity_in_unmatchedToken324 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_unmatchedToken326_static {
    public static final BitSet FOLLOW_nntemp_in_unmatchedToken326 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_unmatchedToken328_static {
    public static final BitSet FOLLOW_nnph_in_unmatchedToken328 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnflash_in_unmatchedToken330_static {
    public static final BitSet FOLLOW_nnflash_in_unmatchedToken330 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_unmatchedToken332_static {
    public static final BitSet FOLLOW_nngeneral_in_unmatchedToken332 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmethod_in_unmatchedToken334_static {
    public static final BitSet FOLLOW_nnmethod_in_unmatchedToken334 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_unmatchedToken336_static {
    public static final BitSet FOLLOW_nnpressure_in_unmatchedToken336 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncolumn_in_unmatchedToken338_static {
    public static final BitSet FOLLOW_nncolumn_in_unmatchedToken338 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchromatography_in_unmatchedToken340_static {
    public static final BitSet FOLLOW_nnchromatography_in_unmatchedToken340 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvacuum_in_unmatchedToken342_static {
    public static final BitSet FOLLOW_nnvacuum_in_unmatchedToken342 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncycle_in_unmatchedToken344_static {
    public static final BitSet FOLLOW_nncycle_in_unmatchedToken344 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntimes_in_unmatchedToken346_static {
    public static final BitSet FOLLOW_nntimes_in_unmatchedToken346 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_unmatchedToken350_static {
    public static final BitSet FOLLOW_oscarcm_in_unmatchedToken350 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaronts_in_unmatchedToken352_static {
    public static final BitSet FOLLOW_oscaronts_in_unmatchedToken352 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_unmatchedToken354_static {
    public static final BitSet FOLLOW_oscarase_in_unmatchedToken354 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_unmatchedToken356_static {
    public static final BitSet FOLLOW_verb_in_unmatchedToken356 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_unmatchedToken358_static {
    public static final BitSet FOLLOW_nnadd_in_unmatchedToken358 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_unmatchedToken360_static {
    public static final BitSet FOLLOW_nnmixture_in_unmatchedToken360 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnapparatus_in_unmatchedToken362_static {
    public static final BitSet FOLLOW_nnapparatus_in_unmatchedToken362 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnconcentrate_in_unmatchedToken364_static {
    public static final BitSet FOLLOW_nnconcentrate_in_unmatchedToken364 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nndry_in_unmatchedToken366_static {
    public static final BitSet FOLLOW_nndry_in_unmatchedToken366 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnextract_in_unmatchedToken368_static {
    public static final BitSet FOLLOW_nnextract_in_unmatchedToken368 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnfilter_in_unmatchedToken370_static {
    public static final BitSet FOLLOW_nnfilter_in_unmatchedToken370 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnprecipitate_in_unmatchedToken372_static {
    public static final BitSet FOLLOW_nnprecipitate_in_unmatchedToken372 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpurify_in_unmatchedToken374_static {
    public static final BitSet FOLLOW_nnpurify_in_unmatchedToken374 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnremove_in_unmatchedToken376_static {
    public static final BitSet FOLLOW_nnremove_in_unmatchedToken376 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnsynthesize_in_unmatchedToken378_static {
    public static final BitSet FOLLOW_nnsynthesize_in_unmatchedToken378 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_unmatchedToken380_static {
    public static final BitSet FOLLOW_nnyield_in_unmatchedToken380 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_unmatchedToken382_static {
    public static final BitSet FOLLOW_colon_in_unmatchedToken382 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apost_in_unmatchedToken384_static {
    public static final BitSet FOLLOW_apost_in_unmatchedToken384 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_unmatchedToken386_static {
    public static final BitSet FOLLOW_neg_in_unmatchedToken386 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_unmatchedToken388_static {
    public static final BitSet FOLLOW_dash_in_unmatchedToken388 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpercent_in_unmatchedToken390_static {
    public static final BitSet FOLLOW_nnpercent_in_unmatchedToken390 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_unmatchedToken392_static {
    public static final BitSet FOLLOW_lsqb_in_unmatchedToken392 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rsqb_in_unmatchedToken394_static {
    public static final BitSet FOLLOW_rsqb_in_unmatchedToken394 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_unmatchedToken396_static {
    public static final BitSet FOLLOW_lrb_in_unmatchedToken396 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rrb_in_unmatchedToken398_static {
    public static final BitSet FOLLOW_rrb_in_unmatchedToken398 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_unmatchedToken402_static {
    public static final BitSet FOLLOW_cc_in_unmatchedToken402 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_unmatchedToken404_static {
    public static final BitSet FOLLOW_dt_in_unmatchedToken404 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dtTHE_in_unmatchedToken406_static {
    public static final BitSet FOLLOW_dtTHE_in_unmatchedToken406 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_unmatchedToken408_static {
    public static final BitSet FOLLOW_fw_in_unmatchedToken408 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_unmatchedToken410_static {
    public static final BitSet FOLLOW_md_in_unmatchedToken410 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_unmatchedToken412_static {
    public static final BitSet FOLLOW_nn_in_unmatchedToken412 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nns_in_unmatchedToken414_static {
    public static final BitSet FOLLOW_nns_in_unmatchedToken414 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_unmatchedToken416_static {
    public static final BitSet FOLLOW_nnp_in_unmatchedToken416 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_in_unmatchedToken418_static {
    public static final BitSet FOLLOW_prp_in_unmatchedToken418 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_poss_in_unmatchedToken420_static {
    public static final BitSet FOLLOW_prp_poss_in_unmatchedToken420 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbconj_in_unmatchedToken422_static {
    public static final BitSet FOLLOW_rbconj_in_unmatchedToken422 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_unmatchedToken424_static {
    public static final BitSet FOLLOW_sym_in_unmatchedToken424 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_uh_in_unmatchedToken426_static {
    public static final BitSet FOLLOW_uh_in_unmatchedToken426 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_clause_in_unmatchedToken428_static {
    public static final BitSet FOLLOW_clause_in_unmatchedToken428 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_unmatchedToken430_static {
    public static final BitSet FOLLOW_comma_in_unmatchedToken430 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ls_in_unmatchedToken432_static {
    public static final BitSet FOLLOW_ls_in_unmatchedToken432 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnps_in_unmatchedToken434_static {
    public static final BitSet FOLLOW_nnps_in_unmatchedToken434 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pos_in_unmatchedToken436_static {
    public static final BitSet FOLLOW_pos_in_unmatchedToken436 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnidentifier_in_unmatchedToken438_static {
    public static final BitSet FOLLOW_nnidentifier_in_unmatchedToken438 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure_in_nounphrase448_static {
    public static final BitSet FOLLOW_nounphraseStructure_in_nounphrase448 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure1_in_nounphraseStructure467_static {
    public static final BitSet FOLLOW_nounphraseStructure1_in_nounphraseStructure467 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure2_in_nounphraseStructure469_static {
    public static final BitSet FOLLOW_nounphraseStructure2_in_nounphraseStructure469 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_multiApparatus_in_nounphraseStructure1478_static {
    public static final BitSet FOLLOW_multiApparatus_in_nounphraseStructure1478 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dtTHE_in_nounphraseStructure2495_static {
    public static final BitSet FOLLOW_dtTHE_in_nounphraseStructure2495 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_dt_in_nounphraseStructure2498_static {
    public static final BitSet FOLLOW_dt_in_nounphraseStructure2498 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_nounphraseContent_in_nounphraseStructure2501_static {
    public static final BitSet FOLLOW_nounphraseContent_in_nounphraseStructure2501 = new BitSet(new long[]{0x81046FC000000002L,0x68A0A850061FFFF5L,0x001E01FFF7BEE824L});

    }static class FOLLOW_conjunction_in_nounphraseStructure2505_static {
    public static final BitSet FOLLOW_conjunction_in_nounphraseStructure2505 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BEE824L});

    }static class FOLLOW_nounphraseContent_in_nounphraseStructure2508_static {
    public static final BitSet FOLLOW_nounphraseContent_in_nounphraseStructure2508 = new BitSet(new long[]{0x81046FC000000002L,0x68A0A850061FFFF5L,0x001E01FFF7BEE824L});

    }static class FOLLOW_prepphraseOf_in_nounphraseStructure2513_static {
    public static final BitSet FOLLOW_prepphraseOf_in_nounphraseStructure2513 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_nounphraseStructure2516_static {
    public static final BitSet FOLLOW_prepphraseIN_in_nounphraseStructure2516 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_nounphraseContent528_static {
    public static final BitSet FOLLOW_advAdj_in_nounphraseContent528 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCA824L});

    }static class FOLLOW_dissolvePhrase_in_nounphraseContent533_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseContent533 = new BitSet(new long[]{0x80006FC000000002L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_ratio_in_nounphraseContent535_static {
    public static final BitSet FOLLOW_ratio_in_nounphraseContent535 = new BitSet(new long[]{0x80006FC000000002L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_noun_in_nounphraseContent537_static {
    public static final BitSet FOLLOW_noun_in_nounphraseContent537 = new BitSet(new long[]{0x80006FC000000002L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_numeric_in_nounphraseContent539_static {
    public static final BitSet FOLLOW_numeric_in_nounphraseContent539 = new BitSet(new long[]{0x80006FC000000002L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_dissolveStructure_in_dissolvePhrase551_static {
    public static final BitSet FOLLOW_dissolveStructure_in_dissolvePhrase551 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_dissolvePhrase553_static {
    public static final BitSet FOLLOW_lrb_in_dissolvePhrase553 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_dissolveStructure_in_dissolvePhrase555_static {
    public static final BitSet FOLLOW_dissolveStructure_in_dissolvePhrase555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_dissolvePhrase557_static {
    public static final BitSet FOLLOW_rrb_in_dissolvePhrase557 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_dissolveStructure582_static {
    public static final BitSet FOLLOW_adj_in_dissolveStructure582 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_nnp_in_dissolveStructure586_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nnchementity_in_dissolveStructure588_static {
    public static final BitSet FOLLOW_nnchementity_in_dissolveStructure588 = new BitSet(new long[]{0x0004000000000000L});

    }static class FOLLOW_nnp_in_dissolveStructure591_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure591 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_molecule_in_dissolveStructure594_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure594 = new BitSet(new long[]{0x0004000000000000L});

    }static class FOLLOW_unnamedmolecule_in_dissolveStructure596_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure596 = new BitSet(new long[]{0x0004000000000000L});

    }static class FOLLOW_inin_in_dissolveStructure601_static {
    public static final BitSet FOLLOW_inin_in_dissolveStructure601 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x000000004384E820L});

    }static class FOLLOW_dtTHE_in_dissolveStructure603_static {
    public static final BitSet FOLLOW_dtTHE_in_dissolveStructure603 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_adj_in_dissolveStructure606_static {
    public static final BitSet FOLLOW_adj_in_dissolveStructure606 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_nnp_in_dissolveStructure609_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure609 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_molecule_in_dissolveStructure613_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure613 = new BitSet(new long[]{0x0004000000000002L,0x0000000000000000L,0x0000000000020020L});

    }static class FOLLOW_unnamedmolecule_in_dissolveStructure615_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure615 = new BitSet(new long[]{0x0004000000000002L,0x0000000000000000L,0x0000000000020020L});

    }static class FOLLOW_conjunction_in_dissolveStructure619_static {
    public static final BitSet FOLLOW_conjunction_in_dissolveStructure619 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000003848020L});

    }static class FOLLOW_molecule_in_dissolveStructure621_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure621 = new BitSet(new long[]{0x0004000000000002L,0x0000000000000000L,0x0000000000020020L});

    }static class FOLLOW_verbphraseStructure_in_verbphrase636_static {
    public static final BitSet FOLLOW_verbphraseStructure_in_verbphrase636 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_verbphraseStructure654_static {
    public static final BitSet FOLLOW_dt_in_verbphraseStructure654 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_to_in_verbphraseStructure657_static {
    public static final BitSet FOLLOW_to_in_verbphraseStructure657 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_inAll_in_verbphraseStructure660_static {
    public static final BitSet FOLLOW_inAll_in_verbphraseStructure660 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_inafter_in_verbphraseStructure663_static {
    public static final BitSet FOLLOW_inafter_in_verbphraseStructure663 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_md_in_verbphraseStructure667_static {
    public static final BitSet FOLLOW_md_in_verbphraseStructure667 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_rbconj_in_verbphraseStructure670_static {
    public static final BitSet FOLLOW_rbconj_in_verbphraseStructure670 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_adv_in_verbphraseStructure673_static {
    public static final BitSet FOLLOW_adv_in_verbphraseStructure673 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_adj_in_verbphraseStructure676_static {
    public static final BitSet FOLLOW_adj_in_verbphraseStructure676 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_verb_in_verbphraseStructure679_static {
    public static final BitSet FOLLOW_verb_in_verbphraseStructure679 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_md_in_verbphraseStructure682_static {
    public static final BitSet FOLLOW_md_in_verbphraseStructure682 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_adv_in_verbphraseStructure685_static {
    public static final BitSet FOLLOW_adv_in_verbphraseStructure685 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_adj_in_verbphraseStructure688_static {
    public static final BitSet FOLLOW_adj_in_verbphraseStructure688 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_neg_in_verbphraseStructure691_static {
    public static final BitSet FOLLOW_neg_in_verbphraseStructure691 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_inoff_in_verbphraseStructure697_static {
    public static final BitSet FOLLOW_inoff_in_verbphraseStructure697 = new BitSet(new long[]{0x7FFFA18000000002L,0x0000000000000101L,0x000002F003CE00A0L});

    }static class FOLLOW_cc_in_verbphraseStructure701_static {
    public static final BitSet FOLLOW_cc_in_verbphraseStructure701 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC00A0L});

    }static class FOLLOW_comma_in_verbphraseStructure704_static {
    public static final BitSet FOLLOW_comma_in_verbphraseStructure704 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC0080L});

    }static class FOLLOW_prepphrase_in_verbphraseStructure707_static {
    public static final BitSet FOLLOW_prepphrase_in_verbphraseStructure707 = new BitSet(new long[]{0x7FFFA18000000002L,0x0000000000000101L,0x000002F003CE00A0L});

    }static class FOLLOW_vb_in_verb719_static {
    public static final BitSet FOLLOW_vb_in_verb719 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbp_in_verb721_static {
    public static final BitSet FOLLOW_vbp_in_verb721 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbg_in_verb723_static {
    public static final BitSet FOLLOW_vbg_in_verb723 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbd_in_verb725_static {
    public static final BitSet FOLLOW_vbd_in_verb725 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbz_in_verb727_static {
    public static final BitSet FOLLOW_vbz_in_verb727 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbn_in_verb729_static {
    public static final BitSet FOLLOW_vbn_in_verb729 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbuse_in_verb731_static {
    public static final BitSet FOLLOW_vbuse_in_verb731 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsubmerge_in_verb733_static {
    public static final BitSet FOLLOW_vbsubmerge_in_verb733 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbimmerse_in_verb735_static {
    public static final BitSet FOLLOW_vbimmerse_in_verb735 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_degassMultiVerb_in_verb737_static {
    public static final BitSet FOLLOW_degassMultiVerb_in_verb737 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsubject_in_verb739_static {
    public static final BitSet FOLLOW_vbsubject_in_verb739 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbadd_in_verb741_static {
    public static final BitSet FOLLOW_vbadd_in_verb741 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdilute_in_verb743_static {
    public static final BitSet FOLLOW_vbdilute_in_verb743 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcharge_in_verb745_static {
    public static final BitSet FOLLOW_vbcharge_in_verb745 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcontain_in_verb747_static {
    public static final BitSet FOLLOW_vbcontain_in_verb747 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdrop_in_verb749_static {
    public static final BitSet FOLLOW_vbdrop_in_verb749 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbfill_in_verb751_static {
    public static final BitSet FOLLOW_vbfill_in_verb751 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsuspend_in_verb753_static {
    public static final BitSet FOLLOW_vbsuspend_in_verb753 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbtreat_in_verb755_static {
    public static final BitSet FOLLOW_vbtreat_in_verb755 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbapparatus_in_verb757_static {
    public static final BitSet FOLLOW_vbapparatus_in_verb757 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbconcentrate_in_verb759_static {
    public static final BitSet FOLLOW_vbconcentrate_in_verb759 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcool_in_verb761_static {
    public static final BitSet FOLLOW_vbcool_in_verb761 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_verb763_static {
    public static final BitSet FOLLOW_vbdegass_in_verb763 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdissolve_in_verb765_static {
    public static final BitSet FOLLOW_vbdissolve_in_verb765 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdry_in_verb767_static {
    public static final BitSet FOLLOW_vbdry_in_verb767 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbextract_in_verb769_static {
    public static final BitSet FOLLOW_vbextract_in_verb769 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbfilter_in_verb771_static {
    public static final BitSet FOLLOW_vbfilter_in_verb771 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbheat_in_verb774_static {
    public static final BitSet FOLLOW_vbheat_in_verb774 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbincrease_in_verb776_static {
    public static final BitSet FOLLOW_vbincrease_in_verb776 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbpartition_in_verb778_static {
    public static final BitSet FOLLOW_vbpartition_in_verb778 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbprecipitate_in_verb780_static {
    public static final BitSet FOLLOW_vbprecipitate_in_verb780 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbpurify_in_verb782_static {
    public static final BitSet FOLLOW_vbpurify_in_verb782 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbquench_in_verb784_static {
    public static final BitSet FOLLOW_vbquench_in_verb784 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbrecover_in_verb786_static {
    public static final BitSet FOLLOW_vbrecover_in_verb786 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbremove_in_verb788_static {
    public static final BitSet FOLLOW_vbremove_in_verb788 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbstir_in_verb790_static {
    public static final BitSet FOLLOW_vbstir_in_verb790 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsynthesize_in_verb792_static {
    public static final BitSet FOLLOW_vbsynthesize_in_verb792 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbwait_in_verb794_static {
    public static final BitSet FOLLOW_vbwait_in_verb794 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbwash_in_verb796_static {
    public static final BitSet FOLLOW_vbwash_in_verb796 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbyield_in_verb798_static {
    public static final BitSet FOLLOW_vbyield_in_verb798 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbchange_in_verb800_static {
    public static final BitSet FOLLOW_vbchange_in_verb800 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_degassMultiVerb809_static {
    public static final BitSet FOLLOW_vbdegass_in_degassMultiVerb809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_cc_in_degassMultiVerb811_static {
    public static final BitSet FOLLOW_cc_in_degassMultiVerb811 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});

    }static class FOLLOW_vbfill_in_degassMultiVerb813_static {
    public static final BitSet FOLLOW_vbfill_in_degassMultiVerb813 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounStructure_in_noun822_static {
    public static final BitSet FOLLOW_nounStructure_in_noun822 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_noun825_static {
    public static final BitSet FOLLOW_dash_in_noun825 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_nounStructure_in_noun827_static {
    public static final BitSet FOLLOW_nounStructure_in_noun827 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_prp_in_nounStructure838_static {
    public static final BitSet FOLLOW_prp_in_nounStructure838 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_poss_in_nounStructure840_static {
    public static final BitSet FOLLOW_prp_poss_in_nounStructure840 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_nounStructure842_static {
    public static final BitSet FOLLOW_citation_in_nounStructure842 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycles_in_nounStructure844_static {
    public static final BitSet FOLLOW_cycles_in_nounStructure844 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_nounStructure846_static {
    public static final BitSet FOLLOW_molecule_in_nounStructure846 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_nounStructure848_static {
    public static final BitSet FOLLOW_apparatus_in_nounStructure848 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_nounStructure850_static {
    public static final BitSet FOLLOW_mixture_in_nounStructure850 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_nounStructure852_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_nounStructure852 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_nounStructure854_static {
    public static final BitSet FOLLOW_nnyield_in_nounStructure854 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_nounStructure856_static {
    public static final BitSet FOLLOW_nnstate_in_nounStructure856 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_procedureNode_in_nounStructure858_static {
    public static final BitSet FOLLOW_procedureNode_in_nounStructure858 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_nounStructure860_static {
    public static final BitSet FOLLOW_nn_in_nounStructure860 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nns_in_nounStructure862_static {
    public static final BitSet FOLLOW_nns_in_nounStructure862 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_nounStructure864_static {
    public static final BitSet FOLLOW_nnp_in_nounStructure864 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_nounStructure866_static {
    public static final BitSet FOLLOW_nnadd_in_nounStructure866 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_preparationphrase_in_nounStructure868_static {
    public static final BitSet FOLLOW_preparationphrase_in_nounStructure868 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_nounStructure870_static {
    public static final BitSet FOLLOW_nnexample_in_nounStructure870 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_range_in_nounStructure872_static {
    public static final BitSet FOLLOW_range_in_nounStructure872 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaronts_in_nounStructure874_static {
    public static final BitSet FOLLOW_oscaronts_in_nounStructure874 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_nounStructure876_static {
    public static final BitSet FOLLOW_nntime_in_nounStructure876 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_nounStructure878_static {
    public static final BitSet FOLLOW_nnatmosphere_in_nounStructure878 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_tmunicode_in_nounStructure880_static {
    public static final BitSet FOLLOW_tmunicode_in_nounStructure880 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_nounStructure882_static {
    public static final BitSet FOLLOW_quantity_in_nounStructure882 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_nounStructure884_static {
    public static final BitSet FOLLOW_nnchementity_in_nounStructure884 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_nounStructure886_static {
    public static final BitSet FOLLOW_nntemp_in_nounStructure886 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_nounStructure888_static {
    public static final BitSet FOLLOW_nnph_in_nounStructure888 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnflash_in_nounStructure890_static {
    public static final BitSet FOLLOW_nnflash_in_nounStructure890 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_nounStructure892_static {
    public static final BitSet FOLLOW_nngeneral_in_nounStructure892 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnamount_in_nounStructure894_static {
    public static final BitSet FOLLOW_nnamount_in_nounStructure894 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nneq_in_nounStructure896_static {
    public static final BitSet FOLLOW_nneq_in_nounStructure896 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_nounStructure898_static {
    public static final BitSet FOLLOW_nnpressure_in_nounStructure898 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncolumn_in_nounStructure900_static {
    public static final BitSet FOLLOW_nncolumn_in_nounStructure900 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchromatography_in_nounStructure902_static {
    public static final BitSet FOLLOW_nnchromatography_in_nounStructure902 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvacuum_in_nounStructure904_static {
    public static final BitSet FOLLOW_nnvacuum_in_nounStructure904 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncycle_in_nounStructure906_static {
    public static final BitSet FOLLOW_nncycle_in_nounStructure906 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntimes_in_nounStructure908_static {
    public static final BitSet FOLLOW_nntimes_in_nounStructure908 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnconcentrate_in_nounStructure910_static {
    public static final BitSet FOLLOW_nnconcentrate_in_nounStructure910 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvol_in_nounStructure912_static {
    public static final BitSet FOLLOW_nnvol_in_nounStructure912 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpurify_in_nounStructure914_static {
    public static final BitSet FOLLOW_nnpurify_in_nounStructure914 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnsynthesize_in_nounStructure916_static {
    public static final BitSet FOLLOW_nnsynthesize_in_nounStructure916 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_nounStructure918_static {
    public static final BitSet FOLLOW_nnmixture_in_nounStructure918 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_nounStructure920_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_nounStructure920 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nndry_in_nounStructure922_static {
    public static final BitSet FOLLOW_nndry_in_nounStructure922 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_nounStructure924_static {
    public static final BitSet FOLLOW_numeric_in_nounStructure924 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnextract_in_nounStructure926_static {
    public static final BitSet FOLLOW_nnextract_in_nounStructure926 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnfilter_in_nounStructure928_static {
    public static final BitSet FOLLOW_nnfilter_in_nounStructure928 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnprecipitate_in_nounStructure930_static {
    public static final BitSet FOLLOW_nnprecipitate_in_nounStructure930 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnremove_in_nounStructure932_static {
    public static final BitSet FOLLOW_nnremove_in_nounStructure932 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_nounStructure934_static {
    public static final BitSet FOLLOW_fw_in_nounStructure934 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_nounStructure936_static {
    public static final BitSet FOLLOW_sym_in_nounStructure936 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_clause_in_nounStructure938_static {
    public static final BitSet FOLLOW_clause_in_nounStructure938 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ls_in_nounStructure940_static {
    public static final BitSet FOLLOW_ls_in_nounStructure940 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnps_in_nounStructure942_static {
    public static final BitSet FOLLOW_nnps_in_nounStructure942 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pos_in_nounStructure944_static {
    public static final BitSet FOLLOW_pos_in_nounStructure944 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_nounStructure946_static {
    public static final BitSet FOLLOW_oscarase_in_nounStructure946 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_prepphrase958_static {
    public static final BitSet FOLLOW_neg_in_prepphrase958 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC0080L});

    }static class FOLLOW_prepphraseAtmosphere_in_prepphrase962_static {
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_prepphrase962 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTime_in_prepphrase964_static {
    public static final BitSet FOLLOW_prepphraseTime_in_prepphrase964 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTemp_in_prepphrase966_static {
    public static final BitSet FOLLOW_prepphraseTemp_in_prepphrase966 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_prepphrase968_static {
    public static final BitSet FOLLOW_prepphraseIN_in_prepphrase968 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseRole_in_prepphrase970_static {
    public static final BitSet FOLLOW_prepphraseRole_in_prepphrase970 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseOther_in_prepphrase972_static {
    public static final BitSet FOLLOW_prepphraseOther_in_prepphrase972 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere984_static {
    public static final BitSet FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere984 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_prepphraseAtmosphereContent1004_static {
    public static final BitSet FOLLOW_inunder_in_prepphraseAtmosphereContent1004 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x000000F0038C8020L});

    }static class FOLLOW_dt_in_prepphraseAtmosphereContent1007_static {
    public static final BitSet FOLLOW_dt_in_prepphraseAtmosphereContent1007 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x000000F003848020L});

    }static class FOLLOW_advAdj_in_prepphraseAtmosphereContent1010_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseAtmosphereContent1010 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x000000F003848020L});

    }static class FOLLOW_molecule_in_prepphraseAtmosphereContent1013_static {
    public static final BitSet FOLLOW_molecule_in_prepphraseAtmosphereContent1013 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});

    }static class FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1015_static {
    public static final BitSet FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1015 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1025_static {
    public static final BitSet FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1025 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepPhraseTimeStructure1043_static {
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1043 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000001L,0x000002F003CC0000L});

    }static class FOLLOW_inAll_in_prepPhraseTimeStructure1046_static {
    public static final BitSet FOLLOW_inAll_in_prepPhraseTimeStructure1046 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000001L,0x000000F0038C0000L});

    }static class FOLLOW_dt_in_prepPhraseTimeStructure1050_static {
    public static final BitSet FOLLOW_dt_in_prepPhraseTimeStructure1050 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000001L,0x000000F003840000L});

    }static class FOLLOW_advAdj_in_prepPhraseTimeStructure1053_static {
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1053 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000001L,0x000000F003840000L});

    }static class FOLLOW_cd_in_prepPhraseTimeStructure1056_static {
    public static final BitSet FOLLOW_cd_in_prepPhraseTimeStructure1056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_nntime_in_prepPhraseTimeStructure1059_static {
    public static final BitSet FOLLOW_nntime_in_prepPhraseTimeStructure1059 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000001L});

    }static class FOLLOW_prepphraseTempContent_in_prepphraseTemp1069_static {
    public static final BitSet FOLLOW_prepphraseTempContent_in_prepphraseTemp1069 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseTempContent1090_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1090 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000100L,0x000002F003CC0000L});

    }static class FOLLOW_inAll_in_prepphraseTempContent1093_static {
    public static final BitSet FOLLOW_inAll_in_prepphraseTempContent1093 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000100L,0x000000F0038C0000L});

    }static class FOLLOW_dt_in_prepphraseTempContent1096_static {
    public static final BitSet FOLLOW_dt_in_prepphraseTempContent1096 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000100L,0x000000F003840000L});

    }static class FOLLOW_advAdj_in_prepphraseTempContent1099_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1099 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0000000000040000L});

    }static class FOLLOW_cd_in_prepphraseTempContent1102_static {
    public static final BitSet FOLLOW_cd_in_prepphraseTempContent1102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_nntemp_in_prepphraseTempContent1105_static {
    public static final BitSet FOLLOW_nntemp_in_prepphraseTempContent1105 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});

    }static class FOLLOW_inin_in_prepphraseIN1114_static {
    public static final BitSet FOLLOW_inin_in_prepphraseIN1114 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000003848020L});

    }static class FOLLOW_molecule_in_prepphraseIN1116_static {
    public static final BitSet FOLLOW_molecule_in_prepphraseIN1116 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_prepphraseRole1137_static {
    public static final BitSet FOLLOW_inas_in_prepphraseRole1137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L,0x0000000000080000L});

    }static class FOLLOW_dt_in_prepphraseRole1139_static {
    public static final BitSet FOLLOW_dt_in_prepphraseRole1139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nnchementity_in_prepphraseRole1142_static {
    public static final BitSet FOLLOW_nnchementity_in_prepphraseRole1142 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseOther1165_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseOther1165 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC0080L});

    }static class FOLLOW_inMost_in_prepphraseOther1168_static {
    public static final BitSet FOLLOW_inMost_in_prepphraseOther1168 = new BitSet(new long[]{0xFFFFEFC000000000L,0x68A0A850061FFFF5L,0x001E03FFF7FCE8A4L});

    }static class FOLLOW_nounphrase_in_prepphraseOther1172_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOther1172 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_prepphraseOf1198_static {
    public static final BitSet FOLLOW_inof_in_prepphraseOf1198 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_nounphrase_in_prepphraseOf1201_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOf1201 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseAfter1223_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseAfter1223 = new BitSet(new long[]{0x0002000000000000L});

    }static class FOLLOW_inafter_in_prepphraseAfter1226_static {
    public static final BitSet FOLLOW_inafter_in_prepphraseAfter1226 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_nounphrase_in_prepphraseAfter1229_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseAfter1229 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsynthesize_in_preparationphrase1254_static {
    public static final BitSet FOLLOW_vbsynthesize_in_preparationphrase1254 = new BitSet(new long[]{0x0000800000000000L});

    }static class FOLLOW_inas_in_preparationphrase1256_static {
    public static final BitSet FOLLOW_inas_in_preparationphrase1256 = new BitSet(new long[]{0xFFFFA1C000000000L,0x0000000002183B81L,0x000002F013CC80A0L});

    }static class FOLLOW_nnexample_in_preparationphrase1259_static {
    public static final BitSet FOLLOW_nnexample_in_preparationphrase1259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_preparationphrase1261_static {
    public static final BitSet FOLLOW_cd_in_preparationphrase1261 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphrase_in_preparationphrase1264_static {
    public static final BitSet FOLLOW_prepphrase_in_preparationphrase1264 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_multiApparatus1275_static {
    public static final BitSet FOLLOW_apparatus_in_multiApparatus1275 = new BitSet(new long[]{0x800021C000000002L,0x0000001002102280L,0x00000000138E8020L});

    }static class FOLLOW_conjunction_in_multiApparatus1278_static {
    public static final BitSet FOLLOW_conjunction_in_multiApparatus1278 = new BitSet(new long[]{0x800021C000000000L,0x0000001002102280L,0x00000000138E8020L});

    }static class FOLLOW_apparatus_in_multiApparatus1281_static {
    public static final BitSet FOLLOW_apparatus_in_multiApparatus1281 = new BitSet(new long[]{0x800021C000000002L,0x0000001002102280L,0x00000000138E8020L});

    }static class FOLLOW_dt_in_apparatus1292_static {
    public static final BitSet FOLLOW_dt_in_apparatus1292 = new BitSet(new long[]{0x800021C000000000L,0x0000001002102280L,0x00000000138C8020L});

    }static class FOLLOW_preapparatus_in_apparatus1295_static {
    public static final BitSet FOLLOW_preapparatus_in_apparatus1295 = new BitSet(new long[]{0x800021C000000000L,0x0000001002102280L,0x00000000138C8020L});

    }static class FOLLOW_nnApp_in_apparatus1298_static {
    public static final BitSet FOLLOW_nnApp_in_apparatus1298 = new BitSet(new long[]{0x800021C000000002L,0x0000001002102280L,0x00000000138C8020L});

    }static class FOLLOW_nnapparatus_in_nnApp1325_static {
    public static final BitSet FOLLOW_nnapparatus_in_nnApp1325 = new BitSet(new long[]{0x800021C000000002L,0x0000001002102280L,0x00000000138C8120L});

    }static class FOLLOW_dash_in_nnApp1329_static {
    public static final BitSet FOLLOW_dash_in_nnApp1329 = new BitSet(new long[]{0x800021C000000000L,0x0000001002102280L,0x00000000138C8020L});

    }static class FOLLOW_nnapparatus_in_nnApp1331_static {
    public static final BitSet FOLLOW_nnapparatus_in_nnApp1331 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_quantity_in_preapparatus1345_static {
    public static final BitSet FOLLOW_quantity_in_preapparatus1345 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000013848020L});

    }static class FOLLOW_adj_in_preapparatus1347_static {
    public static final BitSet FOLLOW_adj_in_preapparatus1347 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000013848020L});

    }static class FOLLOW_nnpressure_in_preapparatus1349_static {
    public static final BitSet FOLLOW_nnpressure_in_preapparatus1349 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000013848020L});

    }static class FOLLOW_nnadd_in_preapparatus1351_static {
    public static final BitSet FOLLOW_nnadd_in_preapparatus1351 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000013848020L});

    }static class FOLLOW_molecule_in_preapparatus1353_static {
    public static final BitSet FOLLOW_molecule_in_preapparatus1353 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000013848020L});

    }static class FOLLOW_nnchementity_in_preapparatus1355_static {
    public static final BitSet FOLLOW_nnchementity_in_preapparatus1355 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000013848020L});

    }static class FOLLOW_nnstate_in_preapparatus1357_static {
    public static final BitSet FOLLOW_nnstate_in_preapparatus1357 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000013848020L});

    }static class FOLLOW_nn_in_preapparatus1359_static {
    public static final BitSet FOLLOW_nn_in_preapparatus1359 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000013848020L});

    }static class FOLLOW_oscaront_in_oscaronts1371_static {
    public static final BitSet FOLLOW_oscaront_in_oscaronts1371 = new BitSet(new long[]{0x0000040000000002L});

    }static class FOLLOW_adj_in_oscarCompound1391_static {
    public static final BitSet FOLLOW_adj_in_oscarCompound1391 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000003848020L});

    }static class FOLLOW_oscarCompoundStructure_in_oscarCompound1394_static {
    public static final BitSet FOLLOW_oscarCompoundStructure_in_oscarCompound1394 = new BitSet(new long[]{0x000061C000000002L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_adj_in_oscarCompound1396_static {
    public static final BitSet FOLLOW_adj_in_oscarCompound1396 = new BitSet(new long[]{0x000061C000000002L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_quantity_in_oscarCompound1400_static {
    public static final BitSet FOLLOW_quantity_in_oscarCompound1400 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048000L});

    }static class FOLLOW_nnchementity_in_oscarCompound1404_static {
    public static final BitSet FOLLOW_nnchementity_in_oscarCompound1404 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048000L});

    }static class FOLLOW_numericOrIdentifierCompoundReference_in_oscarCompound1410_static {
    public static final BitSet FOLLOW_numericOrIdentifierCompoundReference_in_oscarCompound1410 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048000L});

    }static class FOLLOW_quantity_in_oscarCompound1414_static {
    public static final BitSet FOLLOW_quantity_in_oscarCompound1414 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048000L});

    }static class FOLLOW_oscarcm_in_oscarCompoundStructure1423_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompoundStructure1423 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L,0x0000000000000140L});

    }static class FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1425_static {
    public static final BitSet FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1425 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1430_static {
    public static final BitSet FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1430 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_afterOscarCompoundStructure1452_static {
    public static final BitSet FOLLOW_oscarcm_in_afterOscarCompoundStructure1452 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});

    }static class FOLLOW_dash_in_afterOscarCompoundStructure1456_static {
    public static final BitSet FOLLOW_dash_in_afterOscarCompoundStructure1456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_afterOscarCompoundStructure1458_static {
    public static final BitSet FOLLOW_oscarcm_in_afterOscarCompoundStructure1458 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_afterOscarCompoundStructure1463_static {
    public static final BitSet FOLLOW_dash_in_afterOscarCompoundStructure1463 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_afterOscarCompoundStructure1467_static {
    public static final BitSet FOLLOW_dash_in_afterOscarCompoundStructure1467 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000140L});

    }static class FOLLOW_apost_in_afterOscarCompoundStructure1469_static {
    public static final BitSet FOLLOW_apost_in_afterOscarCompoundStructure1469 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000140L});

    }static class FOLLOW_lrb_in_bracketedOscarCompoundStructure1478_static {
    public static final BitSet FOLLOW_lrb_in_bracketedOscarCompoundStructure1478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1481_static {
    public static final BitSet FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_bracketedOscarCompoundStructure1484_static {
    public static final BitSet FOLLOW_rrb_in_bracketedOscarCompoundStructure1484 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount_in_molecule1494_static {
    public static final BitSet FOLLOW_moleculeamount_in_molecule1494 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount3_in_moleculeamount1512_static {
    public static final BitSet FOLLOW_moleculeamount3_in_moleculeamount1512 = new BitSet(new long[]{0x0000800000000002L});

    }static class FOLLOW_moleculeamount1_in_moleculeamount1515_static {
    public static final BitSet FOLLOW_moleculeamount1_in_moleculeamount1515 = new BitSet(new long[]{0x0000800000000002L});

    }static class FOLLOW_moleculeamount2_in_moleculeamount1519_static {
    public static final BitSet FOLLOW_moleculeamount2_in_moleculeamount1519 = new BitSet(new long[]{0x0000800000000002L});

    }static class FOLLOW_asAstate_in_moleculeamount1522_static {
    public static final BitSet FOLLOW_asAstate_in_moleculeamount1522 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_moleculeamount31533_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount31533 = new BitSet(new long[]{0x0100000000000000L});

    }static class FOLLOW_mixture_in_moleculeamount31535_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount31535 = new BitSet(new long[]{0x0100000000000000L});

    }static class FOLLOW_inof_in_moleculeamount31538_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount31538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000000C4000L});

    }static class FOLLOW_dtTHE_in_moleculeamount31541_static {
    public static final BitSet FOLLOW_dtTHE_in_moleculeamount31541 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_dt_in_moleculeamount31545_static {
    public static final BitSet FOLLOW_dt_in_moleculeamount31545 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_mixtureRatio_in_moleculeamount31549_static {
    public static final BitSet FOLLOW_mixtureRatio_in_moleculeamount31549 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000003848020L});

    }static class FOLLOW_mixture_in_moleculeamount31551_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount31551 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000003848020L});

    }static class FOLLOW_oscarCompound_in_moleculeamount31554_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount31554 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_moleculeamount11564_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount11564 = new BitSet(new long[]{0x0100004000000000L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_mixture_in_moleculeamount11566_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount11566 = new BitSet(new long[]{0x0100004000000000L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_inof_in_moleculeamount11570_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount11570 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x00000000038CC020L});

    }static class FOLLOW_quantity_in_moleculeamount11573_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount11573 = new BitSet(new long[]{0x010021C000000000L,0x0000000000100200L,0x00000000038CC020L});

    }static class FOLLOW_inof_in_moleculeamount11575_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount11575 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x00000000038CC020L});

    }static class FOLLOW_dtTHE_in_moleculeamount11581_static {
    public static final BitSet FOLLOW_dtTHE_in_moleculeamount11581 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000003848020L});

    }static class FOLLOW_dt_in_moleculeamount11585_static {
    public static final BitSet FOLLOW_dt_in_moleculeamount11585 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000003848020L});

    }static class FOLLOW_oscarCompound_in_moleculeamount11589_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount11589 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000003848020L});

    }static class FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11592_static {
    public static final BitSet FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11592 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_moleculeamount21601_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount21601 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000003848020L});

    }static class FOLLOW_mixture_in_moleculeamount21603_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount21603 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000003848020L});

    }static class FOLLOW_oscarCompound_in_moleculeamount21607_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount21607 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000003848020L});

    }static class FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21610_static {
    public static final BitSet FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21610 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_afterCompoundCitationOrQuantity1618_static {
    public static final BitSet FOLLOW_citation_in_afterCompoundCitationOrQuantity1618 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_quantity_in_afterCompoundCitationOrQuantity1620_static {
    public static final BitSet FOLLOW_quantity_in_afterCompoundCitationOrQuantity1620 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_comma_in_afterCompoundCitationOrQuantity1622_static {
    public static final BitSet FOLLOW_comma_in_afterCompoundCitationOrQuantity1622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1625_static {
    public static final BitSet FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1625 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1627_static {
    public static final BitSet FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1627 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_mixture_in_afterCompoundCitationOrQuantity1630_static {
    public static final BitSet FOLLOW_mixture_in_afterCompoundCitationOrQuantity1630 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1641_static {
    public static final BitSet FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1641 = new BitSet(new long[]{0x0000800000000002L});

    }static class FOLLOW_asAstate_in_unnamedmolecule1643_static {
    public static final BitSet FOLLOW_asAstate_in_unnamedmolecule1643 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_unnamedmoleculeDescription1664_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeDescription1664 = new BitSet(new long[]{0x0100000000000000L});

    }static class FOLLOW_inof_in_unnamedmoleculeDescription1666_static {
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeDescription1666 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCE824L});

    }static class FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeDescription1669_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeDescription1669 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeDescription1671_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeDescription1671 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_optionalUnnamedMoleculeEnding_in_unnamedmoleculeDescription1673_static {
    public static final BitSet FOLLOW_optionalUnnamedMoleculeEnding_in_unnamedmoleculeDescription1673 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeDescription1678_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeDescription1678 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeDescription1680_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeDescription1680 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount5_in_unnamedmoleculeDescription1682_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount5_in_unnamedmoleculeDescription1682 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount6_in_unnamedmoleculeDescription1684_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount6_in_unnamedmoleculeDescription1684 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_referenceToCompound_in_unnamedmoleculeDescription1686_static {
    public static final BitSet FOLLOW_referenceToCompound_in_unnamedmoleculeDescription1686 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericOrIdentifierCompoundReference_in_unnamedmoleculeamount11698_static {
    public static final BitSet FOLLOW_numericOrIdentifierCompoundReference_in_unnamedmoleculeamount11698 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount11701_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount11701 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount11703_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount11703 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_dtTHE_in_unnamedmoleculeamount21715_static {
    public static final BitSet FOLLOW_dtTHE_in_unnamedmoleculeamount21715 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_dt_in_unnamedmoleculeamount21719_static {
    public static final BitSet FOLLOW_dt_in_unnamedmoleculeamount21719 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_jj_in_unnamedmoleculeamount21724_static {
    public static final BitSet FOLLOW_jj_in_unnamedmoleculeamount21724 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_jjchem_in_unnamedmoleculeamount21726_static {
    public static final BitSet FOLLOW_jjchem_in_unnamedmoleculeamount21726 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_jjcomp_in_unnamedmoleculeamount21728_static {
    public static final BitSet FOLLOW_jjcomp_in_unnamedmoleculeamount21728 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_nnstate_in_unnamedmoleculeamount21733_static {
    public static final BitSet FOLLOW_nnstate_in_unnamedmoleculeamount21733 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_unnamedmoleculeamount21735_static {
    public static final BitSet FOLLOW_nn_in_unnamedmoleculeamount21735 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nns_in_unnamedmoleculeamount21737_static {
    public static final BitSet FOLLOW_nns_in_unnamedmoleculeamount21737 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_unnamedmoleculeamount21739_static {
    public static final BitSet FOLLOW_nnp_in_unnamedmoleculeamount21739 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_referenceToExampleCompound_in_unnamedmoleculeamount21741_static {
    public static final BitSet FOLLOW_referenceToExampleCompound_in_unnamedmoleculeamount21741 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_unnamedmoleculeamount21743_static {
    public static final BitSet FOLLOW_nnexample_in_unnamedmoleculeamount21743 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaronts_in_unnamedmoleculeamount21745_static {
    public static final BitSet FOLLOW_oscaronts_in_unnamedmoleculeamount21745 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_unnamedmoleculeamount21747_static {
    public static final BitSet FOLLOW_nnatmosphere_in_unnamedmoleculeamount21747 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_unnamedmoleculeamount21749_static {
    public static final BitSet FOLLOW_nnchementity_in_unnamedmoleculeamount21749 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_unnamedmoleculeamount21751_static {
    public static final BitSet FOLLOW_nnmixture_in_unnamedmoleculeamount21751 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_unnamedmoleculeamount21753_static {
    public static final BitSet FOLLOW_fw_in_unnamedmoleculeamount21753 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnps_in_unnamedmoleculeamount21755_static {
    public static final BitSet FOLLOW_nnps_in_unnamedmoleculeamount21755 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_unnamedmoleculeamount21757_static {
    public static final BitSet FOLLOW_oscarase_in_unnamedmoleculeamount21757 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjcomp_in_unnamedmoleculeamount31767_static {
    public static final BitSet FOLLOW_jjcomp_in_unnamedmoleculeamount31767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nnchementity_in_unnamedmoleculeamount31769_static {
    public static final BitSet FOLLOW_nnchementity_in_unnamedmoleculeamount31769 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_optionalUnnamedMoleculeEnding_in_unnamedmoleculeamount31771_static {
    public static final BitSet FOLLOW_optionalUnnamedMoleculeEnding_in_unnamedmoleculeamount31771 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericOrIdentifierCompoundReference_in_optionalUnnamedMoleculeEnding1783_static {
    public static final BitSet FOLLOW_numericOrIdentifierCompoundReference_in_optionalUnnamedMoleculeEnding1783 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_quantity_in_optionalUnnamedMoleculeEnding1787_static {
    public static final BitSet FOLLOW_quantity_in_optionalUnnamedMoleculeEnding1787 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_mixture_in_optionalUnnamedMoleculeEnding1789_static {
    public static final BitSet FOLLOW_mixture_in_optionalUnnamedMoleculeEnding1789 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_alphanumericOrIdentifierCompoundReference_in_unnamedmoleculeamount41800_static {
    public static final BitSet FOLLOW_alphanumericOrIdentifierCompoundReference_in_unnamedmoleculeamount41800 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_citation_in_unnamedmoleculeamount41803_static {
    public static final BitSet FOLLOW_citation_in_unnamedmoleculeamount41803 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount41805_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount41805 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount41807_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount41807 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_squareBracketedReference_in_alphanumericOrIdentifierCompoundReference1820_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_alphanumericOrIdentifierCompoundReference1820 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_alphanumericOrIdentifierCompoundReference1822_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_alphanumericOrIdentifierCompoundReference1822 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_alphanumericOrIdentifierCompoundReference1824_static {
    public static final BitSet FOLLOW_cdAlphanum_in_alphanumericOrIdentifierCompoundReference1824 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedNumeric_in_alphanumericOrIdentifierCompoundReference1826_static {
    public static final BitSet FOLLOW_bracketedNumeric_in_alphanumericOrIdentifierCompoundReference1826 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numberCompoundReference_in_unnamedmoleculeamount51854_static {
    public static final BitSet FOLLOW_numberCompoundReference_in_unnamedmoleculeamount51854 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_citation_in_unnamedmoleculeamount51856_static {
    public static final BitSet FOLLOW_citation_in_unnamedmoleculeamount51856 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000048000L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount51859_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount51859 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_citation_in_unnamedmoleculeamount51862_static {
    public static final BitSet FOLLOW_citation_in_unnamedmoleculeamount51862 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount51864_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount51864 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount51866_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount51866 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_cd_in_numberCompoundReference1878_static {
    public static final BitSet FOLLOW_cd_in_numberCompoundReference1878 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount61895_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount61895 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000080L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount61897_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount61897 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000080L});

    }static class FOLLOW_jjcomp_in_unnamedmoleculeamount61900_static {
    public static final BitSet FOLLOW_jjcomp_in_unnamedmoleculeamount61900 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nnchementity_in_unnamedmoleculeamount61903_static {
    public static final BitSet FOLLOW_nnchementity_in_unnamedmoleculeamount61903 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount61906_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount61906 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount61908_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount61908 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_inas_in_asAstate1919_static {
    public static final BitSet FOLLOW_inas_in_asAstate1919 = new BitSet(new long[]{0x8000200000000000L,0x0000000000000000L,0x0000000000880000L});

    }static class FOLLOW_dt_in_asAstate1921_static {
    public static final BitSet FOLLOW_dt_in_asAstate1921 = new BitSet(new long[]{0x8000200000000000L,0x0000000000000000L,0x0000000000800000L});

    }static class FOLLOW_jj_in_asAstate1925_static {
    public static final BitSet FOLLOW_jj_in_asAstate1925 = new BitSet(new long[]{0x8000200000000000L,0x0000000000000000L,0x0000000000800000L});

    }static class FOLLOW_jjchem_in_asAstate1927_static {
    public static final BitSet FOLLOW_jjchem_in_asAstate1927 = new BitSet(new long[]{0x8000200000000000L,0x0000000000000000L,0x0000000000800000L});

    }static class FOLLOW_nnstate_in_asAstate1931_static {
    public static final BitSet FOLLOW_nnstate_in_asAstate1931 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048000L});

    }static class FOLLOW_quantity_in_asAstate1933_static {
    public static final BitSet FOLLOW_quantity_in_asAstate1933 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048000L});

    }static class FOLLOW_nnchementity_in_referenceToCompound1944_static {
    public static final BitSet FOLLOW_nnchementity_in_referenceToCompound1944 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_numericOrIdentifierCompoundReference_in_referenceToCompound1951_static {
    public static final BitSet FOLLOW_numericOrIdentifierCompoundReference_in_referenceToCompound1951 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_numericOrIdentifierCompoundReference1962_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_numericOrIdentifierCompoundReference1962 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_numericOrIdentifierCompoundReference1964_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_numericOrIdentifierCompoundReference1964 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericOrBracketedNumeric_in_numericOrIdentifierCompoundReference1966_static {
    public static final BitSet FOLLOW_numericOrBracketedNumeric_in_numericOrIdentifierCompoundReference1966 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_squareBracketedReference1992_static {
    public static final BitSet FOLLOW_lsqb_in_squareBracketedReference1992 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_numeric_in_squareBracketedReference1994_static {
    public static final BitSet FOLLOW_numeric_in_squareBracketedReference1994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_rsqb_in_squareBracketedReference1996_static {
    public static final BitSet FOLLOW_rsqb_in_squareBracketedReference1996 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity1Node_in_quantity2007_static {
    public static final BitSet FOLLOW_quantity1Node_in_quantity2007 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_quantity2009_static {
    public static final BitSet FOLLOW_quantity2Node_in_quantity2009 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity1_in_quantity1Node2018_static {
    public static final BitSet FOLLOW_quantity1_in_quantity1Node2018 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_quantity12038_static {
    public static final BitSet FOLLOW_lrb_in_quantity12038 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000048000L});

    }static class FOLLOW_measurements_in_quantity12040_static {
    public static final BitSet FOLLOW_measurements_in_quantity12040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010220L});

    }static class FOLLOW_comma_in_quantity12043_static {
    public static final BitSet FOLLOW_comma_in_quantity12043 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000048000L});

    }static class FOLLOW_measurements_in_quantity12046_static {
    public static final BitSet FOLLOW_measurements_in_quantity12046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010220L});

    }static class FOLLOW_comma_in_quantity12051_static {
    public static final BitSet FOLLOW_comma_in_quantity12051 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});

    }static class FOLLOW_preparationphrase_in_quantity12053_static {
    public static final BitSet FOLLOW_preparationphrase_in_quantity12053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010220L});

    }static class FOLLOW_stop_in_quantity12058_static {
    public static final BitSet FOLLOW_stop_in_quantity12058 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});

    }static class FOLLOW_preparationphrase_in_quantity12060_static {
    public static final BitSet FOLLOW_preparationphrase_in_quantity12060 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010200L});

    }static class FOLLOW_rrb_in_quantity12065_static {
    public static final BitSet FOLLOW_rrb_in_quantity12065 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2_in_quantity2Node2073_static {
    public static final BitSet FOLLOW_quantity2_in_quantity2Node2073 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurements_in_quantity22094_static {
    public static final BitSet FOLLOW_measurements_in_quantity22094 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_comma_in_quantity22097_static {
    public static final BitSet FOLLOW_comma_in_quantity22097 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000048000L});

    }static class FOLLOW_measurements_in_quantity22100_static {
    public static final BitSet FOLLOW_measurements_in_quantity22100 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_cd_in_measurements2113_static {
    public static final BitSet FOLLOW_cd_in_measurements2113 = new BitSet(new long[]{0x800021C000000000L,0x0000000002102280L,0x0000000013848020L});

    }static class FOLLOW_nn_in_measurements2115_static {
    public static final BitSet FOLLOW_nn_in_measurements2115 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000048000L});

    }static class FOLLOW_multiple_in_measurements2120_static {
    public static final BitSet FOLLOW_multiple_in_measurements2120 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000080000L});

    }static class FOLLOW_measurementtypes_in_measurements2122_static {
    public static final BitSet FOLLOW_measurementtypes_in_measurements2122 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000080000L});

    }static class FOLLOW_dt_in_measurements2125_static {
    public static final BitSet FOLLOW_dt_in_measurements2125 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_multiple2133_static {
    public static final BitSet FOLLOW_cd_in_multiple2133 = new BitSet(new long[]{0x0000100000000000L});

    }static class FOLLOW_cdunicode_in_multiple2135_static {
    public static final BitSet FOLLOW_cdunicode_in_multiple2135 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048000L});

    }static class FOLLOW_measurementtypes_in_multiple2137_static {
    public static final BitSet FOLLOW_measurementtypes_in_multiple2137 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molar_in_measurementtypes2162_static {
    public static final BitSet FOLLOW_molar_in_measurementtypes2162 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_amount_in_measurementtypes2164_static {
    public static final BitSet FOLLOW_amount_in_measurementtypes2164 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mass_in_measurementtypes2166_static {
    public static final BitSet FOLLOW_mass_in_measurementtypes2166 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_volume_in_measurementtypes2168_static {
    public static final BitSet FOLLOW_volume_in_measurementtypes2168 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_logHydrogenActivity_in_measurementtypes2170_static {
    public static final BitSet FOLLOW_logHydrogenActivity_in_measurementtypes2170 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_equivalent_in_measurementtypes2172_static {
    public static final BitSet FOLLOW_equivalent_in_measurementtypes2172 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield_in_measurementtypes2174_static {
    public static final BitSet FOLLOW_yield_in_measurementtypes2174 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percent_in_measurementtypes2176_static {
    public static final BitSet FOLLOW_percent_in_measurementtypes2176 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_molar2184_static {
    public static final BitSet FOLLOW_cd_in_molar2184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L,0x0000000000040000L});

    }static class FOLLOW_nnmolar_in_molar2187_static {
    public static final BitSet FOLLOW_nnmolar_in_molar2187 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_amount2208_static {
    public static final BitSet FOLLOW_cd_in_amount2208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000040000L});

    }static class FOLLOW_nnamount_in_amount2211_static {
    public static final BitSet FOLLOW_nnamount_in_amount2211 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_mass2232_static {
    public static final BitSet FOLLOW_cd_in_mass2232 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x0000000000040000L});

    }static class FOLLOW_nnmass_in_mass2235_static {
    public static final BitSet FOLLOW_nnmass_in_mass2235 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_volume2255_static {
    public static final BitSet FOLLOW_cd_in_volume2255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L,0x0000000000040000L});

    }static class FOLLOW_nnvol_in_volume2258_static {
    public static final BitSet FOLLOW_nnvol_in_volume2258 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_logHydrogenActivity2279_static {
    public static final BitSet FOLLOW_nnph_in_logHydrogenActivity2279 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000040000L});

    }static class FOLLOW_sym_in_logHydrogenActivity2281_static {
    public static final BitSet FOLLOW_sym_in_logHydrogenActivity2281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_logHydrogenActivity2284_static {
    public static final BitSet FOLLOW_cd_in_logHydrogenActivity2284 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_equivalent2304_static {
    public static final BitSet FOLLOW_cd_in_equivalent2304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L,0x0000000000040000L});

    }static class FOLLOW_nneq_in_equivalent2307_static {
    public static final BitSet FOLLOW_nneq_in_equivalent2307 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percent_in_yield2325_static {
    public static final BitSet FOLLOW_percent_in_yield2325 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});

    }static class FOLLOW_nnyield_in_yield2327_static {
    public static final BitSet FOLLOW_nnyield_in_yield2327 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_percent2345_static {
    public static final BitSet FOLLOW_numeric_in_percent2345 = new BitSet(new long[]{0x800021C000000000L,0x0000000002102280L,0x0000000013848420L});

    }static class FOLLOW_nn_in_percent2347_static {
    public static final BitSet FOLLOW_nn_in_percent2347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_nnpercent_in_percent2350_static {
    public static final BitSet FOLLOW_nnpercent_in_percent2350 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureRatio_in_mixture2373_static {
    public static final BitSet FOLLOW_mixtureRatio_in_mixture2373 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_mixtureStructure3_in_mixture2378_static {
    public static final BitSet FOLLOW_mixtureStructure3_in_mixture2378 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureStructure2_in_mixture2380_static {
    public static final BitSet FOLLOW_mixtureStructure2_in_mixture2380 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureStructure1_in_mixture2382_static {
    public static final BitSet FOLLOW_mixtureStructure1_in_mixture2382 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_mixtureStructure22409_static {
    public static final BitSet FOLLOW_comma_in_mixtureStructure22409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_lrb_in_mixtureStructure22411_static {
    public static final BitSet FOLLOW_lrb_in_mixtureStructure22411 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_mixtureContent_in_mixtureStructure22413_static {
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure22413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_mixtureStructure22415_static {
    public static final BitSet FOLLOW_rrb_in_mixtureStructure22415 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_comma_in_mixtureStructure22417_static {
    public static final BitSet FOLLOW_comma_in_mixtureStructure22417 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_mixtureStructure12423_static {
    public static final BitSet FOLLOW_lrb_in_mixtureStructure12423 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_mixtureContent_in_mixtureStructure12425_static {
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure12425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_mixtureStructure12427_static {
    public static final BitSet FOLLOW_rrb_in_mixtureStructure12427 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_mixtureStructure32435_static {
    public static final BitSet FOLLOW_lrb_in_mixtureStructure32435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_nnpercent_in_mixtureStructure32438_static {
    public static final BitSet FOLLOW_nnpercent_in_mixtureStructure32438 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_mixtureStructure32440_static {
    public static final BitSet FOLLOW_rrb_in_mixtureStructure32440 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_mixtureRatio2449_static {
    public static final BitSet FOLLOW_cd_in_mixtureRatio2449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_colon_in_mixtureRatio2451_static {
    public static final BitSet FOLLOW_colon_in_mixtureRatio2451 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_numeric_in_mixtureRatio2453_static {
    public static final BitSet FOLLOW_numeric_in_mixtureRatio2453 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_mixtureContent2462_static {
    public static final BitSet FOLLOW_fw_in_mixtureContent2462 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_verb_in_mixtureContent2464_static {
    public static final BitSet FOLLOW_verb_in_mixtureContent2464 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_nn_in_mixtureContent2466_static {
    public static final BitSet FOLLOW_nn_in_mixtureContent2466 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_quantity2Node_in_mixtureContent2468_static {
    public static final BitSet FOLLOW_quantity2Node_in_mixtureContent2468 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_md_in_mixtureContent2470_static {
    public static final BitSet FOLLOW_md_in_mixtureContent2470 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_nnpercent_in_mixtureContent2472_static {
    public static final BitSet FOLLOW_nnpercent_in_mixtureContent2472 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_oscarCompound_in_mixtureContent2474_static {
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent2474 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_molecule_in_mixtureContent2476_static {
    public static final BitSet FOLLOW_molecule_in_mixtureContent2476 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_unnamedmolecule_in_mixtureContent2478_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent2478 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_dash_in_mixtureContent2480_static {
    public static final BitSet FOLLOW_dash_in_mixtureContent2480 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_sym_in_mixtureContent2482_static {
    public static final BitSet FOLLOW_sym_in_mixtureContent2482 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_noun_in_mixtureContent2484_static {
    public static final BitSet FOLLOW_noun_in_mixtureContent2484 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_inAll_in_mixtureContent2486_static {
    public static final BitSet FOLLOW_inAll_in_mixtureContent2486 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_cd_in_mixtureContent2488_static {
    public static final BitSet FOLLOW_cd_in_mixtureContent2488 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_comma_in_mixtureContent2490_static {
    public static final BitSet FOLLOW_comma_in_mixtureContent2490 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_adj_in_mixtureContent2492_static {
    public static final BitSet FOLLOW_adj_in_mixtureContent2492 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_colon_in_mixtureContent2494_static {
    public static final BitSet FOLLOW_colon_in_mixtureContent2494 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_stop_in_mixtureContent2496_static {
    public static final BitSet FOLLOW_stop_in_mixtureContent2496 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_minimixture_in_mixtureContent2500_static {
    public static final BitSet FOLLOW_minimixture_in_mixtureContent2500 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_fw_in_mixtureContent2502_static {
    public static final BitSet FOLLOW_fw_in_mixtureContent2502 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_verb_in_mixtureContent2504_static {
    public static final BitSet FOLLOW_verb_in_mixtureContent2504 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_quantity2Node_in_mixtureContent2506_static {
    public static final BitSet FOLLOW_quantity2Node_in_mixtureContent2506 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_nnyield_in_mixtureContent2508_static {
    public static final BitSet FOLLOW_nnyield_in_mixtureContent2508 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_md_in_mixtureContent2510_static {
    public static final BitSet FOLLOW_md_in_mixtureContent2510 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_nnpercent_in_mixtureContent2512_static {
    public static final BitSet FOLLOW_nnpercent_in_mixtureContent2512 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_oscarCompound_in_mixtureContent2514_static {
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent2514 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_molecule_in_mixtureContent2516_static {
    public static final BitSet FOLLOW_molecule_in_mixtureContent2516 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_unnamedmolecule_in_mixtureContent2518_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent2518 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_dash_in_mixtureContent2520_static {
    public static final BitSet FOLLOW_dash_in_mixtureContent2520 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_sym_in_mixtureContent2522_static {
    public static final BitSet FOLLOW_sym_in_mixtureContent2522 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_noun_in_mixtureContent2524_static {
    public static final BitSet FOLLOW_noun_in_mixtureContent2524 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_inAll_in_mixtureContent2526_static {
    public static final BitSet FOLLOW_inAll_in_mixtureContent2526 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_cd_in_mixtureContent2528_static {
    public static final BitSet FOLLOW_cd_in_mixtureContent2528 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_comma_in_mixtureContent2530_static {
    public static final BitSet FOLLOW_comma_in_mixtureContent2530 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_adj_in_mixtureContent2532_static {
    public static final BitSet FOLLOW_adj_in_mixtureContent2532 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_colon_in_mixtureContent2534_static {
    public static final BitSet FOLLOW_colon_in_mixtureContent2534 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_stop_in_mixtureContent2536_static {
    public static final BitSet FOLLOW_stop_in_mixtureContent2536 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_mixtureStructure2_in_minimixture2547_static {
    public static final BitSet FOLLOW_mixtureStructure2_in_minimixture2547 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureStructure1_in_minimixture2549_static {
    public static final BitSet FOLLOW_mixtureStructure1_in_minimixture2549 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_method_in_procedureNode2570_static {
    public static final BitSet FOLLOW_method_in_procedureNode2570 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_method2590_static {
    public static final BitSet FOLLOW_nngeneral_in_method2590 = new BitSet(new long[]{0x800021C000000000L,0x0000000002103A80L,0x0000000013848020L});

    }static class FOLLOW_nn_in_method2592_static {
    public static final BitSet FOLLOW_nn_in_method2592 = new BitSet(new long[]{0x800021C000000000L,0x0000000002103A80L,0x0000000013848020L});

    }static class FOLLOW_nnmethod_in_method2596_static {
    public static final BitSet FOLLOW_nnmethod_in_method2596 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000000L,0x000000000004A000L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_method2599_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_method2599 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_method2601_static {
    public static final BitSet FOLLOW_numeric_in_method2601 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_method2607_static {
    public static final BitSet FOLLOW_nnexample_in_method2607 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x000000000004A000L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_method2610_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_method2610 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_method2612_static {
    public static final BitSet FOLLOW_numeric_in_method2612 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_referenceToExampleCompound2623_static {
    public static final BitSet FOLLOW_nnexample_in_referenceToExampleCompound2623 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x000000000004A000L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_referenceToExampleCompound2626_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_referenceToExampleCompound2626 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_referenceToExampleCompound2628_static {
    public static final BitSet FOLLOW_numeric_in_referenceToExampleCompound2628 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_advAdj2651_static {
    public static final BitSet FOLLOW_adv_in_advAdj2651 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_advAdj2653_static {
    public static final BitSet FOLLOW_adj_in_advAdj2653 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_range2660_static {
    public static final BitSet FOLLOW_numeric_in_range2660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_range2662_static {
    public static final BitSet FOLLOW_dash_in_range2662 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_numeric_in_range2664_static {
    public static final BitSet FOLLOW_numeric_in_range2664 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycleStructure_in_cycles2671_static {
    public static final BitSet FOLLOW_cycleStructure_in_cycles2671 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_cycleStructure2688_static {
    public static final BitSet FOLLOW_cd_in_cycleStructure2688 = new BitSet(new long[]{0x800021C000000000L,0x0000000002122280L,0x0000000013848020L});

    }static class FOLLOW_dashNN_in_cycleStructure2690_static {
    public static final BitSet FOLLOW_dashNN_in_cycleStructure2690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_nncycle_in_cycleStructure2693_static {
    public static final BitSet FOLLOW_nncycle_in_cycleStructure2693 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_dashNN2701_static {
    public static final BitSet FOLLOW_adj_in_dashNN2701 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_nn_in_dashNN2703_static {
    public static final BitSet FOLLOW_nn_in_dashNN2703 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_cd_in_dashNN2705_static {
    public static final BitSet FOLLOW_cd_in_dashNN2705 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_dashNN2709_static {
    public static final BitSet FOLLOW_dash_in_dashNN2709 = new BitSet(new long[]{0x800021C000000000L,0x0000000002102280L,0x0000000013848020L});

    }static class FOLLOW_adj_in_dashNN2712_static {
    public static final BitSet FOLLOW_adj_in_dashNN2712 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_nn_in_dashNN2714_static {
    public static final BitSet FOLLOW_nn_in_dashNN2714 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_cd_in_dashNN2716_static {
    public static final BitSet FOLLOW_cd_in_dashNN2716 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_numericratio_in_ratio2727_static {
    public static final BitSet FOLLOW_numericratio_in_ratio2727 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounratio_in_ratio2729_static {
    public static final BitSet FOLLOW_nounratio_in_ratio2729 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_numericratio2752_static {
    public static final BitSet FOLLOW_cd_in_numericratio2752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_colon_in_numericratio2755_static {
    public static final BitSet FOLLOW_colon_in_numericratio2755 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_numeric_in_numericratio2757_static {
    public static final BitSet FOLLOW_numeric_in_numericratio2757 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_noun_in_nounratio2769_static {
    public static final BitSet FOLLOW_noun_in_nounratio2769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_colon_in_nounratio2773_static {
    public static final BitSet FOLLOW_colon_in_nounratio2773 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_noun_in_nounratio2775_static {
    public static final BitSet FOLLOW_noun_in_nounratio2775 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_citationStructure_in_citation2787_static {
    public static final BitSet FOLLOW_citationStructure_in_citation2787 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_citation2789_static {
    public static final BitSet FOLLOW_comma_in_citation2789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_citationContent_in_citation2791_static {
    public static final BitSet FOLLOW_citationContent_in_citation2791 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_comma_in_citation2793_static {
    public static final BitSet FOLLOW_comma_in_citation2793 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citationContent_in_citationStructure2801_static {
    public static final BitSet FOLLOW_citationContent_in_citationStructure2801 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_citationContent2817_static {
    public static final BitSet FOLLOW_lrb_in_citationContent2817 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_nnp_in_citationContent2820_static {
    public static final BitSet FOLLOW_nnp_in_citationContent2820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_fw_in_citationContent2822_static {
    public static final BitSet FOLLOW_fw_in_citationContent2822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_cd_in_citationContent2824_static {
    public static final BitSet FOLLOW_cd_in_citationContent2824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_conjunction_in_citationContent2826_static {
    public static final BitSet FOLLOW_conjunction_in_citationContent2826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_nnp_in_citationContent2830_static {
    public static final BitSet FOLLOW_nnp_in_citationContent2830 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040270020L});

    }static class FOLLOW_fw_in_citationContent2832_static {
    public static final BitSet FOLLOW_fw_in_citationContent2832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040270020L});

    }static class FOLLOW_cd_in_citationContent2834_static {
    public static final BitSet FOLLOW_cd_in_citationContent2834 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040270020L});

    }static class FOLLOW_conjunction_in_citationContent2836_static {
    public static final BitSet FOLLOW_conjunction_in_citationContent2836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040270020L});

    }static class FOLLOW_rrb_in_citationContent2840_static {
    public static final BitSet FOLLOW_rrb_in_citationContent2840 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_numericOrBracketedNumeric2850_static {
    public static final BitSet FOLLOW_numeric_in_numericOrBracketedNumeric2850 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric2854_static {
    public static final BitSet FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric2854 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_bracketedNumeric2862_static {
    public static final BitSet FOLLOW_lrb_in_bracketedNumeric2862 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_numeric_in_bracketedNumeric2864_static {
    public static final BitSet FOLLOW_numeric_in_bracketedNumeric2864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_bracketedNumeric2866_static {
    public static final BitSet FOLLOW_rrb_in_bracketedNumeric2866 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_identifierOrBracketedIdentifier2873_static {
    public static final BitSet FOLLOW_cd_in_identifierOrBracketedIdentifier2873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000042000L});

    }static class FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier2876_static {
    public static final BitSet FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier2876 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier2880_static {
    public static final BitSet FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier2880 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_bracketedIdentifier2888_static {
    public static final BitSet FOLLOW_lrb_in_bracketedIdentifier2888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000042000L});

    }static class FOLLOW_cd_in_bracketedIdentifier2890_static {
    public static final BitSet FOLLOW_cd_in_bracketedIdentifier2890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000042000L});

    }static class FOLLOW_nnidentifier_in_bracketedIdentifier2893_static {
    public static final BitSet FOLLOW_nnidentifier_in_bracketedIdentifier2893 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_bracketedIdentifier2895_static {
    public static final BitSet FOLLOW_rrb_in_bracketedIdentifier2895 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_adj2903_static {
    public static final BitSet FOLLOW_jj_in_adj2903 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjr_in_adj2905_static {
    public static final BitSet FOLLOW_jjr_in_adj2905 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjs_in_adj2907_static {
    public static final BitSet FOLLOW_jjs_in_adj2907 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcj_in_adj2909_static {
    public static final BitSet FOLLOW_oscarcj_in_adj2909 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjchem_in_adj2911_static {
    public static final BitSet FOLLOW_jjchem_in_adj2911 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarrn_in_adj2913_static {
    public static final BitSet FOLLOW_oscarrn_in_adj2913 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rb_in_adv2920_static {
    public static final BitSet FOLLOW_rb_in_adv2920 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbr_in_adv2922_static {
    public static final BitSet FOLLOW_rbr_in_adv2922 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rp_in_adv2924_static {
    public static final BitSet FOLLOW_rp_in_adv2924 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbs_in_adv2926_static {
    public static final BitSet FOLLOW_rbs_in_adv2926 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wdt_in_clause2933_static {
    public static final BitSet FOLLOW_wdt_in_clause2933 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wp_poss_in_clause2935_static {
    public static final BitSet FOLLOW_wp_poss_in_clause2935 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wrb_in_clause2937_static {
    public static final BitSet FOLLOW_wrb_in_clause2937 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ex_in_clause2939_static {
    public static final BitSet FOLLOW_ex_in_clause2939 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pdt_in_clause2941_static {
    public static final BitSet FOLLOW_pdt_in_clause2941 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wp_in_clause2943_static {
    public static final BitSet FOLLOW_wp_in_clause2943 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_conjunction2950_static {
    public static final BitSet FOLLOW_cc_in_conjunction2950 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_conjunction2952_static {
    public static final BitSet FOLLOW_comma_in_conjunction2952 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_in_in_inAll2959_static {
    public static final BitSet FOLLOW_in_in_inAll2959 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inafter_in_inAll2961_static {
    public static final BitSet FOLLOW_inafter_in_inAll2961 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_inAll2963_static {
    public static final BitSet FOLLOW_inas_in_inAll2963 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inbefore_in_inAll2965_static {
    public static final BitSet FOLLOW_inbefore_in_inAll2965 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inby_in_inAll2967_static {
    public static final BitSet FOLLOW_inby_in_inAll2967 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infor_in_inAll2969_static {
    public static final BitSet FOLLOW_infor_in_inAll2969 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infrom_in_inAll2971_static {
    public static final BitSet FOLLOW_infrom_in_inAll2971 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_inAll2973_static {
    public static final BitSet FOLLOW_inin_in_inAll2973 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ininto_in_inAll2975_static {
    public static final BitSet FOLLOW_ininto_in_inAll2975 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_inAll2977_static {
    public static final BitSet FOLLOW_inof_in_inAll2977 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_inAll2979_static {
    public static final BitSet FOLLOW_inoff_in_inAll2979 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inon_in_inAll2981_static {
    public static final BitSet FOLLOW_inon_in_inAll2981 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inover_in_inAll2983_static {
    public static final BitSet FOLLOW_inover_in_inAll2983 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_inAll2985_static {
    public static final BitSet FOLLOW_inunder_in_inAll2985 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_invia_in_inAll2987_static {
    public static final BitSet FOLLOW_invia_in_inAll2987 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwith_in_inAll2989_static {
    public static final BitSet FOLLOW_inwith_in_inAll2989 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwithout_in_inAll2991_static {
    public static final BitSet FOLLOW_inwithout_in_inAll2991 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_inAll2993_static {
    public static final BitSet FOLLOW_to_in_inAll2993 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_in_in_inMost3000_static {
    public static final BitSet FOLLOW_in_in_inMost3000 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_inMost3002_static {
    public static final BitSet FOLLOW_inas_in_inMost3002 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inbefore_in_inMost3004_static {
    public static final BitSet FOLLOW_inbefore_in_inMost3004 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inby_in_inMost3006_static {
    public static final BitSet FOLLOW_inby_in_inMost3006 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infor_in_inMost3008_static {
    public static final BitSet FOLLOW_infor_in_inMost3008 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infrom_in_inMost3010_static {
    public static final BitSet FOLLOW_infrom_in_inMost3010 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_inMost3012_static {
    public static final BitSet FOLLOW_inin_in_inMost3012 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ininto_in_inMost3014_static {
    public static final BitSet FOLLOW_ininto_in_inMost3014 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_inMost3016_static {
    public static final BitSet FOLLOW_inof_in_inMost3016 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_inMost3018_static {
    public static final BitSet FOLLOW_inoff_in_inMost3018 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inon_in_inMost3020_static {
    public static final BitSet FOLLOW_inon_in_inMost3020 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inover_in_inMost3022_static {
    public static final BitSet FOLLOW_inover_in_inMost3022 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_inMost3024_static {
    public static final BitSet FOLLOW_inunder_in_inMost3024 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_invia_in_inMost3026_static {
    public static final BitSet FOLLOW_invia_in_inMost3026 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwith_in_inMost3028_static {
    public static final BitSet FOLLOW_inwith_in_inMost3028 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwithout_in_inMost3030_static {
    public static final BitSet FOLLOW_inwithout_in_inMost3030 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_inMost3032_static {
    public static final BitSet FOLLOW_to_in_inMost3032 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_numeric3039_static {
    public static final BitSet FOLLOW_cd_in_numeric3039 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_numeric3041_static {
    public static final BitSet FOLLOW_cdAlphanum_in_numeric3041 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_38_in_cdAlphanum3049_static {
    public static final BitSet FOLLOW_38_in_cdAlphanum3049 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cdAlphanum3051_static {
    public static final BitSet FOLLOW_TOKEN_in_cdAlphanum3051 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_39_in_oscarcj3064_static {
    public static final BitSet FOLLOW_39_in_oscarcj3064 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarcj3066_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarcj3066 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_40_in_oscarrn3079_static {
    public static final BitSet FOLLOW_40_in_oscarrn3079 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarrn3081_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarrn3081 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_41_in_oscarase3094_static {
    public static final BitSet FOLLOW_41_in_oscarase3094 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarase3096_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarase3096 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_42_in_oscaront3109_static {
    public static final BitSet FOLLOW_42_in_oscaront3109 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscaront3111_static {
    public static final BitSet FOLLOW_TOKEN_in_oscaront3111 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_43_in_tmunicode3124_static {
    public static final BitSet FOLLOW_43_in_tmunicode3124 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_tmunicode3126_static {
    public static final BitSet FOLLOW_TOKEN_in_tmunicode3126 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_44_in_cdunicode3139_static {
    public static final BitSet FOLLOW_44_in_cdunicode3139 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cdunicode3141_static {
    public static final BitSet FOLLOW_TOKEN_in_cdunicode3141 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_45_in_jjchem3154_static {
    public static final BitSet FOLLOW_45_in_jjchem3154 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjchem3156_static {
    public static final BitSet FOLLOW_TOKEN_in_jjchem3156 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_46_in_jjcomp3169_static {
    public static final BitSet FOLLOW_46_in_jjcomp3169 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjcomp3171_static {
    public static final BitSet FOLLOW_TOKEN_in_jjcomp3171 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_47_in_inas3185_static {
    public static final BitSet FOLLOW_47_in_inas3185 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inas3187_static {
    public static final BitSet FOLLOW_TOKEN_in_inas3187 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_48_in_inbefore3200_static {
    public static final BitSet FOLLOW_48_in_inbefore3200 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inbefore3202_static {
    public static final BitSet FOLLOW_TOKEN_in_inbefore3202 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_49_in_inafter3215_static {
    public static final BitSet FOLLOW_49_in_inafter3215 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inafter3217_static {
    public static final BitSet FOLLOW_TOKEN_in_inafter3217 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_50_in_inin3230_static {
    public static final BitSet FOLLOW_50_in_inin3230 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inin3232_static {
    public static final BitSet FOLLOW_TOKEN_in_inin3232 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_51_in_ininto3245_static {
    public static final BitSet FOLLOW_51_in_ininto3245 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_ininto3247_static {
    public static final BitSet FOLLOW_TOKEN_in_ininto3247 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_52_in_inwith3260_static {
    public static final BitSet FOLLOW_52_in_inwith3260 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inwith3262_static {
    public static final BitSet FOLLOW_TOKEN_in_inwith3262 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_53_in_inwithout3275_static {
    public static final BitSet FOLLOW_53_in_inwithout3275 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inwithout3277_static {
    public static final BitSet FOLLOW_TOKEN_in_inwithout3277 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_54_in_inby3290_static {
    public static final BitSet FOLLOW_54_in_inby3290 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inby3292_static {
    public static final BitSet FOLLOW_TOKEN_in_inby3292 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_55_in_invia3305_static {
    public static final BitSet FOLLOW_55_in_invia3305 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_invia3307_static {
    public static final BitSet FOLLOW_TOKEN_in_invia3307 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_56_in_inof3320_static {
    public static final BitSet FOLLOW_56_in_inof3320 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inof3322_static {
    public static final BitSet FOLLOW_TOKEN_in_inof3322 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_57_in_inon3335_static {
    public static final BitSet FOLLOW_57_in_inon3335 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inon3337_static {
    public static final BitSet FOLLOW_TOKEN_in_inon3337 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_58_in_infor3350_static {
    public static final BitSet FOLLOW_58_in_infor3350 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_infor3352_static {
    public static final BitSet FOLLOW_TOKEN_in_infor3352 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_59_in_infrom3365_static {
    public static final BitSet FOLLOW_59_in_infrom3365 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_infrom3367_static {
    public static final BitSet FOLLOW_TOKEN_in_infrom3367 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_60_in_inunder3380_static {
    public static final BitSet FOLLOW_60_in_inunder3380 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inunder3382_static {
    public static final BitSet FOLLOW_TOKEN_in_inunder3382 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_61_in_inover3395_static {
    public static final BitSet FOLLOW_61_in_inover3395 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inover3397_static {
    public static final BitSet FOLLOW_TOKEN_in_inover3397 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_62_in_inoff3410_static {
    public static final BitSet FOLLOW_62_in_inoff3410 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inoff3412_static {
    public static final BitSet FOLLOW_TOKEN_in_inoff3412 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_63_in_nnstate3427_static {
    public static final BitSet FOLLOW_63_in_nnstate3427 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnstate3429_static {
    public static final BitSet FOLLOW_TOKEN_in_nnstate3429 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_64_in_nntime3442_static {
    public static final BitSet FOLLOW_64_in_nntime3442 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nntime3444_static {
    public static final BitSet FOLLOW_TOKEN_in_nntime3444 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_65_in_nnmass3457_static {
    public static final BitSet FOLLOW_65_in_nnmass3457 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmass3459_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmass3459 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_66_in_nnamount3472_static {
    public static final BitSet FOLLOW_66_in_nnamount3472 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnamount3474_static {
    public static final BitSet FOLLOW_TOKEN_in_nnamount3474 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_67_in_nnmolar3487_static {
    public static final BitSet FOLLOW_67_in_nnmolar3487 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmolar3489_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmolar3489 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_68_in_nnatmosphere3502_static {
    public static final BitSet FOLLOW_68_in_nnatmosphere3502 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnatmosphere3504_static {
    public static final BitSet FOLLOW_TOKEN_in_nnatmosphere3504 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_69_in_nneq3517_static {
    public static final BitSet FOLLOW_69_in_nneq3517 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nneq3519_static {
    public static final BitSet FOLLOW_TOKEN_in_nneq3519 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_70_in_nnvol3532_static {
    public static final BitSet FOLLOW_70_in_nnvol3532 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnvol3534_static {
    public static final BitSet FOLLOW_TOKEN_in_nnvol3534 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_71_in_nnchementity3547_static {
    public static final BitSet FOLLOW_71_in_nnchementity3547 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnchementity3549_static {
    public static final BitSet FOLLOW_TOKEN_in_nnchementity3549 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_72_in_nntemp3562_static {
    public static final BitSet FOLLOW_72_in_nntemp3562 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nntemp3564_static {
    public static final BitSet FOLLOW_TOKEN_in_nntemp3564 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_73_in_nnph3577_static {
    public static final BitSet FOLLOW_73_in_nnph3577 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnph3579_static {
    public static final BitSet FOLLOW_TOKEN_in_nnph3579 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_74_in_nnflash3592_static {
    public static final BitSet FOLLOW_74_in_nnflash3592 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnflash3594_static {
    public static final BitSet FOLLOW_TOKEN_in_nnflash3594 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_75_in_nngeneral3607_static {
    public static final BitSet FOLLOW_75_in_nngeneral3607 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nngeneral3609_static {
    public static final BitSet FOLLOW_TOKEN_in_nngeneral3609 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_76_in_nnmethod3622_static {
    public static final BitSet FOLLOW_76_in_nnmethod3622 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmethod3624_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmethod3624 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_77_in_nnpressure3637_static {
    public static final BitSet FOLLOW_77_in_nnpressure3637 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnpressure3639_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpressure3639 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_78_in_nncolumn3652_static {
    public static final BitSet FOLLOW_78_in_nncolumn3652 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nncolumn3654_static {
    public static final BitSet FOLLOW_TOKEN_in_nncolumn3654 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_79_in_nnchromatography3667_static {
    public static final BitSet FOLLOW_79_in_nnchromatography3667 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnchromatography3669_static {
    public static final BitSet FOLLOW_TOKEN_in_nnchromatography3669 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_80_in_nnvacuum3682_static {
    public static final BitSet FOLLOW_80_in_nnvacuum3682 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnvacuum3684_static {
    public static final BitSet FOLLOW_TOKEN_in_nnvacuum3684 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_81_in_nncycle3697_static {
    public static final BitSet FOLLOW_81_in_nncycle3697 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nncycle3699_static {
    public static final BitSet FOLLOW_TOKEN_in_nncycle3699 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_82_in_nntimes3712_static {
    public static final BitSet FOLLOW_82_in_nntimes3712 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nntimes3714_static {
    public static final BitSet FOLLOW_TOKEN_in_nntimes3714 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_83_in_nnexample3727_static {
    public static final BitSet FOLLOW_83_in_nnexample3727 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnexample3729_static {
    public static final BitSet FOLLOW_TOKEN_in_nnexample3729 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_84_in_oscarcm3744_static {
    public static final BitSet FOLLOW_84_in_oscarcm3744 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarcm3746_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarcm3746 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_85_in_vbuse3761_static {
    public static final BitSet FOLLOW_85_in_vbuse3761 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbuse3763_static {
    public static final BitSet FOLLOW_TOKEN_in_vbuse3763 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_86_in_vbchange3776_static {
    public static final BitSet FOLLOW_86_in_vbchange3776 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbchange3778_static {
    public static final BitSet FOLLOW_TOKEN_in_vbchange3778 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_87_in_vbsubmerge3791_static {
    public static final BitSet FOLLOW_87_in_vbsubmerge3791 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsubmerge3793_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsubmerge3793 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_88_in_vbsubject3806_static {
    public static final BitSet FOLLOW_88_in_vbsubject3806 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsubject3808_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsubject3808 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_89_in_nnadd3823_static {
    public static final BitSet FOLLOW_89_in_nnadd3823 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnadd3825_static {
    public static final BitSet FOLLOW_TOKEN_in_nnadd3825 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_90_in_nnmixture3838_static {
    public static final BitSet FOLLOW_90_in_nnmixture3838 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmixture3840_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmixture3840 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_91_in_vbdilute3853_static {
    public static final BitSet FOLLOW_91_in_vbdilute3853 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdilute3855_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdilute3855 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_92_in_vbadd3868_static {
    public static final BitSet FOLLOW_92_in_vbadd3868 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbadd3870_static {
    public static final BitSet FOLLOW_TOKEN_in_vbadd3870 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_93_in_vbcharge3883_static {
    public static final BitSet FOLLOW_93_in_vbcharge3883 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbcharge3885_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcharge3885 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_94_in_vbcontain3898_static {
    public static final BitSet FOLLOW_94_in_vbcontain3898 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbcontain3900_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcontain3900 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_95_in_vbdrop3913_static {
    public static final BitSet FOLLOW_95_in_vbdrop3913 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdrop3915_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdrop3915 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_96_in_vbfill3928_static {
    public static final BitSet FOLLOW_96_in_vbfill3928 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbfill3930_static {
    public static final BitSet FOLLOW_TOKEN_in_vbfill3930 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_97_in_vbsuspend3943_static {
    public static final BitSet FOLLOW_97_in_vbsuspend3943 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsuspend3945_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsuspend3945 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_98_in_vbtreat3958_static {
    public static final BitSet FOLLOW_98_in_vbtreat3958 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbtreat3960_static {
    public static final BitSet FOLLOW_TOKEN_in_vbtreat3960 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_99_in_vbapparatus3975_static {
    public static final BitSet FOLLOW_99_in_vbapparatus3975 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbapparatus3977_static {
    public static final BitSet FOLLOW_TOKEN_in_vbapparatus3977 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_100_in_nnapparatus3990_static {
    public static final BitSet FOLLOW_100_in_nnapparatus3990 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnapparatus3992_static {
    public static final BitSet FOLLOW_TOKEN_in_nnapparatus3992 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_101_in_vbconcentrate4007_static {
    public static final BitSet FOLLOW_101_in_vbconcentrate4007 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbconcentrate4009_static {
    public static final BitSet FOLLOW_TOKEN_in_vbconcentrate4009 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_102_in_nnconcentrate4022_static {
    public static final BitSet FOLLOW_102_in_nnconcentrate4022 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnconcentrate4024_static {
    public static final BitSet FOLLOW_TOKEN_in_nnconcentrate4024 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_103_in_vbcool4039_static {
    public static final BitSet FOLLOW_103_in_vbcool4039 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbcool4041_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcool4041 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_104_in_vbdegass4056_static {
    public static final BitSet FOLLOW_104_in_vbdegass4056 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdegass4058_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdegass4058 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_105_in_vbdissolve4073_static {
    public static final BitSet FOLLOW_105_in_vbdissolve4073 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdissolve4075_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdissolve4075 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_106_in_vbdry4090_static {
    public static final BitSet FOLLOW_106_in_vbdry4090 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdry4092_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdry4092 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_107_in_nndry4105_static {
    public static final BitSet FOLLOW_107_in_nndry4105 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nndry4107_static {
    public static final BitSet FOLLOW_TOKEN_in_nndry4107 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_108_in_vbextract4122_static {
    public static final BitSet FOLLOW_108_in_vbextract4122 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbextract4124_static {
    public static final BitSet FOLLOW_TOKEN_in_vbextract4124 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_109_in_nnextract4137_static {
    public static final BitSet FOLLOW_109_in_nnextract4137 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnextract4139_static {
    public static final BitSet FOLLOW_TOKEN_in_nnextract4139 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_110_in_vbfilter4154_static {
    public static final BitSet FOLLOW_110_in_vbfilter4154 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbfilter4156_static {
    public static final BitSet FOLLOW_TOKEN_in_vbfilter4156 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_111_in_nnfilter4169_static {
    public static final BitSet FOLLOW_111_in_nnfilter4169 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnfilter4171_static {
    public static final BitSet FOLLOW_TOKEN_in_nnfilter4171 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_112_in_vbheat4186_static {
    public static final BitSet FOLLOW_112_in_vbheat4186 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbheat4188_static {
    public static final BitSet FOLLOW_TOKEN_in_vbheat4188 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_113_in_vbincrease4201_static {
    public static final BitSet FOLLOW_113_in_vbincrease4201 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbincrease4203_static {
    public static final BitSet FOLLOW_TOKEN_in_vbincrease4203 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_114_in_vbimmerse4218_static {
    public static final BitSet FOLLOW_114_in_vbimmerse4218 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbimmerse4220_static {
    public static final BitSet FOLLOW_TOKEN_in_vbimmerse4220 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_115_in_vbpartition4235_static {
    public static final BitSet FOLLOW_115_in_vbpartition4235 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbpartition4237_static {
    public static final BitSet FOLLOW_TOKEN_in_vbpartition4237 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_116_in_vbprecipitate4252_static {
    public static final BitSet FOLLOW_116_in_vbprecipitate4252 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbprecipitate4254_static {
    public static final BitSet FOLLOW_TOKEN_in_vbprecipitate4254 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_117_in_nnprecipitate4267_static {
    public static final BitSet FOLLOW_117_in_nnprecipitate4267 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnprecipitate4269_static {
    public static final BitSet FOLLOW_TOKEN_in_nnprecipitate4269 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_118_in_vbpurify4284_static {
    public static final BitSet FOLLOW_118_in_vbpurify4284 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbpurify4286_static {
    public static final BitSet FOLLOW_TOKEN_in_vbpurify4286 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_119_in_nnpurify4299_static {
    public static final BitSet FOLLOW_119_in_nnpurify4299 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnpurify4301_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpurify4301 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_120_in_vbquench4316_static {
    public static final BitSet FOLLOW_120_in_vbquench4316 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbquench4318_static {
    public static final BitSet FOLLOW_TOKEN_in_vbquench4318 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_121_in_vbrecover4333_static {
    public static final BitSet FOLLOW_121_in_vbrecover4333 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbrecover4335_static {
    public static final BitSet FOLLOW_TOKEN_in_vbrecover4335 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_122_in_vbremove4350_static {
    public static final BitSet FOLLOW_122_in_vbremove4350 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbremove4352_static {
    public static final BitSet FOLLOW_TOKEN_in_vbremove4352 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_123_in_nnremove4365_static {
    public static final BitSet FOLLOW_123_in_nnremove4365 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnremove4367_static {
    public static final BitSet FOLLOW_TOKEN_in_nnremove4367 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_124_in_vbstir4382_static {
    public static final BitSet FOLLOW_124_in_vbstir4382 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbstir4384_static {
    public static final BitSet FOLLOW_TOKEN_in_vbstir4384 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_125_in_vbsynthesize4399_static {
    public static final BitSet FOLLOW_125_in_vbsynthesize4399 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsynthesize4401_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsynthesize4401 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_126_in_nnsynthesize4414_static {
    public static final BitSet FOLLOW_126_in_nnsynthesize4414 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnsynthesize4416_static {
    public static final BitSet FOLLOW_TOKEN_in_nnsynthesize4416 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_127_in_vbwait4431_static {
    public static final BitSet FOLLOW_127_in_vbwait4431 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbwait4433_static {
    public static final BitSet FOLLOW_TOKEN_in_vbwait4433 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_128_in_vbwash4448_static {
    public static final BitSet FOLLOW_128_in_vbwash4448 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbwash4450_static {
    public static final BitSet FOLLOW_TOKEN_in_vbwash4450 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_129_in_vbyield4465_static {
    public static final BitSet FOLLOW_129_in_vbyield4465 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbyield4467_static {
    public static final BitSet FOLLOW_TOKEN_in_vbyield4467 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_130_in_nnyield4482_static {
    public static final BitSet FOLLOW_130_in_nnyield4482 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnyield4484_static {
    public static final BitSet FOLLOW_TOKEN_in_nnyield4484 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_131_in_rbconj4500_static {
    public static final BitSet FOLLOW_131_in_rbconj4500 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rbconj4502_static {
    public static final BitSet FOLLOW_TOKEN_in_rbconj4502 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_132_in_colon4515_static {
    public static final BitSet FOLLOW_132_in_colon4515 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_colon4517_static {
    public static final BitSet FOLLOW_TOKEN_in_colon4517 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_133_in_comma4530_static {
    public static final BitSet FOLLOW_133_in_comma4530 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_comma4532_static {
    public static final BitSet FOLLOW_TOKEN_in_comma4532 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_134_in_apost4545_static {
    public static final BitSet FOLLOW_134_in_apost4545 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_apost4547_static {
    public static final BitSet FOLLOW_TOKEN_in_apost4547 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_135_in_neg4560_static {
    public static final BitSet FOLLOW_135_in_neg4560 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_neg4562_static {
    public static final BitSet FOLLOW_TOKEN_in_neg4562 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_136_in_dash4575_static {
    public static final BitSet FOLLOW_136_in_dash4575 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_dash4577_static {
    public static final BitSet FOLLOW_TOKEN_in_dash4577 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_137_in_stop4590_static {
    public static final BitSet FOLLOW_137_in_stop4590 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_stop4592_static {
    public static final BitSet FOLLOW_TOKEN_in_stop4592 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_138_in_nnpercent4605_static {
    public static final BitSet FOLLOW_138_in_nnpercent4605 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnpercent4607_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpercent4607 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_139_in_lsqb4620_static {
    public static final BitSet FOLLOW_139_in_lsqb4620 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_lsqb4622_static {
    public static final BitSet FOLLOW_TOKEN_in_lsqb4622 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_140_in_rsqb4635_static {
    public static final BitSet FOLLOW_140_in_rsqb4635 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rsqb4637_static {
    public static final BitSet FOLLOW_TOKEN_in_rsqb4637 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_141_in_nnidentifier4651_static {
    public static final BitSet FOLLOW_141_in_nnidentifier4651 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnidentifier4653_static {
    public static final BitSet FOLLOW_TOKEN_in_nnidentifier4653 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_142_in_dtTHE4668_static {
    public static final BitSet FOLLOW_142_in_dtTHE4668 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_dtTHE4670_static {
    public static final BitSet FOLLOW_TOKEN_in_dtTHE4670 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_143_in_lrb4684_static {
    public static final BitSet FOLLOW_143_in_lrb4684 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_lrb4686_static {
    public static final BitSet FOLLOW_TOKEN_in_lrb4686 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_144_in_rrb4699_static {
    public static final BitSet FOLLOW_144_in_rrb4699 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rrb4701_static {
    public static final BitSet FOLLOW_TOKEN_in_rrb4701 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_145_in_cc4718_static {
    public static final BitSet FOLLOW_145_in_cc4718 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cc4720_static {
    public static final BitSet FOLLOW_TOKEN_in_cc4720 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_146_in_cd4735_static {
    public static final BitSet FOLLOW_146_in_cd4735 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cd4737_static {
    public static final BitSet FOLLOW_TOKEN_in_cd4737 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_147_in_dt4752_static {
    public static final BitSet FOLLOW_147_in_dt4752 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_dt4754_static {
    public static final BitSet FOLLOW_TOKEN_in_dt4754 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_148_in_ex4769_static {
    public static final BitSet FOLLOW_148_in_ex4769 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_ex4771_static {
    public static final BitSet FOLLOW_TOKEN_in_ex4771 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_149_in_fw4786_static {
    public static final BitSet FOLLOW_149_in_fw4786 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_fw4788_static {
    public static final BitSet FOLLOW_TOKEN_in_fw4788 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_150_in_in4803_static {
    public static final BitSet FOLLOW_150_in_in4803 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_in4805_static {
    public static final BitSet FOLLOW_TOKEN_in_in4805 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_151_in_jj4820_static {
    public static final BitSet FOLLOW_151_in_jj4820 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jj4822_static {
    public static final BitSet FOLLOW_TOKEN_in_jj4822 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_152_in_jjr4837_static {
    public static final BitSet FOLLOW_152_in_jjr4837 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjr4839_static {
    public static final BitSet FOLLOW_TOKEN_in_jjr4839 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_153_in_jjs4854_static {
    public static final BitSet FOLLOW_153_in_jjs4854 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjs4856_static {
    public static final BitSet FOLLOW_TOKEN_in_jjs4856 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_154_in_ls4871_static {
    public static final BitSet FOLLOW_154_in_ls4871 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_ls4873_static {
    public static final BitSet FOLLOW_TOKEN_in_ls4873 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_155_in_md4888_static {
    public static final BitSet FOLLOW_155_in_md4888 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_md4890_static {
    public static final BitSet FOLLOW_TOKEN_in_md4890 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_156_in_nn4905_static {
    public static final BitSet FOLLOW_156_in_nn4905 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nn4907_static {
    public static final BitSet FOLLOW_TOKEN_in_nn4907 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_157_in_nns4922_static {
    public static final BitSet FOLLOW_157_in_nns4922 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nns4924_static {
    public static final BitSet FOLLOW_TOKEN_in_nns4924 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_158_in_nnp4939_static {
    public static final BitSet FOLLOW_158_in_nnp4939 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnp4941_static {
    public static final BitSet FOLLOW_TOKEN_in_nnp4941 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_159_in_nnps4956_static {
    public static final BitSet FOLLOW_159_in_nnps4956 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnps4958_static {
    public static final BitSet FOLLOW_TOKEN_in_nnps4958 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_160_in_pdt4973_static {
    public static final BitSet FOLLOW_160_in_pdt4973 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_pdt4975_static {
    public static final BitSet FOLLOW_TOKEN_in_pdt4975 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_161_in_pos4990_static {
    public static final BitSet FOLLOW_161_in_pos4990 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_pos4992_static {
    public static final BitSet FOLLOW_TOKEN_in_pos4992 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_162_in_prp5007_static {
    public static final BitSet FOLLOW_162_in_prp5007 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_prp5009_static {
    public static final BitSet FOLLOW_TOKEN_in_prp5009 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_163_in_prp_poss5024_static {
    public static final BitSet FOLLOW_163_in_prp_poss5024 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_prp_poss5026_static {
    public static final BitSet FOLLOW_TOKEN_in_prp_poss5026 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_164_in_rb5041_static {
    public static final BitSet FOLLOW_164_in_rb5041 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rb5043_static {
    public static final BitSet FOLLOW_TOKEN_in_rb5043 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_165_in_rbr5058_static {
    public static final BitSet FOLLOW_165_in_rbr5058 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rbr5060_static {
    public static final BitSet FOLLOW_TOKEN_in_rbr5060 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_166_in_rbs5075_static {
    public static final BitSet FOLLOW_166_in_rbs5075 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rbs5077_static {
    public static final BitSet FOLLOW_TOKEN_in_rbs5077 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_167_in_rp5092_static {
    public static final BitSet FOLLOW_167_in_rp5092 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rp5094_static {
    public static final BitSet FOLLOW_TOKEN_in_rp5094 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_168_in_sym5109_static {
    public static final BitSet FOLLOW_168_in_sym5109 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_sym5111_static {
    public static final BitSet FOLLOW_TOKEN_in_sym5111 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_169_in_to5126_static {
    public static final BitSet FOLLOW_169_in_to5126 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_to5128_static {
    public static final BitSet FOLLOW_TOKEN_in_to5128 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_170_in_uh5143_static {
    public static final BitSet FOLLOW_170_in_uh5143 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_uh5145_static {
    public static final BitSet FOLLOW_TOKEN_in_uh5145 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_171_in_vb5160_static {
    public static final BitSet FOLLOW_171_in_vb5160 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vb5162_static {
    public static final BitSet FOLLOW_TOKEN_in_vb5162 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_172_in_vbd5177_static {
    public static final BitSet FOLLOW_172_in_vbd5177 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbd5179_static {
    public static final BitSet FOLLOW_TOKEN_in_vbd5179 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_173_in_vbg5194_static {
    public static final BitSet FOLLOW_173_in_vbg5194 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbg5196_static {
    public static final BitSet FOLLOW_TOKEN_in_vbg5196 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_174_in_vbn5211_static {
    public static final BitSet FOLLOW_174_in_vbn5211 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbn5213_static {
    public static final BitSet FOLLOW_TOKEN_in_vbn5213 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_175_in_vbp5228_static {
    public static final BitSet FOLLOW_175_in_vbp5228 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbp5230_static {
    public static final BitSet FOLLOW_TOKEN_in_vbp5230 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_176_in_vbz5245_static {
    public static final BitSet FOLLOW_176_in_vbz5245 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbz5247_static {
    public static final BitSet FOLLOW_TOKEN_in_vbz5247 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_177_in_wdt5262_static {
    public static final BitSet FOLLOW_177_in_wdt5262 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wdt5264_static {
    public static final BitSet FOLLOW_TOKEN_in_wdt5264 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_178_in_wp5279_static {
    public static final BitSet FOLLOW_178_in_wp5279 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wp5281_static {
    public static final BitSet FOLLOW_TOKEN_in_wp5281 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_179_in_wp_poss5296_static {
    public static final BitSet FOLLOW_179_in_wp_poss5296 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wp_poss5298_static {
    public static final BitSet FOLLOW_TOKEN_in_wp_poss5298 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_180_in_wrb5313_static {
    public static final BitSet FOLLOW_180_in_wrb5313 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wrb5315_static {
    public static final BitSet FOLLOW_TOKEN_in_wrb5315 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sentenceStructure_in_synpred2_ChemicalChunker223_static {
    public static final BitSet FOLLOW_sentenceStructure_in_synpred2_ChemicalChunker223 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker225_static {
    public static final BitSet FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker225 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphrase_in_synpred5_ChemicalChunker239_static {
    public static final BitSet FOLLOW_nounphrase_in_synpred5_ChemicalChunker239 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verbphrase_in_synpred6_ChemicalChunker241_static {
    public static final BitSet FOLLOW_verbphrase_in_synpred6_ChemicalChunker241 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphrase_in_synpred7_ChemicalChunker243_static {
    public static final BitSet FOLLOW_prepphrase_in_synpred7_ChemicalChunker243 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAfter_in_synpred8_ChemicalChunker245_static {
    public static final BitSet FOLLOW_prepphraseAfter_in_synpred8_ChemicalChunker245 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred9_ChemicalChunker250_static {
    public static final BitSet FOLLOW_advAdj_in_synpred9_ChemicalChunker250 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred10_ChemicalChunker252_static {
    public static final BitSet FOLLOW_colon_in_synpred10_ChemicalChunker252 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred11_ChemicalChunker257_static {
    public static final BitSet FOLLOW_conjunction_in_synpred11_ChemicalChunker257 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbconj_in_synpred12_ChemicalChunker259_static {
    public static final BitSet FOLLOW_rbconj_in_synpred12_ChemicalChunker259 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred13_ChemicalChunker261_static {
    public static final BitSet FOLLOW_comma_in_synpred13_ChemicalChunker261 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure1_in_synpred84_ChemicalChunker467_static {
    public static final BitSet FOLLOW_nounphraseStructure1_in_synpred84_ChemicalChunker467 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_synpred86_ChemicalChunker498_static {
    public static final BitSet FOLLOW_dt_in_synpred86_ChemicalChunker498 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred87_ChemicalChunker505_static {
    public static final BitSet FOLLOW_conjunction_in_synpred87_ChemicalChunker505 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred88_ChemicalChunker505_static {
    public static final BitSet FOLLOW_conjunction_in_synpred88_ChemicalChunker505 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BEE824L});

    }static class FOLLOW_nounphraseContent_in_synpred88_ChemicalChunker508_static {
    public static final BitSet FOLLOW_nounphraseContent_in_synpred88_ChemicalChunker508 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseOf_in_synpred89_ChemicalChunker513_static {
    public static final BitSet FOLLOW_prepphraseOf_in_synpred89_ChemicalChunker513 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_synpred90_ChemicalChunker516_static {
    public static final BitSet FOLLOW_prepphraseIN_in_synpred90_ChemicalChunker516 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred91_ChemicalChunker528_static {
    public static final BitSet FOLLOW_advAdj_in_synpred91_ChemicalChunker528 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolvePhrase_in_synpred92_ChemicalChunker533_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred92_ChemicalChunker533 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_synpred93_ChemicalChunker535_static {
    public static final BitSet FOLLOW_ratio_in_synpred93_ChemicalChunker535 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred94_ChemicalChunker537_static {
    public static final BitSet FOLLOW_noun_in_synpred94_ChemicalChunker537 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_synpred95_ChemicalChunker539_static {
    public static final BitSet FOLLOW_numeric_in_synpred95_ChemicalChunker539 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolveStructure_in_synpred96_ChemicalChunker551_static {
    public static final BitSet FOLLOW_dissolveStructure_in_synpred96_ChemicalChunker551 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred97_ChemicalChunker582_static {
    public static final BitSet FOLLOW_adj_in_synpred97_ChemicalChunker582 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred100_ChemicalChunker594_static {
    public static final BitSet FOLLOW_molecule_in_synpred100_ChemicalChunker594 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred102_ChemicalChunker606_static {
    public static final BitSet FOLLOW_adj_in_synpred102_ChemicalChunker606 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred104_ChemicalChunker613_static {
    public static final BitSet FOLLOW_molecule_in_synpred104_ChemicalChunker613 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred105_ChemicalChunker619_static {
    public static final BitSet FOLLOW_conjunction_in_synpred105_ChemicalChunker619 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000003848020L});

    }static class FOLLOW_molecule_in_synpred105_ChemicalChunker621_static {
    public static final BitSet FOLLOW_molecule_in_synpred105_ChemicalChunker621 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_synpred106_ChemicalChunker601_static {
    public static final BitSet FOLLOW_inin_in_synpred106_ChemicalChunker601 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x000000004384E820L});

    }static class FOLLOW_dtTHE_in_synpred106_ChemicalChunker603_static {
    public static final BitSet FOLLOW_dtTHE_in_synpred106_ChemicalChunker603 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_adj_in_synpred106_ChemicalChunker606_static {
    public static final BitSet FOLLOW_adj_in_synpred106_ChemicalChunker606 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_nnp_in_synpred106_ChemicalChunker609_static {
    public static final BitSet FOLLOW_nnp_in_synpred106_ChemicalChunker609 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_molecule_in_synpred106_ChemicalChunker613_static {
    public static final BitSet FOLLOW_molecule_in_synpred106_ChemicalChunker613 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020020L});

    }static class FOLLOW_unnamedmolecule_in_synpred106_ChemicalChunker615_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred106_ChemicalChunker615 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020020L});

    }static class FOLLOW_conjunction_in_synpred106_ChemicalChunker619_static {
    public static final BitSet FOLLOW_conjunction_in_synpred106_ChemicalChunker619 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000003848020L});

    }static class FOLLOW_molecule_in_synpred106_ChemicalChunker621_static {
    public static final BitSet FOLLOW_molecule_in_synpred106_ChemicalChunker621 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020020L});

    }static class FOLLOW_to_in_synpred108_ChemicalChunker657_static {
    public static final BitSet FOLLOW_to_in_synpred108_ChemicalChunker657 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_synpred109_ChemicalChunker660_static {
    public static final BitSet FOLLOW_inAll_in_synpred109_ChemicalChunker660 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred115_ChemicalChunker679_static {
    public static final BitSet FOLLOW_verb_in_synpred115_ChemicalChunker679 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_synpred116_ChemicalChunker682_static {
    public static final BitSet FOLLOW_md_in_synpred116_ChemicalChunker682 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_synpred117_ChemicalChunker685_static {
    public static final BitSet FOLLOW_adv_in_synpred117_ChemicalChunker685 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred118_ChemicalChunker688_static {
    public static final BitSet FOLLOW_adj_in_synpred118_ChemicalChunker688 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_synpred119_ChemicalChunker691_static {
    public static final BitSet FOLLOW_neg_in_synpred119_ChemicalChunker691 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_synpred120_ChemicalChunker667_static {
    public static final BitSet FOLLOW_md_in_synpred120_ChemicalChunker667 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_rbconj_in_synpred120_ChemicalChunker670_static {
    public static final BitSet FOLLOW_rbconj_in_synpred120_ChemicalChunker670 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_adv_in_synpred120_ChemicalChunker673_static {
    public static final BitSet FOLLOW_adv_in_synpred120_ChemicalChunker673 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_adj_in_synpred120_ChemicalChunker676_static {
    public static final BitSet FOLLOW_adj_in_synpred120_ChemicalChunker676 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_verb_in_synpred120_ChemicalChunker679_static {
    public static final BitSet FOLLOW_verb_in_synpred120_ChemicalChunker679 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00000L,0x0001FAF00BC8008BL});

    }static class FOLLOW_md_in_synpred120_ChemicalChunker682_static {
    public static final BitSet FOLLOW_md_in_synpred120_ChemicalChunker682 = new BitSet(new long[]{0x0000218000000002L,0x0000000000000000L,0x000000F00B800080L});

    }static class FOLLOW_adv_in_synpred120_ChemicalChunker685_static {
    public static final BitSet FOLLOW_adv_in_synpred120_ChemicalChunker685 = new BitSet(new long[]{0x0000218000000002L,0x0000000000000000L,0x000000F003800080L});

    }static class FOLLOW_adj_in_synpred120_ChemicalChunker688_static {
    public static final BitSet FOLLOW_adj_in_synpred120_ChemicalChunker688 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_neg_in_synpred120_ChemicalChunker691_static {
    public static final BitSet FOLLOW_neg_in_synpred120_ChemicalChunker691 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_synpred121_ChemicalChunker697_static {
    public static final BitSet FOLLOW_inoff_in_synpred121_ChemicalChunker697 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_synpred124_ChemicalChunker701_static {
    public static final BitSet FOLLOW_cc_in_synpred124_ChemicalChunker701 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC00A0L});

    }static class FOLLOW_comma_in_synpred124_ChemicalChunker704_static {
    public static final BitSet FOLLOW_comma_in_synpred124_ChemicalChunker704 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC0080L});

    }static class FOLLOW_prepphrase_in_synpred124_ChemicalChunker707_static {
    public static final BitSet FOLLOW_prepphrase_in_synpred124_ChemicalChunker707 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_degassMultiVerb_in_synpred134_ChemicalChunker737_static {
    public static final BitSet FOLLOW_degassMultiVerb_in_synpred134_ChemicalChunker737 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_synpred147_ChemicalChunker763_static {
    public static final BitSet FOLLOW_vbdegass_in_synpred147_ChemicalChunker763 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred165_ChemicalChunker825_static {
    public static final BitSet FOLLOW_dash_in_synpred165_ChemicalChunker825 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_nounStructure_in_synpred165_ChemicalChunker827_static {
    public static final BitSet FOLLOW_nounStructure_in_synpred165_ChemicalChunker827 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred168_ChemicalChunker842_static {
    public static final BitSet FOLLOW_citation_in_synpred168_ChemicalChunker842 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycles_in_synpred169_ChemicalChunker844_static {
    public static final BitSet FOLLOW_cycles_in_synpred169_ChemicalChunker844 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred170_ChemicalChunker846_static {
    public static final BitSet FOLLOW_molecule_in_synpred170_ChemicalChunker846 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_synpred171_ChemicalChunker848_static {
    public static final BitSet FOLLOW_apparatus_in_synpred171_ChemicalChunker848 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred172_ChemicalChunker850_static {
    public static final BitSet FOLLOW_mixture_in_synpred172_ChemicalChunker850 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred173_ChemicalChunker852_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred173_ChemicalChunker852 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_synpred175_ChemicalChunker856_static {
    public static final BitSet FOLLOW_nnstate_in_synpred175_ChemicalChunker856 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_procedureNode_in_synpred176_ChemicalChunker858_static {
    public static final BitSet FOLLOW_procedureNode_in_synpred176_ChemicalChunker858 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred177_ChemicalChunker860_static {
    public static final BitSet FOLLOW_nn_in_synpred177_ChemicalChunker860 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_synpred180_ChemicalChunker866_static {
    public static final BitSet FOLLOW_nnadd_in_synpred180_ChemicalChunker866 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_synpred182_ChemicalChunker870_static {
    public static final BitSet FOLLOW_nnexample_in_synpred182_ChemicalChunker870 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_range_in_synpred183_ChemicalChunker872_static {
    public static final BitSet FOLLOW_range_in_synpred183_ChemicalChunker872 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred188_ChemicalChunker882_static {
    public static final BitSet FOLLOW_quantity_in_synpred188_ChemicalChunker882 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred189_ChemicalChunker884_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred189_ChemicalChunker884 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_synpred191_ChemicalChunker888_static {
    public static final BitSet FOLLOW_nnph_in_synpred191_ChemicalChunker888 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_synpred193_ChemicalChunker892_static {
    public static final BitSet FOLLOW_nngeneral_in_synpred193_ChemicalChunker892 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_synpred196_ChemicalChunker898_static {
    public static final BitSet FOLLOW_nnpressure_in_synpred196_ChemicalChunker898 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_synpred207_ChemicalChunker920_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_synpred207_ChemicalChunker920 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_synpred209_ChemicalChunker924_static {
    public static final BitSet FOLLOW_numeric_in_synpred209_ChemicalChunker924 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAtmosphere_in_synpred221_ChemicalChunker962_static {
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_synpred221_ChemicalChunker962 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTime_in_synpred222_ChemicalChunker964_static {
    public static final BitSet FOLLOW_prepphraseTime_in_synpred222_ChemicalChunker964 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTemp_in_synpred223_ChemicalChunker966_static {
    public static final BitSet FOLLOW_prepphraseTemp_in_synpred223_ChemicalChunker966 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_synpred224_ChemicalChunker968_static {
    public static final BitSet FOLLOW_prepphraseIN_in_synpred224_ChemicalChunker968 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseRole_in_synpred225_ChemicalChunker970_static {
    public static final BitSet FOLLOW_prepphraseRole_in_synpred225_ChemicalChunker970 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred227_ChemicalChunker1010_static {
    public static final BitSet FOLLOW_advAdj_in_synpred227_ChemicalChunker1010 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_synpred228_ChemicalChunker1015_static {
    public static final BitSet FOLLOW_nnatmosphere_in_synpred228_ChemicalChunker1015 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred229_ChemicalChunker1043_static {
    public static final BitSet FOLLOW_advAdj_in_synpred229_ChemicalChunker1043 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_synpred234_ChemicalChunker1059_static {
    public static final BitSet FOLLOW_nntime_in_synpred234_ChemicalChunker1059 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred235_ChemicalChunker1090_static {
    public static final BitSet FOLLOW_advAdj_in_synpred235_ChemicalChunker1090 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_synpred240_ChemicalChunker1105_static {
    public static final BitSet FOLLOW_nntemp_in_synpred240_ChemicalChunker1105 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred246_ChemicalChunker1278_static {
    public static final BitSet FOLLOW_conjunction_in_synpred246_ChemicalChunker1278 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred247_ChemicalChunker1278_static {
    public static final BitSet FOLLOW_conjunction_in_synpred247_ChemicalChunker1278 = new BitSet(new long[]{0x800021C000000000L,0x0000001002102280L,0x00000000138E8020L});

    }static class FOLLOW_apparatus_in_synpred247_ChemicalChunker1281_static {
    public static final BitSet FOLLOW_apparatus_in_synpred247_ChemicalChunker1281 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnApp_in_synpred250_ChemicalChunker1298_static {
    public static final BitSet FOLLOW_nnApp_in_synpred250_ChemicalChunker1298 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnapparatus_in_synpred251_ChemicalChunker1325_static {
    public static final BitSet FOLLOW_nnapparatus_in_synpred251_ChemicalChunker1325 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred252_ChemicalChunker1329_static {
    public static final BitSet FOLLOW_dash_in_synpred252_ChemicalChunker1329 = new BitSet(new long[]{0x800021C000000000L,0x0000001002102280L,0x00000000138C8020L});

    }static class FOLLOW_nnapparatus_in_synpred252_ChemicalChunker1331_static {
    public static final BitSet FOLLOW_nnapparatus_in_synpred252_ChemicalChunker1331 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred253_ChemicalChunker1345_static {
    public static final BitSet FOLLOW_quantity_in_synpred253_ChemicalChunker1345 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred254_ChemicalChunker1347_static {
    public static final BitSet FOLLOW_adj_in_synpred254_ChemicalChunker1347 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_synpred255_ChemicalChunker1349_static {
    public static final BitSet FOLLOW_nnpressure_in_synpred255_ChemicalChunker1349 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_synpred256_ChemicalChunker1351_static {
    public static final BitSet FOLLOW_nnadd_in_synpred256_ChemicalChunker1351 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred257_ChemicalChunker1353_static {
    public static final BitSet FOLLOW_molecule_in_synpred257_ChemicalChunker1353 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred258_ChemicalChunker1355_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred258_ChemicalChunker1355 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_synpred259_ChemicalChunker1357_static {
    public static final BitSet FOLLOW_nnstate_in_synpred259_ChemicalChunker1357 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred260_ChemicalChunker1359_static {
    public static final BitSet FOLLOW_nn_in_synpred260_ChemicalChunker1359 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaront_in_synpred261_ChemicalChunker1371_static {
    public static final BitSet FOLLOW_oscaront_in_synpred261_ChemicalChunker1371 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred263_ChemicalChunker1396_static {
    public static final BitSet FOLLOW_adj_in_synpred263_ChemicalChunker1396 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred264_ChemicalChunker1400_static {
    public static final BitSet FOLLOW_quantity_in_synpred264_ChemicalChunker1400 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred265_ChemicalChunker1404_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred265_ChemicalChunker1404 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericOrIdentifierCompoundReference_in_synpred266_ChemicalChunker1410_static {
    public static final BitSet FOLLOW_numericOrIdentifierCompoundReference_in_synpred266_ChemicalChunker1410 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred267_ChemicalChunker1414_static {
    public static final BitSet FOLLOW_quantity_in_synpred267_ChemicalChunker1414 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_afterOscarCompoundStructure_in_synpred268_ChemicalChunker1425_static {
    public static final BitSet FOLLOW_afterOscarCompoundStructure_in_synpred268_ChemicalChunker1425 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_synpred270_ChemicalChunker1452_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred270_ChemicalChunker1452 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_synpred272_ChemicalChunker1458_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred272_ChemicalChunker1458 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred273_ChemicalChunker1456_static {
    public static final BitSet FOLLOW_dash_in_synpred273_ChemicalChunker1456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_synpred273_ChemicalChunker1458_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred273_ChemicalChunker1458 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});

    }static class FOLLOW_dash_in_synpred274_ChemicalChunker1463_static {
    public static final BitSet FOLLOW_dash_in_synpred274_ChemicalChunker1463 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred275_ChemicalChunker1456_static {
    public static final BitSet FOLLOW_dash_in_synpred275_ChemicalChunker1456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_synpred275_ChemicalChunker1458_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred275_ChemicalChunker1458 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_synpred275_ChemicalChunker1463_static {
    public static final BitSet FOLLOW_dash_in_synpred275_ChemicalChunker1463 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred276_ChemicalChunker1467_static {
    public static final BitSet FOLLOW_dash_in_synpred276_ChemicalChunker1467 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apost_in_synpred277_ChemicalChunker1469_static {
    public static final BitSet FOLLOW_apost_in_synpred277_ChemicalChunker1469 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount3_in_synpred279_ChemicalChunker1512_static {
    public static final BitSet FOLLOW_moleculeamount3_in_synpred279_ChemicalChunker1512 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount1_in_synpred280_ChemicalChunker1515_static {
    public static final BitSet FOLLOW_moleculeamount1_in_synpred280_ChemicalChunker1515 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred281_ChemicalChunker1522_static {
    public static final BitSet FOLLOW_asAstate_in_synpred281_ChemicalChunker1522 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred282_ChemicalChunker1533_static {
    public static final BitSet FOLLOW_quantity_in_synpred282_ChemicalChunker1533 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred285_ChemicalChunker1551_static {
    public static final BitSet FOLLOW_mixture_in_synpred285_ChemicalChunker1551 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred286_ChemicalChunker1564_static {
    public static final BitSet FOLLOW_quantity_in_synpred286_ChemicalChunker1564 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred287_ChemicalChunker1566_static {
    public static final BitSet FOLLOW_mixture_in_synpred287_ChemicalChunker1566 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred292_ChemicalChunker1589_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred292_ChemicalChunker1589 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred293_ChemicalChunker1601_static {
    public static final BitSet FOLLOW_quantity_in_synpred293_ChemicalChunker1601 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred294_ChemicalChunker1603_static {
    public static final BitSet FOLLOW_mixture_in_synpred294_ChemicalChunker1603 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred295_ChemicalChunker1607_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred295_ChemicalChunker1607 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred296_ChemicalChunker1618_static {
    public static final BitSet FOLLOW_citation_in_synpred296_ChemicalChunker1618 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred297_ChemicalChunker1620_static {
    public static final BitSet FOLLOW_quantity_in_synpred297_ChemicalChunker1620 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred299_ChemicalChunker1622_static {
    public static final BitSet FOLLOW_comma_in_synpred299_ChemicalChunker1622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_quantity1Node_in_synpred299_ChemicalChunker1625_static {
    public static final BitSet FOLLOW_quantity1Node_in_synpred299_ChemicalChunker1625 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citationStructure_in_synpred299_ChemicalChunker1627_static {
    public static final BitSet FOLLOW_citationStructure_in_synpred299_ChemicalChunker1627 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred300_ChemicalChunker1630_static {
    public static final BitSet FOLLOW_mixture_in_synpred300_ChemicalChunker1630 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred301_ChemicalChunker1643_static {
    public static final BitSet FOLLOW_asAstate_in_synpred301_ChemicalChunker1643 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_optionalUnnamedMoleculeEnding_in_synpred303_ChemicalChunker1673_static {
    public static final BitSet FOLLOW_optionalUnnamedMoleculeEnding_in_synpred303_ChemicalChunker1673 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred304_ChemicalChunker1664_static {
    public static final BitSet FOLLOW_quantity_in_synpred304_ChemicalChunker1664 = new BitSet(new long[]{0x0100000000000000L});

    }static class FOLLOW_inof_in_synpred304_ChemicalChunker1666_static {
    public static final BitSet FOLLOW_inof_in_synpred304_ChemicalChunker1666 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCE824L});

    }static class FOLLOW_unnamedmoleculeamount1_in_synpred304_ChemicalChunker1669_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_synpred304_ChemicalChunker1669 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount2_in_synpred304_ChemicalChunker1671_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_synpred304_ChemicalChunker1671 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_optionalUnnamedMoleculeEnding_in_synpred304_ChemicalChunker1673_static {
    public static final BitSet FOLLOW_optionalUnnamedMoleculeEnding_in_synpred304_ChemicalChunker1673 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount4_in_synpred306_ChemicalChunker1680_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount4_in_synpred306_ChemicalChunker1680 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount5_in_synpred307_ChemicalChunker1682_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount5_in_synpred307_ChemicalChunker1682 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount6_in_synpred308_ChemicalChunker1684_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount6_in_synpred308_ChemicalChunker1684 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred309_ChemicalChunker1701_static {
    public static final BitSet FOLLOW_quantity_in_synpred309_ChemicalChunker1701 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred310_ChemicalChunker1703_static {
    public static final BitSet FOLLOW_mixture_in_synpred310_ChemicalChunker1703 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_referenceToExampleCompound_in_synpred320_ChemicalChunker1741_static {
    public static final BitSet FOLLOW_referenceToExampleCompound_in_synpred320_ChemicalChunker1741 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_synpred321_ChemicalChunker1743_static {
    public static final BitSet FOLLOW_nnexample_in_synpred321_ChemicalChunker1743 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_optionalUnnamedMoleculeEnding_in_synpred328_ChemicalChunker1771_static {
    public static final BitSet FOLLOW_optionalUnnamedMoleculeEnding_in_synpred328_ChemicalChunker1771 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericOrIdentifierCompoundReference_in_synpred329_ChemicalChunker1783_static {
    public static final BitSet FOLLOW_numericOrIdentifierCompoundReference_in_synpred329_ChemicalChunker1783 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred330_ChemicalChunker1787_static {
    public static final BitSet FOLLOW_quantity_in_synpred330_ChemicalChunker1787 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred331_ChemicalChunker1789_static {
    public static final BitSet FOLLOW_mixture_in_synpred331_ChemicalChunker1789 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred332_ChemicalChunker1803_static {
    public static final BitSet FOLLOW_citation_in_synpred332_ChemicalChunker1803 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred333_ChemicalChunker1805_static {
    public static final BitSet FOLLOW_quantity_in_synpred333_ChemicalChunker1805 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred334_ChemicalChunker1807_static {
    public static final BitSet FOLLOW_mixture_in_synpred334_ChemicalChunker1807 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred339_ChemicalChunker1862_static {
    public static final BitSet FOLLOW_citation_in_synpred339_ChemicalChunker1862 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred340_ChemicalChunker1864_static {
    public static final BitSet FOLLOW_quantity_in_synpred340_ChemicalChunker1864 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred341_ChemicalChunker1866_static {
    public static final BitSet FOLLOW_mixture_in_synpred341_ChemicalChunker1866 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred342_ChemicalChunker1895_static {
    public static final BitSet FOLLOW_quantity_in_synpred342_ChemicalChunker1895 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred344_ChemicalChunker1906_static {
    public static final BitSet FOLLOW_quantity_in_synpred344_ChemicalChunker1906 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred345_ChemicalChunker1908_static {
    public static final BitSet FOLLOW_mixture_in_synpred345_ChemicalChunker1908 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred349_ChemicalChunker1933_static {
    public static final BitSet FOLLOW_quantity_in_synpred349_ChemicalChunker1933 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_synpred352_ChemicalChunker1964_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_synpred352_ChemicalChunker1964 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred357_ChemicalChunker2097_static {
    public static final BitSet FOLLOW_comma_in_synpred357_ChemicalChunker2097 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000048000L});

    }static class FOLLOW_measurements_in_synpred357_ChemicalChunker2100_static {
    public static final BitSet FOLLOW_measurements_in_synpred357_ChemicalChunker2100 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_synpred360_ChemicalChunker2125_static {
    public static final BitSet FOLLOW_dt_in_synpred360_ChemicalChunker2125 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurementtypes_in_synpred361_ChemicalChunker2137_static {
    public static final BitSet FOLLOW_measurementtypes_in_synpred361_ChemicalChunker2137 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield_in_synpred368_ChemicalChunker2174_static {
    public static final BitSet FOLLOW_yield_in_synpred368_ChemicalChunker2174 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_synpred379_ChemicalChunker2462_static {
    public static final BitSet FOLLOW_fw_in_synpred379_ChemicalChunker2462 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred380_ChemicalChunker2464_static {
    public static final BitSet FOLLOW_verb_in_synpred380_ChemicalChunker2464 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred381_ChemicalChunker2466_static {
    public static final BitSet FOLLOW_nn_in_synpred381_ChemicalChunker2466 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_synpred382_ChemicalChunker2468_static {
    public static final BitSet FOLLOW_quantity2Node_in_synpred382_ChemicalChunker2468 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred385_ChemicalChunker2474_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred385_ChemicalChunker2474 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred386_ChemicalChunker2476_static {
    public static final BitSet FOLLOW_molecule_in_synpred386_ChemicalChunker2476 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred387_ChemicalChunker2478_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred387_ChemicalChunker2478 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_synpred389_ChemicalChunker2482_static {
    public static final BitSet FOLLOW_sym_in_synpred389_ChemicalChunker2482 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred390_ChemicalChunker2484_static {
    public static final BitSet FOLLOW_noun_in_synpred390_ChemicalChunker2484 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred392_ChemicalChunker2488_static {
    public static final BitSet FOLLOW_cd_in_synpred392_ChemicalChunker2488 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred393_ChemicalChunker2490_static {
    public static final BitSet FOLLOW_comma_in_synpred393_ChemicalChunker2490 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred394_ChemicalChunker2492_static {
    public static final BitSet FOLLOW_adj_in_synpred394_ChemicalChunker2492 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_minimixture_in_synpred396_ChemicalChunker2500_static {
    public static final BitSet FOLLOW_minimixture_in_synpred396_ChemicalChunker2500 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_synpred397_ChemicalChunker2502_static {
    public static final BitSet FOLLOW_fw_in_synpred397_ChemicalChunker2502 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred398_ChemicalChunker2504_static {
    public static final BitSet FOLLOW_verb_in_synpred398_ChemicalChunker2504 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_synpred399_ChemicalChunker2506_static {
    public static final BitSet FOLLOW_quantity2Node_in_synpred399_ChemicalChunker2506 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_synpred400_ChemicalChunker2508_static {
    public static final BitSet FOLLOW_nnyield_in_synpred400_ChemicalChunker2508 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred403_ChemicalChunker2514_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred403_ChemicalChunker2514 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred404_ChemicalChunker2516_static {
    public static final BitSet FOLLOW_molecule_in_synpred404_ChemicalChunker2516 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred405_ChemicalChunker2518_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred405_ChemicalChunker2518 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_synpred407_ChemicalChunker2522_static {
    public static final BitSet FOLLOW_sym_in_synpred407_ChemicalChunker2522 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred408_ChemicalChunker2524_static {
    public static final BitSet FOLLOW_noun_in_synpred408_ChemicalChunker2524 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred410_ChemicalChunker2528_static {
    public static final BitSet FOLLOW_cd_in_synpred410_ChemicalChunker2528 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred411_ChemicalChunker2530_static {
    public static final BitSet FOLLOW_comma_in_synpred411_ChemicalChunker2530 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred412_ChemicalChunker2532_static {
    public static final BitSet FOLLOW_adj_in_synpred412_ChemicalChunker2532 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_synpred418_ChemicalChunker2599_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_synpred418_ChemicalChunker2599 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_synpred419_ChemicalChunker2601_static {
    public static final BitSet FOLLOW_numeric_in_synpred419_ChemicalChunker2601 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_synpred421_ChemicalChunker2610_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_synpred421_ChemicalChunker2610 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_synpred422_ChemicalChunker2626_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_synpred422_ChemicalChunker2626 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericratio_in_synpred430_ChemicalChunker2727_static {
    public static final BitSet FOLLOW_numericratio_in_synpred430_ChemicalChunker2727 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred431_ChemicalChunker2755_static {
    public static final BitSet FOLLOW_colon_in_synpred431_ChemicalChunker2755 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_numeric_in_synpred431_ChemicalChunker2757_static {
    public static final BitSet FOLLOW_numeric_in_synpred431_ChemicalChunker2757 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred432_ChemicalChunker2773_static {
    public static final BitSet FOLLOW_colon_in_synpred432_ChemicalChunker2773 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_noun_in_synpred432_ChemicalChunker2775_static {
    public static final BitSet FOLLOW_noun_in_synpred432_ChemicalChunker2775 = new BitSet(new long[]{0x0000000000000002L});

    }
}